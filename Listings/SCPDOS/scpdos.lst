     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "./Source/Include/driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> ;Command Code equates
    23                              <1>     drvINIT         equ 0
    24                              <1>     drvMEDCHK       equ 1
    25                              <1>     drvBUILDBPB     equ 2
    26                              <1>     drvIOCTLREAD    equ 3
    27                              <1>     drvREAD         equ 4
    28                              <1>     drvNONDESTREAD  equ 5
    29                              <1>     drvINSTATUS     equ 6
    30                              <1>     drvFLUSHINBUF   equ 7
    31                              <1>     drvWRITE        equ 8
    32                              <1>     drvWRITEVERIFY  equ 9
    33                              <1>     drvOUTSTATUS    equ 10
    34                              <1>     drvFLUSHOUTBUF  equ 11
    35                              <1>     drvIOCTLWRITE   equ 12
    36                              <1>     drvOPEN         equ 13
    37                              <1>     drvCLOSE        equ 14
    38                              <1>     drvREMMEDCHECK  equ 15
    39                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    40                              <1>     drvIOCTL        equ 19
    41                              <1>     drvGETDRVMAP    equ 23
    42                              <1>     drvSETDRVMAP    equ 24
    43                              <1>     
    44                              <1> ;Driver Error equates 
    45                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    46                              <1>     drvBadUnit      equ 1   ;Unknown unit
    47                              <1>     drvNotReady     equ 2   ;Device not ready
    48                              <1>     drvBadCmd       equ 3   ;Unknown command
    49                              <1>     drvCRCErr       equ 4   ;CRC Error
    50                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    51                              <1>     drvBadSeek      equ 6   ;Seek error
    52                              <1>     drvBadMed       equ 7   ;Unknown media
    53                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    54                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    55                              <1>     drvWriteFault   equ 10  ;Write Fault
    56                              <1>     drvReadFault    equ 11  ;Read Fault
    57                              <1>     drvGenFault     equ 12  ;General Fault
    58                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    59                              <1> 
    60                              <1> ;Driver status word status bit meanings
    61                              <1>     drvErrStatus    equ 8000h  
    62                              <1>     drvDonStatus    equ 0100h
    63                              <1>     drvBsyStatus    equ 0200h
    64                              <1> ;Driver structures
    65                              <1> 
    66                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    67                              <1> 
    68                              <1>     .hdrlen resb 1  ;Length of the request header
    69                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    70                              <1>     .cmdcde resb 1  ;Command code
    71                              <1>     .status resw 1  ;Status word
    72                              <1>     .devptr resq 1  ;Device queue pointer field
    73                              <1> 
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> struc drvReqHdr
    77                              <1>     drvReqHdrM
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
    78                              <1> endstruc
    79                              <1> 
    80                              <1> struc initReqPkt  ;Init Request Packet
    81                              <1> 
    82                              <1>     drvReqHdrM   ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
    83 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    84 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    85 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    86 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    87                              <1> 
    88                              <1> endstruc
    89                              <1> 
    90                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    91                              <1> 
    92                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
    93 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    94 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    95 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    96                              <1> 
    97                              <1> endstruc
    98                              <1> 
    99                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   100                              <1> 
   101                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   102 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   103 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   104 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   105                              <1> 
   106                              <1> endstruc
   107                              <1> 
   108                              <1> struc ioReqPkt   ;IO Request Packet
   109                              <1> 
   110                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   111 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   112 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   113 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   114 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   115 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   116                              <1> 
   117                              <1> endstruc
   118                              <1> 
   119                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
   120                              <1>     
   121                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   122 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc statusReqPkt   ;Status Request Packet
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   129                              <1> 
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   133                              <1> 
   134                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   135                              <1>      
   136                              <1> endstruc
   137                              <1> 
   138                              <1> struc openReqPkt ;Open Device Request Packet
   139                              <1> 
   140                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   141                              <1>      
   142                              <1> endstruc
   143                              <1> 
   144                              <1> struc closeReqPkt ;Close Device Request Packet
   145                              <1> 
   146                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   147                              <1>      
   148                              <1> endstruc
   149                              <1> 
   150                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   151                              <1> 
   152                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   153                              <1>      
   154                              <1> endstruc
   155                              <1> 
   156                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   157                              <1> 
   158                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   159 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   160 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   161 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   162 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   163 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   164                              <1> 
   165                              <1> endstruc
   166                              <1> 
   167                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   168                              <1>     
   169                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   170                              <1> 
   171                              <1> endstruc
   172                              <1> 
   173                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   174                              <1>     
   175                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   176                              <1> 
   177                              <1> endstruc
     6                                  %include "./Source/Include/fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    17                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    18                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    19                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    20                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    21                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    22                              <1> ;-------------------------------------------------------;
    23                              <1> 
    24                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    25                              <1> 
    26 00000000 ??????              <1>     .jmpBoot    resb 3 
    27 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    28 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    29 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    30 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    31 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    32 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    33 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    34 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    35 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    36 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    37 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    38 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    39 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    40                              <1> 
    41 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    42 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    43 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    44 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    45 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    46 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    47                              <1> 
    48                              <1> endstruc
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    51                              <1> 
    52 00000000 ??????              <1>     .jmpBoot    resb 3
    53 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    54 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    55 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    56 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    57 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    58 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    59 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    60 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    61 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    62 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    63 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    64 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    65 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    66                              <1> 
    67 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    68 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    69 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    70 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    71 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    72 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    73 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    74                              <1> 
    75 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    76 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    77 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    78 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    79 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    80 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mbr
    85 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    86 000001B8 ????????            <1>     .diskID     resb 4
    87 000001BC ????                <1>     .reserved   resb 2
    88 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    89 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    90 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    91 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    92 000001FE ????                <1>     .mbrSig     resb 2
    93                              <1> endstruc
    94                              <1> 
    95                              <1> struc mbrEntry
    96 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    97 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    98 00000004 ??                  <1>     .ptnType    resb 1
    99 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   100 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   101 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc ebr
   105 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   106 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   107 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   108 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   109 000001FE ????                <1>     .mbrSig     resb 2
   110                              <1> endstruc
   111                              <1> 
   112                              <1> 
   113                              <1> struc fatDirEntry
   114                              <1> 
   115 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   116 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   121 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   122 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   127                              <1> 
   128                              <1> endstruc
   129                              <1> ;Directory attribute equates
   130                              <1>     dirReadOnly     equ 01h
   131                              <1>     dirHidden       equ 02h
   132                              <1>     dirSystem       equ 04h
   133                              <1>     dirVolumeID     equ 08h
   134                              <1>     dirDirectory    equ 10h
   135                              <1>     dirArchive      equ 20h
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1> 
   138                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   139                              <1> 
   140 00000000 ??????              <1>     .jmpBoot                resb 3 
   141 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   142 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   143 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   144 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   145 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   146 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   147 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   148 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   149 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   150 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   151 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   152 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   153 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   154 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   155 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   156 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   157 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   158 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   159                              <1> 
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc FSInfo
   163                              <1> 
   164 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   165 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   166 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   167 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   168 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   169 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   170 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   171                              <1> 
   172                              <1> endstruc
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsPhysDrive    equ 4000h   ;CDS initialised 
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> ;Bit 7 reserved 0
   166                              <1> ;Bits 8-12 reserved 0
   167                              <1> ;Critical Error handling
   168                              <1> critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   169                              <1> ;Buffering on writes
   170                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   171                              <1> ;FCB opened file?
   172                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   173                              <1> ;Attribute Byte
   174                              <1> readOnlyFile    equ 1h
   175                              <1> hiddenFile      equ 2h
   176                              <1> systemFile      equ 4h
   177                              <1> volumeLabel     equ 8h
   178                              <1> directoryFile   equ 10h ;Directory entry
   179                              <1> archiveFile     equ 20h
   180                              <1> ;Device Info equates
   181                              <1> ;For a block device, bits [5:0] contain the drive number
   182                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   183                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   184                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   185                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   186                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   187                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   188                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   189                              <1> blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   190                              <1> devCharDev      equ 80h ;If set, it is a char device!
   191                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   192                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   193                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   194                              <1> blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   195                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   212 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   213 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   214 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   215 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   216 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   217 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   218 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   219                              <1>     .dataarea:             ;Points to the start of the data area
   220                              <1> endstruc
   221                              <1> ;Buffer Flag equates
   222                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   223                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   224                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   225                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   226                              <1> refBuffer   equ 20h ;Data in buffer referenced by an application
   227                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   228                              <1> ;Note! A buffer is marked as referenced IF it has been accessed via 
   229                              <1> ; a Read or Write call. 
   230                              <1> ; When a buffer is used temporarily for internal purposes (as when DOS
   231                              <1> ; gives a driver a buffer) and then DOS reads data from that buffer (such as
   232                              <1> ; a BUILD BPB situation), the data is left as unreferenced as the use for that 
   233                              <1> ; buffer goes away before the end of the DOS call, and there is no danger of.
   234                              <1> ; of misbehaviour.
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc fcb
   282                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   283 00000000 ??                  <1>     .driveNum   resb 1
   284 00000001 ????????????????    <1>     .filename   resb 8
   285 00000009 ??????              <1>     .fileext    resb 3
   286 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   287                              <1> ;One block consists of 128 records, of size denoted in the below
   288 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   289 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   290 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   291 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   292 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   293 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   294 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   295 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   296 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   297                              <1>     ;If record size > 64, high byte is ignored.
   298                              <1>     ;Used for random read and write operations to find the right record
   299                              <1> endstruc
   300                              <1> 
   301                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   302 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   303 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   304 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   305 0000000D ????????            <1>     .dirOffset  resd 1  ;Entry within dir (made a dword but will never be so)
   306 00000011 ????????            <1>     .parCluster resd 1  ;Parent cluster number
   307 00000015 ??                  <1>     .atrribFnd  resb 1  ;Attrib of file found
   308 00000016 ????                <1>     .fileTime   resw 1  ;File time
   309 00000018 ????                <1>     .fileDate   resw 1  ;File date
   310 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   311 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   312                              <1> endstruc
   313                              <1> 
   314                              <1> struc psp
   315 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   316 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   317 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   318 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   319 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   320 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   321 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   322 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   323 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   324 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   325 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   326 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   327 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   328                              <1> ;Extra handle arrays are grouped into a linked list
   329                              <1> ;The below are in the same place as in DOS
   330 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   331 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   332                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   333 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   334 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc clkStruc
   338 00000000 ????                <1>     .dateWord   resw 1
   339 00000002 ??                  <1>     .minutes    resb 1
   340 00000003 ??                  <1>     .hours      resb 1
   341 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   342 00000005 ??                  <1>     .seconds    resb 1
   343                              <1> endstruc
   344                              <1> 
   345                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   346                              <1> ;for a space of 64Gb
   347                              <1> dosAPTsize  equ 60*4096
   348                              <1> 
   349                              <1> ;Critical Error AH bitfield equates
   350                              <1> critRead    equ 0h
   351                              <1> critWrite   equ 1h
   352                              <1> critDOS     equ 0h
   353                              <1> critFAT     equ 2h
   354                              <1> critDir     equ 4h
   355                              <1> critData    equ 6h
   356                              <1> critFailOK  equ 8h
   357                              <1> critRetryOK equ 10h
   358                              <1> critIgnorOK equ 20h
   359                              <1> critCharDev equ 80h
   360                              <1> 
   361                              <1> critIgnore  equ 0
   362                              <1> critRetry   equ 1
   363                              <1> critAbort   equ 2
   364                              <1> critFail    equ 3
   365                              <1> 
   366                              <1> ;MISC ASCII control chars
   367                              <1> NUL equ 00h ;^@         | ASCII Null
   368                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text)
   369                              <1> BEL equ 07h ;^G         | ASCII Bell
   370                              <1> BSP equ 08h ;^H         | ASCII Backspace
   371                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   372                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   373                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   374                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   375                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   376                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   377                              <1> SPC equ 20h ;Printable  | ASCII Space
   378                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
     8                                  %include "./Source/Debug/debSym.inc"
     9                              <1> ;This file will include the debuging symbols
    10                              <1> 
    11                              <1> %define true 1
    12                              <1> %define false 0
    13                              <1> 
    14                              <1> ;Switch the DEBUG to false in production!
    15                              <1> %define DEBUG false
    16                              <1> %define DPBINFO false
    17                              <1> %define REGS true
    18                              <1> %define ENDSTATUS true
    19                              <1> %define ALLOCTEST true
    20                              <1> 
    21                              <1> 
    22                              <1> ;Use this space as the debug stack
    23                              <1> %define debStackTop 80000h
     9                                  %include "./Source/Include/dosError.inc"
    10                              <1> ;DOS Error codes
    11                              <1> 
    12                              <1> ;Extended Error Codes
    13                              <1> errInvFnc   equ 1   ;Invalid function number
    14                              <1> errFnf      equ 2   ;File not found
    15                              <1> errPnf      equ 3   ;Path not found
    16                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    17                              <1> errAccDen   equ 5   ;Access denied (to resource)
    18                              <1> errBadHdl   equ 6   ;Invalid handle
    19                              <1> errMCBbad   equ 7   ;MCB's destroyed
    20                              <1> errNoMem    equ 8   ;Insufficient memory
    21                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    22                              <1> errBadEnv   equ 10  ;Invalid environment
    23                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    24                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    25                              <1> errInvDat   equ 13  ;Invalid data
    26                              <1> ;           equ 14  ;Reserved
    27                              <1> errBadDrv   equ 15  ;Invalid drive specified
    28                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    29                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    30                              <1> errNoFil    equ 18  ;No more files
    31                              <1> ;The following are Driver error codes + 19
    32                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    33                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    34                              <1> errUnkUnt   equ 20  ;Unknown Unit
    35                              <1> errDrvNR    equ 21  ;Drive not ready
    36                              <1> errUnkCmd   equ 22  ;Unknown Command
    37                              <1> errCRCerr   equ 23  ;Data (CRC) error
    38                              <1> errBadRLn   equ 24  ;Bad request structure length
    39                              <1> errSekErr   equ 25  ;Seek error
    40                              <1> errUnkMed   equ 26  ;Unknown media type
    41                              <1> errSecNF    equ 27  ;Sector not Found
    42                              <1> errNoPap    equ 28  ;Printer out of paper
    43                              <1> errWF       equ 29  ;Write fault
    44                              <1> errRF       equ 30  ;Read fault
    45                              <1> errGF       equ 31  ;General fault
    46                              <1> ;Number 32-33 reserved
    47                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    48                              <1> errNoFCB    equ 35  ;FCB unavailable
    49                              <1> ;Numbers 36-82 reserved
    50                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    51                              <1> errFI44     equ 83  ;Fail on INT 44h
    52                              <1> ;Numbers 84-88 reserved
    53                              <1> ;-----------------------------------------------------------------------------
    54                              <1> ;Error Loci
    55                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    56                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    57                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    58                              <1> eLocChr     equ 4   ;Serial/Character Device error
    59                              <1> eLocMem     equ 5   ;Related to RAM
    60                              <1> ;-----------------------------------------------------------------------------
    61                              <1> ;Error Actions
    62                              <1> eActRet     equ 1   ;Retry
    63                              <1> eActDRet    equ 2   ;Delay then retry
    64                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    65                              <1> eActAbt     equ 4   ;Abort with cleanup
    66                              <1> eActKil     equ 5   ;Abort without cleanup
    67                              <1> eActIgn     equ 6   ;Ignore error
    68                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    69                              <1> ;-----------------------------------------------------------------------------
    70                              <1> ;Error classes
    71                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    72                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    73                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    74                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    75                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    76                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    77                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    78                              <1> eClsNotFnd  equ 8   ;Resource not found
    79                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    80                              <1> eClsLocked  equ 10  ;Resource Locked
    81                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    82                              <1> eClsClash   equ 12  ;Resource already exists!
    83                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  Segment .text align=1   ;Init code
    11                                  %include "./Source/Sysinit/sysInit.asm"
    12                              <1> ; We arrive here with the following values in the registers.
    13                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    14                              <1> ; dx  = Int 33h boot device number
    15                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    16                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    17 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    18 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    18 0000000B 909090909090909090- <1>
    18 00000014 909090909090909090- <1>
    18 0000001D 909090909090909090- <1>
    18 00000026 909090909090909090- <1>
    18 0000002F 909090909090909090- <1>
    18 00000038 909090909090909090- <1>
    18 00000041 909090909090909090- <1>
    18 0000004A 909090909090909090- <1>
    18 00000053 909090909090909090- <1>
    18 0000005C 909090909090909090- <1>
    18 00000065 909090909090909090- <1>
    18 0000006E 909090909090909090- <1>
    18 00000077 909090909090909090- <1>
    18 00000080 909090909090909090- <1>
    18 00000089 909090909090909090- <1>
    18 00000092 909090909090909090- <1>
    18 0000009B 909090909090909090- <1>
    18 000000A4 909090909090909090- <1>
    18 000000AD 909090909090909090- <1>
    18 000000B6 909090909090909090- <1>
    18 000000BF 909090909090909090- <1>
    18 000000C8 909090909090909090- <1>
    18 000000D1 909090909090909090- <1>
    18 000000DA 909090909090909090- <1>
    18 000000E3 909090909090909090- <1>
    18 000000EC 909090909090909090- <1>
    18 000000F5 909090909090909090- <1>
    18 000000FE 9090                <1>
    19                              <1> ;First move the alignment of the DOSSEG to 4Kb
    20 00000100 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    21 00000101 52                  <1>     push rdx    ;Save dl on stack briefly
    22 00000102 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    23 00000107 0F32                <1>     rdmsr
    24 00000109 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    25 0000010B 48C1E720            <1>     shl rdi, 20h        ;Shift high
    26 0000010F 89C7                <1>     mov edi, eax        ;Get the low dword in
    27 00000111 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    28 00000114 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    29 0000011B 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    30 00000122 89F8                <1>     mov eax, edi
    31 00000124 4889FA              <1>     mov rdx, rdi
    32 00000127 48C1EA20            <1>     shr rdx, 20h
    33 0000012B 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    34 0000012D 5A                  <1>     pop rdx
    35                              <1> ;------------------------------------------------;
    36                              <1> ;              Connect Debugger                  ;
    37                              <1> ;------------------------------------------------;
    38                              <1> %if DEBUG
    39                              <1> ;Only connect if in debug mode
    40                              <1>     mov eax, 0C501h ;Connect debugger
    41                              <1>     int 35h
    42                              <1> %endif
    43                              <1> ;------------------------------------------------;
    44                              <1> ;           Sanitise the data area               ;
    45                              <1> ;------------------------------------------------;
    46                              <1> ; This call initialises ALL fields in the DOS    ;
    47                              <1> ; data area with 0's. Thus any fields, which     ;
    48                              <1> ; need to be initialised with a 0 value, are     ;
    49                              <1> ; initialised for free.                          ;
    50                              <1> ;------------------------------------------------;
    51 0000012E B9[29D80300]        <1>     mov ecx, dSegLen
    52 00000133 30C0                <1>     xor al, al
    53 00000135 57                  <1>     push rdi    ;Temp save rdi on the stack
    54 00000136 F3AA                <1>     rep stosb
    55 00000138 5F                  <1>     pop rdi
    56                              <1> ;------------------------------------------------;
    57                              <1> ;          Start saving Basic DOS data           ;
    58                              <1> ;------------------------------------------------;
    59 00000139 64881425[10C00300]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    60                              <1> ;Copy DOS to its final resting place
    61 00000141 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    61 00000146 [00C00300]          <1>
    62 0000014A 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    62 0000014F [08C00300]          <1>
    63 00000153 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    64 00000156 4881C7[29D80300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    65 0000015D 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    66 00000164 B900100000          <1>     mov ecx, 1000h
    67 00000169 F348A5              <1>     rep movsq
    68                              <1> 
    69 0000016C CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    70 0000016E 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    71 00000172 664489C0            <1>     mov ax, r8w
    72 00000176 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
    73 0000017E 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    74 00000186 64C60425[69C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    74 0000018E 05                  <1>
    75                              <1>     ;mov byte fs:[numPhysVol], 0    ;Number of logical drives
    76 0000018F 6466C70425-         <1>     mov word fs:[numFiles], 5      ;Default 8 files, at start 5
    76 00000194 [28C30300]0500      <1>
    77 0000019A 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
    77 0000019F [2AC30300]1400      <1>
    78 000001A5 64C60425[6AC00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
    78 000001AD 01                  <1>
    79                              <1>     ;If no detected Int 33h devices, halt 
    80 000001AE 49C1E810            <1>     shr r8, 2*8
    81 000001B2 4584C0              <1>     test r8b, r8b
    82 000001B5 0F84BE0A0000        <1>     jz errorInit
    83                              <1> ;------------------------------------------------;
    84                              <1> ;          Add additional page tables            ;
    85                              <1> ;------------------------------------------------;
    86                              <1> ;This will allow for up to 64Gb of addressible space
    87 000001BB 4889EF              <1>     mov rdi, rbp
    88                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    89 000001BE B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
    90 000001C3 57                  <1>     push rdi
    91 000001C4 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    91 000001CD 00                  <1>
    92                              <1> pdtLoop:
    93 000001CE 48AB                <1>     stosq
    94 000001D0 480500002000        <1>     add rax, 200000h
    95 000001D6 FFC9                <1>     dec ecx
    96 000001D8 75F4                <1>     jnz pdtLoop
    97 000001DA 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
    98                              <1> ;Now we add every 4kb page to the page directory pointer table
    99                              <1> ;15 4kb pages to consider
   100 000001DB 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   101 000001DE 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   102 000001E1 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   103 000001E8 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   104 000001EF B93C000000          <1>     mov ecx, 60
   105 000001F4 480D03000000        <1>     or rax, 3h      ;present and r/w
   106                              <1> pdptLoop:
   107 000001FA 48AB                <1>     stosq
   108 000001FC 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   109 00000202 FFC9                <1>     dec ecx
   110 00000204 75F4                <1>     jnz pdptLoop
   111 00000206 0F20DF              <1>     mov rdi, cr3
   112 00000209 0F22DF              <1>     mov cr3, rdi
   113                              <1> 
   114                              <1> ;------------------------------------------------;
   115                              <1> ;                   MCB inits                    ;
   116                              <1> ;------------------------------------------------;
   117                              <1> mcbInit:
   118 0000020C B820E80000          <1>     mov eax, 0E820h
   119 00000211 CD35                <1>     int 35h
   120                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   121 00000213 E804010000          <1>     call .mcbFindAddress
   122 00000218 7349                <1>     jnc .mcbi1  ;If found, proceed
   123                              <1>     ;Here, we try use E801h
   124 0000021A B801E80000          <1>     mov eax, 0E801h
   125 0000021F CD35                <1>     int 35h
   126 00000221 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   127 00000224 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   128 00000227 85C0                <1>     test eax, eax
   129 00000229 741B                <1>     jz .worst
   130 0000022B C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   131 0000022E C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   132 00000231 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   133 00000239 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   134 00000241 E909010000          <1>     jmp mcbBuild
   135                              <1> .worst:
   136                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   137 00000246 B800002000          <1>     mov eax, 200000h
   138 0000024B 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   138 00000250 [08C00300]          <1>
   139 00000254 29D8                <1>     sub eax, ebx
   140 00000256 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   141 0000025E E9EC000000          <1>     jmp mcbBuild 
   142                              <1> .mcbi1:
   143 00000263 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   144 00000266 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   144 0000026F 00                  <1>
   145 00000270 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   146 00000274 0F85C2000000        <1>     jne .mcbFail
   147 0000027A 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   148                              <1>     ;PCI hole always exists so this value will always be a dword
   149 0000027E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   150 00000286 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   151 00000289 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   152 0000028C 4881FB00000001      <1>     cmp rbx, 1000000h  
   153 00000293 773C                <1>     ja .skipISA
   154                              <1> ;Here we deal with ISA hole issues
   155 00000295 B820E80000          <1>     mov eax, 0E820h
   156 0000029A CD35                <1>     int 35h
   157 0000029C 48B800000001000000- <1>     mov rax, 1000000h
   157 000002A5 00                  <1>
   158 000002A6 E871000000          <1>     call .mcbFindAddress
   159 000002AB 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   160 000002B1 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   160 000002BA 00                  <1>
   161 000002BB 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   162 000002BF 0F858A000000        <1>     jne mcbBuild  
   163 000002C5 488B5808            <1>     mov rbx, qword [rax + 8]
   164 000002C9 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   165                              <1> .skipISA:
   166 000002D1 B820E80000          <1>     mov eax, 0E820h
   167 000002D6 CD35                <1>     int 35h
   168 000002D8 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   168 000002E1 00                  <1>
   169 000002E2 E835000000          <1>     call .mcbFindAddress
   170 000002E7 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   171 000002E9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   171 000002F2 00                  <1>
   172 000002F3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   173 000002F7 7556                <1>     jne mcbBuild   
   174 000002F9 488B5808            <1>     mov rbx, qword [rax + 8]
   175                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   176 000002FD 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   176 00000306 00                  <1>
   177 00000307 4839CB              <1>     cmp rbx, rcx
   178 0000030A 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   179 0000030E 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   179 00000313 [1BC00300]          <1>
   180 00000317 E933000000          <1>     jmp mcbBuild
   181                              <1> .mcbFindAddress:
   182                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   183                              <1> ;Entry: rax = Address of arena to search for
   184                              <1> ;       rsi = Pointer to memory map
   185                              <1> ;       ecx = Number of 24 byte entries
   186                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   187                              <1> ;       CF=CY : value in rax not found
   188 0000031C 56                  <1>     push rsi
   189 0000031D 51                  <1>     push rcx
   190 0000031E 50                  <1>     push rax
   191                              <1> .mfa0:
   192 0000031F 483B06              <1>     cmp rax, qword [rsi]
   193 00000322 7410                <1>     je .mcbAddressFound
   194 00000324 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   195 0000032B FFC9                <1>     dec ecx
   196 0000032D 79F0                <1>     jns .mfa0
   197                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   198 0000032F 58                  <1>     pop rax
   199 00000330 59                  <1>     pop rcx
   200 00000331 5E                  <1>     pop rsi
   201 00000332 F9                  <1>     stc
   202 00000333 C3                  <1>     ret
   203                              <1> .mcbAddressFound:
   204 00000334 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   205 00000337 59                  <1>     pop rcx ;Pop old rax value off
   206 00000338 59                  <1>     pop rcx
   207 00000339 5E                  <1>     pop rsi
   208 0000033A F8                  <1>     clc
   209 0000033B C3                  <1>     ret
   210                              <1> .mcbFail:
   211 0000033C 488D2D5D090000      <1>     lea rbp, mcbFailmsg
   212 00000343 B804130000          <1>     mov eax, 1304h
   213 00000348 CD30                <1>     int 30h
   214 0000034A E92A090000          <1>     jmp errorInit
   215                              <1> 
   216                              <1> mcbBuild:
   217                              <1> ;Actually build the MCB chain here
   218                              <1> ;Start by computing the difference between userbase and DOS area
   219                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   220 0000034F 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   220 00000354 [08C00300]          <1>
   221 00000358 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   222 0000035F 56                  <1>     push rsi    ;Save ptr
   223 00000360 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   224 00000367 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   225 0000036A 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   226 00000372 5B                  <1>     pop rbx
   227 00000373 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   228 00000376 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   229 0000037E 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   230 00000386 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   231 00000389 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   232 0000038C 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   232 00000391 [24C00300]          <1>
   233                              <1> 
   234                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   235 00000395 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   235 0000039D 00000000            <1>
   236 000003A1 746E                <1>     jz .skipISA
   237                              <1>     ;Here if an ISA hole exists, place a MCB around it
   238 000003A3 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   239                              <1>     ;Remove one MCB worth of space from alloc
   240 000003AA 31C9                <1>     xor ecx, ecx
   241 000003AC 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   242 000003AF 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   243 000003B5 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   244 000003B8 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   245 000003BB 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   246 000003BE C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   247 000003C1 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   248 000003C9 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   248 000003D2 00                  <1>
   249 000003D3 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   250 000003D6 480510000000        <1>     add rax, mcb_size
   251 000003DC 4829C1              <1>     sub rcx, rax    ;Take their difference
   252 000003DF C1E904              <1>     shr ecx, 4
   253 000003E2 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   254 000003E5 C1E104              <1>     shl ecx, 4  ;Get bytes again
   255 000003E8 4881C310000000      <1>     add rbx, mcb_size
   256 000003EF 4801CB              <1>     add rbx, rcx
   257                              <1>     ;RBX should now be at 16Mb
   258 000003F2 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   259 000003F5 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   260 000003FD 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   261 00000405 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   262 00000408 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   263 0000040E 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   264                              <1> .skipISA:
   265                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   266                              <1>     ;rbx points to a block with "Z" marker
   267 00000411 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   267 00000419 00000000            <1>
   268 0000041D 7470                <1>     jz .exit
   269                              <1>     ;Add PCI hole MCB
   270 0000041F 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   271                              <1>     ;Remove one MCB worth of space from alloc
   272 00000426 31C9                <1>     xor ecx, ecx
   273 00000428 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   274 0000042B 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   275 00000431 C1E104              <1>     shl ecx, 4  ;Get bytes
   276 00000434 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   277 00000437 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   278 0000043A C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   279 0000043D 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   280 00000445 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   280 0000044E 00                  <1>
   281 0000044F 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   282 00000452 480510000000        <1>     add rax, mcb_size
   283 00000458 4829C1              <1>     sub rcx, rax    ;Take their difference
   284 0000045B C1E904              <1>     shr ecx, 4
   285 0000045E 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   286 00000461 C1E104              <1>     shl ecx, 4  ;Get bytes again
   287 00000464 4881C310000000      <1>     add rbx, mcb_size
   288 0000046B 4801CB              <1>     add rbx, rcx
   289                              <1>     ;RBX should now be at 4Gb
   290 0000046E C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   291 00000471 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   292 00000479 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   292 0000047E [1BC00300]          <1>
   293 00000482 48C1E904            <1>     shr rcx, 4
   294 00000486 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   295 0000048C 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   296                              <1> .exit:
   297                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   298 0000048F 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   299                              <1> ;------------------------------------------------;
   300                              <1> ;          Kernel inits and adjustments          ;
   301                              <1> ;------------------------------------------------;
   302                              <1> ;Adjust Interrupt Entries Int 40h-49h
   303                              <1> adjInts:
   304 00000496 B340                <1>     mov bl, 40h
   305 00000498 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   306 0000049D CD35                <1>     int 35h
   307 0000049F B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   308 000004A4 488D3D6A080000      <1>     lea rdi, intData
   309 000004AB 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   310                              <1> .ai0:
   311 000004AD B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   312 000004B2 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   313 000004B5 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   314                              <1> .ai1:
   315 000004B8 CD35                <1>     int 35h
   316 000004BA 4881C708000000      <1>     add rdi, 8
   317 000004C1 FFC1                <1>     inc ecx
   318 000004C3 81F950000000        <1>     cmp ecx, 50h
   319 000004C9 75E2                <1>     jne .ai0
   320                              <1> 
   321                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   322                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   323                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   324                              <1>     %if DEBUG
   325                              <1> debugPopUpMsg:
   326                              <1>     push rbx
   327                              <1>     push rbp
   328                              <1>     push rcx
   329                              <1>     push rdx
   330                              <1>     mov ecx, 53 ;A large number of lines
   331                              <1>     xor edx, edx    ;COM 1
   332                              <1> .cls:
   333                              <1>     mov eax, 010Ah ;Transmit Line feed
   334                              <1>     int 34h
   335                              <1>     dec ecx
   336                              <1>     jnz .cls
   337                              <1>     lea rbx, qword [debPrintNullString + rbp]
   338                              <1>     lea rbp, .msg
   339                              <1>     call rbx
   340                              <1>     jmp short .exit
   341                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   342                              <1> .exit:
   343                              <1>     pop rdx
   344                              <1>     pop rcx
   345                              <1>     pop rbp
   346                              <1>     pop rbx
   347                              <1>     %endif
   348                              <1> 
   349                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   350 000004CB 488D15A7070000      <1>     lea rdx, errorInit ;Get segment start address
   351 000004D2 B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   352 000004D7 CD41                <1>     int 41h
   353 000004D9 488D1599070000      <1>     lea rdx, errorInit ;Get segment start address
   354 000004E0 B844250000          <1>     mov eax, 2544h
   355 000004E5 CD41                <1>     int 41h
   356                              <1> ;------------------------------------------------;
   357                              <1> ;          Driver Adjustments and inits          ;
   358                              <1> ;------------------------------------------------;
   359                              <1> ;Modify the pointers in nData before putting them in the data area
   360 000004E7 48012DA7080000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   361 000004EE 48012DAA080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   362 000004F5 48012DAB080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   363                              <1> ;Copy the Null driver to its location in Sysvars
   364 000004FC B922000000          <1>     mov ecx, drvHdr_size
   365 00000501 488D358D080000      <1>     lea rsi, qword [nData]
   366 00000508 488DBD[6CC00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   367 0000050F F3A4                <1>     rep movsb   
   368                              <1> 
   369                              <1> ;Adjust the addresses in the other driver headers 
   370 00000511 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   370 00000513 [3724000000000000]  <1>
   371 0000051B B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   372 00000520 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   373                              <1> adjDrivers:
   374 00000524 E83D070000          <1>     call adjustDrvHdr
   375 00000529 E2F9                <1>     loop adjDrivers
   376                              <1> 
   377                              <1> ;Open NUL
   378                              <1> ;NUL opened
   379                              <1> ;Open CON
   380                              <1> conInit:    ;Rather than keeping this resident... do it here
   381                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   382 0000052B 488D95[1E270000]    <1>     lea rdx, qword [rbp + fastOutput]
   383 00000532 B849250000          <1>     mov eax, 2549h
   384 00000537 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   385 00000539 488D95[26270000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   386 00000540 B83B250000          <1>     mov eax, 253Bh
   387 00000545 CD41                <1>     int 41h ;Hook int 3Bh
   388                              <1> .ci0:
   389 00000547 B401                <1>     mov ah, 01      ;Get buffer status
   390 00000549 CD36                <1>     int 36h
   391 0000054B 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   392 0000054D 30E4                <1>     xor ah, ah
   393 0000054F CD36                <1>     int 36h ;Read key to flush from buffer
   394 00000551 EBF4                <1>     jmp short .ci0
   395                              <1> .ci1:
   396 00000553 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   397 00000558 CD30                <1>     int 30h
   398 0000055A B402                <1>     mov ah, 02h
   399 0000055C 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   400 0000055E 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   401 00000560 CD30                <1>     int 30h
   402 00000562 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   403 00000564 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   404 00000569 CD30                <1>     int 30h
   405                              <1> 
   406                              <1>     ;Save ptr to ConHdr in Sysvars
   407 0000056B 488D85[37240000]    <1>     lea rax, qword [rbp + conHdr]
   408 00000572 6448890425-         <1>     mov qword fs:[vConPtr], rax
   408 00000577 [44C00300]          <1>
   409                              <1> 
   410                              <1>     ;Save ptr to ClkHdr in Sysvars
   411 0000057B 488D85[9D240000]    <1>     lea rax, qword [rbp + clkHdr]
   412 00000582 6448890425-         <1>     mov qword fs:[clockPtr], rax
   412 00000587 [3CC00300]          <1>
   413                              <1> 
   414                              <1> ;------------------------------------------------;
   415                              <1> ;         Link DOS to temporary Buffer           ;
   416                              <1> ;------------------------------------------------;
   417                              <1> tempBufferInit:
   418 0000058B 488DBD[19010000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   419 00000592 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   419 00000597 [4EC00300]          <1>
   420 0000059B 31C0                <1>     xor eax, eax
   421 0000059D 48FFC8              <1>     dec rax
   422 000005A0 48AB                <1>     stosq   ;.nextBufPtr, end of list
   423 000005A2 AA                  <1>     stosb   ;.driveNumber, Free entry
   424 000005A3 48FFC0              <1>     inc rax
   425 000005A6 AA                  <1>     stosb   ;.bufferFlags, No flags
   426                              <1> ;------------------------------------------------;
   427                              <1> ;         Init msd driver, create DPB            ;
   428                              <1> ;------------------------------------------------;
   429                              <1> storageInits:
   430                              <1> ;First save dpb pointer in sysvars
   431 000005A7 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   432 000005AE 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   432 000005B3 [2CC00300]          <1>
   433                              <1> ;Open Mass Storage
   434                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   435                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   436                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   437                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   438                              <1>     ;mov al, byte fs:[numPhysVol]
   439                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   440                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   441                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   442                              <1>     ;Check if it returned OK first!
   443                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   444                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   445                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   446                              <1>     ;mov byte fs:[numPhysVol], al
   447                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   448                              <1> 
   449                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   450 000005B7 E8FB070000          <1>     call diskInit
   451 000005BC 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   452 000005BF 648A0425[68C00300]  <1>     mov al, byte fs:[numPhysVol]
   453 000005C7 488D95[DE2D0000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   454 000005CE 30C9                <1>     xor cl, cl  ;Clear counter
   455 000005D0 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   455 000005D5 [2CC00300]          <1>
   456                              <1> .si0:   
   457 000005D9 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   458 000005DC B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   459 000005DE CD41                <1>     int 41h
   460                              <1> ;Add other data to DPB
   461 000005E0 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   462 000005E3 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   463 000005E6 50                  <1>     push rax
   464 000005E7 488D87[BF240000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   465 000005EE 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   466 000005F2 58                  <1>     pop rax
   467 000005F3 FEC1                <1>     inc cl
   468 000005F5 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   469 000005F7 7416                <1>     je .si1
   470 000005F9 50                  <1>     push rax
   471 000005FA 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   472 000005FE 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   473 00000602 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   474 00000605 58                  <1>     pop rax
   475 00000606 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   476 0000060D EBCA                <1>     jmp short .si0
   477                              <1> .si1:
   478                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   479 0000060F 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   480 00000617 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   481                              <1> ;------------------------------------------------;
   482                              <1> ;          Find largest sector size              ;
   483                              <1> ;------------------------------------------------;
   484                              <1> sectorSizeSearch:
   485                              <1> ;Done by reading BPB's for each drive
   486 0000061A 488D9D[DE2D0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   487                              <1>     
   488                              <1>     ;Go thru each block individually
   489 00000621 31C0                <1>     xor eax, eax
   490 00000623 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   491                              <1> .findLargest:
   492 00000626 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   493 0000062A 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   494 0000062F 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   495 00000636 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   496 00000639 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   497 0000063C 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   498 0000063E 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   498 00000643 [4CC00300]          <1>
   499                              <1>     
   500                              <1> ;------------------------------------------------;
   501                              <1> ;                 Temp CDS inits                 ;
   502                              <1> ;------------------------------------------------;
   503                              <1> tempCDS:
   504                              <1> ;Build a temporary CDS for Drive A to use it for booting
   505 00000647 488DBD[67C50300]    <1>     lea rdi, qword [rbp + tmpCDS]  ;Use Temp CDS in the SDA
   506 0000064E 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   506 00000653 [56C00300]          <1>
   507                              <1>     ;"A:\"+NULL char (in rev order because LITTLE ENDIAN!!)
   508 00000657 C707413A5C00        <1>     mov dword [rdi + cds.sCurrentPath], 005C3A41h  
   509 0000065D 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   510 00000663 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   510 00000668 [2CC00300]          <1>
   511 0000066C 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   512 00000670 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   513                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   514                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   515                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   516                              <1>     ;cds.dStartCluster is 0 since we zero-ed the data area earlier
   517                              <1> ;------------------------------------------------;
   518                              <1> ;     Set up general PSP areas and DOS vars      ;
   519                              <1> ;------------------------------------------------;
   520                              <1> ;Additional DOS Vars init
   521                              <1>     ;xor eax, eax
   522                              <1>     ;mov byte fs:[currentDrv], al ;Current Drive = Drive A
   523                              <1>     ;mov byte fs:[breakFlag], al  ;Break off
   524                              <1>     ;mov byte fs:[verifyFlag], al ;Write only
   525                              <1>     ;mov byte fs:[singleDrv], al  ;Only used on single drive systems
   526                              <1>     ;mov byte fs:[critErrFlag], al   ;Not in critical error
   527                              <1>     ;mov byte fs:[inDOS], al      ;Not in DOS
   528 00000676 64C60425[64C30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   528 0000067E FF                  <1>
   529                              <1>     ;mov word fs:[errorLevel], ax   ;Last return code is 0, no error
   530                              <1>     ;mov byte fs:[allocStrat], al    ;First Fit
   531 0000067F 64C60425[2EC30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   531 00000687 2F                  <1>
   532                              <1>     ;mov byte fs:[vConUnread], al   ;vCon has no unread data!
   533                              <1> 
   534                              <1> ;Set network machine name to... nothing!
   535 00000688 488DBD[31C30300]    <1>     lea rdi, qword [rbp + machineName]
   536 0000068F B910000000          <1>     mov ecx, 10h    ;16 chars long
   537 00000694 B020                <1>     mov al, SPC ;Space char
   538 00000696 F3AA                <1>     rep stosb   ;Fill with space chars
   539                              <1>     ;xor al, al
   540                              <1>     ;mov byte fs:[serverCnt], al ;Set server call count to zero
   541                              <1>     ;mov word fs:[machineNum], ax   ;Clear machine number
   542                              <1> 
   543                              <1> ;Patch Data Table init
   544 00000698 488DBD[41C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   545 0000069F 488D85[101E0000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   546 000006A6 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   547 000006A8 488D85[1A1E0000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   548 000006AF 48AB                <1>     stosq
   549 000006B1 488D85[241E0000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   550 000006B8 48AB                <1>     stosq
   551 000006BA 488D85[2E1E0000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   552 000006C1 48AB                <1>     stosq
   553                              <1> 
   554                              <1> ;Initial PSP Init
   555 000006C3 488D1D36F9FFFF      <1>     lea rbx, qword [tempPSP]
   556 000006CA 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   556 000006CF [7AC30300]          <1>
   557 000006D3 53                  <1>     push rbx
   558 000006D4 4881C380000000      <1>     add rbx, psp.dta
   559 000006DB 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   559 000006E0 [72C30300]          <1>
   560 000006E4 5B                  <1>     pop rbx
   561 000006E5 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   562 000006EA C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   563 000006F1 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   564 000006F5 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   565 000006F9 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   566 000006FD 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   567 00000701 48B80000000102FFFF- <1>     mov rax, 0FFFFFF0201000000h  ;Store default handles in JFT
   567 0000070A FF                  <1>
   568 0000070B 48AB                <1>     stosq   ;8 bytes
   569 0000070D 31C0                <1>     xor eax, eax
   570 0000070F 50                  <1>     push rax    ;Save 0 on the stack
   571 00000710 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   572 00000713 48AB                <1>     stosq   ;16 bytes
   573 00000715 AB                  <1>     stosd   ;20 bytes
   574 00000716 58                  <1>     pop rax ;Get 0 back
   575 00000717 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   576 0000071F 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   577 00000723 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   578 00000727 4889DA              <1>     mov rdx, rbx
   579 0000072A B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   580 0000072F CD41                <1>     int 41h
   581 00000731 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   582 00000735 B843350000          <1>     mov eax, 3543h
   583 0000073A CD41                <1>     int 41h
   584 0000073C 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   585 00000740 B844350000          <1>     mov eax, 3544h
   586 00000745 CD41                <1>     int 41h
   587 00000747 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   588                              <1> 
   589 0000074B B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   590 00000750 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   591 00000754 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   592                              <1> ;------------------------------------------------;
   593                              <1> ;          Default File Handle Creation          ;
   594                              <1> ;------------------------------------------------;
   595                              <1> defaultFileHandles:
   596                              <1> ;Fill in the default file table entries
   597 00000756 488D9D[8EC00300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   598 0000075D 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   599 00000764 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   600 0000076A 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   600 0000076F [34C00300]          <1>
   601                              <1> ;GOTO FIRST FILE 
   602 00000773 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   603                              <1> ;Write CON
   604 0000077A 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   605 0000077F 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   606 00000785 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   607 00000789 C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   608                              <1>     ;No EOF when reading from the device
   609 0000078D 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   609 00000792 [44C00300]          <1>
   610 00000796 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   611                              <1>     ;Ignore disk related fields and Date/Time of open
   612 0000079A 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   613                              <1>     ;11 chars in 8.3 name
   614 0000079E 488D3546050000      <1>     lea rsi, conName
   615 000007A5 B903000000          <1>     mov ecx, 3
   616 000007AA F3A4                <1>     rep movsb   ;Move the three bytes
   617 000007AC B908000000          <1>     mov ecx, 8  ;8 Spaces left to print
   618 000007B1 B020                <1>     mov al, SPC ;Space char
   619 000007B3 F3AA                <1>     rep stosb
   620 000007B5 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   620 000007BA [7AC30300]          <1>
   621 000007BE 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   622                              <1> ;GOTO NEXT ENTRY
   623 000007C2 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   624                              <1> ;Write AUX
   625 000007C9 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   626 000007CE 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   627 000007D4 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   628 000007D8 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   629                              <1>     ;No EOF when reading from the device
   630 000007DC 488B85[59240000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   631 000007E3 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   632                              <1>     ;Ignore disk related fields and Date/Time of open
   633 000007E7 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   634                              <1>     ;11 chars in 8.3 name
   635 000007EB 488D35FD040000      <1>     lea rsi, auxName
   636 000007F2 B903000000          <1>     mov ecx, 3
   637 000007F7 F3A4                <1>     rep movsb   ;Move the three bytes
   638 000007F9 B908000000          <1>     mov ecx, 8  ;8 Spaces left to print
   639 000007FE B020                <1>     mov al, SPC ;Space char
   640 00000800 F3AA                <1>     rep stosb
   641 00000802 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   641 00000807 [7AC30300]          <1>
   642 0000080B 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   643                              <1> ;GOTO NEXT ENTRY
   644 0000080F 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   645                              <1> ;Write PRN
   646 00000816 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   647 0000081B 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   648 00000821 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   649 00000825 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   650                              <1>     ;Want EOF when reading from to the device
   651 00000829 488B85[7B240000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   652 00000830 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   653                              <1>     ;Ignore disk related fields and Date/Time of open
   654 00000834 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   655                              <1>     ;11 chars in 8.3 name
   656 00000838 488D35B4040000      <1>     lea rsi, prnName
   657 0000083F B903000000          <1>     mov ecx, 3
   658 00000844 F3A4                <1>     rep movsb   ;Move the three bytes
   659 00000846 B908000000          <1>     mov ecx, 8  ;8 Spaces left to print
   660 0000084B B020                <1>     mov al, SPC ;Space char
   661 0000084D F3AA                <1>     rep stosb
   662 0000084F 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   662 00000854 [7AC30300]          <1>
   663 00000858 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   664                              <1> ;Zero word 0 of entry 4 and 5
   665 0000085C 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   666 00000863 31C0                <1>     xor eax, eax
   667                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   668                              <1>     ; which is ok as these are empty entries, ready to be used)
   669 00000865 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   670 00000867 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   671 0000086E 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   672                              <1> ;------------------------------------------------;
   673                              <1> ;               Load CONFIG.SYS                  ;
   674                              <1> ;------------------------------------------------;
   675                              <1> ;------------------------------------------------;
   676                              <1> ;              Process CONFIG.SYS                ;
   677                              <1> ;------------------------------------------------;
   678                              <1> ;------------------------------------------------;
   679                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   680                              <1> ;------------------------------------------------;
   681                              <1> ;------------------------------------------------;
   682                              <1> ;   Setup Final Data Areas With Overrides from   ;
   683                              <1> ;                  CONFIG.SYS                    ;
   684                              <1> ;------------------------------------------------;
   685                              <1> ;------------------------------------------------;
   686                              <1> ;           Load Command interpreter             ;
   687                              <1> ;------------------------------------------------;
   688 00000870 488D1513040000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   689 00000877 B409                <1>     mov ah, 09h
   690 00000879 CD41                <1>     int 41h
   691                              <1> ;Resize DOS allocation before loading COMMAND.COM
   692 0000087B 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   692 00000880 [24C00300]          <1>
   693 00000884 4981C010000000      <1>     add r8, mcb.program
   694 0000088B BB39110000          <1>     mov ebx, dynamicDataAreaLength
   695 00000890 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   696 00000893 FFC3                <1>     inc ebx
   697 00000895 B44A                <1>     mov ah, 4Ah
   698 00000897 CD41                <1>     int 41h
   699                              <1>     
   700                              <1>     %if DEBUG && ALLOCTEST
   701                              <1> ;Test Allocation, Growth and Deallocation
   702                              <1>     mov r15, qword fs:[currentPSP]
   703                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   704                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   705                              <1>     mov ah, 48h ;Allocate
   706                              <1>     int 41h
   707                              <1> 
   708                              <1>     mov r8, rax ;Move the pointer to r8
   709                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   710                              <1>     mov ah, 4Ah
   711                              <1>     int 41h
   712                              <1> 
   713                              <1>     mov ah, 49h ;Free r8
   714                              <1>     int 41h
   715                              <1>     mov qword fs:[currentPSP], r15
   716                              <1>     %endif
   717                              <1> 
   718                              <1>     %if ENDSTATUS
   719                              <1> debugFinal:
   720                              <1>     ;Print system state
   721 00000899 55                  <1>     push rbp    ;Only rbp really matters here
   722 0000089A 4989E8              <1>     mov r8, rbp
   723                              <1> 
   724 0000089D 488D2DD0020000      <1>     lea rbp, .msg2
   725 000008A4 4D8D88[C3010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   726 000008AB 41FFD1              <1>     call r9
   727                              <1> 
   728 000008AE 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   729 000008B5 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   729 000008BA [08C00300]          <1>
   730                              <1> 
   731 000008BE 4D8D88[FE040000]    <1>     lea r9, qword [r8 + overlayQword]
   732 000008C5 41FFD1              <1>     call r9
   733                              <1> 
   734 000008C8 4881C31B000000      <1>     add rbx, 19+8
   735 000008CF 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   735 000008D4 [00C00300]          <1>
   736 000008D8 41FFD1              <1>     call r9
   737                              <1> 
   738 000008DB 4881C31B000000      <1>     add rbx, 19+8
   739 000008E2 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   739 000008E7 [24C00300]          <1>
   740 000008EB 41FFD1              <1>     call r9
   741                              <1> 
   742 000008EE 4881C31C000000      <1>     add rbx, 20+8
   743 000008F5 4D8D88[BB040000]    <1>     lea r9, qword [r8 + overlayDword]
   744 000008FC 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   745 00000904 41FFD1              <1>     call r9
   746                              <1> 
   747 00000907 4881C312000000      <1>     add rbx, 10+8
   748 0000090E 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   749 00000916 41FFD1              <1>     call r9
   750                              <1> 
   751 00000919 4881C312000000      <1>     add rbx, 10+8
   752 00000920 64488B0425-         <1>     mov rax, qword fs:[longMem]
   752 00000925 [1BC00300]          <1>
   753 00000929 4D8D88[FE040000]    <1>     lea r9, qword [r8 + overlayQword]
   754 00000930 41FFD1              <1>     call r9
   755                              <1> 
   756 00000933 4881C31B000000      <1>     add rbx, 19+8
   757 0000093A 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   757 0000093F [2CC00300]          <1>
   758 00000943 41FFD1              <1>     call r9
   759                              <1> 
   760 00000946 4881C31B000000      <1>     add rbx, 19+8
   761 0000094D 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   761 00000952 [34C00300]          <1>
   762 00000956 41FFD1              <1>     call r9
   763                              <1> 
   764 00000959 4881C31B000000      <1>     add rbx, 19+8
   765 00000960 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   765 00000965 [4EC00300]          <1>
   766 00000969 41FFD1              <1>     call r9
   767                              <1> 
   768 0000096C 4881C31B000000      <1>     add rbx, 19+8
   769 00000973 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   769 00000978 [56C00300]          <1>
   770 0000097C 41FFD1              <1>     call r9
   771                              <1> 
   772 0000097F 4D8D88[49040000]    <1>     lea r9, qword [r8 + overlayByte]
   773                              <1> 
   774 00000986 4881C32C000000      <1>     add rbx, 25+19
   775 0000098D 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
   775 00000993 [68C00300]          <1>
   776 00000997 41FFD1              <1>     call r9
   777                              <1> 
   778 0000099A 4881C31E000000      <1>     add rbx, 30
   779 000009A1 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   779 000009A7 [12C00300]          <1>
   780 000009AB 41FFD1              <1>     call r9
   781                              <1> 
   782 000009AE 4881C31E000000      <1>     add rbx, 30
   783 000009B5 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   783 000009BB [11C00300]          <1>
   784 000009BF 41FFD1              <1>     call r9
   785                              <1> 
   786 000009C2 4881C310000000      <1>     add rbx, 16
   787 000009C9 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   787 000009CF [10C00300]          <1>
   788 000009D3 0441                <1>     add al, "A"
   789 000009D5 8803                <1>     mov byte [rbx], al
   790                              <1> 
   791 000009D7 488D2D10000000      <1>     lea rbp, .msg
   792 000009DE 4D8D88[C3010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   793 000009E5 41FFD1              <1>     call r9
   794 000009E8 5D                  <1>     pop rbp
   795 000009E9 E99E010000          <1>     jmp l1
   796 000009EE 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   796 000009F7 206261736520464646- <1>
   796 00000A00 464646464646464646- <1>
   796 00000A09 46464646680A0D      <1>
   797 00000A10 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   797 00000A19 464646464646464646- <1>
   797 00000A22 464646464646680A0D  <1>
   798 00000A2B 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   798 00000A34 464646464646464646- <1>
   798 00000A3D 46464646464668200A- <1>
   798 00000A46 0D                  <1>
   799 00000A47 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   799 00000A50 464646464646466820  <1>
   800 00000A59 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   800 00000A62 464646464646466820  <1>
   801 00000A6B 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   801 00000A74 464646464646464646- <1>
   801 00000A7D 464646464646680A0D  <1>
   802 00000A86 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   802 00000A8F 464646464646464646- <1>
   802 00000A98 464646464646680A0D  <1>
   803 00000AA1 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   803 00000AAA 464646464646464646- <1>
   803 00000AB3 464646464646680A0D  <1>
   804 00000ABC 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   804 00000AC5 464646464646464646- <1>
   804 00000ACE 464646464646680A0D  <1>
   805 00000AD7 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   805 00000AE0 464646464646464646- <1>
   805 00000AE9 464646464646680A0D  <1>
   806 00000AF2 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   806 00000AFB 204C6F676963616C20- <1>
   806 00000B04 447269766573204646- <1>
   806 00000B0D 680A0D              <1>
   807 00000B10 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   807 00000B19 204669786564204472- <1>
   807 00000B22 697665732020204646- <1>
   807 00000B2B 680A0D              <1>
   808 00000B2E 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   808 00000B37 2052656D6F7661626C- <1>
   808 00000B40 652044727673204646- <1>
   808 00000B49 680A0D              <1>
   809 00000B4C 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   809 00000B55 65205A3A0A0D        <1>
   810 00000B5B 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   810 00000B64 4F4D4D414E442E434F- <1>
   810 00000B6D 4D2E2E2E0A0D00      <1>
   811 00000B74 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   811 00000B7D 626F6F742073756D6D- <1>
   811 00000B86 6172790A0D00        <1>
   812                              <1>     %endif
   813                              <1> l1:
   814 00000B8C B401                <1>     mov ah, 01h  ;Write with echo
   815 00000B8E CD41                <1>     int 41h
   816 00000B90 3C00                <1>     cmp al, 0
   817 00000B92 7402                <1>     je l2
   818 00000B94 EBF6                <1>     jmp short l1
   819                              <1> l2:
   820 00000B96 B407                <1>     mov ah, 07h
   821 00000B98 CD41                <1>     int 41h
   822 00000B9A 3C42                <1>     cmp al, 42h
   823 00000B9C 75EE                <1>     jne l1
   824                              <1> l3:
   825 00000B9E 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   825 00000BA3 [41C50300]0000      <1>
   826 00000BA9 488D9D[EDC30300]    <1>     lea rbx, qword [rbp + secdReqHdr] ;Get the address of this request block
   827 00000BB0 488D85[41C50300]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   828 00000BB7 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   829 00000BBA C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   830 00000BBE 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   831 00000BC4 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   832 00000BC8 C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   833 00000BCF FF95[A7240000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   834 00000BD5 FF95[AF240000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr] 
   835                              <1> 
   836 00000BDB B403                <1>     mov ah, 03h
   837 00000BDD 30FF                <1>     xor bh, bh
   838 00000BDF CD30                <1>     int 30h
   839 00000BE1 30D2                <1>     xor dl, dl  ;0 column
   840 00000BE3 B402                <1>     mov ah, 02h
   841 00000BE5 CD30                <1>     int 30h
   842                              <1> 
   843 00000BE7 488D9D[41C50300]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   844 00000BEE 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   845 00000BF2 E832000000          <1>     call .clkHexToBCD
   846 00000BF7 B40E                <1>     mov ah, 0Eh
   847 00000BF9 B03A                <1>     mov al, ":"
   848 00000BFB CD30                <1>     int 30h
   849 00000BFD 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   850 00000C01 E823000000          <1>     call .clkHexToBCD
   851 00000C06 B40E                <1>     mov ah, 0Eh
   852 00000C08 B03A                <1>     mov al, ":"
   853 00000C0A CD30                <1>     int 30h
   854 00000C0C 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   855 00000C10 E814000000          <1>     call .clkHexToBCD
   856 00000C15 B40E                <1>     mov ah, 0Eh
   857 00000C17 B02E                <1>     mov al, "."
   858 00000C19 CD30                <1>     int 30h
   859 00000C1B 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   860 00000C1F E805000000          <1>     call .clkHexToBCD
   861 00000C24 E963FFFFFF          <1>     jmp l1
   862                              <1> .clkHexToBCD:
   863                              <1> ;Converts a Hex byte into two BCD digits
   864                              <1> ;Takes input in each nybble of al
   865 00000C29 53                  <1>     push rbx
   866 00000C2A 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   866 00000C33 00                  <1>
   867 00000C34 31D2                <1>     xor edx, edx
   868 00000C36 48F7F3              <1>     div rbx
   869 00000C39 80C230              <1>     add dl, '0'
   870 00000C3C 80FA39              <1>     cmp dl, '9'
   871 00000C3F 7603                <1>     jbe .chtb0
   872 00000C41 80C207              <1>     add dl, 'A'-'0'-10
   873                              <1> .chtb0:
   874 00000C44 88D1                <1>     mov cl, dl    ;Save remainder byte
   875 00000C46 31D2                <1>     xor edx, edx
   876 00000C48 48F7F3              <1>     div rbx
   877 00000C4B 80C230              <1>     add dl, '0'
   878 00000C4E 80FA39              <1>     cmp dl, '9'
   879 00000C51 7603                <1>     jbe .chtb1
   880 00000C53 80C207              <1>     add dl, 'A'-'0'-10
   881                              <1> .chtb1:
   882 00000C56 88D5                <1>     mov ch, dl    ;Save remainder byte
   883                              <1> 
   884 00000C58 88E8                <1>     mov al, ch    ;Get most sig digit into al
   885 00000C5A B40E                <1>     mov ah, 0Eh
   886 00000C5C CD30                <1>     int 30h
   887 00000C5E 88C8                <1>     mov al, cl    ;Get least sig digit into al
   888 00000C60 B40E                <1>     mov ah, 0Eh
   889 00000C62 CD30                <1>     int 30h
   890 00000C64 5B                  <1>     pop rbx
   891 00000C65 C3                  <1>     ret
   892                              <1> ;--------------------------------
   893                              <1> ;       PROCS FOR SYSINIT       :
   894                              <1> ;--------------------------------
   895                              <1> adjustDrvHdr:
   896                              <1> ;Input: rsi = Effective address of driver in DOS segment
   897                              <1> ;       rbp = Ptr to the start of the DOS segment
   898                              <1> ;Output: rsi = EA of next header in DOS segment
   899 00000C66 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   900 00000C69 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   901 00000C6D 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   902 00000C71 4881C622000000      <1>     add rsi, drvHdr_size
   903 00000C78 C3                  <1>     ret
   904                              <1> errorInit:
   905                              <1> ;If a critical error occurs during sysinit, fail through here
   906                              <1> ;Int 42h, 43h and 44h point here during sysinit
   907 00000C79 488D2D3A000000      <1>     lea rbp, hltmsg
   908 00000C80 B804130000          <1>     mov eax, 1304h
   909 00000C85 CD30                <1>     int 30h
   910                              <1>     ;cli ;Clear interrupts
   911                              <1>     ;mov al, -1
   912                              <1>     ;mov dx, 0A1h    ;PIC2 data
   913                              <1>     ;out dx, al      ;Mask all lines
   914                              <1>     ;mov dx, 21h     ;PIC1 data
   915                              <1>     ;out dx, al      ;Mask all lines
   916                              <1> .ei0:
   917 00000C87 F4                  <1>     hlt
   918 00000C88 EBFD                <1>     jmp short .ei0
   919                              <1> ;--------------------------------
   920                              <1> ;       DATA FOR SYSINIT        :
   921                              <1> ;--------------------------------
   922 00000C8A 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   922 00000C93 5343502F444F532E2E- <1>
   922 00000C9C 2E0A0D24            <1>
   923 00000CA0 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   923 00000CA9 6C6F636174696F6E20- <1>
   923 00000CB2 4572726F720A0D00    <1>
   924 00000CBA 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   924 00000CC3 7469616C6973696E67- <1>
   924 00000CCC 20534350444F532E53- <1>
   924 00000CD5 59532E205379737465- <1>
   924 00000CDE 6D2068616C74696E67- <1>
   924 00000CE7 2E2E2E00            <1>
   925 00000CEB 434F4E00            <1> conName db "CON",0
   926 00000CEF 41555800            <1> auxName db "AUX",0
   927 00000CF3 50524E00            <1> prnName db "PRN",0
   928                              <1> 
   929 00000CF7 003A5C4155544F4558- <1> aexec   db 0,":\AUTOEXEC.BAT",0 ;ASCIIZ for AUTOEXEC (with space for drvletter)
   929 00000D00 45432E42415400      <1>
   930 00000D07 003A5C434F4E464947- <1> cfgspec db 0,":\CONFIG.SYS",0 ;ASCIIZ for CONFIG (with space for drive letter)
   930 00000D10 2E53595300          <1>
   931                              <1> 
   932                              <1> intData:
   933 00000D15 [DD16000000000000]  <1>     dq terminateProcess ;Int 40h
   934 00000D1D [881C000000000000]  <1>     dq functionDispatch ;Int 41h
   935 00000D25 [790C000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   936 00000D2D [E01D000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
   937 00000D35 [D217000000000000]  <1>     dq dosDefCritErrHdlr 
   938 00000D3D [9E18000000000000]  <1>     dq absDiskRead      ;Int 45h
   939 00000D45 [7F18000000000000]  <1>     dq absDiskWrite     ;Int 46h
   940 00000D4D [DF16000000000000]  <1>     dq terminateRes     ;Int 47h
   941 00000D55 [E01D000000000000]  <1>     dq defaultIretq     ;Int 48h
   942 00000D5D [E01D000000000000]  <1>     dq defaultIretq     ;Int 49h
   943 00000D65 [E01D000000000000]  <1>     dq defaultIretq     ;Int 4Ah
   944 00000D6D [E01D000000000000]  <1>     dq defaultIretq     ;Int 4Bh
   945 00000D75 [E01D000000000000]  <1>     dq defaultIretq     ;Int 4Ch
   946 00000D7D [E01D000000000000]  <1>     dq defaultIretq     ;Int 4Dh
   947 00000D85 [E01D000000000000]  <1>     dq defaultIretq     ;Int 4Eh
   948 00000D8D [8021000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
   949                              <1> nData:
   950 00000D95 [3724000000000000]  <1>     dq conHdr
   951 00000D9D 0480                <1>     dw 08004h
   952 00000D9F [DF25000000000000]  <1>     dq nulStrat
   953 00000DA7 [E525000000000000]  <1>     dq nulIntr
   954 00000DAF 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   955                              <1> 
   956                              <1> diskInit:
   957                              <1>     ;We create a function to deal with BPB parsing etc
   958                              <1>     ;Start with the first primary partition on each hard disk (until max)
   959                              <1>     ;   They dont have to be bootable
   960                              <1>     ;Then go back and look for other partitions partitions. 
   961                              <1>     ;   Add each other primary or logical ptn (until max)
   962                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   963                              <1>     ;Use r8 as device counter
   964 00000DB7 488DBD[062E0000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
   965 00000DBE 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
   965 00000DC6 00                  <1>
   966 00000DC7 0F84C6000000        <1>     jz .remInit ;No? Go to removables
   967 00000DCD 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   967 00000DD6 00                  <1>
   968 00000DD7 B280                <1>     mov dl, 80h ;Start with HDD 0
   969                              <1> .primary:
   970 00000DD9 64803C25[68C00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
   970 00000DE1 03                  <1>
   971 00000DE2 0F84AB000000        <1>     je .remInit
   972 00000DE8 31C9                <1>     xor ecx, ecx    ;Sector 0
   973 00000DEA E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   974 00000DEF 0F8289000000        <1>     jc .primaryEpilog
   975                              <1>     ;Here, check MBR or BPB
   976 00000DF5 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   977 00000DFE 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   978                              <1>     ;Now check if BPB or MBR
   979 00000E00 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   980 00000E02 8A6302              <1>     mov ah, byte [rbx + 2]
   981 00000E05 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   982 00000E09 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   983                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   984                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   985 00000E0B 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   986 00000E12 B104                <1>     mov cl, 4
   987                              <1> .checkPrimary:
   988 00000E14 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   989 00000E17 3C01                <1>     cmp al, 01
   990 00000E19 7421                <1>     je .primaryFound
   991 00000E1B 3C04                <1>     cmp al, 04
   992 00000E1D 741D                <1>     je .primaryFound
   993 00000E1F 3C06                <1>     cmp al, 06
   994 00000E21 7419                <1>     je .primaryFound
   995 00000E23 3C0B                <1>     cmp al, 0Bh
   996 00000E25 7415                <1>     je .primaryFound
   997 00000E27 3C0C                <1>     cmp al, 0Ch
   998 00000E29 7411                <1>     je .primaryFound
   999 00000E2B 3C0E                <1>     cmp al, 0Eh
  1000 00000E2D 740D                <1>     je .primaryFound
  1001 00000E2F 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1002 00000E36 FEC9                <1>     dec cl
  1003 00000E38 7444                <1>     jz .primaryEpilog
  1004 00000E3A EBD8                <1>     jmp short .checkPrimary
  1005                              <1> .primaryFound:
  1006                              <1>     ;Copy the first sector of this partition into memory
  1007 00000E3C 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1008 00000E3F E8E9000000          <1>     call .initReadSector
  1009 00000E44 7238                <1>     jc .primaryEpilog
  1010                              <1>     ;Now verify this is a BPB
  1011 00000E46 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1012 00000E48 8A6302              <1>     mov ah, byte [rbx + 2]
  1013 00000E4B 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1014 00000E4F 752D                <1>     jne .primaryEpilog   ;If not, skip
  1015                              <1>     ;Now copy data to internal tables
  1016 00000E51 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1017 00000E54 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1018 00000E59 57                  <1>     push rdi
  1019 00000E5A F348A5              <1>     rep movsq   ;Copy the BPB
  1020 00000E5D 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1021                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1022 00000E5E 4A8D9C05[D42D0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1023                              <1>     ;Add device count to rbx to point to correct entry
  1024 00000E66 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1025 00000E68 4A8D9CC5[DE2D0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1026 00000E70 488933              <1>     mov qword [rbx], rsi
  1027 00000E73 49FFC0              <1>     inc r8  ;Goto next logical drive
  1028 00000E76 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1029                              <1> .primaryEpilog:
  1030 00000E7E FEC2                <1>     inc dl  ;Goto next BIOS drive
  1031 00000E80 88D6                <1>     mov dh, dl
  1032 00000E82 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1033 00000E85 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1034 00000E8D 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1035                              <1> .extended:
  1036                              <1> ;We have gone through all the devices once
  1037                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1038                              <1>     ;je .remInit ;If yes, get removable devices
  1039                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1040                              <1>     ;xor ecx, ecx    ;Get MBR back
  1041                              <1>     ;call .initReadSector
  1042                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1043                              <1> .remInit:
  1044                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1045 00000E93 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1046 00000E96 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1047 00000E98 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1048                              <1>     ;rdi points to the space for the subsequent bpb's
  1049                              <1> .removables:
  1050 00000E9B 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1051 00000E9D E88B000000          <1>     call .initReadSector
  1052 00000EA2 7238                <1>     jc .removableEpilogue   ;Goto next device
  1053                              <1>     ;Now verify this is a BPB
  1054 00000EA4 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1055 00000EA6 8A6302              <1>     mov ah, byte [rbx + 2]
  1056 00000EA9 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1057 00000EAD 752D                <1>     jne .removableEpilogue   ;If not, skip
  1058                              <1>     ;Now copy data to internal tables
  1059 00000EAF 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1060 00000EB2 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1061 00000EB7 57                  <1>     push rdi
  1062 00000EB8 F348A5              <1>     rep movsq   ;Copy the BPB
  1063 00000EBB 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1064                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1065 00000EBC 4A8D9C05[D42D0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1066                              <1>     ;Add device count to rbx to point to correct entry
  1067 00000EC4 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1068 00000EC6 4A8D9CC5[DE2D0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1069 00000ECE 488933              <1>     mov qword [rbx], rsi
  1070 00000ED1 49FFC0              <1>     inc r8  ;Goto next logical drive
  1071 00000ED4 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1072                              <1> .removableEpilogue:
  1073 00000EDC FEC2                <1>     inc dl  ;Goto next BIOS device now
  1074 00000EDE 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1075 00000EE6 7412                <1>     je .end
  1076 00000EE8 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1077 00000EEF 7403                <1>     je .re0
  1078 00000EF1 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1079                              <1> .re0:
  1080 00000EF4 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1081 00000EF8 72A1                <1>     jb .removables
  1082                              <1> .end:
  1083 00000EFA 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1083 00000F02 01                  <1>
  1084 00000F03 7401                <1>     je .singleRemDev
  1085 00000F05 C3                  <1>     ret
  1086                              <1> .singleRemDev:
  1087                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1088 00000F06 488D9D[D42D0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1089 00000F0D 8A95[D42D0000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1090 00000F13 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1091 00000F16 488D9D[DE2D0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1092 00000F1D 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1093 00000F20 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1094 00000F24 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1095 00000F2C C3                  <1>     ret
  1096                              <1> .initReadSector:
  1097                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1098 00000F2D B482                <1>     mov ah, 82h ;Read
  1099 00000F2F B001                <1>     mov al, 1   ;One sector
  1100 00000F31 488D9D[39010000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1101 00000F38 CD33                <1>     int 33h
  1102 00000F3A C3                  <1>     ret
    12                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    13                                  %include "./Source/BSS/dosSeg.asm"
    14                              <1> ;This file contains the main DOS data segment
    15                              <1> dosAPT: ;Additional Page tables
    16 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    17                              <1> dosDataArea:
    18 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    19 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    20 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    21 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    22 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    23 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    24 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    25 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    26                              <1> ;Above is the system stats
    27                              <1> ;Below is the DOS vars
    28 0003C023 ??                  <1>     vConOutOff  resb 1    ;Offset in output buffer to the next char to output
    29                              <1>     ;   A value of 0 means no chars buffered.
    30 0003C024 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    31                              <1> sysVarsPtr:
    32 0003C02C ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    33 0003C034 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    34 0003C03C ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    35                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    36 0003C044 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    37                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    38 0003C04C ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    39 0003C04E ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    40 0003C056 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    41 0003C05E ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    42 0003C066 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    43                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    44 0003C068 ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    45 0003C069 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    46 0003C06A ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    47 0003C06B ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    48 0003C06C <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    49                              <1> ;Create SFT header and corresponding array of five default sft entries
    50 0003C08E <res Ah>            <1>     firstSftHeader  resb sfth_size
    51 0003C098 <res 4Fh>           <1>     firstSft    resb sft_size
    52 0003C0E7 <res 4Fh>           <1>     secondSft   resb sft_size
    53 0003C136 <res 4Fh>           <1>     thirdSft    resb sft_size
    54 0003C185 <res 4Fh>           <1>     fourthSft   resb sft_size
    55 0003C1D4 <res 4Fh>           <1>     fifthSft    resb sft_size
    56                              <1> 
    57                              <1> ;Virtual CONsole Buffers
    58 0003C223 ??                  <1>     vConCursPos resb 1     ;Keeps track of tab stops (and with 8 to get tabstop)
    59                              <1> vConBuf:    ;Proper buffer symbol
    60 0003C224 ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
    61 0003C225 <res 100h>          <1>     vConBufData resb 256   ;vConsole buffer for reads and writes
    62 0003C325 ??????              <1>     bufpad      resb 3     ;Used to pad so can use stdout with 41h/0Ah
    63                              <1>    
    64                              <1> ;Additional internal variables
    65 0003C328 ????                <1>     numFiles    resw 1    ;FILES=5 default
    66 0003C32A ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    67                              <1> 
    68                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    69 0003C32C ??                  <1>     singleDrv   resb 1  ;Set if last drive accessed was drive B x
    70 0003C32D ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    71 0003C32E ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
    72 0003C32F ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    73                              <1> ;Server stuff. Default to all zeros (blank)
    74 0003C330 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
    75 0003C331 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
    76                              <1> ;Swappable Data Area
    77 0003C341 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    78 0003C361 ??                  <1>                 resb 1  ;Alignment byte
    79                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    80 0003C362 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    81 0003C363 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    82 0003C364 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    83 0003C365 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    84 0003C366 ????                <1>     errorExCde  resw 1  ;Extended Error Code
    85 0003C368 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    86 0003C369 ??                  <1>     errorClass  resb 1  ;Error Class
    87 0003C36A ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
    88 0003C372 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    89 0003C37A ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
    90                              <1> 
    91 0003C382 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    92 0003C38A ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
    93 0003C38C ??                  <1>     currentDrv  resb 1  ;Default drive x
    94 0003C38D ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
    95                              <1> ;SDA, needs to be replaced between processes
    96 0003C38E ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
    97 0003C396 ????????????????    <1>     sharePSP    resq 1  ;PSP of the share program
    98 0003C39E ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
    99 0003C3A0 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   100 0003C3A8 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   101 0003C3B0 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   102                              <1> 
   103 0003C3B8 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   104 0003C3C0 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   105 0003C3C1 ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   106                              <1> 
   107 0003C3C2 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   108 0003C3CA ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   109 0003C3D2 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   110 0003C3DA ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   111 0003C3E2 ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   112                              <1> ;The below flag tells DOS to print ^C in the termination function
   113 0003C3E3 ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   114                              <1> 
   115                              <1> ;Time stuff
   116 0003C3E4 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   117 0003C3E5 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   118 0003C3E6 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
   119 0003C3E7 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   120 0003C3E9 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   121                              <1> 
   122 0003C3EA ??                  <1>     vConDrvFlg  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   123 0003C3EB ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   124 0003C3EC ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   125                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   126                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   127                              <1> ; without forcing to re-build the whole primary request block.
   128                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   129                              <1> ; with secondary char output going through the secondary header
   130                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   131                              <1> ; for output)
   132                              <1> ;ioReqPkt is the largest possible packet
   133 0003C3ED <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   134 0003C417 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   135                              <1> 
   136                              <1> ;Swappable Buffers
   137 0003C441 <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   138 0003C4C1 <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   139 0003C541 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   140 0003C547 ??                  <1>     singleIObyt resb 1  ;For single IO byte buffers
   141                              <1> ;Misc bookkeeping flags and vars
   142                              <1>     ;secClusConv resb 1  ;For networking, do we convert sector to cluster?
   143 0003C548 ??                  <1>     rwFlag      resb 1  ;00h=Read, 01h=Write
   144 0003C549 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   145 0003C54A ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   146 0003C54B ??                  <1>     typePSPcopy resb 1  ;00=Simple copy, -1=Make Child process
   147 0003C54C ??                  <1>     spliceFlag  resb 1  ;01 = file name and directory name together
   148 0003C54D ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   149                              <1> 
   150 0003C54E ??                  <1>     workingDrv  resb 1  ;Working drive number
   151                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   152                              <1> workingDD:  ;Create a symbol for the working device driver too
   153 0003C54F ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   154 0003C557 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   155                              <1> vConOldSFT: ;Alternate symbol for saving the oldSFTptr during a char func
   156 0003C55F ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr
   157 0003C567 <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need tmp CDS
   158 0003C5C2 ????????????????    <1>     curJFTNum   resq 1  ;Ptr to JFT num in caller PSP of file being accessed
   159                              <1> vConCurSFT: ;Alternate symbol for the SFT to be used for char function
   160 0003C5CA ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   161 0003C5D2 ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   162 0003C5D4 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   163                              <1> ;Temp vars, used when walking FAT or changing sectors
   164 0003C5DC ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   165 0003C5E4 ????                <1>     entries     resw 1  ;FAT entries per FAT sector
   166                              <1> ;***************************************************|
   167                              <1> ; Needs to be set up before any file access         |
   168                              <1> ; These vars keep track of file access properties   |
   169                              <1> ;   and must be used only for such purposes.        |
   170                              <1> ;***************************************************|
   171 0003C5E6 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   172 0003C5EA ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   173                              <1> 
   174 0003C5EE ??                  <1>     clustFact   resb 1  ;NUMBER of sectors per cluster
   175                              <1> 
   176 0003C5EF ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   177 0003C5F3 ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   178 0003C5F4 ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   179                              <1> 
   180 0003C5FC ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   181 0003C5FE ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   182                              <1> ;***************************************************|
   183 0003C602 ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   184 0003C606 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   185 0003C60A ????????            <1>     bytesAdded  resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   186 0003C60E ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   187 0003C612 ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   188                              <1> ;Directory stuff
   189 0003C616 ????????            <1>     dirClust    resd 1  ;Cluster number of current directory
   190 0003C61A ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   191 0003C61E ??                  <1>     dirSect     resb 1  ;Sector of current directory
   192 0003C61F ??                  <1>     dirEntry    resb 1  ;32 byte offset in dir sect for file being searched for
   193                              <1> ;Error DPB 
   194 0003C620 ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   195                              <1>     
   196                              <1> ;Stacks and scratch SFT
   197 0003C628 <res 528h>          <1>     critStack   resq 165
   198 0003CB50 ????????????????    <1>     critStakTop resq 1
   199                              <1> 
   200 0003CB58 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   201                              <1> 
   202 0003CBA7 <res 638h>          <1>     AuxStack    resq 199
   203 0003D1DF ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   204 0003D1E7 <res 638h>          <1>     DiskStack   resq 199
   205 0003D81F ????????????????    <1>     DiskStakTop resq 1
   206                              <1> 
   207 0003D827 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   208 0003D828 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls!  
   209                              <1>     dSegLen     equ     $
    14                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    15                                  %include "./Source/Data/staticData.asm"
    16                              <1> 
    17                              <1> ;-----------------------------------:
    18                              <1> ;           Static Data             :
    19                              <1> ;-----------------------------------:
    20 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    21 00000001 01                  <1> dosMinor    db 01h      ;.01
    22 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    22 0000000B 535953              <1>
    23 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    23 00000017 535953              <1>
    16                                  %include "./Source/Data/dispTbl.asm"
    17                              <1> ;Kernel Dispatch Function Table
    18                              <1> 
    19                              <1> kDispTbl:
    20 0000001A C716                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    21 0000001C B10B                <1>     dw stdinReadEcho - kDispTbl       ;AH = 01H, CHAR IO
    22 0000001E C40B                <1>     dw stdoutWrite - kDispTbl         ;AH = 02H, CHAR IO
    23 00000020 EA0B                <1>     dw stdauxRead - kDispTbl          ;AH = 03H, CHAR IO
    24 00000022 EA0B                <1>     dw stdauxWrite - kDispTbl         ;AH = 04H, CHAR IO
    25 00000024 EA0B                <1>     dw stdprnWrite - kDispTbl         ;AH = 05H, CHAR IO
    26 00000026 EA0B                <1>     dw directCONIO - kDispTbl         ;AH = 06H, CHAR IO
    27 00000028 EA0B                <1>     dw waitDirectInNoEcho - kDispTbl  ;AH = 07H, CHAR IO
    28 0000002A EA0B                <1>     dw waitStdinNoEcho - kDispTbl     ;AH = 08H, CHAR IO
    29 0000002C 100C                <1>     dw printString - kDispTbl         ;AH = 09H, CHAR IO
    30 0000002E 380C                <1>     dw buffStdinInput - kDispTbl      ;AH = 0AH, CHAR IO
    31 00000030 380C                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    32 00000032 380C                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    33 00000034 691E                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    34 00000036 8A1E                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    35 00000038 F30C                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    36 0000003A F30C                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    37 0000003C F30C                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    38 0000003E F30C                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    39 00000040 F30C                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    40 00000042 F30C                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    41 00000044 F30C                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    42 00000046 F30C                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    43 00000048 F30C                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    44 0000004A 6521                <1>     dw return - kDispTbl              ;AH = 18H, RESERVED
    45 0000004C A31E                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    46 0000004E F40C                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    47 00000050 AA1E                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    48 00000052 AC1E                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    49 00000054 6521                <1>     dw return - kDispTbl              ;AH = 1DH, RESERVED
    50 00000056 6521                <1>     dw return - kDispTbl              ;AH = 1EH, RESERVED
    51 00000058 671F                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    52 0000005A 6521                <1>     dw return - kDispTbl              ;AH = 20H, RESERVED
    53 0000005C 070D                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    54 0000005E 070D                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    55 00000060 070D                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    56 00000062 070D                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    57 00000064 161F                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    58 00000066 431F                <1>     dw createNewPSP - kDispTbl        ;AH = 26H, PROCESS MANAGEMENT
    59 00000068 070D                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    60 0000006A 070D                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    61 0000006C 070D                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    62 0000006E F20C                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    63 00000070 F20C                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    64 00000072 F20C                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    65 00000074 F20C                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    66 00000076 441F                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    67 00000078 080D                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    68 0000007A 521F                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    69 0000007C C816                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    70 0000007E 691F                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    71 00000080 1E1E                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    72 00000082 AF1F                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    73 00000084 C01F                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    74 00000086 D51F                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    75 00000088 CB16                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    76 0000008A CB16                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    77 0000008C A108                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    78 0000008E A108                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    79 00000090 A108                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    80 00000092 1B0D                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    81 00000094 1C0D                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    82 00000096 1D0D                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    83 00000098 1E0D                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    84 0000009A 570D                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    85 0000009C 630D                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    86 0000009E 640D                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    87 000000A0 B70D                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    88 000000A2 B70D                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    89 000000A4 B70D                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    90 000000A6 B70D                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    91 000000A8 A108                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    92 000000AA BC10                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    93 000000AC D912                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    94 000000AE 0214                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    95 000000B0 C916                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    96 000000B2 CA16                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    97 000000B4 3E20                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    98 000000B6 B70D                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    99 000000B8 B70D                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   100 000000BA 4C1E                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   101 000000BC 551E                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   102 000000BE 5020                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   103 000000C0 6120                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   104 000000C2 3321                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   105 000000C4 3A21                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   106 000000C6 B70D                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   107 000000C8 A108                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   108 000000CA B315                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   109 000000CC 3B21                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   110 000000CE B70D                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   111 000000D0 B70D                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   112 000000D2 B70D                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   113 000000D4 6421                <1>     dw getCritErrorInfo - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   114 000000D6 6421                <1>     dw networkServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   115 000000D8 6421                <1>     dw networkRedirection - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   116 000000DA A108                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   117 000000DC 6521                <1>     dw return - kDispTbl              ;AH = 61H, RESERVED
   118 000000DE 5E1E                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   119 000000E0 6521                <1>     dw return - kDispTbl              ;AH = 63H, RESERVED
   120 000000E2 671E                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   121 000000E4 CB16                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   122 000000E6 CB16                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   123 000000E8 B70D                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   124 000000EA B70D                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   125 000000EC 6521                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   126                              <1> kDispTblL  equ $ - kDispTbl 
   127                              <1> 
   128                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   129 000000EE B320                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   130                              <1> mDispTblL   equ     $ - mDispTbl
    17                                  %include "./Source/Debug/debug.asm"
    18                              <1> ;This file contains debugging macros, procs and strings
    19                              <1> ; that we can use to output to COM1 bypassing the operating system.
    20                              <1> ;A serial terminal must be connected for this to work.
    21                              <1> 
    22                              <1> ;Variables and equates
    23                              <1> 
    24 000000F0 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    25                              <1> 
    26 000000F8 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    26 00000101 39414243444546      <1>
    27                              <1> ;Common procedures
    28                              <1> debMakeDebuggerRespond:
    29 00000108 488D2D26000000      <1>     lea rbp, .msg
    30 0000010F E8AF000000          <1>     call debPrintNullString
    31 00000114 B900001000          <1>     mov ecx, 100000h
    32                              <1> .waiting:
    33 00000119 FFC9                <1>     dec ecx
    34 0000011B 740C                <1>     jz .timeout
    35 0000011D B402                <1>     mov ah, 02h ;Blocking recieve!
    36 0000011F 31D2                <1>     xor edx, edx
    37 00000121 CD34                <1>     int 34h
    38 00000123 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    39 00000126 75F1                <1>     jnz .waiting
    40 00000128 C3                  <1>     ret
    41                              <1> .timeout:
    42 00000129 488D2D47000000      <1>     lea rbp, .msg2
    43 00000130 E98E000000          <1>     jmp debPrintNullString
    44 00000135 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    44 0000013E 6B6579206174207468- <1>
    44 00000147 65207465726D696E61- <1>
    44 00000150 6C20746F20636F6E74- <1>
    44 00000159 696E7565206F722077- <1>
    44 00000162 61697420666F722074- <1>
    44 0000016B 696D656F75742E2E2E- <1>
    44 00000174 0A0D00              <1>
    45 00000177 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    45 00000180 436F6E74696E75696E- <1>
    45 00000189 672E2E2E0A0D00      <1>
    46                              <1> debPrintHexByte:
    47                              <1> ;Print the hex byte in al as a hex value
    48 00000190 52                  <1>     push rdx
    49 00000191 53                  <1>     push rbx
    50 00000192 50                  <1>     push rax
    51                              <1> 
    52 00000193 88C2                <1>     mov dl, al           ;save byte in dl
    53 00000195 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    54 00000199 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    55 0000019E 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    56 000001A2 E80C000000          <1>     call .wrchar
    57 000001A7 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    58 000001AA E804000000          <1>     call .wrchar
    59                              <1> 
    60 000001AF 58                  <1>     pop rax
    61 000001B0 5B                  <1>     pop rbx
    62 000001B1 5A                  <1>     pop rdx
    63 000001B2 C3                  <1>     ret
    64                              <1> .wrchar:
    65 000001B3 6687DB              <1>     xchg bx, bx
    66 000001B6 488D1D3BFFFFFF      <1>     lea rbx, debascii
    67 000001BD D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    68 000001BE B401                <1>     mov ah, 01h
    69 000001C0 CD34                <1>     int 34h  ;print char
    70 000001C2 C3                  <1>     ret
    71                              <1> 
    72                              <1> debPrintNullString:
    73                              <1> ;Print a null terminated string pointed to by rbp
    74 000001C3 56                  <1>     push rsi
    75 000001C4 50                  <1>     push rax
    76 000001C5 52                  <1>     push rdx
    77 000001C6 31D2                <1>     xor edx, edx    ;Select COM1
    78 000001C8 4889EE              <1>     mov rsi, rbp
    79                              <1> .getChar:
    80 000001CB AC                  <1>     lodsb
    81 000001CC 84C0                <1>     test al, al
    82 000001CE 7406                <1>     jz .exit
    83 000001D0 B401                <1>     mov ah, 01h
    84 000001D2 CD34                <1>     int 34h
    85 000001D4 EBF5                <1>     jmp short .getChar
    86                              <1> .exit:
    87 000001D6 5A                  <1>     pop rdx
    88 000001D7 58                  <1>     pop rax
    89 000001D8 5E                  <1>     pop rsi
    90 000001D9 C3                  <1>     ret
    91                              <1> 
    92                              <1> debPrintDOSStack:
    93                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    94                              <1> ;Shows me which function, and parameters passed and returned
    95 000001DA 488D2DA5010000      <1>     lea rbp, .a1
    96 000001E1 E8DDFFFFFF          <1>     call debPrintNullString
    97 000001E6 488B15(D2C30300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
    98 000001ED 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
    99 000001F4 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   100 000001F7 E802030000          <1>     call overlayQword
   101 000001FC 4881C316000000      <1>     add rbx, 22
   102 00000203 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   103 00000207 E8F2020000          <1>     call overlayQword
   104 0000020C 4881C316000000      <1>     add rbx, 22
   105 00000213 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   106 00000217 E8E2020000          <1>     call overlayQword
   107 0000021C 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   108 00000223 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   109 00000227 E8D2020000          <1>     call overlayQword
   110 0000022C 4881C316000000      <1>     add rbx, 22 
   111 00000233 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   112 00000237 E8C2020000          <1>     call overlayQword
   113 0000023C 4881C316000000      <1>     add rbx, 22
   114 00000243 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   115 00000247 E8B2020000          <1>     call overlayQword
   116 0000024C 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   117 00000253 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   118 00000257 E8A2020000          <1>     call overlayQword
   119 0000025C 4881C316000000      <1>     add rbx, 22
   120 00000263 488B05(D2C30300)    <1>     mov rax, qword [oldRSP]
   121 0000026A 480560000000        <1>     add rax, callerFrame_size
   122 00000270 E889020000          <1>     call overlayQword
   123 00000275 4881C316000000      <1>     add rbx, 22
   124 0000027C 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   125 00000280 E879020000          <1>     call overlayQword
   126 00000285 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   127 0000028C 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   128 00000290 E869020000          <1>     call overlayQword
   129 00000295 488D2D06000000      <1>     lea rbp, .a0
   130 0000029C E822FFFFFF          <1>     call debPrintNullString
   131 000002A1 C3                  <1>     ret
   132                              <1> 
   133 000002A2 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   133 000002AB 303030303030303030- <1>
   133 000002B4 30306820            <1>
   134 000002B8 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   134 000002C1 303030303030303030- <1>
   134 000002CA 30306820            <1>
   135 000002CE 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   135 000002D7 303030303030303030- <1>
   135 000002E0 30306820            <1>
   136 000002E4 0A0D                <1>     db  0Ah,0Dh
   137 000002E6 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   137 000002EF 303030303030303030- <1>
   137 000002F8 30306820            <1>
   138 000002FC 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   138 00000305 303030303030303030- <1>
   138 0000030E 30306820            <1>
   139 00000312 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   139 0000031B 303030303030303030- <1>
   139 00000324 30306820            <1>
   140 00000328 0A0D                <1>     db 0Ah, 0Dh
   141 0000032A 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   141 00000333 303030303030303030- <1>
   141 0000033C 30306820            <1>
   142 00000340 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   142 00000349 303030303030303030- <1>
   142 00000352 30306820            <1>
   143 00000356 7269703D3030303030- <1>     db "rip=0000000000000000h"
   143 0000035F 303030303030303030- <1>
   143 00000368 303068              <1>
   144 0000036B 0A0D                <1>     db 0Ah, 0Dh
   145 0000036D 666C673D3030303030- <1>     db "flg=0000000000000000h "
   145 00000376 303030303030303030- <1>
   145 0000037F 30306820            <1>
   146 00000383 0A0D00              <1>     db 0Ah,0Dh,0
   147 00000386 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   147 0000038F 206F6E20496E742034- <1>
   147 00000398 316820737461636B0A- <1>
   147 000003A1 0D00                <1>
   148                              <1> 
   149                              <1> debDPBptr:
   150                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   151 000003A3 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   152 000003AA 4889E8              <1>     mov rax, rbp
   153 000003AD E84C010000          <1>     call overlayQword
   154 000003B2 488D2D06000000      <1>     lea rbp, .dpb
   155 000003B9 E805FEFFFF          <1>     call debPrintNullString
   156 000003BE C3                  <1>     ret
   157                              <1> .dpb: 
   158 000003BF 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   158 000003C8 203030303030303030- <1>
   158 000003D1 303030303030303068- <1>
   158 000003DA 200A0D00            <1>
   159                              <1> 
   160                              <1> debDPBBPBptr:
   161                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   162                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   163 000003DE 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   164 000003E5 4889E8              <1>     mov rax, rbp
   165 000003E8 E811010000          <1>     call overlayQword
   166 000003ED 4881C321000000      <1>     add rbx, 33
   167 000003F4 4889F0              <1>     mov rax, rsi
   168 000003F7 E802010000          <1>     call overlayQword
   169 000003FC 488D2D06000000      <1>     lea rbp, .dpb
   170 00000403 E8BBFDFFFF          <1>     call debPrintNullString
   171 00000408 C3                  <1>     ret
   172                              <1> .dpb: 
   173 00000409 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   173 00000412 203030303030303030- <1>
   173 0000041B 303030303030303068- <1>
   173 00000424 2066726F6D20        <1>
   174 0000042A 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   174 00000433 203030303030303030- <1>
   174 0000043C 303030303030303068- <1>
   174 00000445 200A0D00            <1>
   175                              <1> overlayByte:
   176                              <1>     ;Called with number in rax
   177                              <1>     ;pointer to START of 16 byte space for number in rbx
   178 00000449 53                  <1>     push rbx
   179 0000044A 51                  <1>     push rcx
   180 0000044B 52                  <1>     push rdx
   181 0000044C 55                  <1>     push rbp
   182 0000044D 4889DD              <1>     mov rbp, rbx
   183 00000450 4889C2              <1>     mov rdx, rax
   184 00000453 48FFC5              <1>     inc rbp ;Go to end of number
   185                              <1> 
   186 00000456 488D1D9BFCFFFF      <1>     lea rbx, debascii
   187 0000045D 88D0                <1>     mov al, dl  ;Go low nybble first
   188 0000045F 240F                <1>     and al, 0Fh
   189 00000461 D7                  <1>     xlatb
   190 00000462 884500              <1>     mov byte [rbp], al
   191 00000465 48FFCD              <1>     dec rbp ;Go down one char pos
   192 00000468 88D0                <1>     mov al, dl
   193 0000046A 24F0                <1>     and al, 0F0h    ;Hi nybble next
   194 0000046C C0E804              <1>     shr al, 4   ;Shift hi nybble low
   195 0000046F D7                  <1>     xlatb
   196 00000470 884500              <1>     mov byte [rbp], al  ;Store char
   197                              <1> 
   198 00000473 5D                  <1>     pop rbp
   199 00000474 5A                  <1>     pop rdx
   200 00000475 59                  <1>     pop rcx
   201 00000476 5B                  <1>     pop rbx
   202 00000477 C3                  <1>     ret
   203                              <1> 
   204                              <1> overlayWord:
   205                              <1>     ;Called with number in rax
   206                              <1>     ;pointer to START of 16 byte space for number in rbx
   207 00000478 53                  <1>     push rbx
   208 00000479 51                  <1>     push rcx
   209 0000047A 52                  <1>     push rdx
   210 0000047B 55                  <1>     push rbp
   211 0000047C 4889DD              <1>     mov rbp, rbx
   212 0000047F 4889C2              <1>     mov rdx, rax
   213 00000482 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   214 00000489 B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   215 0000048E 488D1D63FCFFFF      <1>     lea rbx, debascii
   216                              <1> .ow0:
   217 00000495 88D0                <1>     mov al, dl  ;Go low nybble first
   218 00000497 240F                <1>     and al, 0Fh
   219 00000499 D7                  <1>     xlatb
   220 0000049A 884500              <1>     mov byte [rbp], al
   221 0000049D 48FFCD              <1>     dec rbp ;Go down one char pos
   222 000004A0 88D0                <1>     mov al, dl
   223 000004A2 24F0                <1>     and al, 0F0h    ;Hi nybble next
   224 000004A4 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   225 000004A7 D7                  <1>     xlatb
   226 000004A8 884500              <1>     mov byte [rbp], al  ;Store char
   227 000004AB 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   228 000004AF 48FFCD              <1>     dec rbp
   229 000004B2 FFC9                <1>     dec ecx
   230 000004B4 75DF                <1>     jnz .ow0
   231 000004B6 5D                  <1>     pop rbp
   232 000004B7 5A                  <1>     pop rdx
   233 000004B8 59                  <1>     pop rcx
   234 000004B9 5B                  <1>     pop rbx
   235 000004BA C3                  <1>     ret
   236                              <1> 
   237                              <1> overlayDword:
   238                              <1>     ;Called with number in rax
   239                              <1>     ;pointer to START of 16 byte space for number in rbx
   240 000004BB 53                  <1>     push rbx
   241 000004BC 51                  <1>     push rcx
   242 000004BD 52                  <1>     push rdx
   243 000004BE 55                  <1>     push rbp
   244 000004BF 4889DD              <1>     mov rbp, rbx
   245 000004C2 4889C2              <1>     mov rdx, rax
   246 000004C5 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   247 000004CC B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   248 000004D1 488D1D20FCFFFF      <1>     lea rbx, debascii
   249                              <1> .od0:
   250 000004D8 88D0                <1>     mov al, dl  ;Go low nybble first
   251 000004DA 240F                <1>     and al, 0Fh
   252 000004DC D7                  <1>     xlatb
   253 000004DD 884500              <1>     mov byte [rbp], al
   254 000004E0 48FFCD              <1>     dec rbp ;Go down one char pos
   255 000004E3 88D0                <1>     mov al, dl
   256 000004E5 24F0                <1>     and al, 0F0h    ;Hi nybble next
   257 000004E7 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   258 000004EA D7                  <1>     xlatb
   259 000004EB 884500              <1>     mov byte [rbp], al  ;Store char
   260 000004EE 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   261 000004F2 48FFCD              <1>     dec rbp
   262 000004F5 FFC9                <1>     dec ecx
   263 000004F7 75DF                <1>     jnz .od0
   264 000004F9 5D                  <1>     pop rbp
   265 000004FA 5A                  <1>     pop rdx
   266 000004FB 59                  <1>     pop rcx
   267 000004FC 5B                  <1>     pop rbx
   268 000004FD C3                  <1>     ret
   269                              <1> 
   270                              <1> overlayQword:
   271                              <1>     ;Called with number in rax
   272                              <1>     ;pointer to START of 16 byte space for number in rbx
   273 000004FE 53                  <1>     push rbx
   274 000004FF 51                  <1>     push rcx
   275 00000500 52                  <1>     push rdx
   276 00000501 55                  <1>     push rbp
   277 00000502 4889DD              <1>     mov rbp, rbx
   278 00000505 4889C2              <1>     mov rdx, rax
   279 00000508 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   280 0000050F B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   281 00000514 488D1DDDFBFFFF      <1>     lea rbx, debascii
   282                              <1> .oq0:
   283 0000051B 88D0                <1>     mov al, dl  ;Go low nybble first
   284 0000051D 240F                <1>     and al, 0Fh
   285 0000051F D7                  <1>     xlatb
   286 00000520 884500              <1>     mov byte [rbp], al
   287 00000523 48FFCD              <1>     dec rbp ;Go down one char pos
   288 00000526 88D0                <1>     mov al, dl
   289 00000528 24F0                <1>     and al, 0F0h    ;Hi nybble next
   290 0000052A C0E804              <1>     shr al, 4   ;Shift hi nybble low
   291 0000052D D7                  <1>     xlatb
   292 0000052E 884500              <1>     mov byte [rbp], al  ;Store char
   293 00000531 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   294 00000535 48FFCD              <1>     dec rbp
   295 00000538 FFC9                <1>     dec ecx
   296 0000053A 75DF                <1>     jnz .oq0
   297 0000053C 5D                  <1>     pop rbp
   298 0000053D 5A                  <1>     pop rdx
   299 0000053E 59                  <1>     pop rcx
   300 0000053F 5B                  <1>     pop rbx
   301 00000540 C3                  <1>     ret
   302                              <1> 
   303                              <1> debPrintFunctionName:
   304                              <1> ;Prints the DOS function that has been entered
   305                              <1> ;Entered with ah = Function number
   306 00000541 88E0                <1>     mov al, ah  ;Get dos function number
   307 00000543 488D1DAEFBFFFF      <1>     lea rbx, debascii
   308 0000054A 488D1535000000      <1>     lea rdx, .number
   309 00000551 24F0                <1>     and al, 0F0h    ;Get high nybble first
   310 00000553 C0E804              <1>     shr al, 4
   311 00000556 D7                  <1>     xlatb
   312 00000557 8802                <1>     mov byte [rdx], al
   313 00000559 88E0                <1>     mov al, ah
   314 0000055B 240F                <1>     and al, 0Fh
   315 0000055D D7                  <1>     xlatb
   316 0000055E 884201              <1>     mov byte [rdx + 1], al
   317 00000561 488D2D06000000      <1>     lea rbp, .dosString
   318 00000568 E856FCFFFF          <1>     call debPrintNullString
   319 0000056D C3                  <1>     ret
   320 0000056E 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   320 00000577 696F6E20496E742034- <1>
   320 00000580 31682F41483D        <1>
   321 00000586 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   322                              <1> 
   323                              <1> ;----------------:
   324                              <1> ;!!!! MACROS !!!!:
   325                              <1> ;----------------:
   326                              <1> ;Insert macro when entering a debug block
   327                              <1> %macro debugEnterM 0
   328                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   329                              <1>     mov rsp, debStackTop
   330                              <1> ;Push all registers except rsp on stack
   331                              <1>     push rax
   332                              <1>     push rbx
   333                              <1>     push rcx
   334                              <1>     push rdx
   335                              <1>     push rsi
   336                              <1>     push rdi
   337                              <1>     push rbp
   338                              <1>     push r8
   339                              <1>     push r9
   340                              <1>     push r10
   341                              <1>     push r11
   342                              <1>     push r12
   343                              <1>     push r13
   344                              <1>     push r14
   345                              <1>     push r15
   346                              <1>     pushfq
   347                              <1> %endmacro
   348                              <1> ;Insert macro when exiting a debug block
   349                              <1> %macro debugExitM 0
   350                              <1>     popfq
   351                              <1>     pop r15
   352                              <1>     pop r14
   353                              <1>     pop r13
   354                              <1>     pop r12
   355                              <1>     pop r11
   356                              <1>     pop r10
   357                              <1>     pop r9
   358                              <1>     pop r8
   359                              <1>     pop rbp
   360                              <1>     pop rdi
   361                              <1>     pop rsi
   362                              <1>     pop rdx
   363                              <1>     pop rcx
   364                              <1>     pop rbx
   365                              <1>     pop rax
   366                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   367                              <1> %endmacro
    18                                  %include "./Source/Kernel/FAT/bufferFunctions.asm"
    19                              <1> ;This file contains FAT disk buffer related functions that
    20                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    21                              <1> ;----------------------------------------------------
    22                              <1> ;           Externally referenced functions         :
    23                              <1> ;----------------------------------------------------
    24                              <1> 
    25                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    26                              <1> ;Sets the buffer in rdi to the head of the chain
    27                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    28                              <1> ;Output: Buffer header set to the head of the chain
    29 0000058C 48393D(4EC00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    30 00000593 7428                <1>     je .exit
    31 00000595 56                  <1>     push rsi
    32 00000596 488B35(4EC00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    33                              <1> .mainlp:
    34 0000059D 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    35 000005A0 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    36 000005A2 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    37 000005A5 EBF6                <1>     jmp short .mainlp
    38                              <1> .fnd:
    39 000005A7 57                  <1>     push rdi
    40 000005A8 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    41 000005AB 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    42 000005AE 5F                  <1>     pop rdi ;Get original buf back
    43 000005AF 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    44 000005B2 488735(4EC00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    45 000005B9 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    46 000005BC 5E                  <1>     pop rsi
    47                              <1> .exit:
    48 000005BD C3                  <1>     ret
    49                              <1> 
    50                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h
    51 000005BE E846000000          <1>     call flushBuffer
    52 000005C3 7306                <1>     jnc .exit
    53                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    54 000005C5 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    55                              <1> .exit:
    56 000005CB C3                  <1>     ret
    57                              <1> 
    58                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    59                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    60                              <1> ;Output: rdi = First disk buffer
    61 000005CC 488B3D(4EC00300)    <1>     mov rdi, [bufHeadPtr]
    62 000005D3 57                  <1>     push rdi
    63                              <1> .lp:
    64 000005D4 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    65 000005D8 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    66 000005DB 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    67 000005E2 75F0                <1>     jne .lp
    68 000005E4 5F                  <1>     pop rdi
    69 000005E5 C3                  <1>     ret
    70                              <1> 
    71                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    72                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    73                              <1> ; second buffer in the chain in rdi
    74                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    75                              <1> ;Output: rdi = Second buffer in the chain
    76 000005E6 E8A1FFFFFF          <1>     call makeBufferMostRecentlyUsed
    77 000005EB 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
    78 000005F2 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    79 000005F5 C3                  <1>     ret
    80                              <1> 
    81                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    82                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    83                              <1> ;Input: rdi = Buffer header to start searching at
    84                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    85                              <1> ;        ZF=ZE => No unreferenced buffer found
    86 000005F6 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    87 000005FA 750C                <1>     jnz .exit
    88 000005FC 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    89 000005FF 4881FFFFFFFFFF      <1>     cmp rdi, -1
    90 00000606 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    91                              <1> .exit:
    92 00000608 C3                  <1>     ret
    93                              <1> 
    94                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
    95                              <1> ;Flushes the data in a sector buffer to disk!
    96                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
    97                              <1> ;Exit:  CF=NC : Success
    98                              <1> ;       CF=CY : Fail, terminate the request
    99                              <1> ;First make request to device driver
   100 00000609 50                  <1>     push rax
   101 0000060A 53                  <1>     push rbx
   102 0000060B 51                  <1>     push rcx
   103 0000060C 52                  <1>     push rdx
   104 0000060D 56                  <1>     push rsi
   105 0000060E 55                  <1>     push rbp
   106 0000060F F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   107 00000613 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   108                              <1> .fbRequest0:
   109 00000615 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   110 0000061A F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   111 0000061E 7406                <1>     jz .fbRequest1
   112 00000620 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   113                              <1> .fbRequest1:
   114 00000626 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   115 00000629 B901000000          <1>     mov ecx, 1  ;One sector to copy
   116 0000062E 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   117 00000632 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   118 00000636 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   119 0000063A E83F140000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   120 0000063F E8B7120000          <1>     call absDiskDriverCall    ;Make Driver Request
   121 00000644 7525                <1>     jnz .fbFail
   122                              <1> ;Now check if the buffer was a FAT, to write additional copies
   123 00000646 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   124 0000064A 7417                <1>     jz .fbFreeExit  ;If not, exit
   125 0000064C FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   126 0000064F 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   127 00000651 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   128 00000654 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   129 00000658 E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   130                              <1> .fbFreeExit1:
   131 0000065D 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   132 00000660 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   133                              <1> .fbFreeExit:
   134 00000663 F8                  <1>     clc
   135                              <1> .fbExitFail:
   136 00000664 5D                  <1>     pop rbp
   137 00000665 5E                  <1>     pop rsi
   138 00000666 5A                  <1>     pop rdx
   139 00000667 59                  <1>     pop rcx
   140 00000668 5B                  <1>     pop rbx
   141 00000669 58                  <1>     pop rax
   142 0000066A C3                  <1>     ret
   143                              <1> .fbFail:
   144                              <1> ;Enter here only if the request failed
   145 0000066B FFCE                <1>     dec esi
   146 0000066D 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   147                              <1> ;Request failed thrice, critical error call
   148 0000066F 48893D(6AC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   149 00000676 48892D(20C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   150 0000067D 89C7                <1>     mov edi, eax    ;Save status word in di
   151 0000067F 48892D(20C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   152 00000686 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   153 00000689 B419                <1>     mov ah, critWrite | critFailOK | critRetryOK ;Set bits
   154                              <1>     ;Test for correct buffer data type
   155 0000068B F6C401              <1>     test ah, dosBuffer
   156 0000068E 7505                <1>     jnz .fbFail0
   157 00000690 80CC00              <1>     or ah, critDOS
   158 00000693 EB14                <1>     jmp short .fbFailMain
   159                              <1> .fbFail0:
   160 00000695 F6C402              <1>     test ah, fatBuffer
   161 00000698 7504                <1>     jnz .fbFail1
   162 0000069A B402                <1>     mov ah, critFAT
   163 0000069C EB0B                <1>     jmp short .fbFailMain
   164                              <1> .fbFail1:
   165 0000069E F6C404              <1>     test ah, dirBuffer
   166 000006A1 7504                <1>     jnz .fbFail2
   167 000006A3 B404                <1>     mov ah, critDir
   168 000006A5 EB02                <1>     jmp short .fbFailMain
   169                              <1> .fbFail2:
   170                              <1> ;Here it must be a data buffer
   171 000006A7 B406                <1>     mov ah, critData
   172                              <1> .fbFailMain:
   173 000006A9 8825(C0C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   174 000006AF 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   175 000006B3 E84E100000          <1>     call criticalDOSError   ;Return in al the return code
   176 000006B8 488B3D(6AC30300)    <1>     mov rdi, qword [xInt44RDI]
   177 000006BF 488B2D(20C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   178 000006C6 3C01                <1>     cmp al, critRetry
   179 000006C8 0F8447FFFFFF        <1>     je .fbRequest0
   180                              <1>     ;Else we fail (Ignore=Fail here)
   181 000006CE 66C705(66C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   181 000006D6 00                  <1>
   182 000006D7 F9                  <1>     stc ;Set error flag to indicate fail
   183 000006D8 E987FFFFFF          <1>     jmp .fbExitFail
   184                              <1> 
   185                              <1> 
   186                              <1> testDirtyBufferForDrive:    ;External linkage
   187                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   188                              <1> ;Input: al = Drive number (0 based)
   189                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   190                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   191 000006DD 53                  <1>     push rbx
   192 000006DE 488B1D(4EC00300)    <1>     mov rbx, qword [bufHeadPtr]
   193                              <1> .tdbfdCheckBuffer:
   194 000006E5 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   195 000006E8 7509                <1>     jne .tdbfdGotoNextBuffer
   196 000006EA F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   197 000006EE 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   198 000006F0 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   199                              <1> .tdbfdExit:
   200 000006F1 5B                  <1>     pop rbx
   201 000006F2 C3                  <1>     ret
   202                              <1> .tdbfdGotoNextBuffer:
   203 000006F3 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   204 000006F6 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   205 000006FD 74F2                <1>     je .tdbfdExit
   206 000006FF EBE4                <1>     jmp short .tdbfdCheckBuffer
   207                              <1> 
   208                              <1> freeBuffersForDPB:
   209                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   210                              <1> ; to have a drive number of -1, thus freeing it
   211                              <1> ;Given DPB is in rbp
   212 00000701 53                  <1>     push rbx
   213 00000702 488B1D(4EC00300)    <1>     mov rbx, qword [bufHeadPtr]
   214                              <1> .i0:
   215 00000709 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   216 0000070D 7506                <1>     jne .i1 ;If no, skip freeing
   217 0000070F 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   218                              <1> .i1:
   219 00000715 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   220 00000718 4881FBFFFFFFFF      <1>     cmp rbx, -1
   221 0000071F 75E8                <1>     jne .i0
   222                              <1> .exit:
   223 00000721 5B                  <1>     pop rbx
   224 00000722 C3                  <1>     ret
   225                              <1> 
   226                              <1> getBuffer: ;External Linkage (dosPrim.asm, fat.asm)
   227                              <1> ;
   228                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   229                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   230                              <1> ;Flushes if not in disk change mode. 
   231                              <1> ;If in disk change mode, will check to see if the selected buffer 
   232                              <1> ; has data referring a device using the same DPB as we are changing.
   233                              <1> ; If it is, skip flushing, if not, flush first!
   234                              <1> ;
   235                              <1> ;This function will return a pointer to the desired data sector OR 
   236                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   237                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   238                              <1> ;Entry: rax = Sector to read
   239                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   240                              <1> ;       qword [workingDPB] = DPB to use for transaction
   241                              <1> ;Exit:  CF=NC => 
   242                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   243                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   244 00000723 51                  <1>     push rcx
   245 00000724 52                  <1>     push rdx
   246 00000725 56                  <1>     push rsi
   247 00000726 57                  <1>     push rdi
   248 00000727 488B35(4FC50300)    <1>     mov rsi, qword [workingDPB]  ;Get DPB of transacting device
   249 0000072E 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   250 00000730 E865010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   251 00000735 4881FFFFFFFFFF      <1>     cmp rdi, -1
   252 0000073C 740D                <1>     je .rbReadNewSector
   253                              <1> .rbExit:
   254 0000073E F8                  <1>     clc
   255                              <1> .rbExitNoFlag:
   256 0000073F 5F                  <1>     pop rdi
   257 00000740 5E                  <1>     pop rsi
   258 00000741 5A                  <1>     pop rdx
   259 00000742 59                  <1>     pop rcx
   260 00000743 488B1D(D4C50300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   261 0000074A C3                  <1>     ret
   262                              <1> .rbReadNewSector:
   263 0000074B E8F3000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   264 00000750 803D(27D80300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   265 00000757 7506                <1>     jne .flush  ;We are not, flush buffer
   266 00000759 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   267 0000075D 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used
   268                              <1> .flush:
   269 0000075F E85AFEFFFF          <1>     call flushAndFreeBuffer
   270 00000764 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   271                              <1> .skipFlush:
   272                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   273 00000766 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   274 00000769 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
   275 0000076C 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   276 00000770 80F902              <1>     cmp cl, fatBuffer
   277 00000773 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   278 00000775 7503                <1>     jne .rbNonFATbuffer
   279 00000777 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   280                              <1> .rbNonFATbuffer:
   281 0000077A 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   282 0000077D 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   283 00000780 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   284 00000783 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   285 00000787 C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   286 0000078B E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   287 00000790 EBAD                <1>     jmp short .rbExitNoFlag
   288                              <1> 
   289                              <1> readSectorBuffer:   ;Internal Linkage
   290                              <1> ;Reads a sector into a built sector buffer
   291                              <1> ;Entry: rdi = Pointer to buffer header
   292                              <1> ;Exit:  CF=NC : Success
   293                              <1> ;       CF=CY : Fail, terminate the request
   294                              <1> ;       rbx pointing to buffer header
   295                              <1> ;First make request to device driver
   296 00000792 50                  <1>     push rax
   297 00000793 53                  <1>     push rbx
   298 00000794 51                  <1>     push rcx
   299 00000795 52                  <1>     push rdx
   300 00000796 56                  <1>     push rsi
   301 00000797 55                  <1>     push rbp
   302                              <1> .rsRequest0:
   303 00000798 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   304 0000079D F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   305 000007A1 7406                <1>     jz .rsRequest1
   306 000007A3 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   307                              <1> .rsRequest1:
   308 000007A9 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   309 000007AC B901000000          <1>     mov ecx, 1  ;One sector to copy
   310 000007B1 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   311 000007B5 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   312 000007B9 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   313 000007BD E8C7120000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   314 000007C2 E834110000          <1>     call absDiskDriverCall    ;Make Driver Request
   315 000007C7 7508                <1>     jnz .rsFail
   316                              <1> .rsExit:
   317 000007C9 F8                  <1>     clc
   318                              <1> .rsExitFail:
   319 000007CA 5D                  <1>     pop rbp
   320 000007CB 5E                  <1>     pop rsi
   321 000007CC 5A                  <1>     pop rdx
   322 000007CD 59                  <1>     pop rcx
   323 000007CE 5B                  <1>     pop rbx
   324 000007CF 58                  <1>     pop rax
   325 000007D0 C3                  <1>     ret
   326                              <1> .rsFail:
   327                              <1> ;Enter here only if the request failed
   328 000007D1 FFCE                <1>     dec esi
   329 000007D3 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   330                              <1> ;Request failed thrice, critical error call
   331 000007D5 48893D(6AC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   332 000007DC 48892D(20C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   333 000007E3 89C7                <1>     mov edi, eax    ;Save status word in di
   334 000007E5 48892D(20C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   335 000007EC 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   336 000007EF B418                <1>     mov ah, critRead | critFailOK | critRetryOK ;Set bits
   337                              <1>     ;Test for correct buffer data type
   338 000007F1 F6C401              <1>     test ah, dosBuffer
   339 000007F4 7505                <1>     jnz .rsFail0
   340 000007F6 80CC00              <1>     or ah, critDOS
   341 000007F9 EB14                <1>     jmp short .rsFailMain
   342                              <1> .rsFail0:
   343 000007FB F6C402              <1>     test ah, fatBuffer
   344 000007FE 7504                <1>     jnz .rsFail1
   345 00000800 B402                <1>     mov ah, critFAT
   346 00000802 EB0B                <1>     jmp short .rsFailMain
   347                              <1> .rsFail1:
   348 00000804 F6C404              <1>     test ah, dirBuffer
   349 00000807 7504                <1>     jnz .rsFail2
   350 00000809 B404                <1>     mov ah, critDir
   351 0000080B EB02                <1>     jmp short .rsFailMain
   352                              <1> .rsFail2:
   353                              <1> ;Here it must be a data buffer
   354 0000080D B406                <1>     mov ah, critData
   355                              <1> .rsFailMain:
   356 0000080F 8825(C0C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   357 00000815 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   358 00000819 E8E80E0000          <1>     call criticalDOSError
   359 0000081E 488B3D(6AC30300)    <1>     mov rdi, qword [xInt44RDI]
   360 00000825 488B2D(20C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   361 0000082C 3C01                <1>     cmp al, critRetry
   362 0000082E 0F8464FFFFFF        <1>     je .rsRequest0
   363                              <1>     ;Else we fail (Ignore=Fail here)
   364 00000834 66C705(66C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   364 0000083C 00                  <1>
   365 0000083D F9                  <1>     stc ;Set error flag to indicate fail
   366 0000083E E987FFFFFF          <1>     jmp .rsExitFail
   367                              <1>     
   368                              <1> findLRUBuffer: ;Internal Linkage
   369                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   370                              <1> ; in rbx and the currBuff variable
   371                              <1> ;Input: Nothing
   372                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   373                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   374 00000843 52                  <1>     push rdx
   375 00000844 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   376 0000084B 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   377 0000084F 7436                <1>     je .flbExit 
   378 00000851 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   379 00000858 742D                <1>     je .flbExit
   380                              <1> .flbWalk:
   381 0000085A 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   382 0000085D 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   383 00000860 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   384 00000864 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   385 00000866 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   386 0000086D 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   387 0000086F 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   388                              <1> .flbHeadLink:
   389 00000876 488B15(4EC00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   390 0000087D 48893D(4EC00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   391 00000884 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   392                              <1> .flbExit:
   393 00000887 5A                  <1>     pop rdx
   394 00000888 48893D(D4C50300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   395 0000088F C3                  <1>     ret
   396                              <1> .flbFreeLink:
   397 00000890 51                  <1>     push rcx
   398 00000891 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   399 00000894 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   400 00000897 59                  <1>     pop rcx
   401 00000898 EBDC                <1>     jmp short .flbHeadLink
   402                              <1> 
   403                              <1> findSectorInBuffer:     ;Internal linkage
   404                              <1> ;Finds the Buffer for a sector
   405                              <1> ;If the sector is not in a buffer, returns with a -1
   406                              <1> ;Input: rax = Sector number
   407                              <1> ;        dl = Drive number
   408                              <1> ;Output: rdi = Buffer hdr pointer or -1
   409 0000089A 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   410                              <1> .fsiCheckBuffer:
   411 000008A1 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   412 000008A4 7507                <1>     jne .fsiGotoNextBuffer
   413 000008A6 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   414 000008AA 7501                <1>     jne .fsiGotoNextBuffer
   415                              <1> .fsiExit:
   416 000008AC C3                  <1>     ret
   417                              <1> .fsiGotoNextBuffer:
   418 000008AD 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   419 000008B0 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   420 000008B7 74F3                <1>     je .fsiExit
   421 000008B9 EBE6                <1>     jmp short .fsiCheckBuffer
    19                                  %include "./Source/Kernel/FAT/fat.asm"
    20                              <1> ;---------------------------------------------------:
    21                              <1> ;                   KERNEL FUNCTIONS                :
    22                              <1> ;---------------------------------------------------:
    23                              <1> makeDIR:           ;ah = 39h
    24                              <1> removeDIR:         ;ah = 3Ah
    25                              <1> setCurrentDIR:     ;ah = 3Bh, set dir for current drive (or drive in path)
    26                              <1> getCurrentDIR:     ;ah = 47h
    27                              <1> getSetFileDateTime:;ah = 57h
    28                              <1> trueName:          ;ah = 60h, get fully qualified name
    29 000008BB C3                  <1>     ret
    30                              <1> 
    31                              <1> 
    32                              <1> ;-----------------------------------:
    33                              <1> ;       File System routines        :
    34                              <1> ;-----------------------------------:
    35                              <1> getFATtype:
    36                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    37                              <1> ;Entry: rbp = DPB to ascertain FAT
    38                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    39 000008BC 53                  <1>     push rbx
    40 000008BD 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    41 000008C0 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    42 000008C5 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    43 000008CB 730F                <1>     jae .exit
    44 000008CD FFC9                <1>     dec ecx     ;FAT 12 marker
    45 000008CF 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    46 000008D5 7205                <1>     jb .exit
    47 000008D7 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    48                              <1> .exit:
    49 000008DC 5B                  <1>     pop rbx
    50 000008DD C3                  <1>     ret
    51                              <1> 
    52                              <1> clust2FATEntry:
    53                              <1> ;Converts a cluster number to a offset in the FAT
    54                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    55                              <1> ;        eax = Cluster number to look for
    56                              <1> ;Exit:   eax = Sector on disk of FAT 
    57                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    58                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    59 000008DE 53                  <1>     push rbx
    60 000008DF 55                  <1>     push rbp
    61 000008E0 488B2D(4FC50300)    <1>     mov rbp, qword [workingDPB]
    62 000008E7 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    63 000008EA 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    64 000008F0 731E                <1>     jae .fat32
    65 000008F2 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    66 000008F8 7209                <1>     jb .fat12
    67                              <1> ;FAT16
    68 000008FA D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    69 000008FC 6801000000          <1>     push qword 1
    70 00000901 EB15                <1>     jmp short .common
    71                              <1> .fat12:
    72 00000903 89C1                <1>     mov ecx, eax    ;ecx = eax
    73 00000905 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    74 00000907 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    75 00000909 6800000000          <1>     push qword 0
    76 0000090E EB08                <1>     jmp short .common
    77                              <1> .fat32:
    78 00000910 6802000000          <1>     push qword 2
    79 00000915 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    80                              <1> .common:
    81                              <1> ;eax has the FAToffset
    82 00000918 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    83 0000091C 31D2                <1>     xor edx, edx    ;edx = 0
    84 0000091E F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    85 00000920 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    86 00000924 01D8                <1>     add eax, ebx
    87 00000926 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    88 00000927 5D                  <1>     pop rbp
    89 00000928 5B                  <1>     pop rbx
    90 00000929 C3                  <1>     ret
    91                              <1> 
    92                              <1> getStartSectorOfCluster:
    93                              <1> ;Input: eax = Cluster Number
    94                              <1> ;       rbp = dpb pointer
    95                              <1> ;Output: rax = Starting Sector number for cluster
    96                              <1> ;Gives the data sector we are at in the current cluster
    97                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    98 0000092A 51                  <1>     push rcx
    99 0000092B 09C0                <1>     or eax, eax ;Zero upper dword
   100 0000092D 482D02000000        <1>     sub rax, 2
   101 00000933 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   102 00000936 48D3E0              <1>     shl rax, cl
   103 00000939 31C9                <1>     xor ecx, ecx
   104 0000093B 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
   105 0000093E 4801C8              <1>     add rax, rcx
   106                              <1>     ;rax now has the first sector of the current cluster
   107 00000941 59                  <1>     pop rcx
   108 00000942 C3                  <1>     ret
   109                              <1> 
   110                              <1> findFreeCluster:
   111                              <1> ;Walks the FAT to find a free cluster and returns the 
   112                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   113                              <1> ;Works on the workingDPB
   114                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   115 00000943 53                  <1>     push rbx
   116 00000944 51                  <1>     push rcx
   117 00000945 52                  <1>     push rdx
   118 00000946 57                  <1>     push rdi
   119 00000947 55                  <1>     push rbp
   120 00000948 488B2D(4FC50300)    <1>     mov rbp, qword [workingDPB]
   121 0000094F 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   122 00000953 488905(DCC50300)    <1>     mov qword [tempSect], rax   ;Save the sector number temporarily
   123                              <1> ;Use ebp as sector counter
   124 0000095A 8B5513              <1>     mov edx, dword [rbp + dpb.dFATlength]
   125                              <1> ;Get Sector Size in bytes in ebx
   126 0000095D 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
   127                              <1> ;Get FAT type
   128 00000961 E856FFFFFF          <1>     call getFATtype ;Gets FAT type (for number of elements in sector)
   129 00000966 0F84B6000000        <1>     jz .fat12
   130 0000096C F6C101              <1>     test cl, 1
   131 0000096F 7571                <1>     jnz .fat16
   132                              <1> ;FAT32 proceeds here
   133 00000971 C1EB02              <1>     shr ebx, 2  ;Divide by 4 to get number of FAT entries in a sector buffer
   134 00000974 66891D(E4C50300)    <1>     mov word [entries], bx
   135                              <1> .fat32Search:
   136 0000097B B102                <1>     mov cl, fatBuffer
   137 0000097D 488B05(DCC50300)    <1>     mov rax, qword [tempSect]
   138 00000984 E89AFDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   139 00000989 724A                <1>     jc .exitFail
   140 0000098B 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   141 0000098F 31C0                <1>     xor eax, eax
   142 00000991 0FB70D(E4C50300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   143 00000998 F2AF                <1>     repne scasd ;Look for the zero dword 
   144 0000099A 740D                <1>     je .fat32Found  ;If found, report cluster number (offset into FAT)
   145 0000099C FFCA                <1>     dec edx ;Dec number of sectors left to search
   146 0000099E 743B                <1>     jz .noFreeClusters
   147 000009A0 48FF05(DCC50300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   148 000009A7 EBD2                <1>     jmp short .fat32Search
   149                              <1> .fat32Found:
   150 000009A9 81EF04000000        <1>     sub edi, 4  ;edi is one dword past the entry
   151                              <1> .computeEntry:
   152 000009AF 480FB74D06          <1>     movzx rcx, word [rbp + dpb.wFAToffset] ;Get start sector number of FAT 
   153 000009B4 488B05(DCC50300)    <1>     mov rax, qword [tempSect]   ;Get disk sector number of FAT into rax
   154 000009BB 4829C8              <1>     sub rax, rcx   ;Get Offset into FAT in rax
   155 000009BE 0FB70D(E4C50300)    <1>     movzx ecx, word [entries] ;Get number of entries in a FAT sector
   156 000009C5 52                  <1>     push rdx
   157 000009C6 48F7E1              <1>     mul rcx ;Multiply rax with rcx (technically eax with ecx)
   158 000009C9 5A                  <1>     pop rdx
   159                              <1> ;rbx points to current buffer header
   160 000009CA 488D5320            <1>     lea rdx, qword [rbx + bufferHdr.dataarea]
   161 000009CE 4829D7              <1>     sub rdi, rdx
   162 000009D1 4801F8              <1>     add rax, rdi    ;Add the offset into the sector to rax to get cluster number
   163                              <1> .exit:
   164 000009D4 F8                  <1>     clc
   165                              <1> .exitFail:      ;Keep carry flag
   166 000009D5 5D                  <1>     pop rbp
   167 000009D6 5F                  <1>     pop rdi
   168 000009D7 5A                  <1>     pop rdx
   169 000009D8 59                  <1>     pop rcx
   170 000009D9 5B                  <1>     pop rbx
   171 000009DA C3                  <1>     ret
   172                              <1> .noFreeClusters:
   173 000009DB B8FFFFFFFF          <1>     mov eax, -1 ;No free cluster marker
   174 000009E0 EBF2                <1>     jmp short .exit
   175                              <1> .fat16:
   176 000009E2 D1EB                <1>     shr ebx, 1  ;Divide by 2 to get number of FAT entries in a sector buffer
   177 000009E4 66891D(E4C50300)    <1>     mov word [entries], bx
   178                              <1> .fat16Search:
   179 000009EB B102                <1>     mov cl, fatBuffer
   180 000009ED 488B05(DCC50300)    <1>     mov rax, qword [tempSect]
   181 000009F4 E82AFDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   182 000009F9 72DA                <1>     jc .exitFail
   183 000009FB 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   184 000009FF 31C0                <1>     xor eax, eax
   185 00000A01 0FB70D(E4C50300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   186 00000A08 F266AF              <1>     repne scasw ;Look for the zero word 
   187 00000A0B 740D                <1>     je .fat16Found  ;If found, report cluster number (offset into FAT)
   188 00000A0D FFCA                <1>     dec edx ;Dec number of sectors left to search
   189 00000A0F 74CA                <1>     jz .noFreeClusters
   190 00000A11 48FF05(DCC50300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   191 00000A18 EBD1                <1>     jmp short .fat16Search
   192                              <1> .fat16Found:
   193 00000A1A 81EF02000000        <1>     sub edi, 2  ;edi is one word past the entry
   194 00000A20 EB8D                <1>     jmp short .computeEntry
   195                              <1> .fat12:
   196 00000A22 89D8                <1>     mov eax, ebx    ;Get sectorsize in ax
   197 00000A24 D1E0                <1>     shl eax, 1  ;Multiply by 2
   198 00000A26 B903000000          <1>     mov ecx, 3  ;1.5 bytes per FAT entry *2
   199 00000A2B 52                  <1>     push rdx    ;Preserve number of sectors in FAT counter
   200 00000A2C 31D2                <1>     xor edx, edx
   201 00000A2E F7F1                <1>     div ecx
   202 00000A30 5A                  <1>     pop rdx
   203 00000A31 668905(E4C50300)    <1>     mov word [entries], ax ;Get quotient (number of whole entries in sector) 
   204                              <1>     ;The value is rounded down so we can read the next sector for the 
   205                              <1>     ;last entry manually (thus buffering it if it not already buffered)
   206 00000A38 B102                <1>     mov cl, fatBuffer
   207 00000A3A 488B05(DCC50300)    <1>     mov rax, qword [tempSect]
   208 00000A41 E8DDFCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   209 00000A46 728D                <1>     jc .exitFail
   210 00000A48 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   211                              <1> .fat12SearchNewSector:
   212 00000A4C 0FB70D(E4C50300)    <1>     movzx ecx, word [entries]   ;This is total entries in Sector rounded down
   213                              <1> .fat12Search:
   214 00000A53 0FB707              <1>     movzx eax, word [rdi]   ;Get first word (EVEN ENTRY)
   215 00000A56 25FF0F0000          <1>     and eax, 0FFFh   ;Clear upper nybble
   216 00000A5B 744A                <1>     jz .fat12EntryFound
   217 00000A5D 48FFC7              <1>     inc rdi ;Goto next byte
   218 00000A60 FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   219 00000A62 0FB707              <1>     movzx eax, word [rdi]  ;Get second word (ODD ENTRY)
   220 00000A65 C1E804              <1>     shr eax, 4  ;Shift down by 4
   221 00000A68 743D                <1>     jz .fat12EntryFound
   222 00000A6A 48FFC7              <1>     inc rdi ;Goto next entry
   223 00000A6D FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   224 00000A6F 75E2                <1>     jnz .fat12Search
   225                              <1> ;We arrive here when we are at the last entry in the sector
   226 00000A71 48FF05(DCC50300)    <1>     inc qword [tempSect]    ;Get next Sector
   227 00000A78 488B05(DCC50300)    <1>     mov rax, qword [tempSect]   ;Get this sector in rax
   228 00000A7F B102                <1>     mov cl, fatBuffer
   229 00000A81 E89DFCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   230 00000A86 0F8249FFFFFF        <1>     jc .exitFail
   231 00000A8C 0FB607              <1>     movzx eax, byte [rdi]  ;Get last byte in old buffer (rdi still points there)
   232 00000A8F 488D4B20            <1>     lea rcx, qword [rbx + bufferHdr.dataarea]   ;Go to data area (preserve rdi)
   233 00000A93 8A21                <1>     mov ah, byte [rcx]  ;Get first byte in new sector
   234 00000A95 C1E804              <1>     shr eax, 4  ;Clear out bottom nybble
   235 00000A98 740D                <1>     jz .fat12EntryFound ;Found a sector!
   236                              <1>     ;Empty cluster not found in sector
   237 00000A9A FFCA                <1>     dec edx ;Decrement sector count
   238 00000A9C 0F8439FFFFFF        <1>     jz .noFreeClusters
   239 00000AA2 4889CF              <1>     mov rdi, rcx    ;Set rdi to point at start of next sector
   240 00000AA5 EBA5                <1>     jmp short .fat12SearchNewSector ;Reload the number of entries and search
   241                              <1> .fat12EntryFound:
   242 00000AA7 E903FFFFFF          <1>     jmp .computeEntry   ;Unnecessary redirection
   243                              <1> 
   244                              <1> getDataSector:
   245                              <1> ;This function will request the sector of data in [currSectD].
   246                              <1> ;This call can only be used for DATA sectors.
   247                              <1> ;Preserves all registers
   248                              <1> ;On ret: CF=NC => currBuff = Buffer with data
   249                              <1> ;        CF=CY => Critical error occurred and was FAILed
   250 00000AAC 50                  <1>     push rax
   251 00000AAD 53                  <1>     push rbx
   252 00000AAE 51                  <1>     push rcx
   253 00000AAF 488B05(F4C50300)    <1>     mov rax, qword [currSectD]  ;Get the disk sector number to read
   254 00000AB6 BB01000000          <1>     mov ebx, dosBuffer
   255 00000ABB B908000000          <1>     mov ecx, dataBuffer 
   256 00000AC0 4885C0              <1>     test rax, rax
   257 00000AC3 0F44CB              <1>     cmovz ecx, ebx  ;If sector 0, change to DOS buffer
   258                              <1> .getSectorRead:
   259 00000AC6 E858FCFFFF          <1>     call getBuffer  ;Get ptr to buffer header in [currBuff] (and rbx but ignore)
   260 00000ACB 59                  <1>     pop rcx
   261 00000ACC 5B                  <1>     pop rbx
   262 00000ACD 58                  <1>     pop rax
   263 00000ACE C3                  <1>     ret
   264                              <1> 
   265                              <1> getNextSectorOfFile:
   266                              <1> ;This function will read the next sector for a file into a buffer.
   267                              <1> ;If the next sector to be read lives in the next cluster, it will update
   268                              <1> ; the file handle of the file being read/written to the new cluster
   269                              <1> ;
   270                              <1> ;Input: rbp = dpb pointer
   271                              <1> ;Output:
   272                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   273                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File
   274                              <1> ;       CF=CY => Critical error occurred and was FAILed
   275                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   276                              <1> ; next cluster and read first sector 
   277                              <1>     ;Check if we need to go to next cluster
   278 00000ACF 8A05(F3C50300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   279 00000AD5 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   280 00000AD8 7416                <1>     je .gotoNextCluster
   281                              <1>     ;Goto next sector in same cluster
   282 00000ADA FE05(F3C50300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   283 00000AE0 48FF05(F4C50300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk
   284 00000AE7 488B05(F4C50300)    <1>     mov rax, qword [currSectD]
   285                              <1> .exitOK:
   286 00000AEE F8                  <1>     clc
   287                              <1> .exitFail:
   288 00000AEF C3                  <1>     ret
   289                              <1> .gotoNextCluster:
   290 00000AF0 8B05(EAC50300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   291 00000AF6 E82A000000          <1>     call walkFAT
   292 00000AFB 72F2                <1>     jc .exitFail
   293                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   294 00000AFD 3DFFFFFFFF          <1>     cmp eax, -1
   295 00000B02 74EA                <1>     je .exitOK
   296                              <1> ;Update the new cluster and sector information
   297 00000B04 8905(EAC50300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   298 00000B0A FF05(E6C50300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   299 00000B10 E815FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster
   300 00000B15 488905(F4C50300)    <1>     mov qword [currSectD], rax  ;Save it
   301 00000B1C C605(F3C50300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   302 00000B23 EBC9                <1>     jmp short .exitOK
   303                              <1> 
   304                              <1> 
   305                              <1> walkFAT:
   306                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   307                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   308                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   309                              <1> ;       rbp = DPB number
   310                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   311                              <1> ;If carry set, getBuffer failed!
   312 00000B25 53                  <1>     push rbx
   313 00000B26 51                  <1>     push rcx
   314 00000B27 52                  <1>     push rdx
   315 00000B28 57                  <1>     push rdi
   316 00000B29 55                  <1>     push rbp
   317 00000B2A 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   318 00000B2C E8ADFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   319                              <1>     ;and FAT type in ecx
   320 00000B31 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]
   321 00000B35 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   322 00000B37 51                  <1>     push rcx    ;Move FAT signature onto stack
   323 00000B38 B102                <1>     mov cl, fatBuffer
   324 00000B3A E8E4FBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   325 00000B3F 59                  <1>     pop rcx
   326 00000B40 722D                <1>     jc .exitFail
   327                              <1>     ;Check if FAT 12, 16, 32
   328 00000B42 85C9                <1>     test ecx, ecx
   329 00000B44 742F                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   330 00000B46 F7C101000000        <1>     test ecx, 1
   331 00000B4C 7410                <1>     jz .goToNextClusterFat32
   332                              <1>     ;Here we handle FAT16
   333 00000B4E 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   334 00000B53 663DFFFF            <1>     cmp ax, -1
   335 00000B57 7515                <1>     jne .exit
   336 00000B59 0FBEC0              <1>     movsx eax, al
   337 00000B5C EB10                <1>     jmp short .exit
   338                              <1> .goToNextClusterFat32:
   339 00000B5E 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   340 00000B62 3DFFFFFFFF          <1>     cmp eax, -1
   341 00000B67 7405                <1>     je .exit   ;If EOC, skip zeroing nybble
   342 00000B69 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   343                              <1> .exit:
   344 00000B6E F8                  <1>     clc
   345                              <1> .exitFail:
   346 00000B6F 5D                  <1>     pop rbp
   347 00000B70 5F                  <1>     pop rdi
   348 00000B71 5A                  <1>     pop rdx
   349 00000B72 59                  <1>     pop rcx
   350 00000B73 5B                  <1>     pop rbx
   351 00000B74 C3                  <1>     ret
   352                              <1> .gotoNextClusterFat12:
   353                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   354                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   355                              <1> 
   356 00000B75 57                  <1>     push rdi    ;Save the cluster number on the stack
   357 00000B76 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   358 00000B79 FFC0                <1>     inc eax ;Get next sector
   359 00000B7B B102                <1>     mov cl, fatBuffer
   360 00000B7D E8A1FBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   361 00000B82 59                  <1>     pop rcx ;Return the cluster number in rcx
   362 00000B83 72EA                <1>     jc .exitFail
   363                              <1>     ;rdi has first buffer header, rbx has second buffer header
   364                              <1>     ;rdx has offset into first header for entry
   365 00000B85 F7C101000000        <1>     test ecx, 1  ;Check if cluster is odd
   366 00000B8B 7422                <1>     jz .gotoNextClusterFat12Even
   367                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   368 00000B8D 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   369 00000B91 29D0                <1>     sub eax, edx
   370 00000B93 FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   371 00000B95 750E                <1>     jnz .gotoNextClusterFat12NoCross
   372                              <1>     ;Boundary cross, build entry properly
   373 00000B97 31C0                <1>     xor eax, eax
   374 00000B99 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   375 00000B9D 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   376 00000BA0 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   377 00000BA3 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   378                              <1> .gotoNextClusterFat12NoCross:
   379 00000BA5 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   380 00000BAA C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   381 00000BAD EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   382                              <1> .gotoNextClusterFat12Even:
   383                              <1>     ;Here the cluster is even and can't cross a sector boundary
   384 00000BAF 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   385 00000BB4 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   386                              <1> .checkIfLastFAT12Cluster:
   387 00000BB9 663DFF0F            <1>     cmp ax, 0FFFh
   388 00000BBD 75AF                <1>     jne .exit
   389 00000BBF B8FFFFFFFF          <1>     mov eax, -1
   390 00000BC4 E9A5FFFFFF          <1>     jmp .exit
    20                                  %include "./Source/Kernel/FAT/fileSearch.asm"
    21                              <1> ;Generic Find First and Find Next functions here
    22                              <1> 
    23                              <1> genericFindFirst:
    24 00000BC9 C3                  <1>     ret
    25                              <1> genericFindNext:
    26 00000BCA C3                  <1>     ret
    21                                  %include "./Source/Kernel/CharDevs/charFunctions.asm"
    22                              <1> ;Dos default char functions live here
    23                              <1> 
    24                              <1> stdinReadEcho:     ;ah = 01h
    25                              <1> ;Return char that has been read and echoed in al
    26 00000BCB E834000000          <1>     call waitStdinNoEcho
    27 00000BD0 84C0                <1>     test al, al
    28 00000BD2 7409                <1>     jz .stdireexit
    29 00000BD4 88C2                <1>     mov dl, al
    30 00000BD6 E803000000          <1>     call stdoutWrite    ;Output it to screen
    31 00000BDB 88D0                <1>     mov al, dl
    32                              <1> .stdireexit:
    33 00000BDD C3                  <1>     ret
    34                              <1> 
    35                              <1> stdoutWrite:       ;ah = 02h
    36                              <1> ;Bspace is regular cursor left, does not insert a blank
    37 00000BDE 8815(47C50300)      <1>     mov byte [singleIObyt], dl
    38 00000BE4 B008                <1>     mov al, drvWRITE
    39 00000BE6 B901000000          <1>     mov ecx, 1
    40 00000BEB 488D35(47C50300)    <1>     lea rsi, singleIObyt
    41 00000BF2 E83E0F0000          <1>     call secdReqCharIOReq   ;Puts in rbx the request block
    42 00000BF7 488B35(44C00300)    <1>     mov rsi, qword [vConPtr]   ;Get ptr to current con device header
    43 00000BFE E8D30B0000          <1>     call goDriver
    44 00000C03 C3                  <1>     ret
    45                              <1> stdauxRead:        ;ah = 03h
    46                              <1> stdauxWrite:       ;ah = 04h
    47                              <1> stdprnWrite:       ;ah = 05h
    48                              <1> directCONIO:       ;ah = 06h
    49                              <1> waitDirectInNoEcho:;ah = 07h
    50                              <1> waitStdinNoEcho:   ;ah = 08h
    51                              <1> ;Return char in al
    52 00000C04 488D35(47C50300)    <1>     lea rsi, singleIObyt    ;Get buffer 
    53 00000C0B B004                <1>     mov al, drvREAD
    54 00000C0D B901000000          <1>     mov ecx, 1
    55 00000C12 E81E0F0000          <1>     call secdReqCharIOReq
    56 00000C17 488B35(44C00300)    <1>     mov rsi, qword [vConPtr]   ;Get ptr to current con device header
    57 00000C1E E8B30B0000          <1>     call goDriver
    58                              <1> 
    59 00000C23 8A05(47C50300)      <1>     mov al, byte [singleIObyt]  ;Get byte
    60 00000C29 C3                  <1>     ret
    61                              <1> printString:       ;ah = 09h
    62 00000C2A 31C9                <1>     xor ecx, ecx    ;Clear char counter
    63 00000C2C B824000000          <1>     mov eax, "$"    ;Terminating char
    64 00000C31 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
    65                              <1> .ps0:   ;Search for $ to get count of chars
    66 00000C34 AE                  <1>     scasb
    67 00000C35 7404                <1>     je .ps1
    68 00000C37 FFC1                <1>     inc ecx
    69 00000C39 EBF9                <1>     jmp short .ps0
    70                              <1> .ps1:   ;Use handle 
    71                              <1> ;ecx has length of string, rdx has user buffer to print
    72 00000C3B B008                <1>     mov al, drvWRITE
    73 00000C3D 4889D6              <1>     mov rsi, rdx
    74 00000C40 E8F00E0000          <1>     call secdReqCharIOReq
    75 00000C45 488B35(44C00300)    <1>     mov rsi, qword [vConPtr]   ;Get ptr to current con device header
    76 00000C4C E8850B0000          <1>     call goDriver   ;Called with rbx pointing to the request header
    77 00000C51 C3                  <1>     ret
    78                              <1> buffStdinInput:    ;ah = 0Ah
    79                              <1> checkStdinStatus:  ;ah = 0Bh
    80                              <1> clearbuffDoFunc:   ;ah = 0Ch
    81                              <1> ;------------------------
    82                              <1> ;  Primitive functions  :
    83                              <1> ;------------------------
    84                              <1> 
    85                              <1> ;------------------------
    86                              <1> ;   Utility functions   :
    87                              <1> ;------------------------
    88                              <1> checkBreakOnCon:
    89                              <1> ;Reads bytes from CON if there are any bytes to read and 
    90                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
    91 00000C52 803D(63C30300)01    <1>     cmp byte [inDOS], 1
    92 00000C59 7401                <1>     je checkBreak  ;Only check ^C on first entry to DOS
    93 00000C5B C3                  <1>     ret
    94                              <1> checkBreak:
    95                              <1> ;Returns in al the keystroke that is available IF one is available
    96                              <1> ; or al=0 if no keystroke available
    97 00000C5C 53                  <1>     push rbx
    98 00000C5D 56                  <1>     push rsi
    99 00000C5E 488B35(44C00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   100 00000C65 31C0                <1>     xor eax, eax
   101                              <1>     ;Place command code and a zero status word at the same time
   102 00000C67 B005                <1>     mov al, drvNONDESTREAD
   103 00000C69 8905(EFC30300)      <1>     mov dword [secdReqHdr + nonDestInNoWaitReqPkt.cmdcde], eax
   104                              <1>     ;Place the packet size in the hdrlen field
   105 00000C6F B00E                <1>     mov al, nonDestInNoWaitReqPkt_size
   106 00000C71 8805(EDC30300)      <1>     mov byte [secdReqHdr + nonDestInNoWaitReqPkt.hdrlen], al
   107 00000C77 488D1D(EDC30300)    <1>     lea rbx, secdReqHdr
   108 00000C7E E8530B0000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   109                              <1>     ;Check if the busy bit is set (No keystroke available)
   110 00000C83 66F705(F0C30300)00- <1>     test word [secdReqHdr + nonDestInNoWaitReqPkt.status], drvBsyStatus
   110 00000C8B 02                  <1>
   111 00000C8C 7403                <1>     jz .charFound
   112                              <1> .exit:
   113 00000C8E 5E                  <1>     pop rsi
   114 00000C8F 5B                  <1>     pop rbx
   115 00000C90 C3                  <1>     ret
   116                              <1> .charFound:
   117                              <1> ;Keystroke available, proceed
   118 00000C91 8A05(FAC30300)      <1>     mov al, byte [secdReqHdr + nonDestInNoWaitReqPkt.retbyt]    ;Get char
   119 00000C97 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   120 00000C99 75F3                <1>     jne .exit   ;If not equal exit
   121                              <1> ;Now we pull the char out of the buffer
   122 00000C9B 31C0                <1>     xor eax, eax
   123 00000C9D B004                <1>     mov al, drvREAD ;Read command
   124 00000C9F 8905(EFC30300)      <1>     mov dword [secdReqHdr + ioReqPkt.cmdcde], eax
   125                              <1>     ;Place packet size
   126 00000CA5 C605(EDC30300)2A    <1>     mov byte [secdReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   127                              <1>     ;Place pointers and number of chars
   128 00000CAC C705(03C40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   128 00000CB4 0000                <1>
   129 00000CB6 488D05(47C50300)    <1>     lea rax, singleIObyt    ;IO Byte buffer
   130 00000CBD 488905(FBC30300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rax
   131 00000CC4 E80D0B0000          <1>     call goDriver   ;RSI and RBX as before
   132 00000CC9 C3                  <1>     ret ;Stopgap right now, do nothing
   133                              <1> 
   134                              <1> 
   135                              <1> swapVConDriver:
   136                              <1> ;Sets up the vCon to use the alternative device driver 
   137 00000CCA 57                  <1>     push rdi
   138 00000CCB E810000000          <1>     call vConUseAlt
   139 00000CD0 488B3D(CAC50300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   140 00000CD7 48893D(5FC50300)    <1>     mov qword [vConOldSFT], rdi ;Save the SFT ptr in var
   141 00000CDE 5F                  <1>     pop rdi
   142 00000CDF C3                  <1>     ret
   143                              <1> ;These functions set/clear whether vCon should use vConOldSFT or vConPtr
   144                              <1> ;If vConDrvFlg = 1 => Use vConOldSFT
   145                              <1> ;If vConDrvFlg = 0 => Use vConPtr
   146                              <1> vConUseAlt:
   147 00000CE0 C605(EAC30300)01    <1>     mov byte [vConDrvFlg], 1    ;Set to use alternative driver
   148 00000CE7 C3                  <1>     ret
   149                              <1> vConUseDef:
   150 00000CE8 C605(EAC30300)00    <1>     mov byte [vConDrvFlg], 0    ;Clear to use default driver
   151 00000CEF C3                  <1>     ret
   152                              <1> 
   153                              <1> getVConDriverPtr:
   154                              <1> ;Return: rdi = vCon Device Driver pointer
   155 00000CF0 488B3D(44C00300)    <1>     mov rdi, qword [vConPtr]  ;Get the usual vCon Ptr
   156 00000CF7 F605(EAC30300)01    <1>     test byte [vConDrvFlg], 1   ;If set, use alternative driver
   157 00000CFE 740B                <1>     jz .exit
   158 00000D00 488B3D(5FC50300)    <1>     mov rdi, qword [vConOldSFT] ;Get the alt. vCon Ptr
   159 00000D07 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get dev drv from SFT
   160                              <1> .exit:
   161 00000D0B C3                  <1>     ret
    22                                  %include "./Source/Kernel/CharDevs/dateTimeFunctions.asm"
    23                              <1> ;Major kernel date time functions and subroutines
    24                              <1> 
    25                              <1> getDate:           ;ah = 2Ah
    26                              <1> setDate:           ;ah = 2Bh
    27                              <1> getTime:           ;ah = 2Ch
    28                              <1> setTime:           ;ah = 2Dh
    29 00000D0C C3                  <1>     ret
    23                                  %include "./Source/Kernel/FileIO/fcbFunctions.asm"
    24                              <1> openFileFCB:       ;ah = 0Fh
    25                              <1> closeFileFCB:      ;ah = 10h
    26                              <1> findFirstFileFCB:  ;ah = 11h
    27                              <1> findNextFileFCB:   ;ah = 12h
    28                              <1> deleteFileFCB:     ;ah = 13h
    29                              <1> sequentialReadFCB: ;ah = 14h
    30                              <1> sequentialWriteFCB:;ah = 15h
    31                              <1> createFileFCB:     ;ah = 16h
    32                              <1> renameFileFCB:     ;ah = 17h
    33 00000D0D C3                  <1>     ret
    34                              <1> setDTA:            ;ah = 1Ah
    35                              <1> ;Called with:
    36                              <1> ;   rdx = Pointer to the new default DTA
    37 00000D0E 488B1D(D2C30300)    <1>     mov rbx, qword [oldRSP]
    38 00000D15 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    39 00000D19 488915(72C30300)    <1>     mov qword [currentDTA], rdx
    40 00000D20 C3                  <1>     ret
    41                              <1> randomReadFCB:     ;ah = 21h
    42                              <1> randomWriteFCB:    ;ah = 22h
    43                              <1> getFileSizeFCB:    ;ah = 23h
    44                              <1> setRelRecordFCB:   ;ah = 24h
    45                              <1> randBlockReadFCB:  ;ah = 27h
    46                              <1> randBlockWriteFCB: ;ah = 28h
    47                              <1> parseFilenameFCB:  ;ah = 29h
    48 00000D21 C3                  <1>     ret
    49                              <1> getDTA:            ;ah = 2Fh
    50 00000D22 488B15(D2C30300)    <1>     mov rdx, qword [oldRSP]
    51 00000D29 488B1D(72C30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    52 00000D30 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    53 00000D34 C3                  <1>     ret
    24                                  %include "./Source/Kernel/FileIO/handleFunctions.asm"
    25                              <1> ;-----------------------------------:
    26                              <1> ;    File Handle Kernel routines    :
    27                              <1> ;-----------------------------------:
    28                              <1> 
    29                              <1> createFileHdl:     ;ah = 3Ch, handle function
    30 00000D35 C3                  <1>     ret
    31                              <1> openFileHdl:       ;ah = 3Dh, handle function
    32 00000D36 C3                  <1>     ret
    33                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    34 00000D37 C3                  <1>     ret
    35                              <1> readFileHdl:       ;ah = 3Fh, handle function
    36 00000D38 488D3593000000      <1>     lea rsi, readBytes
    37                              <1> .common:
    38 00000D3F E830030000          <1>     call getSFTPtr ;Get SFT ptr in rdi (if file is r/w-able from machine)
    39 00000D44 7221                <1>     jb .error
    40 00000D46 E81B020000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
    41 00000D4B FF35(72C30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
    42 00000D51 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
    43 00000D53 8F05(72C30300)      <1>     pop qword [currentDTA]
    44 00000D59 720C                <1>     jb .errorFromDataTransfer
    45 00000D5B E8F80D0000          <1>     call getUserRegs
    46 00000D60 890E                <1>     mov dword [rsi + callerFrame.rax], ecx  ;Put actual number of bytes tfrd
    47 00000D62 806658FE            <1>     and byte [rsi + callerFrame.flags], 0FEh    ;Clear CF
    48 00000D66 C3                  <1>     ret
    49                              <1> ;Temporary Error handler, simply return with CF set
    50                              <1> .error:
    51                              <1> .errorFromDataTransfer:
    52 00000D67 E8EC0D0000          <1>     call getUserRegs
    53 00000D6C 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set CF
    54 00000D70 C3                  <1>     ret
    55                              <1> writeFileHdl:      ;ah = 40h, handle function
    56 00000D71 488D35B5010000      <1>     lea rsi, writeBytes
    57 00000D78 E9C2FFFFFF          <1>     jmp readFileHdl.common
    58                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    59 00000D7D C3                  <1>     ret
    60                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
    61                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
    62 00000D7E E8F1020000          <1>     call getSFTPtr
    63 00000D83 7326                <1>     jnc .sftValid
    64                              <1>     ;Error code and exit
    65                              <1>     ;al (eax) has error code for bad file handle
    66 00000D85 668905(66C30300)    <1>     mov word [errorExCde], ax
    67                              <1> .exitBad:
    68 00000D8C C605(65C30300)01    <1>     mov byte [errorLocus], eLocUnk  ;Unknown Locus
    69 00000D93 C605(68C30300)03    <1>     mov byte [errorAction], eActUsr ;Reinput data
    70 00000D9A C605(69C30300)08    <1>     mov byte [errorClass], eClsNotFnd
    71 00000DA1 E8B20D0000          <1>     call getUserRegs    ;Get user regs in rsi
    72 00000DA6 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set CF
    73 00000DAA C3                  <1>     ret
    74                              <1> .sftValid:
    75 00000DAB 3C03                <1>     cmp al, 3
    76 00000DAD 7206                <1>     jb .validFunction
    77                              <1>     ;Error code and exit
    78 00000DAF 66B80100            <1>     mov ax, errInvFnc
    79 00000DB3 EBD7                <1>     jmp short .exitBad
    80                              <1> .validFunction:
    81 00000DB5 3C01                <1>     cmp al, 1
    82 00000DB7 7713                <1>     ja .seekend
    83 00000DB9 7203                <1>     jb .seekset
    84                              <1> ;Here we are at seekcur, seek from current (signed)
    85 00000DBB 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
    86                              <1> .seekset:
    87                              <1> ;Seek from the start (unsigned)
    88 00000DBE 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
    89 00000DC1 E8920D0000          <1>     call getUserRegs    ;Get user regs in rsi
    90 00000DC6 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
    91 00000DC9 30C0                <1>     xor al, al  ;Return OK!
    92 00000DCB C3                  <1>     ret
    93                              <1> .seekend:
    94                              <1> ;Here we are at seekend, seek from end (signed)
    95 00000DCC 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
    96 00000DCF EBED                <1>     jmp short .seekset
    97                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
    98                              <1> ioctrl:            ;ah = 44h, handle function
    99                              <1> duplicateHandle:   ;ah = 45h, handle function
   100                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   101                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   102                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   103                              <1> renameFile:        ;ah = 56h
   104                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   105                              <1> createNewFile:     ;ah = 5Bh
   106                              <1> lockUnlockFile:    ;ah = 5Ch
   107                              <1> setHandleCount:    ;ah = 67h
   108                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   109 00000DD1 C3                  <1>     ret
   110                              <1> ;-----------------------------------:
   111                              <1> ;       Main File IO Routines       :
   112                              <1> ;-----------------------------------:
   113                              <1> readBytes:
   114                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
   115                              <1> ;Input: ecx = Number of bytes to read
   116                              <1> ;Output: ecx = Number of bytes read
   117                              <1> ;Number of bytes read 
   118 00000DD2 E897010000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   119 00000DD7 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   120 00000DDB 240F                <1>     and al, 0Fh ;Eliminate except access mode
   121 00000DDD 3C01                <1>     cmp al, WriteAccess
   122 00000DDF 750E                <1>     jne .readable
   123 00000DE1 B805000000          <1>     mov eax, errAccDen
   124 00000DE6 668905(66C30300)    <1>     mov word [errorExCde], ax
   125 00000DED F9                  <1>     stc
   126 00000DEE C3                  <1>     ret ;Exit with error code 
   127                              <1> .readable:
   128 00000DEF E8BB010000          <1>     call setupVarsForTransfer
   129 00000DF4 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
   130 00000DF7 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   131 00000DFD 740A                <1>     jz .notRedir
   132 00000DFF B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
   133 00000E04 CD4F                <1>     int 4fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
   134 00000E06 C3                  <1>     ret
   135                              <1> .exitOk:
   136 00000E07 F8                  <1>     clc
   137 00000E08 C3                  <1>     ret
   138                              <1> .notRedir:
   139 00000E09 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   140 00000E0F 7510                <1>     jnz readCharDev
   141 00000E11 E8FA0F0000          <1>     call dosCrit1Enter
   142 00000E16 E80B010000          <1>     call readDiskFile
   143 00000E1B E8FA0F0000          <1>     call dosCrit1Exit
   144 00000E20 C3                  <1>     ret
   145                              <1> readCharDev:
   146                              <1> ;rdi points to sft for char dev to read
   147                              <1> ;ecx has the number of bytes to transfer
   148                              <1> ;Vars have been set up and DTA has the transfer address
   149                              <1> ;Returns in ecx, the actual bytes transferred
   150 00000E21 C605(65C30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
   151 00000E28 488B3D(72C30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
   152 00000E2F 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
   153 00000E33 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
   154 00000E36 0F8413010000        <1>     jz rwExitOk    ;If it does, jump to exit as if EOF has been hit
   155 00000E3C F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
   156 00000E3F 7507                <1>     jnz .notNul
   157                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
   158                              <1>     ;NUL never transfers bytes 
   159 00000E41 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
   160 00000E43 E907010000          <1>     jmp rwExitOk    ;Goto exit
   161                              <1> .notNul:
   162 00000E48 F6C320              <1>     test bl, charDevBinary
   163 00000E4B 750A                <1>     jnz .binary
   164                              <1>     ;Here if the device is in ASCII mode
   165 00000E4D F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
   166 00000E50 7457                <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
   167                              <1> .consoleInput:
   168                              <1>     ;Console input here
   169 00000E52 E873FEFFFF          <1>     call swapVConDriver    ;Prepare CON Useage!
   170                              <1>     
   171                              <1> 
   172                              <1> .binary:
   173                              <1>     ;Setup registers for transfer
   174 00000E57 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
   175 00000E5A 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
   176                              <1>     ;ecx has the number of bytes to transfer directly
   177 00000E5D E8270C0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
   178 00000E62 488B35(4FC50300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
   179 00000E69 E868090000          <1>     call goDriver   ;Make the request
   180 00000E6E 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
   181 00000E71 0FB73D(1AC40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   182 00000E78 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   183 00000E7E 7412                <1>     jz .binNoError
   184                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
   185 00000E80 B486                <1>     mov ah, 86h ;Char device, data error signature
   186 00000E82 E869080000          <1>     call binaryCharDevErr   ;ah = has part of the error 
   187                              <1>     ;al now has the response
   188                              <1>     ;Cannot return Abort as Abort returns to command interpreter through DOS
   189 00000E87 3C00                <1>     cmp al, critIgnore
   190 00000E89 7407                <1>     je .binNoError ;Simply proceed as normal
   191 00000E8B 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
   192 00000E8E 3C03                <1>     cmp al, critFail
   193 00000E90 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
   194                              <1>     ;Fallthrough here for fail!
   195                              <1> .failExit:
   196                              <1>     
   197                              <1> .binNoError:
   198                              <1>     ;Get number of bytes transferred into 
   199 00000E92 8B05(2DC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
   200 00000E98 F7D8                <1>     neg eax ;make it into -eax
   201 00000E9A 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
   202                              <1>     ;ecx now has bytes left to transfer
   203 00000E9E 50                  <1>     push rax    ;Save value on stack
   204 00000E9F 31C0                <1>     xor eax, eax ;Set ZF
   205 00000EA1 FFC0                <1>     inc eax ;Clear ZF
   206 00000EA3 58                  <1>     pop rax ;Get back the original value
   207 00000EA4 E9A6000000          <1>     jmp rwExitOk    ;GoExit with ecx=Bytes left to read
   208                              <1> .generalASCII:
   209                              <1>     ;ecx has bytes to transfer here
   210                              <1>     ;Setup registers for transfer
   211 00000EA9 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
   212 00000EAC 51                  <1>     push rcx
   213 00000EAD B901000000          <1>     mov ecx, 1  ;Get one char
   214 00000EB2 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
   215 00000EB5 E8CF0B0000          <1>     call primReqReadSetup   ;Setup request
   216 00000EBA 59                  <1>     pop rcx
   217                              <1>     ;rbx now has request header ptr
   218 00000EBB 488B35(4FC50300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
   219                              <1> .asciiReadChar:
   220 00000EC2 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
   221 00000EC5 E888FDFFFF          <1>     call checkBreakOnCon    ;Check we don't have a ^C pending on CON
   222 00000ECA E807090000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
   223 00000ECF 0FB73D(1AC40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   224 00000ED6 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   225 00000EDC 741E                <1>     jz .asciiNoError
   226 00000EDE E808080000          <1>     call asciiCharDevErr    ;Call Int 44h
   227                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
   228 00000EE3 C705(2DC40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
   228 00000EEB 0000                <1>
   229 00000EED 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   230 00000EF0 3C03                <1>     cmp al, critFail
   231 00000EF2 749E                <1>     je .failExit
   232 00000EF4 3C01                <1>     cmp al, critRetry
   233 00000EF6 74CA                <1>     je .asciiReadChar
   234                              <1>     ;Ignore here, pretend NULL CHAR was read
   235 00000EF8 30C0                <1>     xor al, al
   236 00000EFA EB11                <1>     jmp short .asciiIgnoreEP
   237                              <1> .asciiNoError:
   238                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
   239                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
   240                              <1> ;Preserve RBX, RSI
   241                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
   242 00000EFC 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   243 00000EFF 813D(2DC40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
   243 00000F07 0000                <1>
   244 00000F09 7544                <1>     jne rwExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
   245 00000F0B 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
   246                              <1> .asciiIgnoreEP:
   247 00000F0D 48FF05(25C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
   248 00000F14 48FFC7              <1>     inc rdi ;Also advance register pointer
   249 00000F17 3C1A                <1>     cmp al, EOF ;Was this char EOF?
   250 00000F19 7434                <1>     je rwExitOk
   251 00000F1B 3C0D                <1>     cmp al, CR  ;Was this char CR?
   252 00000F1D E0A3                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
   253                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
   254 00000F1F FEC0                <1>     inc al  ;make ZF=NZ
   255 00000F21 E929000000          <1>     jmp rwExitOk    ;Called with ecx = Number of bytes LEFT to transfer
   256                              <1>     
   257                              <1> readDiskFile:
   258 00000F26 C605(65C30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
   259                              <1> 
   260                              <1> writeBytes:
   261                              <1> ;Writes the bytes from the user buffer
   262 00000F2D E83C000000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   263 00000F32 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   264 00000F36 240F                <1>     and al, 0Fh ;Eliminate except access mode
   265 00000F38 3C00                <1>     cmp al, ReadAccess
   266 00000F3A 750E                <1>     jne .writeable
   267 00000F3C B805000000          <1>     mov eax, errAccDen
   268 00000F41 668905(66C30300)    <1>     mov word [errorExCde], ax
   269 00000F48 F9                  <1>     stc
   270 00000F49 C3                  <1>     ret ;Exit with error code 
   271                              <1> .writeable:
   272 00000F4A E860000000          <1>     call setupVarsForTransfer
   273                              <1> 
   274                              <1> rwExitOk:
   275                              <1> ;Input: ecx = Number of bytes left to transfer!
   276                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
   277 00000F4F 890D(12C60300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
   278 00000F55 7509                <1>     jnz .skipbitClear
   279 00000F57 E812000000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
   280                              <1>     ;The disk transfer must've flushed by now. 
   281 00000F5C 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokDevNotFlush|charDevNoEOF) ;OR
   282                              <1>     ;Next char dev read should give EOF.
   283                              <1> .skipbitClear:  ;Or skip that entirely
   284 00000F60 E811000000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
   285 00000F65 C3                  <1>     ret
   286                              <1> rwExitBad:
   287                              <1> ;-----------------------------------:
   288                              <1> ;        File Handle routines       :
   289                              <1> ;-----------------------------------:
   290                              <1> 
   291                              <1> setCurrentSFT:
   292                              <1> ;Set the pointer in rdi as current SFT 
   293 00000F66 48893D(CAC50300)    <1>     mov qword [currentSFT], rdi
   294 00000F6D C3                  <1>     ret
   295                              <1> getCurrentSFT:
   296                              <1> ;Get the current SFT pointer in rdi
   297 00000F6E 488B3D(CAC50300)    <1>     mov rdi, qword [currentSFT]
   298 00000F75 C3                  <1>     ret
   299                              <1> updateCurrentSFT:
   300                              <1> ;Updates the Current SFT fields before returning from a file handle operation
   301                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
   302 00000F76 57                  <1>     push rdi
   303 00000F77 488B3D(CAC50300)    <1>     mov rdi, qword [currentSFT]
   304 00000F7E 8B0D(0EC60300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
   305 00000F84 2B0D(12C60300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
   306                              <1>     ;ecx has bytes transferred
   307 00000F8A 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
   308 00000F90 751A                <1>     jnz .exit
   309 00000F92 50                  <1>     push rax
   310 00000F93 8B05(EAC50300)      <1>     mov eax, dword [currClustD]
   311 00000F99 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
   312 00000F9C 8B05(E6C50300)      <1>     mov eax, dword [currClustF]
   313 00000FA2 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
   314 00000FA5 58                  <1>     pop rax
   315 00000FA6 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
   316 00000FA9 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
   317                              <1> .exit:
   318 00000FAC 5F                  <1>     pop rdi
   319 00000FAD F8                  <1>     clc
   320 00000FAE C3                  <1>     ret
   321                              <1> setupVarsForTransfer:
   322                              <1> ;Computes the actual bytes to be transferred and 
   323                              <1> ; sets up internal variables for the transfer. 
   324                              <1> ;Works for both reading and writing
   325                              <1> ;Input: ecx = User desired Bytes to transfer
   326                              <1> ;       rdi = SFT pointer for the file
   327                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   328                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
   329                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
   330                              <1> ;
   331                              <1> ;Note: Does not account for a FULL disk. When writing,
   332                              <1> ; if the disk will get full as a result of the write,
   333                              <1> ; stop at the last byte before the transfer. If the 
   334                              <1> ; file pointer is past the last free byte, write 0
   335 00000FAF 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
   336 00000FB3 488935(4FC50300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
   337 00000FBA 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
   338 00000FBD 8905(FEC50300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
   339 00000FC3 890D(0EC60300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
   340 00000FC9 890D(12C60300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
   341 00000FCF 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev ;If not disk...
   342 00000FD5 7402                <1>     jz setupVarsForDiskTransfer
   343 00000FD7 F8                  <1>     clc
   344 00000FD8 C3                  <1>     ret ;Else just exit here
   345                              <1> setupVarsForDiskTransfer:
   346                              <1> ;Extension of the above, but for Disk files only
   347                              <1> ;Input: ecx = User desired Bytes to transfer
   348                              <1> ;       rdi = SFT pointer for the file
   349                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   350 00000FD9 488B2D(4FC50300)    <1>     mov rbp, qword [workingDPB] ;Get the workingDPB (the same as qPtr)
   351 00000FE0 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
   352 00000FE3 881D(4EC50300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
   353 00000FE9 8B05(FEC50300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
   354 00000FEF 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   355 00000FF3 31D2                <1>     xor edx, edx    ;Zero rdx
   356 00000FF5 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
   357                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
   358                              <1>     ;edx has the offset into that sector
   359 00000FF7 8905(EFC50300)      <1>     mov dword [currSectF], eax
   360 00000FFD 668915(FCC50300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
   361 00001004 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
   362 00001006 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
   363 00001009 8805(F3C50300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
   364 0000100F 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
   365 00001011 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   366 00001014 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
   367 00001016 8915(E6C50300)      <1>     mov dword [currClustF], edx ;Save in var
   368 0000101C 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in eax
   369 0000101E F8                  <1>     clc
   370 0000101F C3                  <1>     ret
   371                              <1> 
   372                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216
   373                              <1> ;Return a pointer to the SFT entry in rdi
   374                              <1> ;Input: rbx = Valid SFT ndx number (word)
   375                              <1> ;Output: rdi = SFT pointer
   376 00001020 488B3D(34C00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
   377                              <1> .walk:
   378 00001027 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
   379 0000102B 7212                <1>     jb .thisTable
   380 0000102D 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
   381 00001031 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
   382 00001034 4881FFFFFFFFFF      <1>     cmp rdi, -1
   383 0000103B 75EA                <1>     jne .walk
   384 0000103D F9                  <1>     stc
   385 0000103E C3                  <1>     ret
   386                              <1> .thisTable:
   387 0000103F 50                  <1>     push rax
   388 00001040 52                  <1>     push rdx
   389 00001041 B84F000000          <1>     mov eax, sft_size
   390 00001046 F7E3                <1>     mul ebx
   391 00001048 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
   392 0000104B 5A                  <1>     pop rdx
   393 0000104C 58                  <1>     pop rax
   394 0000104D 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
   395 00001054 C3                  <1>     ret
   396                              <1> 
   397                              <1> getSFTNdxFromHandle:    ;Int 4Fh AX=1220h
   398                              <1> ;Return a zero extended value in rdi for the SFT entry
   399                              <1> ;Input: bx = JFT handle
   400                              <1> ;Output: CF=NC => rdi = SFT ndx
   401                              <1> ;        CF=CY => al = Error code, Fail
   402                              <1> ;rbx destroyed
   403 00001055 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
   404 00001058 663B1D(2AC30300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
   405 0000105F 7204                <1>     jb .ok
   406 00001061 B006                <1>     mov al, errBadHdl
   407 00001063 F9                  <1>     stc
   408 00001064 C3                  <1>     ret
   409                              <1> .ok:
   410 00001065 488B3D(7AC30300)    <1>     mov rdi, qword [currentPSP]
   411 0000106C 480FB67C1F2A        <1>     movzx rdi, byte [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
   412 00001072 F8                  <1>     clc
   413 00001073 C3                  <1>     ret
   414                              <1> getSFTPtr:
   415                              <1> ;This gets the SFT pointer and checks it was opened by this machine
   416                              <1> ;Input: bx = JFT handle
   417                              <1> ;Output: CF=NC: rdi = SFT pointer
   418                              <1> ;        CF=CY: Error, ax=Error code
   419 00001074 E816000000          <1>     call derefSFTPtr
   420 00001079 7301                <1>     jnc .ok
   421 0000107B C3                  <1>     ret ;Error return with CF=CY
   422                              <1> .ok:
   423 0000107C 50                  <1>     push rax
   424 0000107D 0FB705(9EC30300)    <1>     movzx eax, word [machineNum]    ;Get the machine number from SDA
   425 00001084 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]   ;Compare to SFT machine number
   426 00001088 58                  <1>     pop rax
   427 00001089 7403                <1>     je .exit    ;If the file belongs to this machine, proceed!
   428 0000108B B006                <1>     mov al, errBadHdl   ;Error code
   429 0000108D F9                  <1>     stc ;Reset CF
   430                              <1> .exit:
   431 0000108E C3                  <1>     ret
   432                              <1> derefSFTPtr:
   433                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
   434                              <1> ;Input: bx = File handle
   435                              <1> ;Output: CF=NC: rdi = SFT pointer
   436                              <1> ;        CF=CY: Error, ax=Error code
   437 0000108F E8C1FFFFFF          <1>     call getSFTNdxFromHandle    ;Get the ptr to the value in rdi
   438 00001094 7205                <1>     jb .fail
   439 00001096 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
   440 00001099 7504                <1>     jne .ok
   441                              <1> .fail:
   442 0000109B B006                <1>     mov al, errBadHdl
   443 0000109D F9                  <1>     stc
   444 0000109E C3                  <1>     ret
   445                              <1> .ok:
   446 0000109F 53                  <1>     push rbx    ;Preserve the JFT handle
   447 000010A0 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
   448 000010A3 E878FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
   449 000010A8 5B                  <1>     pop rbx 
   450 000010A9 C3                  <1>     ret
   451                              <1> 
   452                              <1> getBytesTransferred:
   453 000010AA 8B0D(12C60300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
   454 000010B0 F7D9                <1>     neg ecx ;Multiply by -1
   455 000010B2 030D(0EC60300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
   456 000010B8 C3                  <1>     ret ;Return bytes transferred in ecx
   457                              <1> 
   458                              <1> readWriteBytesBinary:
   459                              <1> ;Input: ecx = number of bytes to read in Binary mode
   460                              <1> ;       rdi = Points to where in caller buffer to place bytes
   461                              <1> ;       rsi = Points to where in DOS buffer to place pointer
   462                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
   463                              <1> ;Preserve rcx so we know how many bytes transferred
   464                              <1> ;Update the currByteA variable
   465                              <1> ;Returns (rsi and rdi) + (ecx on entry)
   466 000010B9 51                  <1>     push rcx
   467 000010BA F605(48C50300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
   468 000010C1 7403                <1>     jz .noSwap
   469 000010C3 4887FE              <1>     xchg rdi, rsi
   470                              <1> .noSwap:
   471 000010C6 F3A4                <1>     rep movsb
   472 000010C8 59                  <1>     pop rcx
   473 000010C9 010D(FEC50300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
   474 000010CF 290D(12C60300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
   475 000010D5 C3                  <1>     ret
    25                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    26                              <1> ;Memory related functions
    27                              <1> 
    28                              <1> ;-----------------------------------:
    29                              <1> ;  Memory related Kernel routines   :
    30                              <1> ;-----------------------------------:
    31                              <1> allocateMemory:    ;ah = 48h
    32                              <1> ;Input: ebx = Number of paragraphs requested
    33                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    34                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    35 000010D6 31D2                <1>     xor edx, edx
    36                              <1>     ;Clear the pointers
    37 000010D8 488915(A0C30300)    <1>     mov qword [firstMCB], rdx
    38 000010DF 488915(A8C30300)    <1>     mov qword [bestMCB], rdx
    39 000010E6 488915(B0C30300)    <1>     mov qword [lastMCB], rdx
    40 000010ED 31ED                <1>     xor ebp, ebp    
    41 000010EF FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    42 000010F1 488B35(24C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    43                              <1> .walk:
    44 000010F8 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    45 000010FB 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    46 000010FE 7409                <1>     je .walk1
    47 00001100 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    48 00001103 0F8565050000        <1>     jne memSysHalt
    49                              <1> .walk1:
    50                              <1>     ;Here if valid but not the last block
    51 00001109 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    52 00001111 0F8582000000        <1>     jne .walk2
    53                              <1>     ;Here we consolidate adjacent free blocks if there are any
    54                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    55                              <1>     ;End consolidation at first non free block or at last block in chain
    56 00001117 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    57 0000111A 744A                <1>     je .det0    ;Determine if this block is useful
    58 0000111C 31C9                <1>     xor ecx, ecx
    59 0000111E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    60 00001121 4881C610000000      <1>     add rsi, mcb.program
    61                              <1> .cons0:
    62 00001128 48C1E104            <1>     shl rcx, 4
    63 0000112C 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    64 0000112F 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    65 00001132 7409                <1>     je .cons1
    66 00001134 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    67 00001137 0F8531050000        <1>     jne memSysHalt 
    68                              <1> .cons1:
    69 0000113D 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    70 00001145 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    71                              <1>     ;Here rsi, points to a free block, add it to rdi
    72 00001147 31C9                <1>     xor ecx, ecx
    73 00001149 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    74 0000114C 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    75 00001152 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    76 00001155 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    77 00001157 31D2                <1>     xor edx, edx
    78 00001159 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    79 0000115C 48895608            <1>     mov qword [rsi + 8], rdx
    80 00001160 3C5A                <1>     cmp al, mcbMarkEnd
    81 00001162 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    82                              <1>     ;Here we deal with if the block was the last one 
    83 00001164 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    84                              <1> .det0:  ;Now determine if pointer in rdi is useful
    85 00001166 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    86                              <1> ;ebx must be less than the arena size for the arena to be useful!
    87 00001169 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    88 0000116C 39D9                <1>     cmp ecx, ebx
    89 0000116E 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    90 00001170 488935(B0C30300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    91 00001177 488B05(A0C30300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    92 0000117E 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    93 00001181 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    94 00001183 488935(A0C30300)    <1>     mov qword [firstMCB], rsi
    95                              <1> .det1:
    96                              <1>     ;Now test for best fit.
    97 0000118A 29D9                <1>     sub ecx, ebx    ;Block - ebx
    98 0000118C 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    99 0000118E 7209                <1>     jb .walk2
   100 00001190 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   101 00001192 488935(A8C30300)    <1>     mov qword [bestMCB], rsi
   102                              <1> .walk2:
   103 00001199 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   104 0000119C 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   105 0000119E 31C9                <1>     xor ecx, ecx
   106 000011A0 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   107 000011A3 48C1E104            <1>     shl rcx, 4
   108 000011A7 4881C610000000      <1>     add rsi, mcb.program
   109 000011AE 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   110 000011B1 E942FFFFFF          <1>     jmp .walk
   111                              <1> .allocate:
   112                              <1>     ;Allocation fails IF the pointer is the null pointer
   113 000011B6 803D(2FC30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   114 000011BD 7261                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   115                              <1>     ;Fall thru if last fit
   116 000011BF 488B35(B0C30300)    <1>     mov rsi, qword [lastMCB]
   117 000011C6 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   118 000011C9 0F84CE000000        <1>     jz .allocFail
   119 000011CF 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   120 000011D1 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   121 000011D4 31C9                <1>     xor ecx, ecx
   122 000011D6 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   123 000011D9 29D9                <1>     sub ecx, ebx
   124 000011DB 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   125 000011E1 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   126 000011E4 48C1E104            <1>     shl rcx, 4
   127 000011E8 4881C610000000      <1>     add rsi, mcb.program
   128 000011EF 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   129 000011F2 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   130 000011F4 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   131 000011F7 488B15(7AC30300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   132 000011FE 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   133 00001202 488B15(D2C30300)    <1>     mov rdx, qword [oldRSP]
   134 00001209 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   135 00001210 4889F0              <1>     mov rax, rsi
   136 00001213 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   137 00001216 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   138 0000121A E824040000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   139 0000121F C3                  <1>     ret
   140                              <1> .bfCommon:
   141 00001220 488B35(A0C30300)    <1>     mov rsi, qword [firstMCB]
   142 00001227 803D(2FC30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   143 0000122E 480F4435(A8C30300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   144 00001236 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   145 00001239 7462                <1>     jz .allocFail
   146 0000123B 8A06                <1>     mov al, byte [rsi + mcb.marker]
   147 0000123D C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   148 00001240 31C9                <1>     xor ecx, ecx
   149 00001242 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   150 00001245 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   151 00001247 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   152 0000124D 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   153 00001250 488B15(7AC30300)    <1>     mov rdx, qword [currentPSP]
   154 00001257 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   155 0000125B 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   156 0000125E 4881C610000000      <1>     add rsi, mcb.program
   157 00001265 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   158 0000126B 48C1E304            <1>     shl rbx, 4
   159 0000126F 4801DE              <1>     add rsi, rbx
   160 00001272 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   161 00001274 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   162 0000127C 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   163 0000127F 488B15(D2C30300)    <1>     mov rdx, qword [oldRSP]
   164 00001286 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   165 0000128D 4889F8              <1>     mov rax, rdi
   166 00001290 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   167 00001293 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   168 00001297 E8A7030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   169 0000129C C3                  <1>     ret
   170                              <1> .allocFail:
   171                              <1>     ;Walk the MCB chain to determine the biggest block size
   172 0000129D 488B35(24C00300)    <1>     mov rsi, [mcbChainPtr]
   173 000012A4 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   174                              <1> .af0:
   175 000012A6 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   176 000012A9 7409                <1>     je .af1
   177 000012AB 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   178 000012AE 0F85BA030000        <1>     jne memSysHalt
   179                              <1> .af1:
   180 000012B4 31C9                <1>     xor ecx, ecx
   181 000012B6 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   182 000012B9 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   183 000012C1 7505                <1>     jne .af2
   184 000012C3 39D9                <1>     cmp ecx, ebx
   185 000012C5 0F47D9              <1>     cmova ebx, ecx
   186                              <1> .af2:
   187 000012C8 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   188 000012CB 7410                <1>     je .afExit
   189 000012CD 48C1E104            <1>     shl rcx, 4
   190 000012D1 4881C610000000      <1>     add rsi, mcb.program
   191 000012D8 4801CE              <1>     add rsi, rcx
   192 000012DB EBD7                <1>     jmp short .af1
   193                              <1> .afExit:
   194 000012DD B808000000          <1>     mov eax, errNoMem
   195 000012E2 488B15(D2C30300)    <1>     mov rdx, qword [oldRSP]
   196 000012E9 8802                <1>     mov byte [rdx + callerFrame.rax], al
   197 000012EB 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx
   198 000012EE 804A5801            <1>     or byte [rdx + callerFrame.flags], 1
   199 000012F2 C3                  <1>     ret
   200                              <1> freeMemory:        ;ah = 49h
   201                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   202                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   203                              <1> ;Always skip the first block as this is the anchor for DOS
   204 000012F3 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   205 000012FA 31C9                <1>     xor ecx, ecx
   206 000012FC 488B35(24C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   207 00001303 4889F7              <1>     mov rdi, rsi
   208 00001306 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   209 00001309 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   210 0000130D 4881C610000000      <1>     add rsi, mcb.program
   211 00001314 4801CE              <1>     add rsi, rcx    ;Go to next block
   212                              <1> .mainLoop:
   213 00001317 31C9                <1>     xor ecx, ecx
   214 00001319 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   215 0000131C 7409                <1>     je .valid
   216 0000131E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   217 00001321 0F8547030000        <1>     jne memSysHalt
   218                              <1> .valid:
   219 00001327 4939F0              <1>     cmp r8, rsi
   220 0000132A 741C                <1>     je .blockFound
   221                              <1>     ;Not valid, check if last block in chain
   222 0000132C 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   223 0000132F 0F84A0000000        <1>     je .blockNotFound
   224 00001335 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   225 00001338 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   226 0000133C 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   227 00001343 4801CE              <1>     add rsi, rcx    ;Go to next block
   228 00001346 EBCF                <1>     jmp short .mainLoop
   229                              <1> .blockFound:
   230                              <1>     ;If hole, error.
   231                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   232 00001348 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   233 00001350 0F8488000000        <1>     je .blockHole
   234 00001356 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   235 0000135E 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   236 00001366 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   237                              <1>     ;It is, let it absorb this space
   238 00001368 31C9                <1>     xor ecx, ecx
   239 0000136A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   240 0000136D 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   241 00001373 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   242                              <1>     ;Replace block marker
   243 00001376 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   244 00001378 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   245 0000137A 31C9                <1>     xor ecx, ecx
   246 0000137C 48890E              <1>     mov qword [rsi], rcx
   247 0000137F 48894E08            <1>     mov qword [rsi + 8], rcx
   248 00001383 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   249                              <1> .blockFoundCheckFollowing:
   250                              <1>     ;First check if we are the last block in chain
   251 00001386 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   252 00001389 7439                <1>     je .blockFoundExit  ;If yes, exit!
   253 0000138B 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   254 0000138E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   255 00001391 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   256 00001395 4881C110000000      <1>     add rcx, mcb.program
   257 0000139C 4801CE              <1>     add rsi, rcx    ;Go to next block
   258 0000139F 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   259 000013A7 751B                <1>     jne .blockFoundExit ;If not free, exit
   260                              <1>     ;If free, absorb into block pointed to by rdi
   261 000013A9 31C9                <1>     xor ecx, ecx
   262 000013AB 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   263 000013AE 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   264 000013B4 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   265                              <1>     ;Replace block marker
   266 000013B7 8A06                <1>     mov al, byte [rsi + mcb.marker]
   267 000013B9 8807                <1>     mov byte [rdi + mcb.marker], al
   268 000013BB 31C9                <1>     xor ecx, ecx
   269 000013BD 48890E              <1>     mov qword [rsi], rcx
   270 000013C0 48894E08            <1>     mov qword [rsi + 8], rcx
   271                              <1> .blockFoundExit:
   272 000013C4 E87A020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   273 000013C9 488B1D(D2C30300)    <1>     mov rbx, qword [oldRSP]
   274 000013D0 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   275 000013D4 C3                  <1>     ret
   276                              <1> .blockNotFound:
   277                              <1>     ;Set CF and error code
   278 000013D5 C605(69C30300)08    <1>     mov byte [errorClass], eClsNotFnd   ;Block not found 
   279 000013DC EB07                <1>     jmp short .blockError
   280                              <1> .blockHole:
   281                              <1> ;Cannot free a hole! Fail!
   282 000013DE C605(69C30300)0A    <1>     mov byte [errorClass], eClsLocked   ;Cant free a hole
   283                              <1> .blockError:
   284 000013E5 C605(64C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   285 000013EC C605(65C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   286 000013F3 66C705(66C30300)09- <1>     mov word [errorExCde], errMemAddr   ;Invalid mem addr
   286 000013FB 00                  <1>
   287 000013FC C605(68C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   288 00001403 B809000000          <1>     mov eax, errMemAddr
   289 00001408 488B1D(D2C30300)    <1>     mov rbx, qword [oldRSP]
   290 0000140F 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   291 00001412 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   292 00001416 E828020000          <1>     call verifyIntegrityOfMCBChain
   293 0000141B C3                  <1>     ret
   294                              <1> reallocMemory:     ;ah = 4Ah
   295                              <1> ;Input: r8 = address of the block to be realloc'ed
   296                              <1> ;       ebx = How many paras this block should contain after realloc. 
   297                              <1> ;               If ebx = 0, jump to free memory
   298 0000141C 85DB                <1>     test ebx, ebx
   299 0000141E 0F84CFFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   300 00001424 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   301 0000142B 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   302 0000142E 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   303 00001431 7409                <1>     je .ctn
   304 00001433 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   305 00001436 0F855C010000        <1>     jne .badAddrGiven
   306                              <1> .ctn:
   307                              <1>     ;Provided block is valid and not a hole
   308                              <1>     ;Check if Growth or Shrink
   309 0000143C 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   310 00001444 7498                <1>     je freeMemory.blockHole
   311 00001446 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   312 00001449 31C9                <1>     xor ecx, ecx
   313 0000144B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   314 0000144E 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   315 00001450 0F8786000000        <1>     ja .growth
   316 00001456 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   317                              <1> ;We can always shrink
   318 0000145C 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   319 0000145E 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   320 00001464 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   321 00001467 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   322 0000146D 48C1E304            <1>     shl rbx, 4
   323 00001471 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   324 00001478 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   325 0000147B 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   326 0000147D C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   327 00001480 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   328 00001482 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   329 0000148A 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   330 0000148D 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   331 0000148F 0F84DB000000        <1>     je .exit
   332                              <1> ;Else, now see if the block following is also free and absorb it
   333 00001495 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   334 00001498 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   335 0000149C 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   336 000014A3 4801CE              <1>     add rsi, rcx    ;Goto next arena
   337 000014A6 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   338 000014A9 7409                <1>     je .shrinkAbsorb
   339 000014AB 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   340 000014AE 0F85BA010000        <1>     jne memSysHalt
   341                              <1> .shrinkAbsorb:
   342 000014B4 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   343 000014BC 0F85AE000000        <1>     jne .exit
   344                              <1>     ;It is free, absorb it
   345 000014C2 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   346 000014C5 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   347 000014CB 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   348 000014CE 31C9                <1>     xor ecx, ecx
   349                              <1>     ;Clear absorbed MCB
   350 000014D0 48890E              <1>     mov qword [rsi], rcx
   351 000014D3 48894E08            <1>     mov qword [rsi + 8], rcx
   352 000014D7 E994000000          <1>     jmp .exit
   353                              <1> .growth:
   354                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   355 000014DC 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   356 000014DF 0F84A0000000        <1>     je .notEnuffMem
   357                              <1> ;Now check the following space is free. If not, not enuff mem err
   358 000014E5 31C9                <1>     xor ecx, ecx
   359 000014E7 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   360 000014EA 48C1E104            <1>     shl rcx, 4
   361 000014EE 4889F7              <1>     mov rdi, rsi    
   362 000014F1 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   363 000014F8 4801CE              <1>     add rsi, rcx
   364 000014FB 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   365 000014FE 7409                <1>     je .growthOK
   366 00001500 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   367 00001503 0F8565010000        <1>     jne memSysHalt
   368                              <1> .growthOK:
   369                              <1>     ;rdi points to block we are growing
   370 00001509 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   371 00001511 7572                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   372                              <1>     ;rsi must own all memory up to the next owned arena
   373 00001513 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   374 00001515 31C9                <1>     xor ecx, ecx
   375 00001517 31D2                <1>     xor edx, edx
   376 00001519 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   377 0000151C 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   378 00001522 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   379 00001525 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   380 00001527 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   381 00001529 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   382 0000152C 7759                <1>     ja .notEnuffMem1
   383 0000152E 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   384 00001530 81FA01000000        <1>     cmp edx, 1
   385 00001536 7449                <1>     je .notEnuffMem2
   386 00001538 31C9                <1>     xor ecx, ecx
   387 0000153A 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   388 0000153D 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   389 00001541 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   390 00001544 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   391 00001547 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   392 0000154E 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   393 00001552 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   394 00001555 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   395 00001559 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   396                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   397                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   398 0000155B 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   399 0000155D 7411                <1>     jz .exit
   400 0000155F 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   401 00001565 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   402 00001568 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   403                              <1> .exit:
   404 00001570 E8CE000000          <1>     call verifyIntegrityOfMCBChain
   405 00001575 488B1D(D2C30300)    <1>     mov rbx, qword [oldRSP]
   406 0000157C 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   407 00001580 C3                  <1>     ret
   408                              <1> .notEnuffMem2:
   409 00001581 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   410 00001583 EB02                <1>     jmp short .notEnuffMem1
   411                              <1> .notEnuffMem:
   412 00001585 31DB                <1>     xor ebx, ebx    ;No space to grow
   413                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   414 00001587 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   415 0000158C 488B15(D2C30300)    <1>     mov rdx, qword [oldRSP]
   416 00001593 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   417 00001596 EB0C                <1>     jmp short .bad
   418                              <1> .badAddrGiven:
   419 00001598 488B15(D2C30300)    <1>     mov rdx, qword [oldRSP]
   420 0000159F B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   421                              <1> .bad:
   422 000015A4 C605(64C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   423 000015AB C605(65C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   424 000015B2 668905(66C30300)    <1>     mov word [errorExCde], ax   ;Error code
   425 000015B9 C605(68C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   426 000015C0 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save this word on stack
   427 000015C3 804A5801            <1>     or byte [rdx + callerFrame.flags], 1    ;Set Carry flag on
   428 000015C7 E877000000          <1>     call verifyIntegrityOfMCBChain
   429 000015CC C3                  <1>     ret
   430                              <1> getsetMallocStrat: ;ah = 58h
   431 000015CD 84C0                <1>     test al, al
   432 000015CF 741F                <1>     jz .get
   433 000015D1 3C02                <1>     cmp al, 2
   434 000015D3 7337                <1>     jae .bad
   435                              <1> ;Set here
   436 000015D5 488B1D(D2C30300)    <1>     mov rbx, qword [oldRSP]
   437 000015DC 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   438 000015E0 8805(2FC30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   439 000015E6 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   440 000015EA E854000000          <1>     call verifyIntegrityOfMCBChain
   441 000015EF C3                  <1>     ret
   442                              <1> .get:
   443 000015F0 488B1D(D2C30300)    <1>     mov rbx, qword [oldRSP]
   444 000015F7 31C0                <1>     xor eax, eax
   445 000015F9 8A05(2FC30300)      <1>     mov al, byte [allocStrat]
   446 000015FF 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   447 00001602 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   448 00001606 E838000000          <1>     call verifyIntegrityOfMCBChain
   449 0000160B C3                  <1>     ret
   450                              <1> .bad:
   451 0000160C C605(64C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   452 00001613 C605(65C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   453 0000161A 66C705(66C30300)01- <1>     mov word [errorExCde], errInvFnc   ;Invalid function number addr
   453 00001622 00                  <1>
   454 00001623 C605(68C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   455 0000162A B801000000          <1>     mov eax, errInvFnc
   456 0000162F 488B1D(D2C30300)    <1>     mov rbx, qword [oldRSP]
   457 00001636 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   458 00001639 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   459 0000163D E801000000          <1>     call verifyIntegrityOfMCBChain
   460 00001642 C3                  <1>     ret
   461                              <1> ;-----------------------------------:
   462                              <1> ;      Memory related routines      :
   463                              <1> ;-----------------------------------:
   464                              <1> verifyIntegrityOfMCBChain:
   465 00001643 50                  <1>     push rax
   466 00001644 53                  <1>     push rbx
   467 00001645 488B1D(24C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   468                              <1> .ok:
   469 0000164C 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   470 0000164F 7408                <1>     je .ok1
   471 00001651 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   472 00001654 7518                <1>     jne memSysHalt    ;It was not M or Z, fail violently
   473                              <1> .exit:
   474 00001656 5B                  <1>     pop rbx
   475 00001657 58                  <1>     pop rax
   476 00001658 C3                  <1>     ret ;We have reached the end of the chain, return all good!
   477                              <1> .ok1:
   478 00001659 31C0                <1>     xor eax, eax
   479 0000165B 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   480 0000165E 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   481 00001662 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   482 00001669 4801C3              <1>     add rbx, rax
   483 0000166C EBDE                <1>     jmp short .ok
   484                              <1> memSysHalt:
   485                              <1> ;Only arrive here if the integrity of the system is not verified
   486                              <1> ;Lock the system
   487 0000166E C605(64C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   488 00001675 C605(65C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   489 0000167C 66C705(66C30300)07- <1>     mov word [errorExCde], errMCBbad   ;Destroyed MCB chain
   489 00001684 00                  <1>
   490 00001685 C605(68C30300)05    <1>     mov byte [errorAction], eActKil ;Abort the system
   491 0000168C 488D150E000000      <1>     lea rdx, .sysHltString
   492 00001693 B409                <1>     mov ah, 09h
   493 00001695 CD41                <1>     int 41h
   494                              <1>     ;Only halt IRQ's in production!
   495                              <1>     %if !DEBUG
   496 00001697 FA                  <1>     cli ;Halt interrupts
   497 00001698 B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
   498 0000169A E6A1                <1>     out 0A1h, al
   499 0000169C E621                <1>     out 021h, al
   500                              <1>     %endif
   501 0000169E F4                  <1>     hlt             ;Halt the system
   502 0000169F EBFD                <1>     jmp short $ - 1 ;Go back far enough to capture the hlt
   503 000016A1 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
   503 000016AA 6C6F636174696F6E20- <1>
   503 000016B3 6572726F720D0A      <1>
   504 000016BA 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
   504 000016C3 616420434F4D4D414E- <1>
   504 000016CC 442C2073797374656D- <1>
   504 000016D5 2068616C74656424    <1>
    26                                  %include "./Source/Kernel/MemExec/execTerm.asm"
    27                              <1> ;EXEC and all default terminates are here
    28                              <1> 
    29                              <1> ;========================
    30                              <1> ;   Interrupt handlers
    31                              <1> ;========================
    32                              <1> terminateProcess:   ;Int 40h
    33 000016DD 48CF                <1>     iretq
    34                              <1> terminateRes:       ;Int 47h
    35 000016DF 48CF                <1>     iretq
    36                              <1> ;========================
    37                              <1> ;    Int 21h functions
    38                              <1> ;========================
    39                              <1> simpleTerminate:   ;ah = 00h
    40 000016E1 C3                  <1>     ret
    41                              <1> terminateStayRes:  ;ah = 31h
    42 000016E2 C3                  <1>     ret
    43                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    44 000016E3 C3                  <1>     ret
    45                              <1> terminateClean:    ;ah = 4Ch, EXIT
    46 000016E4 C3                  <1>     ret
    27                                  %include "./Source/Kernel/Local/Local.asm"
    28                              <1> ;Localisation based functions live here
    29                              <1> 
    30                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    31                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    32                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    33                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    34 000016E5 C3                  <1>     ret
    28                                  %include "./Source/Kernel/ctrlc.asm"
    29                              <1> diskErr:
    30 000016E6 80CC00              <1>     or ah, 00h
    31 000016E9 EB08                <1>     jmp short criticalErrorSetup
    32                              <1> asciiCharDevErr:
    33 000016EB 80CC00              <1>     or ah, 00h
    34 000016EE EB03                <1>     jmp short criticalErrorSetup
    35                              <1> binaryCharDevErr:
    36                              <1> ;Called with ah with additional bits
    37 000016F0 80CC38              <1>     or ah, 38h  ;Ignore,Retry,Fail OK
    38                              <1> criticalErrorSetup:
    39 000016F3 8825(C0C30300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    40 000016F9 48892D(20C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp should be NULLPTR
    41 00001700 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    42                              <1>     ;For now, fall through, but change it later! 
    43                              <1> 
    44                              <1> 
    45                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    46                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    47                              <1> ; to the critical error handler.
    48                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    49                              <1> ; and with Int44Bitfield set
    50                              <1> ;               AH = Critical Error Bitfield
    51                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    52                              <1> ;               Bit 6 - Reserved
    53                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    54                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    55                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    56                              <1> ;               Bits [2-1] = Affected Disk Error
    57                              <1> ;                     0 0   DOS area
    58                              <1> ;                     0 1   FAT area
    59                              <1> ;                     1 0   Directory area
    60                              <1> ;                     1 1   Data area
    61                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    62                              <1> ;               AL  = Failing drive number if AH[7] = 0
    63                              <1> ;               DIL = Error code for errorMsg
    64                              <1> ;               RSI = EA of Device Header for which device the error occured
    65                              <1> ;Return:
    66                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    67                              <1> ;                  = 1 - Retry the Operation    (Retry)
    68                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
    69                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    70                              <1> ; Return response from int 44h in al
    71                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
    72                              <1> ; This function will terminate the program if an abort was requested!
    73                              <1> ; This function also destroys RBP
    74 00001706 803D(62C30300)01    <1>     cmp byte [critErrFlag], 1
    75 0000170D 7204                <1>     jb .noIntError  ;If not 0, enter
    76 0000170F B003                <1>     mov al, critFail    ;Else, return Fail always
    77 00001711 EB34                <1>     jmp short .checkResponse
    78                              <1> .noIntError:
    79 00001713 FA                  <1>     cli ;Disable Interrupts
    80 00001714 FE05(62C30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
    81 0000171A FE0D(63C30300)      <1>     dec byte [inDOS]    ;Exiting DOS
    82 00001720 488925(B8C30300)    <1>     mov qword [xInt44hRSP], rsp
    83 00001727 488B25(D2C30300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    84 0000172E 31ED                <1>     xor ebp, ebp
    85 00001730 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
    86 00001732 488B25(B8C30300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    87 00001739 C605(62C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    88 00001740 FE05(63C30300)      <1>     inc byte [inDOS]    ;Reenter DOS
    89 00001746 FB                  <1>     sti ;Reenable Interrupts
    90                              <1>     ;Now we check that the response given was allowed, and translate if needed
    91                              <1> .checkResponse:
    92 00001747 3C01                <1>     cmp al, critRetry
    93 00001749 7217                <1>     jb .checkIgnore
    94 0000174B 7420                <1>     je .checkRetry
    95 0000174D 3C03                <1>     cmp al, critFail
    96 0000174F 752F                <1>     jne .abort   ;Must be abort
    97                              <1> ;Here is for fail
    98 00001751 F605(C0C30300)08    <1>     test byte [Int44bitfld], critFailOK
    99 00001758 7526                <1>     jnz .abort
   100                              <1> .exit:
   101 0000175A C605(64C30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   102 00001761 C3                  <1>     ret
   103                              <1> .checkIgnore:
   104 00001762 F605(C0C30300)20    <1>     test byte [Int44bitfld], critIgnorOK
   105 00001769 75EF                <1>     jnz .exit
   106 0000176B EB09                <1>     jmp short .setFail
   107                              <1> .checkRetry:
   108 0000176D F605(C0C30300)10    <1>     test byte [Int44bitfld], critRetryOK
   109 00001774 75E4                <1>     jnz .exit
   110                              <1> .setFail:
   111 00001776 B003                <1>     mov al, critFail
   112 00001778 FE05(C1C30300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   113 0000177E EBC7                <1>     jmp short .checkResponse    ;Double check if I can return Fail
   114                              <1> .abort:
   115                              <1> ;Prepare to abort. We abort from within!
   116                              <1> ;Currently fall into ^C
   117                              <1> ctrlBreakHdlr:
   118                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   119 00001780 FA                  <1> 	cli
   120 00001781 488B25(D2C30300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   121 00001788 E855060000          <1> 	call dosPopRegs ;Get user state back
   122 0000178D 488925(82C30300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   123 00001794 F8                  <1>     clc
   124 00001795 CD43                <1>     int 43h ;Call critical error handler
   125 00001797 FA                  <1>     cli ;Clear interrupts again
   126 00001798 488905(8EC30300)    <1>     mov qword [oldRAX], rax ;Save rax
   127 0000179F 9C                  <1>     pushfq  ;Get flags in rax
   128 000017A0 58                  <1>     pop rax 
   129 000017A1 483B25(82C30300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   130 000017A8 750C                <1>     jne .checkCF
   131                              <1> .returnToDOS:
   132 000017AA 488B05(8EC30300)    <1>     mov rax, qword [oldRAX]
   133 000017B1 E9D2040000          <1>     jmp functionDispatch    ;Goto int 41h
   134                              <1> .checkCF:
   135 000017B6 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   136 000017BD A801                <1>     test al, 1  ;CF set?
   137 000017BF 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   138 000017C1 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   139 000017C6 C605(E3C30300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   140 000017CD E9B6040000          <1>     jmp functionDispatch
   141                              <1> 
    29                                  %include "./Source/Kernel/dosPrim.asm"
    30                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    31                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    32                              <1> 
    33                              <1> dosDefCritErrHdlr:
    34                              <1> ;The DOS default critical error handler always returns FAIL
    35 000017D2 B003                <1>     mov al, critFail
    36 000017D4 48CF                <1>     iretq
    37                              <1> 
    38                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    39                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    40                              <1> ;       rbx = Ptr to the request header for the driver call!
    41 000017D6 E849060000          <1>     call dosCrit2Enter
    42 000017DB FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    43 000017DE FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    44 000017E1 E848060000          <1>     call dosCrit2Exit
    45 000017E6 C3                  <1>     ret
    46                              <1> 
    47                              <1> setupPhysicalDiskRequest:
    48                              <1> ;Ensure that al has valid disk number
    49                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    50                              <1> ;If CF=NC, rbp = DPB ptr.
    51                              <1> ;If CF=CY, exit error
    52 000017E7 84C0                <1>     test al, al
    53 000017E9 723F                <1>     jc .diskError
    54 000017EB 3A05(69C00300)      <1>     cmp al, byte [lastdrvNum]
    55 000017F1 7337                <1>     jae .diskError
    56 000017F3 50                  <1>     push rax
    57 000017F4 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    58 000017F6 E8EA030000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    59 000017FB 58                  <1>     pop rax
    60 000017FC 7235                <1>     jc .error
    61 000017FE 8805(4EC50300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    62 00001804 488B2D(57C50300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    63 0000180B 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    64 00001813 750A                <1>     jnz .netError
    65 00001815 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    66 00001819 E832030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    67 0000181E C3                  <1>     ret
    68                              <1> .netError:
    69 0000181F 66C705(66C30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    69 00001827 00                  <1>
    70 00001828 EB09                <1>     jmp short .error
    71                              <1> .diskError:
    72 0000182A 66C705(66C30300)0F- <1>     mov word [errorExCde], errBadDrv
    72 00001832 00                  <1>
    73                              <1> .error:
    74 00001833 C605(65C30300)02    <1>     mov byte [errorLocus], eLocDsk
    75 0000183A C605(68C30300)07    <1>     mov byte [errorAction], eActRetUsr
    76 00001841 C605(69C30300)09    <1>     mov byte [errorClass], eClsBadFmt
    77 00001848 F9                  <1>     stc
    78 00001849 C3                  <1>     ret
    79                              <1> 
    80                              <1> setupAbsDiskEntry:
    81                              <1> ;Prepares to sets up the CDS and DPB for the request
    82 0000184A FE05(63C30300)      <1>     inc byte [inDOS]
    83 00001850 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    84 00001851 FC                  <1>     cld ;Set string ops in the right direction
    85 00001852 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    86 00001857 7223                <1>     jc .exit    ;Error exit
    87 00001859 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    88 00001860 56                  <1>     push rsi
    89 00001861 50                  <1>     push rax
    90 00001862 488D35(41C40300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    91 00001869 8806                <1>     mov byte [rsi], al  ;Construct a path
    92 0000186B 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    93 0000186E C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
    94 00001872 F8                  <1>     clc
    95                              <1> ;++++++++++++++++++++++++++++
    96                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    97                              <1> ;Entered with path in rsi (ah=03h)
    98 00001873 B800030000          <1>     mov eax, 0300h  
    99 00001878 CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   100                              <1> ;++++++++++++++++++++++++++++
   101 0000187A 58                  <1>     pop rax
   102 0000187B 5E                  <1>     pop rsi
   103                              <1> .exit:
   104 0000187C 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   105 0000187E C3                  <1>     ret
   106                              <1> 
   107                              <1> absDiskWrite:       ;Int 46h
   108                              <1> ;al = Drive number
   109                              <1> ;rbx = Memory Buffer address to read from
   110                              <1> ;ecx = Number of sectors to write
   111                              <1> ;rdx = Start LBA to write to
   112 0000187F FA                  <1>     cli
   113 00001880 488925(D2C30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   114 00001887 488D25(1FD80300)    <1>     lea rsp, DiskStakTop
   115 0000188E 55                  <1>     push rbp
   116 0000188F 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   117 00001890 E8B5FFFFFF          <1>     call setupAbsDiskEntry
   118 00001895 7252                <1>     jc absDiskExit
   119 00001897 E8E2010000          <1>     call primReqWriteSetup
   120 0000189C EB1D                <1>     jmp short absDiskReadWriteCommon
   121                              <1> absDiskRead:        ;Int 45h
   122                              <1> ;al = Drive number
   123                              <1> ;rbx = Memory Buffer address to write to
   124                              <1> ;ecx = Number of sectors to read
   125                              <1> ;rdx = Start LBA to read from
   126 0000189E FA                  <1>     cli 
   127 0000189F 488925(D2C30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   128 000018A6 488D25(1FD80300)    <1>     lea rsp, DiskStakTop
   129 000018AD 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   130 000018AE 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   131 000018AF E896FFFFFF          <1>     call setupAbsDiskEntry
   132 000018B4 7233                <1>     jc absDiskExit
   133 000018B6 E8CE010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   134                              <1> absDiskReadWriteCommon:
   135                              <1> ;Entered with the appropriate function number in ah
   136                              <1> ; and primary request header in rbx
   137 000018BB E83B000000          <1>     call absDiskDriverCall
   138 000018C0 7427                <1>     jz absDiskExit  ;Skip error code checking
   139 000018C2 8A05(1AC40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   140                              <1>     ;DOS uses the following pairs in a table
   141                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   142 000018C8 B480                <1>     mov ah, 80h ;Attachment failure
   143 000018CA 3C0C                <1>     cmp al, 0Ch ;Gen error
   144 000018CC 741A                <1>     je .absExit
   145 000018CE B440                <1>     mov ah, 40h ;Seek error
   146 000018D0 3C06                <1>     cmp al, 06h
   147 000018D2 7414                <1>     je .absExit
   148 000018D4 B408                <1>     mov ah, 08h ;Bad CRC
   149 000018D6 3C04                <1>     cmp al, 04h
   150 000018D8 740E                <1>     je .absExit
   151 000018DA B404                <1>     mov ah, 04h ;Sector not found
   152 000018DC 3C08                <1>     cmp al, 08h
   153 000018DE 7408                <1>     je .absExit
   154 000018E0 30E4                <1>     xor ah, ah  ;Write Protect Violation
   155 000018E2 84C0                <1>     test al, al
   156 000018E4 7402                <1>     je .absExit
   157 000018E6 B402                <1>     mov ah, 02h ;Other Error
   158                              <1> .absExit:
   159 000018E8 F9                  <1>     stc
   160                              <1> absDiskExit:
   161 000018E9 5B                  <1>     pop rbx
   162 000018EA 5D                  <1>     pop rbp
   163 000018EB FA                  <1>     cli
   164 000018EC FE0D(63C30300)      <1>     dec byte [inDOS]
   165 000018F2 488B25(D2C30300)    <1>     mov rsp, qword [oldRSP]
   166 000018F9 FB                  <1>     sti ;Reenable interrupts
   167 000018FA C3                  <1>     ret ;Return from interrupt without popping flags!
   168                              <1> absDiskDriverCall:
   169                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   170                              <1> ;       rbx = Request header address
   171                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   172                              <1> ;       eax = Status word from request
   173                              <1> ;       ecx = Number of sectors transferred
   174 000018FB 56                  <1>     push rsi
   175                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   176 000018FC 8B0D(2DC40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   177                              <1>     ;Prepare for goDriver now
   178 00001902 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   179 00001906 E8CBFEFFFF          <1>     call goDriver   ;Make request
   180 0000190B 5E                  <1>     pop rsi
   181 0000190C 8B05(2DC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   182 00001912 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   183 00001914 0FB705(1AC40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   184 0000191B 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   185 0000191F C3                  <1>     ret
   186                              <1> 
   187                              <1> getDiskDPB:
   188                              <1> ;Gets the disk DPB if the Disk is physical
   189                              <1> ;Otherwise will return a pointer to the drive DPB
   190                              <1> ;Called with rdi pointing to the CDS
   191                              <1> ;CF=NC => RBP=DPBptr, CF=CY => Error exit
   192 00001920 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   193 00001924 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   194 00001927 8805(4EC50300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   195 0000192D E81E020000          <1>     call setWorkingDPB
   196 00001932 57                  <1>     push rdi    ;Save the CDS ptr
   197 00001933 E838000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   198 00001938 5F                  <1>     pop rdi
   199 00001939 7234                <1>     jc .exitBad ;Preserve CF
   200 0000193B 7531                <1>     jnz .exit
   201                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   202 0000193D 8A0D(69C00300)      <1>     mov cl, byte [lastdrvNum]
   203 00001943 4831C0              <1>     xor rax, rax
   204 00001946 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   205 00001949 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   206 0000194D 488B3D(56C00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   207                              <1> .checkCDS:
   208 00001954 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   209 00001958 7509                <1>     jne .next
   210 0000195A 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   211 0000195E 7403                <1>     jz .next    ;IF yes, skip it
   212 00001960 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   213                              <1> .next:
   214 00001963 4881C75B000000      <1>     add rdi, cds_size
   215 0000196A FEC9                <1>     dec cl
   216 0000196C 75E6                <1>     jnz .checkCDS
   217                              <1> .exit:
   218 0000196E F8                  <1>     clc
   219                              <1> .exitBad:
   220 0000196F C3                  <1>     ret
   221                              <1> 
   222                              <1> ensureDiskValid:
   223                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   224                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   225                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   226                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   227                              <1> .medChk:
   228 00001970 E85D010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   229                              <1> ;Return in rbx the req hdr address
   230 00001975 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   231 00001979 E858FEFFFF          <1>     call goDriver   ;Request!
   232 0000197E 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   233 00001982 F7C700800000        <1>     test edi, drvErrStatus
   234 00001988 756C                <1>     jnz .diskDrvCritErrMedChk
   235                              <1> .medChkIgnore:
   236 0000198A 8A05(4EC50300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   237 00001990 30E4                <1>     xor ah, ah
   238 00001992 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   239 00001995 84630E              <1>     test byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   240 00001998 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   241 0000199A 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   242 0000199C E83CEDFFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   243 000019A1 F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   244 000019A2 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   245                              <1>     ;ZF=NZ from test for dirty buffers
   246                              <1> .exit:
   247 000019A4 C3                  <1>     ret
   248                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   249 000019A5 C605(27D80300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   250 000019AC E850EDFFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   251                              <1>     ;Get a buffer to read BPB into in rdi
   252 000019B1 B101                <1>     mov cl, dosBuffer
   253 000019B3 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   254 000019B5 E869EDFFFF          <1>     call getBuffer ;Get a disk buffer
   255 000019BA 72E8                <1>     jc .exit    ;Immediately exit with the carry flag set
   256 000019BC 4889DF              <1>     mov rdi, rbx
   257                              <1> .repeatEP:
   258 000019BF E83A010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   259 000019C4 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   260 000019C8 E809FEFFFF          <1>     call goDriver   ;Request!
   261 000019CD 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   262 000019D1 A900800000          <1>     test eax, drvErrStatus
   263 000019D6 7565                <1>     jnz .diskDrvCritErrBPB
   264                              <1>     ;Now rebuild the dpb fields for this drive
   265 000019D8 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   266 000019DC E89A060000          <1>     call createDPB  
   267                              <1>     ;Adjust the buffer header information
   268 000019E1 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   269 000019E4 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   270 000019E7 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   271 000019EA 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   272 000019ED 30E4                <1>     xor ah, ah
   273 000019EF 8825(27D80300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   274 000019F5 C3                  <1>     ret
   275                              <1> .diskDrvCritErrMedChk:
   276                              <1> ;Critical Errors fall through here
   277                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   278 000019F6 48893D(6AC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   279 000019FD 48892D(20C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   280 00001A04 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   281 00001A07 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   282 00001A09 8825(C0C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   283 00001A0F E8F2FCFFFF          <1>     call criticalDOSError
   284 00001A14 488B3D(6AC30300)    <1>     mov rdi, qword [xInt44RDI]
   285 00001A1B 488B2D(20C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   286 00001A22 3C01                <1>     cmp al, critRetry
   287 00001A24 0F8446FFFFFF        <1>     je .medChk
   288 00001A2A 3C00                <1>     cmp al, critIgnore
   289 00001A2C 0F8458FFFFFF        <1>     je .medChkIgnore
   290 00001A32 66C705(66C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   290 00001A3A 00                  <1>
   291 00001A3B F9                  <1>     stc ;Set error flag to indicate fail
   292 00001A3C C3                  <1>     ret ;And exit from function with CF set
   293                              <1> 
   294                              <1> .diskDrvCritErrBPB:
   295                              <1>     ;eax has status word, rbp has dpb ptr
   296                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   297 00001A3D 48893D(6AC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   298 00001A44 48892D(20C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   299 00001A4B 89C7                <1>     mov edi, eax    ;Transfer the status word over
   300 00001A4D 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   301 00001A50 B418                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK ;Set bits
   302 00001A52 8825(C0C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   303 00001A58 E8A9FCFFFF          <1>     call criticalDOSError
   304 00001A5D 488B3D(6AC30300)    <1>     mov rdi, qword [xInt44RDI]
   305 00001A64 488B2D(20C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   306 00001A6B 3C01                <1>     cmp al, critRetry
   307 00001A6D 0F844CFFFFFF        <1>     je .repeatEP
   308                              <1>     ;Else we fail (Ignore=Fail here)
   309 00001A73 66C705(66C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   309 00001A7B 00                  <1>
   310 00001A7C F9                  <1>     stc ;Set error flag to indicate fail
   311 00001A7D C3                  <1>     ret ;And exit from function with CF set
   312                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   313                              <1> ;           Primitive Driver Requests
   314                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   315                              <1> ;First are Disk requests, then Char device requests
   316                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   317                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   318                              <1> 
   319                              <1> primReqWriteSetup:
   320 00001A7E 50                  <1>     push rax
   321 00001A7F B408                <1>     mov ah, drvWRITE    ;Command code
   322 00001A81 0225(2DC30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   323 00001A87 EB03                <1>     jmp short primReqRWCommon
   324                              <1> primReqReadSetup:
   325 00001A89 50                  <1>     push rax
   326 00001A8A B404                <1>     mov ah, drvREAD
   327                              <1> primReqRWCommon:
   328                              <1> ;Sets up the IO request packet with:
   329                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   330                              <1> ; rbx = Data storage buffer ptr
   331                              <1> ; ecx = Number of sectors to transfer
   332                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   333                              <1> ; ~~~~ Set by entry function ~~~~ 
   334                              <1> ; ah = Command code
   335                              <1> ; All regs preserved EXCEPT rbx.
   336                              <1> ; Return: rbx = Transfer Address
   337 00001A8C 48891D(25C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   338 00001A93 890D(2DC40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   339 00001A99 C605(17C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   340 00001AA0 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   341 00001AA5 8905(18C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   342 00001AAB 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   343 00001AAE 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   344                              <1>     ;Disk operations only here!
   345 00001AB0 488915(31C40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   346 00001AB7 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   347 00001ABA 8805(24C40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   348 00001AC0 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   349 00001AC3 8805(18C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   350                              <1> primReqCommonExit:
   351                              <1> ;Returns in rbx the primary request header as these functions
   352                              <1> ; setup the request in the primary request header space
   353 00001AC9 58                  <1>     pop rax
   354 00001ACA 488D1D(17C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   355 00001AD1 C3                  <1>     ret
   356                              <1> 
   357                              <1> primReqMedCheckSetup:
   358                              <1> ;Prepare the diskIO packet for mediacheck
   359                              <1> ;rbp has DPB pointer for device to check media on
   360 00001AD2 50                  <1>     push rax
   361 00001AD3 C605(17C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   362 00001ADA 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   363 00001ADD 8805(24C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   364 00001AE3 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   365 00001AE6 8805(18C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   366 00001AEC C605(19C40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   367 00001AF3 66C705(1AC40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   367 00001AFB 00                  <1>
   368 00001AFC EBCB                <1>     jmp short primReqCommonExit
   369                              <1> 
   370                              <1> primReqGetBPBSetup:
   371                              <1> ;rbp has DPB pointer for device
   372                              <1> ;rdi has sector buffer header pointer for transfer
   373 00001AFE 50                  <1>     push rax
   374 00001AFF 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   375 00001B03 48893D(25C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   376 00001B0A C605(17C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   377 00001B11 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   378 00001B14 8805(24C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   379 00001B1A 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   380 00001B1D 8805(18C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   381 00001B23 C605(19C40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   382 00001B2A 66C705(1AC40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   382 00001B32 00                  <1>
   383 00001B33 EB94                <1>     jmp short primReqCommonExit
   384                              <1> 
   385                              <1> secdReqCharIOReq:
   386                              <1> ;Sets up the IO request packet with:
   387                              <1> ;Input:
   388                              <1> ; al =  Data Request code (Read/Write/Write with Verify)
   389                              <1> ; rsi = Data transfer buffer ptr    (if needed)
   390                              <1> ; ecx = Number of bytes to transfer (if needed)
   391                              <1> ;Output: 
   392                              <1> ; rbx = Transfer Address   
   393 00001B35 488D1D(EDC30300)    <1>     lea rbx, secdReqHdr
   394 00001B3C C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   395 00001B3F 884302              <1>     mov byte [rbx + ioReqPkt.cmdcde], al
   396 00001B42 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   397 00001B48 4889730E            <1>     mov qword [rbx + ioReqPkt.bufptr], rsi
   398 00001B4C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   399 00001B4F C3                  <1>     ret
    30                                  %include "./Source/Kernel/dosUtils.asm"
    31                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    32                              <1> 
    33                              <1> ;Basic Drive related Utilities
    34                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    35                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    36                              <1> ; that gets set up)
    37                              <1> 
    38                              <1> setWorkingDPB:
    39                              <1> ;Gets dpb in rbp and saves to curDrvDPB (working dpb)
    40 00001B50 48892D(4FC50300)    <1>     mov qword [workingDPB], rbp
    41 00001B57 C3                  <1>     ret
    42                              <1> 
    43                              <1> getUserRegs:   ;Int 4Fh AX=1218h
    44                              <1> ;Returns ptr to user regs in rsi
    45 00001B58 488B35(D2C30300)    <1>     mov rsi, qword [oldRSP]
    46 00001B5F C3                  <1>     ret
    47                              <1> 
    48                              <1> walkDPBchain:
    49                              <1> ;Called with al = 0 based drive number
    50                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    51 00001B60 488B35(34C00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    52                              <1> .walk:
    53 00001B67 4881FEFFFFFFFF      <1>     cmp rsi, -1
    54 00001B6E 740A                <1>     je .exitBad
    55 00001B70 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    56 00001B72 7407                <1>     je .exit    ;Drive found
    57 00001B74 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    58 00001B78 EBED                <1>     jmp short .walk
    59                              <1> .exitBad:
    60 00001B7A F9                  <1>     stc
    61                              <1> .exit:
    62 00001B7B C3                  <1>     ret
    63                              <1> setDrive:   
    64                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
    65                              <1> ;Input: al = 1-based drive number
    66                              <1> ;Output: al = 0-based drive number
    67                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
    68                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
    69                              <1> ;            set.
    70 00001B7C E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
    71 00001B81 7212                <1>     jc .exit    ;Carry the CF flag if not Physical
    72 00001B83 56                  <1>     push rsi
    73 00001B84 488B35(57C50300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
    74 00001B8B 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
    75 00001B91 5E                  <1>     pop rsi
    76 00001B92 7401                <1>     jz .exit
    77 00001B94 F9                  <1>     stc
    78                              <1> .exit:
    79 00001B95 C3                  <1>     ret
    80                              <1> 
    81                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
    82                              <1> ;Allows a redirector or subst/join to build a CDS
    83                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
    84                              <1> ; volumes, that are made at system boot.
    85                              <1> ;Input: al = Drive Letter for drive
    86                              <1> ;       workingCDS = Set to the CDS array slot for the drive
    87                              <1> ;Output: rdi = newly filled in workingCDS
    88                              <1> ;CF=NC => CDS valid and has a DPB
    89                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
    90 00001B96 50                  <1>     push rax
    91 00001B97 2C40                <1>     sub al, "A"-1
    92 00001B99 3A05(68C00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
    93 00001B9F 488B3D(57C50300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
    94 00001BA6 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
    95 00001BAC 58                  <1>     pop rax
    96 00001BAD 7235                <1>     jb .exit    ;Exit with CF=CY
    97 00001BAF 50                  <1>     push rax
    98 00001BB0 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
    99 00001BB5 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   100 00001BB7 58                  <1>     pop rax
   101 00001BB8 66814F430040        <1>     or word [rdi + cds.wFlags], cdsPhysDrive    ;Config bit set
   102 00001BBE C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   103 00001BC5 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   104 00001BCD 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   105                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   106 00001BD3 50                  <1>     push rax
   107 00001BD4 56                  <1>     push rsi
   108 00001BD5 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   109 00001BD7 E884FFFFFF          <1>     call walkDPBchain
   110 00001BDC 7204                <1>     jb .skipSettingDPB
   111 00001BDE 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   112                              <1> .skipSettingDPB:
   113 00001BE2 5E                  <1>     pop rsi
   114 00001BE3 58                  <1>     pop rax
   115                              <1> .exit:
   116 00001BE4 C3                  <1>     ret
   117                              <1> 
   118                              <1> getCDS:     ;Int 4Fh AX=1219h
   119                              <1> ;Gets the device DPB and saves it in the DOS variable
   120                              <1> ;This can be called to get CDS for network drives too!
   121                              <1> ;Input: al = 1 based drive number
   122                              <1> ;Sets workingCDS var with the CDS for the device. 
   123                              <1> ;   If device on a network, sets CF
   124                              <1> ;Returns al with 0-based drive number
   125 00001BE5 84C0                <1>     test al, al
   126 00001BE7 7508                <1>     jnz .skip
   127 00001BE9 8A05(8CC30300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   128 00001BEF FEC0                <1>     inc al
   129                              <1> .skip:
   130 00001BF1 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   131 00001BF3 56                  <1>     push rsi
   132 00001BF4 C605(65C30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   133 00001BFB F605(4DC50300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   134 00001C02 7423                <1>     jz .physDrive
   135                              <1>     ;Invokation via 21/5D00, not yet fully supported
   136                              <1>     ;If returned with CF=CY, consider it an error for now
   137 00001C04 50                  <1>     push rax
   138 00001C05 57                  <1>     push rdi
   139 00001C06 488D3D(67C50300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   140 00001C0D 48893D(57C50300)    <1>     mov qword [workingCDS], rdi ;Make it current
   141 00001C14 0441                <1>     add al, "A" ;Convert to a drive letter
   142 00001C16 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   143 00001C1B 66F747430040        <1>     test word [rdi + cds.wFlags], cdsPhysDrive  ;Is the CDS valid?
   144 00001C21 5F                  <1>     pop rdi
   145 00001C22 58                  <1>     pop rax
   146 00001C23 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   147 00001C25 EB17                <1>     jmp short .exitOk   ;All oki
   148                              <1> .physDrive:
   149 00001C27 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   150 00001C2C 7208                <1>     jc .exitBad
   151 00001C2E 66F746430040        <1>     test word [rsi + cds.wFlags], cdsPhysDrive
   152 00001C34 7508                <1>     jnz .exitOk ;Exit with flag cleared
   153                              <1>     ;Else Return to unknown error locus
   154                              <1> .exitBad:
   155 00001C36 C605(65C30300)01    <1>     mov byte [errorLocus], eLocUnk
   156                              <1> .exitBad1:
   157 00001C3D F9                  <1>     stc
   158                              <1> .exitOk:
   159 00001C3E 5E                  <1>     pop rsi
   160 00001C3F C3                  <1>     ret
   161                              <1> 
   162                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   163                              <1>     ;Gets the CDS for the current drive in al
   164                              <1>     ;Input: al = Drive number, 0 = A ...
   165                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   166                              <1>     ;        CF=CY => al not valid
   167 00001C40 3A05(69C00300)      <1>     cmp al, byte [lastdrvNum]
   168 00001C46 7202                <1>     jb .ctn
   169 00001C48 F9                  <1>     stc 
   170 00001C49 C3                  <1>     ret
   171                              <1> .ctn:
   172 00001C4A 50                  <1>     push rax
   173 00001C4B 52                  <1>     push rdx
   174 00001C4C 0FB6C0              <1>     movzx eax, al
   175 00001C4F 48BE5B000000000000- <1>     mov rsi, cds_size
   175 00001C58 00                  <1>
   176 00001C59 31D2                <1>     xor edx, edx
   177 00001C5B F7E6                <1>     mul esi ;Get the multiples of CDS's to skip
   178 00001C5D 488D05(56C00300)    <1>     lea rax, qword [cdsHeadPtr] ;Get the first CDS
   179 00001C64 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   180 00001C67 488935(57C50300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   181 00001C6E 5A                  <1>     pop rdx
   182 00001C6F 58                  <1>     pop rax
   183 00001C70 F8                  <1>     clc
   184 00001C71 C3                  <1>     ret
   185                              <1> 
   186                              <1> 
   187                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   188                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   189                              <1> ;Input: AL = Char to normalise.
   190                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   191                              <1> ;If path separator, set ZF=ZE
   192 00001C72 3C5C                <1>     cmp al, "\"
   193 00001C74 7406                <1>     je .exit
   194 00001C76 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   195 00001C78 7502                <1>     jne .exit
   196 00001C7A B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   197                              <1> .exit:
   198 00001C7C C3                  <1>     ret
   199                              <1> 
   200                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   201                              <1> ;Convert a lowercase char to uppercase
   202                              <1> ; Leave alone uppercase chars and invalid chars
   203                              <1> ;Input: al = Char to convert to uppercase
   204                              <1> ;Output: al = Processed char
   205 00001C7D 3C7A                <1>     cmp al, "z"
   206 00001C7F 7706                <1>     ja .exit
   207 00001C81 3C61                <1>     cmp al, "a"
   208 00001C83 7202                <1>     jb .exit
   209 00001C85 2C20                <1>     sub al, "a" - "A"   ;Convert the char
   210                              <1> .exit:
   211 00001C87 C3                  <1>     ret
    31                                  %include "./Source/Kernel/dosMain.asm"
    32                              <1> ;-----------------------------------:
    33                              <1> ;        Main Kernel dispatch       :
    34                              <1> ;            and routines           :
    35                              <1> ;-----------------------------------:
    36                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    37                              <1> ;ah = Function number, all other registers have various meanings
    38                              <1>  %if DEBUG
    39                              <1>     ;Entry function
    40                              <1>     debugEnterM
    41                              <1>     lea rbp, .l0000
    42                              <1>     call debPrintNullString
    43                              <1>     call debPrintFunctionName
    44                              <1>     jmp short .l0001
    45                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    46                              <1> .l0001:    
    47                              <1>     debugExitM
    48                              <1>     %endif
    49 00001C88 FA                  <1>     cli ;Halt external interrupts
    50 00001C89 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    51 00001C8A 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    52 00001C8D 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    53                              <1>     ;Cherry pick functions
    54 00001C93 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    55 00001C96 722C                <1>     jb .fsbegin   ;If below skip these checks
    56 00001C98 0F849A010000        <1>     je ctrlBreakCheck
    57 00001C9E 80FC64              <1>     cmp ah, 64h
    58 00001CA1 0F84DA010000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    59 00001CA7 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    60 00001CA9 80FC51              <1>     cmp ah, 51h
    61 00001CAC 0F84BD010000        <1>     je getCurrProcessID    ;This and below are exactly the same
    62 00001CB2 80FC62              <1>     cmp ah, 62h
    63 00001CB5 0F84BD010000        <1>     je getPSPaddr          ;Calls the above function
    64 00001CBB 80FC50              <1>     cmp ah, 50h
    65 00001CBE 0F84A2010000        <1>     je setCurrProcessID
    66                              <1> .fsbegin:
    67 00001CC4 E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    68 00001CC9 48891D(DAC30300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    69 00001CD0 66C705(9EC30300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    69 00001CD8 00                  <1>
    70 00001CD9 488B05(D2C30300)    <1>     mov rax, qword [oldRSP]
    71 00001CE0 488905(C2C30300)    <1>     mov qword [oldoldRSP], rax
    72 00001CE7 FE05(63C30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    73 00001CED 488925(D2C30300)    <1>     mov qword [oldRSP], rsp
    74                              <1> ;Network related variable resetting
    75 00001CF4 C605(4DC50300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    76                              <1> ;Here, we want to save oldRSP in the callers PSP
    77 00001CFB 803D(63C30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    78 00001D02 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    79 00001D04 488B05(7AC30300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    80 00001D0B 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    81                              <1> .fsb1:
    82 00001D0F 58                  <1>     pop rax     ;Get old rax back
    83 00001D10 50                  <1>     push rax    ;and push it back onto the stack
    84 00001D11 488D25(50CB0300)    <1>     lea rsp, critStakTop
    85 00001D18 FB                  <1>     sti         ;Reenable interrupts
    86                              <1> 
    87 00001D19 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    88 00001D1B 881D(EAC30300)      <1>     mov byte [vConDrvFlg], bl   ;Clear the conDrvFlg (use default CON driver)
    89 00001D21 C605(EBC30300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    90 00001D28 881D(C1C30300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
    91 00001D2E 881D(E2C30300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    92                              <1> 
    93 00001D34 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    94 00001D35 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    95 00001D37 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    96 00001D39 488D05DAE2FFFF      <1>     lea rax, kDispTbl
    97 00001D40 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    98 00001D43 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    99 00001D47 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   100 00001D4A 58                  <1>     pop rax
   101                              <1> 
   102 00001D4B 84E4                <1>     test ah, ah     ;Simple Terminate function?
   103 00001D4D 741C                <1>     jz .fddiskOp
   104 00001D4F 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   105 00001D52 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   106 00001D54 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   107 00001D57 7712                <1>     ja .fddiskOp
   108                              <1> ;Char operations here
   109 00001D59 F605(62C30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   110 00001D60 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   111 00001D62 488D25(DFD10300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   112 00001D69 EB40                <1>     jmp short .fdGoToFunction
   113                              <1> .fddiskOp:
   114                              <1>     ;Disk operations go here
   115                              <1>     ;Save rax on entry to a disk funciton
   116 00001D6B 488905(8EC30300)    <1>     mov qword [oldRAX], rax
   117                              <1>     ;Clear up error info
   118 00001D72 C605(65C30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   119 00001D79 C605(62C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   120 00001D80 C605(64C30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   121                              <1> 
   122 00001D87 50                  <1>     push rax
   123 00001D88 B482                <1>     mov ah, 82h ;Cancel all critical section!
   124 00001D8A CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   125 00001D8C 58                  <1>     pop rax
   126                              <1> 
   127 00001D8D C605(EBC30300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   128 00001D94 488D25(1FD80300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   129 00001D9B F605(8DC30300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   130 00001DA2 7407                <1>     jz .fdGoToFunction
   131                              <1> ; HANDLE CTRL+BREAK HERE!
   132 00001DA4 50                  <1>     push rax
   133 00001DA5 E8A8EEFFFF          <1>     call checkBreakOnCon    ; Check for a ^C in the CON buffer
   134 00001DAA 58                  <1>     pop rax
   135                              <1> .fdGoToFunction:
   136 00001DAB 48871D(DAC30300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   137                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   138                              <1>     ;
   139                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   140                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   141                              <1>     ;
   142                              <1>     %if DEBUG && REGS
   143                              <1>     ;Print stack if necessary function
   144                              <1>     debugEnterM
   145                              <1>     call debPrintDOSStack
   146                              <1>     debugExitM
   147                              <1>     %endif
   148 00001DB2 FF15(DAC30300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   149                              <1>     %if DEBUG
   150                              <1>     ;Entry function
   151                              <1>     debugEnterM
   152                              <1>     lea rbp, .l0002
   153                              <1>     call debPrintNullString
   154                              <1>     jmp short .l0003
   155                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   156                              <1> .l0003:    
   157                              <1>     debugExitM
   158                              <1>     %endif
   159                              <1>     %if DEBUG && REGS
   160                              <1>     ;Exit function
   161                              <1>     debugEnterM
   162                              <1>     call debPrintDOSStack
   163                              <1>     debugExitM
   164                              <1>     %endif
   165                              <1> .fdExit:
   166 00001DB8 FA                  <1>     cli     ;Redisable interrupts
   167 00001DB9 FE0D(63C30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   168 00001DBF 488B25(D2C30300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   169 00001DC6 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   170 00001DC9 488B05(C2C30300)    <1>     mov rax, qword [oldoldRSP]
   171 00001DD0 488905(D2C30300)    <1>     mov qword [oldRSP], rax
   172 00001DD7 E806000000          <1>     call dosPopRegs  ;Pop the frame
   173 00001DDC 48CF                <1>     iretq
   174                              <1> .fdExitBad:
   175 00001DDE 30C0                <1>     xor al, al
   176                              <1> defaultIretq:
   177 00001DE0 48CF                <1>     iretq
   178                              <1> dosPopRegs:
   179 00001DE2 8F05(CAC30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   180 00001DE8 58                  <1>     pop rax
   181 00001DE9 5B                  <1>     pop rbx
   182 00001DEA 59                  <1>     pop rcx
   183 00001DEB 5A                  <1>     pop rdx
   184 00001DEC 5E                  <1>     pop rsi
   185 00001DED 5F                  <1>     pop rdi
   186 00001DEE 5D                  <1>     pop rbp
   187 00001DEF 4158                <1>     pop r8
   188 00001DF1 4159                <1>     pop r9
   189 00001DF3 FF25(CAC30300)      <1>     jmp qword [dosReturn]
   190                              <1> dosPushRegs:
   191 00001DF9 8F05(CAC30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   192 00001DFF 4151                <1>     push r9
   193 00001E01 4150                <1>     push r8
   194 00001E03 55                  <1>     push rbp
   195 00001E04 57                  <1>     push rdi
   196 00001E05 56                  <1>     push rsi
   197 00001E06 52                  <1>     push rdx
   198 00001E07 51                  <1>     push rcx
   199 00001E08 53                  <1>     push rbx
   200 00001E09 50                  <1>     push rax
   201 00001E0A FF25(CAC30300)      <1>     jmp qword [dosReturn]
   202                              <1> dosCrit1Enter:
   203 00001E10 C3                  <1>     ret     ;Needs to be patched with 50h (PUSH RAX)
   204 00001E11 B801800000          <1>     mov eax, 8001h
   205 00001E16 CD4A                <1>     int 4ah
   206 00001E18 58                  <1>     pop rax
   207 00001E19 C3                  <1>     ret
   208                              <1> dosCrit1Exit:
   209 00001E1A C3                  <1>     ret
   210 00001E1B B801810000          <1>     mov eax, 8101h
   211 00001E20 CD4A                <1>     int 4ah
   212 00001E22 58                  <1>     pop rax
   213 00001E23 C3                  <1>     ret
   214                              <1> dosCrit2Enter:
   215 00001E24 C3                  <1>     ret
   216 00001E25 B802800000          <1>     mov eax, 8002h
   217 00001E2A CD4A                <1>     int 4ah
   218 00001E2C 58                  <1>     pop rax
   219 00001E2D C3                  <1>     ret
   220                              <1> dosCrit2Exit:
   221 00001E2E C3                  <1>     ret
   222 00001E2F B802810000          <1>     mov eax, 8102h
   223 00001E34 CD4A                <1>     int 4ah
   224 00001E36 58                  <1>     pop rax
   225 00001E37 C3                  <1>     ret
   226                              <1> ;========================================:
   227                              <1> ;      Reentrant Kernel Functions        :
   228                              <1> ;========================================:
   229                              <1> ctrlBreakCheck:    ;ah = 33h
   230 00001E38 84C0                <1>     test al, al
   231 00001E3A 7508                <1>     jnz .cbcget  ;Get the state or other functions
   232 00001E3C 8A15(8DC30300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   233 00001E42 48CF                <1>     iretq
   234                              <1> .cbcget:
   235 00001E44 3C02                <1>     cmp al, 02h
   236 00001E46 771A                <1>     ja .cbcBad
   237 00001E48 740D                <1>     jz .cbcxchg ;Function 2
   238 00001E4A 52                  <1>     push rdx
   239 00001E4B 80E201              <1>     and dl, 1   ;Get only the bottom bit
   240 00001E4E 8815(8DC30300)      <1>     mov byte [breakFlag], dl    ;Set the state
   241 00001E54 5A                  <1>     pop rdx
   242 00001E55 48CF                <1>     iretq
   243                              <1> .cbcxchg:
   244 00001E57 80E201              <1>     and dl, 1
   245 00001E5A 8615(8DC30300)      <1>     xchg byte [breakFlag], dl
   246 00001E60 48CF                <1>     iretq
   247                              <1> .cbcBad:
   248 00001E62 B0FF                <1>     mov al, -1
   249 00001E64 48CF                <1>     iretq
   250                              <1> 
   251                              <1> 
   252                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   253 00001E66 48891D(7AC30300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   254 00001E6D 48CF                <1>     iretq
   255                              <1> 
   256                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   257 00001E6F 488B15(7AC30300)    <1>     mov rdx, qword [currentPSP]
   258 00001E76 48CF                <1>     iretq
   259                              <1> 
   260                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   261 00001E78 488B15(7AC30300)    <1>     mov rdx, qword [currentPSP]
   262 00001E7F 48CF                <1>     iretq
   263                              <1> 
   264                              <1> setDriverLookahead:;ah = 64h, reserved
   265 00001E81 48CF                <1>     iretq
   266                              <1> 
   267                              <1> ;========================================:
   268                              <1> ;            Kernel Functions            :
   269                              <1> ;========================================:
   270                              <1> diskReset:         ;ah = 0Dh
   271                              <1> ;Flush all dirty buffers to disk
   272 00001E83 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   273                              <1> .drCheckBuffer:
   274 00001E8A F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   275 00001E8E 7407                <1>     jz .drGotoNextBuffer
   276                              <1> .drFlushBuffer:
   277 00001E90 E829E7FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   278 00001E95 720C                <1>     jc .drExit
   279                              <1> .drGotoNextBuffer:
   280 00001E97 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   281 00001E9A 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   282 00001EA1 75E7                <1>     jne .drCheckBuffer
   283                              <1> .drExit:
   284 00001EA3 C3                  <1>     ret
   285                              <1> 
   286                              <1> selectDisk:        ;ah = 0Eh
   287                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   288 00001EA4 88D0                <1>     mov al, dl
   289 00001EA6 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   290 00001EA8 E8CFFCFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   291 00001EAD 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   292 00001EAF 8805(8CC30300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   293                              <1> .skipSettingCurrent:
   294 00001EB5 0FB605(69C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   295 00001EBC C3                  <1>     ret
   296                              <1> 
   297                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   298 00001EBD 8A05(8CC30300)      <1>     mov al, byte [currentDrv]
   299 00001EC3 C3                  <1>     ret
   300                              <1> 
   301                              <1> FATinfoDefault:    ;ah = 1Bh
   302 00001EC4 30D2                <1>     xor dl, dl
   303                              <1> FATinfoDevice:     ;ah = 1Ch
   304                              <1> ;Return in:
   305                              <1> ;   al = Number of sectors per cluster
   306                              <1> ;   edx = Number of clusters
   307                              <1> ;   cx =  Size of a clsuter
   308 00001EC6 84D2                <1>     test dl, dl
   309 00001EC8 7508                <1>     jnz .fidSkipdefault
   310 00001ECA 8A15(8CC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   311 00001ED0 FEC2                <1>     inc dl
   312                              <1> .fidSkipdefault:
   313 00001ED2 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   314                              <1> ;Walk the dpb chain manually
   315 00001ED4 88D0                <1>     mov al, dl  ;Move drive number into al
   316 00001ED6 E885FCFFFF          <1>     call walkDPBchain    ;Get in rsi the dpb pointer for drive in al
   317 00001EDB 7331                <1>     jnc .fidDPBFound
   318                              <1> ;Else, we at an error.
   319                              <1> ;Simply return with CY set and error code in al with extended error info
   320 00001EDD E876FCFFFF          <1>     call getUserRegs
   321 00001EE2 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set the CY flag
   322 00001EEA B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   323 00001EEF 66C705(66C30300)0F- <1>     mov word [errorExCde], errBadDrv     
   323 00001EF7 00                  <1>
   324 00001EF8 C605(65C30300)01    <1>     mov byte [errorLocus], eLocUnk    ;Not appropriate
   325 00001EFF C605(69C30300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   326 00001F06 C605(68C30300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   327 00001F0D C3                  <1>     ret
   328                              <1> .fidDPBFound:
   329 00001F0E 8A4604              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   330 00001F11 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   331 00001F13 8B560F              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   332 00001F16 0FB74E02            <1>     movzx ecx, word [rsi + dpb.wBytesPerSector] ; Save the value in ecx
   333 00001F1A 488D5E23            <1>     lea rbx, qword [rsi + dpb.bMediaDescriptor]
   334 00001F1E E835FCFFFF          <1>     call getUserRegs
   335 00001F23 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   336 00001F27 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   337 00001F2B 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   338 00001F2F C3                  <1>     ret
   339                              <1> 
   340                              <1> setIntVector:      ;ah = 25h
   341                              <1> ;Called with:
   342                              <1> ;   rdx = Pointer to interrupt handler
   343                              <1> ;   al = Interrupt number
   344 00001F30 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   345 00001F32 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   346                              <1> ;First call to get default BIOS segement selector and attribute word
   347 00001F38 88C3                <1>     mov bl, al  ;Set interrupt number 
   348 00001F3A B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   349 00001F3F CD35                <1>     int 35h
   350 00001F41 E812FCFFFF          <1>     call getUserRegs
   351 00001F46 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   352 00001F4A 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   353 00001F4C 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   354                              <1> ;dx preserves the attribute word
   355 00001F4E B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   356 00001F53 CD35                <1>     int 35h
   357 00001F55 E8FEFBFFFF          <1>     call getUserRegs
   358 00001F5A 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Preserve low byte of rax
   359 00001F5C C3                  <1>     ret
   360                              <1> createNewPSP:      ;ah = 26h
   361 00001F5D C3                  <1>     ret
   362                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   363 00001F5E 8805(2DC30300)      <1>     mov byte [verifyFlag], al
   364 00001F64 8025(2DC30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   365 00001F6B C3                  <1>     ret
   366                              <1> getDOSversion:     ;ah = 30h
   367 00001F6C E8E7FBFFFF          <1>     call getUserRegs
   368 00001F71 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   369 00001F73 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   370 00001F76 668B0583E0FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   371 00001F7D 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   372 00001F80 C3                  <1>     ret
   373                              <1> 
   374                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   375                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   376 00001F81 30D2                <1>     xor dl, dl
   377                              <1> getDeviceDPBptr:   ;ah = 32h
   378                              <1> ;On entry: dl = Drive number
   379                              <1> ;On exit: rbx = DPB pointer
   380 00001F83 84D2                <1>     test dl, dl
   381 00001F85 7508                <1>     jnz .gddpskipdefault
   382 00001F87 8A15(8CC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   383 00001F8D FEC2                <1>     inc dl
   384                              <1> .gddpskipdefault:
   385                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   386 00001F8F FECA                <1>     dec dl
   387 00001F91 88D0                <1>     mov al, dl
   388 00001F93 E84DFCFFFF          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   389 00001F98 722C                <1>     jc .bad
   390 00001F9A 488B3D(57C50300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   391 00001FA1 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   392 00001FA7 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   393                              <1>     ;Here ONLY if accessing critical Disk data structures
   394 00001FA9 E862FEFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   395 00001FAE E86DF9FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   396 00001FB3 E862FEFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   397 00001FB8 720C                <1>     jc .bad
   398 00001FBA E899FBFFFF          <1>     call getUserRegs
   399 00001FBF 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   400 00001FC3 30C0                <1>     xor al, al
   401 00001FC5 C3                  <1>     ret
   402                              <1> .bad:
   403 00001FC6 B0FF                <1>     mov al, -1
   404 00001FC8 C3                  <1>     ret
   405                              <1> 
   406                              <1> getInDOSflagPtr:   ;ah = 34h
   407 00001FC9 488D15(63C30300)    <1>     lea rdx, inDOS
   408 00001FD0 E883FBFFFF          <1>     call getUserRegs
   409 00001FD5 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   410 00001FD9 C3                  <1>     ret
   411                              <1> getIntVector:      ;ah = 35h
   412                              <1> ;Called with:
   413                              <1> ;   al = Interrupt Number
   414                              <1> ;Returns:
   415                              <1> ;   rbx = Pointer to interrupt handler
   416 00001FDA 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   417 00001FDC B807F00000          <1>     mov eax, 0F007h
   418 00001FE1 CD35                <1>     int 35h
   419 00001FE3 E870FBFFFF          <1>     call getUserRegs
   420 00001FE8 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   421 00001FEC 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   422 00001FEE C3                  <1>     ret
   423                              <1> 
   424                              <1> getDiskFreeSpace:  ;ah = 36h
   425 00001FEF 84D2                <1>     test dl, dl
   426 00001FF1 7508                <1>     jnz .gdfsSkipdefault
   427 00001FF3 8A15(8CC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   428 00001FF9 FEC2                <1>     inc dl
   429                              <1> .gdfsSkipdefault:
   430 00001FFB FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   431 00001FFD 88D0                <1>     mov al, dl
   432 00001FFF E85CFBFFFF          <1>     call walkDPBchain ;Get in rsi the dpb pointer for drive al
   433 00002004 7331                <1>     jnc .gdfsDPBFound
   434                              <1> ;Else, we at an error.
   435                              <1> ;Simply return with CY set and error code in al with extended error info
   436 00002006 66C705(66C30300)0F- <1>     mov word [errorExCde], errBadDrv     ;Invalid drive error
   436 0000200E 00                  <1>
   437 0000200F C605(65C30300)02    <1>     mov byte [errorLocus], eLocDsk    ;Not appropriate
   438 00002016 C605(69C30300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   439 0000201D C605(68C30300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   440 00002024 E82FFBFFFF          <1>     call getUserRegs
   441 00002029 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   442 0000202E 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set CF=CY
   443 00002036 C3                  <1>     ret
   444                              <1> .gdfsDPBFound:
   445 00002037 8A4604              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   446 0000203A FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   447 0000203C 8B560F              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   448 0000203F 0FB74E02            <1>     movzx ecx, word [rsi + dpb.wBytesPerSector] ;Save the value in ecx
   449 00002043 8B5E31              <1>     mov ebx, dword [rsi + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   450 00002046 E80DFBFFFF          <1>     call getUserRegs
   451 0000204B 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   452 0000204F 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   453 00002053 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   454 00002057 C3                  <1>     ret
   455                              <1> 
   456                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   457 00002058 31C0                <1>     xor eax, eax
   458 0000205A 668705(8AC30300)    <1>     xchg ax, word [errorLevel]
   459 00002061 E8F2FAFFFF          <1>     call getUserRegs
   460 00002066 668906              <1>     mov word [rsi + callerFrame.rax], ax
   461 00002069 C3                  <1>     ret
   462                              <1> 
   463                              <1> getSysVarsPtr:     ;ah = 52h
   464 0000206A 488D15(2CC00300)    <1>     lea rdx, sysVarsPtr
   465 00002071 E8E2FAFFFF          <1>     call getUserRegs
   466 00002076 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   467 0000207A C3                  <1>     ret
   468                              <1> 
   469                              <1> 
   470                              <1> ;AH = 53h - CREATE DPB
   471                              <1> createDPB:         ;generates a DPB from a given BPB
   472                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   473                              <1> ;This is done so that the other fields of the DPB can be recycled
   474                              <1> ;Input: rsi = ptr to the BPB
   475                              <1> ;       rbp = ptr to the DPB
   476                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   477                              <1> ;bMediaDescriptor
   478 0000207B 8A4615              <1>     mov al, byte [rsi + bpb.media]
   479 0000207E 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   480                              <1> ;dFirstFreeCluster
   481 00002081 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   482                              <1> ;dNumberOfFreeClusters
   483 00002088 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   484                              <1> ;wBytesPerSector
   485 0000208F 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   486 00002093 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   487                              <1> ;bMaxSectorInCluster
   488 00002097 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   489 0000209A FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   490 0000209C 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   491                              <1> ;bSectorsPerClusterShift
   492 0000209F FEC0                <1>     inc al
   493 000020A1 30C9                <1>     xor cl, cl
   494                              <1> .cd2:
   495 000020A3 D0E8                <1>     shr al, 1
   496 000020A5 7404                <1>     jz .cd3
   497 000020A7 FEC1                <1>     inc cl
   498 000020A9 EBF8                <1>     jmp short .cd2
   499                              <1> .cd3:
   500 000020AB 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   501                              <1> ;wFAToffset, number of reserved sectors in partition
   502 000020AE 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   503 000020B2 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   504                              <1> ;bNumberOfFATs
   505 000020B6 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   506 000020B9 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   507                              <1> ;wNumberRootDirSectors
   508 000020BC 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   509 000020C0 C1E005              <1>     shl eax, 5  ;Multiply by 32
   510 000020C3 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   511 000020C7 FFC9                <1>     dec ecx
   512 000020C9 01C8                <1>     add eax, ecx
   513 000020CB 31D2                <1>     xor edx, edx    ;Clear for divide
   514 000020CD F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   515 000020CF 66894509            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   516                              <1> ;dFATlength, get the FAT length
   517 000020D3 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   518 000020D7 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   519 000020DA 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   520 000020DC 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   521 000020DF 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   522                              <1> ;Complex cases below...
   523                              <1> ;dClusterHeapOffset, start sector of the data area
   524 000020E2 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   525 000020E6 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   526 000020E9 85C0                <1>     test eax, eax
   527 000020EB 0F44C3              <1>     cmovz eax, ebx
   528                              <1> ;eax = FATsz
   529 000020EE 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   530 000020F2 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   531 000020F5 85DB                <1>     test ebx, ebx
   532 000020F7 0F44D9              <1>     cmovz ebx, ecx 
   533                              <1> ;ebx = TotSec
   534 000020FA 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   535 000020FD 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   536                              <1> .cd4:
   537 000020FF 01C2                <1>     add edx, eax
   538 00002101 FEC9                <1>     dec cl
   539 00002103 75FA                <1>     jnz .cd4
   540 00002105 89D0                <1>     mov eax, edx    ;Store product in eax
   541 00002107 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   542 0000210B 01D0                <1>     add eax, edx
   543 0000210D 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   544 00002111 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   545                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   546                              <1>     ;aka eax = Start sector of the data area in volume
   547 00002113 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   548                              <1> ;dClusterCount
   549 00002116 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   550 00002118 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   551 0000211A 31D2                <1>     xor edx, edx
   552 0000211C BB01000000          <1>     mov ebx, 1
   553 00002121 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   554 00002124 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   555 00002126 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   556 00002128 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   557 0000212A 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   558                              <1> ;dFirstUnitOfRootDir
   559 0000212D 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   560 00002132 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   561 00002135 7709                <1>     ja .cd5
   562                              <1>     ;Else, we need to find the first sector of the root directory
   563                              <1>     ;Get the start sector of data area in volume 
   564                              <1>     ; and sub the number of sectors in the root directory
   565 00002137 8B450B              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   566 0000213A 0FB75D09            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   567 0000213E 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   568                              <1> .cd5:
   569 00002140 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   570                              <1> ;Exit epilogue
   571 00002143 488B1D(D2C30300)    <1>     mov rbx, qword [oldRSP]
   572 0000214A 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   573                              <1>     %if DEBUG && DPBINFO
   574                              <1>     ;Print DPB 
   575                              <1>     debugEnterM
   576                              <1>     push rbp
   577                              <1>     lea rbp, .l0000
   578                              <1>     call debPrintNullString
   579                              <1>     pop rbp
   580                              <1>     call debDPBBPBptr
   581                              <1>     call debMakeDebuggerRespond
   582                              <1>     jmp short .l0001
   583                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   584                              <1> .l0001:
   585                              <1>     debugExitM
   586                              <1>     %endif
   587 0000214C C3                  <1>     ret
   588                              <1> 
   589                              <1> getVerifySetting:  ;ah = 54h
   590 0000214D 8A05(2DC30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   591 00002153 C3                  <1>     ret
   592                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   593 00002154 C3                  <1>     ret
   594                              <1> getExtendedError:  ;ah = 59h
   595 00002155 E8FEF9FFFF          <1>     call getUserRegs
   596 0000215A 668B05(66C30300)    <1>     mov ax, word [errorExCde]
   597 00002161 8A2D(65C30300)      <1>     mov ch, byte [errorLocus]
   598 00002167 8A3D(69C30300)      <1>     mov bh, byte [errorClass]
   599 0000216D 8A1D(68C30300)      <1>     mov bl, byte [errorAction]
   600 00002173 668906              <1>     mov word [rsi + callerFrame.rax], ax
   601 00002176 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   602 0000217A 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   603 0000217D C3                  <1>     ret
   604                              <1> getCritErrorInfo:  ;ah = 5Dh
   605                              <1> networkServices:   ;ah = 5Eh, do nothing
   606                              <1> networkRedirection:;ah = 5Fh, do nothing
   607 0000217E C3                  <1>     ret
   608                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   609                              <1> return:
   610 0000217F C3                  <1>     ret
    32                                  %include "./Source/Kernel/multiplx.asm"
    33                              <1> ;Default multiplexer. Current only installed function is ah=12h
    34                              <1> 
    35                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    36 00002180 80FC12              <1>     cmp ah, 12h
    37 00002183 751A                <1>     jne .exit       ;Exit if not for us
    38 00002185 3C01                <1>     cmp al, mDispTblL / 2
    39 00002187 7316                <1>     jae .exit   ;If above or equal, exit
    40 00002189 53                  <1>     push rbx
    41 0000218A 51                  <1>     push rcx
    42 0000218B 31C9                <1>     xor ecx, ecx
    43 0000218D 488D1D5ADFFFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    44 00002194 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    45 00002196 D1E1                <1>     shl ecx, 1   ;multiply by 2
    46 00002198 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    47 0000219B FFD3                <1>     call rbx
    48 0000219D 59                  <1>     pop rcx
    49 0000219E 5B                  <1>     pop rbx
    50                              <1> .exit:
    51 0000219F 48CF                <1>     iretq
    52                              <1> multiplexTest:
    53 000021A1 B0FF                <1>     mov al, -1
    54 000021A3 C3                  <1>     ret
    33                                  %include "./Source/Misc/int44h.asm"
    34                              <1> critErrorHandler:   ;Int 44h
    35                              <1> ;User Stack in usage here, must be swapped to before this is called
    36                              <1> ;Entered with:  
    37                              <1> ;               AH = Critical Error Bitfield
    38                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    39                              <1> ;               Bit 6 - Reserved
    40                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    41                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    42                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    43                              <1> ;               Bits [2-1] = Affected Disk Error
    44                              <1> ;                     0 0   DOS area
    45                              <1> ;                     0 1   FAT area
    46                              <1> ;                     1 0   Directory area
    47                              <1> ;                     1 1   Data area
    48                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    49                              <1> ;               AL  = Failing drive number if AH[7] = 0
    50                              <1> ;               DIL = Error code for errorMsg
    51                              <1> ;               RSI = EA of Device Header for which device the error occured
    52                              <1> ;Return:
    53                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    54                              <1> ;                  = 1 - Retry the Operation    (Retry)
    55                              <1> ;                  = 2 - Terminate the Program  (Abort)
    56                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    57 000021A4 53                  <1>     push rbx
    58 000021A5 51                  <1>     push rcx
    59 000021A6 52                  <1>     push rdx
    60 000021A7 57                  <1>     push rdi
    61 000021A8 56                  <1>     push rsi
    62 000021A9 FC                  <1>     cld         ;Make String ops go forward
    63                              <1> 
    64 000021AA 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    65 000021AD 488D155E020000      <1>     lea rdx, qword [.crlf]
    66 000021B4 B409                <1>     mov ah, 09h ;Print String
    67 000021B6 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    68                              <1> 
    69 000021B8 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    70 000021BE B90C000000          <1>     mov ecx, 0Ch
    71 000021C3 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    72 000021C5 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    73 000021C8 480FB7FF            <1>     movzx rdi, di
    74 000021CC 4889FA              <1>     mov rdx, rdi    ;Copy error code
    75 000021CF 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    76 000021D3 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    77 000021D6 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    78 000021D9 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    79 000021E0 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    80 000021E4 B409                <1>     mov ah, 09h ;Print String
    81 000021E6 CD41                <1>     int 41h     ;Call DOS to print first part of message
    82                              <1> 
    83 000021E8 488D1505020000      <1>     lea rdx, qword [.readmsg]
    84 000021EF 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    85 000021F6 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    86 000021F9 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    87 000021FD B409                <1>     mov ah, 09h ;Print String
    88 000021FF CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    89                              <1> 
    90 00002201 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    91 00002204 0F85DF000000        <1>     jnz .charError
    92                              <1> ;Disk error continues here
    93 0000220A 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    94 00002211 B409                <1>     mov ah, 09h
    95 00002213 CD41                <1>     int 41h
    96 00002215 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    97 00002217 80C241              <1>     add dl, "A" ;Add ASCII code
    98 0000221A B402                <1>     mov ah, 02h ;Print char in dl
    99 0000221C CD41                <1>     int 41h
   100                              <1> .userInput:
   101 0000221E 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   102 00002225 B409                <1>     mov ah, 09h
   103 00002227 CD41                <1>     int 41h
   104                              <1> ;Abort, Retry, Ignore, Fail is word order
   105                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   106                              <1> .userAbort:
   107                              <1> ;Abort is always an option
   108 00002229 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   109 00002230 B409                <1>     mov ah, 09h
   110 00002232 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   111                              <1> .userRetry:
   112 00002234 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   113 00002237 7416                <1>     jz .userIgnore    ;If clear, dont print message
   114 00002239 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   115 00002240 B409                <1>     mov ah, 09h
   116 00002242 CD41                <1>     int 41h
   117 00002244 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   118 0000224B B409                <1>     mov ah, 09h
   119 0000224D CD41                <1>     int 41h
   120                              <1> .userIgnore:
   121 0000224F F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   122 00002252 7416                <1>     jz .userFail
   123 00002254 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   124 0000225B B409                <1>     mov ah, 09h
   125 0000225D CD41                <1>     int 41h
   126 0000225F 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   127 00002266 B409                <1>     mov ah, 09h
   128 00002268 CD41                <1>     int 41h
   129                              <1> .userFail:
   130 0000226A F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   131 0000226D 7416                <1>     jz .userMsgEnd
   132 0000226F 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   133 00002276 B409                <1>     mov ah, 09h
   134 00002278 CD41                <1>     int 41h
   135 0000227A 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   136 00002281 B409                <1>     mov ah, 09h
   137 00002283 CD41                <1>     int 41h
   138                              <1> .userMsgEnd:
   139 00002285 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   140 0000228C B409                <1>     mov ah, 09h
   141 0000228E CD41                <1>     int 41h
   142                              <1> ;Get user input now 
   143 00002290 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   144 00002292 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   145 00002299 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   146 0000229B CD41                <1>     int 41h ;Get char in al
   147 0000229D 3C61                <1>     cmp al, "a" ;Chack if lowercase
   148 0000229F 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   149 000022A1 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   150                              <1> .uip1:
   151 000022A3 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   152 000022A4 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   153 000022A6 FFC1                <1>     inc ecx
   154 000022A8 81F904000000        <1>     cmp ecx, 4
   155 000022AE 75F3                <1>     jne .uip1
   156 000022B0 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   157                              <1> .validInput:
   158 000022B5 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   159                              <1> ;Now check if the input is permitted
   160 000022B7 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   161 000022B9 7427                <1>     je .cehExit
   162 000022BB 84C0                <1>     test al, al ;Check if 0 => Ignore
   163 000022BD 740F                <1>     je .viIgnore
   164 000022BF 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   165 000022C1 7416                <1>     je .viRetry
   166                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   167 000022C3 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   168 000022C6 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   169 000022CC EB14                <1>     jmp short .cehExit
   170                              <1> .viIgnore:
   171 000022CE F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   172 000022D1 0F8447FFFFFF        <1>     jz .userInput
   173 000022D7 EB09                <1>     jmp short .cehExit
   174                              <1> .viRetry:
   175 000022D9 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   176 000022DC 0F843CFFFFFF        <1>     jz .userInput
   177                              <1> .cehExit:
   178 000022E2 5E                  <1>     pop rsi
   179 000022E3 5F                  <1>     pop rdi
   180 000022E4 5A                  <1>     pop rdx
   181 000022E5 59                  <1>     pop rcx
   182 000022E6 5B                  <1>     pop rbx
   183 000022E7 48CF                <1>     iretq
   184                              <1> .charError:
   185 000022E9 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   186 000022EE 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   187                              <1> .ce1:
   188 000022F5 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   189 000022F6 88C2                <1>     mov dl, al  ;Move char into dl
   190 000022F8 B402                <1>     mov ah, 02h
   191 000022FA CD41                <1>     int 41h ;Print char
   192 000022FC E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   193 000022FE E91BFFFFFF          <1>     jmp .userInput
   194                              <1> 
   195                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   196 00002303 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   196 0000230C 746563742024202020  <1>
   197 00002315 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   197 0000231E 6E6974202420202020  <1>
   198 00002327 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   198 00002330 202420202020202020  <1>
   199 00002339 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   199 00002342 6F6D6D616E64202420  <1>
   200 0000234B 446174612024202020- <1>             db "Data $            "       ;Error 4
   200 00002354 202020202020202020  <1>
   201 0000235D 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   201 00002366 737420242020202020  <1>
   202 0000236F 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   202 00002378 202020202020202020  <1>
   203 00002381 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   203 0000238A 656469612024202020  <1>
   204 00002393 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   204 0000239C 7420466F756E642024  <1>
   205 000023A5 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   205 000023AE 706572202420202020  <1>
   206 000023B7 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   206 000023C0 6C7420242020202020  <1>
   207 000023C9 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   207 000023D2 742024202020202020  <1>
   208 000023DB 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   208 000023E4 61696C757265202420  <1>
   209                              <1> 
   210 000023ED 64726976652024      <1> .drive      db "drive $"
   211 000023F4 6572726F7220726561- <1> .readmsg    db "error reading $"
   211 000023FD 64696E672024        <1>
   212 00002403 6572726F7220777269- <1> .writemsg   db "error writing $"
   212 0000240C 74696E672024        <1>
   213 00002412 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   214 00002415 41626F727424        <1> .abortmsg   db "Abort$" 
   215 0000241B 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   216 00002422 526574727924        <1> .retrymsg   db "Retry$"
   217 00002428 4661696C24          <1> .failmsg    db "Fail$"
   218 0000242D 2C2024              <1> .betweenMsg db ", $"
   219 00002430 3F2024              <1> .endMsg     db "? $"
   220 00002433 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    34                                  %include "./Source/Drivers/drvData.asm"
    35                              <1> ;-----------------------------------:
    36                              <1> ;          Driver routines          :
    37                              <1> ;-----------------------------------:
    38                              <1> drivers:
    39                              <1> conHdr:
    40 00002437 [5924000000000000]  <1>     dq auxHdr
    41 0000243F 1308                <1>     dw 0813h
    42 00002441 [D725000000000000]  <1>     dq commonStrat
    43 00002449 [E625000000000000]  <1>     dq conDriver
    44 00002451 434F4E2020202020    <1>     db "CON     "
    45                              <1> auxHdr:
    46 00002459 [7B24000000000000]  <1>     dq prnHdr
    47 00002461 0080                <1>     dw 08000h
    48 00002463 [D725000000000000]  <1>     dq commonStrat
    49 0000246B [BC28000000000000]  <1>     dq com1Intr
    50 00002473 4155582020202020    <1>     db "AUX     "
    51                              <1> prnHdr:
    52 0000247B [9D24000000000000]  <1>     dq clkHdr
    53 00002483 40A0                <1>     dw 0A040h
    54 00002485 [DF25000000000000]  <1>     dq nulStrat
    55 0000248D [E525000000000000]  <1>     dq nulIntr
    56 00002495 50524E2020202020    <1>     db "PRN     "
    57                              <1> clkHdr:
    58 0000249D [BF24000000000000]  <1>     dq msdHdr
    59 000024A5 0880                <1>     dw 08008h
    60 000024A7 [D725000000000000]  <1>     dq commonStrat
    61 000024AF [2F27000000000000]  <1>     dq clkDriver
    62 000024B7 434C4F434B242020    <1>     db "CLOCK$  "
    63                              <1> msdHdr:
    64 000024BF [E124000000000000]  <1>     dq com1Hdr
    65 000024C7 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    66 000024C9 [D725000000000000]  <1>     dq commonStrat
    67 000024D1 [612A000000000000]  <1>     dq msdDriver
    68 000024D9 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    69                              <1> com1Hdr:
    70 000024E1 [0325000000000000]  <1>     dq com2Hdr
    71 000024E9 0080                <1>     dw 08000h
    72 000024EB [D725000000000000]  <1>     dq commonStrat
    73 000024F3 [BC28000000000000]  <1>     dq com1Intr
    74 000024FB 434F4D3120202020    <1>     db "COM1    "
    75                              <1> com2Hdr:
    76 00002503 [2525000000000000]  <1>     dq com3Hdr
    77 0000250B 0080                <1>     dw 08000h
    78 0000250D [D725000000000000]  <1>     dq commonStrat
    79 00002515 [C528000000000000]  <1>     dq com2Intr
    80 0000251D 434F4D3220202020    <1>     db "COM2    "
    81                              <1> com3Hdr:
    82 00002525 [4725000000000000]  <1>     dq com4Hdr
    83 0000252D 0080                <1>     dw 08000h
    84 0000252F [D725000000000000]  <1>     dq commonStrat
    85 00002537 [CE28000000000000]  <1>     dq com3Intr
    86 0000253F 434F4D3320202020    <1>     db "COM3    "
    87                              <1> com4Hdr:
    88 00002547 [6925000000000000]  <1>     dq lpt1Hdr
    89 0000254F 0080                <1>     dw 08000h
    90 00002551 [D725000000000000]  <1>     dq commonStrat
    91 00002559 [D728000000000000]  <1>     dq com4Intr
    92 00002561 434F4D3420202020    <1>     db "COM4    "
    93                              <1> lpt1Hdr:
    94 00002569 [8B25000000000000]  <1>     dq lpt2Hdr
    95 00002571 40A0                <1>     dw 0A040h
    96 00002573 [DF25000000000000]  <1>     dq nulStrat
    97 0000257B [E525000000000000]  <1>     dq nulIntr
    98 00002583 4C50543120202020    <1>     db "LPT1    "
    99                              <1> lpt2Hdr:
   100 0000258B [AD25000000000000]  <1>     dq lpt3Hdr
   101 00002593 40A0                <1>     dw 0A040h
   102 00002595 [DF25000000000000]  <1>     dq nulStrat
   103 0000259D [E525000000000000]  <1>     dq nulIntr
   104 000025A5 4C50543220202020    <1>     db "LPT2    "
   105                              <1> lpt3Hdr:
   106 000025AD FFFFFFFFFFFFFFFF    <1>     dq -1
   107 000025B5 40A0                <1>     dw 0A040h
   108 000025B7 [DF25000000000000]  <1>     dq nulStrat
   109 000025BF [E525000000000000]  <1>     dq nulIntr
   110 000025C7 4C50543320202020    <1>     dq "LPT3    "
   111 000025CF 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    35                                  %include "./Source/Drivers/charDrv.asm"
    36                              <1> commonStrat:
    37                              <1> ;DOS calls this function with rbx=Ptr to request header
    38 000025D7 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    39 000025DE C3                  <1>     ret
    40                              <1> nulStrat:
    41 000025DF 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    42                              <1> nulIntr:
    43 000025E5 C3                  <1>     ret
    44                              <1> conDriver:
    45 000025E6 50                  <1>     push rax
    46 000025E7 53                  <1>     push rbx
    47 000025E8 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    48 000025EF B003                <1>     mov al, 03h ;Unknown Command
    49 000025F1 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    50 000025F5 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    51                              <1> 
    52 000025F7 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    53 000025FA 3C04                <1>     cmp al, 4
    54 000025FC 743D                <1>     jz .conRead
    55 000025FE 3C05                <1>     cmp al, 5
    56 00002600 747F                <1>     jz .conNondestructiveRead
    57 00002602 3C06                <1>     cmp al, 6
    58 00002604 0F84A8000000        <1>     jz .conInputStatus
    59 0000260A 3C07                <1>     cmp al, 7
    60 0000260C 0F84B0000000        <1>     jz .conFlushInputBuffers
    61 00002612 3C08                <1>     cmp al, 8
    62 00002614 0F84CA000000        <1>     jz .conWrite
    63 0000261A 3C09                <1>     cmp al, 9
    64 0000261C 0F84C2000000        <1>     jz .conWrite
    65 00002622 3C0A                <1>     cmp al, 0Ah
    66 00002624 0F84E3000000        <1>     jz .conOutputStatus
    67 0000262A EB06                <1>     jmp short .conExit  ;All other valid functions return done
    68                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    69 0000262C B480                <1>     mov ah, 80h ;Set error bit
    70 0000262E 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    71                              <1> .conExit:
    72 00002632 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    73 00002638 5B                  <1>     pop rbx
    74 00002639 58                  <1>     pop rax
    75 0000263A C3                  <1>     ret
    76                              <1> .conRead:    ;Function 4
    77 0000263B B005                <1>     mov al, 05h ;Bad request structure length?
    78 0000263D 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    79 00002640 75EA                <1>     jne .conWriteErrorCode
    80                              <1> 
    81 00002642 57                  <1>     push rdi
    82 00002643 51                  <1>     push rcx
    83 00002644 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    84 00002648 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    85                              <1> .cre1:
    86 0000264A 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    87 0000264D 741C                <1>     je .cre2
    88 0000264F 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    89 00002656 751A                <1>     jnz .cre3   ;No, get the buffer value
    90 00002658 31C0                <1>     xor eax, eax
    91 0000265A CD36                <1>     int 36h
    92                              <1> .cre11:
    93 0000265C AA                  <1>     stosb
    94 0000265D 84C0                <1>     test al, al ;Was the ascii code stored 0?
    95 0000265F 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    96 00002661 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    97                              <1> .cre12:
    98 00002667 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    99 00002669 EBDF                <1>     jmp short .cre1
   100                              <1> .cre2:
   101 0000266B 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   102 0000266E 59                  <1>     pop rcx
   103 0000266F 5F                  <1>     pop rdi
   104 00002670 EBC0                <1>     jmp short .conExit
   105                              <1> .cre3:
   106 00002672 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   107 00002678 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   108 0000267F EBDB                <1>     jmp short .cre11
   109                              <1> 
   110                              <1> .conNondestructiveRead:  ;Function 5
   111 00002681 B005                <1>     mov al, 05h ;Bad request structure length?
   112 00002683 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   113 00002686 75A4                <1>     jne .conWriteErrorCode
   114 00002688 803D8E00000000      <1>     cmp byte [.conBuf], 0
   115 0000268F 7519                <1>     jnz .cnr2
   116 00002691 B401                <1>     mov ah, 01h     ;Get key if exists
   117 00002693 CD36                <1>     int 36h
   118 00002695 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   119                              <1>     ;Keystroke available
   120                              <1> .cnr0:
   121 00002697 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   122 0000269A E993FFFFFF          <1>     jmp .conExit
   123                              <1> .cnr1: ;No keystroke available
   124 0000269F 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   125 000026A5 E988FFFFFF          <1>     jmp .conExit
   126                              <1> .cnr2:
   127 000026AA 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   128 000026B0 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   129                              <1> 
   130                              <1> .conInputStatus:         ;Function 6
   131 000026B2 B005                <1>     mov al, 05h ;Bad request structure length?
   132 000026B4 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   133 000026B7 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   134 000026BD E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   135                              <1> 
   136                              <1> .conFlushInputBuffers:   ;Function 7
   137 000026C2 B005                <1>     mov al, 05h ;Bad request structure length?
   138 000026C4 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   139 000026C7 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   140 000026CD C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   141                              <1> .cfib0:
   142 000026D4 B401                <1>     mov ah, 01      ;Get buffer status
   143 000026D6 CD36                <1>     int 36h
   144 000026D8 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   145 000026DE 30E4                <1>     xor ah, ah
   146 000026E0 CD36                <1>     int 36h ;Read key to flush from buffer
   147 000026E2 EBF0                <1>     jmp short .cfib0
   148                              <1> 
   149                              <1> .conWrite:   ;Function 8 and 9
   150 000026E4 B005                <1>     mov al, 05h ;Bad request structure length?
   151 000026E6 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   152 000026E9 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   153                              <1> 
   154 000026EF 56                  <1>     push rsi
   155 000026F0 51                  <1>     push rcx
   156 000026F1 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   157 000026F5 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   158                              <1> .cw1: 
   159 000026F7 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   160 000026FA 7407                <1>     je .cw2
   161 000026FC AC                  <1>     lodsb   ;Get char into al, and inc rsi
   162 000026FD CD49                <1>     int 49h ;Fast print char
   163 000026FF FFC1                <1>     inc ecx
   164 00002701 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   165                              <1> .cw2:
   166 00002703 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   167 00002706 59                  <1>     pop rcx
   168 00002707 5E                  <1>     pop rsi
   169 00002708 E925FFFFFF          <1>     jmp .conExit
   170                              <1> .conOutputStatus:   ;Function 0Ah
   171 0000270D B005                <1>     mov al, 05h ;Bad request structure length?
   172 0000270F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   173 00002712 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   174 00002718 E915FFFFFF          <1>     jmp .conExit
   175                              <1> 
   176 0000271D 00                  <1> .conBuf db 0    ;Single byte buffer
   177                              <1> fastOutput:         ;This CON driver supports Int 49h
   178                              <1> ;Called with char to transfer in al
   179 0000271E 50                  <1>     push rax
   180 0000271F B40E                <1>     mov ah, 0Eh
   181 00002721 CD30                <1>     int 30h
   182 00002723 58                  <1>     pop rax
   183 00002724 48CF                <1>     iretq
   184                              <1> ctrlBreak:
   185                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   186 00002726 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   187 0000272D 48CF                <1>     iretq
   188                              <1> 
   189                              <1> clkDriver:
   190 0000272F 50                  <1>     push rax
   191 00002730 53                  <1>     push rbx
   192 00002731 51                  <1>     push rcx
   193 00002732 52                  <1>     push rdx
   194 00002733 56                  <1>     push rsi
   195 00002734 55                  <1>     push rbp
   196 00002735 488B1D93FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   197 0000273C B003                <1>     mov al, 03h ;Unknown Command
   198 0000273E 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   199 00002742 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   200                              <1> 
   201 00002744 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   202 00002747 3C04                <1>     cmp al, 04h
   203 00002749 7437                <1>     jz .clkRead
   204 0000274B 3C06                <1>     cmp al, 06h
   205 0000274D 0F8494000000        <1>     jz .clkInputStatus
   206 00002753 3C07                <1>     cmp al, 07h
   207 00002755 0F8498000000        <1>     jz .clkFlushInputBuffers
   208 0000275B 3C08                <1>     cmp al, 08h
   209 0000275D 0F84A0000000        <1>     jz .clkWrite
   210 00002763 3C09                <1>     cmp al, 09h
   211 00002765 0F8498000000        <1>     jz .clkWrite
   212 0000276B EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   213                              <1> .clkNotFunctioning:
   214 0000276D B002                <1>     mov al, 02h ;Device not ready error
   215                              <1> .clkWriteErrorCode:
   216 0000276F B480                <1>     mov ah, 80h ;Set error bit
   217 00002771 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   218                              <1> .clkExit:
   219 00002775 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   220 0000277B 5D                  <1>     pop rbp
   221 0000277C 5E                  <1>     pop rsi
   222 0000277D 5A                  <1>     pop rdx
   223 0000277E 59                  <1>     pop rcx
   224 0000277F 5B                  <1>     pop rbx
   225 00002780 58                  <1>     pop rax
   226 00002781 C3                  <1>     ret
   227                              <1> 
   228                              <1> .clkRead:           ;Function 4
   229 00002782 B005                <1>     mov al, 05h ;Bad request structure length?
   230 00002784 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   231 00002787 75E6                <1>     jne .clkWriteErrorCode
   232                              <1> 
   233 00002789 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   234 0000278C 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   235 00002790 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   236 00002797 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   237 0000279B 30E4                <1>     xor ah, ah
   238 0000279D CD3A                <1>     int 3Ah         ;Read the system timer
   239 0000279F 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   240 000027A1 740D                <1>     jz .clkr1       ;Nope, now just time 
   241 000027A3 30E4                <1>     xor ah, ah
   242                              <1>     ;This works as al should keep count of the # of days passed since last read
   243 000027A5 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   244 000027A9 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   245                              <1> .clkr1:
   246 000027B0 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   247 000027B3 0FB7D2              <1>     movzx edx, dx
   248 000027B6 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   249 000027B8 89D0                <1>     mov eax, edx
   250 000027BA 31D2                <1>     xor edx, edx
   251 000027BC 89D8                <1>     mov eax, ebx
   252 000027BE B944040000          <1>     mov ecx, 1092   
   253 000027C3 F7F1                <1>     div ecx
   254 000027C5 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   255 000027C8 89D0                <1>     mov eax, edx    ;Get remainder in eax
   256 000027CA 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   257 000027CE 31D2                <1>     xor edx, edx
   258 000027D0 B95B000000          <1>     mov ecx, 91 ;5*18.2
   259 000027D5 F7F1                <1>     div ecx
   260 000027D7 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   261 000027DA 89D0                <1>     mov eax, edx    ;Get remainder in eax
   262                              <1>     ;lea eax, dword [eax + 4*eax]
   263                              <1>     ;add eax, edx    ;Essentially multiply by 6
   264 000027DC 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   265 000027DF 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   266 000027E2 E98EFFFFFF          <1>     jmp .clkExit
   267                              <1> 
   268                              <1> .clkInputStatus:    ;Function 6
   269                              <1> ;Always return ready
   270 000027E7 B005                <1>     mov al, 05h ;Bad request structure length?
   271 000027E9 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   272 000027EC 7581                <1>     jne .clkWriteErrorCode
   273 000027EE E982FFFFFF          <1>     jmp .clkExit
   274                              <1> .clkFlushInputBuffers:  ;Function 7
   275                              <1> ;Always return done immediately
   276 000027F3 B005                <1>     mov al, 05h ;Bad request structure length?
   277 000027F5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   278 000027F8 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   279 000027FE E972FFFFFF          <1>     jmp .clkExit
   280                              <1> 
   281                              <1> .clkWrite:          ;Functions 8 and 9
   282 00002803 B005                <1>     mov al, 05h ;Bad request structure length?
   283 00002805 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   284 00002808 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   285                              <1> 
   286 0000280E 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   287 00002811 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   288 00002815 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   289 00002819 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   290                              <1> 
   291 00002820 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   292 00002822 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   293 00002826 B105                <1>     mov cl, 5
   294 00002828 F6F1                <1>     div cl          ;Divide al by 5
   295 0000282A 30E4                <1>     xor ah, ah      ;Remove the remainder
   296 0000282C 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   297                              <1> ;Using the decimal part of this formula for the low count
   298                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   299 0000282E 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   300 00002831 B912000000          <1>     mov ecx, 18
   301 00002836 F7E1                <1>     mul ecx  
   302 00002838 01C3                <1>     add ebx, eax
   303                              <1> 
   304 0000283A 31D2                <1>     xor edx, edx
   305 0000283C 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   306 00002840 B944040000          <1>     mov ecx, 1092
   307 00002845 F7E1                <1>     mul ecx
   308 00002847 01C3                <1>     add ebx, eax
   309 00002849 89DA                <1>     mov edx, ebx    ;edx now has low count
   310 0000284B 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   311 0000284F B401                <1>     mov ah, 01h     ;Set the system time
   312 00002851 CD3A                <1>     int 3Ah
   313                              <1> 
   314 00002853 4889F3              <1>     mov rbx, rsi
   315 00002856 E91AFFFFFF          <1>     jmp .clkExit
   316                              <1> 
   317                              <1> .clkBCDtoHex:
   318                              <1> ;Converts a BCD value to a Hex byte
   319                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   320 0000285B 51                  <1>     push rcx
   321 0000285C 0FB6C0              <1>     movzx eax, al   ;Zero extend
   322 0000285F 89C1                <1>     mov ecx, eax    ;Save al in ecx
   323 00002861 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   324 00002866 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   325 0000286C C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   326                              <1> .cbth0:
   327 0000286F 050A000000          <1>     add eax, 10
   328 00002874 E2F9                <1>     loop .cbth0
   329 00002876 59                  <1>     pop rcx
   330 00002877 C3                  <1>     ret
   331                              <1> 
   332                              <1> .clkHexToBCD:
   333                              <1> ;Converts a Hex byte into two BCD digits
   334                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   335 00002878 51                  <1>     push rcx
   336 00002879 0FB6C0              <1>     movzx eax, al   ;Zero extend
   337 0000287C 31C9                <1>     xor ecx, ecx
   338                              <1> .chtb0:
   339 0000287E 3D0A000000          <1>     cmp eax, 10
   340 00002883 7209                <1>     jb .chtb1
   341 00002885 2D0A000000          <1>     sub eax, 10
   342 0000288A FFC1                <1>     inc ecx
   343 0000288C EBF0                <1>     jmp short .chtb0
   344                              <1> .chtb1:
   345 0000288E C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   346 00002891 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   347 00002893 59                  <1>     pop rcx
   348 00002894 C3                  <1>     ret
   349 00002895 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   350                              <1> ;When counting the number of days, first compute the number of years since
   351                              <1> ; 1980 and your year. 
   352                              <1> ;Then, using the table below, find the number of leap years between 1980
   353                              <1> ; and (YourYear - 1). 
   354                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   355                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   356                              <1> ;Use the months table to get the number of days in a normal month as leap 
   357                              <1> ; years are added using the previous comment.
   358                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   359                              <1> ; a leap year using the table. If it is, add an extra day.
   360                              <1> .clkLeapYears:
   361 00002897 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   361 000028A0 24282C30            <1>
   362 000028A4 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   362 000028AD 585C60              <1>
   363                              <1> .clkMonths:
   364 000028B0 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   364 000028B9 1F1E1F              <1>
   365                              <1> ;COM Driver headers and main interrupt strat
   366                              <1> com1Intr:
   367 000028BC C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   368 000028C3 EB19                <1>     jmp short comIntr
   369                              <1> com2Intr:
   370 000028C5 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   371 000028CC EB10                <1>     jmp short comIntr
   372                              <1> com3Intr:
   373 000028CE C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   374 000028D5 EB07                <1>     jmp short comIntr
   375                              <1> com4Intr:
   376 000028D7 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   377                              <1> comIntr:
   378 000028DE 50                  <1>     push rax
   379 000028DF 53                  <1>     push rbx
   380 000028E0 51                  <1>     push rcx
   381 000028E1 52                  <1>     push rdx
   382 000028E2 56                  <1>     push rsi
   383 000028E3 57                  <1>     push rdi
   384 000028E4 488B1DE4FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   385 000028EB B003                <1>     mov al, 03h ;Unknown Command
   386 000028ED 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   387 000028F1 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   388                              <1> 
   389 000028F3 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   390 000028F6 3C04                <1>     cmp al, 4   ;Read Character(s)
   391 000028F8 7462                <1>     jz .comRead
   392 000028FA 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   393 000028FC 0F849B000000        <1>     jz .comNondestructiveRead   
   394 00002902 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   395 00002904 0F8484000000        <1>     jz .comReadInputStatus
   396 0000290A 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   397 0000290C 0F84B9000000        <1>     jz .comFlushInputBuffers
   398 00002912 3C08                <1>     cmp al, 8
   399 00002914 0F84DB000000        <1>     jz .comWrite
   400 0000291A 3C09                <1>     cmp al, 9
   401 0000291C 0F84D3000000        <1>     jz .comWrite
   402 00002922 3C0A                <1>     cmp al, 0Ah
   403 00002924 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   404 0000292A EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   405                              <1> .comErrorNoCount:
   406 0000292C B002                <1>     mov al, 02h ;Unknown device
   407 0000292E EB19                <1>     jmp short .comWriteErrorCode
   408                              <1> .comReadError:
   409 00002930 BA0B000000          <1>     mov edx, 0Bh
   410                              <1> .comWriteError:
   411 00002935 BA0A000000          <1>     mov edx, 0Ah
   412                              <1> .comError:
   413 0000293A 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   414 0000293D B902000000          <1>     mov ecx, 02h    ;Unknown device
   415 00002942 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   416 00002944 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   417 00002947 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   418                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   419 00002949 B480                <1>     mov ah, 80h ;Set error bit
   420 0000294B 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   421                              <1> .comExit:
   422 0000294F 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   423 00002955 5F                  <1>     pop rdi
   424 00002956 5E                  <1>     pop rsi
   425 00002957 5A                  <1>     pop rdx
   426 00002958 59                  <1>     pop rcx
   427 00002959 5B                  <1>     pop rbx
   428 0000295A 58                  <1>     pop rax
   429 0000295B C3                  <1>     ret
   430                              <1> 
   431                              <1> .comRead:
   432 0000295C B005                <1>     mov al, 05h ;Bad request structure length?
   433 0000295E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   434 00002961 75E6                <1>     jne .comWriteErrorCode
   435                              <1> 
   436 00002963 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   437 00002967 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   438                              <1> .cr1:
   439 00002969 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   440 0000296C 741B                <1>     je .cre2
   441                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   442 0000296E B802000000          <1>     mov eax, 02h    ;Recieve 
   443 00002973 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   444 00002979 6698                <1>     cbw     ;Zero extend to upper byte
   445 0000297B CD34                <1>     int 34h ;Recieve Char
   446 0000297D 72BB                <1>     jc .comError
   447 0000297F 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   448 00002982 74EA                <1>     je .cr11
   449 00002984 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   450 00002985 FFC1                <1>     inc ecx
   451 00002987 EBE0                <1>     jmp short .cr1
   452                              <1> .cre2:
   453 00002989 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   454 0000298C EBC1                <1>     jmp short .comExit
   455                              <1> 
   456                              <1> .comReadInputStatus:
   457 0000298E B005                <1>     mov al, 05h ;Bad request structure length?
   458 00002990 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   459 00002993 75B4                <1>     jne .comWriteErrorCode
   460 00002995 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   461 0000299B EBB2                <1>     jmp short .comExit
   462                              <1> 
   463                              <1> .comNondestructiveRead:
   464                              <1> ;Acts like a "read one character if there is one" function
   465 0000299D B005                <1>     mov al, 05h ;Bad request structure length?
   466 0000299F 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   467 000029A2 75A5                <1>     jne .comWriteErrorCode
   468                              <1> .cndr1:
   469 000029A4 B802000000          <1>     mov eax, 02h    ;Recieve 
   470 000029A9 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   471 000029AF 6698                <1>     cbw     ;Zero extend to upper byte
   472 000029B1 CD34                <1>     int 34h ;Recieve Char
   473 000029B3 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   474 000029B9 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   475 000029BC 7405                <1>     je .cndr2
   476 000029BE 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   477 000029C1 EB8C                <1>     jmp short .comExit
   478                              <1> .cndr2:
   479 000029C3 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   480 000029C9 EB84                <1>     jmp short .comExit
   481                              <1> 
   482                              <1> .comFlushInputBuffers:
   483 000029CB B005                <1>     mov al, 05h ;Bad request structure length?
   484 000029CD 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   485 000029D0 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   486                              <1> .cfib0:
   487 000029D6 8A1584000000        <1>     mov dl, byte [.comDevice]
   488 000029DC 6698                <1>     cbw
   489 000029DE B802000000          <1>     mov eax, 02h    ;Recieve
   490 000029E3 CD34                <1>     int 34h
   491 000029E5 0F8241FFFFFF        <1>     jc .comErrorNoCount
   492 000029EB 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   493 000029EE 75E6                <1>     jne .cfib0
   494 000029F0 E95AFFFFFF          <1>     jmp .comExit
   495                              <1> 
   496                              <1> .comWrite:
   497 000029F5 B005                <1>     mov al, 05h ;Bad request structure length?
   498 000029F7 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   499 000029FA 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   500                              <1> 
   501 00002A00 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   502 00002A04 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   503                              <1> .cw1: 
   504 00002A06 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   505 00002A09 7417                <1>     je .cw2
   506 00002A0B AC                  <1>     lodsb   ;Get char into al, and inc rsi
   507 00002A0C B401                <1>     mov ah, 01h ;Move function number into ah
   508 00002A0E 8A154C000000        <1>     mov dl, byte [.comDevice]
   509 00002A14 6698                <1>     cbw     ;Zero extend to upper byte
   510 00002A16 CD34                <1>     int 34h ;Transmit char
   511 00002A18 0F821CFFFFFF        <1>     jc .comError
   512 00002A1E FFC1                <1>     inc ecx
   513 00002A20 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   514                              <1> .cw2:
   515 00002A22 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   516 00002A25 E925FFFFFF          <1>     jmp .comExit
   517                              <1> 
   518                              <1> .comOutputStatus:
   519                              <1> ;Read MODEM status
   520 00002A2A B005                <1>     mov al, 05h ;Bad request structure length?
   521 00002A2C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   522 00002A2F 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   523                              <1> 
   524 00002A35 8A1525000000        <1>     mov dl, byte [.comDevice]
   525 00002A3B 6698                <1>     cbw     ;Zero extend to upper byte
   526 00002A3D B403                <1>     mov ah, 03h     ;Get status
   527 00002A3F CD34                <1>     int 34h
   528 00002A41 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   529 00002A47 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   530 00002A4C C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   531 00002A4F F7D0                <1>     not eax      ;Bitwise inversion
   532 00002A51 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   533 00002A56 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   534 00002A5B E9EFFEFFFF          <1>     jmp .comExit
   535 00002A60 00                  <1> .comDevice   db 0
    36                                  %include "./Source/Drivers/diskDrv.asm"
    37                              <1> msdDriver:
    38 00002A61 50                  <1>     push rax
    39 00002A62 53                  <1>     push rbx
    40 00002A63 51                  <1>     push rcx
    41 00002A64 52                  <1>     push rdx
    42 00002A65 56                  <1>     push rsi
    43 00002A66 57                  <1>     push rdi
    44 00002A67 55                  <1>     push rbp
    45 00002A68 4150                <1>     push r8
    46 00002A6A 488B1D5EFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    47 00002A71 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    48 00002A75 B003                <1>     mov al, drvBadCmd
    49 00002A77 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    50 00002A7D B001                <1>     mov al, drvBadUnit 
    51 00002A7F 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    52 00002A83 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    53 00002A89 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    54 00002A90 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    55 00002A94 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    56 00002A97 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    57 00002A9B 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    58 00002A9F D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    59 00002AA1 488D0D9A000000      <1>     lea rcx, .msdTable
    60 00002AA8 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    61 00002AAC 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    62 00002AAE 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    63 00002AB0 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    64 00002AB3 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    65                              <1> .msdDriverExit:
    66 00002AB5 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    67 00002ABB 4158                <1>     pop r8
    68 00002ABD 5D                  <1>     pop rbp
    69 00002ABE 5F                  <1>     pop rdi
    70 00002ABF 5E                  <1>     pop rsi
    71 00002AC0 5A                  <1>     pop rdx
    72 00002AC1 59                  <1>     pop rcx
    73 00002AC2 5B                  <1>     pop rbx
    74 00002AC3 58                  <1>     pop rax
    75 00002AC4 C3                  <1>     ret
    76                              <1> 
    77                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    78 00002AC5 4889FB              <1>     mov rbx, rdi
    79 00002AC8 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    80 00002ACB 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    81 00002ACD 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    82                              <1> ;Now fall through to general error
    83                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    84 00002AD0 B401                <1>     mov ah, 01h
    85 00002AD2 CD33                <1>     int 33h ;Read status of last operation
    86 00002AD4 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    87 00002AD7 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    88 00002AD9 7460                <1>     je .msdWriteErrorCode 
    89 00002ADB B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    90 00002ADD 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    91 00002AE0 7459                <1>     je .msdWriteErrorCode 
    92 00002AE2 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    93 00002AE5 7454                <1>     je .msdWriteErrorCode
    94                              <1> ;Device Not Ready
    95 00002AE7 B002                <1>     mov al, 02h  ;Device not ready code
    96 00002AE9 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    97 00002AEC 744D                <1>     je .msdWriteErrorCode
    98 00002AEE 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    99 00002AF2 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   100                              <1> ;Write Protected
   101 00002AF6 30C0                <1>     xor al, al
   102 00002AF8 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   103 00002AFD 743C                <1>     je .msdWriteErrorCode
   104                              <1> ;CRC Error
   105 00002AFF B004                <1>     mov al, 04h     ;CRC error code
   106 00002B01 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   107 00002B06 7433                <1>     je .msdWriteErrorCode
   108 00002B08 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   109 00002B0D 742C                <1>     je .msdWriteErrorCode
   110 00002B0F 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   111 00002B14 7425                <1>     je .msdWriteErrorCode
   112                              <1> ;Seek Error
   113 00002B16 B006                <1>     mov al, 06h     ;Seek error code
   114 00002B18 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   115 00002B1B 741E                <1>     je .msdWriteErrorCode
   116                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   117                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   118 00002B1D B007                <1>     mov al, 07h
   119 00002B1F 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   120 00002B22 7417                <1>     je .msdWriteErrorCode
   121                              <1> ;Sector Not Found
   122 00002B24 B008                <1>     mov al, 08h     ;Sector not found code
   123 00002B26 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   124 00002B29 7410                <1>     je .msdWriteErrorCode
   125                              <1> ;Write faults
   126 00002B2B B00A                <1>     mov al, 0Ah     ;Write fault
   127 00002B2D 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   128 00002B30 7409                <1>     je .msdWriteErrorCode
   129                              <1> ;Read faults
   130 00002B32 B00B                <1>     mov al, 0Bh     ;Read fault
   131 00002B34 80F911              <1>     cmp cl, 11h     ;Read error
   132 00002B37 7402                <1>     je .msdWriteErrorCode
   133                              <1> ;General Errors
   134 00002B39 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   135                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   136 00002B3B B480                <1>     mov ah, 80h ;Set error bit
   137 00002B3D 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   138 00002B41 C3                  <1>     ret ;Return to set done bit
   139                              <1> .msdTable:
   140 00002B42 0000                <1>     dw 0                            ;Function 0
   141 00002B44 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   142 00002B46 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   143 00002B48 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   144 00002B4A 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   145 00002B4C 0000                <1>     dw 0                            ;Function 5
   146 00002B4E 0000                <1>     dw 0                            ;Function 6
   147 00002B50 0000                <1>     dw 0                            ;Function 7
   148 00002B52 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   149 00002B54 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   150 00002B56 0000                <1>     dw 0                            ;Function 10
   151 00002B58 0000                <1>     dw 0                            ;Function 11
   152 00002B5A C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   153 00002B5C D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   154 00002B5E ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   155 00002B60 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   156 00002B62 0000                <1>     dw 0                            ;Function 16
   157 00002B64 0000                <1>     dw 0                            ;Function 17
   158 00002B66 0000                <1>     dw 0                            ;Function 18
   159 00002B68 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   160 00002B6A 0000                <1>     dw 0                            ;Function 20
   161 00002B6C 0000                <1>     dw 0                            ;Function 21
   162 00002B6E 0000                <1>     dw 0                            ;Function 22
   163 00002B70 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   164 00002B72 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   165                              <1> 
   166                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   167                              <1> .msdMedChk:          ;Function 1
   168 00002B74 B005                <1>     mov al, 05h ;Bad request structure length
   169 00002B76 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   170 00002B79 75C0                <1>     jne .msdWriteErrorCode
   171                              <1> 
   172 00002B7B 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   173 00002B80 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   174 00002B87 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   175 00002B8A F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   176 00002B8D 753F                <1>     jnz .mmcNoChange
   177                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   178 00002B8F B416                <1>     mov ah, 16h 
   179 00002B91 CD33                <1>     int 33h
   180 00002B93 0F8237FFFFFF        <1>     jc .msdGenDiskError
   181 00002B99 80FC80              <1>     cmp ah, 80h
   182 00002B9C 740E                <1>     je .mmcNoChangeLine
   183 00002B9E 80FC86              <1>     cmp ah, 86h
   184 00002BA1 7409                <1>     je .mmcNoChangeLine
   185 00002BA3 84E4                <1>     test ah, ah ;No change?
   186 00002BA5 7427                <1>     jz .mmcNoChange
   187 00002BA7 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   188 00002BAA 750D                <1>     jnz .mmcChange
   189                              <1> ;If nothing, fall through and test manually, should never happen though
   190                              <1> .mmcNoChangeLine:
   191                              <1> ;Now we test Media Descriptor
   192 00002BAC 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   193 00002BB1 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   194 00002BB4 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   195 00002BB7 7410                <1>     je .mmcUnsure
   196                              <1> .mmcChange:
   197 00002BB9 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   198 00002BBD 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   199 00002BC4 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   200                              <1>     ;Check here if there were any open handles on the device when it was changed
   201 00002BC8 C3                  <1>     ret
   202                              <1> .mmcUnsure:
   203 00002BC9 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   204 00002BCD C3                  <1>     ret
   205                              <1> .mmcNoChange:
   206 00002BCE C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   207 00002BD2 C3                  <1>     ret
   208                              <1> 
   209                              <1> 
   210                              <1> .msdBuildBPB:        ;Function 2
   211 00002BD3 B005                <1>     mov al, 05h ;Bad request structure length
   212 00002BD5 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   213 00002BD8 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   214                              <1> 
   215 00002BDE 4889DE              <1>     mov rsi, rbx
   216 00002BE1 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   217 00002BE6 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   218 00002BED 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   219 00002BF0 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   220 00002BF4 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   221 00002BF6 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   222 00002BF9 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   223 00002BFE CD33                <1>     int 33h
   224 00002C00 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   225                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   226 00002C06 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   227 00002C0A 7418                <1>     je .mbbpb0
   228 00002C0C 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   229 00002C10 7412                <1>     je .mbbpb0
   230 00002C12 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   231 00002C16 740C                <1>     je .mbbpb0
   232 00002C18 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   233 00002C1C B007                <1>     mov al, 07h ;Unknown media error code
   234 00002C1E 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   235                              <1> .mbbpb0:
   236 00002C24 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   237 00002C27 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   238 00002C2C 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   239 00002C33 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   240 00002C37 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   241 00002C3A 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   242 00002C3E B90F000000          <1>     mov ecx, bpbEx_size/8
   243 00002C43 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   244 00002C46 C3                  <1>     ret
   245                              <1> .msdIOCTLRead:       ;Function 3, returns done
   246 00002C47 B005                <1>     mov al, drvBadDrvReq
   247 00002C49 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   248 00002C4C 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   249 00002C52 C3                  <1>     ret
   250                              <1> .msdRead:            ;Function 4
   251                              <1> ;Will read one sector at a time.
   252 00002C53 B005                <1>     mov al, 05h ;Bad request structure length
   253 00002C55 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   254 00002C58 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   255                              <1> 
   256 00002C5E 4889DF              <1>     mov rdi, rbx
   257 00002C61 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   258                              <1> .msdr0:
   259 00002C63 B682                <1>     mov dh, 82h ;LBA Read Sectors
   260 00002C65 E841010000          <1>     call .msdBlkIOCommon
   261 00002C6A 0F8255FEFFFF        <1>     jc .msdIOError
   262 00002C70 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   263 00002C78 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   264 00002C80 FFC6                <1>     inc esi
   265 00002C82 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   266 00002C85 75DC                <1>     jne .msdr0
   267 00002C87 4889FB              <1>     mov rbx, rdi
   268 00002C8A C3                  <1>     ret
   269                              <1> .msdWrite:           ;Function 8
   270                              <1> ;Will write one sector at a time.
   271 00002C8B B005                <1>     mov al, 05h ;Bad request structure length
   272 00002C8D 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   273 00002C90 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   274                              <1> 
   275 00002C96 4889DF              <1>     mov rdi, rbx
   276 00002C99 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   277                              <1> .msdw0:
   278 00002C9B B683                <1>     mov dh, 83h ;LBA Write Sectors
   279 00002C9D E809010000          <1>     call .msdBlkIOCommon
   280 00002CA2 0F821DFEFFFF        <1>     jc .msdIOError
   281 00002CA8 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   282 00002CB0 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   283 00002CB8 FFC6                <1>     inc esi
   284 00002CBA 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   285 00002CBD 75DC                <1>     jne .msdw0
   286 00002CBF 4889FB              <1>     mov rbx, rdi
   287 00002CC2 C3                  <1>     ret
   288                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   289                              <1> ;Will write one sector at a time and then verify it.
   290 00002CC3 B005                <1>     mov al, 05h ;Bad request structure length
   291 00002CC5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   292 00002CC8 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   293                              <1> 
   294 00002CCE 4889DF              <1>     mov rdi, rbx
   295 00002CD1 31F6                <1>     xor esi, esi  ;Set counter to zero
   296                              <1> .msdwv0:
   297 00002CD3 B683                <1>     mov dh, 83h ;LBA Write Sectors
   298 00002CD5 E8D1000000          <1>     call .msdBlkIOCommon
   299 00002CDA 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   300 00002CE0 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   301 00002CE2 E8C4000000          <1>     call .msdBlkIOCommon
   302 00002CE7 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   303 00002CED 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   304 00002CF5 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   305 00002CFD FFC6                <1>     inc esi
   306 00002CFF 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   307 00002D02 75CF                <1>     jne .msdwv0
   308 00002D04 4889FB              <1>     mov rbx, rdi
   309 00002D07 C3                  <1>     ret
   310                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   311 00002D08 B005                <1>     mov al, drvBadDrvReq
   312 00002D0A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   313 00002D0D 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   314                              <1> 
   315 00002D13 C3                  <1>     ret
   316                              <1> .msdDevOpen:         ;Function 13
   317 00002D14 B005                <1>     mov al, drvBadDrvReq
   318 00002D16 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   319 00002D19 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   320                              <1> 
   321 00002D1F 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   322 00002D24 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   323 00002D2B FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   324 00002D2E C3                  <1>     ret
   325                              <1> .msdDevClose:        ;Function 14
   326 00002D2F B005                <1>     mov al, drvBadDrvReq
   327 00002D31 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   328 00002D34 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   329                              <1> 
   330 00002D3A 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   331 00002D3F 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   332 00002D46 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   333 00002D49 C3                  <1>     ret
   334                              <1> .msdRemovableMedia:  ;Function 15
   335 00002D4A B005                <1>     mov al, drvBadDrvReq
   336 00002D4C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   337 00002D4F 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   338                              <1> 
   339 00002D55 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   340 00002D5A 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   341 00002D61 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   342 00002D64 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   343 00002D69 31D2                <1>     xor edx, edx    ;Busy bit clear
   344 00002D6B A880                <1>     test al, 80h
   345 00002D6D 0F44CA              <1>     cmovz ecx, edx
   346 00002D70 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   347 00002D74 C3                  <1>     ret
   348                              <1> .msdGenericIOCTL:    ;Function 19
   349 00002D75 B005                <1>     mov al, drvBadDrvReq
   350 00002D77 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   351 00002D7A 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   352                              <1> 
   353 00002D80 C3                  <1>     ret
   354                              <1> .msdGetLogicalDev:   ;Function 23
   355 00002D81 B005                <1>     mov al, drvBadDrvReq
   356 00002D83 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   357 00002D86 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   358                              <1> 
   359 00002D8C 8A0541000000        <1>     mov al, byte [.msdCurDev]
   360 00002D92 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   361 00002D95 C3                  <1>     ret
   362                              <1> .msdSetLogicalDev:   ;Function 24
   363 00002D96 B005                <1>     mov al, drvBadDrvReq
   364 00002D98 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   365 00002D9B 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   366                              <1> 
   367 00002DA1 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   368 00002DA4 880529000000        <1>     mov byte [.msdCurDev], al
   369 00002DAA C3                  <1>     ret
   370                              <1> 
   371                              <1> .msdBlkIOCommon:  ;Does block IO
   372                              <1> ;Called with rdi containing old rbx value and ah with function number
   373                              <1> ;rbp points to bpb
   374                              <1> ;Error handled by caller
   375                              <1> ;Sector count handled by caller
   376                              <1> ;Called with dh = BIOS function number
   377 00002DAB 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   378 00002DB0 8A90[D42D0000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   379 00002DB6 31C9                <1>     xor ecx, ecx
   380 00002DB8 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   381 00002DBB 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   382 00002DBF 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   383 00002DC3 88F4                <1>     mov ah, dh
   384 00002DC5 B001                <1>     mov al, 01h ;Do one sector at a time 
   385 00002DC7 CD33                <1>     int 33h
   386 00002DC9 C3                  <1>     ret
   387                              <1> 
   388 00002DCA 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   389                              <1> ;LASTDRIVE default is 5
   390                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   391                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   392 00002DD3 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   393                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   394 00002DD4 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   395 00002DD9 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   396 00002DDE 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   396 00002DE7 000000000000000000- <1>
   396 00002DF0 000000000000000000- <1>
   396 00002DF9 000000000000000000- <1>
   396 00002E02 00000000            <1>
   397 00002E06 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   397 00002E0F 000000000000000000- <1>
   397 00002E18 000000000000000000- <1>
   397 00002E21 000000000000000000- <1>
   397 00002E2A 000000000000000000- <1>
   397 00002E33 000000000000000000- <1>
   397 00002E3C 000000000000000000- <1>
   397 00002E45 000000000000000000- <1>
   397 00002E4E 000000000000000000- <1>
   397 00002E57 000000000000000000- <1>
   397 00002E60 000000000000000000- <1>
   397 00002E69 000000000000000000- <1>
   397 00002E72 000000000000000000- <1>
   397 00002E7B 000000000000000000- <1>
   397 00002E84 000000000000000000- <1>
   397 00002E8D 000000000000000000- <1>
   397 00002E96 000000000000000000- <1>
   397 00002E9F 000000000000000000- <1>
   397 00002EA8 000000000000000000- <1>
   397 00002EB1 000000000000000000- <1>
   397 00002EBA 000000000000000000- <1>
   397 00002EC3 000000000000000000- <1>
   397 00002ECC 000000000000000000- <1>
   397 00002ED5 000000000000000000- <1>
   397 00002EDE 000000000000000000- <1>
   397 00002EE7 000000000000000000- <1>
   397 00002EF0 000000000000000000- <1>
   397 00002EF9 000000000000000000- <1>
   397 00002F02 000000000000000000- <1>
   397 00002F0B 000000000000000000- <1>
   397 00002F14 000000000000000000- <1>
   397 00002F1D 000000000000000000- <1>
   397 00002F26 000000000000000000- <1>
   397 00002F2F 000000000000000000- <1>
   397 00002F38 000000000000000000- <1>
   397 00002F41 000000000000000000- <1>
   397 00002F4A 000000000000000000- <1>
   397 00002F53 000000000000000000- <1>
   397 00002F5C 000000000000000000- <1>
   397 00002F65 000000000000000000- <1>
   397 00002F6E 000000000000000000- <1>
   397 00002F77 000000000000000000- <1>
   397 00002F80 000000000000000000- <1>
   397 00002F89 000000000000000000- <1>
   397 00002F92 000000000000000000- <1>
   397 00002F9B 000000000000000000- <1>
   397 00002FA4 000000000000000000- <1>
   397 00002FAD 000000000000000000- <1>
   397 00002FB6 000000000000000000- <1>
   397 00002FBF 000000000000000000- <1>
   397 00002FC8 000000000000000000- <1>
   397 00002FD1 000000000000000000- <1>
   397 00002FDA 000000000000000000- <1>
   397 00002FE3 000000000000000000- <1>
   397 00002FEC 000000000000000000- <1>
   397 00002FF5 000000000000000000- <1>
   397 00002FFE 000000000000000000- <1>
   397 00003007 000000000000000000- <1>
   397 00003010 000000000000000000- <1>
   397 00003019 000000000000000000- <1>
   397 00003022 000000000000000000- <1>
   397 0000302B 000000000000000000- <1>
   397 00003034 000000000000000000- <1>
   397 0000303D 000000000000000000- <1>
   397 00003046 000000000000000000- <1>
   397 0000304F 000000000000000000- <1>
   397 00003058 000000000000        <1>
   398                              <1> 
   399                              <1> endptr equ $
    37                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    38                                  ;Paragraph alignment
    39                                  %include "./Source/BSS/dosDynaDataArea.asm"
    40                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    41                              <1> ; the MCB chain!
    42                              <1> ddaStart:
    43 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    44                              <1> 
    45                              <1> ;Create DPB chain of first 5 available DPB slots
    46                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    47 00000010 <res 35h>           <1> firstDPB        resb dpb_size
    48 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    49                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    50                              <1> ;Always jettison this space
    51 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    52 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    53 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    54                              <1> 
    55 00000119 <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    56 00000139 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    57                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    58                              <1> dynamicDataAreaLength equ $ - ddaStart
