     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro reta 0
    78                              <1> cret a
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> %macro retna 0
    82                              <1> cret na
    83                              <1> %endmacro
    84                              <1> 
    85                              <1> %macro breakpoint 0
    86                              <1> xchg bx, bx
    87                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    73                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    74                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    75                              <1>     devDrvChar     equ 8000h ;If set, Char device
    76                              <1> ;Bit 0 1=console input
    77                              <1> ;    1 1=console output (character devices)
    78                              <1> ;    2 1=NUL device
    79                              <1> ;    3 1=CLOCK device
    80                              <1> ;    4 1=INT 49 output (CON)
    81                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    82                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    83                              <1> ;   11 1=open/close/removable media supported (3.0+)
    84                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    85                              <1> ;      1=media descriptor in FAT required (block devices)
    86                              <1> ;   14 1=IOCTL supported
    87                              <1> ;   15 0=block device
    88                              <1> ;      1=character device
    89                              <1> 
    90                              <1> ;Driver structures
    91                              <1> 
    92                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    93                              <1> 
    94                              <1>     .hdrlen resb 1  ;Length of the request header
    95                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    96                              <1>     .cmdcde resb 1  ;Command code
    97                              <1>     .status resw 1  ;Status word
    98                              <1>     .devptr resq 1  ;Device queue pointer field
    99                              <1> 
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> struc drvReqHdr
   103                              <1>     drvReqHdrM
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   104                              <1> endstruc
   105                              <1> 
   106                              <1> struc initReqPkt  ;Init Request Packet
   107                              <1> 
   108                              <1>     drvReqHdrM   ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   109 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   110 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   111 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   112 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   113                              <1> 
   114                              <1> endstruc
   115                              <1> 
   116                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   117                              <1> 
   118                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   119 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   120 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   121 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   122                              <1> 
   123                              <1> endstruc
   124                              <1> 
   125                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   126                              <1> 
   127                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   128 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   129 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   130 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   131                              <1> 
   132                              <1> endstruc
   133                              <1> 
   134                              <1> struc ioReqPkt   ;IO Request Packet
   135                              <1> 
   136                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   137 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   138 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   139 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   140 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   141 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   142                              <1> 
   143                              <1> endstruc
   144                              <1> 
   145                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   146                              <1>     
   147                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   148 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   149                              <1> 
   150                              <1> endstruc
   151                              <1> 
   152                              <1> struc statusReqPkt   ;Status Request Packet
   153                              <1> 
   154                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   155                              <1> 
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   159                              <1> 
   160                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   161                              <1>      
   162                              <1> endstruc
   163                              <1> 
   164                              <1> struc openReqPkt ;Open Device Request Packet
   165                              <1> 
   166                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   167                              <1>      
   168                              <1> endstruc
   169                              <1> 
   170                              <1> struc closeReqPkt ;Close Device Request Packet
   171                              <1> 
   172                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   173                              <1>      
   174                              <1> endstruc
   175                              <1> 
   176                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   177                              <1> 
   178                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   179                              <1>      
   180                              <1> endstruc
   181                              <1> 
   182                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   183                              <1> 
   184                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   185 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   186 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   187 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   188 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   189 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   190                              <1> 
   191                              <1> endstruc
   192                              <1> 
   193                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   194                              <1>     
   195                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   196                              <1> 
   197                              <1> endstruc
   198                              <1> 
   199                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   200                              <1>     
   201                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   202                              <1> 
   203                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   138                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   139                              <1>     ;If any of the three bits are set, then ALL three bits are set
   140                              <1>     ; in addition to whatever the user passed to search for.
   141                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   142                              <1>     dirIncFiles     equ dirHidden | dirSystem
   143                              <1> 
   144                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   145                              <1> 
   146 00000000 ??????              <1>     .jmpBoot                resb 3 
   147 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   148 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   149 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   150 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   151 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   152 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   153 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   154 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   155 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   156 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   157 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   158 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   159 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   160 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   161 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   162 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   163 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   164 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   165                              <1> 
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc FSInfo
   169                              <1> 
   170 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   171 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   172 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   173 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   174 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   175 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   176 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   177                              <1> 
   178                              <1> endstruc
   179                              <1> 
   180                              <1> %macro defaultBPB 0
   181                              <1>     db 0E9h
   182                              <1>     db 00h
   183                              <1>     db 90h
   184                              <1>     db 'SCPDOSv1'
   185                              <1>     dw 0200h                       
   186                              <1>     db 01h                         
   187                              <1>     dw 0001h                           
   188                              <1>     db 02h                              
   189                              <1>     dw 00E0h            
   190                              <1>     dw 0B40h   
   191                              <1>     db 0F0h                   
   192                              <1>     dw 0009h                   
   193                              <1>     dw 0012h                     
   194                              <1>     dw 0002h                  
   195                              <1>     dd 0                 
   196                              <1>     dd 0 
   197                              <1>     db 00h
   198                              <1>     db 00h
   199                              <1>     db 29h
   200                              <1>     dd 0
   201                              <1>     db 'NO NAME    '
   202                              <1>     db 'FAT12   '
   203                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   204                              <1> %endmacro
     8                                  %include "./Source/Include/fcbStruc.inc"
     9                              <1> ;FCB related structures
    10                              <1> 
    11                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
    12                              <1> ;This field also used for random read/write ops to find the right record
    13                              <1> struc fcb
    14 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    15 00000001 ????????????????    <1>     .filename   resb 8
    16 00000009 ??????              <1>     .fileext    resb 3
    17 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    18                              <1> ;One block consists of 128 records, of size denoted in the below
    19 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    20 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    21 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    22 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    23                              <1>     ;----------------------------------------
    24                              <1>     ;Internal Records
    25 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    26 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    27 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    28                              <1>     ;----------------------------------------
    29 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    30 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    31                              <1> endstruc
    32                              <1> 
    33                              <1> struc exFcb
    34 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    35 00000001 ??????????          <1>     .reserved   resb 5  
    36 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    37 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    38 00000008 ????????????????    <1>     .filename   resb 8
    39 00000010 ??????              <1>     .fileext    resb 3
    40 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    41                              <1> ;One block consists of 128 records, of size denoted in the below
    42 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    43 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    44 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    45 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    46                              <1>     ;----------------------------------------
    47                              <1>     ;Internal Records
    48 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    49 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    50 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    51                              <1>     ;----------------------------------------
    52 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    53 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    54                              <1> endstruc
    55                              <1> 
    56                              <1> struc renameFcb
    57                              <1> ;Used for accessing the names and drive letter for renaming
    58                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    59 00000000 ??                  <1>     .driveNum   resb 1
    60 00000001 ????????????????    <1>     .filename   resb 8
    61 00000009 ??????              <1>     .fileext    resb 3
    62 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    63 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    64 00000011 ????????????????    <1>     .newName    resb 8
    65 00000019 ??????              <1>     .newExt     resb 3
    66 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    67                              <1> endstruc
    68                              <1> 
    69                              <1> ;FCBmode equates:
    70                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    71                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    72                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    73                              <1> fcbShareOn  equ 80h
    74                              <1> fcbCharDev  equ 40h
    75                              <1> fcbLocal    equ 40h
    76                              <1> 
    77                              <1> ;Structures of the special 6 bytes
    78                              <1> 
    79                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    80                              <1> struc noShare   
    81 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    82 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    83 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    84 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    85                              <1> endstruc
    86                              <1> 
    87                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    88                              <1> struc shareLocal    
    89 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    90 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    91 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    95                              <1> struc shareNet
    96                              <1> ;All three fields too small for FAT32
    97 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    98 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    99 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   100                              <1> endstruc
     9                                  %include "./Source/Include/dosStruc.inc"
    10                              <1> 
    11                              <1> ;-------------------------------------------------------;
    12                              <1> ; This include file contains miscellaneous internal     ;
    13                              <1> ; SCP/DOS structures.                                   ;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> 
    16                              <1> ;------------------------------------------------------------------------;
    17                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    18                              <1> ; its file system structure. This is used to locate files and structures
    19                              <1> ; on the device itself and to translate file requests to cluster chains
    20                              <1> ; to LBAs to pass to the disk driver..
    21                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    22                              <1> ; drivers Initialise routine has been called.
    23                              <1> ;------------------------------------------------------------------------;
    24                              <1> struc dpb        ;Drive Parameter Block
    25                              <1> 
    26 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    27 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    28 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    29 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    30 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    31 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    32 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    33 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    34 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    35 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    36 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    37 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    38                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    39 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    40 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    41 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    42 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    43 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    44 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    45                              <1> 
    46                              <1> endstruc
    47                              <1> 
    48                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    49                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    52                              <1> ; All disk pathing requests go via the CDS for that drive.
    53                              <1> ; The default drive is the last accessed drive, this number is stored
    54                              <1> ; in the DOS data area.
    55                              <1> ; The CDS is stored as an array with the offset into the array being 
    56                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    57                              <1> ;
    58                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    59                              <1> ;------------------------------------------------------------------------;
    60                              <1> struc cds       ;Current Directory structure
    61 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    62 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    63 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    64 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    65 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    66 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    67                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    68                              <1> ; another, we save the number of chars to skip to that deep level).
    69                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    70                              <1> ; Only affects for SUBST drives, not JOIN
    71                              <1> ; Flags: Bit 15 set = Network drive
    72                              <1> ;        Bit 14 set = Physical drive
    73                              <1> ;        Bit 13 set = JOIN'ed drive
    74                              <1> ;        Bit 12 set = SUBST'ed drive
    75                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    76                              <1> endstruc
    77                              <1> ;CDS equates
    78                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    79                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    80                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    81                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    82                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    83                              <1> ;------------------------------------------------------------------------;
    84                              <1> ; The SFT is a way to allow applications to open file handles to files 
    85                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    86                              <1> ; under the first header, and then a second header will be linked to the 
    87                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    88                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    89                              <1> ; using the FCBS= command. Default FCBS=5.
    90                              <1> ;
    91                              <1> ; A file handle describes the file, and the location within the file that
    92                              <1> ; we are reading. The file handle can be manipulated without the file
    93                              <1> ; being in memory, thus allowing the user to access data without needing 
    94                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    95                              <1> ; accessing devices, by treating them as files with their drivers 
    96                              <1> ; responding and translating the manipulations of the file handle itself.
    97                              <1> ; Neither the driver nor the application should see or use the SFT for
    98                              <1> ; the handle, as it is subject to change (and will change when file 
    99                              <1> ; sharing provisions are included). The DOS will make requests to the 
   100                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   101                              <1> ; track of the information in the SFT entry for that handle. 
   102                              <1> ;
   103                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   104                              <1> ; can point to the same file. It all depends on what the applications 
   105                              <1> ; want to do with the File.
   106                              <1> ;
   107                              <1> ; !!!!IMPORTANT!!!!
   108                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   109                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   110                              <1> ;
   111                              <1> ;Each SFT may look like this:
   112                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   113                              <1> ;            |                |
   114                              <1> ;       wNumFiles*sft    wNumFiles*sft
   115                              <1> ;
   116                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   117                              <1> ; System FCBs.
   118                              <1> ;
   119                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   120                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   121                              <1> ;
   122                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   123                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   124                              <1> ;------------------------------------------------------------------------;
   125                              <1> struc sfth   ;System file table header
   126                              <1> ; This is the SFT header.
   127                              <1> ; This structure comes before the start of the first file in the array/table.
   128 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   129 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc sft
   133                              <1> ;This is the file struc itself
   134 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   135 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   136 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   137 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   138 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   139 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   140 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   141 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   142 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   143 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   144 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   145 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   146 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   147 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   148 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   149 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   150 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   151 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   152 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   153                              <1> ;                           0 means no record
   154                              <1> endstruc
   155                              <1> ;Open Mode equates
   156                              <1> ;Access modes   Bits[2:0]
   157                              <1> ReadAccess      equ 0h
   158                              <1> WriteAccess     equ 1h
   159                              <1> RWAccess        equ 2h
   160                              <1> ;Bit 3 reserved 0
   161                              <1> ;Sharing modes  Bits[6:4]
   162                              <1> CompatShare     equ 0h
   163                              <1> denyRWShare     equ 10h
   164                              <1> denyWriteShare  equ 20h
   165                              <1> denyReadShare   equ 30h
   166                              <1> denyNoneShare   equ 40h
   167                              <1> netFCBShare     equ 70h
   168                              <1> noInherit       equ 80h
   169                              <1> ;Bits 8-12 reserved 0
   170                              <1> 
   171                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   172                              <1> ;Buffering on writes
   173                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   174                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   175                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   176                              <1> ;Attribute Byte
   177                              <1> readOnlyFile    equ 1h
   178                              <1> hiddenFile      equ 2h
   179                              <1> systemFile      equ 4h
   180                              <1> volumeLabel     equ 8h
   181                              <1> directoryFile   equ 10h ;Directory entry
   182                              <1> archiveFile     equ 20h
   183                              <1> ;Device Info equates
   184                              <1> ;For a block device, bits [5:0] contain the drive number
   185                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   186                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   187                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   188                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   189                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   190                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   191                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   192                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   193                              <1> devCharDev      equ 80h ;If set, it is a char device!
   194                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   195                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   196                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   197                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   198                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   199                              <1>  
   200                              <1> ;------------------------------------------------------------------------;
   201                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   202                              <1> ; to an internal buffer, and then copying it to the specified location
   203                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   204                              <1> ; another request for the same sector from the same device is made, so 
   205                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   206                              <1> ; size, selected according to the largest detected sector size during 
   207                              <1> ; the initial loadup.
   208                              <1> ;
   209                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   210                              <1> ;
   211                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   212                              <1> ;------------------------------------------------------------------------;
   213                              <1> 
   214                              <1> struc bufferHdr
   215 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   216 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   217 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   218 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   219 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   220 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   221 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   222 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   223 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   224                              <1>     .dataarea:             ;Points to the start of the data area
   225                              <1> endstruc
   226                              <1> ;Buffer Flag equates
   227                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   228                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   229                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   230                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   231                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   232                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   233                              <1> ;Note! A buffer is marked as referenced only when the application 
   234                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc dpl
   282                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   283                              <1> ; server calls
   284 00000000 ????????????????    <1>     .rax    resq 1
   285 00000008 ????????????????    <1>     .rbx    resq 1
   286 00000010 ????????????????    <1>     .rcx    resq 1
   287 00000018 ????????????????    <1>     .rdx    resq 1
   288 00000020 ????????????????    <1>     .rsi    resq 1
   289 00000028 ????????????????    <1>     .rdi    resq 1
   290 00000030 ????????????????    <1>     .r8     resq 1
   291 00000038 ????????????????    <1>     .r9     resq 1
   292 00000040 ????????????????    <1>     .align  resq 1
   293 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   294 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   298 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   299 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   300 00000010 ????????????????    <1>     .newSFTVal      resq 1
   301 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   302 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   303 00000028 ????????????????    <1>     .newLastdrive   resq 1
   304 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   305 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   306 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   307 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   308 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   309 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   310 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   311                              <1> endstruc
   312                              <1> 
   313                              <1> struc filename
   314                              <1> ;8.3 File name struct
   315 00000000 ????????????????    <1>     .fName  resb 8
   316 00000008 ??????              <1>     .fExt   resb 3
   317                              <1> endstruc
   318                              <1> 
   319                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   320 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   321 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   322 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   323 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   324 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   325 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   326 00000016 ????                <1>     .fileTime   resw 1  ;File time
   327 00000018 ????                <1>     .fileDate   resw 1  ;File date
   328 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   329 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   330                              <1> endstruc
   331                              <1> 
   332                              <1> struc psp
   333 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   334 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   335 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   336 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   337 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   338 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   339 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   340 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   341 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   342 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   343 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   344 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   345 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   346 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   347                              <1> ;Extra handle arrays are grouped into a linked list
   348                              <1> ;The below are in the same place as in DOS
   349 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   350 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   351                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   352 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   353 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   354                              <1> endstruc
   355                              <1> 
   356                              <1> struc clkStruc
   357 00000000 ????                <1>     .dateWord   resw 1
   358 00000002 ??                  <1>     .minutes    resb 1
   359 00000003 ??                  <1>     .hours      resb 1
   360 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   361 00000005 ??                  <1>     .seconds    resb 1
   362                              <1> endstruc
   363                              <1> 
   364                              <1> struc countryStruc
   365 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   366                              <1>                         ;0 = month day year hh:mm:ss
   367                              <1>                         ;1 = day month year hh:mm:ss
   368                              <1>                         ;2 = year month day hh:mm:ss
   369 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   370 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   371 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   372 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   373 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   374 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   375                              <1>                         ;0 = Symbol leads, without space
   376                              <1>                         ;1 = Symbol follows, without space
   377                              <1>                         ;2 = Symbol leads, one space
   378                              <1>                         ;3 = Symbol follows, one space
   379                              <1>                         ;4 = Symbol replace decimal separator
   380 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   381 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   382 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   383 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   384 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   385                              <1> endstruc
   386                              <1> 
   387                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   388                              <1> ;for a space of 64Gb
   389                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   390                              <1> dosLowBase  equ 600h    ;Low load address
   391                              <1> 
   392                              <1> ;Critical Error AH bitfield equates
   393                              <1> critRead    equ 0h
   394                              <1> critWrite   equ 1h
   395                              <1> critDOS     equ 0h
   396                              <1> critFAT     equ 2h
   397                              <1> critDir     equ 4h
   398                              <1> critData    equ 6h
   399                              <1> critFailOK  equ 8h
   400                              <1> critRetryOK equ 10h
   401                              <1> critIgnorOK equ 20h
   402                              <1> critCharDev equ 80h
   403                              <1> 
   404                              <1> critIgnore  equ 0
   405                              <1> critRetry   equ 1
   406                              <1> critAbort   equ 2
   407                              <1> critFail    equ 3
   408                              <1> 
   409                              <1> ;MISC ASCII control chars
   410                              <1> NUL equ 00h ;^@         | ASCII Null
   411                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   412                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   413                              <1> BEL equ 07h ;^G         | ASCII Bell
   414                              <1> BSP equ 08h ;^H         | ASCII Backspace
   415                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   416                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   417                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   418                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   419                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   420                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   421                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   422                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   423                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   424                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   425                              <1> SPC equ 20h ;Printable  | ASCII Space
   426                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   427                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   428                              <1> 
   429                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   430                              <1> ;Extended Ascii Codes
   431                              <1> eF1     equ 3Bh ;F1 second byte
   432                              <1> eF2     equ 3Ch ;F2 second byte
   433                              <1> eF3     equ 3Dh ;F3 second byte
   434                              <1> eF4     equ 3Eh ;F4 second byte
   435                              <1> eF5     equ 3Fh ;F5 second byte
   436                              <1> eF6     equ 40h ;F6 second byte
   437                              <1> eF7     equ 41h ;F7 second byte
   438                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   439                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   440                              <1> eIns    equ 52h ;Insert second byte
   441                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   442                              <1> 
   443                              <1> ;Default Configuration for the system
   444                              <1> 
   445                              <1> buffersDefault  equ 30
   446                              <1> filesDefault    equ 20
   447                              <1> fcbsDefault     equ 4
   448                              <1> safeFcbsDeflt   equ 0
   449                              <1> lastDriveDeflt  equ 5   
    10                                  %include "./Source/Debug/debSym.inc"
    11                              <1> ;This file will include the debuging symbols
    12                              <1> 
    13                              <1> %define true 1
    14                              <1> %define false 0
    15                              <1> 
    16                              <1> ;Switch the DEBUG to false in production!
    17                              <1> %define DEBUG false
    18                              <1> %define DPBINFO false
    19                              <1> %define REGS false
    20                              <1> %define ENDSTATUS false
    21                              <1> %define ALLOCTEST false
    22                              <1> 
    23                              <1> 
    24                              <1> ;Use this space as the debug stack
    25                              <1> %define debStackTop 80000h
    11                                  %include "./Source/Include/dosError.inc"
    12                              <1> ;DOS Error codes
    13                              <1> 
    14                              <1> ;Extended Error Codes
    15                              <1> errInvFnc   equ 1   ;Invalid function number
    16                              <1> errFnf      equ 2   ;File not found
    17                              <1> errPnf      equ 3   ;Path not found
    18                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    19                              <1> errAccDen   equ 5   ;Access denied (to resource)
    20                              <1> errBadHdl   equ 6   ;Invalid handle
    21                              <1> errMCBbad   equ 7   ;MCB's destroyed
    22                              <1> errNoMem    equ 8   ;Insufficient memory
    23                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    24                              <1> errBadEnv   equ 10  ;Invalid environment
    25                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    26                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    27                              <1> errInvDat   equ 13  ;Invalid data
    28                              <1> ;           equ 14  ;Reserved
    29                              <1> errBadDrv   equ 15  ;Invalid drive specified
    30                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    31                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    32                              <1> errNoFil    equ 18  ;No more files, no match found
    33                              <1> ;The following are Driver error codes + 19
    34                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    35                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    36                              <1> errUnkUnt   equ 20  ;Unknown Unit
    37                              <1> errDrvNR    equ 21  ;Drive not ready
    38                              <1> errUnkCmd   equ 22  ;Unknown Command
    39                              <1> errCRCerr   equ 23  ;Data (CRC) error
    40                              <1> errBadRLn   equ 24  ;Bad request structure length
    41                              <1> errSekErr   equ 25  ;Seek error
    42                              <1> errUnkMed   equ 26  ;Unknown media type
    43                              <1> errSecNF    equ 27  ;Sector not Found
    44                              <1> errNoPap    equ 28  ;Printer out of paper
    45                              <1> errWF       equ 29  ;Write fault
    46                              <1> errRF       equ 30  ;Read fault
    47                              <1> errGF       equ 31  ;General fault
    48                              <1> ;----------------------------------------------
    49                              <1> ;The following two go inbetween the Disk errors
    50                              <1> errShrVio   equ 32  ;Sharing violations
    51                              <1> errLokVio   equ 33  ;File Lock violation
    52                              <1> ;----------------------------------------------
    53                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    54                              <1> errNoFCB    equ 35  ;FCB unavailable
    55                              <1> errShrFul   equ 36  ;Sharing buffer full
    56                              <1> 
    57                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    58                              <1> 
    59                              <1> errFilExist equ 80  ;File already exists
    60                              <1> errDirExist equ 82  ;Directory already exists
    61                              <1> errFI44     equ 83  ;Fail on INT 44h
    62                              <1> errRedir    equ 84  ;Too many levels of redirection
    63                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    64                              <1> errBadPass  equ 86  ;Bad password
    65                              <1> errBadParam equ 87  ;Bad parameter passed to request
    66                              <1> errNetWrite equ 88  ;Network Write Fault
    67                              <1> ;-----------------------------------------------------------------------------
    68                              <1> ;Error Loci
    69                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    70                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    71                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    72                              <1> eLocChr     equ 4   ;Serial/Character Device error
    73                              <1> eLocMem     equ 5   ;Related to RAM
    74                              <1> ;-----------------------------------------------------------------------------
    75                              <1> ;Error Actions
    76                              <1> eActRet     equ 1   ;Retry
    77                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    78                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    79                              <1> eActAbt     equ 4   ;Abort with cleanup
    80                              <1> eActKil     equ 5   ;Abort without cleanup
    81                              <1> eActIgn     equ 6   ;Ignore error
    82                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    83                              <1> ;-----------------------------------------------------------------------------
    84                              <1> ;Error classes
    85                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    86                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    87                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    88                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    89                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    90                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    91                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    92                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    93                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    94                              <1> eClsLocked  equ 10  ;Resource Locked
    95                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    96                              <1> eClsClash   equ 12  ;Resource already exists!
    97                              <1> eClsUnk     equ 13  ;Unknown class
    12                                  %include "./Source/Include/dosExec.inc"
    13                              <1> ;This include file contains structures related to the EXE format
    14                              <1> ; and the exec frame used when setting up the EXE in memory by 41h/4Bh
    15                              <1> 
    16                              <1> ;Int 41h/4Bh stack frame, used to store values whilst processing a EXE or COM
    17                              <1> ; file.
    18                              <1> execLoadGo  equ 0
    19                              <1> execLoad    equ 1
    20                              <1> execInvld   equ 2
    21                              <1> execOverlay equ 3
    22                              <1> 
    23                              <1> struc execFrame
    24 00000000 ????????????????    <1>     .oldRBP     resq 1  
    25 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    26 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    27 00000018 ????????????????    <1>     .wEnvSize   resq 1  ;Size of the environment block
    28 00000020 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    29 00000028 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    30 00000030 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    31                              <1> 
    32 00000038 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    33 00000040 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    34 00000048 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to new Program Base address (consider removing)
    35 00000050 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    36                              <1> .pProgEP:   ;Program EP, recycle this qword
    37 00000058 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    38 00000060 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    39                              <1> .qRelocVal:  ;Used when computing relocations, Rebasing factor
    40 00000068 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Possible blocks to be pointed to by rbx
    44                              <1> 
    45                              <1> struc execProg 
    46 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    47 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    48 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    49 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    50                              <1> endstruc
    51                              <1> 
    52                              <1> struc loadProg
    53 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    54 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    55 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    56 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    57 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    58 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc loadOvly
    62 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    63 00000008 ????????            <1>     .dRelocFct  resd 1  ;Relocation factor for 
    64                              <1> endstruc
    65                              <1> 
    66                              <1> ;----------------------------
    67                              <1> ;   EXE header structures   :
    68                              <1> ;----------------------------
    69                              <1> 
    70                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    71                              <1> dosMagicSignature   equ "MZ"
    72                              <1> dosMagicSignature2  equ "ZM"
    73                              <1> struc imageDosHdr
    74 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    75 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    76 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    77 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    78 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    79 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    80 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    81 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    82 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    83 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    84 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    85 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    86 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    87 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    88 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    89 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    90 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    91 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    92 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Pssobile signatures pointed to by e_lfanew
    96                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    97                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    98                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    99                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
   100                              <1> 
   101                              <1> ;COFF File header, immadiately follows the signature so @ [e_lfanew + 4]
   102                              <1> 
   103                              <1> struc imageFileHeader
   104 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
   105 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
   106 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
   107 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
   108 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
   109 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   110 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   111 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   112                              <1> endstruc
   113                              <1> 
   114                              <1> ;The only valid values in the .machineType field
   115                              <1> 
   116                              <1> imageFileMachineUnknown equ 0
   117                              <1> imageFileMachineAMD64   equ 08664h 
   118                              <1> 
   119                              <1> ;Optional header, immediately follows COFF header
   120                              <1> 
   121                              <1> struc imageFileOptionalHeader
   122 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   123 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   124 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   125 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   126 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   127 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   128 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   129 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   130 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   131 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   132 00000024 ????????            <1> 	.dFileAlignment             resd 1
   133 00000028 ????                <1> 	.wMajOSVer                  resw 1
   134 0000002A ????                <1> 	.wMinOSVer                  resw 1
   135 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   136 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   137 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   138 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   139 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   140 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   141 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   142 00000040 ????????            <1> 	.dCheckSum                  resd 1
   143 00000044 ????                <1> 	.wSubsystem                 resw 1
   144 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   145 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   146 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   147 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   148 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   149 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   150 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   151                              <1> endstruc
   152                              <1> 
   153                              <1> romMagicNum     equ 0107h
   154                              <1> pe32MagicNum    equ 010Bh
   155                              <1> pe64MagicNum    equ 020Bh
   156                              <1> 
   157                              <1> ;Data directory header structure
   158                              <1> 
   159                              <1> struc imageDataDirectory
   160 00000000 ????????            <1>     .virtualAddress  resd 1
   161 00000004 ????????            <1>     .size    resd 1
   162                              <1> endstruc
   163                              <1> 
   164                              <1> struc baseRelocBlock
   165 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   166 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   167                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   168                              <1> endstruc
   169                              <1> ;Section headers that form the Section Table.
   170                              <1> ;There are wNumberOfSections many entries in this table.
   171                              <1> ;Each entry is one imageSectionHdr
   172                              <1> 
   173                              <1> struc imageSectionHdr       ;size 40 bytes
   174 00000000 ????????????????    <1>     .qName                  resb 8
   175 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   176 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   177 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   178 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   179 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   180 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   181 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   182 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   183 00000024 ????????            <1> 	.dCharacteristics       resd 1
   184                              <1> endstruc
   185                              <1> 
   186                              <1> ;Section Hdr characteristics flags 
   187                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   188                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   189                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    13                                  Segment .text align=1   ;Init code
    14                                  %define currSegVBase 0
    15                                  %include "./Source/Sysinit/sysinit.asm"
    16                              <1> ; We arrive here with the following values in the registers.
    17                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    18                              <1> ; dx  = Int 33h boot device number
    19                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    20                              <1> 
    21 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    22 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
    23 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
    24 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    25 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    26 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    27 0000001A F348A5              <1>     rep movsq   ;Copy over
    28 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    29 00000022 50                  <1>     push rax
    30 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    31                              <1> sysInitldr:
    32                              <1> ;Now the tough part, load DOS to 800
    33 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    34                              <1> .read:
    35 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    36 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    36 00000035 00                  <1>
    37 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    38 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    39 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    40 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    41 0000003F CD33                <1>     int 33h
    42 00000041 7206                <1>     jc .readFail
    43 00000043 6800080000          <1>     push qword 800h
    44 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    45                              <1> .readFail:
    46 00000049 FFCE                <1>     dec esi
    47 0000004B 75DC                <1>     jnz .read
    48 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    49 00000054 B804130000          <1>     mov eax, 1304h
    50 00000059 CD30                <1>     int 30h
    51 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    52 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    52 00000066 6F6164204572726F72- <1>
    52 0000006F 0A0D00              <1>
    53 00000072 000000000000000000- <1>     db 100h-($-$$) dup 00h ;Fill with nulls  
    53 0000007B 000000000000000000- <1>
    53 00000084 000000000000000000- <1>
    53 0000008D 000000000000000000- <1>
    53 00000096 000000000000000000- <1>
    53 0000009F 000000000000000000- <1>
    53 000000A8 000000000000000000- <1>
    53 000000B1 000000000000000000- <1>
    53 000000BA 000000000000000000- <1>
    53 000000C3 000000000000000000- <1>
    53 000000CC 000000000000000000- <1>
    53 000000D5 000000000000000000- <1>
    53 000000DE 000000000000000000- <1>
    53 000000E7 000000000000000000- <1>
    53 000000F0 000000000000000000- <1>
    53 000000F9 00000000000000      <1>
    54                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    55                              <1>     ;Store space for a static PSP
    56 00000100 000000000000000000- <1>     db 100h dup 00h
    56 00000109 000000000000000000- <1>
    56 00000112 000000000000000000- <1>
    56 0000011B 000000000000000000- <1>
    56 00000124 000000000000000000- <1>
    56 0000012D 000000000000000000- <1>
    56 00000136 000000000000000000- <1>
    56 0000013F 000000000000000000- <1>
    56 00000148 000000000000000000- <1>
    56 00000151 000000000000000000- <1>
    56 0000015A 000000000000000000- <1>
    56 00000163 000000000000000000- <1>
    56 0000016C 000000000000000000- <1>
    56 00000175 000000000000000000- <1>
    56 0000017E 000000000000000000- <1>
    56 00000187 000000000000000000- <1>
    56 00000190 000000000000000000- <1>
    56 00000199 000000000000000000- <1>
    56 000001A2 000000000000000000- <1>
    56 000001AB 000000000000000000- <1>
    56 000001B4 000000000000000000- <1>
    56 000001BD 000000000000000000- <1>
    56 000001C6 000000000000000000- <1>
    56 000001CF 000000000000000000- <1>
    56 000001D8 000000000000000000- <1>
    56 000001E1 000000000000000000- <1>
    56 000001EA 000000000000000000- <1>
    56 000001F3 000000000000000000- <1>
    56 000001FC 00000000            <1>
    57                              <1> ;END OF FIRST SECTOR!!
    58                              <1> ;DOS SYSINIT BEGINS HERE
    59                              <1> ;First move the alignment of the DOSSEG to 4Kb
    60                              <1> initBegin:
    61 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    62 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    63 00000206 0F32                <1>     rdmsr
    64 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    65 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    66 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    67 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    68 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    69 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    70 00000221 89F8                <1>     mov eax, edi
    71 00000223 4889FA              <1>     mov rdx, rdi
    72 00000226 48C1EA20            <1>     shr rdx, 20h
    73 0000022A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    74                              <1> ;------------------------------------------------;
    75                              <1> ;              Connect Debugger                  ;
    76                              <1> ;------------------------------------------------;
    77                              <1> %if DEBUG
    78                              <1> ;Only connect if in debug mode
    79                              <1>     mov eax, 0C501h ;Connect debugger
    80                              <1>     int 35h
    81                              <1> %endif
    82                              <1> ;------------------------------------------------;
    83                              <1> ;           Sanitise the data area               ;
    84                              <1> ;------------------------------------------------;
    85                              <1> ; This call initialises ALL fields in the DOS    ;
    86                              <1> ; data area with 0's. Thus any fields, which     ;
    87                              <1> ; need to be initialised with a 0 value, are     ;
    88                              <1> ; initialised for free.                          ;
    89                              <1> ;------------------------------------------------;
    90 0000022C B9[B5DA0300]        <1>     mov ecx, dSegLen
    91 00000231 30C0                <1>     xor al, al
    92 00000233 57                  <1>     push rdi    ;Temp save rdi on the stack
    93 00000234 F3AA                <1>     rep stosb
    94 00000236 5F                  <1>     pop rdi
    95                              <1> ;------------------------------------------------;
    96                              <1> ;          Start saving Basic DOS data           ;
    97                              <1> ;------------------------------------------------;
    98 00000237 6444883C25-         <1>     mov byte fs:[bootDrive], r15b ;Save the boot drive in memory
    98 0000023C [10C00300]          <1>
    99                              <1> ;Copy DOS to its final resting place
   100 00000240 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
   100 00000245 [00C00300]          <1>
   101 00000249 6448893425-         <1>     mov qword fs:[biosUBase], rsi
   101 0000024E [08C00300]          <1>
   102 00000252 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
   103 00000255 4881C7[B5DA0300]    <1>     add rdi, dSegLen ;Move destination past end of data area
   104 0000025C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
   105 00000263 B900100000          <1>     mov ecx, 1000h
   106 00000268 F348A5              <1>     rep movsq
   107                              <1> 
   108 0000026B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   109 0000026D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   110 00000271 664489C0            <1>     mov ax, r8w
   111 00000275 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
   112 0000027D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
   113 00000285 64C60425[7EC00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
   113 0000028D 05                  <1>
   114 0000028E 64C60425[A3C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 20 files, at start 5
   114 00000296 05                  <1>
   115 00000297 64C60425[7FC00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
   115 0000029F 01                  <1>
   116 000002A0 6466C70425-         <1>     mov word fs:[shareCount], 3    ;Retry the repeat 3 times before failing
   116 000002A5 [25C00300]0300      <1>
   117 000002AB 6466C70425-         <1>     mov word fs:[shareDelay], 1    ;Go through one multiple of countdown loop
   117 000002B0 [27C00300]0100      <1>
   118                              <1>     ;If no detected Int 33h devices, halt 
   119 000002B6 49C1E810            <1>     shr r8, 2*8
   120 000002BA 4584C0              <1>     test r8b, r8b
   121 000002BD 0F8424100000        <1>     jz errorInit
   122                              <1> ;------------------------------------------------;
   123                              <1> ;          Add additional page tables            ;
   124                              <1> ;------------------------------------------------;
   125                              <1> ;This will allow for up to 64Gb of addressible space
   126 000002C3 4889EF              <1>     mov rdi, rbp
   127                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
   128 000002C6 B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
   129 000002CB 57                  <1>     push rdi
   130 000002CC 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
   130 000002D5 00                  <1>
   131                              <1> pdtLoop:
   132 000002D6 48AB                <1>     stosq
   133 000002D8 480500002000        <1>     add rax, 200000h
   134 000002DE FFC9                <1>     dec ecx
   135 000002E0 75F4                <1>     jnz pdtLoop
   136 000002E2 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   137                              <1> ;Now we add every 4kb page to the page directory pointer table
   138                              <1> ;15 4kb pages to consider
   139 000002E3 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   140 000002E6 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   141 000002E9 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   142 000002F0 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   143 000002F7 B93C000000          <1>     mov ecx, 60
   144 000002FC 480D03000000        <1>     or rax, 3h      ;present and r/w
   145                              <1> pdptLoop:
   146 00000302 48AB                <1>     stosq
   147 00000304 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   148 0000030A FFC9                <1>     dec ecx
   149 0000030C 75F4                <1>     jnz pdptLoop
   150 0000030E 0F20DF              <1>     mov rdi, cr3
   151 00000311 0F22DF              <1>     mov cr3, rdi
   152                              <1> ;------------------------------------------------;
   153                              <1> ;                   MCB inits                    ;
   154                              <1> ;------------------------------------------------;
   155                              <1> mcbInit:
   156 00000314 B820E80000          <1>     mov eax, 0E820h
   157 00000319 CD35                <1>     int 35h
   158                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   159 0000031B E804010000          <1>     call .mcbFindAddress
   160 00000320 7349                <1>     jnc .mcbi1  ;If found, proceed
   161                              <1>     ;Here, we try use E801h
   162 00000322 B801E80000          <1>     mov eax, 0E801h
   163 00000327 CD35                <1>     int 35h
   164 00000329 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   165 0000032C 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   166 0000032F 85C0                <1>     test eax, eax
   167 00000331 741B                <1>     jz .worst
   168 00000333 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   169 00000336 C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   170 00000339 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   171 00000341 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   172 00000349 E909010000          <1>     jmp mcbBuild
   173                              <1> .worst:
   174                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   175 0000034E B800002000          <1>     mov eax, 200000h
   176 00000353 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   176 00000358 [08C00300]          <1>
   177 0000035C 29D8                <1>     sub eax, ebx
   178 0000035E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   179 00000366 E9EC000000          <1>     jmp mcbBuild 
   180                              <1> .mcbi1:
   181 0000036B 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   182 0000036E 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   182 00000377 00                  <1>
   183 00000378 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   184 0000037C 0F85C2000000        <1>     jne .mcbFail
   185 00000382 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   186                              <1>     ;PCI hole always exists so this value will always be a dword
   187 00000386 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   188 0000038E 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   189 00000391 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   190 00000394 4881FB00000001      <1>     cmp rbx, 1000000h  
   191 0000039B 773C                <1>     ja .skipISA
   192                              <1> ;Here we deal with ISA hole issues
   193 0000039D B820E80000          <1>     mov eax, 0E820h
   194 000003A2 CD35                <1>     int 35h
   195 000003A4 48B800000001000000- <1>     mov rax, 1000000h
   195 000003AD 00                  <1>
   196 000003AE E871000000          <1>     call .mcbFindAddress
   197 000003B3 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   198 000003B9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   198 000003C2 00                  <1>
   199 000003C3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   200 000003C7 0F858A000000        <1>     jne mcbBuild  
   201 000003CD 488B5808            <1>     mov rbx, qword [rax + 8]
   202 000003D1 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   203                              <1> .skipISA:
   204 000003D9 B820E80000          <1>     mov eax, 0E820h
   205 000003DE CD35                <1>     int 35h
   206 000003E0 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   206 000003E9 00                  <1>
   207 000003EA E835000000          <1>     call .mcbFindAddress
   208 000003EF 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   209 000003F1 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   209 000003FA 00                  <1>
   210 000003FB 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   211 000003FF 7556                <1>     jne mcbBuild   
   212 00000401 488B5808            <1>     mov rbx, qword [rax + 8]
   213                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   214 00000405 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   214 0000040E 00                  <1>
   215 0000040F 4839CB              <1>     cmp rbx, rcx
   216 00000412 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   217 00000416 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   217 0000041B [1BC00300]          <1>
   218 0000041F E933000000          <1>     jmp mcbBuild
   219                              <1> .mcbFindAddress:
   220                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   221                              <1> ;Entry: rax = Address of arena to search for
   222                              <1> ;       rsi = Pointer to memory map
   223                              <1> ;       ecx = Number of 24 byte entries
   224                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   225                              <1> ;       CF=CY : value in rax not found
   226 00000424 56                  <1>     push rsi
   227 00000425 51                  <1>     push rcx
   228 00000426 50                  <1>     push rax
   229                              <1> .mfa0:
   230 00000427 483B06              <1>     cmp rax, qword [rsi]
   231 0000042A 7410                <1>     je .mcbAddressFound
   232 0000042C 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   233 00000433 FFC9                <1>     dec ecx
   234 00000435 79F0                <1>     jns .mfa0
   235                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   236 00000437 58                  <1>     pop rax
   237 00000438 59                  <1>     pop rcx
   238 00000439 5E                  <1>     pop rsi
   239 0000043A F9                  <1>     stc
   240 0000043B C3                  <1>     ret
   241                              <1> .mcbAddressFound:
   242 0000043C 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   243 0000043F 59                  <1>     pop rcx ;Pop old rax value off
   244 00000440 59                  <1>     pop rcx
   245 00000441 5E                  <1>     pop rsi
   246 00000442 F8                  <1>     clc
   247 00000443 C3                  <1>     ret
   248                              <1> .mcbFail:
   249 00000444 488D2DD20E0000      <1>     lea rbp, mcbFailmsg
   250 0000044B B804130000          <1>     mov eax, 1304h
   251 00000450 CD30                <1>     int 30h
   252 00000452 E9900E0000          <1>     jmp errorInit
   253                              <1> 
   254                              <1> mcbBuild:
   255                              <1> ;Actually build the MCB chain here
   256                              <1> ;Start by computing the difference between userbase and DOS area
   257                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   258 00000457 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   258 0000045C [08C00300]          <1>
   259 00000460 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   260 00000467 56                  <1>     push rsi    ;Save ptr
   261 00000468 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   262 0000046F 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   263 00000472 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   264 0000047A 5B                  <1>     pop rbx
   265 0000047B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   266 0000047E 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   267 00000486 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   268 0000048E C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   269 00000491 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   270 00000494 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   270 00000499 [39C00300]          <1>
   271                              <1> 
   272                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   273 0000049D 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   273 000004A5 00000000            <1>
   274 000004A9 746E                <1>     jz .skipISA
   275                              <1>     ;Here if an ISA hole exists, place a MCB around it
   276 000004AB 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   277                              <1>     ;Remove one MCB worth of space from alloc
   278 000004B2 31C9                <1>     xor ecx, ecx
   279 000004B4 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   280 000004B7 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   281 000004BD C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   282 000004C0 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   283 000004C3 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   284 000004C6 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   285 000004C9 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   286 000004D1 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   286 000004DA 00                  <1>
   287 000004DB 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   288 000004DE 480510000000        <1>     add rax, mcb_size
   289 000004E4 4829C1              <1>     sub rcx, rax    ;Take their difference
   290 000004E7 C1E904              <1>     shr ecx, 4
   291 000004EA 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   292 000004ED C1E104              <1>     shl ecx, 4  ;Get bytes again
   293 000004F0 4881C310000000      <1>     add rbx, mcb_size
   294 000004F7 4801CB              <1>     add rbx, rcx
   295                              <1>     ;RBX should now be at 16Mb
   296 000004FA C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   297 000004FD 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   298 00000505 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   299 0000050D C1E904              <1>     shr ecx, 4  ;Get paragraphs
   300 00000510 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   301 00000516 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   302                              <1> .skipISA:
   303                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   304                              <1>     ;rbx points to a block with "Z" marker
   305 00000519 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   305 00000521 00000000            <1>
   306 00000525 7470                <1>     jz .exit
   307                              <1>     ;Add PCI hole MCB
   308 00000527 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   309                              <1>     ;Remove one MCB worth of space from alloc
   310 0000052E 31C9                <1>     xor ecx, ecx
   311 00000530 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   312 00000533 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   313 00000539 C1E104              <1>     shl ecx, 4  ;Get bytes
   314 0000053C C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   315 0000053F 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   316 00000542 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   317 00000545 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   318 0000054D 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   318 00000556 00                  <1>
   319 00000557 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   320 0000055A 480510000000        <1>     add rax, mcb_size
   321 00000560 4829C1              <1>     sub rcx, rax    ;Take their difference
   322 00000563 C1E904              <1>     shr ecx, 4
   323 00000566 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   324 00000569 C1E104              <1>     shl ecx, 4  ;Get bytes again
   325 0000056C 4881C310000000      <1>     add rbx, mcb_size
   326 00000573 4801CB              <1>     add rbx, rcx
   327                              <1>     ;RBX should now be at 4Gb
   328 00000576 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   329 00000579 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   330 00000581 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   330 00000586 [1BC00300]          <1>
   331 0000058A 48C1E904            <1>     shr rcx, 4
   332 0000058E 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   333 00000594 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   334                              <1> .exit:
   335                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   336 00000597 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   337                              <1> ;------------------------------------------------;
   338                              <1> ;          Kernel inits and adjustments          ;
   339                              <1> ;------------------------------------------------;
   340                              <1> ;Adjust Interrupt Entries Int 00h-15h
   341                              <1> adjExceptions:
   342 0000059E 30DB                <1>     xor bl, bl
   343 000005A0 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   344 000005A5 CD35                <1>     int 35h
   345 000005A7 31C9                <1>     xor ecx, ecx    ;Start from interrupt 00h
   346 000005A9 488D3D230E0000      <1>     lea rdi, exceptData
   347 000005B0 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   348                              <1> .ai0:
   349 000005B2 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   350 000005B7 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   351 000005BA 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   352                              <1> .ai1:
   353 000005BD CD35                <1>     int 35h
   354 000005BF 4881C708000000      <1>     add rdi, 8
   355 000005C6 FFC1                <1>     inc ecx
   356 000005C8 81F915000000        <1>     cmp ecx, 21
   357 000005CE 75E2                <1>     jne .ai0
   358                              <1> ;Adjust Interrupt Entries Int 40h-49h
   359                              <1> adjInts:
   360 000005D0 B340                <1>     mov bl, 40h
   361 000005D2 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   362 000005D7 CD35                <1>     int 35h
   363 000005D9 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   364 000005DE 488D3D9E0E0000      <1>     lea rdi, intData
   365 000005E5 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   366                              <1> .ai0:
   367 000005E7 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   368 000005EC 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   369 000005EF 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   370                              <1> .ai1:
   371 000005F2 CD35                <1>     int 35h
   372 000005F4 4881C708000000      <1>     add rdi, 8
   373 000005FB FFC1                <1>     inc ecx
   374 000005FD 81F950000000        <1>     cmp ecx, 50h
   375 00000603 75E2                <1>     jne .ai0
   376                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   377                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   378                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   379                              <1>     %if DEBUG
   380                              <1> debugPopUpMsg:
   381                              <1>     push rbx
   382                              <1>     push rbp
   383                              <1>     push rcx
   384                              <1>     push rdx
   385                              <1>     mov ecx, 53 ;A large number of lines
   386                              <1>     xor edx, edx    ;COM 1
   387                              <1> .cls:
   388                              <1>     mov eax, 010Ah ;Transmit Line feed
   389                              <1>     int 34h
   390                              <1>     dec ecx
   391                              <1>     jnz .cls
   392                              <1>     lea rbx, qword [debPrintNullString + rbp]
   393                              <1>     lea rbp, .msg
   394                              <1>     call rbx
   395                              <1>     jmp short .exit
   396                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   397                              <1> .exit:
   398                              <1>     pop rdx
   399                              <1>     pop rcx
   400                              <1>     pop rbp
   401                              <1>     pop rbx
   402                              <1>     %endif
   403                              <1> 
   404                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   405 00000605 488D15DB0C0000      <1>     lea rdx, errorInit ;Get segment start address
   406 0000060C B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   407 00000611 CD41                <1>     int 41h
   408 00000613 488D15CD0C0000      <1>     lea rdx, errorInit ;Get segment start address
   409 0000061A B844250000          <1>     mov eax, 2544h
   410 0000061F CD41                <1>     int 41h
   411                              <1> ;------------------------------------------------;
   412                              <1> ;          Driver Adjustments and inits          ;
   413                              <1> ;------------------------------------------------;
   414                              <1> ;Modify the pointers in nData before putting them in the data area
   415 00000621 48012DDB0E0000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   416 00000628 48012DDE0E0000      <1>     add qword [nData + drvHdr.strPtr], rbp
   417 0000062F 48012DDF0E0000      <1>     add qword [nData + drvHdr.intPtr], rbp
   418                              <1> ;Copy the Null driver to its location in Sysvars
   419 00000636 B922000000          <1>     mov ecx, drvHdr_size
   420 0000063B 488D35C10E0000      <1>     lea rsi, qword [nData]
   421 00000642 488DBD[80C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   422 00000649 F3A4                <1>     rep movsb   
   423                              <1> 
   424                              <1> ;Adjust the addresses in the other driver headers 
   425 0000064B 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   425 0000064D [D96F000000000000]  <1>
   426 00000655 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   427 0000065A 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   428                              <1> adjDrivers:
   429 0000065E E8680C0000          <1>     call adjustDrvHdr
   430 00000663 E2F9                <1>     loop adjDrivers
   431                              <1> ;Open NUL
   432                              <1> ;NUL opened
   433                              <1> ;Open CON
   434                              <1> conInit:    ;Rather than keeping this resident... do it here
   435                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   436 00000665 488D95[C4720000]    <1>     lea rdx, qword [rbp + fastOutput]
   437 0000066C B849250000          <1>     mov eax, 2549h
   438 00000671 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   439 00000673 488D95[CC720000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   440 0000067A B83B250000          <1>     mov eax, 253Bh
   441 0000067F CD41                <1>     int 41h ;Hook int 3Bh
   442                              <1> .ci0:
   443 00000681 B401                <1>     mov ah, 01      ;Get buffer status
   444 00000683 CD36                <1>     int 36h
   445 00000685 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   446 00000687 30E4                <1>     xor ah, ah
   447 00000689 CD36                <1>     int 36h ;Read key to flush from buffer
   448 0000068B EBF4                <1>     jmp short .ci0
   449                              <1> .ci1:
   450 0000068D B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   451 00000692 CD30                <1>     int 30h
   452 00000694 B402                <1>     mov ah, 02h
   453 00000696 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   454 00000698 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   455 0000069A CD30                <1>     int 30h
   456 0000069C B707                <1>     mov bh, 07h     ;Grey/Black attribs
   457 0000069E B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   458 000006A3 CD30                <1>     int 30h
   459                              <1> 
   460                              <1>     ;Save ptr to ConHdr in Sysvars
   461 000006A5 488D85[D96F0000]    <1>     lea rax, qword [rbp + conHdr]
   462 000006AC 6448890425-         <1>     mov qword fs:[vConPtr], rax
   462 000006B1 [59C00300]          <1>
   463                              <1> 
   464                              <1>     ;Fix the ext ESC function handler address
   465 000006B5 488D85[95240000]    <1>     lea rax, qword [rbp + editKeys]
   466 000006BC 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   466 000006C1 [5A000000]          <1>
   467                              <1> 
   468                              <1> ;CLOCK init prock
   469                              <1> ;Set the time and date using the RTC (if present)
   470                              <1> clkInit:
   471                              <1>    ;Save ptr to ClkHdr in Sysvars first
   472 000006C5 488D85[3F700000]    <1>     lea rax, qword [rbp + clkHdr]
   473 000006CC 6448890425-         <1>     mov qword fs:[clockPtr], rax
   473 000006D1 [51C00300]          <1>
   474                              <1> ;CH - Hours, in BCD
   475                              <1> ;CL - Minutes, in BCD
   476                              <1> ;DH - Seconds, in BCD
   477 000006D5 B402                <1>     mov ah, 02  ;Read RTC Time
   478 000006D7 CD3A                <1>     int 3Ah
   479 000006D9 7271                <1>     jc .clkEnd  ;if error, just exit
   480                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   481 000006DB 0FB6C5              <1>     movzx eax, ch   ;Hours
   482 000006DE E84D000000          <1>     call .bcd2Bin
   483 000006E3 88C5                <1>     mov ch, al
   484 000006E5 0FB6C1              <1>     movzx eax, cl     ;Mins
   485 000006E8 E843000000          <1>     call .bcd2Bin
   486 000006ED 88C1                <1>     mov cl, al
   487 000006EF 0FB6C6              <1>     movzx eax, dh   ;Seconds
   488 000006F2 E839000000          <1>     call .bcd2Bin
   489 000006F7 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   490 000006F9 89C2                <1>     mov edx, eax
   491 000006FB B42D                <1>     mov ah, 2Dh ;DOS Set Time
   492 000006FD CD41                <1>     int 41h
   493                              <1> ;Now get the date from RTC
   494                              <1> ;CL - Year, in BCD
   495                              <1> ;DH - Month, in BCD
   496                              <1> ;DL - Day, in BCD
   497 000006FF B404                <1>     mov ah, 04  ;Read RTC Date
   498 00000701 CD3A                <1>     int 3Ah
   499 00000703 7247                <1>     jc .clkEnd
   500                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   501 00000705 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   502 00000708 E823000000          <1>     call .bcd2Bin
   503 0000070D 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   504 00000710 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   505 00000716 0FB6C6              <1>     movzx eax, dh   ;Get Months
   506 00000719 E812000000          <1>     call .bcd2Bin
   507 0000071E 88C6                <1>     mov dh, al  
   508 00000720 0FB6C2              <1>     movzx eax, dl   ;Get day
   509 00000723 E808000000          <1>     call .bcd2Bin
   510 00000728 88C2                <1>     mov dl, al
   511 0000072A B42B                <1>     mov ah, 2Bh ;DOS Set Date
   512 0000072C CD41                <1>     int 41h
   513 0000072E EB1C                <1>     jmp short .clkEnd
   514                              <1> .bcd2Bin:
   515                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   516 00000730 51                  <1>     push rcx
   517 00000731 89C1                <1>     mov ecx, eax
   518 00000733 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   519 00000738 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   520 0000073E 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   521 00000741 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   522                              <1> .b2blp:
   523 00000744 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   524 00000746 FFC9                <1>     dec ecx
   525 00000748 75FA                <1>     jnz .b2blp
   526                              <1> .b2bexit:
   527 0000074A 59                  <1>     pop rcx
   528 0000074B C3                  <1>     ret
   529                              <1> .clkEnd:
   530                              <1> ;------------------------------------------------;
   531                              <1> ;         Link DOS to temporary Buffer           ;
   532                              <1> ;------------------------------------------------;
   533                              <1> tempBufferInit:
   534 0000074C 488DBD[E0020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   535 00000753 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   535 00000758 [63C00300]          <1>
   536 0000075C 31C0                <1>     xor eax, eax
   537 0000075E 48FFC8              <1>     dec rax
   538 00000761 48AB                <1>     stosq   ;.nextBufPtr, end of list
   539 00000763 AA                  <1>     stosb   ;.driveNumber, Free entry
   540 00000764 48FFC0              <1>     inc rax
   541 00000767 AA                  <1>     stosb   ;.bufferFlags, No flags
   542                              <1> ;------------------------------------------------;
   543                              <1> ;         Init msd driver, create DPB            ;
   544                              <1> ;------------------------------------------------;
   545                              <1> storageInits:
   546                              <1> ;First save dpb pointer in sysvars
   547 00000768 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   548 0000076F 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   548 00000774 [41C00300]          <1>
   549                              <1> ;Open Mass Storage
   550 00000778 E8A80D0000          <1>     call diskInit
   551 0000077D 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   552 00000780 648A0425[7DC00300]  <1>     mov al, byte fs:[numPhysVol]
   553 00000788 84C0                <1>     test al, al ;If no media with valid filesystems were detected, stop boot
   554 0000078A 0F84570B0000        <1>     jz errorInit
   555 00000790 488D95[C0790000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   556 00000797 30C9                <1>     xor cl, cl  ;Clear counter
   557 00000799 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   557 0000079E [41C00300]          <1>
   558                              <1> .si0:   
   559 000007A2 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   560 000007A5 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   561 000007A7 CD41                <1>     int 41h
   562                              <1> ;Add other data to DPB
   563 000007A9 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   564 000007AC 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   565 000007AF 50                  <1>     push rax
   566 000007B0 488D87[61700000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   567 000007B7 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   568 000007BB 58                  <1>     pop rax
   569 000007BC FEC1                <1>     inc cl
   570 000007BE 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   571 000007C0 7416                <1>     je .si1
   572 000007C2 50                  <1>     push rax
   573 000007C3 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   574 000007C7 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   575 000007CB 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   576 000007CE 58                  <1>     pop rax
   577 000007CF 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   578 000007D6 EBCA                <1>     jmp short .si0
   579                              <1> .si1:
   580                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   581 000007D8 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   582 000007E0 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   583                              <1> ;------------------------------------------------;
   584                              <1> ;          Find largest sector size              ;
   585                              <1> ;------------------------------------------------;
   586                              <1> sectorSizeSearch:
   587                              <1> ;Done by reading BPB's for each drive
   588 000007E3 488D9D[C0790000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   589                              <1>     
   590                              <1>     ;Go thru each block individually
   591 000007EA 31C0                <1>     xor eax, eax
   592 000007EC 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   593                              <1> .findLargest:
   594 000007EF 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   595 000007F3 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   596 000007F8 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   597 000007FF 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   598 00000802 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   599 00000805 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   600 00000807 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   600 0000080C [61C00300]          <1>
   601                              <1> ;------------------------------------------------;
   602                              <1> ;                CDS array inits                 ;
   603                              <1> ;------------------------------------------------;
   604 00000810 B905000000          <1>     mov ecx, 5    ;Use as a counter, build 5 CDS entries
   605 00000815 488DBD[19010000]    <1>     lea rdi, qword [rbp + cdsArray] ;Setup array
   606 0000081C E802000000          <1>     call makeCDSArray
   607 00000821 EB50                <1>     jmp short initialCDSWritten ;Go past the function
   608                              <1> makeCDSArray:
   609                              <1> ;Input: ecx = Size of array
   610                              <1> ;       rdi = Pointer to the start of the CDS array
   611                              <1> ;Ouput: rdi = first byte past the end of the table
   612 00000823 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   612 00000828 [6BC00300]          <1>
   613 0000082C 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   613 00000831 [41C00300]          <1>
   614 00000835 B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   615                              <1> .tempCDS:
   616 0000083A 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   617 0000083C 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   618 00000840 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   619 00000847 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   620 0000084D 31D2                <1>     xor edx, edx    ;Use edx for flags
   621 0000084F 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   622 00000856 7409                <1>     je .skipValidCDS
   623 00000858 BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   624 0000085D 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   625                              <1> .skipValidCDS:
   626 00000861 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   627 00000865 FFC0                <1>     inc eax ;Increment the drive letter
   628 00000867 4881C75B000000      <1>     add rdi, cds_size   ;Goto next array entry
   629 0000086E FFC9                <1>     dec ecx
   630 00000870 75C8                <1>     jnz .tempCDS
   631 00000872 C3                  <1>     ret
   632                              <1> initialCDSWritten:
   633                              <1> ;------------------------------------------------;
   634                              <1> ;     Set up general PSP areas and DOS vars      ;
   635                              <1> ;------------------------------------------------;
   636                              <1> ;Additional DOS Vars init and fixups
   637 00000873 64C60425[FEC30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   637 0000087B FF                  <1>
   638 0000087C 64C60425[C6C30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   638 00000884 2F                  <1>
   639 00000885 488DBD[D1010000]    <1>     lea rdi, qword [rbp + extAsciiTbl]  ;Get the load of dflt extascii tbl
   640 0000088C 6448893C25-         <1>     mov qword fs:[ctryTbl + countryStruc.mapaddr], rdi ;Store in country table
   640 00000891 [2E000000]          <1>
   641                              <1> 
   642                              <1> ;Server Table setup
   643 00000895 488D3D(F5030000)    <1>     lea rdi, serverDispTbl  ;Get pointer to table
   644 0000089C 48893D(7CDA0300)    <1>     mov qword [serverDispTblPtr], rdi   ;Store to use
   645                              <1> 
   646                              <1> ;Set network machine name to... nothing!
   647 000008A3 488DBD[CBC30300]    <1>     lea rdi, qword [rbp + machineName]
   648 000008AA B910000000          <1>     mov ecx, 10h    ;16 chars long
   649 000008AF B020                <1>     mov al, SPC ;Space char
   650 000008B1 F3AA                <1>     rep stosb   ;Fill with space chars
   651                              <1> 
   652                              <1> 
   653                              <1> ;Patch Data Table init
   654 000008B3 488DBD[DBC30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   655 000008BA 488D85[B1670000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   656 000008C1 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   657 000008C3 488D85[BB670000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   658 000008CA 48AB                <1>     stosq
   659 000008CC 488D85[C5670000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   660 000008D3 48AB                <1>     stosq
   661 000008D5 488D85[CF670000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   662 000008DC 48AB                <1>     stosq
   663                              <1> 
   664                              <1> ;Initial PSP Init
   665 000008DE 488D1D1BF8FFFF      <1>     lea rbx, qword [tempPSP]
   666 000008E5 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   666 000008EA [14C40300]          <1>
   667 000008EE 53                  <1>     push rbx
   668 000008EF 4881C380000000      <1>     add rbx, psp.dta
   669 000008F6 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   669 000008FB [0CC40300]          <1>
   670 000008FF 5B                  <1>     pop rbx
   671 00000900 66C703CD40          <1>     mov word [rbx + psp.return], 040CDh ;DOS return function
   672 00000905 66C74350CD41        <1>     mov word [rbx + psp.unixEntry], 041CDh  ;Int 41h!
   673 0000090B C64352CB            <1>     mov byte [rbx + psp.unixEntry + 2], 0CBh    ;Return!
   674 0000090F 48C7430200000000    <1>     mov qword [rbx + psp.allocSize], 0    ;Size of allocation (dummy value)
   675 00000917 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   676 0000091B 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   677 0000091F 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   678 00000923 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   678 0000092C FF                  <1>
   679 0000092D 48AB                <1>     stosq   ;8 bytes
   680 0000092F 31C0                <1>     xor eax, eax
   681 00000931 50                  <1>     push rax    ;Save 0 on the stack
   682 00000932 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   683 00000935 48AB                <1>     stosq   ;16 bytes
   684 00000937 AB                  <1>     stosd   ;20 bytes
   685 00000938 58                  <1>     pop rax ;Get 0 back
   686 00000939 4889433E            <1>     mov qword [rbx + psp.envPtr], rax    ;No environment
   687 0000093D 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   688 00000941 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   689 00000945 4889DA              <1>     mov rdx, rbx
   690 00000948 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   691 0000094D CD41                <1>     int 41h
   692 0000094F 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   693 00000953 B843350000          <1>     mov eax, 3543h
   694 00000958 CD41                <1>     int 41h
   695 0000095A 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   696 0000095E B844350000          <1>     mov eax, 3544h
   697 00000963 CD41                <1>     int 41h
   698 00000965 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   699                              <1> 
   700 00000969 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   701 0000096E 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   702 00000972 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   703                              <1> ;------------------------------------------------;
   704                              <1> ;          Default File Handle Creation          ;
   705                              <1> ;                                                ;
   706                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   707                              <1> ;------------------------------------------------;
   708                              <1> defaultFileHandles:
   709                              <1> ;Fill in the default file table entries
   710 00000974 488D9D[2CC10300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   711 0000097B 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   712 00000982 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   713 00000988 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   713 0000098D [49C00300]          <1>
   714 00000991 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   714 0000099A 20                  <1>
   715                              <1> ;GOTO FIRST FILE 
   716 0000099B 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   717                              <1> ;Write AUX
   718 000009A2 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   719 000009A7 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   720 000009AD C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   721 000009B1 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   722                              <1>     ;No EOF when reading from the device
   723 000009B5 488B85[FB6F0000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   724 000009BC 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   725                              <1>     ;Ignore disk related fields and Date/Time of open
   726 000009C0 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   727                              <1>     ;11 chars in 8.3 name
   728 000009C4 488D35C6090000      <1>     lea rsi, auxName
   729 000009CB B903000000          <1>     mov ecx, 3
   730 000009D0 F3A4                <1>     rep movsb   ;Move the three bytes
   731 000009D2 4889D0              <1>     mov rax, rdx
   732 000009D5 48AB                <1>     stosq   ;Eight spaces left to print
   733 000009D7 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   733 000009DC [14C40300]          <1>
   734 000009E0 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   735                              <1> ;GOTO NEXT ENTRY
   736 000009E4 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   737                              <1>     ;Write CON
   738 000009EB 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   739 000009F0 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   740 000009F6 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   741 000009FA C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   742                              <1>     ;No EOF when reading from the device
   743 000009FE 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   743 00000A03 [59C00300]          <1>
   744 00000A07 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   745                              <1>     ;Ignore disk related fields and Date/Time of open
   746 00000A0B 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   747                              <1>     ;11 chars in 8.3 name
   748 00000A0F 488D3577090000      <1>     lea rsi, conName
   749 00000A16 B903000000          <1>     mov ecx, 3
   750 00000A1B F3A4                <1>     rep movsb   ;Move the three bytes
   751 00000A1D 4889D0              <1>     mov rax, rdx
   752 00000A20 48AB                <1>     stosq   ;Eight spaces left to print
   753 00000A22 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   753 00000A27 [14C40300]          <1>
   754 00000A2B 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   755                              <1> ;GOTO NEXT ENTRY
   756 00000A2F 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   757                              <1> ;Write PRN
   758 00000A36 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   759 00000A3B 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   760 00000A41 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   761 00000A45 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   762                              <1>     ;Want EOF when reading from to the device
   763 00000A49 488B85[1D700000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   764 00000A50 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   765                              <1>     ;Ignore disk related fields and Date/Time of open
   766 00000A54 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   767                              <1>     ;11 chars in 8.3 name
   768 00000A58 488D3536090000      <1>     lea rsi, prnName
   769 00000A5F B903000000          <1>     mov ecx, 3
   770 00000A64 F3A4                <1>     rep movsb   ;Move the three bytes
   771 00000A66 4889D0              <1>     mov rax, rdx
   772 00000A69 48AB                <1>     stosq   ;Eight spaces left to print
   773 00000A6B 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   773 00000A70 [14C40300]          <1>
   774 00000A74 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   775                              <1> ;Zero word 0 of entry 4 and 5
   776 00000A78 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   777 00000A7F 31C0                <1>     xor eax, eax
   778                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   779                              <1>     ; which is ok as these are empty entries, ready to be used)
   780 00000A81 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   781 00000A83 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   782 00000A8A 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   783                              <1> ;------------------------------------------------;
   784                              <1> ;              Setup DLLMGR Hooks                ;
   785                              <1> ;------------------------------------------------;   
   786 00000A8C 488DBD[A4C00300]    <1>     lea rdi, qword [rbp + dllHooks]
   787 00000A93 488D85[9C6E0000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = CY
   788 00000A9A 48AB                <1>     stosq
   789 00000A9C 48AB                <1>     stosq
   790                              <1> ;------------------------------------------------;
   791                              <1> ;               Setup Share Hooks                ;
   792                              <1> ;------------------------------------------------;
   793 00000A9E 488DBD[B4C00300]    <1>     lea rdi, qword [rbp + shareHooks]
   794 00000AA5 488D9D[9C6E0000]    <1>     lea rbx, qword [rbp + goodDfltShareHook]
   795 00000AAC 488D85[966E0000]    <1>     lea rax, qword [rbp + badDfltShareHook]
   796 00000AB3 48AB                <1>     stosq   ;Store bad for openFileCheck
   797 00000AB5 4893                <1>     xchg rax, rbx
   798 00000AB7 48AB                <1>     stosq   ;Store good for open
   799 00000AB9 48AB                <1>     stosq   ;Store good for close
   800 00000ABB 4893                <1>     xchg rax, rbx
   801                              <1> ;Store bad for close for machine, task, name, lock and unlock file
   802 00000ABD B905000000          <1>     mov ecx, 5
   803 00000AC2 F348AB              <1>     rep stosq
   804 00000AC5 4893                <1>     xchg rax, rbx
   805 00000AC7 48AB                <1>     stosq   ;Store good for check file lock exists
   806 00000AC9 4893                <1>     xchg rax, rbx
   807                              <1> ;Store bad for open file, update fcb from sft and get fst cluster of fcb
   808 00000ACB B903000000          <1>     mov ecx, 3
   809 00000AD0 F348AB              <1>     rep stosq
   810 00000AD3 4893                <1>     xchg rax, rbx
   811 00000AD5 48AB                <1>     stosq   ;Store good for close dup file share
   812 00000AD7 4893                <1>     xchg rax, rbx
   813 00000AD9 48AB                <1>     stosq   ;Store bad for close handles for new file opened 
   814 00000ADB 48AB                <1>     stosq   ;Store bad for update dir information
   815                              <1> ;------------------------------------------------;
   816                              <1> ;             Print Welcome Message              ;
   817                              <1> ;------------------------------------------------;
   818 00000ADD 488D1523080000      <1>     lea rdx, strtmsg
   819 00000AE4 B409                <1>     mov ah, 09h
   820 00000AE6 CD41                <1>     int 41h    
   821                              <1> ;------------------------------------------------;
   822                              <1> ;               Load CONFIG.SYS                  ;
   823                              <1> ;------------------------------------------------;
   824                              <1> ;Setup stackframe, workout base 
   825 00000AE8 488DBD[45000000]    <1>     lea rdi, qword [rbp + secondDPB]
   826                              <1>     ;Check if this DPB is the last dpb. The first two ALWAYS exist.
   827 00000AEF 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   828 00000AF3 483DFFFFFFFF        <1>     cmp rax, -1 ;Was second DPB the last one?
   829 00000AF9 7421                <1>     je setupFrame   ;If so, jump
   830 00000AFB 4889C7              <1>     mov rdi, rax    ;Move rdi to thirdDPB
   831 00000AFE 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   832 00000B02 483DFFFFFFFF        <1>     cmp rax, -1 ;Was third DPB the last one?
   833 00000B08 7412                <1>     je setupFrame   ;If so, jump
   834 00000B0A 4889C7              <1>     mov rdi, rax    ;Move rdi to fourthDPB
   835 00000B0D 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   836 00000B11 483DFFFFFFFF        <1>     cmp rax, -1 ;Was fourth DPB the last one?
   837 00000B17 7403                <1>     je setupFrame   ;If so, jump
   838 00000B19 4889C7              <1>     mov rdi, rax    ;Move rdi to fifthDPB
   839                              <1> setupFrame:
   840 00000B1C 4881C735000000      <1>     add rdi, dpb_size   ;Else, goto end of the dpb rdi points to
   841 00000B23 55                  <1>     push rbp
   842 00000B24 4889E5              <1>     mov rbp, rsp
   843 00000B27 4881EC68000000      <1>     sub rsp, cfgFrame_size
   844 00000B2E 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Store the end pointer here
   845 00000B32 48C745F81E000000    <1>     mov qword [rbp - cfgFrame.newBuffers], buffersDefault
   846 00000B3A 48C745F014000000    <1>     mov qword [rbp - cfgFrame.newSFTVal], filesDefault
   847 00000B42 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   848 00000B4A 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   849 00000B52 48C745D805000000    <1>     mov qword [rbp - cfgFrame.newLastdrive], lastDriveDeflt
   850                              <1> 
   851 00000B5A 648A0425[10C00300]  <1>     mov al, byte fs:[bootDrive]
   852 00000B62 A880                <1>     test al, 80h    ;Was boot drive hard disk?
   853 00000B64 7406                <1>     jz notHDD
   854                              <1> ;Set Current Drive to C:
   855 00000B66 B202                <1>     mov dl, 2
   856 00000B68 B40E                <1>     mov ah, 0Eh ;Select C: Drive
   857 00000B6A CD41                <1>     int 41h
   858                              <1> notHDD:
   859 00000B6C 488D1526080000      <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   860 00000B73 B43D                <1>     mov ah, 3Dh ;Open file for reading
   861 00000B75 B000                <1>     mov al, ReadAccess
   862 00000B77 CD41                <1>     int 41h
   863 00000B79 0F8267050000        <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   864                              <1> ;------------------------------------------------;
   865                              <1> ;              Process CONFIG.SYS                ;
   866                              <1> ;------------------------------------------------;
   867                              <1> ;Create a stack frame with the following order.
   868                              <1> ;Values greater than max are set to max. Values less than min are set to min.
   869                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
   870                              <1> ; New SFT value.            Default = 20, Min = 8, Max = 254
   871                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
   872                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
   873                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
   874                              <1> ;
   875                              <1> ;Remember to maintain the base of occupied memory on stack (endPtr)
   876                              <1> ;-------------------------------------------------------------------------;
   877                              <1> ; CONFIG.SYS processing pseudocode:-
   878                              <1> ;
   879                              <1> ; _START:
   880                              <1> ; Read file one byte at a time a until a EOF or CR encountered.
   881                              <1> ; If (EOF encountered)
   882                              <1> ;   Insert a terminating ^Z to the end of the line. 
   883                              <1> ;   Close handle.
   884                              <1> ; Parse the line from beginning looking for a DOS terminating char.
   885                              <1> ;   If (CR or EOF encoutered before terminating char)
   886                              <1> ;       Bad line error msg. 
   887                              <1> ;       If (CR encountered)
   888                              <1> ;           Goto _START
   889                              <1> ;       Else
   890                              <1> ;           Goto _EXIT
   891                              <1> ;   Else 
   892                              <1> ;       If (Keyword AND not DEVICE) 
   893                              <1> ;           Store it's value on stack or change internal variable value
   894                              <1> ;       If (DEVICE)
   895                              <1> ;           Move endPtr after end of line and try load the driver.
   896                              <1> ;           If (driver doesn't exist or fails to init)
   897                              <1> ;               print bad driver error msg.
   898                              <1> ;       Else 
   899                              <1> ;           Bad line error msg
   900                              <1> ;       If (line terminated by CR)
   901                              <1> ;           Goto _START
   902                              <1> ; _EXIT:
   903                              <1> ;-------------------------------------------------------------------------;
   904                              <1> ; Note:
   905                              <1> ; If driver a Block Device Driver, build all the DPB's for it (up until max)
   906                              <1> ;   directly after the driver pointer as returned by the driver. Then, 
   907                              <1> ;   adjust the memory pointer and start loading next line.
   908                              <1> ;   The space marked as "endPtr" can be used as a buffer by the disk buffers.
   909                              <1> ; Once EOF has been reached, we jmp to noCfg which configures the other
   910                              <1> ;   data structures according to the values on the stack frame.
   911                              <1> ;-------------------------------------------------------------------------;
   912                              <1> ;Start CONFIG.SYS parsing here
   913                              <1> configParse:
   914 00000B7F 488945B8            <1>     mov qword [rbp - cfgFrame.cfgHandle], rax
   915 00000B83 48C745B000000000    <1>     mov qword [rbp - cfgFrame.lastLine], 0
   916                              <1> .newLine:
   917                              <1> ;Keeps the new line unless a DEVICE= command read it, which adjusts endPtr
   918 00000B8B 488B55A8            <1>     mov rdx, qword [rbp - cfgFrame.endPtr]  ;Start reading into here
   919 00000B8F 488955A0            <1>     mov qword [rbp - cfgFrame.linePtr], rdx	;Use var for start of line ptr
   920                              <1> .nextChar:
   921 00000B93 488B5DB8            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into ebx
   922 00000B97 6681FBFFFF          <1>     cmp bx, -1
   923 00000B9C 0F84D4000000        <1>     je .stopProcessError
   924 00000BA2 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   925 00000BA7 B901000000          <1>     mov ecx, 1  ;Read one byte
   926 00000BAC CD41                <1>     int 41h
   927 00000BAE 0F82C2000000        <1>     jc .stopProcessError
   928 00000BB4 85C9                <1>     test ecx, ecx	;If this is zero, EOF reached
   929 00000BB6 7508                <1>     jnz .notEOF
   930 00000BB8 48C745B0FFFFFFFF    <1>     mov qword [rbp - cfgFrame.lastLine], -1	;Note we are at EOF
   931                              <1> .notEOF:
   932 00000BC0 48FF45A8            <1>     inc qword [rbp - cfgFrame.endPtr]	;Goto next byte
   933 00000BC4 0FB602              <1>     movzx eax, byte [rdx]
   934 00000BC7 3C0D                <1>     cmp al, CR
   935 00000BC9 741C                <1>     je .endOfLine
   936 00000BCB 3C0A                <1>     cmp al, LF
   937 00000BCD 7418                <1>     je .endOfLine
   938 00000BCF 3C61                <1>     cmp al, "a"
   939 00000BD1 720F                <1>     jb .notChar
   940 00000BD3 3C7A                <1>     cmp al, "z"
   941 00000BD5 770B                <1>     ja .notChar
   942 00000BD7 50                  <1>     push rax    ;Push rax on stack as the argument to normalise
   943 00000BD8 B813120000          <1>     mov eax, 1213h  ;Uppercase the char
   944 00000BDD CD4F                <1>     int 4fh
   945 00000BDF 8802                <1>     mov byte [rdx], al  ;Replace the char with the capitalised form
   946 00000BE1 58                  <1>     pop rax ;Pop into rax to renormalise the stack
   947                              <1> .notChar:
   948 00000BE2 48FFC2              <1>     inc rdx ;Now move our local pointer to the next byte
   949 00000BE5 EBAC                <1>     jmp short .nextChar
   950                              <1> .endOfLine:
   951                              <1> ;rdx points to terminating char
   952                              <1> ;First find the length of the instruction word
   953 00000BE7 31C9                <1>     xor ecx, ecx
   954                              <1> .cmdNameLenGet:
   955 00000BE9 AC                  <1>     lodsb
   956 00000BEA E875000000          <1>     call .isCharTerminal
   957 00000BEF 740A                <1>     jz .endOfCommandFound
   958 00000BF1 FFC1                <1>     inc ecx
   959 00000BF3 81F90A000000        <1>     cmp ecx, 10 ;If shorter than longest command, keep looping
   960 00000BF9 72EE                <1>     jb .cmdNameLenGet
   961                              <1> ;Else, fall through in error
   962                              <1> .endOfCommandFound:
   963                              <1> ;ecx has the length of the command
   964 00000BFB 81F90A000000        <1>     cmp ecx, 10
   965 00000C01 7473                <1>     je .stopProcessError
   966 00000C03 488D3DCE000000      <1>     lea rdi, .keyTbl ;Put rdi at the table to search for
   967                              <1> .cmdSearch:
   968 00000C0A 803FFF              <1>     cmp byte [rdi], -1
   969 00000C0D 7467                <1>     je .stopProcessError
   970 00000C0F 380F                <1>     cmp byte [rdi], cl
   971 00000C11 7544                <1>     jne .gotoNextCmd
   972                              <1>     ;Candidate command found, check said command is the command we want
   973 00000C13 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   974 00000C17 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Error?
   975 00000C1E 7456                <1>     je .stopProcessError
   976 00000C20 57                  <1>     push rdi
   977 00000C21 51                  <1>     push rcx
   978 00000C22 48FFC7              <1>     inc rdi ;Go to next char
   979 00000C25 F3A6                <1>     repe cmpsb  ;Compare whilst the strings are equal
   980 00000C27 59                  <1>     pop rcx
   981 00000C28 5F                  <1>     pop rdi
   982 00000C29 752C                <1>     jne .gotoNextCmd    ;If not equal, just goto next command
   983                              <1>     ;Else, rdi + rcx points to the word ptr of the function
   984                              <1>     ;rdx points to the terminating char of the line 
   985 00000C2B 52                  <1>     push rdx    ;This is to know whether we continue processing or end now
   986 00000C2C 488D35A5000000      <1>     lea rsi, .keyTbl
   987 00000C33 4889F0              <1>     mov rax, rsi    ;Keep a copy in rax
   988 00000C36 4803740F01          <1>     add rsi, qword [rdi + rcx + 1]  ;This is the offset from .keyTbl
   989 00000C3B 4801C6              <1>     add rsi, rax    ;So add the EA of the head of the tbl before calling
   990 00000C3E F8                  <1>     clc ;Esure flags are happy before entering
   991 00000C3F FFD6                <1>     call rsi    ;Call this function
   992 00000C41 5A                  <1>     pop rdx
   993 00000C42 7232                <1>     jc .stopProcessError    ;If the function returns CF=CY, error exit
   994 00000C44 48F745B0FFFFFFFF    <1>     test qword [rbp - cfgFrame.lastLine], -1 ;If we concluded at EOF, exit
   995 00000C4C 0F8589040000        <1>     jnz .cfgExit
   996 00000C52 E934FFFFFF          <1>     jmp .newLine
   997                              <1> .gotoNextCmd:
   998 00000C57 0FB607              <1>     movzx eax, byte [rdi]
   999 00000C5A 0503000000          <1>     add eax, 3
  1000 00000C5F 4801C7              <1>     add rdi, rax
  1001 00000C62 EBA6                <1>     jmp short .cmdSearch
  1002                              <1> .isCharTerminal:
  1003                              <1> ;Input: AL = Char to check
  1004                              <1> ;Output: ZF=ZE -> Char terminal
  1005                              <1> ;        ZF=NZ -> Char not terminal
  1006 00000C64 3C3D                <1>     cmp al, "="
  1007                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39 00000C66 7501                <3>  j%-1 short %%a
    40                              <3>  return
    18                              <4> %%_ret:
    19 00000C68 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    41                              <3> %%a:
    42                              <3>  %endif
  1008 00000C69 3C20                <1>     cmp al, SPC
  1009                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C6B 74(68)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1010 00000C6D 3C09                <1>     cmp al, TAB
  1011                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C6F 74(68)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1012 00000C71 3C3B                <1>     cmp al, ";"
  1013                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C73 74(68)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1014                              <1>     return
    18                              <2> %%_ret:
    19 00000C75 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1015                              <1> .stopProcessError:
  1016 00000C76 488D1534000000      <1>     lea rdx, .speLine
  1017 00000C7D B800090000          <1>     mov eax, 0900h
  1018 00000C82 CD41                <1>     int 41h
  1019                              <1>     ;Reset all values to default
  1020 00000C84 48C745F81E000000    <1>     mov qword [rbp - cfgFrame.newBuffers], buffersDefault
  1021 00000C8C 48C745F014000000    <1>     mov qword [rbp - cfgFrame.newSFTVal], filesDefault
  1022 00000C94 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
  1023 00000C9C 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
  1024 00000CA4 48C745D805000000    <1>     mov qword [rbp - cfgFrame.newLastdrive], lastDriveDeflt
  1025 00000CAC E92A040000          <1>     jmp .cfgExit
  1026 00000CB1 0D0A556E7265636F67- <1> .speLine:   db CR,LF,"Unrecognised command in CONFIG.SYS",CR,LF,"$"
  1026 00000CBA 6E6973656420636F6D- <1>
  1026 00000CC3 6D616E6420696E2043- <1>
  1026 00000CCC 4F4E4649472E535953- <1>
  1026 00000CD5 0D0A24              <1>
  1027                              <1> .keyTbl: 
  1028 00000CD8 05425245414B        <1>     db 5, "BREAK"           ;DONE
  1029 00000CDE 5D00                <1> 	dw .breakHandler - .keyTbl
  1030 00000CE0 0742554646455253    <1>     db 7, "BUFFERS"         ;DONE
  1031 00000CE8 8A00                <1> 	dw .bufHandler - .keyTbl
  1032 00000CEA 07434F554E545259    <1> 	db 7, "COUNTRY"         ;Ignored for now
  1033 00000CF2 FC00                <1> 	dw .countryScan - .keyTbl
  1034 00000CF4 06444556494345      <1> 	db 6, "DEVICE"          ;DONE
  1035 00000CFB FD00                <1> 	dw .drvLoader - .keyTbl
  1036 00000CFD 0446434253          <1> 	db 4, "FCBS"            ;DONE (to be ignored for a while now)
  1037 00000D02 2B03                <1> 	dw .fcbHandler - .keyTbl
  1038 00000D04 0546494C4553        <1> 	db 5, "FILES"           ;DONE
  1039 00000D0A 2C03                <1> 	dw .sftHandler - .keyTbl
  1040 00000D0C 094C41535444524956- <1> 	db 9, "LASTDRIVE"       ;DONE
  1040 00000D15 45                  <1>
  1041 00000D16 B203                <1> 	dw .lastdriveHandler - .keyTbl
  1042 00000D18 055348454C4C        <1> 	db 5, "SHELL"           ;Ignored for now
  1043 00000D1E 0004                <1> 	dw .shellHandler - .keyTbl
  1044 00000D20 06535441434B53      <1> 	db 6, "STACKS"          ;Ignored for now
  1045 00000D27 0104                <1> 	dw .stacksHandler - .keyTbl
  1046 00000D29 08445249565041524D  <1>     db 8, "DRIVPARM"
  1047 00000D32 0204                <1>     dw .drivParm - .keyTbl  ;Ignored for now
  1048 00000D34 FF                  <1> 	db -1	;End of table marker
  1049                              <1> .breakHandler:
  1050 00000D35 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1051 00000D39 4881C606000000      <1>     add rsi, 6  ;Go past BREAK=
  1052                              <1>     ;This must be the word ON or OFF 
  1053 00000D40 31D2                <1>     xor edx, edx    ;Clear CF and default to OFF
  1054 00000D42 66813E4F4E          <1>     cmp word [rsi], "ON"
  1055 00000D47 740F                <1>     je .breakOn
  1056 00000D49 66813E4F46          <1>     cmp word [rsi], "OF"
  1057 00000D4E 7506                <1>     jne .breakBad
  1058 00000D50 807E0246            <1>     cmp byte [rsi + 2], "F"
  1059 00000D54 7404                <1>     je .breakCommon
  1060                              <1> .breakBad:
  1061 00000D56 F9                  <1>     stc
  1062                              <1>     return
    18                              <2> %%_ret:
    19 00000D57 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1063                              <1> .breakOn:
  1064 00000D58 FFC2                <1>     inc edx ;Go from OFF to ON  (keeps CF=NC)
  1065                              <1> .breakCommon:
  1066 00000D5A B801330000          <1>     mov eax, 3301h  ;Set break to value in dl
  1067 00000D5F CD41                <1>     int 41h
  1068                              <1>     return
    18                              <2> %%_ret:
    19 00000D61 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1069                              <1> 
  1070                              <1> .bufHandler:
  1071 00000D62 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1072 00000D66 4881C608000000      <1>     add rsi, 8  ;Go past BUFFERS=
  1073                              <1>     ;This must be at most three digits, anything else is a failure
  1074 00000D6D 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
  1075 00000D70 31C9                <1>     xor ecx, ecx
  1076 00000D72 AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
  1077 00000D73 3C30                <1>     cmp al, "0"
  1078 00000D75 724A                <1>     jb .bufHandlerErr
  1079 00000D77 3C39                <1>     cmp al, "9"
  1080 00000D79 7746                <1>     ja .bufHandlerErr
  1081 00000D7B FFC1                <1>     inc ecx ;Increment char counter
  1082 00000D7D AC                  <1>     lodsb   ;Get second char
  1083 00000D7E E840000000          <1>     call .bufHandlerTermCheck
  1084 00000D83 7410                <1>     je .bufHandlerProcess   ;If it is a terminating char, exit
  1085 00000D85 3C30                <1>     cmp al, "0"
  1086 00000D87 7238                <1>     jb .bufHandlerErr
  1087 00000D89 3C39                <1>     cmp al, "9"
  1088 00000D8B 7734                <1>     ja .bufHandlerErr
  1089 00000D8D AC                  <1>     lodsb   ;Check no more chars!
  1090 00000D8E E830000000          <1>     call .bufHandlerTermCheck
  1091 00000D93 752C                <1>     jne .bufHandlerErr
  1092                              <1> .bufHandlerProcess:
  1093 00000D95 31D2                <1>     xor edx, edx    ;Accumulate value in edx
  1094 00000D97 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
  1095                              <1> .bufHandlerLp:
  1096 00000D9A AC                  <1>     lodsb   ;Get the digit
  1097 00000D9B E817000000          <1>     call .bufHandlerMul
  1098 00000DA0 67E304              <1>     jecxz .bufHandlerPrepExit
  1099 00000DA3 FFC9                <1>     dec ecx
  1100 00000DA5 EBF3                <1>     jmp short .bufHandlerLp 
  1101                              <1> .bufHandlerPrepExit:
  1102                              <1> ;edx has the value now, so place it in stack
  1103 00000DA7 B91E000000          <1>     mov ecx, buffersDefault
  1104 00000DAC 85D2                <1>     test edx, edx
  1105 00000DAE 0F44D1              <1>     cmovz edx, ecx  ;Replace zero with default if the user specified 0 buffers
  1106 00000DB1 488955F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rdx
  1107 00000DB5 F8                  <1>     clc
  1108                              <1>     return
    18                              <2> %%_ret:
    19 00000DB6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1109                              <1> .bufHandlerMul:
  1110 00000DB7 2C30                <1>     sub al, "0" ;Convert to a binary value
  1111 00000DB9 F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
  1112 00000DBB 0FB7C0              <1>     movzx eax, ax
  1113 00000DBE 01C2                <1>     add edx, eax
  1114                              <1>     return
    18                              <2> %%_ret:
    19 00000DC0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1115                              <1> .bufHandlerErr:
  1116 00000DC1 F9                  <1>     stc
  1117                              <1>     return
    18                              <2> %%_ret:
    19 00000DC2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1118                              <1> .bufHandlerTermCheck:
  1119 00000DC3 3C20                <1>     cmp al, SPC
  1120                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000DC5 74(C2)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1121 00000DC7 3C09                <1>     cmp al, TAB
  1122                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000DC9 74(C2)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1123 00000DCB 3C0D                <1>     cmp al, CR
  1124                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000DCD 74(C2)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1125 00000DCF 3C0A                <1>     cmp al, LF
  1126                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000DD1 74(C2)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1127                              <1>     return
    18                              <2> %%_ret:
    19 00000DD3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1128                              <1> .countryScan:
  1129                              <1>     return
    18                              <2> %%_ret:
    19 00000DD4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1130                              <1> .drvLoader:
  1131                              <1> ;We first try to read the driver into the byte after rdx.
  1132                              <1> ;If we cannot open the file, or we can open but not read the whole file
  1133                              <1> ; we error with Bad or missing filename msg, and proceed as if nothing happened 
  1134                              <1> ; (CF=NC). 
  1135                              <1> ; Thus we DO NOT adjust .endPtr or .linePtr and recycle that space for the 
  1136                              <1> ; next line.
  1137                              <1> ;If the open succeeded and we were able to read the whole driver into memory, 
  1138                              <1> ; we pass the lineptr to the driver and call init for the driver.
  1139                              <1> ; Once the driver returns, if the DONE bit is set, we read the offset of 
  1140                              <1> ; free memory above the driver and add that to the endPtr. If the driver
  1141                              <1> ; is a block driver, we add to the endPtr the space for "Units supported" 
  1142                              <1> ; number of DPBs.
  1143 00000DD5 4889D6              <1>     mov rsi, rdx    ;Save the ptr to past the end of the line in rsi
  1144 00000DD8 488B7DA0            <1>     mov rdi, qword [rbp - cfgFrame.linePtr]
  1145 00000DDC 4881C707000000      <1>     add rdi, 7  ;Go past DEVICE= to the pathname
  1146 00000DE3 4889FA              <1>     mov rdx, rdi    ;Prepare rdx for the open
  1147 00000DE6 B820000000          <1>     mov eax, SPC
  1148                              <1> .drvFindEndOfFileName:
  1149 00000DEB AE                  <1>     scasb  ;Is this char the space?
  1150 00000DEC 7416                <1>     je .fileNameFound
  1151                              <1>     ;Was the char terminal?
  1152 00000DEE 807FFF0D            <1>     cmp byte [rdi - 1], CR
  1153 00000DF2 0F84A0010000        <1>     je .drvBad
  1154 00000DF8 807FFF0A            <1>     cmp byte [rdi - 1], LF
  1155 00000DFC 0F8496010000        <1>     je .drvBad
  1156 00000E02 EBE7                <1>     jmp short .drvFindEndOfFileName
  1157                              <1> .fileNameFound:
  1158 00000E04 C647FF00            <1>     mov byte [rdi - 1], 0   ;Null terminate the path to the file
  1159 00000E08 B8003D0000          <1>     mov eax, 3D00h  ;Read only file
  1160 00000E0D CD41                <1>     int 41h
  1161 00000E0F 0F8283010000        <1>     jc .drvBad
  1162 00000E15 C647FF20            <1>     mov byte [rdi - 1], " " ;Replace the null with a space now again
  1163 00000E19 0FB7D8              <1>     movzx ebx, ax   ;Get the handle in ebx
  1164 00000E1C 668905DE010000      <1>     mov word [.drvHandle], ax   ;Save the handle in variable
  1165 00000E23 31D2                <1>     xor edx, edx    ;Move the handle to the end of the file
  1166 00000E25 B802420000          <1>     mov eax, 4202h  ;LSEEK to SEEK_END
  1167 00000E2A CD41                <1>     int 41h
  1168 00000E2C 89C1                <1>     mov ecx, eax    ;Get the file size in ecx
  1169 00000E2E 31D2                <1>     xor edx, edx    ;Move the handle to the start of the file
  1170 00000E30 B800420000          <1>     mov eax, 4200h  ;LSEEK to SEEK_SET (start of the file)
  1171 00000E35 CD41                <1>     int 41h
  1172                              <1>     ;Now we read ecx bytes to rsi as rsi points to first byte past the end
  1173                              <1>     ; of the DEVICE= line 
  1174 00000E37 4889F2              <1>     mov rdx, rsi    ;Point to first byte past the end of DEVICE= line
  1175 00000E3A 89CE                <1>     mov esi, ecx    ;Save the number of bytes to read in esi
  1176 00000E3C B8003F0000          <1>     mov eax, 3F00h  ;Read handle    
  1177 00000E41 CD41                <1>     int 41h
  1178 00000E43 0F8241010000        <1>     jc .drvBadClose
  1179 00000E49 39CE                <1>     cmp esi, ecx    ;Were all bytes read in?
  1180 00000E4B 0F8539010000        <1>     jne .drvBadClose
  1181                              <1>     ;Ok, full file read in, now prepare to call driver init routine
  1182 00000E51 4889D6              <1>     mov rsi, rdx    ;Move ptr to driver header to rsi
  1183 00000E54 488D1D87010000      <1>     lea rbx, .drvInitStruc
  1184 00000E5B C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
  1185 00000E5E C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], drvINIT
  1186 00000E62 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0
  1187 00000E68 C6430D00            <1>     mov byte [rbx + initReqPkt.numunt], 0
  1188 00000E6C 488B45A0            <1>     mov rax, qword [rbp - cfgFrame.linePtr] ;Get the line pointer
  1189 00000E70 480507000000        <1>     add rax, 7  ;Goto the first byte past DEVICE=
  1190 00000E76 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
  1191 00000E7A 48C7431600000000    <1>     mov qword [rbx + initReqPkt.optptr], 0
  1192 00000E82 640FB60425-         <1>     movzx eax, byte fs:[numPhysVol]
  1192 00000E87 [7DC00300]          <1>
  1193 00000E8B FFC8                <1>     dec eax ;Get a 0 based count
  1194 00000E8D 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al
  1195 00000E90 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
  1196 00000E93 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
  1197 00000E96 66F743030001        <1>     test word [rbx + initReqPkt.status], drvDonStatus
  1198 00000E9C 0F84E8000000        <1>     jz .drvBadClose
  1199 00000EA2 66F743030080        <1>     test word [rbx + initReqPkt.status], drvErrStatus
  1200 00000EA8 0F85DC000000        <1>     jnz .drvBadClose
  1201                              <1>     ;Now check that the driver wants to be installed
  1202 00000EAE 483B730E            <1>     cmp rsi, qword [rbx + initReqPkt.endptr]    ;This is for char and blk devs
  1203 00000EB2 0F84C2000000        <1>     je .drvWantsClose
  1204 00000EB8 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
  1205 00000EBE 750A                <1>     jnz .drvChar
  1206 00000EC0 807B0D00            <1>     cmp byte [rbx + initReqPkt.numunt], 0
  1207 00000EC4 0F84B0000000        <1>     je .drvWantsClose
  1208                              <1> .drvChar:
  1209                              <1>     ;Otherwise, this init passed, now build the structures we need.
  1210                              <1>     ;First adjust .endPtr
  1211 00000ECA 488B430E            <1>     mov rax, qword [rbx + initReqPkt.endptr]    ;Get the end pointer
  1212 00000ECE 488945A8            <1>     mov qword [rbp - cfgFrame.endPtr], rax  ;Move it here
  1213                              <1>     ;Now we link the driver into the driver chain
  1214 00000ED2 488B3D(80C00300)    <1>     mov rdi, qword [nulDevHdr + drvHdr.nxtPtr]  ;Get next ptr from nul drvr
  1215 00000ED9 48893E              <1>     mov qword [rsi + drvHdr.nxtPtr], rdi    ;And store it here
  1216 00000EDC 488935(80C00300)    <1>     mov qword [nulDevHdr + drvHdr.nxtPtr], rsi  ;And link nul to this driver
  1217                              <1>     ;Now if we are a char device, we are done so check here
  1218 00000EE3 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
  1219 00000EE9 0F85B9000000        <1>     jnz .drvWantsCloseChar  ;We are complete
  1220                              <1>     ;Now for block devices, we get the BPB ptr array and numUnits supported
  1221 00000EEF 0FB64B0D            <1>     movzx ecx, byte [rbx + initReqPkt.numunt]
  1222 00000EF3 488B5B16            <1>     mov rbx, qword [rbx + initReqPkt.optptr]    ;Get the BPB array pointer
  1223                              <1> 
  1224 00000EF7 4889F2              <1>     mov rdx, rsi    ;Move the driver pointer to rdx
  1225 00000EFA 488B75A8            <1>     mov rsi, qword [rbp - cfgFrame.endPtr]  ;Build DPB array here
  1226 00000EFE 4889F7              <1>     mov rdi, rsi    ;Move rdi here too, to point to first new DPB later
  1227 00000F01 51                  <1>     push rcx
  1228 00000F02 52                  <1>     push rdx
  1229 00000F03 31D2                <1>     xor edx, edx
  1230 00000F05 B835000000          <1>     mov eax, dpb_size
  1231 00000F0A F7E1                <1>     mul ecx ;Multiply the number of DPB's needed with the size of a dpb
  1232 00000F0C 480145A8            <1>     add qword [rbp - cfgFrame.endPtr], rax  ;Add this value to endPtr
  1233 00000F10 5A                  <1>     pop rdx ;Get back the driver ptr in rdx
  1234 00000F11 59                  <1>     pop rcx ;Get back the number of units count
  1235                              <1>     
  1236 00000F12 4887EB              <1>     xchg rbp, rbx   ;Swap stack frame ptr and BPB array ptr
  1237 00000F15 4887F5              <1>     xchg rsi, rbp   ;Swap BPB array and DPB space ptrs
  1238                              <1> .drvBuildDPB:
  1239 00000F18 B800530000          <1>     mov eax, 5300h
  1240 00000F1D CD41                <1>     int 41h
  1241 00000F1F 4881C678000000      <1>     add rsi, bpbEx_size ;Goto next bpb in array
  1242                              <1>     ;Adjust fields in DPB
  1243 00000F26 64FE0425[7DC00300]  <1>     inc byte fs:[numPhysVol] 
  1244 00000F2E 648A0425[7DC00300]  <1>     mov al, byte fs:[numPhysVol]
  1245 00000F36 884500              <1>     mov byte [rbp + dpb.bDriveNumber], al
  1246 00000F39 886D01              <1>     mov byte [rbp + dpb.bUnitNumber], ch
  1247 00000F3C 4889551B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rdx
  1248 00000F40 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Point to next DPB
  1249 00000F44 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
  1250 00000F48 FEC5                <1>     inc ch  ;Increment unit number 
  1251 00000F4A 38E9                <1>     cmp cl, ch  ;Are we done?
  1252 00000F4C 7409                <1>     je .dpbInitDone
  1253 00000F4E 4881C535000000      <1>     add rbp, dpb_size   ;Go to space for next DPB
  1254 00000F55 EBC1                <1>     jmp short .drvBuildDPB
  1255                              <1> .dpbInitDone:
  1256                              <1> ;Make sure we now make the last qNextDPBPtr = -1
  1257 00000F57 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
  1258                              <1>     ;Now we set the old last dpb to point to the first one
  1259 00000F5F 64488B3425-         <1>     mov rsi, qword fs:[dpbHeadPtr]
  1259 00000F64 [41C00300]          <1>
  1260                              <1> .drvDPBLp:
  1261 00000F68 807E25FF            <1>     cmp byte [rsi + dpb.qNextDPBPtr], -1
  1262 00000F6C 7406                <1>     je .drvLastDPBFound
  1263 00000F6E 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Goto next DPB
  1264 00000F72 EBF4                <1>     jmp short .drvDPBLp
  1265                              <1> .drvLastDPBFound:
  1266 00000F74 48893E              <1>     mov qword [rsi], rdi    ;Chain this dpb now to the first new dpb
  1267 00000F77 4889DD              <1>     mov rbp, rbx    ;Return the stack frame ptr to rbp
  1268                              <1> ;And we are done!
  1269                              <1> .drvWantsClose:
  1270                              <1> ;If the driver wants to not install silently, it can here
  1271 00000F7A 0FB71D80000000      <1>     movzx ebx, word [.drvHandle] ;Get the handle back, close it and proceed
  1272 00000F81 B8003E0000          <1>     mov eax, 3E00h  
  1273 00000F86 CD41                <1>     int 41h 
  1274 00000F88 F8                  <1>     clc ;Never return with CF=CY
  1275                              <1>     return  
    18                              <2> %%_ret:
    19 00000F89 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1276                              <1> .drvBadClose:
  1277 00000F8A 0FB71D70000000      <1>     movzx ebx, word [.drvHandle]    ;Get back handle to close
  1278 00000F91 B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
  1279 00000F96 CD41                <1>     int 41h
  1280                              <1> .drvBad:
  1281 00000F98 488D1529000000      <1>     lea rdx, .drvBadMsg
  1282 00000F9F B800090000          <1>     mov eax, 0900h
  1283 00000FA4 CD41                <1>     int 41h
  1284 00000FA6 F8                  <1>     clc ;Never return with CF=CY
  1285                              <1>     return
    18                              <2> %%_ret:
    19 00000FA7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1286                              <1> .drvWantsCloseChar:
  1287                              <1> ;Final checks, to see if we are CLOCK$ or CON
  1288 00000FA8 66F746080100        <1>     test word [rsi + drvHdr.attrib], devDrvConIn
  1289 00000FAE 7407                <1>     jz .dwccClock
  1290 00000FB0 488935(59C00300)    <1>     mov qword [vConPtr], rsi
  1291                              <1> .dwccClock:
  1292 00000FB7 66F746080800        <1>     test word [rsi + drvHdr.attrib], devDrvClockDev
  1293 00000FBD 74BB                <1>     jz .drvWantsClose
  1294 00000FBF 488935(51C00300)    <1>     mov qword [clockPtr], rsi
  1295 00000FC6 EBB2                <1>     jmp short .drvWantsClose
  1296 00000FC8 426164206F72206D69- <1> .drvBadMsg: db "Bad or missing filename",CR,LF,"$"
  1296 00000FD1 7373696E672066696C- <1>
  1296 00000FDA 656E616D650D0A24    <1>
  1297 00000FE2 000000000000000000- <1> .drvInitStruc: db initReqPkt_size dup (0)  
  1297 00000FEB 000000000000000000- <1>
  1297 00000FF4 000000000000000000- <1>
  1297 00000FFD 00000000            <1>
  1298 00001001 FFFF                <1> .drvHandle: dw -1
  1299                              <1> 
  1300                              <1> .fcbHandler:
  1301                              <1>     return
    18                              <2> %%_ret:
    19 00001003 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1302                              <1> .sftHandler:
  1303                              <1> ;This reads the line to set the number of FILE to between 1 and 254
  1304 00001004 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1305 00001008 4881C606000000      <1>     add rsi, 6  ;Go past FILES=
  1306                              <1>     ;This must be at most three digits, anything else is a failure
  1307 0000100F 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
  1308 00001012 31C9                <1>     xor ecx, ecx
  1309 00001014 AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
  1310 00001015 3C30                <1>     cmp al, "0"
  1311 00001017 725E                <1>     jb .sftHandlerErr
  1312 00001019 3C39                <1>     cmp al, "9"
  1313 0000101B 775A                <1>     ja .sftHandlerErr
  1314 0000101D FFC1                <1>     inc ecx ;Increment char counter
  1315 0000101F AC                  <1>     lodsb   ;Get second char
  1316 00001020 E854000000          <1>     call .sftHandlerTermCheck
  1317 00001025 7420                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
  1318 00001027 3C30                <1>     cmp al, "0"
  1319 00001029 724C                <1>     jb .sftHandlerErr
  1320 0000102B 3C39                <1>     cmp al, "9"
  1321 0000102D 7748                <1>     ja .sftHandlerErr
  1322 0000102F FFC1                <1>     inc ecx ;Increment char counter
  1323 00001031 AC                  <1>     lodsb   ;Get third char
  1324 00001032 E842000000          <1>     call .sftHandlerTermCheck
  1325 00001037 3C30                <1>     cmp al, "0"
  1326 00001039 723C                <1>     jb .sftHandlerErr
  1327 0000103B 3C32                <1>     cmp al, "2" ;Max BUFFERS=254 soooo, sorry buddy!
  1328 0000103D 7738                <1>     ja .sftHandlerErr
  1329 0000103F AC                  <1>     lodsb   ;Check no more chars!
  1330 00001040 E834000000          <1>     call .sftHandlerTermCheck
  1331 00001045 7530                <1>     jne .sftHandlerErr
  1332                              <1> .sftHandlerProcess:
  1333 00001047 31D2                <1>     xor edx, edx    ;Accumulate value in edx
  1334 00001049 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
  1335                              <1> .sftHandlerLp:
  1336 0000104C AC                  <1>     lodsb   ;Get the digit
  1337 0000104D E81B000000          <1>     call .sftHandlerMul
  1338 00001052 67E304              <1>     jecxz .sftHandlerPrepExit
  1339 00001055 FFC9                <1>     dec ecx
  1340 00001057 EBF3                <1>     jmp short .sftHandlerLp 
  1341                              <1> .sftHandlerPrepExit:
  1342                              <1> ;edx has the value now, so place it in stack
  1343 00001059 B914000000          <1>     mov ecx, filesDefault  ;Get default if the user specifies less than min
  1344 0000105E 81FA08000000        <1>     cmp edx, 8
  1345 00001064 0F42D1              <1>     cmovb edx, ecx
  1346 00001067 488955F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rdx
  1347 0000106B F8                  <1>     clc
  1348                              <1>     return
    18                              <2> %%_ret:
    19 0000106C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1349                              <1> .sftHandlerMul:
  1350 0000106D 2C30                <1>     sub al, "0" ;Convert to a binary value
  1351 0000106F F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
  1352 00001071 0FB7C0              <1>     movzx eax, ax
  1353 00001074 01C2                <1>     add edx, eax
  1354                              <1>     return
    18                              <2> %%_ret:
    19 00001076 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1355                              <1> .sftHandlerErr:
  1356 00001077 F9                  <1>     stc
  1357                              <1>     return
    18                              <2> %%_ret:
    19 00001078 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1358                              <1> .sftHandlerTermCheck:
  1359 00001079 3C20                <1>     cmp al, SPC
  1360                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000107B 74(78)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1361 0000107D 3C09                <1>     cmp al, TAB
  1362                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000107F 74(78)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1363 00001081 3C0D                <1>     cmp al, CR
  1364                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001083 74(78)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1365 00001085 3C0A                <1>     cmp al, LF
  1366                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001087 74(78)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1367                              <1>     return
    18                              <2> %%_ret:
    19 00001089 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1368                              <1> .lastdriveHandler:
  1369 0000108A 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1370 0000108E 4881C60A000000      <1>     add rsi, 10  ;Go past LASTDRIVE=
  1371 00001095 AC                  <1>     lodsb   ;Get this char
  1372 00001096 0FB6C0              <1>     movzx eax, al   ;Zero extend to eax
  1373 00001099 50                  <1>     push rax    ;Push on stack
  1374 0000109A B813120000          <1>     mov eax, 1213h  ;Uppercase the char
  1375 0000109F CD4F                <1>     int 4Fh
  1376 000010A1 5B                  <1>     pop rbx
  1377 000010A2 3C5A                <1>     cmp al, "Z"
  1378 000010A4 77D1                <1>     ja .sftHandlerErr
  1379 000010A6 3C41                <1>     cmp al, "A"
  1380 000010A8 72CD                <1>     jb .sftHandlerErr
  1381 000010AA 803E0D              <1>     cmp byte [rsi], CR
  1382 000010AD 740F                <1>     je .ldProceed
  1383 000010AF 803E0A              <1>     cmp byte [rsi], LF
  1384 000010B2 740A                <1>     je .ldProceed
  1385 000010B4 803E09              <1>     cmp byte [rsi], TAB
  1386 000010B7 7405                <1>     je .ldProceed
  1387 000010B9 803E20              <1>     cmp byte [rsi], SPC
  1388 000010BC 75B9                <1>     jne .sftHandlerErr
  1389                              <1> .ldProceed:
  1390 000010BE 2C41                <1>     sub al, "A" ;Convert into a number
  1391 000010C0 0FB6C0              <1>     movzx eax, al   ;Zero extend in case DOS rets something dumb in upper bits
  1392 000010C3 BA05000000          <1>     mov edx, lastDriveDeflt
  1393 000010C8 3D05000000          <1>     cmp eax, lastDriveDeflt
  1394 000010CD 0F42C2              <1>     cmovb eax, edx
  1395 000010D0 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
  1396 000010D4 F8                  <1>     clc
  1397                              <1>     return
    18                              <2> %%_ret:
    19 000010D5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1398                              <1> .ldBad:
  1399 000010D6 F9                  <1>     stc
  1400                              <1>     return
    18                              <2> %%_ret:
    19 000010D7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1401                              <1> .shellHandler:
  1402                              <1>     return
    18                              <2> %%_ret:
    19 000010D8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1403                              <1> .stacksHandler:
  1404                              <1>     return
    18                              <2> %%_ret:
    19 000010D9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1405                              <1> .drivParm:
  1406                              <1>     return
    18                              <2> %%_ret:
    19 000010DA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1407                              <1> 
  1408                              <1> .cfgExit:
  1409 000010DB 488B5DB8            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle] ;Get the handle back
  1410 000010DF B83E000000          <1>     mov eax, 3eh    ;Close the handle
  1411 000010E4 CD41                <1>     int 41h ;bx already has the handle
  1412                              <1> ;------------------------------------------------;
  1413                              <1> ;   Setup Final Data Areas With Overrides from   ;
  1414                              <1> ;                  CONFIG.SYS                    ;
  1415                              <1> ;------------------------------------------------;
  1416                              <1> ;Add additional buffers. Start from tmpBufHdr
  1417                              <1> ;Add additional SFT entries. By default, 1 new SFT header, with 15 SFT entries
  1418                              <1> ;Add additional FCBS.
  1419                              <1> ;Create a larger CDS if needed.
  1420                              <1> noCfg:
  1421                              <1> ;Start with buffers:
  1422 000010E6 488B4DF8            <1>     mov rcx, qword [rbp - cfgFrame.newBuffers]    ;Get new buffers size
  1423 000010EA 64880C25[7FC00300]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
  1424                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
  1425 000010F2 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer sector size
  1425 000010F7 [61C00300]          <1>
  1426 000010FB 81C330000000        <1>     add ebx, bufferHdr_size ;rbx has the size to add
  1427                              <1>     ;Each buffer has no flags, drive number must be -1
  1428 00001101 488B7DA8            <1>     mov rdi, qword [rbp - cfgFrame.endPtr]  ;Get current allocation end pointer
  1429 00001105 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Reset the var here
  1429 0000110A [63C00300]          <1>
  1430 0000110E 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
  1431 00001111 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
  1432 00001113 67E325              <1>     jecxz .lastBuffer
  1433                              <1> .bufferLoop:
  1434 00001116 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
  1435 00001119 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
  1436 0000111C 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1437 00001122 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1438 00001126 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1439 00001129 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1440 0000112C 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1441 00001130 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1442 00001134 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
  1443 00001137 FFC9                <1>     dec ecx
  1444 00001139 75DB                <1>     jnz .bufferLoop
  1445                              <1> .lastBuffer:
  1446 0000113B 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
  1447 0000113E 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
  1448 00001145 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1449 0000114B 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1450 0000114F 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1451 00001152 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1452 00001155 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1453 00001159 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1454 0000115D 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1455                              <1> 
  1456                              <1> ;Now build a new SFT header for the number of files specified by user
  1457 00001161 488B4DF0            <1>     mov rcx, qword [rbp - cfgFrame.newSFTVal]
  1458 00001165 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
  1459 0000116B 7430                <1>     je .skipSFT
  1460 0000116D 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]  ;Get the current only SFT head pointer
  1460 00001172 [49C00300]          <1>
  1461 00001176 48893E              <1>     mov qword [rsi + sfth.qNextSFTPtr], rdi ;Move rdi as new SFT pointer
  1462 00001179 662B4E08            <1>     sub cx, word [rsi + sfth.wNumFiles] ;Remove the number of files we already have
  1463 0000117D 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move remaining files here
  1464 00001181 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;Last table in chain
  1465 00001188 4881C70A000000      <1>     add rdi, sfth_size  ;Goto sft area, now need to compute size
  1466 0000118F B84F000000          <1>     mov eax, sft_size
  1467 00001194 F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
  1468 00001196 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
  1469 00001199 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1470                              <1> .skipSFT:
  1471                              <1> ;FCBS at rdi
  1472 0000119D 6448893C25-         <1>     mov qword fs:[fcbsHeadPtr], rdi ;Setup the fcbs var here
  1472 000011A2 [73C00300]          <1>
  1473 000011A6 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;No more FCBS headers for now
  1474 000011AD 488B4DE8            <1>     mov rcx, qword [rbp - cfgFrame.newFCBSVal]
  1475 000011B1 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move this value here
  1476 000011B5 B84F000000          <1>     mov eax, sft_size
  1477 000011BA F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
  1478 000011BC 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
  1479 000011BF 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1480 000011C3 488B4DE0            <1>     mov rcx, qword [rbp - cfgFrame.newProtFCBSVal] ;Get number of safe FCBs
  1481 000011C7 6466890C25-         <1>     mov word fs:[numSafeSFCB], cx   ;And save that there
  1481 000011CC [7BC00300]          <1>
  1482                              <1> ;And CDS now
  1483 000011D0 488B4DD8            <1>     mov rcx, qword [rbp - cfgFrame.newLastdrive]
  1484 000011D4 64880C25[7EC00300]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
  1485 000011DC 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi  ;Point cdsHeadPtr here
  1485 000011E1 [6BC00300]          <1>
  1486 000011E5 E839F6FFFF          <1>     call makeCDSArray
  1487 000011EA 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1488                              <1> 
  1489                              <1> ;Computation of new space is complete, now work out how many bytes this is
  1490 000011EE 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
  1491 000011F1 5D                  <1>     pop rbp
  1492 000011F2 488D9D[10000000]    <1>     lea rbx, qword [rbp + dosDynamicArea]
  1493 000011F9 4829DF              <1>     sub rdi, rbx    ;Gives difference now
  1494 000011FC 678D5F11            <1>     lea ebx, dword [edi + 11h]  ;Add 11 to round up a paragraph
  1495 00001200 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
  1496                              <1> ;Resize DOS allocation before loading COMMAND.COM
  1497 00001203 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
  1497 00001208 [39C00300]          <1>
  1498 0000120C 4981C010000000      <1>     add r8, mcb.program
  1499 00001213 B44A                <1>     mov ah, 4Ah
  1500 00001215 CD41                <1>     int 41h
  1501                              <1> ;Now we close all five default handles and open AUX, CON and PRN.
  1502 00001217 644C8B0425-         <1>     mov r8, qword fs:[currentPSP]
  1502 0000121C [14C40300]          <1>
  1503 00001220 31DB                <1>     xor ebx, ebx
  1504                              <1> closeHandlesLoop:
  1505 00001222 B8003E0000          <1>     mov eax, 3e00h  ;Close
  1506 00001227 CD41                <1>     int 41h
  1507 00001229 FFC3                <1>     inc ebx ;Goto next handle
  1508 0000122B 81FB06000000        <1>     cmp ebx, 6
  1509 00001231 75EF                <1>     jne closeHandlesLoop
  1510 00001233 488D1557010000      <1>     lea rdx, auxName
  1511 0000123A B8023D0000          <1>     mov eax, 3D02h   ;Open read/write
  1512 0000123F CD41                <1>     int 41h
  1513 00001241 89C3                <1>     mov ebx, eax
  1514 00001243 B903000000          <1>     mov ecx, 3  ;
  1515 00001248 B800460000          <1>     mov eax, 4600h  ;DUP2
  1516 0000124D CD41                <1>     int 41h
  1517 0000124F B8003E0000          <1>     mov eax, 3e00h
  1518 00001254 CD41                <1>     int 41h ;Close the original handle
  1519 00001256 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
  1520 0000125B 488D152B010000      <1>     lea rdx, conName
  1521 00001262 CD41                <1>     int 41h
  1522 00001264 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
  1523 00001266 B800450000          <1>     mov eax, 4500h  ;DUP
  1524 0000126B CD41                <1>     int 41h
  1525 0000126D B800450000          <1>     mov eax, 4500h  ;DUP
  1526 00001272 CD41                <1>     int 41h
  1527 00001274 488D151A010000      <1>     lea rdx, prnName
  1528 0000127B B8023D0000          <1>     mov eax, 3D02h
  1529 00001280 CD41                <1>     int 41h       ;Open file
  1530                              <1> 
  1531                              <1>     
  1532                              <1>     %if DEBUG && ALLOCTEST
  1533                              <1> ;Test Allocation, Growth and Deallocation
  1534                              <1>     mov r15, qword fs:[currentPSP]
  1535                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
  1536                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
  1537                              <1>     mov ah, 48h ;Allocate
  1538                              <1>     int 41h
  1539                              <1> 
  1540                              <1>     mov byte [rax - 10h], 0 ;Trash chain
  1541                              <1>     mov r8, rax ;Move the pointer to r8
  1542                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
  1543                              <1>     mov ah, 4Ah
  1544                              <1>     int 41h
  1545                              <1> 
  1546                              <1>     mov ah, 49h ;Free r8
  1547                              <1>     int 41h
  1548                              <1>     mov qword fs:[currentPSP], r15
  1549                              <1>     %endif
  1550                              <1> 
  1551                              <1>     %if ENDSTATUS
  1552                              <1> debugFinal:
  1553                              <1>     ;Print system state
  1554                              <1>     push rbp    ;Only rbp really matters here
  1555                              <1>     mov r8, rbp
  1556                              <1> 
  1557                              <1>     lea rbp, .msg2
  1558                              <1>     lea r9, qword [r8 + debPrintNullString]
  1559                              <1>     call r9
  1560                              <1> 
  1561                              <1>     lea rbx, qword [.msg + 15]
  1562                              <1>     mov rax, qword fs:[biosUBase]
  1563                              <1> 
  1564                              <1>     lea r9, qword [r8 + overlayQword]
  1565                              <1>     call r9
  1566                              <1> 
  1567                              <1>     add rbx, 19+8
  1568                              <1>     mov rax, qword fs:[dosSegPtr]
  1569                              <1>     call r9
  1570                              <1> 
  1571                              <1>     add rbx, 19+8
  1572                              <1>     mov rax, qword fs:[mcbChainPtr]
  1573                              <1>     call r9
  1574                              <1> 
  1575                              <1>     add rbx, 20+8
  1576                              <1>     lea r9, qword [r8 + overlayDword]
  1577                              <1>     mov eax, dword fs:[loProtMem]
  1578                              <1>     call r9
  1579                              <1> 
  1580                              <1>     add rbx, 10+8
  1581                              <1>     mov eax, dword fs:[hiProtMem]
  1582                              <1>     call r9
  1583                              <1> 
  1584                              <1>     add rbx, 10+8
  1585                              <1>     mov rax, qword fs:[longMem]
  1586                              <1>     lea r9, qword [r8 + overlayQword]
  1587                              <1>     call r9
  1588                              <1> 
  1589                              <1>     add rbx, 19+8
  1590                              <1>     mov rax, qword fs:[dpbHeadPtr]
  1591                              <1>     call r9
  1592                              <1> 
  1593                              <1>     add rbx, 19+8
  1594                              <1>     mov rax, qword fs:[sftHeadPtr]
  1595                              <1>     call r9
  1596                              <1> 
  1597                              <1>     add rbx, 19+8
  1598                              <1>     mov rax, qword fs:[bufHeadPtr]
  1599                              <1>     call r9
  1600                              <1> 
  1601                              <1>     add rbx, 19+8
  1602                              <1>     mov rax, qword fs:[cdsHeadPtr]
  1603                              <1>     call r9
  1604                              <1> 
  1605                              <1>     lea r9, qword [r8 + overlayByte]
  1606                              <1> 
  1607                              <1>     add rbx, 25+19
  1608                              <1>     movzx rax, byte fs:[numPhysVol]
  1609                              <1>     call r9
  1610                              <1> 
  1611                              <1>     add rbx, 30
  1612                              <1>     movzx rax, byte fs:[numFixDrv]
  1613                              <1>     call r9
  1614                              <1> 
  1615                              <1>     add rbx, 30
  1616                              <1>     movzx rax, byte fs:[numRemDrv]
  1617                              <1>     call r9
  1618                              <1> 
  1619                              <1>     add rbx, 16
  1620                              <1>     movzx rax, byte fs:[bootDrive]
  1621                              <1>     add al, "A"
  1622                              <1>     mov byte [rbx], al
  1623                              <1> 
  1624                              <1>     lea rbp, .msg
  1625                              <1>     lea r9, qword [r8 + debPrintNullString]
  1626                              <1>     call r9
  1627                              <1>     pop rbp
  1628                              <1>     jmp l1
  1629                              <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
  1630                              <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1631                              <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
  1632                              <1>         db "Arena1: FFFFFFFFh ",
  1633                              <1>         db "Arena2: FFFFFFFFh ",
  1634                              <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1635                              <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1636                              <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1637                              <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1638                              <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1639                              <1>         db "Number of Logical Drives FFh",0Ah,0Dh
  1640                              <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
  1641                              <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
  1642                              <1>         db "Boot drive Z:",0Ah,0Dh
  1643                              <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
  1644                              <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
  1645                              <1>     %endif
  1646                              <1> l1:
  1647                              <1>     ;Load COMMAND.COM
  1648                              <1>     ;Get currentPSP ptr
  1649 00001282 B462                <1>     mov ah, 62h ;Get current PSP ptr in rdx
  1650 00001284 CD41                <1>     int 41h
  1651 00001286 B419                <1>     mov ah, 19h ;Get current Drive letter in al
  1652 00001288 CD41                <1>     int 41h
  1653 0000128A 0441                <1>     add al, "A"
  1654 0000128C 880512010000        <1>     mov byte [cmdLine], al  ;Store drive letter at start of command line
  1655 00001292 488D1D1A010000      <1>     lea rbx, cmdBlock
  1656 00001299 488D425C            <1>     lea rax, qword [rdx + psp.fcb1]
  1657 0000129D 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1658 000012A1 488D426C            <1>     lea rax, qword [rdx + psp.fcb2]
  1659 000012A5 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1660 000012A9 488D15F4000000      <1>     lea rdx, cmdLine
  1661 000012B0 48895308            <1>     mov qword [rbx + execProg.pCmdLine], rdx    ;Store command line here
  1662 000012B4 B8004B0000          <1>     mov eax, 4B00h  ;Exec Prog
  1663 000012B9 CD41                <1>     int 41h
  1664 000012BB 488D15A6000000      <1>     lea rdx, badCom
  1665 000012C2 B409                <1>     mov ah, 09h ;Print message
  1666 000012C4 CD41                <1>     int 41h
  1667 000012C6 E92A000000          <1>     jmp errorInit.ei0
  1668                              <1>     
  1669                              <1> ;--------------------------------
  1670                              <1> ;       PROCS FOR SYSINIT       :
  1671                              <1> ;--------------------------------
  1672                              <1> adjustDrvHdr:
  1673                              <1> ;Input: rsi = Effective address of driver in DOS segment
  1674                              <1> ;       rbp = Ptr to the start of the DOS segment
  1675                              <1> ;Output: rsi = EA of next header in DOS segment
  1676 000012CB 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
  1677 000012CF 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
  1678 000012D3 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
  1679 000012DA 740A                <1>     je .exit
  1680 000012DC 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
  1681 000012DF 4881C622000000      <1>     add rsi, drvHdr_size
  1682                              <1> .exit:
  1683 000012E6 C3                  <1>     ret
  1684                              <1> errorInit:
  1685                              <1> ;If a critical error occurs during sysinit, fail through here
  1686                              <1> ;Int 42h, 43h and 44h point here during sysinit
  1687 000012E7 488D2D49000000      <1>     lea rbp, hltmsg
  1688 000012EE B804130000          <1>     mov eax, 1304h
  1689 000012F3 CD30                <1>     int 30h
  1690                              <1>     ;cli ;Clear interrupts
  1691                              <1>     ;mov al, -1
  1692                              <1>     ;mov dx, 0A1h    ;PIC2 data
  1693                              <1>     ;out dx, al      ;Mask all lines
  1694                              <1>     ;mov dx, 21h     ;PIC1 data
  1695                              <1>     ;out dx, al      ;Mask all lines
  1696                              <1> .ei0:
  1697 000012F5 F4                  <1>     hlt
  1698 000012F6 F390                <1>     pause
  1699 000012F8 EBFB                <1>     jmp short .ei0
  1700                              <1> noCmdCom:
  1701 000012FA 488D1567000000      <1>     lea rdx, badCom
  1702 00001301 B409                <1>     mov ah, 09h
  1703 00001303 CD41                <1>     int 41h
  1704 00001305 EBEE                <1>     jmp short errorInit.ei0
  1705                              <1> ;--------------------------------
  1706                              <1> ;       DATA FOR SYSINIT        :
  1707                              <1> ;--------------------------------
  1708 00001307 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
  1708 00001310 5343502F444F532E2E- <1>
  1708 00001319 2E0A0D24            <1>
  1709 0000131D 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
  1709 00001326 6C6F636174696F6E20- <1>
  1709 0000132F 4572726F720A0D00    <1>
  1710 00001337 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
  1710 00001340 7469616C6973696E67- <1>
  1710 00001349 20534350444F532E53- <1>
  1710 00001352 59532E205379737465- <1>
  1710 0000135B 6D2068616C74696E67- <1>
  1710 00001364 2E2E2E00            <1>
  1711 00001368 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
  1711 00001371 7373696E6720436F6D- <1>
  1711 0000137A 6D616E6420696E7465- <1>
  1711 00001383 727072657465720A0D- <1>
  1711 0000138C 24                  <1>
  1712 0000138D 434F4E00            <1> conName db "CON",0
  1713 00001391 41555800            <1> auxName db "AUX",0
  1714 00001395 50524E00            <1> prnName db "PRN",0
  1715                              <1> 
  1716 00001399 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
  1716 000013A2 5300                <1>
  1717 000013A4 5F3A5C434F4D4D414E- <1> cmdLine db "_:\COMMAND.COM",0
  1717 000013AD 442E434F4D00        <1>
  1718                              <1> cmdBlock:
  1719                              <1>     istruc execProg
  1720 000013B3 0000000000000000    <1>     at execProg.pEnv,       dq 0    ;Keep at 0 to "copy" DOS's environment ptr
  1721 000013BB 0000000000000000    <1>     at execProg.pCmdLine,   dq 0
  1722 000013C3 0000000000000000    <1>     at execProg.pfcb1,      dq 0    ;Set to DOS's fcb 1 and 2
  1723 000013CB 0000000000000000    <1>     at execProg.pfcb2,      dq 0
  1724                              <1>     iend
  1725                              <1> exceptData:
  1726 000013D3 [925B000000000000]  <1>     dq i0
  1727 000013DB [995B000000000000]  <1>     dq i1
  1728 000013E3 [A35B000000000000]  <1>     dq i2
  1729 000013EB [AD5B000000000000]  <1>     dq i3
  1730 000013F3 [B75B000000000000]  <1>     dq i4
  1731 000013FB [C15B000000000000]  <1>     dq i5
  1732 00001403 [C85B000000000000]  <1>     dq i6
  1733 0000140B [CF5B000000000000]  <1>     dq i7
  1734 00001413 [D65B000000000000]  <1>     dq i8
  1735 0000141B [DD5B000000000000]  <1>     dq i9
  1736 00001423 [E45B000000000000]  <1>     dq i10
  1737 0000142B [EB5B000000000000]  <1>     dq i11
  1738 00001433 [F25B000000000000]  <1>     dq i12
  1739 0000143B [F95B000000000000]  <1>     dq i13
  1740 00001443 [005C000000000000]  <1>     dq i14
  1741 0000144B [075C000000000000]  <1>     dq i15
  1742 00001453 [0E5C000000000000]  <1>     dq i16
  1743 0000145B [155C000000000000]  <1>     dq i17
  1744 00001463 [1C5C000000000000]  <1>     dq i18
  1745 0000146B [235C000000000000]  <1>     dq i19
  1746 00001473 [2A5C000000000000]  <1>     dq i20
  1747 0000147B [315C000000000000]  <1>     dq i21
  1748                              <1> 
  1749                              <1> intData:
  1750 00001483 [8E50000000000000]  <1>     dq terminateProcess ;Int 40h
  1751 0000148B [2266000000000000]  <1>     dq functionDispatch ;Int 41h
  1752 00001493 [E712000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
  1753 0000149B [8167000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
  1754 000014A3 [5A5F000000000000]  <1>     dq dosDefCritErrHdlr 
  1755 000014AB [2A60000000000000]  <1>     dq absDiskRead      ;Int 45h
  1756 000014B3 [0B60000000000000]  <1>     dq absDiskWrite     ;Int 46h
  1757 000014BB [9550000000000000]  <1>     dq terminateRes     ;Int 47h
  1758 000014C3 [8167000000000000]  <1>     dq defaultIretq     ;Int 48h
  1759 000014CB [8167000000000000]  <1>     dq defaultIretq     ;Int 49h
  1760 000014D3 [8167000000000000]  <1>     dq defaultIretq     ;Int 4Ah
  1761 000014DB [8167000000000000]  <1>     dq defaultIretq     ;Int 4Bh
  1762 000014E3 [8167000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1763 000014EB [8167000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1764 000014F3 [8167000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1765 000014FB [2B6E000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1766                              <1> nData:
  1767 00001503 [D96F000000000000]  <1>     dq conHdr
  1768 0000150B 0480                <1>     dw 08004h
  1769 0000150D [8171000000000000]  <1>     dq nulStrat
  1770 00001515 [8771000000000000]  <1>     dq nulIntr
  1771 0000151D 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1772                              <1> 
  1773                              <1> diskInit:
  1774                              <1>     ;We create a function to deal with BPB parsing etc
  1775                              <1>     ;Start with the first primary partition on each hard disk (until max)
  1776                              <1>     ;   They dont have to be bootable
  1777                              <1>     ;Then go back and look for other partitions partitions. 
  1778                              <1>     ;   Add each other primary or logical ptn (until max)
  1779                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
  1780                              <1>     ;Use r8 as device counter
  1781 00001525 488DBD[E8790000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
  1782 0000152C 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
  1782 00001534 00                  <1>
  1783 00001535 0F84C6000000        <1>     jz .remInit ;No? Go to removables
  1784 0000153B 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
  1784 00001544 00                  <1>
  1785 00001545 B280                <1>     mov dl, 80h ;Start with HDD 0
  1786                              <1> .primary:
  1787 00001547 64803C25[7DC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1787 0000154F 03                  <1>
  1788 00001550 0F84AB000000        <1>     je .remInit
  1789 00001556 31C9                <1>     xor ecx, ecx    ;Sector 0
  1790 00001558 E871010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
  1791 0000155D 0F8289000000        <1>     jc .primaryEpilog
  1792                              <1>     ;Here, check MBR or BPB
  1793 00001563 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
  1794 0000156C 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
  1795                              <1>     ;Now check if BPB or MBR
  1796 0000156E 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1797 00001570 8A6302              <1>     mov ah, byte [rbx + 2]
  1798 00001573 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1799 00001577 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
  1800                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
  1801                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
  1802 00001579 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
  1803 00001580 B104                <1>     mov cl, 4
  1804                              <1> .checkPrimary:
  1805 00001582 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
  1806 00001585 3C01                <1>     cmp al, 01
  1807 00001587 7421                <1>     je .primaryFound
  1808 00001589 3C04                <1>     cmp al, 04
  1809 0000158B 741D                <1>     je .primaryFound
  1810 0000158D 3C06                <1>     cmp al, 06
  1811 0000158F 7419                <1>     je .primaryFound
  1812 00001591 3C0B                <1>     cmp al, 0Bh
  1813 00001593 7415                <1>     je .primaryFound
  1814 00001595 3C0C                <1>     cmp al, 0Ch
  1815 00001597 7411                <1>     je .primaryFound
  1816 00001599 3C0E                <1>     cmp al, 0Eh
  1817 0000159B 740D                <1>     je .primaryFound
  1818 0000159D 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1819 000015A4 FEC9                <1>     dec cl
  1820 000015A6 7444                <1>     jz .primaryEpilog
  1821 000015A8 EBD8                <1>     jmp short .checkPrimary
  1822                              <1> .primaryFound:
  1823                              <1>     ;Copy the first sector of this partition into memory
  1824 000015AA 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1825 000015AD E81C010000          <1>     call .initReadSector
  1826 000015B2 7238                <1>     jc .primaryEpilog
  1827                              <1>     ;Now verify this is a BPB
  1828 000015B4 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1829 000015B6 8A6302              <1>     mov ah, byte [rbx + 2]
  1830 000015B9 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1831 000015BD 752D                <1>     jne .primaryEpilog   ;If not, skip
  1832                              <1>     ;Now copy data to internal tables
  1833 000015BF 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1834 000015C2 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1835 000015C7 57                  <1>     push rdi
  1836 000015C8 F348A5              <1>     rep movsq   ;Copy the BPB
  1837 000015CB 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1838                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1839 000015CC 4A8D9C05[B6790000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1840                              <1>     ;Add device count to rbx to point to correct entry
  1841 000015D4 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1842 000015D6 4A8D9CC5[C0790000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1843 000015DE 488933              <1>     mov qword [rbx], rsi
  1844 000015E1 49FFC0              <1>     inc r8  ;Goto next logical drive
  1845 000015E4 64FE0425[7DC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1846                              <1> .primaryEpilog:
  1847 000015EC FEC2                <1>     inc dl  ;Goto next BIOS drive
  1848 000015EE 88D6                <1>     mov dh, dl
  1849 000015F0 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1850 000015F3 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1851 000015FB 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1852                              <1> .extended:
  1853                              <1> ;We have gone through all the devices once
  1854                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1855                              <1>     ;je .remInit ;If yes, get removable devices
  1856                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1857                              <1>     ;xor ecx, ecx    ;Get MBR back
  1858                              <1>     ;call .initReadSector
  1859                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1860                              <1> .remInit:
  1861                              <1> ;Start by linking the default BPB's in the pointers table in the event that
  1862                              <1> ; for some reason the removable drives stop working or dont exist.
  1863                              <1> ;This forces the hard drives to start at C:
  1864 00001601 53                  <1>     push rbx
  1865 00001602 488D9D[E8790000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBblks] ;Get default drive A block ptr
  1866 00001609 48899D[C0790000]    <1>     mov qword [rbp + msdDriver.msdBPBTbl], rbx  ;Store in ptrs table
  1867 00001610 4881C378000000      <1>     add rbx, bpbEx_size ;Goto next ptr
  1868 00001617 48899D[C8790000]    <1>     mov qword [rbp + msdDriver.msdBPBTbl + 8], rbx  ;Store next pointer
  1869 0000161E 5B                  <1>     pop rbx
  1870                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1871 0000161F 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1872 00001622 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1873 00001624 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1874                              <1>     ;rdi points to the space for the subsequent bpb's
  1875 00001627 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 0  ;Just skip removable init if no rem drives
  1875 0000162F 00                  <1>
  1876 00001630 750A                <1>     jnz .removables
  1877 00001632 64800425[7DC00300]- <1>     add byte fs:[numPhysVol], 2 ;Pretend we have two more drives (A: and B:)
  1877 0000163A 02                  <1>
  1878 0000163B C3                  <1>     ret ;and return!
  1879                              <1> .removables:
  1880 0000163C 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1881 0000163E E88B000000          <1>     call .initReadSector
  1882 00001643 7238                <1>     jc .removableEpilogue   ;Goto next device
  1883                              <1>     ;Now verify this is a BPB
  1884 00001645 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1885 00001647 8A6302              <1>     mov ah, byte [rbx + 2]
  1886 0000164A 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1887 0000164E 752D                <1>     jne .removableEpilogue   ;If not, skip
  1888                              <1>     ;Now copy data to internal tables
  1889 00001650 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1890 00001653 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1891 00001658 57                  <1>     push rdi
  1892 00001659 F348A5              <1>     rep movsq   ;Copy the BPB
  1893 0000165C 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1894                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1895 0000165D 4A8D9C05[B6790000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1896                              <1>     ;Add device count to rbx to point to correct entry
  1897 00001665 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1898 00001667 4A8D9CC5[C0790000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1899 0000166F 488933              <1>     mov qword [rbx], rsi
  1900 00001672 49FFC0              <1>     inc r8  ;Goto next logical drive
  1901 00001675 64FE0425[7DC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1902                              <1> .removableEpilogue:
  1903 0000167D FEC2                <1>     inc dl  ;Goto next BIOS device now
  1904 0000167F 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1905 00001687 7412                <1>     je .end
  1906 00001689 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1907 00001690 7403                <1>     je .re0
  1908 00001692 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1909                              <1> .re0:
  1910 00001695 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1911 00001699 72A1                <1>     jb .removables
  1912                              <1> .end:
  1913 0000169B 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1913 000016A3 01                  <1>
  1914 000016A4 7401                <1>     je .singleRemDev
  1915 000016A6 C3                  <1>     ret
  1916                              <1> .singleRemDev:
  1917                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1918 000016A7 488D9D[B6790000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1919 000016AE 8A95[B6790000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1920 000016B4 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1921 000016B7 488D9D[C0790000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1922 000016BE 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1923 000016C1 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1924 000016C5 64FE0425[7DC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1925 000016CD C3                  <1>     ret
  1926                              <1> .initReadSector:
  1927                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1928 000016CE B482                <1>     mov ah, 82h ;Read
  1929 000016D0 B001                <1>     mov al, 1   ;One sector
  1930 000016D2 488D9D[10030000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1931 000016D9 CD33                <1>     int 33h
  1932 000016DB C3                  <1>     ret
    16                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    17                                  %include "./Source/BSS/dosSeg.asm"
    18                              <1> ;This file contains the main DOS data segment
    19                              <1> dosAPT: ;Additional Page tables
    20 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    21                              <1> dosDataArea:
    22 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    23 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    24 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    25 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    26 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    27 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    28 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    29 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    30                              <1> ;Above is the system stats
    31                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM SHARE TO NUMJOINDRV
    32                              <1> ;Both below variables can be edited with Int 41h AX=440Bh
    33 0003C023 ????                <1>     validNetNam resw 1    ;Flag if machinename valid, deflt no=0
    34 0003C025 ????                <1>     shareCount  resw 1    ;Share Retry Count, number of repeats before fail.
    35 0003C027 ????                <1>     shareDelay  resw 1    ;Share Delay, in multiples of ms. (TEMP, just loop)
    36 0003C029 ????????????????    <1>                 resq 1    ;Unused ptr for future, current disk buffer
    37 0003C031 ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    38                              <1>     ;   A value of 0 means no chars buffered.
    39 0003C039 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    40                              <1> sysVarsPtr:
    41 0003C041 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    42 0003C049 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    43 0003C051 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    44                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    45 0003C059 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    46                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    47 0003C061 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    48 0003C063 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    49 0003C06B ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    50 0003C073 ????????????????    <1>     fcbsHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    51 0003C07B ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    52                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    53 0003C07D ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    54 0003C07E ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    55 0003C07F ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    56 0003C080 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    57 0003C0A2 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    58                              <1> ;Additional internal variables
    59 0003C0A3 ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    60                              <1> 
    61                              <1>     ;DLL Manager hook functions here
    62                              <1>     ;All DLLMGR hooks are 8 byte pointers and are new to the DOS kernel.
    63                              <1>     ;They allow for the installation of a DLL manager program, which hooks
    64                              <1>     ; these pointers, to point to their own subroutines in the DLLMGR prog.
    65                              <1>     ;These hooks are called from within EXEC, only for PE type executables
    66                              <1>     ; and from within EXIT. 
    67                              <1>     ;
    68                              <1>     ;In EXEC mode, modes 0 and 1 create a PSP for the task and thus the 
    69                              <1>     ; task is self standing and has a PSP as a Unique ID. 
    70                              <1>     ;If mode 3, this is an overlay EXE. This means it is not it's own task and 
    71                              <1>     ; is an extension of the parent task. In such a case, the DLL Manager must 
    72                              <1>     ; look at where the overlay is to be loaded (execFrame.pProgBase), and if 
    73                              <1>     ; there is already an overlay there, to remove it's functions from the 
    74                              <1>     ; registery, replacing them with the new overlay's functions. All overlay
    75                              <1>     ; exports must be flagged as belonging to the parent task PSP so that
    76                              <1>     ; on EXIT, they can be removed from the registry. 
    77                              <1>     ;
    78                              <1>     ;In EXIT, the PSP of the ending task must be taken
    79                              <1>     ; into consideration, as if the PSP isn't registered then the task ending
    80                              <1>     ; is a .COM file or an .EXE with no exports.
    81                              <1>     ;Furthermore, if register fails (due to memory or namespace constraints),
    82                              <1>     ; it must return CF=CY.
    83                              <1> dllHooks:
    84 0003C0A4 ????????????????    <1>     registerDLL   resq 1    ;Entered with rbp = execFrame
    85 0003C0AC ????????????????    <1>     unloadDLLHook   resq 1  ;
    86                              <1>     ;Share hook functions here
    87                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
    88                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
    89                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
    90                              <1> 
    91                              <1>     ;Note to programmer - Please adjust as necessary:
    92                              <1>     ;Functions which are nowhere called (yet) are noted as UNUSED in caps.
    93                              <1>     ;Those which are not meant to be used are noted as unused in lower case.
    94                              <1>     ;Those suffixed with a ? have their future in question.
    95                              <1>     ;Those suffixed with a / are done partially wrt MSDOS.
    96                              <1> 
    97                              <1>     ;SCPDOS has an optional handle, openFileCheck. This function can be used 
    98                              <1>     ; to see if there are any open handles. Its implementation is completely
    99                              <1>     ; optional, and an equivalent form of the function is provided for older
   100                              <1>     ; SHARE versions that might be ported that don't have a particular function.
   101                              <1>     ;This function is defined as follows:
   102                              <1>     ; Input: fname1Ptr -> Filename we want to see if there are any open records
   103                              <1>     ;                       for.
   104                              <1>     ; Output: CF=CY -> Handle not supported.
   105                              <1>     ;         CF=NC -> Handle supported. 
   106                              <1>     ;           ZF=ZE -> No Files open.
   107                              <1>     ;           ZF=NZ -> Some files are open.
   108                              <1> shareHooks:
   109                              <1>     ;markerShare resq 1  ;Marker Share hook
   110 0003C0B4 ????????????????    <1>     openFileCheck   resq 1  ;Check if share record for file exist       DONE
   111 0003C0BC ????????????????    <1>     openShare   resq 1  ;Share called on open.                          DONE 
   112 0003C0C4 ????????????????    <1>     closeShare  resq 1  ;Share called on close.                         DONE/
   113 0003C0CC ????????????????    <1>     closeCompShare  resq 1  ;Share to close all files for a machine.    DONE
   114 0003C0D4 ????????????????    <1>     closeTaskShare  resq 1  ;Share to close all files for a task.       DONE
   115 0003C0DC ????????????????    <1>     closeNameShare  resq 1  ;Share to close file by name.               DONE/
   116 0003C0E4 ????????????????    <1>     lockFileShare   resq 1  ;Share to lock file region.                 DONE
   117 0003C0EC ????????????????    <1>     unlockFileShare resq 1  ;Share to unlock file region.               DONE
   118 0003C0F4 ????????????????    <1>     checkFileLockShare  resq 1  ;Share to check file region locked.     DONE
   119 0003C0FC ????????????????    <1>     openFileListShare   resq 1  ;Share to get open file list entry.     DONE
   120 0003C104 ????????????????    <1>     updateFCBfromSFTShr resq 1  ;Share to update FCB from the SFT.      UNUSED?
   121 0003C10C ????????????????    <1>     fstClstOfFCBShare   resq 1  ;Share to get first cluster of FCB.     UNUSED?
   122 0003C114 ????????????????    <1>     closeDupFileShare   resq 1  ;Share to close file if dup for proc.   DONE
   123 0003C11C ????????????????    <1>     closeNewHdlShare    resq 1  ;Share to close hdls of rec opened file. DONE
   124 0003C124 ????????????????    <1>     updateDirShare      resq 1  ;Share to update dir info in SFT.       DONE 
   125                              <1> ;Create SFT header and corresponding array of five default sft entries
   126 0003C12C <res Ah>            <1>     firstSftHeader  resb sfth_size
   127 0003C136 <res 4Fh>           <1>     firstSft    resb sft_size
   128 0003C185 <res 4Fh>           <1>     secondSft   resb sft_size
   129 0003C1D4 <res 4Fh>           <1>     thirdSft    resb sft_size
   130 0003C223 <res 4Fh>           <1>     fourthSft   resb sft_size
   131 0003C272 <res 4Fh>           <1>     fifthSft    resb sft_size
   132                              <1> 
   133                              <1> ;Virtual CONsole Buffers
   134 0003C2C1 ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
   135                              <1>     ;Only incremented when CON device runs vCon
   136                              <1> vConBuf:    ;Proper buffer symbol
   137 0003C2C2 ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
   138 0003C2C3 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
   139                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   140 0003C343 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
   141 0003C3C3 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
   142                              <1> 
   143 0003C3C4 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
   144 0003C3C5 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
   145 0003C3C6 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
   146 0003C3C7 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
   147                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   148                              <1> 
   149 0003C3C8 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
   150                              <1> ;Server stuff. Default to all zeros (blank)
   151 0003C3C9 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
   152                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   153 0003C3CA ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5E01h call
   154 0003C3CB <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5E01h) (set to SPC)    
   155                              <1> ;Swappable Data Area
   156 0003C3DB <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
   157 0003C3FB ??                  <1>                 resb 1  ;Alignment byte
   158                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   159 0003C3FC ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
   160 0003C3FD ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
   161 0003C3FE ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
   162 0003C3FF ??                  <1>     errorLocus  resb 1  ;Where the error took place  
   163 0003C400 ????                <1>     errorExCde  resw 1  ;Extended Error Code
   164 0003C402 ??                  <1>     errorAction resb 1  ;Suggested action for error  
   165 0003C403 ??                  <1>     errorClass  resb 1  ;Error Class
   166 0003C404 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
   167 0003C40C ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   168 0003C414 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   169                              <1> 
   170 0003C41C ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   171 0003C424 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   172                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   173                              <1>     ;Lower byte: User Specified
   174 0003C426 ??                  <1>     currentDrv  resb 1  ;Default drive x
   175 0003C427 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   176                              <1> ;SDA, needs to be replaced between processes
   177                              <1> sdaMainSwap:
   178 0003C428 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   179 0003C430 ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   180 0003C438 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   181 0003C43A ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   182 0003C442 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   183 0003C44A ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   184 0003C452 ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   185 0003C454 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   186 0003C45C ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   187 0003C45D ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   188 0003C45E ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   189                              <1> 
   190 0003C45F ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   191 0003C467 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   192 0003C46F ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   193 0003C477 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   194 0003C47F ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   195                              <1> ;The below flag tells DOS to print ^C in the termination function
   196 0003C480 ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   197 0003C481 ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   198                              <1> ;Time stuff
   199                              <1> ;Read the below two as a word
   200 0003C482 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   201 0003C483 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   202 0003C484 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   203 0003C485 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   204 0003C487 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   205                              <1> 
   206 0003C488 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   207 0003C489 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   208 0003C48A ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   209                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   210                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   211                              <1> ; without forcing to re-build the whole primary request block.
   212                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   213                              <1> ; with secondary char output going through the secondary header
   214                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   215                              <1> ; for output)
   216                              <1> ;ioReqPkt is the largest possible packet
   217 0003C48B <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   218 0003C4B5 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   219 0003C4DF <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   220 0003C509 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   221                              <1> ;Swappable Buffers
   222 0003C50A ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   223                              <1>     ;We add an additional byte to save ah too
   224 0003C510 ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   225 0003C512 <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   226 0003C592 <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   227 0003C612 ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   228 0003C61A ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   229 0003C622 ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   230                              <1> ;Misc bookkeeping flags and vars
   231 0003C623 <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal search block (fullsize unlike DOS)
   232 0003C64E <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   233 0003C66E <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need a tmp CDS
   234 0003C6C9 <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   235 0003C6D5 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards for rename
   236 0003C6E1 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   237                              <1> 
   238 0003C6E9 ??                  <1>     volIncmpFCB resb 1  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   239 0003C6EA ??                  <1>     extFCBAttr  resb 1  ;Extended FCB file attribute
   240 0003C6EB ??                  <1>     extFCBFlag  resb 1  ;Set to -1 if Extended FCB
   241 0003C6EC ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   242 0003C6ED ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   243 0003C6EE ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   244 0003C6EF ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   245 0003C6F0 ??                  <1>     rwFlag      resb 1  ;00h=Read, -1=Write, read/write/share error reporting
   246 0003C6F1 ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   247 0003C6F2 ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   248                              <1> 
   249 0003C6F3 ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   250 0003C6F4 ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   251 0003C6F5 ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   252 0003C6F6 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   253 0003C6F7 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   254 0003C6F8 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   255 0003C6F9 ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   256                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   257                              <1> workingDD:  ;Create a symbol for the working device driver too
   258 0003C6FA ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   259 0003C702 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   260 0003C70A ????????????????    <1>     workingFCB  resq 1  ;Ptr to the caller FCB for FCB function
   261                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   262                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   263 0003C712 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   264 0003C71A ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   265 0003C722 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   266 0003C72A ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   267 0003C72C ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   268 0003C72E ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   269                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   270                              <1> ; and 32 byte offset into the sector for directory
   271 0003C736 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   272                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   273                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   274 0003C73E ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   275                              <1> ;***************************************************|
   276                              <1> ; Needs to be set up before any file access         |
   277                              <1> ; These vars keep track of file access properties   |
   278                              <1> ;   and must be used only for such purposes.        |
   279                              <1> ;***************************************************|
   280 0003C740 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   281 0003C744 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   282                              <1> 
   283 0003C748 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   284 0003C74C ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   285 0003C74D ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   286                              <1> 
   287 0003C755 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   288 0003C757 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   289                              <1> ;***************************************************|
   290 0003C75B ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   291 0003C75F ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   292 0003C763 ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   293 0003C764 ????????            <1>     bytesAppend resd 1  ;Number of bytes by which a file has been extended by
   294 0003C768 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   295 0003C76C ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   296                              <1> ;Directory stuff
   297 0003C770 ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   298 0003C774 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   299 0003C778 ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   300 0003C77A ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   301                              <1> ;Error DPB 
   302 0003C77E ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary situations
   303 0003C786 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   304                              <1>     
   305 0003C787 <res 2Bh>           <1>     renameFFBlk resb ffBlock_size   ;Source file "find first" block
   306 0003C7B2 <res 20h>           <1>     renameDir   resb fatDirEntry_size   ;Build new file dir entry here
   307                              <1> ;Stacks and scratch SFT
   308 0003C7D2 <res 528h>          <1>     critStack   resq 165
   309 0003CCFA ????????????????    <1>     critStakTop resq 1
   310                              <1> 
   311 0003CD02 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   312                              <1> 
   313 0003CD51 <res 638h>          <1>     AuxStack    resq 199
   314 0003D389 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   315 0003D391 <res 638h>          <1>     DiskStack   resq 199
   316 0003D9C9 ????????????????    <1>     DiskStakTop resq 1
   317                              <1> 
   318 0003D9D1 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   319 0003D9D2 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls! 
   320                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   321 0003D9D3 <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   322 0003DA43 <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   323                              <1> ;Exception handler vars in SDA now 
   324 0003DA6B <res 10h>           <1>     byteBuffer  resb 16 ;Used by DOS exception handler to build strings
   325 0003DA7B ??                  <1>     haltDOS     resb 1  ;Set by DOS exception handler to indicate DOS will halt
   326                              <1>     sdaLen      equ     $ - sda 
   327                              <1>     sdaMSLen    equ     $ - sdaMainSwap
   328                              <1> 
   329                              <1> ;Additional variables NOT in the SDA
   330 0003DA7C ????????????????    <1>     serverDispTblPtr    resq 1  ;DO NOT MOVE! Used to find server dispatch tbl
   331 0003DA84 ??                  <1>     xActDrv     resb 1  ;0 based number of last drive to transact
   332 0003DA85 <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   333                              <1>     ;for saving the current header when quickly doing a second request
   334                              <1> 
   335 0003DAAF ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   336 0003DAB0 ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   337                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   338                              <1> inExtASCII:
   339 0003DAB2 ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   340 0003DAB3 ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   341                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   342                              <1>     ; copy of the date/time record
   343                              <1> 
   344                              <1>     dSegLen     equ     $
    18                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    19                                  %define currSegVBase section.resSeg.vstart
    20                                  %include "./Source/Data/staticData.asm"
    21                              <1> 
    22                              <1> ;-----------------------------------:
    23                              <1> ;       Static Data Variables       :
    24                              <1> ;-----------------------------------:
    25 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    26 00000001 5D                  <1> dosMinor    db 93      ;.93
    27 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    27 0000000B 535953              <1>
    28 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    28 00000017 535953              <1>
    29 0000001A 1400                <1> maxHndls    dw 20    ;Initially hardcoded 20, will be made changable soon
    30                              <1> ;Use the idea of having a JFT valid byte in the PSP to reuse PSP as ptrToNewJFT
    31                              <1> ;At that point, maxHndls will be removed
    32                              <1> ;-----------------------------------:
    33                              <1> ;        Static Data Tables         :
    34                              <1> ;-----------------------------------:
    35                              <1> ctryTbl:
    36                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
    37 0000001C 0100                <1>     dw 1            
    38 0000001E 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
    39 00000023 2C00                <1>     db ",",0
    40 00000025 2E00                <1>     db ".",0
    41 00000027 2D00                <1>     db "-",0
    42 00000029 3A00                <1>     db ":",0
    43 0000002B 00                  <1>     db 0
    44 0000002C 02                  <1>     db 2 
    45 0000002D 00                  <1>     db 0 
    46 0000002E 0000000000000000    <1>     dq 0 
    47 00000036 2C00                <1>     db ",",0    
    48 00000038 000000000000000000- <1>     db 0,0,0,0,0,0,0,0,0,0
    48 00000041 00                  <1>
    49                              <1> 
    50                              <1> ;IO Char table
    51                              <1> ;This table has Request header length, command code and error flags
    52                              <1> ; as a packed DWORD entry
    53                              <1> ioRqCmdErrTbl:
    54                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    55                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    56 00000042 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    57 00000046 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    58 0000004A 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    59 0000004E 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    60 00000052 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    61 00000056 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    62                              <1> 
    63                              <1> 
    64                              <1> 
    65                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    66                              <1> ; wish to install their own custom logic.
    67 0000005A 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    68 00000062 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    69 00000063 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    70                              <1> ;Extended ASCII keys with special meanings
    71 00000064 3B                  <1> extKeyTbl   db eF1
    72 00000065 7D23                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    73 00000067 3C                  <1>             db eF2
    74 00000068 6F23                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    75 0000006A 3D                  <1>             db eF3
    76 0000006B 7623                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    77 0000006D 3E                  <1>             db eF4
    78 0000006E AB23                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    79 00000070 3F                  <1>             db eF5
    80 00000071 F023                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    81 00000073 40                  <1>             db eF6
    82 00000074 0624                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    83 00000076 41                  <1>             db eF7
    84 00000077 0D24                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    85 00000079 4B                  <1>             db eCursL
    86 0000007A D422                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    87 0000007C 4D                  <1>             db eCursR
    88 0000007D 7D23                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    89 0000007F 52                  <1>             db eIns
    90 00000080 1824                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    91 00000082 53                  <1>             db eDel
    92 00000083 1F24                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    93                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    94                              <1> 
    95                              <1> ;When counting the number of days, first compute the number of years since
    96                              <1> ; 1980 and your year. 
    97                              <1> ;Then, using the table below, find the number of leap years between 1980
    98                              <1> ; and (YourYear - 1). 
    99                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   100                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   101                              <1> ;
   102                              <1> ;Use the months table to get the number of days in a normal month as leap 
   103                              <1> ; years are added using the previous comment.
   104                              <1> 
   105                              <1> ;This table is the number of days in the month
   106                              <1> ;The function which updates the days in Feb writes the number to this table
   107                              <1> monthsTbl:  
   108 00000085 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   108 0000008E 1F1E1F              <1>
   109                              <1> 
   110                              <1> ;Error tables
   111                              <1> errXlatTbl:
   112                              <1> ;Each entry is n bytes long, defined as
   113                              <1> ; Byte 0      : DOS function number for which translation will occur
   114                              <1> ; Byte 1      : Length of the table entry - 2
   115                              <1> ; Bytes n - 3 : Acceptable Error codes
   116                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   117                              <1> ;The table is terminated with a single -1 byte
   118                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   119                              <1> ; only on entry to a disk function
   120 00000091 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   121 00000095 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   122 0000009A 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   123 000000A0 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   124 000000A4 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   125 000000AA 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   126 000000B1 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   127 000000B4 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   128 000000B8 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   129 000000BC 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   130 000000C1 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   131 000000C5 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   132 000000CB 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   133 000000D2 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   134 000000D6 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   135 000000DA 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   136 000000DD 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   137 000000E1 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   138 000000E5 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   139 000000EA 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   140 000000F2 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   141 000000F4 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   142 000000F9 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   143 000000FC 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   144 00000102 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   145 00000106 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   146 00000109 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   147 0000010F 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   148 00000116 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   149 0000011C 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   150 00000120 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   151 00000124 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   152 00000127 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   153 0000012C FF                  <1>     db -1   ;End Of Table marker
   154                              <1> 
   155                              <1> 
   156                              <1> extErrTbl:
   157                              <1> ;This table contains the default values for how to respond
   158                              <1> ; to particular errors. Fields with -1 need to be filled in before
   159                              <1> ; setting variables using this table.
   160                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   161                              <1> ; Byte 0: Extended Error Code as a byte
   162                              <1> ; Byte 1: Error Class
   163                              <1> ; Byte 2: Error Suggested Action
   164                              <1> ; Byte 3: Error Locus
   165                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   166                              <1> ;
   167                              <1> ;Error 01: Invalid function number
   168 0000012D 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   169                              <1> ;Error 02: File not found
   170 00000131 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   171                              <1> ;Error 03: Path not found
   172 00000135 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   173                              <1> ;Error 04: Too many open handles, and no handles are left
   174 00000139 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   175                              <1> ;Error 05: Access being denied
   176 0000013D 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   177                              <1> ;Error 06: Invalid File handle being provided
   178 00000141 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   179                              <1> ;Error 07: MCB chain destroyed
   180 00000145 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   181                              <1> ;Error 08: No Memory remaining
   182 00000149 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   183                              <1> ;Error 09: Invalid MCB block Address
   184 0000014D 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   185                              <1> ;Error 0A: Bad Environment block
   186 00000151 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   187                              <1> ;Error 0B: Data provided in a bad format
   188 00000155 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   189                              <1> ;Error 0C: Access Code Invalid
   190 00000159 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   191                              <1> ;Error 0D: Error due to Invalid Data provided
   192 0000015D 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   193                              <1> ;Error 0F: Error due to a bad drive letter being provided
   194 00000161 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   195                              <1> ;Error 10: Error due to attempting to delete the CWD
   196 00000165 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   197                              <1> ;Error 11: Error due to a unknown device being used
   198 00000169 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   199                              <1> ;Error 12: No more file handles available
   200 0000016D 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   201                              <1> ;Error 50: Network request not supported
   202 00000171 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   203                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   204 00000175 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   205                              <1> ;Error 21: File Locking Violation
   206 00000179 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   207                              <1> ;Error 54: Too many levels of redirection error
   208 0000017D 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   209                              <1> ;Error 56: Bad resource password provided
   210 00000181 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   211                              <1> ;Error 52: Directory already exists
   212 00000185 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   213                              <1> ;Error 32: Network request not supported by DOS
   214 00000189 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   215                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   216 0000018D 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   217                              <1> ;Error 57: Bad parameter in request
   218 00000191 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   219                              <1> ;Error 53: Fail was returned from Int 44h
   220 00000195 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   221                              <1> ;Error 24: Sharing Buffer Full
   222 00000199 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   223 0000019D FFFFFFFF            <1>     dd -1   ;End of table signature
   224                              <1> 
   225                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   226 000001A1 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   226 000001AA 090A0B0C0D0E0F      <1>
   227 000001B1 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   227 000001BA 191A1B1C1D1E1F      <1>
   228 000001C1 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   228 000001CA 3D3E3F5B5C5D7C      <1>
   229                              <1> badDirNameCharL equ $ - badDirNameChar
   230                              <1> ;The chars * ? . \ / need to always be handled separately
   231                              <1> 
   232                              <1> extAsciiTbl:    ;This table needs to be replaced in other Codepages
   233 000001D1 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   233 000001DA 4545494949          <1>
   234 000001DF 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   234 000001E8 5559999A9B          <1>
   235 000001ED 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   235 000001F6 A5A6A7A8            <1>
   236 000001FA A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   236 00000203 B2B3B4              <1>
   237 00000206 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   237 0000020F BEBFC0              <1>
   238 00000212 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   238 0000021B CACBCC              <1>
   239 0000021E CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   239 00000227 D6D7D8              <1>
   240 0000022A D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   240 00000233 E2E3E4              <1>
   241 00000236 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   241 0000023F EEEFF0              <1>
   242 00000242 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   242 0000024B FAFBFC              <1>
   243 0000024E FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   244                              <1> 
   245                              <1> asciiCharProperties:   ;This table needs to replaces in other Codepages
   246 00000251 F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   246 0000025A F0F6F6              <1>
   247 0000025D F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   247 00000266 F6F6F6              <1>
   248 00000269 F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   248 00000272 FFF6FF              <1>
   249 00000275 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   249 0000027E FFFEF6              <1>
   250 00000281 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   250 0000028A FFF4F4              <1>
   251 0000028D F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   251 00000296 FFFFFF              <1>
   252 00000299 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   252 000002A2 FFFFFF              <1>
   253 000002A5 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   253 000002AE F6FFFF              <1>
   254 000002B1 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   254 000002BA FFFFFF              <1>
   255 000002BD FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   255 000002C6 FFFFFF              <1>
   256 000002C9 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
   257                              <1> 
   258                              <1> hardErrorStack:
   259 000002D1 13                  <1>     db errWpd
   260 000002D2 0B                  <1>     db eClsMedia
   261 000002D3 07                  <1>     db eActRetUsr
   262 000002D4 02                  <1>     db eLocDsk
    21                                  %include "./Source/Data/dispTbl.asm"
    22                              <1> ;Kernel Dispatch Function Table
    23                              <1> 
    24                              <1> kDispTbl:
    25 000002D5 DA4E                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    26 000002D7 FF1A                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    27 000002D9 0C1B                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    28 000002DB C91B                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    29 000002DD F21B                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    30 000002DF FA1B                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    31 000002E1 121C                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    32 000002E3 451C                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    33 000002E5 6A1C                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    34 000002E7 C91C                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    35 000002E9 7C1F                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    36 000002EB D81C                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    37 000002ED E41C                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    38 000002EF 3766                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    39 000002F1 6966                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    40 000002F3 1D27                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    41 000002F5 2727                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    42 000002F7 BB24                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    43 000002F9 7425                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    44 000002FB FB25                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    45 000002FD 3127                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    46 000002FF 3B27                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    47 00000301 4527                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    48 00000303 2A26                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    49 00000305 F268                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    50 00000307 8266                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    51 00000309 E826                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    52 0000030B 8966                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    53 0000030D 8B66                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    54 0000030F F268                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    55 00000311 F268                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    56 00000313 2967                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    57 00000315 F268                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    58 00000317 4F27                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    59 00000319 5927                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    60 0000031B 9526                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    61 0000031D 6327                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    62 0000031F D466                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    63 00000321 E64D                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    64 00000323 6D27                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    65 00000325 7727                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    66 00000327 0E27                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    67 00000329 F521                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    68 0000032B 1C22                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    69 0000032D 2222                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    70 0000032F 4322                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    71 00000331 0667                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    72 00000333 FB26                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    73 00000335 1467                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    74 00000337 AC4E                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    75 00000339 2B67                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    76 0000033B E665                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    77 0000033D 6367                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    78 0000033F 7467                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    79 00000341 8567                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    80 00000343 C956                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    81 00000345 F256                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    82 00000347 5312                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    83 00000349 8314                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    84 0000034B 5C16                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    85 0000034D 6C29                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    86 0000034F 7D29                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    87 00000351 A72A                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    88 00000353 E62A                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    89 00000355 212B                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    90 00000357 2D2B                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    91 00000359 922B                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    92 0000035B 012C                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    93 0000035D 1843                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    94 0000035F 192D                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    95 00000361 692D                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    96 00000363 2417                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    97 00000365 6248                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    98 00000367 8C4A                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    99 00000369 944B                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
   100 0000036B 4150                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
   101 0000036D DC4E                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   102 0000036F C967                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   103 00000371 912D                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   104 00000373 FC2D                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   105 00000375 1466                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   106 00000377 1D66                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   107 00000379 D767                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   108 0000037B E867                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   109 0000037D C268                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   110 0000037F D34D                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   111 00000381 2C2E                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   112 00000383 B82E                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   113 00000385 324D                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   114 00000387 C968                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   115 00000389 002F                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   116 0000038B C82F                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   117 0000038D 0230                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   118 0000038F F368                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   119 00000391 B46A                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   120 00000393 1A6B                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   121 00000395 A717                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   122 00000397 F268                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   123 00000399 2666                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   124 0000039B F268                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   125 0000039D 2F66                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   126 0000039F 2157                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   127 000003A1 2157                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   128 000003A3 6E30                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   129 000003A5 DC2F                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   130 000003A7 F268                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   131                              <1> kDispTblL  equ $ - kDispTbl 
   132                              <1> 
   133                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   134 000003A9 D46A                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   135 000003AB 8438                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   136 000003AD 965F                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   137 000003AF D76A                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   138 000003B1 BE60                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   139 000003B3 3A1A                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   140 000003B5 E156                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   141 000003B7 6300                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   142 000003B9 3542                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   143 000003BB 9500                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   144 000003BD BA6B                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   145 000003BF 426B                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   146 000003C1 7338                <1>     dw openDriverWrapper - mDispTbl ;AX=120Ch, Open device
   147 000003C3 D423                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   148 000003C5 A300                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   149 000003C7 BD00                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   150 000003C9 CB00                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   151 000003CB 1A61                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   152 000003CD FC60                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   153 000003CF CA60                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   154 000003D1 4862                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   155 000003D3 DE00                <1>     dw flushBuffer - mDispTbl   ;AX=1215h
   156 000003D5 6441                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   157 000003D7 8C60                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   158 000003D9 A45F                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   159 000003DB 3160                <1>     dw getCDS - mDispTbl    ;AX=1219h
   160 000003DD B00B                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   161 000003DF 6723                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   162 000003E1 1E68                <1>     dw noOp - mDispTbl  ;AX=121Ch -> Old Checksum memory
   163 000003E3 1E68                <1>     dw noOp - mDispTbl  ;AX=121Dh -> Old Sum Memory
   164 000003E5 3361                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   165 000003E7 E25F                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   166 000003E9 9941                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   167 000003EB C916                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   168 000003ED AC64                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   169 000003EF EC10                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   170 000003F1 1F6B                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   171 000003F3 F160                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   172                              <1> mDispTblL   equ     $ - mDispTbl
   173                              <1> 
   174                              <1> serverDispTbl:  ;Server Dispatch functions
   175 000003F5 0B                  <1>     db 0Bh  ;Number of entries
   176 000003F6 1A68                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   177 000003F8 6C68                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   178 000003FA C568                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   179 000003FC D668                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   180 000003FE DE68                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   181 00000400 E668                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   182 00000402 0169                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   183 00000404 2B69                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   184 00000406 2B69                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   185 00000408 2B69                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   186 0000040A 3869                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
    22                                  %if DEBUG
    23                                  %include "./Source/Debug/debug.asm"
    24                                  %endif
    25                                  %include "./Source/Kernel/FAT/buffun.asm"
    26                              <1> ;This file contains FAT disk buffer related functions that
    27                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    28                              <1> ;----------------------------------------------------
    29                              <1> ;           Externally referenced functions         :
    30                              <1> ;----------------------------------------------------
    31                              <1> 
    32                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    33                              <1> ;Sets the buffer in rdi to the head of the chain
    34                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    35                              <1> ;Output: Buffer header set to the head of the chain
    36 0000040C 48393D(63C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    37 00000413 7428                <1>     je .exit
    38 00000415 56                  <1>     push rsi
    39 00000416 488B35(63C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    40                              <1> .mainlp:
    41 0000041D 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    42 00000420 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    43 00000422 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    44 00000425 EBF6                <1>     jmp short .mainlp
    45                              <1> .fnd:
    46 00000427 57                  <1>     push rdi
    47 00000428 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    48 0000042B 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    49 0000042E 5F                  <1>     pop rdi ;Get original buf back
    50 0000042F 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    51 00000432 488735(63C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    52 00000439 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    53 0000043C 5E                  <1>     pop rsi
    54                              <1> .exit:
    55                              <1>     return
    18                              <2> %%_ret:
    19 0000043D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    56                              <1> 
    57                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    58                              <1> ;1 External reference
    59                              <1> ;Input: rdi = Buffer header to flush and free
    60 0000043E E844000000          <1>     call flushBuffer
    61 00000443 7206                <1>     jc .exit
    62                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    63 00000445 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    64                              <1> .exit:
    65                              <1>     return
    18                              <2> %%_ret:
    19 0000044B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    66                              <1> 
    67                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    68                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    69                              <1> ;Output: rdi = First disk buffer
    70 0000044C 488B3D(63C00300)    <1>     mov rdi, [bufHeadPtr]
    71 00000453 57                  <1>     push rdi
    72                              <1> .lp:
    73 00000454 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    74 00000458 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    75 0000045B 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    76 00000462 75F0                <1>     jne .lp
    77 00000464 5F                  <1>     pop rdi
    78                              <1>     return
    18                              <2> %%_ret:
    19 00000465 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    79                              <1> 
    80                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    81                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    82                              <1> ; second buffer in the chain in rdi
    83                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    84                              <1> ;Output: rdi = Second buffer in the chain
    85 00000466 52                  <1>     push rdx
    86 00000467 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    87 0000046A E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    88 0000046F 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    89 00000472 5A                  <1>     pop rdx
    90                              <1>     return
    18                              <2> %%_ret:
    19 00000473 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    93                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    94                              <1> ;Input: rdi = Buffer header to start searching at
    95                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    96                              <1> ;        ZF=ZE => No unreferenced buffer found
    97 00000474 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    98 00000478 750C                <1>     jnz .exit
    99 0000047A 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   100 0000047D 4881FFFFFFFFFF      <1>     cmp rdi, -1
   101 00000484 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
   102                              <1> .exit:
   103                              <1>     return
    18                              <2> %%_ret:
    19 00000486 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   104                              <1> 
   105                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
   106                              <1> ;Flushes the data in a sector buffer to disk!
   107                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   108                              <1> ;Exit:  CF=NC : Success
   109                              <1> ;       CF=CY : Fail, terminate the request
   110                              <1> ;First make request to device driver
   111 00000487 50                  <1>     push rax
   112 00000488 53                  <1>     push rbx
   113 00000489 51                  <1>     push rcx
   114 0000048A 52                  <1>     push rdx
   115 0000048B 56                  <1>     push rsi
   116 0000048C 55                  <1>     push rbp
   117                              <1> ;If the buffer is freed, skip flushing to avoid issues
   118 0000048D 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
   119 00000491 7454                <1>     je .fbFreeExit  ;If it is free exit
   120 00000493 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   121 00000497 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   122                              <1> .fbRequest0:
   123 00000499 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   124 0000049E F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   125 000004A2 7406                <1>     jz .fbRequest1
   126 000004A4 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   127                              <1> .fbRequest1:
   128 000004AA 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   129 000004AD B901000000          <1>     mov ecx, 1  ;One sector to copy
   130 000004B2 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   131 000004B6 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   132 000004BA 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   133 000004BE E8285D0000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   134 000004C3 E8BF5B0000          <1>     call absDiskDriverCall    ;Make Driver Request
   135 000004C8 7525                <1>     jnz .fbFail
   136                              <1> ;Now check if the buffer was a FAT, to write additional copies
   137 000004CA F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   138 000004CE 7417                <1>     jz .fbFreeExit  ;If not, exit
   139 000004D0 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   140 000004D3 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   141 000004D5 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   142 000004D8 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   143 000004DC E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   144                              <1> .fbFreeExit1:
   145 000004E1 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   146 000004E4 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   147                              <1> .fbFreeExit:
   148 000004E7 F8                  <1>     clc
   149                              <1> .fbExitFail:
   150 000004E8 5D                  <1>     pop rbp
   151 000004E9 5E                  <1>     pop rsi
   152 000004EA 5A                  <1>     pop rdx
   153 000004EB 59                  <1>     pop rcx
   154 000004EC 5B                  <1>     pop rbx
   155 000004ED 58                  <1>     pop rax
   156                              <1>     return
    18                              <2> %%_ret:
    19 000004EE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   157                              <1> .fbFail:
   158                              <1> ;Enter here only if the request failed
   159 000004EF FFCE                <1>     dec esi
   160 000004F1 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   161                              <1> ;Request failed thrice, critical error call
   162 000004F3 C605(5CC40300)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   163 000004FA E822550000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   164 000004FF 3C01                <1>     cmp al, critRetry
   165 00000501 7496                <1>     je .fbRequest0
   166                              <1>     ;Else we fail (Ignore=Fail here)
   167 00000503 F9                  <1>     stc ;Set error flag to indicate fail
   168 00000504 E9DFFFFFFF          <1>     jmp .fbExitFail
   169                              <1> 
   170                              <1> testDirtyBufferForDrive:    ;External linkage
   171                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   172                              <1> ;Input: al = Drive number (0 based)
   173                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   174                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   175 00000509 53                  <1>     push rbx
   176 0000050A 488B1D(63C00300)    <1>     mov rbx, qword [bufHeadPtr]
   177                              <1> .tdbfdCheckBuffer:
   178 00000511 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   179 00000514 7509                <1>     jne .tdbfdGotoNextBuffer
   180 00000516 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   181 0000051A 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   182 0000051C F9                  <1>     stc ;Else dirty buffer found, set carry flag
   183                              <1> .tdbfdExit:
   184 0000051D 5B                  <1>     pop rbx
   185                              <1>     return
    18                              <2> %%_ret:
    19 0000051E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   186                              <1> .tdbfdGotoNextBuffer:
   187 0000051F 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   188 00000522 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   189 00000529 74F2                <1>     je .tdbfdExit
   190 0000052B EBE4                <1>     jmp short .tdbfdCheckBuffer
   191                              <1> 
   192                              <1> 
   193                              <1> cancelWriteThroughBuffers:  ;External linkage
   194                              <1> ; Frees all buffers for the workingDPB
   195                              <1> ; Alternative symbol for the same function. Used on Fails and Aborts.
   196                              <1> freeBuffersForDPB:  ;External Linkage (Before Get BPB in medchk)
   197                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   198                              <1> ; to have a drive number of -1, thus freeing it
   199                              <1> ;Given DPB is in rbp
   200 0000052D 53                  <1>     push rbx
   201 0000052E 488B1D(63C00300)    <1>     mov rbx, qword [bufHeadPtr]
   202                              <1> .i0:
   203 00000535 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   204 00000539 7506                <1>     jne .i1 ;If no, skip freeing
   205 0000053B 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   206                              <1> .i1:
   207 00000541 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   208 00000544 4881FBFFFFFFFF      <1>     cmp rbx, -1
   209 0000054B 75E8                <1>     jne .i0
   210                              <1> .exit:
   211 0000054D 5B                  <1>     pop rbx
   212                              <1>     return
    18                              <2> %%_ret:
    19 0000054E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   213                              <1> 
   214                              <1> writeThroughBuffers: ;External linkage
   215                              <1> ; Flushes and resets the dirty bit for all dirty bufs for working drive
   216                              <1> ; Returns: CF=NC => All is well, buffer flushed and dirty bit cleaned
   217                              <1> ;          CF=CY => Buffer failed to flush, marked as dirty and return
   218 0000054F 50                  <1>     push rax
   219 00000550 57                  <1>     push rdi
   220 00000551 488B05(FAC60300)    <1>     mov rax, qword [workingDPB]    ;Get current DPB to compare with
   221 00000558 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   222                              <1> .mainLp:
   223 0000055F 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
   224 00000566 7416                <1>     je .exit   
   225 00000568 48394717            <1>     cmp qword [rdi + bufferHdr.driveDPBPtr], rax  ;Compare dpb numbers
   226 0000056C 750B                <1>     jne .nextBuffer
   227 0000056E E814FFFFFF          <1>     call flushBuffer    ;Flush this buffer if it on dpb we want
   228 00000573 7209                <1>     jc .exit  ;If something went wrong, exit
   229 00000575 806709BF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~dirtyBuffer
   230                              <1> .nextBuffer:
   231 00000579 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   232 0000057C EBE1                <1>     jmp short .mainLp
   233                              <1> .exit:
   234 0000057E 5F                  <1>     pop rdi
   235 0000057F 58                  <1>     pop rax
   236                              <1>     return
    18                              <2> %%_ret:
    19 00000580 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   237                              <1> 
   238                              <1> markBufferDirty:
   239 00000581 55                  <1>     push rbp
   240 00000582 9C                  <1>     pushfq
   241 00000583 488B2D(2EC70300)    <1>     mov rbp, qword [currBuff]
   242 0000058A 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   243 0000058E 9D                  <1>     popfq
   244 0000058F 5D                  <1>     pop rbp
   245                              <1>     return
    18                              <2> %%_ret:
    19 00000590 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   246                              <1> 
   247                              <1> 
   248                              <1> getBuffer: ;Internal Linkage ONLY
   249                              <1> ;
   250                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   251                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   252                              <1> ;Flushes if not in disk change mode. 
   253                              <1> ;If in disk change mode, will check to see if the selected buffer 
   254                              <1> ; has data referring a device using the same DPB as we are changing.
   255                              <1> ; If it is, skip flushing, if not, flush first!
   256                              <1> ;
   257                              <1> ;This function will return a pointer to the desired data sector OR 
   258                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   259                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   260                              <1> ;Entry: rax = Sector to read
   261                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   262                              <1> ;       rsi = DPB to use for transaction
   263                              <1> ;Exit:  CF=NC => 
   264                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   265                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   266 00000591 51                  <1>     push rcx
   267 00000592 52                  <1>     push rdx
   268 00000593 56                  <1>     push rsi
   269 00000594 57                  <1>     push rdi
   270 00000595 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   271 00000597 E832010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   272 0000059C 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   273 000005A3 7418                <1>     je .rbReadNewSector
   274 000005A5 48893D(2EC70300)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   275 000005AC 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer ;Only set if in buf chain
   276                              <1> .rbExit:
   277 000005B0 F8                  <1>     clc
   278                              <1> .rbExitNoFlag:
   279 000005B1 5F                  <1>     pop rdi
   280 000005B2 5E                  <1>     pop rsi
   281 000005B3 5A                  <1>     pop rdx
   282 000005B4 59                  <1>     pop rcx
   283 000005B5 488B1D(2EC70300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   284                              <1>     return
    18                              <2> %%_ret:
    19 000005BC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   285                              <1> .rbReadNewSector:
   286 000005BD E8B5000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   287 000005C2 803D(D1D90300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   288 000005C9 7506                <1>     jne .flush  ;We are not, flush buffer
   289 000005CB 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   290 000005CF 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   291                              <1> .flush:
   292 000005D1 E868FEFFFF          <1>     call flushAndFreeBuffer
   293 000005D6 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   294                              <1> .skipFlush:
   295                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   296                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   297                              <1>     ; is no longer owned by that File so we mark the owner as none
   298 000005D8 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   299 000005E0 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   300 000005E3 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   301 000005E6 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   302 000005EA 80F902              <1>     cmp cl, fatBuffer
   303 000005ED B201                <1>     mov dl, 1   ;Default values if not fat buffer
   304 000005EF 7503                <1>     jne .rbNonFATbuffer
   305 000005F1 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   306                              <1> .rbNonFATbuffer:
   307 000005F4 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   308 000005F7 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   309 000005FA 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   310 000005FD 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   311 00000601 C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   312 00000605 E804000000          <1>     call readSectorBuffer ;Carry the flag from the request
   313 0000060A 72A5                <1>     jc .rbExitNoFlag
   314 0000060C EBA2                <1>     jmp short .rbExit
   315                              <1> 
   316                              <1> readSectorBuffer:   ;Internal Linkage
   317                              <1> ;Reads a sector into a built sector buffer
   318                              <1> ;Entry: rdi = Pointer to buffer header
   319                              <1> ;Exit:  CF=NC : Success
   320                              <1> ;       CF=CY : Fail, terminate the request
   321                              <1> ;       rbx pointing to buffer header
   322                              <1> ;First make request to device driver
   323 0000060E 50                  <1>     push rax
   324 0000060F 53                  <1>     push rbx
   325 00000610 51                  <1>     push rcx
   326 00000611 52                  <1>     push rdx
   327 00000612 56                  <1>     push rsi
   328 00000613 55                  <1>     push rbp
   329                              <1> .rsRequest0:
   330 00000614 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   331 00000619 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   332 0000061D 7406                <1>     jz .rsRequest1
   333 0000061F 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   334                              <1> .rsRequest1:
   335 00000625 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   336 00000628 B901000000          <1>     mov ecx, 1  ;One sector to copy
   337 0000062D 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   338 00000631 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   339 00000635 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   340 00000639 E8B85B0000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   341 0000063E E8445A0000          <1>     call absDiskDriverCall    ;Make Driver Request
   342 00000643 7508                <1>     jnz .rsFail
   343                              <1> .rsExit:
   344 00000645 F8                  <1>     clc
   345                              <1> .rsExitFail:
   346 00000646 5D                  <1>     pop rbp
   347 00000647 5E                  <1>     pop rsi
   348 00000648 5A                  <1>     pop rdx
   349 00000649 59                  <1>     pop rcx
   350 0000064A 5B                  <1>     pop rbx
   351 0000064B 58                  <1>     pop rax
   352                              <1>     return
    18                              <2> %%_ret:
    19 0000064C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   353                              <1> .rsFail:
   354                              <1> ;Enter here only if the request failed
   355 0000064D FFCE                <1>     dec esi
   356 0000064F 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   357                              <1> ;Request failed thrice, critical error call
   358                              <1> ;First free the buffer if we failed to read data into it 
   359 00000651 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   360 00000655 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   361 0000065B C605(5CC40300)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   362 00000662 E8BA530000          <1>     call diskDevErr
   363 00000667 3C01                <1>     cmp al, critRetry
   364 00000669 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   365 0000066B 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   366 0000066F EBA3                <1>     jmp short .rsRequest0
   367                              <1> .fail:
   368 00000671 F9                  <1>     stc ;Set error flag to indicate fail
   369 00000672 E9CFFFFFFF          <1>     jmp .rsExitFail
   370                              <1>     
   371                              <1> findLRUBuffer: ;Internal Linkage
   372                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   373                              <1> ; in rbx and the currBuff variable
   374                              <1> ;Input: Nothing
   375                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   376                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   377 00000677 52                  <1>     push rdx
   378 00000678 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   379 0000067F 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   380 00000683 7436                <1>     je .flbExit 
   381 00000685 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   382 0000068C 742D                <1>     je .flbExit
   383                              <1> .flbWalk:
   384 0000068E 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   385 00000691 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   386 00000694 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   387 00000698 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   388 0000069A 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   389 000006A1 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   390 000006A3 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   391                              <1> .flbHeadLink:
   392 000006AA 488B15(63C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   393 000006B1 48893D(63C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   394 000006B8 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   395                              <1> .flbExit:
   396 000006BB 5A                  <1>     pop rdx
   397 000006BC 48893D(2EC70300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   398                              <1>     return
    18                              <2> %%_ret:
    19 000006C3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   399                              <1> .flbFreeLink:
   400 000006C4 51                  <1>     push rcx
   401 000006C5 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   402 000006C8 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   403 000006CB 59                  <1>     pop rcx
   404 000006CC EBDC                <1>     jmp short .flbHeadLink
   405                              <1> 
   406                              <1> findSectorInBuffer:     ;Internal linkage
   407                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   408                              <1> ;If the sector is not in a buffer, returns with a -1
   409                              <1> ;Input: rax = Sector number
   410                              <1> ;       dl = Drive number
   411                              <1> ;Output: rdi = Buffer hdr pointer or -1
   412 000006CE 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   413                              <1> .fsiCheckBuffer:
   414 000006D5 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   415 000006D8 7507                <1>     jne .fsiGotoNextBuffer
   416 000006DA 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   417 000006DE 7501                <1>     jne .fsiGotoNextBuffer
   418                              <1> .fsiExit:
   419                              <1>     return
    18                              <2> %%_ret:
    19 000006E0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   420                              <1> .fsiGotoNextBuffer:
   421 000006E1 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   422 000006E4 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   423 000006EB 74F3                <1>     je .fsiExit
   424 000006ED EBE6                <1>     jmp short .fsiCheckBuffer
   425                              <1> 
   426                              <1> ;-----------------------------------------------------------------------------
   427                              <1> ;SPECIAL BUFFER FUNCTIONS
   428                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   429                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   430                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   431                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   432                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   433                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   434                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   435                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   436                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   437                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   438                              <1> ;-----------------------------------------------------------------------------
   439                              <1> getBufForDataNoFile:
   440                              <1> ;Returns a buffer to use for disk data in rbx
   441                              <1> ;Requires a File Handle.
   442                              <1> ;Input: [workingDPB] = DPB to transact on
   443                              <1> ;       rax = Sector to transfer
   444                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   445 000006EF 51                  <1>     push rcx
   446 000006F0 B108                <1>     mov cl, dataBuffer
   447 000006F2 56                  <1>     push rsi
   448 000006F3 57                  <1>     push rdi
   449 000006F4 488B35(FAC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   450 000006FB E891FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   451 00000700 725F                <1>     jc getBufCommon.exit
   452 00000702 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   453 0000070A EB55                <1>     jmp short getBufCommon.exit
   454                              <1> getBufForDirNoFile:
   455                              <1> ;Returns a buffer to use for disk dir data in rbx
   456                              <1> ;Requires a File Handle.
   457                              <1> ;Input: [workingDPB] = DPB to transact on
   458                              <1> ;       rax = Sector to transfer
   459                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   460 0000070C 51                  <1>     push rcx
   461 0000070D B104                <1>     mov cl, dirBuffer
   462 0000070F 56                  <1>     push rsi
   463 00000710 57                  <1>     push rdi
   464 00000711 488B35(FAC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   465 00000718 E874FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   466 0000071D 7242                <1>     jc getBufCommon.exit
   467 0000071F 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   468 00000727 EB38                <1>     jmp short getBufCommon.exit
   469                              <1> getBufForFat:
   470                              <1> ;Returns a buffer to use for fat data in rbx
   471                              <1> ;Input: [workingDPB] = DPB to transact on
   472                              <1> ;       rax = Sector to transfer
   473                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   474 00000729 51                  <1>     push rcx
   475 0000072A B102                <1>     mov cl, fatBuffer
   476 0000072C EB03                <1>     jmp short getBufCommon2
   477                              <1> getBufForDOS:
   478                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   479                              <1> ;Input: [workingDPB] = DPB to transact on
   480                              <1> ;       rax = Sector to transfer
   481                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   482 0000072E 51                  <1>     push rcx
   483 0000072F B101                <1>     mov cl, dosBuffer
   484                              <1> getBufCommon2:
   485 00000731 56                  <1>     push rsi
   486 00000732 57                  <1>     push rdi    ;Push rdi to preserve it
   487 00000733 488B35(FAC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   488 0000073A EB15                <1>     jmp short getBufCommon.makeReq
   489                              <1> getBufForDir:
   490                              <1> ;Returns a buffer to use for disk directory data in rbx
   491                              <1> ;Input: [currentSFT] = File to manipulate
   492                              <1> ;       rax = Sector to transfer
   493                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   494 0000073C 51                  <1>     push rcx
   495 0000073D B104                <1>     mov cl, dirBuffer
   496 0000073F EB03                <1>     jmp short getBufCommon
   497                              <1> getBufForData:
   498                              <1> ;Returns a buffer to use for disk data in rbx
   499                              <1> ;Requires a File Handle.
   500                              <1> ;Input: [currentSFT] = File to manipulate
   501                              <1> ;       rax = Sector to transfer
   502                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   503 00000741 51                  <1>     push rcx
   504 00000742 B108                <1>     mov cl, dataBuffer
   505                              <1> getBufCommon:
   506 00000744 56                  <1>     push rsi
   507 00000745 57                  <1>     push rdi
   508 00000746 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
   509 0000074D 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   510                              <1> .makeReq:
   511 00000751 E83BFEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   512 00000756 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   513                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   514                              <1>     ; flushed to the file!
   515                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   516                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   517                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   518 00000758 F6C103              <1>     test cl, dosBuffer | fatBuffer
   519 0000075B 7504                <1>     jnz .exit
   520 0000075D 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   521                              <1> .exit:
   522 00000761 5F                  <1>     pop rdi
   523 00000762 5E                  <1>     pop rsi
   524 00000763 59                  <1>     pop rcx
   525                              <1>     return
    18                              <2> %%_ret:
    19 00000764 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> flushFile:
   528                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   529                              <1> ; FAT/DOS buffers to flush
   530                              <1> ; We flush and free, and set to head of chain before continuing to search
   531                              <1> ;Input: rdi = is the file (sft) we wish to flush
   532                              <1> ;Output: CF=NC => All ok
   533                              <1> ;        CF=CY => A sector failed, exit. 
   534 00000765 57                  <1>     push rdi
   535 00000766 56                  <1>     push rsi
   536                              <1>     ;First check if the file has been written to?
   537 00000767 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   538 0000076D 7534                <1>     jnz .exitNoFlush ;Exit without flushing if set
   539 0000076F 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   540 00000772 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   541                              <1> .ffLoop:
   542 00000779 4881FFFFFFFFFF      <1>     cmp rdi, -1
   543 00000780 741B                <1>     je .exit
   544 00000782 F6470907            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer | dirBuffer
   545 00000786 751E                <1>     jnz .found  ;Flush if either bit is set
   546 00000788 48817F1FFFFFFFFF    <1>     cmp qword [rdi + bufferHdr.owningFile], -1  ;If owning file is -1, flush too
   547 00000790 7414                <1>     je .found
   548 00000792 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   549 00000796 740E                <1>     je .found
   550 00000798 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   551 0000079B EBDC                <1>     jmp short .ffLoop
   552                              <1> .exit:
   553                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   554 0000079D 66814E054000        <1>     or word [rsi + sft.wDeviceInfo], blokFileNoFlush  ;Set that bit again!
   555                              <1> .exitNoFlush:
   556 000007A3 5E                  <1>     pop rsi
   557 000007A4 5F                  <1>     pop rdi
   558                              <1>     return
    18                              <2> %%_ret:
    19 000007A5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   559                              <1> .found:
   560                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   561                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   562 000007A6 E893FCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   563 000007AB 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   564                              <1>     ;If the sector has been successfully flushed, then it
   565                              <1>     ; is no longer owned by that File so we mark the owner as none
   566 000007AD 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   567 000007B5 E8ACFCFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   568 000007BA EBBD                <1>     jmp short .ffLoop
    26                                  %include "./Source/Kernel/FAT/fat.asm"
    27                              <1> ;-----------------------------------:
    28                              <1> ;       File System routines        :
    29                              <1> ;-----------------------------------:
    30                              <1> getFATtype:
    31                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    32                              <1> ;Entry: rbp = DPB to ascertain FAT
    33                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    34 000007BC 53                  <1>     push rbx
    35 000007BD 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    36 000007C0 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    37 000007C5 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    38 000007CB 730F                <1>     jae .exit
    39 000007CD FFC9                <1>     dec ecx     ;FAT 12 marker
    40 000007CF 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    41 000007D5 7205                <1>     jb .exit
    42 000007D7 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    43                              <1> .exit:
    44 000007DC 5B                  <1>     pop rbx
    45                              <1>     return
    18                              <2> %%_ret:
    19 000007DD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> 
    47                              <1> clust2FATEntry:
    48                              <1> ;Converts a cluster number to a offset in the FAT
    49                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    50                              <1> ;        eax = Cluster number to look for
    51                              <1> ;Exit:   eax = Sector on disk of FAT 
    52                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    53                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    54 000007DE 53                  <1>     push rbx
    55 000007DF 55                  <1>     push rbp
    56 000007E0 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
    57 000007E7 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    58 000007EA 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    59 000007F0 731E                <1>     jae .fat32
    60 000007F2 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    61 000007F8 7209                <1>     jb .fat12
    62                              <1> ;FAT16
    63 000007FA D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    64 000007FC 6801000000          <1>     push qword 1
    65 00000801 EB15                <1>     jmp short .common
    66                              <1> .fat12:
    67 00000803 89C1                <1>     mov ecx, eax    ;ecx = eax
    68 00000805 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    69 00000807 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    70 00000809 6800000000          <1>     push qword 0
    71 0000080E EB08                <1>     jmp short .common
    72                              <1> .fat32:
    73 00000810 6802000000          <1>     push qword 2
    74 00000815 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    75                              <1> .common:
    76                              <1> ;eax has the FAToffset
    77 00000818 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    78 0000081C 31D2                <1>     xor edx, edx    ;edx = 0
    79 0000081E F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    80 00000820 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    81 00000824 01D8                <1>     add eax, ebx
    82 00000826 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    83 00000827 5D                  <1>     pop rbp
    84 00000828 5B                  <1>     pop rbx
    85                              <1>     return
    18                              <2> %%_ret:
    19 00000829 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> getStartSectorOfCluster:
    88                              <1> ;Input: eax = Cluster Number
    89                              <1> ;       rbp = dpb pointer
    90                              <1> ;Output: rax = Starting Sector number for cluster
    91                              <1> ;Gives the data sector we are at in the current cluster
    92                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    93 0000082A 51                  <1>     push rcx
    94 0000082B 09C0                <1>     or eax, eax ;Zero upper dword
    95 0000082D 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    96                              <1> .fat32Root:
    97 0000082F 482D02000000        <1>     sub rax, 2
    98 00000835 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    99 00000838 48D3E0              <1>     shl rax, cl
   100 0000083B 31C9                <1>     xor ecx, ecx
   101 0000083D 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
   102 00000840 4801C8              <1>     add rax, rcx
   103                              <1>     ;rax now has the first sector of the current cluster
   104 00000843 59                  <1>     pop rcx
   105                              <1>     return
    18                              <2> %%_ret:
    19 00000844 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   106                              <1> .rootDir:
   107 00000845 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
   108 00000848 E86FFFFFFF          <1>     call getFATtype
   109 0000084D 81F902000000        <1>     cmp ecx, 2
   110 00000853 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
   111                              <1>     ;Else rax has the first sector of the Root Dir
   112 00000855 59                  <1>     pop rcx
   113                              <1>     return
    18                              <2> %%_ret:
    19 00000856 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> 
   116                              <1> getLastClusterInChain:
   117                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
   118                              <1> ;Input: eax = Cluster to start searching at
   119                              <1> ;Output: eax = Last cluster in chain
   120                              <1> ;If input eax = 0, output eax = 0
   121 00000857 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   122                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000859 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   123 0000085B 53                  <1>     push rbx
   124                              <1> .lp:
   125 0000085C 89C3                <1>     mov ebx, eax
   126 0000085E E8AB010000          <1>     call readFAT
   127 00000863 7209                <1>     jc .exit
   128 00000865 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   129 0000086A 75F0                <1>     jne .lp
   130 0000086C 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   131                              <1> .exit: 
   132 0000086E 5B                  <1>     pop rbx
   133                              <1>     return
    18                              <2> %%_ret:
    19 0000086F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   134                              <1> 
   135                              <1> getNumberOfClustersInChain:
   136                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   137                              <1> ;Input: eax = Cluster to start searching at
   138                              <1> ;Output: eax = Number of clusters in the chain
   139                              <1> ;If input eax = 0, output eax = 0
   140 00000870 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   141                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000872 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   142 00000874 51                  <1>     push rcx
   143 00000875 31C9                <1>     xor ecx, ecx
   144                              <1> .lp:
   145 00000877 FFC1                <1>     inc ecx
   146 00000879 E890010000          <1>     call readFAT
   147 0000087E 7209                <1>     jc .exit
   148 00000880 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   149 00000885 75F0                <1>     jne .lp
   150 00000887 89C8                <1>     mov eax, ecx    ;Get the count
   151                              <1> .exit: 
   152 00000889 59                  <1>     pop rcx
   153                              <1>     return
    18                              <2> %%_ret:
    19 0000088A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   154                              <1> 
   155                              <1> getClusterInChain:
   156                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   157                              <1> ;If an EOC is encountered, then ecx will not be 
   158                              <1> ;Input: eax = Start Cluster to start searching from
   159                              <1> ;       ecx = Number of clusters to go forwards by;
   160                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   161                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   162                              <1> ;Also usual CF babble.
   163 0000088B 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   164                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000088D 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   165 0000088F 53                  <1>     push rbx
   166 00000890 67E30F              <1>     jecxz .exit
   167                              <1> .lp:
   168 00000893 89C3                <1>     mov ebx, eax
   169 00000895 E874010000          <1>     call readFAT
   170 0000089A 7206                <1>     jc .exit
   171 0000089C FFC9                <1>     dec ecx
   172 0000089E 75F3                <1>     jnz .lp
   173 000008A0 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   174                              <1> .exit:
   175 000008A2 5B                  <1>     pop rbx
   176                              <1>     return
    18                              <2> %%_ret:
    19 000008A3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   177                              <1> 
   178                              <1> startNewChain:
   179                              <1> ;Working dpb must be set
   180                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   181                              <1> ;If CF=CY, hard error
   182 000008A4 53                  <1>     push rbx
   183 000008A5 56                  <1>     push rsi
   184 000008A6 E858000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   185 000008AB 7215                <1>     jc .exit    ;Disk read error?
   186 000008AD 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   187 000008B2 740E                <1>     je .exit
   188 000008B4 BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   189 000008B9 89C3                <1>     mov ebx, eax
   190 000008BB E8F2010000          <1>     call writeFAT   ;Propagate the CF 
   191 000008C0 89D8                <1>     mov eax, ebx
   192                              <1> .exit:
   193 000008C2 5E                  <1>     pop rsi
   194 000008C3 5B                  <1>     pop rbx
   195                              <1>     return
    18                              <2> %%_ret:
    19 000008C4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   196                              <1> 
   197                              <1> allocateClusters:
   198                              <1> ;Working dpb must be set. 
   199                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   200                              <1> ;       ebx = Cluster to link to the new cluster
   201                              <1> ;Output:    
   202                              <1> ;   CF=NC => Complete.
   203                              <1> ;   If eax = -1, then no more free clusters. 
   204                              <1> ;   CF=CY => Hard error, exit
   205                              <1> ; ecx always has number of allocated clusters
   206 000008C5 F8                  <1>     clc ;Always clear the flags before starting
   207 000008C6 53                  <1>     push rbx
   208 000008C7 56                  <1>     push rsi
   209 000008C8 51                  <1>     push rcx    ;Save tfr count on stack
   210 000008C9 67E32D              <1>     jecxz .exit ;Allocating nothing? Exit
   211                              <1> .allocateLoop:
   212 000008CC E832000000          <1>     call findFreeCluster
   213 000008D1 7226                <1>     jc .exit
   214 000008D3 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   215 000008D8 741F                <1>     je .exit    ;If the cluster number is -1, return immediately
   216                              <1>     ;eax has first free cluster value to use
   217                              <1>     ;First we link the previous cluster to this cluster
   218 000008DA BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   219 000008DF 50                  <1>     push rax
   220 000008E0 E8CD010000          <1>     call writeFAT   ;Allocate this cluster first
   221 000008E5 58                  <1>     pop rax
   222 000008E6 7211                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   223                              <1>     ;eax points to this allocated cluster
   224                              <1>     ;ebx points to the previous last cluster
   225 000008E8 89C6                <1>     mov esi, eax    ;New cluster as "value"
   226 000008EA 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   227 000008EC E8C1010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   228 000008F1 7206                <1>     jc .exit
   229 000008F3 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   230 000008F5 FFC9                <1>     dec ecx ;One less cluster allocated
   231 000008F7 75D3                <1>     jnz .allocateLoop
   232                              <1> .exit:
   233 000008F9 5E                  <1>     pop rsi ;Pop the tfr count into esi
   234 000008FA 9C                  <1>     pushfq
   235 000008FB F7D9                <1>     neg ecx
   236 000008FD 01F1                <1>     add ecx, esi
   237 000008FF 9D                  <1>     popfq
   238 00000900 5E                  <1>     pop rsi
   239 00000901 5B                  <1>     pop rbx
   240                              <1>     return
    18                              <2> %%_ret:
    19 00000902 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   241                              <1> 
   242                              <1> findFreeCluster:
   243                              <1> ;Walks the FAT to find a free cluster and returns the 
   244                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   245                              <1> ;Works on the workingDPB
   246                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   247 00000903 53                  <1>     push rbx
   248 00000904 52                  <1>     push rdx
   249 00000905 55                  <1>     push rbp
   250 00000906 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   251                              <1>     ;Use readFAT
   252                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   253                              <1>     ;If readFAT returns 0 then its a free cluster
   254 0000090D B802000000          <1>     mov eax, 2  ;Start with cluster 2
   255                              <1> .fatLoop:
   256 00000912 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   257 00000914 E8F5000000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   258 00000919 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   259 0000091B 85C0                <1>     test eax, eax   ;Is this cluster free?
   260 0000091D 7409                <1>     jz .exit    ;If yes, exit
   261 0000091F 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   262 00000923 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   263 00000926 76EA                <1>     jbe .fatLoop
   264                              <1> .exit:
   265 00000928 89D8                <1>     mov eax, ebx
   266 0000092A F8                  <1>     clc
   267                              <1> .exitFail:      ;Keep carry flag
   268 0000092B 5D                  <1>     pop rbp
   269 0000092C 5A                  <1>     pop rdx
   270 0000092D 5B                  <1>     pop rbx
   271                              <1>     return
    18                              <2> %%_ret:
    19 0000092E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   272                              <1> 
   273                              <1> findFreeClusterData:
   274                              <1> ;Walks the FAT to find a free cluster and returns the 
   275                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   276                              <1> ;Also finds NumberOfFreeCLusters. Both fields get filled in the workingDPB
   277                              <1> ;Works on the workingDPB
   278                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   279 0000092F 53                  <1>     push rbx
   280 00000930 52                  <1>     push rdx
   281 00000931 55                  <1>     push rbp
   282 00000932 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   283 00000939 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   284                              <1>     ;Mark dFirstFreeCluster as -1 and dNumberOfFreeClusters as 0
   285 0000093D 31D2                <1>     xor edx, edx
   286 0000093F 895531              <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], edx ;Zero this field
   287 00000942 FFCA                <1>     dec edx
   288 00000944 89552D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], edx ;Set to -1, unknown (i.e. none)
   289                              <1>     ;Use readFAT
   290                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   291                              <1>     ;If readFAT returns 0 then its a free cluster
   292 00000947 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   293 0000094C 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   294                              <1> .fatLoop:
   295 0000094F 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   296 00000951 E8B8000000          <1>     call readFAT
   297 00000956 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   298 00000958 85C0                <1>     test eax, eax   ;Is this cluster free?
   299 0000095A 750C                <1>     jne .fatProceed
   300 0000095C FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   301 0000095F 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   302 00000966 7410                <1>     je .fatFirst
   303                              <1> .fatProceed:
   304 00000968 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   305 0000096C 39D0                <1>     cmp eax, edx
   306 0000096E 76DF                <1>     jbe .fatLoop
   307                              <1> .exit:
   308 00000970 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   309 00000973 F8                  <1>     clc
   310                              <1> .exitFail:      ;Keep carry flag
   311 00000974 5D                  <1>     pop rbp
   312 00000975 5A                  <1>     pop rdx
   313 00000976 5B                  <1>     pop rbx
   314                              <1>     return
    18                              <2> %%_ret:
    19 00000977 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   315                              <1> .fatFirst:
   316 00000978 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   317 0000097B EBEB                <1>     jmp short .fatProceed
   318                              <1> 
   319                              <1> getNextSectorOfFile:
   320                              <1> ;This function will read the next sector for a file into a buffer.
   321                              <1> ;If the next sector to be read lives in the next cluster, it will update
   322                              <1> ; the vars appropriately
   323                              <1> ;
   324                              <1> ;Input: rbp = dpb pointer
   325                              <1> ;Output:
   326                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   327                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   328                              <1> ;       CF=CY => Critical error occurred and was FAILed
   329                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   330                              <1> ; next cluster and read first sector 
   331                              <1>     ;Check if we need to go to next cluster
   332 0000097D 8A05(4CC70300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   333 00000983 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   334 00000986 7416                <1>     je .gotoNextCluster
   335                              <1>     ;Goto next sector in same cluster
   336 00000988 FE05(4CC70300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   337 0000098E 48FF05(4DC70300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   338 00000995 488B05(4DC70300)    <1>     mov rax, qword [currSectD]
   339                              <1> .exitOK:
   340 0000099C F8                  <1>     clc
   341                              <1> .exitFail:
   342                              <1>     return
    18                              <2> %%_ret:
    19 0000099D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   343                              <1> .gotoNextCluster:
   344 0000099E 8B05(44C70300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   345 000009A4 E865000000          <1>     call readFAT
   346 000009A9 72F2                <1>     jc .exitFail
   347                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   348 000009AB 3DFFFFFFFF          <1>     cmp eax, -1
   349 000009B0 74EA                <1>     je .exitOK
   350                              <1> ;Update the new cluster and sector information
   351 000009B2 8905(44C70300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   352 000009B8 FF05(40C70300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   353 000009BE E867FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   354 000009C3 488905(4DC70300)    <1>     mov qword [currSectD], rax  ;Save it
   355 000009CA C605(4CC70300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   356 000009D1 EBC9                <1>     jmp short .exitOK
   357                              <1> 
   358                              <1> unlinkFAT:
   359                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   360                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   361                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   362                              <1> ; cluster must be set to EOC before this proc is called.
   363                              <1> ;Stops at first invalid cluster number.
   364                              <1> ;
   365                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   366                              <1> ;       rbp = Current DPB to use for disk
   367                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   368                              <1> 
   369 000009D3 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   370 000009D4 56                  <1>     push rsi
   371 000009D5 E80A000000          <1>     call truncateFAT    ;Preserved eax
   372 000009DA 31F6                <1>     xor esi, esi  ;Free first cluster too
   373 000009DC E8D1000000          <1>     call writeFAT
   374 000009E1 5E                  <1>     pop rsi
   375 000009E2 58                  <1>     pop rax
   376                              <1>     return
    18                              <2> %%_ret:
    19 000009E3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   377                              <1> 
   378                              <1> truncateFAT:
   379                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   380                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   381                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   382                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   383                              <1> ;Stops at first invalid cluster number.
   384                              <1> ;
   385                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   386                              <1> ;       rbp = Current DPB to use for disk
   387                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   388 000009E4 50                  <1>     push rax
   389 000009E5 53                  <1>     push rbx
   390 000009E6 51                  <1>     push rcx
   391 000009E7 56                  <1>     push rsi
   392 000009E8 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   393                              <1> .lp:
   394 000009EA E81F000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   395 000009EF 7218                <1>     jc .exit    ;Error exit
   396 000009F1 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   397 000009F3 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   398 000009F4 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   399 000009F6 E8B7000000          <1>     call writeFAT
   400 000009FB 720C                <1>     jc .exit    ;Error exit
   401 000009FD 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   402 00000A03 7404                <1>     je .exit
   403 00000A05 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   404 00000A07 EBE1                <1>     jmp short .lp
   405                              <1> .exit:
   406 00000A09 5E                  <1>     pop rsi
   407 00000A0A 59                  <1>     pop rcx
   408 00000A0B 5B                  <1>     pop rbx
   409 00000A0C 58                  <1>     pop rax
   410                              <1>     return
    18                              <2> %%_ret:
    19 00000A0D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   411                              <1> readFAT:
   412                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   413                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   414                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   415                              <1> ;       rbp = DPB
   416                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   417                              <1> ;If carry set, getBuffer failed!
   418 00000A0E 53                  <1>     push rbx
   419 00000A0F 51                  <1>     push rcx
   420 00000A10 52                  <1>     push rdx
   421 00000A11 57                  <1>     push rdi
   422 00000A12 55                  <1>     push rbp
   423 00000A13 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   424 00000A15 E8C4FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   425                              <1>     ;and FAT type in ecx
   426 00000A1A E80AFDFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   427 00000A1F 723A                <1>     jc .exitFail
   428                              <1>     ;Check if FAT 12, 16, 32
   429 00000A21 85C9                <1>     test ecx, ecx
   430 00000A23 743C                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   431 00000A25 F7C101000000        <1>     test ecx, 1
   432 00000A2B 7416                <1>     jz .goToNextClusterFat32
   433                              <1>     ;Here we handle FAT16
   434                              <1>     breakpoint
    86 00000A2D 6687DB              <2> xchg bx, bx
   435 00000A30 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   436 00000A35 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   437 00000A3A 721E                <1>     jb .exit
   438 00000A3C B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   439 00000A41 EB17                <1>     jmp short .exit
   440                              <1> .goToNextClusterFat32:
   441 00000A43 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   442 00000A47 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   443 00000A4C 7207                <1>     jb .validCluster32   
   444 00000A4E B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   445 00000A53 EB05                <1>     jmp short .exit
   446                              <1> .validCluster32:
   447 00000A55 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   448                              <1> .exit:
   449 00000A5A F8                  <1>     clc
   450                              <1> .exitFail:
   451 00000A5B 5D                  <1>     pop rbp
   452 00000A5C 5F                  <1>     pop rdi
   453 00000A5D 5A                  <1>     pop rdx
   454 00000A5E 59                  <1>     pop rcx
   455 00000A5F 5B                  <1>     pop rbx
   456                              <1>     return
    18                              <2> %%_ret:
    19 00000A60 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   457                              <1> .gotoNextClusterFat12:
   458                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   459                              <1> ;eax has the sector number of the FAT
   460                              <1> ;edx has byte offset into the sector
   461                              <1> ;edi has current cluster number
   462                              <1> ;rbx has ptr to buffer header
   463 00000A61 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   464 00000A67 742E                <1>     jz .gotoNextClusterFat12Even
   465                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   466 00000A69 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   467 00000A6D 29D1                <1>     sub ecx, edx
   468 00000A6F FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   469 00000A71 751A                <1>     jnz .gotoNextClusterFat12NoCross
   470                              <1>     ;Boundary cross, build entry properly
   471 00000A73 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   472 00000A78 FFC0                <1>     inc eax ;Get next FAT sector
   473 00000A7A 53                  <1>     push rbx
   474 00000A7B E8A9FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   475 00000A80 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   476 00000A81 72D8                <1>     jc .exitFail
   477 00000A83 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   478 00000A85 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   479 00000A88 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   480 00000A8B EB14                <1>     jmp short .checkIfLastFAT12Cluster
   481                              <1> .gotoNextClusterFat12NoCross:
   482 00000A8D 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   483 00000A92 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   484 00000A95 EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   485                              <1> .gotoNextClusterFat12Even:
   486                              <1>     ;Here the cluster is even and can't cross a sector boundary
   487 00000A97 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   488 00000A9C 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   489                              <1> .checkIfLastFAT12Cluster:
   490 00000AA1 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   491 00000AA6 72B2                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   492 00000AA8 B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   493 00000AAD E9A8FFFFFF          <1>     jmp .exit
   494                              <1> 
   495                              <1> writeFAT:
   496                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   497                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   498                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   499                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   500                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   501 00000AB2 53                  <1>     push rbx
   502 00000AB3 51                  <1>     push rcx
   503 00000AB4 52                  <1>     push rdx
   504 00000AB5 56                  <1>     push rsi
   505 00000AB6 57                  <1>     push rdi
   506 00000AB7 55                  <1>     push rbp
   507 00000AB8 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   508 00000ABA E81FFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   509                              <1>     ;and FAT type in ecx
   510 00000ABF E865FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   511 00000AC4 7223                <1>     jc .exitFail
   512                              <1>     ;Check if FAT 12, 16, 32
   513 00000AC6 85C9                <1>     test ecx, ecx
   514 00000AC8 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   515 00000ACA F7C101000000        <1>     test ecx, 1
   516 00000AD0 7407                <1>     jz .goToNextClusterFat32
   517                              <1>     ;Here we handle FAT16
   518 00000AD2 6689741330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   519 00000AD7 EB0A                <1>     jmp short .exit
   520                              <1> .goToNextClusterFat32:
   521 00000AD9 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   522 00000ADF 89741330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   523                              <1> .exit:
   524 00000AE3 E899FAFFFF          <1>     call markBufferDirty
   525 00000AE8 F8                  <1>     clc
   526                              <1> .exitFail:
   527 00000AE9 5D                  <1>     pop rbp
   528 00000AEA 5F                  <1>     pop rdi
   529 00000AEB 5E                  <1>     pop rsi
   530 00000AEC 5A                  <1>     pop rdx
   531 00000AED 59                  <1>     pop rcx
   532 00000AEE 5B                  <1>     pop rbx
   533                              <1>     return
    18                              <2> %%_ret:
    19 00000AEF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   534                              <1> .gotoNextClusterFat12:
   535                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   536                              <1> ;eax has the sector number of the FAT
   537                              <1> ;edx has byte offset into the sector
   538                              <1> ;edi has current cluster number
   539                              <1> ;rbx has ptr to buffer header
   540 00000AF0 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   541 00000AF6 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   542 00000AFC 7445                <1>     jz .gotoNextClusterFat12Even
   543                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   544 00000AFE 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   545 00000B02 29D1                <1>     sub ecx, edx
   546 00000B04 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   547 00000B06 752C                <1>     jnz .gotoNextClusterFat12NoCross
   548                              <1>     ;Boundary cross, build entry properly
   549                              <1>     ;Replace the high nybble of the low byte 
   550                              <1>     ;breakpoint
   551 00000B08 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   552 00000B0D 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   553 00000B13 C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   554 00000B16 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   555 00000B18 C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   556 00000B1B 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   557 00000B1F E85DFAFFFF          <1>     call markBufferDirty
   558 00000B24 FFC0                <1>     inc eax ;Get next FAT sector
   559 00000B26 E8FEFBFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   560 00000B2B 72BC                <1>     jc .exitFail
   561 00000B2D 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   562 00000B2F 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   563 00000B32 EBAF                <1>     jmp short .exit
   564                              <1> .gotoNextClusterFat12NoCross:
   565 00000B34 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   566 00000B39 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   567 00000B3E C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   568 00000B41 EB0A                <1>     jmp short .fat12common
   569                              <1> .gotoNextClusterFat12Even:
   570                              <1>     ;Here the cluster is even and can't cross a sector boundary
   571 00000B43 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   572 00000B48 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   573                              <1> .fat12common:
   574 00000B4D 09F0                <1>     or eax, esi     ;Add the new entry bits
   575 00000B4F 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   576 00000B54 E98AFFFFFF          <1>     jmp .exit
    27                                  %include "./Source/Kernel/FAT/findfile.asm"
    28                              <1> ;Generic Find First and Find Next functions here
    29                              <1> findNextMain:
    30 00000B59 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
    31 00000B60 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
    32 00000B63 7408                <1>     jz .notNet
    33 00000B65 B81C110000          <1>     mov eax, 0111Ch ;Netowrk find next
    34 00000B6A CD4F                <1>     int 4Fh
    35                              <1>     return  ;Return propagating the error code
    18                              <2> %%_ret:
    19 00000B6C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    36                              <1> .notNet:
    37 00000B6D 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    38 00000B6F FEC0                <1>     inc al  ;Convert into 1 based number
    39 00000B71 E83B5C0000          <1>     call dosCrit1Enter
    40 00000B76 E8F6570000          <1>     call setDrive   ;Set CDS and current drive vars
    41 00000B7B 720C                <1>     jc .critError   ;Return error if this fails
    42 00000B7D 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] 
    43 00000B84 E823550000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    44                              <1> .critError:
    45 00000B89 E82D5C0000          <1>     call dosCrit1Exit
    46                              <1>     retc    ;Return error if this fails
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000B8E 72DC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    47 00000B90 E801000000          <1>     call searchMoreDir
    48                              <1>     return
    18                              <2> %%_ret:
    19 00000B95 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    49                              <1> searchMoreDir:
    50                              <1> ;The three directory variables are set up from the ffblock. 
    51                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    52                              <1> ;Current DTA is also used to contain the ff block address
    53                              <1> ;All registers can be trashed
    54 00000B96 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
    55                              <1>     ;First setup dirClustA and dirSect vars
    56 00000B9D 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA]
    57 00000BA4 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    58 00000BA7 8805(ECC60300)      <1>     mov byte [searchAttr], al   ;And save it
    59 00000BAD 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    60 00000BB0 8905(74C70300)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    61 00000BB6 8905(70C70300)      <1>     mov dword [dirClustPar], eax
    62                              <1>     ;Get number of 32 byte entries in a sector
    63 00000BBC 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    64 00000BBF 8905(7AC70300)      <1>     mov dword [dirEntry], eax
    65                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    66 00000BC5 C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    67                              <1>     ;Now get bytes per cluster
    68 00000BC8 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    69 00000BCA 813D(74C70300)0000- <1>     cmp dword [dirClustA], 0   ;If we at cluster 0, we are in old style root dir
    69 00000BD2 0000                <1>
    70 00000BD4 0F8496000000        <1>     je .oldFat
    71 00000BDA 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    72 00000BDE 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    73 00000BE2 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    74 00000BE4 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    75 00000BE6 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    76 00000BE8 31D2                <1>     xor edx, edx
    77 00000BEA F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    78                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    79                              <1>     ;edx has byte offset into cluster (or Root dir)
    80 00000BEC 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    81                              <1>     ;Now compute sector offset into cluster
    82 00000BEE 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    83 00000BF2 89D0                <1>     mov eax, edx    ;Move offset into cluster
    84 00000BF4 31D2                <1>     xor edx, edx
    85 00000BF6 F7F1                <1>     div ecx 
    86                              <1>     ;eax now has sector offset into cluster
    87                              <1>     ;edx has byte offset into sector 
    88 00000BF8 668905(78C70300)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    89 00000BFF 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    90                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    91 00000C05 89D9                <1>     mov ecx, ebx
    92 00000C07 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    93                              <1> .fatlp:
    94 00000C0A E8FFFDFFFF          <1>     call readFAT
    95 00000C0F 3DFFFFFFFF          <1>     cmp eax, -1
    96 00000C14 7477                <1>     je .errorExit
    97 00000C16 FFC9                <1>     dec ecx
    98 00000C18 75F0                <1>     jnz .fatlp
    99 00000C1A 8905(74C70300)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
   100                              <1> .skipFatWalk:
   101 00000C20 488D05AA000000      <1>     lea rax, searchDir.nextEp
   102 00000C27 50                  <1>     push rax    ;Push the return address onto stack
   103 00000C28 8B05(74C70300)      <1>     mov eax, dword [dirClustA]
   104 00000C2E E8F7FBFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   105 00000C33 0FB71D(78C70300)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   106 00000C3A 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   107                              <1> .common:
   108 00000C3D E8ECFAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   109 00000C42 0F8224010000        <1>     jc searchDir.hardError
   110 00000C48 E822010000          <1>     call adjustDosDirBuffer  ;rbx has the buffer ptr for this dir sector
   111 00000C4D E8DE010000          <1>     call findInBuffer.getNumberOfEntries    ;Get in ecx # of entries in sector
   112 00000C52 8B05(7AC70300)      <1>     mov eax, dword [dirEntry]
   113 00000C58 250F000000          <1>     and eax, 0Fh    ;Get the value modulo 16
   114 00000C5D 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
   115 00000C5F C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
   116 00000C62 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
   117                              <1>     ;We continue AS IF this entry was bad
   118                              <1>     ;Now setup al as upon normal entry 
   119 00000C65 8A05(ECC60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   120 00000C6B E96D010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
   121                              <1>     ;The return address on the stack will return to the ep's pushed
   122                              <1> .oldFat:
   123                              <1> ;Old FAT 12/16 root dirs fall thru here only
   124                              <1> ;esi = byte ptr in root dir of entry
   125 00000C70 488D05D9000000      <1>     lea rax, searchDir.oldNextEP
   126 00000C77 50                  <1>     push rax    ;Push return address onto the stack
   127 00000C78 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   128 00000C7C 31D2                <1>     xor edx, edx
   129 00000C7E 96                  <1>     xchg esi, eax
   130 00000C7F F7F6                <1>     div esi ;Divide dir file position by bytes per sector
   131                              <1>     ;eax = Sector number 
   132                              <1>     ;edx = Byte offset within the sector
   133 00000C81 668905(78C70300)    <1>     mov word [dirSect], ax ;Set the root directory sector offset
   134 00000C88 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   135 00000C8B EBB0                <1>     jmp short .common
   136                              <1> .errorExit:
   137 00000C8D F9                  <1>     stc
   138                              <1>     return
    18                              <2> %%_ret:
    19 00000C8E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   139                              <1> searchDir:
   140                              <1> ;Called in a level 1 critical section. 
   141                              <1> ;The directory variables are set and fcbName has the pattern to match
   142                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   143                              <1> ;All registers can be trashed
   144                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   145                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   146                              <1> 
   147                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   148                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   149 00000C8F 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   150 00000C96 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   151 00000C9C 7408                <1>     jz .notNet
   152 00000C9E B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   153 00000CA3 CD4F                <1>     int 4fh
   154                              <1>     return
    18                              <2> %%_ret:
    19 00000CA5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   155                              <1> .notNet:
   156 00000CA6 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   157 00000CAD 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   158 00000CB3 85C0                <1>     test eax, eax
   159 00000CB5 747E                <1>     jz .oldRoot
   160 00000CB7 E86EFBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   161                              <1> .sectorLoop:
   162 00000CBC E86DFAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   163 00000CC1 0F82A5000000        <1>     jc .hardError
   164 00000CC7 E8A3000000          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   165                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   166 00000CCC E8B2000000          <1>     call findInBuffer
   167                              <1> .nextEp:
   168                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000CD1 73D2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   169 00000CD3 0F848F000000        <1>     jz .fnfError    ;CF=CY AND ZF=ZE => File not found
   170                              <1>     ;If ZF=ZE then fnfError (i.e. we hit an entry starting with 00)
   171                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   172                              <1>     ;IF however, the next cluster is -1, then we return fail
   173 00000CD9 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   174 00000CDF 8905(44C70300)      <1>     mov dword [currClustD], eax
   175 00000CE5 668B05(78C70300)    <1>     mov ax, word [dirSect]
   176 00000CEC 8805(4CC70300)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   177 00000CF2 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   178 00000CF6 488905(4DC70300)    <1>     mov qword [currSectD], rax  
   179 00000CFD C705(40C70300)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   179 00000D05 0000                <1>
   180 00000D07 E871FCFFFF          <1>     call getNextSectorOfFile
   181 00000D0C 725E                <1>     jc .hardError
   182 00000D0E 3DFFFFFFFF          <1>     cmp eax, -1
   183 00000D13 7453                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   184 00000D15 66FF05(78C70300)    <1>     inc word [dirSect]  ;Goto next sector
   185 00000D1C 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   186 00000D22 3B05(44C70300)      <1>     cmp eax, dword [currClustD] ;Did it change?
   187 00000D28 7492                <1>     je .sectorLoop  ;If not, we advanced sectors only
   188 00000D2A 66C705(78C70300)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   188 00000D32 00                  <1>
   189 00000D33 EB87                <1>     jmp short .sectorLoop 
   190                              <1> 
   191                              <1> .oldRoot:
   192                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   193                              <1> ; one large contiguous cluster.
   194                              <1> .oldSectorLp:
   195 00000D35 0FB705(78C70300)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   196 00000D3C 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   197 00000D3F E8EAF9FFFF          <1>     call getBufForDOS
   198 00000D44 7226                <1>     jc .hardError
   199 00000D46 E824000000          <1>     call adjustDosDirBuffer      ;rbx has the buffer pointer for this dir sector
   200 00000D4B E833000000          <1>     call findInBuffer
   201                              <1> .oldNextEP:
   202                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00000D50 7201                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00000D52 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   203 00000D53 7413                <1>     jz .fnfError
   204 00000D55 66FF05(78C70300)    <1>     inc word [dirSect]  ;Goto next sector in directory
   205 00000D5C 0FB74509            <1>     movzx eax, word [rbp + dpb.wNumberRootDirEntries]
   206 00000D60 3905(7AC70300)      <1>     cmp dword [dirEntry], eax ;Have we reached the last dir entry?
   207 00000D66 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   208                              <1> .fnfError:
   209 00000D68 B012                <1>     mov al, errNoFil
   210 00000D6A F9                  <1>     stc
   211                              <1>     return
    18                              <2> %%_ret:
    19 00000D6B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   212                              <1> .hardError:
   213 00000D6C B0FF                <1>     mov al, -1
   214                              <1>     return
    18                              <2> %%_ret:
    19 00000D6E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   215                              <1> adjustDosDirBuffer:
   216 00000D6F 804B0904            <1>     or byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   217 00000D73 806309FE            <1>     and byte [rbx + bufferHdr.bufferFlags], ~dosBuffer
   218 00000D77 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   219 00000D7B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   220 00000D7F C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   221                              <1>     return
    18                              <2> %%_ret:
    19 00000D82 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   222                              <1> 
   223                              <1> findInBuffer:
   224                              <1> ;Input:  rsi = Sector buffer data area
   225                              <1> ;Output: CF=CY => No entries found
   226                              <1> ;        ZF=NE => Keep searching in subsequent directories
   227                              <1> ;        ZF=ZE => End of directory reached early, stop
   228                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   229                              <1> ;        rsi = Points to start of the disk buffer directory entry
   230 00000D83 E8A8000000          <1>     call .getNumberOfEntries    ;Get in ecx # of entries in sector
   231 00000D88 8A05(ECC60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   232 00000D8E E8AE000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   233                              <1> .searchMainLp:
   234                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   235 00000D93 8A25(F8C60300)      <1>     mov ah, byte [delChar]
   236 00000D99 803E00              <1>     cmp byte [rsi], 00h
   237 00000D9C 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   238 00000D9E 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   239 00000DA0 750F                <1>     jne .notLookingForEmpty
   240                              <1> .emptySlot:
   241                              <1> ;Here we check if we are looking for an empty directory entry or
   242                              <1> ; we have reached the end of the file (if the first byte is 00h)
   243                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   244 00000DA2 3A25(C9C60300)      <1>     cmp ah, byte [fcbName] 
   245                              <1>     rete    ;Return if equal (CF=NC too)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000DA8 74D8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   246                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   247 00000DAA 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   248 00000DAD 752E                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   249 00000DAF F9                  <1>     stc
   250                              <1>     return
    18                              <2> %%_ret:
    19 00000DB0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   251                              <1> .notLookingForEmpty:
   252 00000DB1 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   253 00000DB4 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   254 00000DB7 803D(5DC40300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   255 00000DBE 7434                <1>     je .exclusiveDir
   256 00000DC0 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume only?
   257 00000DC2 7437                <1>     je .volFile ;If so, go here
   258 00000DC4 80FC08              <1>     cmp ah, 08h ;Is this file a volume lbl that we are not looking for?
   259 00000DC7 7414                <1>     je .nextEntry
   260 00000DC9 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   261 00000DCB 7710                <1>     ja .nextEntry
   262                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   263                              <1> .scanName:
   264 00000DCD 56                  <1>     push rsi
   265 00000DCE 488D3D(C9C60300)    <1>     lea rdi, fcbName ;Goto name template to search for
   266 00000DD5 E83E000000          <1>     call .nameCompare
   267 00000DDA 5E                  <1>     pop rsi
   268 00000DDB 7424                <1>     je .searchEntryFound
   269                              <1> .nextEntry:
   270                              <1> ;Go to next entry
   271 00000DDD 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   272 00000DE4 FF05(7AC70300)      <1>     inc dword [dirEntry] ;And denote that in variable
   273 00000DEA FFC9                <1>     dec ecx
   274 00000DEC 75A5                <1>     jnz .searchMainLp
   275                              <1> .badExit:
   276 00000DEE 31C0                <1>     xor eax, eax
   277 00000DF0 FFC0                <1>     inc eax ;Clear ZF
   278 00000DF2 F9                  <1>     stc
   279                              <1>     return
    18                              <2> %%_ret:
    19 00000DF3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   280                              <1> .exclusiveDir:
   281                              <1> ;Used when going down a path, dir bit simply need be set
   282 00000DF4 F6C410              <1>     test ah, dirDirectory
   283 00000DF7 75D4                <1>     jnz .scanName
   284 00000DF9 EBE2                <1>     jmp short .nextEntry
   285                              <1> 
   286                              <1> .volFile:
   287 00000DFB 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   288 00000DFD 74CE                <1>     je .scanName       ;If so, scan the name agrees
   289 00000DFF EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   290                              <1> 
   291                              <1> .searchEntryFound:
   292                              <1> ;Here a good entry was found!
   293 00000E01 56                  <1>     push rsi
   294 00000E02 57                  <1>     push rdi
   295 00000E03 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   296 00000E05 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
   297 00000E0C B904000000          <1>     mov ecx, 32/8
   298 00000E11 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   299 00000E14 5F                  <1>     pop rdi
   300 00000E15 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   301 00000E16 F8                  <1>     clc
   302                              <1>     return
    18                              <2> %%_ret:
    19 00000E17 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   303                              <1> 
   304                              <1> .nameCompare:
   305                              <1> ;Input: rsi = source string
   306                              <1> ;       rdi = string template to compare against
   307                              <1> ;Output: ZF=ZE => Strings are ok
   308                              <1> ;        ZF=NZ => Strings not ok
   309                              <1> ;Accepts wildcards. Trashes al
   310 00000E18 51                  <1>     push rcx
   311 00000E19 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   312                              <1> .ncLp:
   313 00000E1B 81F90B000000        <1>     cmp ecx, 11
   314 00000E21 740B                <1>     je .ncExit
   315 00000E23 FFC1                <1>     inc ecx
   316 00000E25 A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   317 00000E26 74F3                <1>     je .ncLp    ;If equal, keep going
   318 00000E28 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   319 00000E2C 74ED                <1>     je .ncLp
   320                              <1> .ncExit:
   321 00000E2E 59                  <1>     pop rcx
   322                              <1>     return
    18                              <2> %%_ret:
    19 00000E2F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   323                              <1> .getNumberOfEntries:
   324 00000E30 55                  <1>     push rbp
   325 00000E31 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   326 00000E38 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   327 00000E3C C1E905              <1>     shr ecx, 5  ;Divide by 32
   328 00000E3F 5D                  <1>     pop rbp
   329                              <1>     return
    18                              <2> %%_ret:
    19 00000E40 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   330                              <1> adjustSearchAttr:
   331                              <1> ;Converts the byte to a system only if the bit is set
   332                              <1> ;Input: eax = User selected search mask
   333                              <1> ;Output: eax = Modified search mask
   334 00000E41 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   335 00000E46 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   336                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000E4B 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   337 00000E4D B808000000          <1>     mov eax, dirVolumeID
   338                              <1>     return
    18                              <2> %%_ret:
    19 00000E52 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   339                              <1> 
   340                              <1> asciiToFCB:
   341                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   342                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   343                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   344                              <1> ;Name is space padded.
   345                              <1> ;Input: rsi = ASCII string buffer
   346                              <1> ;       rdi = FCB name buffer
   347                              <1> ;Output: al = Char that terminated the source string 
   348 00000E53 53                  <1>     push rbx    
   349 00000E54 57                  <1>     push rdi
   350 00000E55 B90B000000          <1>     mov ecx, 11
   351 00000E5A B020                <1>     mov al, " "
   352 00000E5C F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   353 00000E5E 5F                  <1>     pop rdi
   354 00000E5F 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   355                              <1> .processName:
   356 00000E62 AC                  <1>     lodsb   ;Get the char in al
   357 00000E63 E80B560000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   358 00000E68 84C0                <1>     test al, al
   359 00000E6A 742D                <1>     jz .exit
   360 00000E6C 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   361 00000E6E 740E                <1>     je .extSpace
   362 00000E70 3C2E                <1>     cmp al, "."
   363 00000E72 7413                <1>     je .ext
   364                              <1>     ;Test if the char is valid
   365 00000E74 E83B570000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   366 00000E79 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   367 00000E7B AA                  <1>     stosb   ;Store the char
   368 00000E7C EBE4                <1>     jmp short .processName
   369                              <1> .extSpace:
   370                              <1> ;Now we scan for a period in the name
   371 00000E7E AC                  <1>     lodsb   ;Get a char and increase rsi
   372 00000E7F 84C0                <1>     test al, al
   373 00000E81 7416                <1>     jz .exit
   374 00000E83 3C2E                <1>     cmp al, "."     ;If al is not a period...
   375 00000E85 75F7                <1>     jne .extSpace   ; keep searching
   376                              <1> .ext:
   377 00000E87 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   378                              <1> .processExt:
   379 00000E8B AC                  <1>     lodsb
   380 00000E8C 84C0                <1>     test al, al
   381 00000E8E 7409                <1>     jz .exit
   382 00000E90 3C20                <1>     cmp al, " "
   383 00000E92 7405                <1>     je .exit
   384 00000E94 AA                  <1>     stosb
   385 00000E95 EBF4                <1>     jmp short .processExt
   386                              <1> .exitBadChar:
   387 00000E97 30C0                <1>     xor al, al  ;Return a null terminator
   388                              <1> .exit:
   389 00000E99 5B                  <1>     pop rbx
   390                              <1>     return
    18                              <2> %%_ret:
    19 00000E9A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   391                              <1> 
   392                              <1> FCBToAsciiz:
   393                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   394                              <1> ;Name is space padded too
   395                              <1> ;Input: rsi = FCB name buffer
   396                              <1> ;       rdi = ASCIIZ string buffer
   397 00000E9B B908000000          <1>     mov ecx, 8
   398 00000EA0 F3A4                <1>     rep movsb   ;Move the name over
   399                              <1> .scanNameSpace:
   400 00000EA2 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   401 00000EA6 750D                <1>     jne .ext
   402 00000EA8 48FFCF              <1>     dec rdi
   403 00000EAB FFC1                <1>     inc ecx
   404 00000EAD 81F908000000        <1>     cmp ecx, 8
   405 00000EB3 72ED                <1>     jb .scanNameSpace
   406                              <1> .ext:
   407 00000EB5 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   408 00000EBA 7506                <1>     jne .validExt
   409 00000EBC 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   410 00000EC0 7415                <1>     je .exit
   411                              <1> .validExt:
   412 00000EC2 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   413 00000EC4 AA                  <1>     stosb
   414 00000EC5 B903000000          <1>     mov ecx, 3
   415 00000ECA F3A4                <1>     rep movsb   ;Move the three extension chars over
   416                              <1> .scanExtSpace:
   417 00000ECC 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   418 00000ED0 7505                <1>     jne .exit
   419 00000ED2 48FFCF              <1>     dec rdi
   420 00000ED5 EBF5                <1>     jmp short .scanExtSpace
   421                              <1> .exit:
   422 00000ED7 31C0                <1>     xor eax, eax
   423 00000ED9 AA                  <1>     stosb   ;Store a null at the end
   424                              <1>     return
    18                              <2> %%_ret:
    19 00000EDA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   425                              <1> 
   426                              <1> setupFFBlock:
   427                              <1> ;Sets up the find first block for the search
   428                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   429 00000EDB 50                  <1>     push rax
   430 00000EDC 53                  <1>     push rbx
   431 00000EDD 56                  <1>     push rsi
   432 00000EDE 57                  <1>     push rdi
   433 00000EDF 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   434 00000EE2 8A05(ECC60300)      <1>     mov al, byte [searchAttr]
   435 00000EE8 243F                <1>     and al, 3Fh ;Clear upper two bits
   436 00000EEA 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   437 00000EED 0FB605(F9C60300)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   438 00000EF4 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   439                              <1>     ;xchg bx, bx
   440 00000EF6 488D35(C9C60300)    <1>     lea rsi, fcbName
   441 00000EFD 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   442 00000F01 57                  <1>     push rdi
   443 00000F02 48B820202020202020- <1>     mov rax, "        "
   443 00000F0B 20                  <1>
   444 00000F0C 48AB                <1>     stosq
   445 00000F0E 66AB                <1>     stosw
   446 00000F10 AA                  <1>     stosb
   447 00000F11 5F                  <1>     pop rdi
   448 00000F12 48A5                <1>     movsq   ;Move 8 chars
   449 00000F14 66A5                <1>     movsw   ;Move 2 chars
   450 00000F16 A4                  <1>     movsb   ;Move the final char
   451                              <1> 
   452 00000F17 8B05(7AC70300)      <1>     mov eax, dword [dirEntry]
   453 00000F1D 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   454 00000F20 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]
   455 00000F26 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   456 00000F29 8A05(59C60300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   457 00000F2F 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   458 00000F32 8B05(64C60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   459 00000F38 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   460 00000F3B 8B05(6AC60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   461 00000F41 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   462 00000F44 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   463 00000F48 488D35(4EC60300)    <1>     lea rsi, curDirCopy
   464 00000F4F E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   465                              <1> 
   466 00000F54 5F                  <1>     pop rdi
   467 00000F55 5E                  <1>     pop rsi
   468 00000F56 5B                  <1>     pop rbx
   469 00000F57 58                  <1>     pop rax
   470                              <1>     return
    18                              <2> %%_ret:
    19 00000F58 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   471                              <1> 
   472                              <1> getDrvLetterFromPath:   ;Int 4Fh, AX=121Ah
   473                              <1> ;Gets the drive letter for the path in al
   474                              <1> ;Input: rsi = Buffer to process
   475                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   476                              <1> ;       ZF=ZE and al = 0 => Null path
   477                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   478                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   479                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   480 00000F59 30C0                <1>     xor al, al
   481 00000F5B 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   482                              <1>     retz    ;Return if a null path
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000F5E 74F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   483 00000F60 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   484                              <1>     retne   ;If not equal, Relative path or network path
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000F64 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   485 00000F66 66AD                <1>     lodsw   ;Get first word, rsi += 2
   486                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   487 00000F68 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   488 00000F6A 2C60                <1>     sub al, 60h
   489                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000F6C 75EA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   490 00000F6E B0FF                <1>     mov al, -1  ;Else not a valid drive number
   491                              <1>     return
    18                              <2> %%_ret:
    19 00000F70 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   492                              <1> canonicaliseFileName:
   493                              <1> ;Always trying to build and qualify a full pathname
   494                              <1> ;Does getPath without hitting the disk
   495 00000F71 B0FF                <1>     mov al, -1
   496 00000F73 8805(5DC40300)      <1>     mov byte [fileDirFlag], al  
   497 00000F79 8805(F1C60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   498 00000F7F 48893D(12C60300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   499 00000F86 FEC0                <1>     inc al  ;make al = 0
   500 00000F88 8805(22C60300)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   501 00000F8E E854000000          <1>     call getPath.epAlt
   502                              <1>     retc    ;Return if an error
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000F93 72DB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   503 00000F95 48FFCF              <1>     dec rdi ;Point to what should be the null char
   504 00000F98 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Was the prev char a drive sep?
   505 00000F9C 7503                <1>     jne .storeNull
   506 00000F9E B05C                <1>     mov al, "\"
   507 00000FA0 AA                  <1>     stosb   ;Store the pathsep and increment rdi
   508                              <1> .storeNull:
   509 00000FA1 803F00              <1>     cmp byte [rdi], 0   ;Ensure path is null terminated (and clear CF)
   510                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000FA4 74CA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   511 00000FA6 C60700              <1>     mov byte [rdi], 0   ;Store a terminating zero if necessary
   512                              <1>     return
    18                              <2> %%_ret:
    19 00000FA9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   513                              <1> getDirPathNoCanon:
   514 00000FAA 31C0                <1>     xor eax, eax
   515 00000FAC 4889FE              <1>     mov rsi, rdi
   516 00000FAF EB1B                <1>     jmp short getPath.noCanon
   517                              <1> getFilePathNoCanon:
   518                              <1> ;Used when the path is constructed internally (as for FCB functions)
   519                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   520 00000FB1 B0FF                <1>     mov al, -1
   521 00000FB3 4889FE              <1>     mov rsi, rdi
   522 00000FB6 EB14                <1>     jmp short getPath.noCanon
   523                              <1> getDirPath:
   524 00000FB8 30C0                <1>     xor al, al   ;Set to Directory
   525 00000FBA EB02                <1>     jmp short getPath
   526                              <1> getFilePath:
   527 00000FBC B0FF                <1>     mov al, -1  ;Set to File
   528                              <1> getPath:
   529                              <1> ;Determines whether the path is spliced or not and transfers the chars
   530                              <1> ; from the user buffer into an internal buffer, normalising them.
   531                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   532                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   533                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   534                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   535                              <1> ; we let it do its thing and return.
   536                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   537                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   538                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   539                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   540                              <1> ; (converted from using machine name by the net client program).
   541                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   542                              <1> ; was good.
   543                              <1> ;Called with:
   544                              <1> ; rdi = SDA Buffer for filename
   545                              <1> ; rsi = Potentially unqualified filename
   546                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   547 00000FBE 50                  <1>     push rax
   548 00000FBF 57                  <1>     push rdi
   549 00000FC0 E8ACFFFFFF          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   550 00000FC5 5F                  <1>     pop rdi
   551 00000FC6 58                  <1>     pop rax
   552 00000FC7 4889FE              <1>     mov rsi, rdi    ;Use the newly built path as the source
   553                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000FCA 72DD                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   554                              <1> .noCanon:
   555 00000FCC 8805(5DC40300)      <1>     mov byte [fileDirFlag], al  
   556 00000FD2 B0FF                <1>     mov al, -1
   557 00000FD4 8805(F1C60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   558 00000FDA 48893D(12C60300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   559 00000FE1 8805(22C60300)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   560                              <1> .epAlt:
   561 00000FE7 C605(F5C60300)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   562 00000FEE C605(F4C60300)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   563 00000FF5 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   564 00000FFC 7428                <1>     jz .notServer
   565                              <1>     ;In this case, the client network program will have correctly
   566                              <1>     ; substituted the drive letter for the path before making the request.
   567                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   568 00000FFE E856FFFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in X:    call getCDS ;Get the cds for the drive letter on the path
   570                              <1>     ;REMEMBER, FOR ALL THE LOGIC TO WORK, HERE WE MUST ENSURE THE PATH
   571                              <1>     ; CONTAINS NO . or .., NO INVALID CHARS OR MULTIPLE \\ AND IS 0 TERMINATED.
   572                              <1>     ;We do not scan for this criteria but the client program must adhere to 
   573                              <1>     ; these requirements.
   574                              <1>     ;When a server request is made, the request can ONLY be for a file on
   575                              <1>     ; a CDS drive.
   576 00001003 FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   577 00001005 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   578 0000100C 50                  <1>     push rax
   579 0000100D E89F570000          <1>     call dosCrit1Enter
   580 00001012 E895500000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   581 00001017 E89F570000          <1>     call dosCrit1Exit
   582 0000101C 58                  <1>     pop rax
   583 0000101D 0F8382000000        <1>     jnc .driveOk
   584                              <1> .serverExit:
   585 00001023 B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   586                              <1>     return
    18                              <2> %%_ret:
    19 00001025 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   587                              <1> .notServer:
   588                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   589 00001026 48C705(02C70300)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   589 0000102E FFFFFF              <1>
   590 00001031 B823110000          <1>     mov eax, 1123h
   591 00001036 CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   592                              <1>     retnc  ;Return if resolved
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001038 73EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   593 0000103A E81AFFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   594 0000103F 9C                  <1>     pushfq  ;Save the flag state on stack
   595 00001040 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   596 00001041 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   597 00001044 E81E540000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   598 00001049 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   599 0000104B E817540000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   600 00001050 7543                <1>     jnz .notNet
   601 00001052 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   602 00001054 753F                <1>     jne .notNet
   603 00001056 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   604 00001057 9D                  <1>     popfq
   605 00001058 66AD                <1>     lodsw
   606 0000105A 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   607 0000105E 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   608                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   609                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   610                              <1> ; redirector Find First Without CDS
   611                              <1> 
   612 00001060 8A1D(22C60300)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   613 00001066 C605(22C60300)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   614 0000106D 53                  <1>     push rbx
   615                              <1> .moveNetChars:
   616 0000106E AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   617 0000106F E8FF530000          <1>     call uppercaseChar  ;Make char in al uppercase
   618 00001074 84C0                <1>     test al, al
   619 00001076 740F                <1>     jz .netEnd
   620 00001078 E8EA530000          <1>     call swapPathSeparator  ;If path sep, swap it
   621 0000107D AA                  <1>     stosb
   622 0000107E 75EE                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   623 00001080 E85C000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   624 00001085 EBE7                <1>     jmp short .moveNetChars
   625                              <1> .netEnd:
   626 00001087 5B                  <1>     pop rbx
   627 00001088 AA                  <1>     stosb
   628 00001089 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   629                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000108B 7498                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   630 0000108D B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   631 00001092 CD4F                <1>     int 4Fh
   632                              <1>     return
    18                              <2> %%_ret:
    19 00001094 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   633                              <1> .notNet:
   634                              <1> ;This is the normal case; paths can be relative, or absolute.
   635 00001095 58                  <1>     pop rax ;Get the drive letter back
   636 00001096 9D                  <1>     popfq   ;Get the flag state back
   637 00001097 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   638                              <1> .pnfErr:
   639 00001099 B003                <1>     mov al, errPnf  ;Null path error
   640 0000109B F9                  <1>     stc
   641                              <1>     return
    18                              <2> %%_ret:
    19 0000109C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   642                              <1> .notNull:
   643 0000109D 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   644 0000109F 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   645 000010A1 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   646 000010A3 F9                  <1>     stc
   647                              <1>     return
    18                              <2> %%_ret:
    19 000010A4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   648                              <1> .driveOk:
   649 000010A5 84C0                <1>     test al, al
   650 000010A7 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   651                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   652 000010A9 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   653 000010AC 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   654 000010AE 50                  <1>     push rax    ;Save the drive letter
   655 000010AF AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   656 000010B0 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   657 000010B3 E8AF530000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   658                              <1>     ;If al is a path separator, then this path is absolute.
   659 000010B8 58                  <1>     pop rax ;Get back the drive letter
   660 000010B9 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   661                              <1> .absoPath:
   662                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   663 000010BB 48FFC6              <1>     inc rsi
   664 000010BE EB1A                <1>     jmp short .commonDir
   665                              <1> .curPath:
   666                              <1> ;This is only jumped to if we are relative the current drive
   667                              <1> ;rsi points to first char in path
   668                              <1> ;If this char is \ or /, then it is an absolute path.
   669 000010C0 8A05(26C40300)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   670 000010C6 FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   671 000010C8 50                  <1>     push rax    ;Save the current drive number
   672 000010C9 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   673 000010CB E897530000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   674 000010D0 58                  <1>     pop rax ;Get back the current drive number
   675 000010D1 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   676                              <1> .relMain:
   677 000010D3 C605(F1C60300)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   678                              <1> .commonDir:
   679                              <1> ;rsi points to the start of the string we will be appending
   680                              <1> ;Fall through now
   681                              <1> pathWalk:
   682                              <1> ;Input: rsi must point to source buffer for path to expand
   683                              <1> ;       rdi must point to a destination buffer
   684                              <1> ;       al must contain the drive 1 based number
   685 000010DA E8B5000000          <1>     call prepareDir    ;Prepare the dir if the drive is subst/join drive
   686 000010DF 727C                <1>     jc .badDriveExit
   687                              <1>     ;If the user requests to .. to a point before rbx, we fail if a disk
   688                              <1>     ; resolution
   689                              <1> .netEp: ;For net path resolution (resolution ONLY) ptrs must point past "\\"
   690 000010E1 4889FB              <1>     mov rbx, rdi
   691                              <1>     ;If rsi at the end of the string, exit for ROOT dir
   692 000010E4 803E00              <1>     cmp byte [rsi], 0
   693 000010E7 7512                <1>     jnz .mainlp
   694                              <1>     ;Setup dummy dir data
   695 000010E9 31C0                <1>     xor eax, eax
   696 000010EB 668905(62C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   697 000010F2 668905(68C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   698 000010F9 EB68                <1>     jmp short .exitGood
   699                              <1> .mainlp:
   700 000010FB E868010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   701 00001100 84C0                <1>     test al, al
   702 00001102 7507                <1>     jnz .notFile
   703 00001104 C605(F5C60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   704                              <1> .notFile:
   705 0000110B 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   706 0000110C E856030000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   707 00001111 58                  <1>     pop rax
   708 00001112 736B                <1>     jnc .deviceFound
   709 00001114 E816020000          <1>     call searchForPathspec  ;and search the directory
   710 00001119 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   711 0000111B E865020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   712 00001120 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   713 00001122 84C0                <1>     test al, al ;Exit if this pathspec was a file
   714 00001124 743D                <1>     jz .exitGood
   715                              <1>     ;Here I have to take the cluster data from the found directory entry
   716                              <1>     ; and setup the search for the next pathspec portion
   717                              <1>     ;Copy necessary data from the current directory copy
   718 00001126 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   719 0000112D 74CC                <1>     jz .mainlp
   720 0000112F 0FB705(62C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   721 00001136 C1E010              <1>     shl eax, 10h    ;Shift it high
   722 00001139 668B05(68C60300)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   723                              <1>     ;eax now has the cluster number of the search
   724 00001140 8905(74C70300)      <1>     mov dword [dirClustA], eax
   725 00001146 8905(70C70300)      <1>     mov dword [dirClustPar], eax
   726 0000114C 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   727 0000114E 8905(7AC70300)      <1>     mov dword [dirEntry], eax
   728 00001154 668905(78C70300)    <1>     mov word [dirSect], ax
   729 0000115B EB9E                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   730                              <1> .badDriveExit:
   731 0000115D B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   732                              <1>     return
    18                              <2> %%_ret:
    19 00001162 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   733                              <1> .exitGood:
   734 00001163 C605(F4C60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   735                              <1> .exit:
   736                              <1>     return
    18                              <2> %%_ret:
    19 0000116A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   737                              <1> .checkDev:
   738                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   739                              <1> ; we are in \DEV pseudo dir
   740 0000116B F605(5EC40300)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   741 00001172 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   742                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   743 00001174 56                  <1>     push rsi
   744 00001175 57                  <1>     push rdi
   745 00001176 E87A020000          <1>     call checkDevPath
   746 0000117B 5F                  <1>     pop rdi
   747 0000117C 5E                  <1>     pop rsi
   748 0000117D 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   749                              <1> .deviceFound:
   750 0000117F 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   751 00001181 C605(F5C60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   752 00001188 C605(F4C60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   753 0000118F EBD9                <1>     jmp short .exit   
   754                              <1> .nodev:
   755 00001191 F9                  <1>     stc
   756 00001192 EBD6                <1>     jmp short .exit
   757                              <1> 
   758                              <1> prepareDir:
   759                              <1> ;Used to transfer the current directory if it is necessary.
   760                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   761                              <1> ; relative
   762                              <1> ;Input: al = 1-based drive letter
   763                              <1> ;Output: rdi = Pointing at where to place chars from source string
   764                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   765 00001194 56                  <1>     push rsi
   766 00001195 E817560000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   767 0000119A E8D2510000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   768 0000119F 720D                <1>     jc .critExit    ;If the drive number in al is too great or drive invalid
   769 000011A1 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] 
   770 000011A8 57                  <1>     push rdi    ;Push CDS pointer on stack...
   771 000011A9 E8FE4E0000          <1>     call getDiskDPB  ;Update working DPB and drv before searching, dpbptr in rbp
   772                              <1> .critExit:
   773 000011AE E808560000          <1>     call dosCrit1Exit
   774 000011B3 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   775 000011B4 724A                <1>     jc .badDriveExit 
   776 000011B6 488B3D(12C60300)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   777                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   778                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   779                              <1>     ;   terminating char (\, / or Null)
   780                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   781                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   782 000011BD 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   783 000011C3 753D                <1>     jnz .prepDirJoin
   784 000011C5 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   785 000011CB 7556                <1>     jnz .prepDirSubst
   786                              <1> .prepMain:
   787                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   788 000011CD F605(F1C60300)FF    <1>     test byte [spliceFlag], -1
   789 000011D4 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   790                              <1>     ;Else we copy the first two chars only (X:)
   791 000011D6 66A5                <1>     movsw  
   792 000011D8 B05C                <1>     mov al, "\"
   793 000011DA AA                  <1>     stosb   ;Store the path separator and increment rdi
   794 000011DB 31C0                <1>     xor eax, eax    ;Get cluster 0
   795 000011DD EB1B                <1>     jmp short .prepDirExitSkip
   796                              <1> .prepLoop:
   797 000011DF AC                  <1>     lodsb
   798 000011E0 84C0                <1>     test al, al ;If al was null, then we stop
   799 000011E2 7403                <1>     jz .prepDirExit
   800 000011E4 AA                  <1>     stosb
   801 000011E5 EBF8                <1>     jmp short .prepLoop
   802                              <1> .prepDirExit:
   803 000011E7 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   804 000011EB 7403                <1>     je .prepDirExitSkipPathsep
   805 000011ED B05C                <1>     mov al, "\"
   806 000011EF AA                  <1>     stosb   ;Store the path separator and increment rdi
   807                              <1> .prepDirExitSkipPathsep:
   808 000011F0 488B35(02C70300)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   809 000011F7 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   810                              <1> .prepDirExitSkip:
   811 000011FA E837000000          <1>     call .prepSetupDirSearchVars
   812 000011FF F8                  <1>     clc ;Clear carry before exiting
   813                              <1> .badDriveExit:
   814 00001200 5E                  <1>     pop rsi
   815                              <1>     return
    18                              <2> %%_ret:
    19 00001201 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   816                              <1> .prepDirJoin:
   817 00001202 51                  <1>     push rcx
   818 00001203 56                  <1>     push rsi
   819 00001204 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   820 0000120B B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   821                              <1> .prepDirJoin1:
   822 00001210 AC                  <1>     lodsb   ;Get the char
   823 00001211 84C0                <1>     test al, al ;Null char?
   824 00001213 740B                <1>     jz .prepDirJoin2
   825 00001215 E84D520000          <1>     call swapPathSeparator
   826 0000121A 7404                <1>     jz .prepDirJoin2
   827 0000121C FFC1                <1>     inc ecx ;Accrue length to copy
   828 0000121E EBF0                <1>     jmp short .prepDirJoin1
   829                              <1> .prepDirJoin2:
   830 00001220 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   831 00001221 EB05                <1>     jmp short .prepDirCopy1
   832                              <1> .prepDirSubst:
   833 00001223 51                  <1>     push rcx
   834 00001224 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   835                              <1> .prepDirCopy1:
   836 00001228 F3A4                <1>     rep movsb   ;Copy the string over
   837 0000122A 59                  <1>     pop rcx
   838 0000122B F605(F1C60300)FF    <1>     test byte [spliceFlag], -1
   839 00001232 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   840 00001234 EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   841                              <1> .prepSetupDirSearchVars:
   842                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   843                              <1> ;       rbp = DPB pointer for the device which will do transaction
   844 00001236 51                  <1>     push rcx
   845 00001237 31C9                <1>     xor ecx, ecx
   846 00001239 66890D(78C70300)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   847 00001240 890D(7AC70300)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   848 00001246 E871F5FFFF          <1>     call getFATtype ;Get type of fat
   849 0000124B 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   850 00001251 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   851                              <1>     ;FAT 32 here
   852 00001253 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   853 00001255 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   854 00001257 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   855                              <1> .psdsvExit:
   856 0000125A 8905(74C70300)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   857 00001260 8905(70C70300)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   858 00001266 59                  <1>     pop rcx
   859                              <1>     return 
    18                              <2> %%_ret:
    19 00001267 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   860                              <1> 
   861                              <1> copyPathspec:
   862                              <1> ;1) Copies a path portion from the source buffer to the destination
   863                              <1> ;2) Advances rsi to the next null, \ or /
   864                              <1> ;3) Expands all * to ?'s
   865                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   866                              <1> ;    next path separator and rdi pointing to the previous pathsep
   867                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   868                              <1> ;    with rsi moving to path separator
   869                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   870                              <1> ;
   871                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   872                              <1> ;           rdi = Points to where to store it
   873                              <1> ;
   874                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   875                              <1> ;           rdi = First char of next space to store next pathspec
   876                              <1> ;           al = Last char stored (either \ or NULL)
   877                              <1> ;           CF=NC = OK path
   878                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   879                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   880 00001268 57                  <1>     push rdi    ;Save the pointer into the user buffer
   881 00001269 C605(81C40300)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   882 00001270 488D3D(C9C60300)    <1>     lea rdi, fcbName
   883 00001277 57                  <1>     push rdi
   884 00001278 B903000000          <1>     mov ecx, 3
   885 0000127D B820202020          <1>     mov eax, "    " ;Four spaces
   886 00001282 F3AB                <1>     rep stosd   ;Store 12 spaces
   887 00001284 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   888                              <1> 
   889 00001285 488D1D(D4C60300)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   890 0000128C AC                  <1>     lodsb   ;Get first char from user path in al
   891 0000128D 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   892 0000128F 745B                <1>     je .cpsDots
   893 00001291 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   894                              <1> ;First char is not a dot, so now check if starts with E5h? 
   895                              <1> ;If so, store 05h in its place! KANJI SUPPORT WOOHOO!
   896 00001294 3CE5                <1>     cmp al, 0E5h
   897 00001296 7506                <1>     jne .cpsMainLoop
   898 00001298 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   899 0000129B B005                <1>     mov al, 05h
   900 0000129D AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   901                              <1> .cpsMainLoop:
   902 0000129E AC                  <1>     lodsb   ;Get the char in al and advance rsi
   903 0000129F 84C0                <1>     test al, al ;Is it the null char?
   904 000012A1 7471                <1>     jz .cpsStore  ;If so, terminate immediately
   905 000012A3 E8BF510000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   906 000012A8 746A                <1>     jz .cpsStore ; and then exit with the final converted pathsep in al
   907 000012AA 3C2E                <1>     cmp al, "." ;Filename extension separator
   908 000012AC 7420                <1>     je .cpsExtension
   909                              <1>     ;If we have space in the filename, we check to see if the next char is *
   910 000012AE 3C2A                <1>     cmp al, "*" ;Wildcard?
   911 000012B0 7430                <1>     je .cpsWildcard
   912 000012B2 3C3F                <1>     cmp al, "?" ;Good wildcard?
   913 000012B4 740C                <1>     je .store
   914 000012B6 E8B8510000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   915 000012BB E8F4520000          <1>     call checkCharValid ; and check it is a valid char
   916 000012C0 7408                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   917                              <1> .store:
   918 000012C2 4839DF              <1>     cmp rdi, rbx
   919 000012C5 742D                <1>     je .cpsProcessName ;Skip any non-terminating chars
   920 000012C7 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   921 000012C8 EBD4                <1>     jmp short .cpsMainLoop
   922                              <1> .cpsInvalidChar:
   923 000012CA 30C0                <1>     xor al, al
   924 000012CC EB26                <1>     jmp short .cpsProcessName
   925                              <1> .cpsExtension:
   926                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   927 000012CE B903000000          <1>     mov ecx, 3 
   928 000012D3 488D3D(D1C60300)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   929 000012DA 57                  <1>     push rdi
   930 000012DB B020                <1>     mov al, " "
   931 000012DD F3AA                <1>     rep stosb
   932 000012DF 5F                  <1>     pop rdi
   933 000012E0 EBBC                <1>     jmp short .cpsMainLoop
   934                              <1> .cpsWildcard:
   935 000012E2 B03F                <1>     mov al, "?"
   936                              <1> .cpsWildcardLp:
   937 000012E4 AA                  <1>     stosb
   938 000012E5 4839DF              <1>     cmp rdi, rbx
   939 000012E8 75FA                <1>     jne .cpsWildcardLp
   940 000012EA EBB2                <1>     jmp short .cpsMainLoop
   941                              <1> 
   942                              <1> .cpsDots:
   943 000012EC AA                  <1>     stosb   ;Store the first dot
   944 000012ED 8A06                <1>     mov al, byte [rsi]
   945 000012EF 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   946 000012F1 752B                <1>     jne .oneDotResolve
   947 000012F3 A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   948                              <1> 
   949                              <1> .cpsProcessName:
   950                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
   951 000012F4 84C0                <1>     test al, al 
   952 000012F6 741C                <1>     jz .cpsStore
   953 000012F8 E86A510000          <1>     call swapPathSeparator
   954 000012FD 7415                <1>     jz .cpsStore
   955                              <1> .cpsFindTerminator:
   956 000012FF AC                  <1>     lodsb
   957 00001300 84C0                <1>     test al, al 
   958 00001302 7410                <1>     jz .cpsStore
   959 00001304 E85E510000          <1>     call swapPathSeparator
   960 00001309 7409                <1>     jz .cpsStore
   961 0000130B E8A4520000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
   962 00001310 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
   963                              <1>     ;If we encounter a terminator, convert to 0
   964 00001312 30C0                <1>     xor al, al
   965                              <1> .cpsStore:
   966 00001314 488D3D(D4C60300)    <1>     lea rdi, fcbName+11
   967 0000131B AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   968 0000131C 5F                  <1>     pop rdi
   969                              <1>     return
    18                              <2> %%_ret:
    19 0000131D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   970                              <1> .oneDotResolve:
   971 0000131E 488D3D(D4C60300)    <1>     lea rdi, fcbName+11
   972 00001325 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   973 00001326 5F                  <1>     pop rdi ;rdi points to fresh space
   974 00001327 48FFCF              <1>     dec rdi ;Point to the previous path separator
   975 0000132A AA                  <1>     stosb   ;Store this separator as if it is what we had before
   976                              <1>     return
    18                              <2> %%_ret:
    19 0000132B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   977                              <1> .cpsBadChar:
   978 0000132C 30C0                <1>     xor al, al  ;Convert the char to a terminator
   979                              <1>     return
    18                              <2> %%_ret:
    19 0000132E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   980                              <1> 
   981                              <1> searchForPathspec:
   982                              <1>     ;Now search the current directory for this filename
   983                              <1>     ;Find first using SDA ffBlock
   984                              <1>     ;If al = 0, we have final file name or directory name
   985                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   986                              <1>     ;Output: CF=CY => Error occured
   987                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   988                              <1>     ;                 FF block somewhat setup
   989                              <1>     ;Preserves rax, rbx, rsi,  rdi
   990 0000132F 50                  <1>     push rax
   991 00001330 53                  <1>     push rbx
   992 00001331 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   993 00001332 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   994 00001333 0FB61D(5DC40300)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
   995 0000133A 53                  <1>     push rbx    ;and push it onto the stack
   996                              <1> ;Evaluate whether we are searching for a file for a directory
   997 0000133B 84C0                <1>     test al, al
   998 0000133D 741D                <1>     jz .sfpPNfile
   999                              <1>     ;Fall if subdir
  1000 0000133F 488D3D(C9C60300)    <1>     lea rdi, fcbName
  1001 00001346 B03F                <1>     mov al, "?" ;Search for wildcard
  1002 00001348 B90B000000          <1>     mov ecx, 11
  1003 0000134D F2AE                <1>     repne scasb
  1004 0000134F 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
  1005 00001351 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
  1006 00001353 C605(5DC40300)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
  1007 0000135A EB07                <1>     jmp short .sfpPNMain
  1008                              <1> .sfpPNfile:
  1009                              <1>     ;Here if we are searching for a file or directory as setup by search init
  1010 0000135C 0FB605(ECC60300)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
  1011                              <1> .sfpPNMain:
  1012 00001363 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1013 0000136A 7405                <1>     je .sfpPNNoDisk
  1014 0000136C E81EF9FFFF          <1>     call searchDir
  1015                              <1> .sfpPNNoDisk:
  1016 00001371 5B                  <1>     pop rbx
  1017 00001372 881D(5DC40300)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
  1018 00001378 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
  1019 00001379 5E                  <1>     pop rsi
  1020 0000137A 5B                  <1>     pop rbx
  1021 0000137B 58                  <1>     pop rax
  1022                              <1>     return
    18                              <2> %%_ret:
    19 0000137C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1023                              <1> .sfpPnf:
  1024 0000137D B803000000          <1>     mov eax, errPnf
  1025                              <1> .sfpErrExit:
  1026 00001382 F9                  <1>     stc ;Set carry
  1027 00001383 EBEC                <1>     jmp short .sfpPNNoDisk
  1028                              <1> 
  1029                              <1> addPathspecToBuffer:
  1030                              <1> ;Input: fcbName = Qualified pathname portion
  1031                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1032                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1033                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1034                              <1> ;rbx points to the "head of the path"
  1035 00001385 F605(22C60300)FF    <1>     test byte [skipDisk], -1
  1036                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000138C 75EE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1037 0000138E 803D(C9C60300)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1038 00001395 741F                <1>     je .aptbPNDots
  1039                              <1>     ;Copy filename over to internal buffer
  1040 00001397 56                  <1>     push rsi    ;Save source pointer position
  1041 00001398 488D35(C9C60300)    <1>     lea rsi, fcbName
  1042 0000139F E8F7FAFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1043 000013A4 48FFCF              <1>     dec rdi ;Go back to the copied Null char
  1044 000013A7 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1045                              <1> .aptbOkExit:
  1046 000013A8 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
  1047 000013AB E8B7500000          <1>     call swapPathSeparator
  1048 000013B0 7402                <1>     jz .aptbPNexit
  1049 000013B2 30C0                <1>     xor al, al  ;Set al to 0 else (all other chars are terminators)
  1050                              <1> .aptbPNexit:
  1051 000013B4 AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
  1052                              <1>     return
    18                              <2> %%_ret:
    19 000013B5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1053                              <1> .aptbPNDots:
  1054                              <1> ;For one dot, we leave rdi where it is
  1055                              <1> ;For two dots, we search backwards for the previous "\"
  1056 000013B6 803D(CAC60300)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1057 000013BD F8                  <1>     clc ;Ensure we clear CF if we return via here
  1058 000013BE 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the previous char in al if we return
  1059                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013C1 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1060                              <1>     ;Here we have two dots
  1061                              <1>     ;Walk rdi backwards until a \ is found
  1062 000013C3 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
  1063 000013C6 66817FFF3A5C        <1>     cmp word [rdi - 1], ":\" ;IF the char preceeding \ is :, then error out
  1064 000013CC 7420                <1>     je .aptbPnf
  1065 000013CE 66817FFF5C5C        <1>     cmp word [rdi - 1], "\\" ;Similar net name check
  1066 000013D4 7418                <1>     je .aptbPnf
  1067                              <1> .aptbPNDotsLp:
  1068 000013D6 48FFCF              <1>     dec rdi
  1069 000013D9 803F5C              <1>     cmp byte [rdi], "\"
  1070 000013DC 75F8                <1>     jne .aptbPNDotsLp  ;Keep looping around until it is a "\"
  1071                              <1>     ;Don't go past the pathsep, since we may need to replace it with a null
  1072 000013DE 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;Are we in name resolution mode?
  1073 000013E5 74C1                <1>     je .aptbOkExit    ;If clear, we are, so just return
  1074 000013E7 4839DF              <1>     cmp rdi, rbx    ;Are we before the start of the path? (i.e in subst?)
  1075 000013EA 7202                <1>     jb .aptbPnf
  1076 000013EC EBBA                <1>     jmp short .aptbOkExit
  1077                              <1> ;.aptbSearchError:
  1078                              <1> ;    mov eax, errFnf
  1079                              <1> ;    jmp short .aptbErrExit
  1080                              <1> .aptbPnf:
  1081 000013EE B803000000          <1>     mov eax, errPnf
  1082                              <1> .aptbErrExit:
  1083 000013F3 F9                  <1>     stc ;Set carry
  1084                              <1>     return
    18                              <2> %%_ret:
    19 000013F4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1085                              <1> 
  1086                              <1> checkDevPath:
  1087                              <1> ;Called only if the file/directory was not found on disk.
  1088                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1089                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1090                              <1> ; and check to see if it is a char device. If it is, build a directory
  1091                              <1> ; If it is not, proceed with the request fail.
  1092                              <1> ;
  1093                              <1> ;Input: rsi = Pointer to the next path spec
  1094                              <1> ;Output: CF=NC => Char device found, directory built
  1095                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1096 000013F5 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1097                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013FC 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1098 000013FE 803D(D4C60300)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1099 00001405 7459                <1>     je .notOk                      
  1100                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1101 00001407 50                  <1>     push rax
  1102 00001408 48B844455620202020- <1>     mov rax, "DEV     "
  1102 00001411 20                  <1>
  1103 00001412 483905(C9C60300)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1104 00001419 58                  <1>     pop rax
  1105 0000141A 7544                <1>     jne .notOk
  1106 0000141C 813D(D1C60300)2020- <1>     cmp dword [fcbName + 8], "   \"
  1106 00001424 205C                <1>
  1107 00001426 7538                <1>     jne .notOk
  1108                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1109                              <1>     ; looking for a device driver
  1110                              <1>     ;First append it to rdi 
  1111 00001428 B84445565C          <1>     mov eax, "DEV\" 
  1112 0000142D AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1113 0000142E 57                  <1>     push rdi
  1114 0000142F 488D3D(C9C60300)    <1>     lea rdi, fcbName
  1115 00001436 E818FAFFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1116                              <1>     ;Returns in al the terminating char of the source string
  1117 0000143B 5F                  <1>     pop rdi
  1118                              <1>     ;If al is a pathsep, fail
  1119 0000143C E826500000          <1>     call swapPathSeparator
  1120 00001441 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1121 00001443 30C0                <1>     xor al, al
  1122 00001445 8805(D4C60300)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1123 0000144B 53                  <1>     push rbx
  1124 0000144C E844000000          <1>     call checkIfCharDevice
  1125 00001451 5B                  <1>     pop rbx ;Don't need bh yet
  1126 00001452 720C                <1>     jc .notOk
  1127 00001454 E873000000          <1>     call buildCharDir
  1128                              <1>     ;Here the device was determined to be a char device.
  1129                              <1>     ;A dummy directory entry was built for it.
  1130                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1131                              <1>     ; Do not Find Next!
  1132                              <1> .copyName:
  1133 00001459 E83DFAFFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1134 0000145E F8                  <1>     clc
  1135                              <1>     return
    18                              <2> %%_ret:
    19 0000145F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1136                              <1> .notOk:
  1137 00001460 B802000000          <1>     mov eax, errFnf
  1138 00001465 F9                  <1>     stc
  1139                              <1>     return
    18                              <2> %%_ret:
    19 00001466 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1140                              <1> .charDevSearch:
  1141 00001467 53                  <1>     push rbx
  1142 00001468 E828000000          <1>     call checkIfCharDevice
  1143 0000146D 5B                  <1>     pop rbx ;Dont need bh yet
  1144 0000146E 72F0                <1>     jc .notOk
  1145 00001470 E857000000          <1>     call buildCharDir
  1146 00001475 803D(D4C60300)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1147 0000147C 750C                <1>     jne .cds2
  1148 0000147E 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1149 00001482 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1150 00001484 48FFCF              <1>     dec rdi
  1151 00001487 B02F                <1>     mov al, "/" ;Replace \ with "/"
  1152 00001489 AA                  <1>     stosb   ;Store that and let the dir write the filename
  1153                              <1> .cds2:
  1154 0000148A 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1155 00001491 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1156 00001493 F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1157                              <1>     return
    18                              <2> %%_ret:
    19 00001494 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1158                              <1> 
  1159                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1160                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1161                              <1> ; device driver chain. 
  1162                              <1> ;Output: CF=CY if not found
  1163                              <1> ;        CF=NC if found
  1164                              <1> ;           BH = Low byte of the device attribute word
  1165 00001495 50                  <1>     push rax
  1166 00001496 57                  <1>     push rdi
  1167 00001497 488B05(C9C60300)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1168 0000149E 488D3D(80C00300)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1169                              <1> .checkName:
  1170 000014A5 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1171 000014A9 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1172 000014AB F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1173 000014AE 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1174 000014B0 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1175 000014B3 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1176 000014B6 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1177 000014BA 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1178                              <1> .walkList:
  1179 000014BC 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1180 000014BF 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1181 000014C6 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1182 000014C8 F9                  <1>     stc
  1183                              <1> .exit:
  1184 000014C9 5F                  <1>     pop rdi
  1185 000014CA 58                  <1>     pop rax
  1186                              <1>     return
    18                              <2> %%_ret:
    19 000014CB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1187                              <1> 
  1188                              <1> buildCharDir:
  1189                              <1> ;Build a dummy directory entry for the char device in FCBName
  1190                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1191 000014CC 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1192                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000014D3 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1193 000014D5 50                  <1>     push rax
  1194 000014D6 57                  <1>     push rdi
  1195 000014D7 C605(D4C60300)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1196 000014DE 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
  1197                              <1>     ;Zero the directory copy (32 bytes)
  1198 000014E5 50                  <1>     push rax
  1199 000014E6 51                  <1>     push rcx
  1200 000014E7 57                  <1>     push rdi
  1201 000014E8 31C0                <1>     xor eax, eax    ;Zero rax
  1202 000014EA B904000000          <1>     mov ecx, 4
  1203 000014EF F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1204 000014F2 5F                  <1>     pop rdi
  1205 000014F3 59                  <1>     pop rcx
  1206 000014F4 58                  <1>     pop rax
  1207 000014F5 488B05(C9C60300)    <1>     mov rax, qword [fcbName]
  1208 000014FC 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1209 000014FF B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1210 00001504 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1211 00001507 C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1212                              <1>     ;Get date and time and set the write time in the directory entry
  1213 0000150B E838110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1214 00001510 E81E120000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1215 00001515 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1216 00001518 31C0                <1>     xor eax, eax
  1217 0000151A 5F                  <1>     pop rdi
  1218 0000151B 58                  <1>     pop rax
  1219                              <1>     return
    18                              <2> %%_ret:
    19 0000151C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1220                              <1> 
  1221                              <1> checkFailingComp:
  1222                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1223                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1224                              <1> ;Returns: ZF=ZE => Last path componant
  1225                              <1> ;         ZF=NZ => Not last path componant
  1226 0000151D 50                  <1>     push rax
  1227 0000151E 8A05(D4C60300)      <1>     mov al, byte [fcbName + 11]
  1228 00001524 84C0                <1>     test al, al
  1229 00001526 58                  <1>     pop rax
  1230                              <1>     return
    18                              <2> %%_ret:
    19 00001527 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    28                                  %include "./Source/Kernel/FAT/dirfun.asm"
    29                              <1> ;---------------------------------------------------:
    30                              <1> ;                   KERNEL FUNCTIONS                :
    31                              <1> ;---------------------------------------------------:
    32                              <1> makeDIR:           ;ah = 39h
    33                              <1> ;For make, the path must exist but the final componant must not exist.
    34                              <1> ;Input: rdx = Pointer to ASCIIZ string
    35 00001528 4889D7              <1>     mov rdi, rdx
    36 0000152B E8754F0000          <1>     call strlen
    37 00001530 81F940000000        <1>     cmp ecx, 64
    38 00001536 7607                <1>     jbe .okLength
    39                              <1> .badPath:
    40 00001538 B003                <1>     mov al, errPnf
    41 0000153A E9BD520000          <1>     jmp extErrExit
    42                              <1> .okLength:
    43 0000153F 4889D6              <1>     mov rsi, rdx
    44 00001542 E8C84F0000          <1>     call checkPathspecOK
    45 00001547 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    46                              <1> .pathOk:
    47 00001549 E853500000          <1>     call scanPathWC
    48 0000154E 72E8                <1>     jc .badPath ;Dont allow wildcards
    49                              <1>     ;Path is ok, now proceed
    50 00001550 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
    51 00001557 E860FAFFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    52                              <1>     ;If the path exists, exit error
    53 0000155C 0F839A520000        <1>     jnc extErrExit
    54                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    55 00001562 E8B6FFFFFF          <1>     call checkFailingComp
    56 00001567 0F858F520000        <1>     jnz extErrExit
    57                              <1>     ;So all is well, the new subdirectories name is in fcbName
    58                              <1>     ;The parent dir's directory entry is in the curDirCopy
    59 0000156D E86E4D0000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    60                              <1>     ;returns in rdi the working cds ptr
    61 00001572 7312                <1>     jnc .notNet
    62 00001574 B803110000          <1>     mov eax, 1103h
    63 00001579 CD4F                <1>     int 4fh
    64 0000157B 0F827B520000        <1>     jc extErrExit
    65 00001581 E968520000          <1>     jmp extGoodExit
    66                              <1> .notNet:
    67 00001586 E826520000          <1>     call dosCrit1Enter
    68                              <1>     ;Current dpb ptr is already set
    69                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    70                              <1>     ;First we make a dummy dir in curDirCopy
    71 0000158B 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
    72 00001592 488D35(C9C60300)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    73 00001599 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
    74 000015A0 48A5                <1>     movsq   ;Copy the name over
    75 000015A2 A5                  <1>     movsd
    76 000015A3 E8A0100000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    77 000015A8 E886110000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    78 000015AD 8905(5CC60300)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    79 000015B3 8905(64C60300)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    80 000015B9 31C0                <1>     xor eax, eax
    81 000015BB 8905(6AC60300)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    82 000015C1 C605(59C60300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    83 000015C8 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]
    84                              <1> .searchForDirSpace:
    85 000015CE 8905(74C70300)      <1>     mov dword [dirClustA], eax
    86 000015D4 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    87 000015D6 668905(78C70300)    <1>     mov word [dirSect], ax
    88 000015DD 8905(7AC70300)      <1>     mov dword [dirEntry], eax
    89 000015E3 E8CE040000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    90 000015E8 7328                <1>     jnc .dirEntryFnd
    91 000015EA 813D(70C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    91 000015F2 0000                <1>
    92 000015F4 0F844A010000        <1>     je .bad ;Set CF and exit
    93 000015FA E801060000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    94 000015FF 0F823F010000        <1>     jc .bad
    95 00001605 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    96 0000160A 0F8434010000        <1>     je .bad
    97                              <1>     ;Else eax = Newly allocated cluster
    98 00001610 EBBC                <1>     jmp short .searchForDirSpace
    99                              <1> .dirEntryFnd:
   100                              <1> ;rdi points to current directory copy
   101                              <1> ;rsi now points to offset in the buffer to write the entry to
   102                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
   103 00001612 488B1D(2EC70300)    <1>     mov rbx, qword [currBuff]
   104 00001619 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   105                              <1>      
   106 0000161D 488905(36C70300)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
   107 00001624 4881C330000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   108 0000162B 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
   109 0000162E 668935(3EC70300)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
   110                              <1> ;Must now request a cluster and sanitise it
   111 00001635 E86AF2FFFF          <1>     call startNewChain  ;Get cluster number in eax
   112 0000163A 0F8209010000        <1>     jc .badExit
   113 00001640 E8EE050000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
   114 00001645 0F82FE000000        <1>     jc .badExit
   115                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   116 0000164B 668905(68C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   117 00001652 C1E810              <1>     shr eax, 10h    ;Get high word low
   118 00001655 668905(62C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   119 0000165C 488B05(36C70300)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   120 00001663 E8A4F0FFFF          <1>     call getBufForDirNoFile
   121 00001668 0F82DB000000        <1>     jc .badExit
   122 0000166E 0FB705(3EC70300)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   123 00001675 488D35(4EC60300)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   124 0000167C 488D7C0330          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   125 00001681 B904000000          <1>     mov ecx, 4
   126 00001686 F348A5              <1>     rep movsq   ;Copy over the buffered directory
   127 00001689 E8F3EEFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   128                              <1>     ;Now need to read in data sector and make two entries . and ..
   129 0000168E 57                  <1>     push rdi
   130 0000168F 51                  <1>     push rcx
   131 00001690 B90B000000          <1>     mov ecx, 11
   132 00001695 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
   133 0000169C B020                <1>     mov al, " "
   134 0000169E F3AA                <1>     rep stosb
   135 000016A0 59                  <1>     pop rcx
   136 000016A1 5F                  <1>     pop rdi
   137 000016A2 48B82E000000000000- <1>     mov rax, "."
   137 000016AB 00                  <1>
   138 000016AC 8805(4EC60300)      <1>     mov byte [curDirCopy], al
   139 000016B2 0FB705(68C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   140 000016B9 0FB715(62C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   141 000016C0 C605(59C60300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
   142 000016C7 C1E210              <1>     shl edx, 10h
   143 000016CA 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   144 000016CC E859F1FFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   145 000016D1 E836F0FFFF          <1>     call getBufForDirNoFile
   146 000016D6 7271                <1>     jc .badExit
   147                              <1>     ;rbx has buffer pointer now
   148 000016D8 488D35(4EC60300)    <1>     lea rsi, curDirCopy
   149 000016DF 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   150 000016E3 B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   151 000016E8 F348A5              <1>     rep movsq
   152                              <1>     ;Now create .. entry
   153 000016EB C605(4FC60300)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   154 000016F2 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   155 000016F8 E8BFF0FFFF          <1>     call getFATtype
   156 000016FD 81F902000000        <1>     cmp ecx, 2
   157 00001703 7207                <1>     jb .notFAT32
   158 00001705 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   159 00001708 7502                <1>     jne .notFAT32
   160 0000170A 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   161                              <1> .notFAT32:
   162 0000170C 668905(68C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   163 00001713 C1E810              <1>     shr eax, 10h
   164 00001716 668905(62C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   165 0000171D 488D35(4EC60300)    <1>     lea rsi, curDirCopy
   166 00001724 B904000000          <1>     mov ecx, 4
   167 00001729 F348A5              <1>     rep movsq
   168 0000172C E850EEFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   169 00001731 E819EEFFFF          <1>     call writeThroughBuffers    ;Write the buffers to disk
   170 00001736 7211                <1>     jc .badExit
   171                              <1> .okExit:
   172                              <1>     ;AND WE ARE DONE!
   173 00001738 E87E500000          <1>     call dosCrit1Exit
   174 0000173D 31C0                <1>     xor eax, eax
   175 0000173F E9AA500000          <1>     jmp extGoodExit
   176                              <1> .bad:
   177 00001744 B805000000          <1>     mov eax, errAccDen
   178                              <1> .badExit:
   179 00001749 E8DFEDFFFF          <1>     call cancelWriteThroughBuffers
   180 0000174E E868500000          <1>     call dosCrit1Exit
   181 00001753 E9A4500000          <1>     jmp extErrExit
   182                              <1> 
   183                              <1> removeDIR:         ;ah = 3Ah
   184 00001758 4889D7              <1>     mov rdi, rdx
   185 0000175B E8454D0000          <1>     call strlen
   186 00001760 81F940000000        <1>     cmp ecx, 64
   187 00001766 7607                <1>     jbe .okLength
   188                              <1> .badPath:
   189 00001768 B003                <1>     mov al, errPnf
   190 0000176A E98D500000          <1>     jmp extErrExit
   191                              <1> .okLength:
   192 0000176F 4889D6              <1>     mov rsi, rdx
   193 00001772 E8984D0000          <1>     call checkPathspecOK
   194 00001777 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   195                              <1> .pathOk:
   196 00001779 E8234E0000          <1>     call scanPathWC
   197 0000177E 72E8                <1>     jc .badPath ;Dont allow wildcards
   198                              <1>     ;Path is ok, now proceed
   199 00001780 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   200 00001787 E82CF8FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   201 0000178C 72DA                <1>     jc .badPath    ;Path Doesn't exist
   202 0000178E E84D4B0000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   203 00001793 7312                <1>     jnc .notNet
   204 00001795 B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   205 0000179A CD4F                <1>     int 4fh
   206 0000179C 0F825A500000        <1>     jc extErrExit
   207 000017A2 E947500000          <1>     jmp extGoodExit
   208                              <1> .notNet:
   209 000017A7 E805500000          <1>     call dosCrit1Enter
   210 000017AC 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   211                              <1>     ;Now let use check that our directory is not the CDS currentdir
   212 000017B3 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
   213 000017BA 488D3D(12C50300)    <1>     lea rdi, buffer1
   214 000017C1 E8DF4C0000          <1>     call strlen ;Get the length of the full qualified name in ecx
   215 000017C6 66890D(3EC70300)    <1>     mov word [pathLen], cx
   216 000017CD E8EA4C0000          <1>     call strcmp ;Then compare rdi to CDS string
   217 000017D2 750F                <1>     jnz .notEqual
   218 000017D4 B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   219 000017D9 E8DD4F0000          <1>     call dosCrit1Exit
   220 000017DE E919500000          <1>     jmp extErrExit
   221                              <1> .notEqual:
   222 000017E3 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   223                              <1>     ;If the given path length is one more than the backslash offset
   224                              <1>     ; due to the terminating null, then the user is trying to delete the 
   225                              <1>     ; root dir. Fail this.
   226 000017E6 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   227 000017EA FFC1                <1>     inc ecx
   228 000017EC 663B0D(3EC70300)    <1>     cmp cx, word [pathLen]
   229 000017F3 0F8423010000        <1>     je .accessDenied
   230 000017F9 E8CB020000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   231                              <1>     ;for the entry in the sector we are hoping to delete
   232 000017FE 0FB705(62C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   233 00001805 C1E010              <1>     shl eax, 10h
   234 00001808 0FB71D(68C60300)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   235 0000180F 09D8                <1>     or eax, ebx
   236 00001811 8905(70C70300)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   237 00001817 E80EF0FFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   238 0000181C E8EBEEFFFF          <1>     call getBufForDirNoFile
   239 00001821 0F82FA000000        <1>     jc .exitBad
   240                              <1>     ;rbx points to buffer
   241 00001827 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   242 0000182B 48B82E202020202020- <1>     mov rax, ".       "
   242 00001834 20                  <1>
   243 00001835 483906              <1>     cmp qword [rsi], rax
   244 00001838 0F85DE000000        <1>     jne .accessDenied
   245 0000183E B42E                <1>     mov ah, "." ;Screw the partial stall
   246 00001840 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   247 00001844 0F85D2000000        <1>     jne .accessDenied
   248 0000184A 4881C620000000      <1>     add rsi, fatDirEntry_size
   249 00001851 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
   250 00001858 B904000000          <1>     mov ecx, 4
   251 0000185D F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   252                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   253                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   254 00001860 488D3D(C9C60300)    <1>     lea rdi, fcbName
   255 00001867 B03F                <1>     mov al, "?"
   256 00001869 B90B000000          <1>     mov ecx, 11
   257 0000186E F3AA                <1>     rep stosb   ;Store the pattern to search for
   258 00001870 30C0                <1>     xor al, al  ;Store a terminating zero
   259 00001872 AA                  <1>     stosb
   260 00001873 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   261 00001879 50                  <1>     push rax    ;Save on stack temporarily
   262 0000187A 8905(74C70300)      <1>     mov dword [dirClustA], eax
   263 00001880 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   264 00001882 668905(78C70300)    <1>     mov word [dirSect], ax
   265 00001889 C705(7AC70300)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   265 00001891 0000                <1>
   266 00001893 C605(ECC60300)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   267 0000189A 58                  <1>     pop rax
   268 0000189B E88AEFFFFF          <1>     call getStartSectorOfCluster
   269 000018A0 E889EEFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   270 000018A5 727A                <1>     jc .exitBad
   271 000018A7 E8C3F4FFFF          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   272 000018AC 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   273 000018B3 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   274 000018B9 C605(5DC40300)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   275 000018C0 E807F4FFFF          <1>     call searchDir.rmdirEP
   276 000018C5 7355                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   277                              <1>     ;Else, this is a empty dir, we can remove it
   278                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   279 000018C7 488B05(36C70300)    <1>     mov rax, qword [tempSect]
   280 000018CE E85BEEFFFF          <1>     call getBufForDOS
   281 000018D3 724C                <1>     jc .exitBad
   282 000018D5 E895F4FFFF          <1>     call adjustDosDirBuffer
   283 000018DA 0FB705(3EC70300)    <1>     movzx eax, word [entry]
   284 000018E1 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   285 000018E5 4801C6              <1>     add rsi, rax    
   286 000018E8 8A05(F8C60300)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   287 000018EE 8806                <1>     mov byte [rsi], al  ;Store delchar there
   288 000018F0 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   289 000018F4 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   290 000018F8 E884ECFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   291 000018FD C1E210              <1>     shl edx, 10h
   292 00001900 09D0                <1>     or eax, edx
   293                              <1>     ;Now remove the FAT chain
   294 00001902 E8CCF0FFFF          <1>     call unlinkFAT
   295 00001907 7218                <1>     jc .exitBad
   296 00001909 E841ECFFFF          <1>     call writeThroughBuffers
   297 0000190E 7211                <1>     jc .exitBad
   298 00001910 E8A64E0000          <1>     call dosCrit1Exit
   299 00001915 31C0                <1>     xor eax, eax
   300 00001917 E9D24E0000          <1>     jmp extGoodExit
   301                              <1> .accessDenied:
   302 0000191C B805000000          <1>     mov eax, errAccDen
   303                              <1> .exitBad:
   304 00001921 E807ECFFFF          <1>     call cancelWriteThroughBuffers
   305 00001926 F9                  <1>     stc
   306 00001927 E88F4E0000          <1>     call dosCrit1Exit
   307 0000192C E9CB4E0000          <1>     jmp extErrExit
   308                              <1> 
   309                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   310                              <1> ;Input: rdx = Pointer to ASCIIZ string
   311 00001931 4889D7              <1>     mov rdi, rdx
   312 00001934 E86C4B0000          <1>     call strlen
   313 00001939 81F940000000        <1>     cmp ecx, 64
   314 0000193F 7607                <1>     jbe .okLength
   315                              <1> .badPath:
   316 00001941 B003                <1>     mov al, errPnf
   317 00001943 E9B44E0000          <1>     jmp extErrExit
   318                              <1> .okLength:
   319 00001948 4889D6              <1>     mov rsi, rdx
   320 0000194B E8BF4B0000          <1>     call checkPathspecOK
   321 00001950 72EF                <1>     jc .badPath  ;Don't allow any malformed chars or wildcards
   322 00001952 E89E4C0000          <1>     call checkPathNet
   323 00001957 74E8                <1>     jz .badPath ;Or Net paths
   324                              <1>     ;Path is ok, now proceed
   325 00001959 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   326 00001960 E853F6FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   327 00001965 0F82914E0000        <1>     jc extErrExit   ;Exit with error code in eax
   328                              <1>     ;The path must've been ok, so now copy the path into the CDS
   329                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   330 0000196B 488B35(02C70300)    <1>     mov rsi, qword [workingCDS] ;Copy the CDS to the tmpCDS
   331 00001972 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   332 00001978 756D                <1>     jnz .net    ;This is done by the redirector for redirector drives
   333 0000197A 488D3D(6EC60300)    <1>     lea rdi, tmpCDS
   334 00001981 B95B000000          <1>     mov ecx, cds_size
   335 00001986 F3A4                <1>     rep movsb
   336                              <1>     ;If the path is longer than 67, call it an invalid path
   337 00001988 488D3D(12C50300)    <1>     lea rdi, buffer1
   338 0000198F E8114B0000          <1>     call strlen ;Get the length of this path
   339 00001994 81F943000000        <1>     cmp ecx, 67
   340 0000199A 77A5                <1>     ja .badPath
   341 0000199C 4889FE              <1>     mov rsi, rdi    ;Move buffer source to rsi
   342 0000199F 488D3D(6EC60300)    <1>     lea rdi, tmpCDS
   343 000019A6 F3A4                <1>     rep movsb   ;Copy the path over
   344                              <1>     ;Now get the start cluster from the directory copy
   345 000019A8 0FB715(68C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   346 000019AF 0FB705(62C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   347 000019B6 C1E010              <1>     shl eax, 10h
   348 000019B9 09D0                <1>     or eax, edx ;Add low bits to eax
   349 000019BB 8905(BBC60300)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   350 000019C1 488D35(6EC60300)    <1>     lea rsi, tmpCDS
   351 000019C8 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   352 000019CF B95B000000          <1>     mov ecx, cds_size
   353 000019D4 E8D84D0000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   354 000019D9 F3A4                <1>     rep movsb
   355 000019DB E8DB4D0000          <1>     call dosCrit1Exit
   356 000019E0 31C0                <1>     xor eax, eax
   357 000019E2 E9074E0000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   358                              <1> .net:
   359                              <1> ;SDA Vars are setup for this request
   360 000019E7 B805110000          <1>     mov eax, 1105h
   361 000019EC CD4F                <1>     int 4fh
   362 000019EE 0F82084E0000        <1>     jc extErrExit
   363 000019F4 E9F54D0000          <1>     jmp extGoodExit
   364                              <1> getCurrentDIR:     ;ah = 47h
   365                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   366                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   367 000019F9 E8B34D0000          <1>     call dosCrit1Enter
   368 000019FE 88D0                <1>     mov al, dl  ;Move drive number into al
   369 00001A00 E86C490000          <1>     call setDrive ;Set drive variables if it is valid and NOT join
   370 00001A05 730F                <1>     jnc .okDrive
   371                              <1> .badExit:
   372 00001A07 E8AF4D0000          <1>     call dosCrit1Exit
   373 00001A0C B80F000000          <1>     mov eax, errBadDrv
   374 00001A11 E9E64D0000          <1>     jmp extErrExit
   375                              <1> .okDrive:
   376                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   377 00001A16 56                  <1>     push rsi
   378 00001A17 57                  <1>     push rdi
   379 00001A18 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] ;Get CDS ptr in rdi
   380 00001A1F E888460000          <1>     call getDiskDPB
   381 00001A24 5F                  <1>     pop rdi
   382 00001A25 5E                  <1>     pop rsi
   383 00001A26 0F82D04D0000        <1>     jc extErrExit
   384                              <1>     ;Here, work needs to be done to ensure that the path built is proper
   385 00001A2C 4889F7              <1>     mov rdi, rsi    ;Save destination buffer in rdi
   386 00001A2F 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]  ;Get pointer to current CDS in rsi
   387 00001A36 31C0                <1>     xor eax, eax
   388 00001A38 FFC8                <1>     dec eax
   389 00001A3A 39464D              <1>     cmp dword [rsi + cds.dStartCluster], eax    ;StartCluster != -1 is all ok
   390 00001A3D 7516                <1>     jne .writePathInBuffer
   391 00001A3F FFC0                <1>     inc eax
   392 00001A41 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set to root dir
   393 00001A44 66817E430000        <1>     cmp word [rsi + cds.wFlags], 0  ;Is this a newly deactivated drive?
   394 00001A4A 74BB                <1>     je .badExit ;TEMP, ERROR IF SO (WAS A SUBST DRIVE)
   395                              <1>     ;Here we now add a terminating null at wBackslashOffset
   396 00001A4C 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   397 00001A50 C644060100          <1>     mov byte [rsi + rax + 1], 0 ;Store a zero just past the backslash
   398                              <1> .writePathInBuffer:
   399 00001A55 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   400 00001A59 FFC0                <1>     inc eax ;Go past the backslash
   401 00001A5B 4801C6              <1>     add rsi, rax ;Add this many chars to rsi to point to first char to copy
   402 00001A5E E8514A0000          <1>     call strcpy
   403 00001A63 E8534D0000          <1>     call dosCrit1Exit
   404 00001A68 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   405 00001A6D E97C4D0000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   406                              <1> 
   407                              <1> trueNameMultiplex:  ;Int 4Fh, AX=1221h
   408 00001A72 50                  <1>     push rax
   409 00001A73 B800600000          <1>     mov eax, 6000h
   410 00001A78 CD41                <1>     int 41h
   411 00001A7A 58                  <1>     pop rax
   412                              <1>     return
    18                              <2> %%_ret:
    19 00001A7B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   413                              <1>     
   414                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   415                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   416 00001A7C E88E4A0000          <1>     call checkPathspecOK    ;This preserves rsi
   417 00001A81 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   418 00001A83 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   419                              <1> .badPath:
   420 00001A85 B803000000          <1>     mov eax, errPnf
   421 00001A8A E96D4D0000          <1>     jmp extErrExit
   422                              <1> .pathspecOk:
   423 00001A8F 57                  <1>     push rdi    ;Save the destination
   424 00001A90 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   425 00001A97 E8D5F4FFFF          <1>     call canonicaliseFileName
   426 00001A9C 5F                  <1>     pop rdi
   427 00001A9D 0F82594D0000        <1>     jc extErrExit
   428 00001AA3 488D35(12C50300)    <1>     lea rsi, buffer1
   429 00001AAA E8054A0000          <1>     call strcpy
   430 00001AAF 31C0                <1>     xor eax, eax
   431 00001AB1 E9384D0000          <1>     jmp extGoodExit
   432                              <1> 
   433                              <1> ;-----------------------------------
   434                              <1> ;    General Directory Routines    :
   435                              <1> ;-----------------------------------
   436                              <1> 
   437                              <1> findFreeDiskDirEntry:
   438                              <1> ;Find a space in the directory we are searching for a directory entry
   439                              <1> ;Accept first entry starting with a 0E5h or 00h
   440                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   441                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   442                              <1> ; be called for CDS's that are NOT net CDS's).
   443                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   444                              <1> ;       Directory vars must be set up for the directory we are searching in
   445                              <1> ;Output: CF=CY => Error, eax has error code
   446                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   447                              <1>     ;breakpoint
   448 00001AB6 8A05(F8C60300)      <1>     mov al, byte [delChar]
   449 00001ABC 8805(C9C60300)      <1>     mov byte [fcbName], al
   450 00001AC2 E8C8F1FFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   451                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001AC7 72B2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   452                              <1> ;Free entry found, dir variables are set for the free entry. 
   453                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   454                              <1> getDiskDirectoryEntry:
   455                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   456                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   457                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   458                              <1> ;        qword [tempSect] = Disk sector number of directory
   459                              <1> ;        word [entry] = 32 byte offset into sector
   460                              <1> ;        CF=CY => Error, exit 
   461 00001AC9 53                  <1>     push rbx
   462 00001ACA 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  
   463                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   464                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   465 00001AD0 0FB71D(78C70300)    <1>     movzx ebx, word [dirSect]
   466 00001AD7 85C0                <1>     test eax, eax
   467 00001AD9 7407                <1>     jz .skipCluster
   468 00001ADB E84AEDFFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   469 00001AE0 EB1B                <1>     jmp short .skipOldFat
   470                              <1> .skipCluster:
   471 00001AE2 55                  <1>     push rbp
   472 00001AE3 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   473 00001AEA 0FB705(78C70300)    <1>     movzx eax, word [dirSect]
   474 00001AF1 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   475                              <1>     ;If dirSect is greater than wNumberRootDirEntries, then ret fail
   476 00001AF4 663B4509            <1>     cmp ax, word [rbp + dpb.wNumberRootDirEntries]
   477 00001AF8 5D                  <1>     pop rbp
   478 00001AF9 7202                <1>     jb .skipOldFat
   479 00001AFB F9                  <1>     stc
   480                              <1>     return
    18                              <2> %%_ret:
    19 00001AFC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   481                              <1> .skipOldFat:
   482 00001AFD 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   483 00001B00 488905(36C70300)    <1>     mov qword [tempSect], rax   ;Save this sector number
   484 00001B07 E822ECFFFF          <1>     call getBufForDOS   ;Get buffer for DOS in rbx
   485 00001B0C 5B                  <1>     pop rbx
   486                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001B0D 72ED                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   487 00001B0F 53                  <1>     push rbx
   488 00001B10 488B1D(2EC70300)    <1>     mov rbx, qword [currBuff]
   489 00001B17 E853F2FFFF          <1>     call adjustDosDirBuffer ;Change buffer to Dir buffer
   490                              <1>     ;Above function gets data buffer ptr in rsi
   491 00001B1C 0FB705(78C70300)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   492 00001B23 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   493 00001B27 F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   494                              <1>     ; the current sector
   495 00001B29 C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   496 00001B2C 8B1D(7AC70300)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   497 00001B32 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   498 00001B34 C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   499 00001B37 66891D(3EC70300)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   500 00001B3E 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   501 00001B41 5B                  <1>     pop rbx
   502                              <1>     return
    18                              <2> %%_ret:
    19 00001B42 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   503                              <1> 
   504                              <1> 
   505                              <1> updateDirectoryEntryForFile:    
   506                              <1> ;Updates the directory entry for disk files
   507                              <1> ;Called with:
   508                              <1> ;   [workingDPB] = DPB pointer for the disk device
   509                              <1> ;   [currentSFT] = Current SFT pointer
   510 00001B43 50                  <1>     push rax
   511 00001B44 53                  <1>     push rbx
   512 00001B45 57                  <1>     push rdi
   513 00001B46 55                  <1>     push rbp
   514                              <1> 
   515 00001B47 E8654C0000          <1>     call dosCrit1Enter
   516 00001B4C 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
   517 00001B53 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   518 00001B5A 66F74705C000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush | devCharDev
   519 00001B60 0F8581000000        <1>     jnz .exit   ;If it is a char dev or hasn't been written to yet, skip this
   520 00001B66 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   521 00001B6C 751B                <1>     jnz .skipDT
   522                              <1>     ;Get date and time words and add them to the directory entry
   523 00001B6E E8D50A0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   524                              <1>     ;Build date and time words
   525 00001B73 E8BB0B0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   526                              <1>     ;Update SFT fields
   527 00001B78 66894713            <1>     mov word [rdi + sft.wTime], ax
   528 00001B7C C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   529 00001B7F 66894715            <1>     mov word [rdi + sft.wDate], ax
   530 00001B83 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush  ;We update DT, so flush
   531                              <1> .skipDT:
   532                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   533                              <1> ; we skip all of this
   534 00001B89 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   535 00001B8F 7556                <1>     jnz .exit ;If the file was never written to, don't bother updating DIR data
   536 00001B91 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   537 00001B95 E8A2EBFFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   538 00001B9A 7255                <1>     jc .exitBad    ;If an error is to be returned from, we skip the rest of this
   539                              <1>     ;Now we write the changes to the sector
   540                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   541 00001B9C 488D6B30            <1>     lea rbp, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   542 00001BA0 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   543 00001BA4 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   544 00001BA7 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   545 00001BAA 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   546 00001BAD 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   547 00001BB0 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   548 00001BB4 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   549 00001BB8 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   550 00001BBC 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   551 00001BC0 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   552 00001BC4 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
   553 00001BC7 6689451A            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusLo], ax
   554 00001BCB C1E810              <1>     shr eax, 10h
   555 00001BCE 66894514            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusHi], ax
   556                              <1>     ;Directory sector updated and marked to be flushed to disk!
   557 00001BD2 31C0                <1>     xor eax, eax
   558 00001BD4 FF15(24C10300)      <1>     call qword [updateDirShare]
   559 00001BDA F8                  <1>     clc ;Clear CF as updateDirShare Defaults to CF=CY
   560 00001BDB E8A1E9FFFF          <1>     call markBufferDirty
   561 00001BE0 E86AE9FFFF          <1>     call writeThroughBuffers
   562 00001BE5 720A                <1>     jc .exitBad
   563                              <1> .exit:
   564 00001BE7 E8CF4B0000          <1>     call dosCrit1Exit
   565 00001BEC 5D                  <1>     pop rbp
   566 00001BED 5F                  <1>     pop rdi
   567 00001BEE 5B                  <1>     pop rbx
   568 00001BEF 58                  <1>     pop rax
   569                              <1>     return
    18                              <2> %%_ret:
    19 00001BF0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   570                              <1> .exitBad:
   571 00001BF1 E837E9FFFF          <1>     call cancelWriteThroughBuffers
   572 00001BF6 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   573 00001BF7 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush
   574 00001BFD 9D                  <1>     popfq
   575 00001BFE EBE7                <1>     jmp short .exit
   576                              <1>     
   577                              <1> growDirectory:
   578                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   579                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   580                              <1> ;                 eax = New Cluster number
   581                              <1> ;               TWO NON CF ERROR CASES.
   582                              <1> ;               If eax = -1 => disk full!
   583                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   584                              <1> ;        CF=CY => Something went wrong. Rip. 
   585 00001C00 53                  <1>     push rbx
   586 00001C01 51                  <1>     push rcx
   587 00001C02 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   588 00001C08 85C0                <1>     test eax, eax
   589 00001C0A 7424                <1>     jz .exit
   590 00001C0C E846ECFFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   591 00001C11 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   592 00001C13 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   593 00001C18 E8A8ECFFFF          <1>     call allocateClusters   ;ebx has last cluster value
   594 00001C1D 7211                <1>     jc .exit
   595 00001C1F 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   596 00001C21 E8E8EDFFFF          <1>     call readFAT
   597 00001C26 7208                <1>     jc .exit
   598 00001C28 E806000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   599 00001C2D 7201                <1>     jc .exit
   600 00001C2F F8                  <1>     clc
   601                              <1> .exit:
   602 00001C30 59                  <1>     pop rcx
   603 00001C31 5B                  <1>     pop rbx
   604                              <1>     return   
    18                              <2> %%_ret:
    19 00001C32 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   605                              <1> sanitiseCluster:
   606                              <1> ;Sanitises the cluster in eax to all zeros
   607                              <1> ;Does not move file pointers
   608                              <1> ;Currently, is only called to sanitise subdirectory clusters
   609                              <1> ;Input: eax = Cluster number
   610                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   611                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   612                              <1> ;        If CF=CY => Error, exit
   613 00001C33 50                  <1>     push rax
   614 00001C34 53                  <1>     push rbx
   615 00001C35 51                  <1>     push rcx
   616 00001C36 52                  <1>     push rdx
   617 00001C37 56                  <1>     push rsi
   618 00001C38 55                  <1>     push rbp
   619 00001C39 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   620 00001C40 E8E5EBFFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   621 00001C45 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   622 00001C49 FFC2                <1>     inc edx ;Make it a count of sectors
   623                              <1> .getSectorInCluster:
   624 00001C4B E89FEAFFFF          <1>     call getBufForDataNoFile  ;Get a generic data buffer in rbx
   625 00001C50 721E                <1>     jc .exitBad
   626 00001C52 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   627 00001C56 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   628 00001C5A 31C0                <1>     xor eax, eax
   629 00001C5C F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   630 00001C5E E81EE9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   631                              <1> 
   632 00001C63 FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   633 00001C65 740A                <1>     jz .exit    ;Jump if we done
   634 00001C67 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   635 00001C6B 48FFC0              <1>     inc rax ;Goto next sector in cluster
   636 00001C6E EBDB                <1>     jmp short .getSectorInCluster
   637                              <1> .exitBad:
   638 00001C70 F9                  <1>     stc
   639                              <1> .exit:
   640 00001C71 5D                  <1>     pop rbp
   641 00001C72 5E                  <1>     pop rsi
   642 00001C73 5A                  <1>     pop rdx
   643 00001C74 59                  <1>     pop rcx
   644 00001C75 5B                  <1>     pop rbx
   645 00001C76 58                  <1>     pop rax
   646                              <1>     return
    18                              <2> %%_ret:
    19 00001C77 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    29                                  %include "./Source/Kernel/FileIO/devio.asm"
    30                              <1> ;This file contains the primitive dev io function, which will be called 
    31                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    32                              <1> ; make requests for device IO.
    33                              <1> 
    34                              <1> mainCharIO:
    35                              <1> ;This is the main IO clearing function for Char IO.
    36                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    37                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    38                              <1> ;
    39                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    40                              <1> ;       ah = {0,..., 5}, a subfunction number
    41                              <1> ;       Function 0: Read Char (drvREAD)
    42                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    43                              <1> ;       Function 2: Write Char (drvWrite)
    44                              <1> ; In the case the below functions are called for Disk/Net files
    45                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    46                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    47                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    48                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    49                              <1> ;
    50                              <1> ; If and only if ah = 02h, al = Char to write to device
    51                              <1> ;
    52                              <1> ;
    53                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    54                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    55                              <1> ;                                           ZF = NZ => Device ready (not busy)
    56                              <1> ;                                               If ND read, AL = Next Char
    57                              <1> ; For Files/Net:
    58                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    59                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    60                              <1> ;           For Read and ND Read:
    61                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    62                              <1> ;               Read returns ^Z on EOF.
    63                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    64                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    65                              <1> ;
    66                              <1> ;All registers preserved EXCEPT for ax and flags
    67                              <1> 
    68                              <1> ;Reference Request Header
    69                              <1> ;Common Section:
    70                              <1> ;    .hdrlen resb 1  ;Length of the request header
    71                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    72                              <1> ;    .cmdcde resb 1  ;Command code
    73                              <1> ;    .status resw 1  ;Status word
    74                              <1> ;    .devptr resq 1  ;Reserved. Unused
    75                              <1> ;Below used by calls 0,1,2,5
    76                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    77                              <1> ;Below used by calls 0,2
    78                              <1> ;    .bufptr resq 1
    79                              <1> ;    .tfrlen resd 1
    80                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    81                              <1> ;    .strtsc resq 1
    82                              <1> ;    .desptr resq 1
    83                              <1> 
    84                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    85 00001C78 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    86 00001C79 488D1D(10C50300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    87 00001C80 48891D(99C40300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    88 00001C87 5B                  <1>     pop rbx
    89 00001C88 C705(A1C40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    89 00001C90 0000                <1>
    90 00001C92 668905(10C50300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    91 00001C99 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    92 00001C9F 0F85A1000000        <1>     jnz .notChar
    93 00001CA5 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    94 00001CAB 0F8495000000        <1>     jz .notChar
    95                              <1> ;Char devices only here
    96 00001CB1 E8E44A0000          <1>     call dosPushRegs    ;Save context here
    97 00001CB6 488D1D85E3FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    98 00001CBD 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    99 00001CC0 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
   100 00001CC3 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
   101 00001CC6 890D(8BC40300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
   102                              <1>     ;Now set up cx for status word
   103 00001CCC 31C9                <1>     xor ecx, ecx
   104 00001CCE 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   105 00001CD1 7506                <1>     jne .skipBsySet
   106 00001CD3 81C900020000        <1>     or ecx, drvBsyStatus
   107                              <1> .skipBsySet:
   108 00001CD9 66870D(8EC40300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   109                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   110 00001CE0 488D1D(8BC40300)    <1>     lea rbx, secdReqHdr
   111 00001CE7 E872420000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   112 00001CEC 668B3D(8EC40300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   113 00001CF3 F7C700800000        <1>     test edi, drvErrStatus
   114 00001CF9 752D                <1>     jnz .error
   115                              <1> .ignoreRet:
   116 00001CFB 803D(8DC40300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   117 00001D02 750C                <1>     jne .notNDRead
   118 00001D04 8A05(98C40300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   119 00001D0A 8805(10C50300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   120                              <1> .notNDRead:
   121 00001D10 8A25(8FC40300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   122 00001D16 F6D4                <1>     not ah
   123 00001D18 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   124 00001D1B E8634A0000          <1>     call dosPopRegs ;Get back the context
   125 00001D20 668B05(10C50300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   126                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 00001D27 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   127                              <1> .error:
   128                              <1>     ;cl has flags
   129 00001D28 88CC                <1>     mov ah, cl
   130 00001D2A E8453D0000          <1>     call charDevErr
   131 00001D2F 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   132 00001D31 750A                <1>     jne .errorIgnore
   133                              <1>     ;Fallthrough => Retry
   134 00001D33 E84B4A0000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   135 00001D38 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   136                              <1> .errorIgnore:
   137                              <1>     ;Clear the busy bit in the status word
   138 00001D3D 8025(8FC40300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   139 00001D44 EBB5                <1>     jmp short .ignoreRet
   140                              <1> .notChar:
   141                              <1> ;Just return with ZF=NZ for now
   142 00001D46 50                  <1>     push rax
   143 00001D47 31C0                <1>     xor eax, eax
   144 00001D49 FEC0                <1>     inc al
   145 00001D4B 58                  <1>     pop rax
   146                              <1>     return
    18                              <2> %%_ret:
    19 00001D4C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   147                              <1> 
   148                              <1> openSFT:
   149                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   150                              <1> ;Input: rdi = SFT pointer
   151 00001D4D E8484A0000          <1>     call dosPushRegs
   152 00001D52 B00D                <1>     mov al, drvOPEN
   153 00001D54 EB07                <1>     jmp short openCloseCommon
   154                              <1> closeSFT:
   155                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   156 00001D56 E83F4A0000          <1>     call dosPushRegs
   157 00001D5B B00E                <1>     mov al, drvCLOSE
   158                              <1> openCloseCommon:
   159                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   160 00001D5D 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   161 00001D63 7469                <1>     jz .exit    ;Exit if so
   162 00001D65 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   163 00001D69 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   164 00001D6D 7512                <1>     jnz .charDev
   165                              <1>     ;Here a disk drive, rdi is a DPB ptr
   166 00001D6F 803D(C9C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   167 00001D76 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   168 00001D78 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   169 00001D7B 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   170 00001D7D 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   171                              <1> .charDev:
   172 00001D81 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   173 00001D87 7445                <1>     jz .exit    ;No, exit!
   174 00001D89 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   175 00001D8C 488D1D(B5C40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   176 00001D93 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   177                              <1> .retryEP:
   178 00001D96 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   179 00001D99 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   180 00001D9C 50                  <1>     push rax    ;Save the dword
   181 00001D9D E8C0410000          <1>     call goDriver
   182 00001DA2 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   183 00001DA9 F7C700800000        <1>     test edi, drvErrStatus
   184 00001DAF 741C                <1>     jz .exitPop
   185                              <1>     ;Error here, check if char or block drive
   186 00001DB1 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   187 00001DB7 7404                <1>     jz .blockError
   188                              <1>     ;Char error here
   189 00001DB9 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   190 00001DBB EB04                <1>     jmp short .errorCmn
   191                              <1> .blockError:
   192 00001DBD 88C8                <1>     mov al, cl  ;Move drive number into al
   193 00001DBF B406                <1>     mov ah, critData    ;Data on block dev error
   194                              <1> .errorCmn:
   195                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   196 00001DC1 E8AE3C0000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   197 00001DC6 B001                <1>     mov al, critRetry   ;al returns user response
   198 00001DC8 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   199 00001DCA 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   200 00001DCB EBC9                <1>     jmp short .retryEP  ;Reset
   201                              <1> .exitPop:
   202 00001DCD 58                  <1>     pop rax    
   203                              <1> .exit:
   204 00001DCE E8B0490000          <1>     call dosPopRegs
   205                              <1>     return
    18                              <2> %%_ret:
    19 00001DD3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    30                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    31                              <1> ;-----------------------------------------------------------------------:
    32                              <1> ;                  DOS default char functions live here                 :
    33                              <1> ;                                                                       :
    34                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    35                              <1> ;                                                                       :
    36                              <1> ;Rules for the naming of the DOS functions                              :
    37                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    38                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    39                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    40                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    41                              <1> ;                                                                       :
    42                              <1> ;-----------------------------------------------------------------------:
    43                              <1> 
    44                              <1> charIn_BE:     ;ah = 01h
    45                              <1> ;Return char that has been read and echoed in al
    46 00001DD4 E866010000          <1>     call charIn_B
    47 00001DD9 50                  <1>     push rax
    48 00001DDA E804000000          <1>     call charOut_B.in    ;Output it to screen
    49 00001DDF 58                  <1>     pop rax
    50                              <1>     return
    18                              <2> %%_ret:
    19 00001DE0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    51                              <1> 
    52                              <1> charOut_B:       ;ah = 02h
    53                              <1> ;Bspace is regular cursor left, does not insert a blank
    54 00001DE1 88D0                <1>     mov al, dl
    55                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 4Fh, AX=1205h
    56 00001DE3 3C20                <1>     cmp al, asciiCaret
    57 00001DE5 7277                <1>     jb .control
    58 00001DE7 3C7F                <1>     cmp al, DEL ;DEL char?
    59 00001DE9 7406                <1>     je .skipCurs
    60 00001DEB FE05(C1C20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    61                              <1> .skipCurs:
    62 00001DF1 FE05(C7C30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    63 00001DF7 8025(C7C30300)03    <1>     and byte [vConErr], 3
    64 00001DFE 56                  <1>     push rsi
    65 00001DFF 7507                <1>     jnz .skipErrorCheck
    66 00001E01 50                  <1>     push rax
    67 00001E02 E884020000          <1>     call vConCtrlCheck
    68 00001E07 58                  <1>     pop rax
    69                              <1> .skipErrorCheck:
    70 00001E08 E80C020000          <1>     call outputOnStdout
    71 00001E0D 5E                  <1>     pop rsi
    72 00001E0E F605(C4C30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    73                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001E15 74C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    74 00001E17 53                  <1>     push rbx
    75 00001E18 56                  <1>     push rsi
    76 00001E19 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    77 00001E1E E82F030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    78 00001E23 7236                <1>     jc .exitPrintEcho
    79                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    80 00001E25 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    81 00001E29 F7C300800000        <1>     test ebx, devRedirDev
    82 00001E2F 752A                <1>     jnz .exitPrintEcho  ;Exit if STDOUT is redir
    83 00001E31 F7C380000000        <1>     test ebx, devCharDev
    84 00001E37 7422                <1>     jz .exitPrintEcho
    85 00001E39 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    86 00001E3E E80F030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    87 00001E43 7216                <1>     jc .exitPrintEcho   ;Exit if handle closed
    88 00001E45 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    89 00001E4B 7407                <1>     jz .netSpool
    90 00001E4D E8FB010000          <1>     call outputOnSFT
    91 00001E52 EB07                <1>     jmp short .exitPrintEcho
    92                              <1> .netSpool:
    93 00001E54 C605(C4C30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    94                              <1> .exitPrintEcho:
    95 00001E5B 5E                  <1>     pop rsi
    96 00001E5C 5B                  <1>     pop rbx
    97                              <1>     return
    18                              <2> %%_ret:
    19 00001E5D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    98                              <1> .control:
    99 00001E5E 3C0D                <1>     cmp al, CR
   100 00001E60 7425                <1>     je .newline
   101 00001E62 3C08                <1>     cmp al, BSP
   102 00001E64 742D                <1>     je .back
   103 00001E66 3C09                <1>     cmp al, TAB
   104 00001E68 7587                <1>     jne .skipCurs   ;Treat as normal
   105                              <1>     ;TAB key here
   106                              <1> .tab:
   107 00001E6A 51                  <1>     push rcx
   108 00001E6B 0FB60D(C1C20300)    <1>     movzx ecx, byte [vConCursPos]
   109 00001E72 80C9F8              <1>     or cl, ~7
   110 00001E75 F6D9                <1>     neg cl
   111 00001E77 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   112                              <1> .tabloop:
   113 00001E7A B020                <1>     mov al, SPC
   114 00001E7C E862FFFFFF          <1>     call charOut_B.in   ;Output the char
   115 00001E81 FEC9                <1>     dec cl
   116 00001E83 75F5                <1>     jnz .tabloop
   117                              <1> .stopTab:
   118 00001E85 59                  <1>     pop rcx
   119                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 00001E86 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   120                              <1> .newline:
   121 00001E87 C605(C1C20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   122 00001E8E E95EFFFFFF          <1>     jmp .skipCurs   ;And echo 
   123                              <1> .back:
   124 00001E93 FE0D(C1C20300)      <1>     dec byte [vConCursPos]
   125 00001E99 E953FFFFFF          <1>     jmp .skipCurs   ;And echo
   126                              <1> 
   127                              <1> auxIn_B:        ;ah = 03h
   128 00001E9E E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   129 00001EA3 BB03000000          <1>     mov ebx, 3
   130 00001EA8 E8A5020000          <1>     call getCharDevSFT
   131                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001EAD 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   132                              <1> .auxloop:
   133 00001EAF B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   134 00001EB1 E8C2FDFFFF          <1>     call mainCharIO
   135 00001EB6 7408                <1>     jz .signalLoop
   136 00001EB8 30E4                <1>     xor ah, ah  ;Read the char in
   137 00001EBA E8B9FDFFFF          <1>     call mainCharIO
   138                              <1>     return
    18                              <2> %%_ret:
    19 00001EBF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   139                              <1> .signalLoop:
   140 00001EC0 E8A3010000          <1>     call callInt48h
   141 00001EC5 EBE8                <1>     jmp short .auxloop
   142                              <1> 
   143                              <1> auxOut_B:       ;ah = 04h
   144 00001EC7 53                  <1>     push rbx
   145 00001EC8 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   146 00001ECD EB06                <1>     jmp short auxOutCmn
   147                              <1> prnOut_B:       ;ah = 05h
   148 00001ECF 53                  <1>     push rbx
   149 00001ED0 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   150                              <1> auxOutCmn: ;Auxilliary output device common 
   151 00001ED5 88D0                <1>     mov al, dl  ;Get the char into al
   152 00001ED7 50                  <1>     push rax
   153 00001ED8 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   154 00001EDD 58                  <1>     pop rax
   155 00001EDE 56                  <1>     push rsi
   156 00001EDF E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   157 00001EE4 5E                  <1>     pop rsi
   158 00001EE5 5B                  <1>     pop rbx
   159                              <1>     return
    18                              <2> %%_ret:
    19 00001EE6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   160                              <1> 
   161                              <1> directConIO:    ;ah = 06h
   162 00001EE7 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   163 00001EE9 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   164 00001EEB 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   165                              <1> ;Here is the read char direct function
   166 00001EF1 31DB                <1>     xor ebx, ebx    
   167 00001EF3 E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   168                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001EF8 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   169 00001EFA 488B2D(6FC40300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   170 00001F01 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   171 00001F03 E870FDFFFF          <1>     call mainCharIO
   172 00001F08 E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   173 00001F0D 7507                <1>     jnz .readChar
   174 00001F0F 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   175 00001F13 30C0                <1>     xor al, al  ;Set caller return code to 0
   176                              <1>     return
    18                              <2> %%_ret:
    19 00001F15 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   177                              <1> .readChar:
   178 00001F16 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   179                              <1>     ;Fallthrough here to get the char at STDIN
   180                              <1> charIn:         ;ah = 07h
   181                              <1> ;Return char in al from STDIN without waiting
   182 00001F1A 31DB                <1>     xor ebx, ebx
   183 00001F1C E831020000          <1>     call getCharDevSFT
   184                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001F21 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   185 00001F23 B401                <1>     mov ah, 01  ;ND read for char
   186 00001F25 E84EFDFFFF          <1>     call mainCharIO
   187 00001F2A 750B                <1>     jnz .getChar
   188 00001F2C B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   189 00001F2E CD4A                <1>     int 4Ah
   190 00001F30 E833010000          <1>     call callInt48h
   191 00001F35 EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   192                              <1> .getChar:
   193                              <1>     ;Get the char in al and exit
   194 00001F37 30E4                <1>     xor ah, ah
   195 00001F39 E83AFDFFFF          <1>     call mainCharIO
   196                              <1>     return
    18                              <2> %%_ret:
    19 00001F3E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   197                              <1> charIn_B:       ;ah = 08h
   198                              <1> ;Return char in al from STDIN
   199 00001F3F 56                  <1>     push rsi
   200                              <1> .readAgain:
   201 00001F40 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   202                              <1>     ;Also sets rsi to point to the device SFT for 
   203 00001F45 7543                <1>     jnz .pullChar
   204 00001F47 803D(D2D90300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   205 00001F4E 7507                <1>     jne .skiplookahead
   206 00001F50 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   207 00001F52 E821FDFFFF          <1>     call mainCharIO
   208                              <1> .skiplookahead:
   209 00001F57 B484                <1>     mov ah, 84h
   210 00001F59 CD4A                <1>     int 4ah ;Multitasking keyboard loop
   211 00001F5B 66813D(B3DA0300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   211 00001F63 FF                  <1>
   212 00001F64 751B                <1>     jne .skipClockRead
   213 00001F66 E82F480000          <1>     call dosPushRegs
   214 00001F6B F8                  <1>     clc ;Clear CF, write primary header to backup
   215 00001F6C E882000000          <1>     call swapPrimaryHeader
   216 00001F71 E8D2060000          <1>     call readDateTimeRecord
   217 00001F76 F9                  <1>     stc ;Set CF, write backup to primary header
   218 00001F77 E877000000          <1>     call swapPrimaryHeader
   219 00001F7C E802480000          <1>     call dosPopRegs
   220                              <1> .skipClockRead:
   221 00001F81 66FF05(B3DA0300)    <1>     inc word [keybTicks]
   222 00001F88 EBB6                <1>     jmp short .readAgain
   223                              <1> .pullChar:
   224 00001F8A 30E4                <1>     xor ah, ah
   225 00001F8C E8E7FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   226 00001F91 5E                  <1>     pop rsi
   227 00001F92 3C00                <1>     cmp al, NUL ;Is this the null char?
   228 00001F94 7507                <1>     jne .exit
   229                              <1>     ;We are mid extended ascii, prevent printer toggling
   230 00001F96 C605(B2DA0300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   231                              <1> .exit:
   232                              <1>     return
    18                              <2> %%_ret:
    19 00001F9D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> printString_B:      ;ah = 09h
   235 00001F9E 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   236                              <1> .ps0:
   237 00001FA1 AC                  <1>     lodsb   ;Get char in al and inc rsi
   238 00001FA2 3C24                <1>     cmp al, "$" ;End of string char?
   239                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001FA4 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   240 00001FA6 E838FEFFFF          <1>     call charOut_B.in
   241 00001FAB EBF4                <1>     jmp short .ps0
   242                              <1> 
   243                              <1> checkStdinStatus:  ;ah = 0Bh
   244                              <1> ;Returns the status of the driver controlling vCon
   245 00001FAD E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   246 00001FB2 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   247                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001FB4 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   248 00001FB6 FEC8                <1>     dec al  ;Set al to -1 if char available
   249                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 00001FB8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   250                              <1> clearbuffDoFunc:   ;ah = 0Ch
   251                              <1> ;Clears any buffers and issues a console read command (the command in al)
   252                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   253 00001FB9 50                  <1>     push rax
   254 00001FBA 52                  <1>     push rdx
   255 00001FBB 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   256 00001FBD E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   257 00001FC2 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   258 00001FC4 B404                <1>     mov ah, 04h ;Flush input buffers
   259 00001FC6 E8ADFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   260                              <1> .skipFlush:
   261 00001FCB 5A                  <1>     pop rdx
   262 00001FCC 58                  <1>     pop rax
   263 00001FCD 88C4                <1>     mov ah, al  ;Move function number into ah
   264 00001FCF 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   265 00001FD1 7507                <1>     jne .others
   266 00001FD3 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   267 00001FD6 7412                <1>     jz .bad ;Yes, exit
   268 00001FD8 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   269                              <1> .others:
   270 00001FDA 3C01                <1>     cmp al, 01h
   271 00001FDC 740F                <1>     je .callFunction
   272 00001FDE 3C07                <1>     cmp al, 07h
   273 00001FE0 740B                <1>     je .callFunction
   274 00001FE2 3C08                <1>     cmp al, 08h
   275 00001FE4 7407                <1>     je .callFunction
   276 00001FE6 3C0A                <1>     cmp al, 0Ah
   277 00001FE8 7403                <1>     je .callFunction
   278                              <1> .bad:
   279 00001FEA 30C0                <1>     xor al, al
   280                              <1>     return
    18                              <2> %%_ret:
    19 00001FEC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   281                              <1> .callFunction:
   282 00001FED FA                  <1>     cli ;Prepare to swap stack pointer
   283                              <1>     ;The below address avoids "properly" reentering DOS
   284                              <1>     ;We simply reuse the function dispatch aspect. 
   285                              <1>     ;this means we dont trash the caller's register frame 
   286 00001FEE E9B8460000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   287                              <1> ;------------------------
   288                              <1> ;  Primitive functions  :
   289                              <1> ;------------------------
   290                              <1> swapPrimaryHeader:
   291                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   292                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   293 00001FF3 56                  <1>     push rsi
   294 00001FF4 57                  <1>     push rdi
   295 00001FF5 51                  <1>     push rcx
   296 00001FF6 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   296 00001FFF 00                  <1>
   297 00002000 488D35(B5C40300)    <1>     lea rsi, primReqHdr
   298 00002007 488D3D(85DA0300)    <1>     lea rdi, bkupReqHdr
   299 0000200E 7303                <1>     jnc .read
   300 00002010 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   301                              <1> .read:
   302 00002013 F3A4                <1>     rep movsb   ;Swap
   303 00002015 59                  <1>     pop rcx
   304 00002016 5F                  <1>     pop rdi
   305 00002017 5E                  <1>     pop rsi
   306                              <1>     return
    18                              <2> %%_ret:
    19 00002018 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   307                              <1> outputOnStdout:
   308                              <1> ;Input: al = Char to output
   309                              <1> ;Output: CF=CY, all good
   310 00002019 53                  <1>     push rbx
   311 0000201A BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   312 0000201F E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   313 00002024 7217                <1>     jc .exit
   314 00002026 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   315 0000202C 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   316 0000202E 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   317 00002032 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   318 00002038 7405                <1>     jz .notCharDevOrFast
   319 0000203A CD49                <1>     int 49h ;Fast output
   320                              <1> .exitOk:
   321 0000203C F8                  <1>     clc
   322                              <1> .exit:
   323 0000203D 5B                  <1>     pop rbx
   324                              <1>     return
    18                              <2> %%_ret:
    19 0000203E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   325                              <1> .notCharDevOrFast:
   326 0000203F E809000000          <1>     call outputOnSFT
   327 00002044 5B                  <1>     pop rbx
   328                              <1>     return
    18                              <2> %%_ret:
    19 00002045 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> outputToHandle:
   331                              <1> ;Char to output must be in al
   332 00002046 E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   333                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000204B 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   334                              <1> outputOnSFT:
   335                              <1> ;Output char in al to SFT in rsi
   336                              <1> ;Waits until device is not busy to send char.
   337                              <1> ;Calls int 48h if device busy
   338 0000204D 50                  <1>     push rax
   339 0000204E B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   340 00002050 E823FCFFFF          <1>     call mainCharIO
   341 00002055 58                  <1>     pop rax
   342 00002056 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   343 00002058 B402                <1>     mov ah, 02h ;Output char in al
   344 0000205A E819FCFFFF          <1>     call mainCharIO
   345 0000205F F8                  <1>     clc
   346                              <1>     return
    18                              <2> %%_ret:
    19 00002060 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   347                              <1> .signalLoop:
   348 00002061 E802000000          <1>     call callInt48h
   349 00002066 EBE5                <1>     jmp short outputOnSFT
   350                              <1> 
   351                              <1> callInt48h:
   352                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   353 00002068 9C                  <1>     pushfq
   354 00002069 F605(89C40300)FF    <1>     test byte [int48Flag], -1
   355 00002070 7417                <1>     jz .exit    ;If zero, not safe
   356 00002072 F605(FCC30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   357 00002079 750E                <1>     jnz .exit
   358                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   359 0000207B FF35(89C40300)      <1>     push qword [int48Flag] 
   360 00002081 CD48                <1>     int 48h
   361 00002083 8F05(89C40300)      <1>     pop qword [int48Flag]    ;Return original value
   362                              <1> .exit:
   363 00002089 9D                  <1>     popfq
   364                              <1>     return
    18                              <2> %%_ret:
    19 0000208A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   365                              <1> 
   366                              <1> 
   367                              <1> vConCtrlCheck:
   368                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   369                              <1> ; the processing. 
   370                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   371                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   372                              <1> ;
   373                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   374                              <1> ;^S will pause screen processing until another key is processed by vCon input
   375                              <1> ;^P will toggle the printer echo feature of the vConsole
   376                              <1> ;
   377                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   378                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   379                              <1> ;
   380                              <1> ;Output: 
   381                              <1> ;   CF=CY : Error
   382                              <1> ;   CF=NC : ...
   383                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   384                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   385 0000208B E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   386 00002090 53                  <1>     push rbx
   387 00002091 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   388 00002093 E8BA000000          <1>     call getCharDevSFT
   389 00002098 5B                  <1>     pop rbx
   390                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002099 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   391 0000209B B401                <1>     mov ah, 01  ;Non destructively read CON
   392 0000209D E8D6FBFFFF          <1>     call mainCharIO
   393 000020A2 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   394                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   395 000020A4 3C13                <1>     cmp al, DC3 ;^S ?
   396 000020A6 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   397 000020A8 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   398 000020AA E8C9FBFFFF          <1>     call mainCharIO
   399 000020AF E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   400                              <1> .checkPrintOrExit:
   401 000020B4 3C10                <1>     cmp al, DLE ;Do we have ^P?
   402 000020B6 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   403 000020B8 3C03                <1>     cmp al, ETX ;Do we have ^C?
   404 000020BA 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   405                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   406                              <1>     return 
    18                              <2> %%_ret:
    19 000020BC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   407                              <1> .printToggle:
   408 000020BD F615(C4C30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   409 000020C3 53                  <1>     push rbx
   410 000020C4 BB04000000          <1>     mov ebx, 4  ;PRN handle
   411 000020C9 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   412 000020CE 5B                  <1>     pop rbx
   413                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000020CF 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   414 000020D1 57                  <1>     push rdi
   415 000020D2 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   416 000020D5 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   417 000020DB 741D                <1>     jz .notNet
   418 000020DD 50                  <1>     push rax
   419 000020DE B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   420 000020E3 CD4F                <1>     int 4Fh
   421 000020E5 58                  <1>     pop rax
   422 000020E6 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   423                              <1>     ;If something went wrong, turn off echo
   424 000020E8 C605(C4C30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   425 000020EF 50                  <1>     push rax
   426 000020F0 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   427 000020F5 CD4F                <1>     int 4Fh
   428 000020F7 58                  <1>     pop rax
   429 000020F8 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   430                              <1> .notNet:
   431                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   432                              <1> ; 0Dh or 0Eh
   433 000020FA 803D(C4C30300)00    <1>     cmp byte [printEcho], 00
   434 00002101 7507                <1>     jnz .echoOn
   435 00002103 E84EFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   436 00002108 EB05                <1>     jmp short .printExit
   437                              <1> .echoOn:
   438 0000210A E83EFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   439                              <1> .printExit:
   440 0000210F 5F                  <1>     pop rdi
   441                              <1>     return
    18                              <2> %%_ret:
    19 00002110 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   442                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   443 00002111 E852FFFFFF          <1>     call callInt48h
   444                              <1> .waitNextChar:   ;Here get next char
   445 00002116 B401                <1>     mov ah, 01h ;ND read
   446 00002118 E85BFBFFFF          <1>     call mainCharIO
   447 0000211D 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   448                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   449 0000211F 53                  <1>     push rbx
   450 00002120 31DB                <1>     xor ebx, ebx
   451 00002122 E82B000000          <1>     call getCharDevSFT
   452 00002127 5B                  <1>     pop rbx
   453                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002128 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   454 0000212A 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   455 0000212C E847FBFFFF          <1>     call mainCharIO
   456 00002131 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   457 00002133 7514                <1>     jnz .checkBreak2
   458 00002135 803D(B2DA0300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   459 0000213C 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   460 00002142 C605(B2DA0300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   461                              <1> .checkBreak2:
   462 00002149 3C03                <1>     cmp al, ETX
   463                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000214B 75C3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   464 0000214D E9DB390000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   465                              <1> 
   466                              <1> 
   467                              <1> getCharDevSFT:
   468                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   469                              <1> ;Input: bx = zero extended handle number
   470                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   471                              <1> ;        CF=CY => al = Error code, abort operation
   472 00002152 F605(88C40300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   473 00002159 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   474                              <1> .getSFT:
   475 0000215B 57                  <1>     push rdi
   476 0000215C E82F240000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   477 00002161 4889FE              <1>     mov rsi, rdi
   478 00002164 5F                  <1>     pop rdi
   479                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 00002165 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   480                              <1> .swap:
   481                              <1> ;workingSFT is only set for CON calls
   482 00002166 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   483 0000216C 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   484 0000216E 488B35(12C70300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   485 00002175 F8                  <1>     clc
   486                              <1>     return
    18                              <2> %%_ret:
    19 00002176 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   487                              <1> 
   488                              <1> ;------------------------
   489                              <1> ;   Utility functions   :
   490                              <1> ;------------------------
   491                              <1> printCaretASCII:
   492                              <1> ;Input: al = Char to print with a caret
   493                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   494                              <1> ;First check if the char should be careted, and then print normally if so
   495 00002177 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   496 00002179 0F8364FCFFFF        <1>     jae charOut_B.in
   497 0000217F 3C09                <1>     cmp al, TAB
   498 00002181 0F845CFCFFFF        <1>     je charOut_B.in
   499 00002187 3C15                <1>     cmp al, NAK
   500 00002189 0F8454FCFFFF        <1>     je charOut_B.in
   501 0000218F 3C14                <1>     cmp al, DC4
   502 00002191 0F844CFCFFFF        <1>     je charOut_B.in
   503 00002197 50                  <1>     push rax
   504 00002198 B05E                <1>     mov al, "^" ;Get caret in place
   505 0000219A E844FCFFFF          <1>     call charOut_B.in
   506 0000219F 58                  <1>     pop rax
   507 000021A0 0440                <1>     add al, "@" ;Turn into an ASCII Char
   508 000021A2 E93CFCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   509                              <1> printCRLF:
   510 000021A7 B00D                <1>     mov al, CR
   511 000021A9 E835FCFFFF          <1>     call charOut_B.in
   512 000021AE B00A                <1>     mov al, LF
   513 000021B0 E92EFCFFFF          <1>     jmp charOut_B.in
   514                              <1> 
   515                              <1> checkBreak:
   516                              <1> ;Reads bytes from CON if there are any bytes to read and 
   517                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   518 000021B5 803D(FDC30300)01    <1>     cmp byte [inDOS], 1
   519                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000021BC 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   520                              <1> ;Returns in al the keystroke that is available IF one is available
   521                              <1> ; or al=0 if no keystroke available
   522 000021BE 53                  <1>     push rbx
   523 000021BF 56                  <1>     push rsi
   524 000021C0 488B35(59C00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   525                              <1>     ;Place command code and a zero status word at the same time
   526 000021C7 C705(E1C40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   526 000021CF 0000                <1>
   527                              <1>     ;Place the packet size in the hdrlen field
   528 000021D1 C605(DFC40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   529 000021D8 488D1D(DFC40300)    <1>     lea rbx, critReqHdr
   530 000021DF E87E3D0000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   531                              <1>     ;Check if the busy bit is set (No keystroke available)
   532 000021E4 66F705(E2C40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   532 000021EC 02                  <1>
   533 000021ED 7405                <1>     jz .charFound
   534                              <1> .exit:
   535 000021EF 30C0                <1>     xor al, al
   536 000021F1 5E                  <1>     pop rsi
   537 000021F2 5B                  <1>     pop rbx
   538                              <1>     return
    18                              <2> %%_ret:
    19 000021F3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   539                              <1> .charFound:
   540                              <1> ;Keystroke available, proceed
   541 000021F4 8A05(ECC40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   542 000021FA 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   543 000021FC 75F1                <1>     jne .exit   ;If not equal exit
   544                              <1> ;Now we pull the char out of the buffer
   545 000021FE C705(E1C40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   545 00002206 0000                <1>
   546 00002208 C605(DFC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   547                              <1>     ;Place pointers and number of chars
   548 0000220F C705(F5C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   548 00002217 0000                <1>
   549                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   550 00002219 488D05(ECC40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   551 00002220 488905(EDC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   552 00002227 E8363D0000          <1>     call goDriver   ;RSI and RBX as before
   553 0000222C E9FC380000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   554                              <1> 
   555                              <1> vConSwapDriver:
   556                              <1> ;Sets up the vCon to use the alternative SFT pointer
   557 00002231 57                  <1>     push rdi
   558 00002232 C605(88C40300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   559 00002239 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   560 00002240 48893D(12C70300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   561 00002247 5F                  <1>     pop rdi
   562                              <1>     return
    18                              <2> %%_ret:
    19 00002248 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> vConRetDriver:
   565                              <1> ;Returns the original driver (sets flag down)
   566 00002249 C605(88C40300)00    <1>     mov byte [vConDrvSwp], 0
   567                              <1>     return
    18                              <2> %%_ret:
    19 00002250 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   568                              <1> 
   569                              <1> ;--------------------------------------------------
   570                              <1> ;      Main Keyboard Buffered Input Function      :
   571                              <1> ;--------------------------------------------------
   572                              <1> buffCharInput_BE:  ;ah = 0Ah
   573                              <1> ;Buffer pointer in rdx
   574                              <1> ; byte [rdx + 0], buffer length
   575                              <1> ; byte [rdx + 1], number of chars in buffer
   576                              <1> ; byte [rdx + 2], buffer start
   577                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   578                              <1> ;Register use
   579                              <1> ; dh = Char offset in internal buffer
   580                              <1> ; dl = Buffer length
   581                              <1> ; bh = Char offset in user buffer
   582                              <1> ; bl = Number of chars already in the buffer
   583                              <1> ; rdi = Internal buffer
   584                              <1> ; rsi = User buffer
   585 00002251 4889D6              <1>     mov rsi, rdx
   586 00002254 66AD                <1>     lodsw   ;Get buffer metadata in ax
   587 00002256 84C0                <1>     test al, al
   588                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002258 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   589 0000225A 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   590 0000225D 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   591 0000225F 7606                <1>     jbe .avoidcheck
   592 00002261 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   593 00002265 7402                <1>     je .functionKeyOk
   594                              <1> .avoidcheck:
   595 00002267 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   596                              <1> .functionKeyOk:
   597 00002269 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   598 0000226C FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   599                              <1> .breakEP:
   600 0000226E 8A05(C1C20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   601 00002274 8805(C2C20300)      <1>     mov byte [vConCurCnt], al
   602 0000227A 56                  <1>     push rsi    ;Push user buffer address
   603 0000227B 488D3D(C3C20300)    <1>     lea rdi, vConBuffer
   604 00002282 C605(F3C60300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   605                              <1> .mainLoop:
   606 00002289 E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   607 0000228E 3C0A                <1>     cmp al, LF
   608 00002290 7505                <1>     jne .checkControlChars
   609                              <1> .mainLoop2:
   610 00002292 E8A8FCFFFF          <1>     call charIn_B
   611                              <1> .checkControlChars:
   612 00002297 3C06                <1>     cmp al, ACK
   613 00002299 74F7                <1>     je .mainLoop2   ;Get another char
   614 0000229B 3A05C1DDFFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   615 000022A1 0F8426010000        <1>     je .escape
   616 000022A7 3C7F                <1>     cmp al, DEL
   617 000022A9 0F8489000000        <1>     je .delete
   618 000022AF 3C08                <1>     cmp al, BSP
   619 000022B1 0F8481000000        <1>     je .delete
   620 000022B7 3C17                <1>     cmp al, ETB
   621                              <1>     ;Add space for patched jump instructions
   622 000022B9 9090909090          <1>     db 5 dup (90h)  ;NOP
   623 000022BE 3C15                <1>     cmp al, NAK
   624 000022C0 9090909090          <1>     db 5 dup (90h)
   625 000022C5 3C0D                <1>     cmp al, CR
   626 000022C7 744C                <1>     je .carriageReturn
   627 000022C9 3C0A                <1>     cmp al, LF
   628 000022CB 7461                <1>     je .lineFeed
   629 000022CD 3A0590DDFFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   630 000022D3 7429                <1>     je .break
   631                              <1> .checkIfCanInsert:
   632 000022D5 38D6                <1>     cmp dh, dl
   633 000022D7 731C                <1>     jae .bufOflw
   634 000022D9 AA                  <1>     stosb   ;Store the byte and increment rdi!
   635 000022DA FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   636 000022DC E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   637 000022E1 803D(F3C60300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   638 000022E8 75A8                <1>     jne .mainLoop2
   639                              <1>     ;IF not in insert mode, we fall here
   640                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   641                              <1>     ; or insert chars if needed.
   642 000022EA 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   643 000022EC 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   644 000022EE 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   645 000022F1 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   646 000022F3 EB9D                <1>     jmp short .mainLoop2
   647                              <1> .bufOflw:
   648                              <1> ;Buffer overflow
   649 000022F5 B007                <1>     mov al, BEL ;Sound the bell
   650 000022F7 E8E7FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   651 000022FC EB94                <1>     jmp short .mainLoop2
   652                              <1> .break:
   653                              <1> ;Break, Place a "\", and do a CRLF
   654 000022FE B05C                <1>     mov al, "\"
   655 00002300 E8DEFAFFFF          <1>     call charOut_B.in
   656 00002305 5E                  <1>     pop rsi ;Realign stack
   657                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   658 00002306 E89CFEFFFF          <1>     call printCRLF
   659                              <1>     ;Align to next tabstop
   660 0000230B E85AFBFFFF          <1>     call charOut_B.tab
   661 00002310 E959FFFFFF          <1>     jmp .breakEP
   662                              <1> .carriageReturn:
   663 00002315 AA                  <1>     stosb
   664 00002316 E8C8FAFFFF          <1>     call charOut_B.in
   665 0000231B 5F                  <1>     pop rdi ;User buffer address was pushed 
   666 0000231C 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   667 0000231F FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   668                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   669 00002321 488D35(C3C20300)    <1>     lea rsi, vConBuffer
   670 00002328 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   671 0000232B F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   672                              <1>     return
    18                              <2> %%_ret:
    19 0000232D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   673                              <1> .lineFeed:
   674 0000232E E874FEFFFF          <1>     call printCRLF
   675 00002333 E95AFFFFFF          <1>     jmp .mainLoop2
   676                              <1> .delete:
   677 00002338 E805000000          <1>     call .removeChar
   678 0000233D E950FFFFFF          <1>     jmp .mainLoop2
   679                              <1> .removeChar:
   680 00002342 84F6                <1>     test dh, dh ;Is char count 0?
   681 00002344 741C                <1>     jz .normalChar   ;If so, skip going back!
   682 00002346 E868000000          <1>     call .vConErase
   683 0000234B 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   684 0000234D 3C20                <1>     cmp al, SPC
   685 0000234F 7311                <1>     jae .normalChar
   686 00002351 3C09                <1>     cmp al, TAB
   687 00002353 7420                <1>     je .eraTab
   688 00002355 3C15                <1>     cmp al, NAK
   689 00002357 7409                <1>     je .normalChar
   690 00002359 3C14                <1>     cmp al, DC4
   691 0000235B 7405                <1>     je .normalChar
   692 0000235D E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   693                              <1> .normalChar:
   694 00002362 803D(F3C60300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   695                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002369 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   696 0000236B 84FF                <1>     test bh, bh ;Beginning of user buffer?
   697                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000236D 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   698 0000236F 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   699 00002372 FECF                <1>     dec bh
   700                              <1>     return
    18                              <2> %%_ret:
    19 00002374 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   701                              <1> .eraTab:
   702                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   703                              <1> ; up to a tab stop worth of space chars printed
   704 00002375 57                  <1>     push rdi
   705 00002376 48FFCF              <1>     dec rdi
   706 00002379 FD                  <1>     std ;Go backwards
   707 0000237A 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   708 0000237D B020                <1>     mov al, SPC
   709 0000237F 53                  <1>     push rbx
   710 00002380 BB07000000          <1>     mov ebx, 7
   711 00002385 67E30D              <1>     jecxz .onTabstop
   712                              <1> .scanString:
   713 00002388 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   714 00002389 7608                <1>     jbe .notChar    ;No, skip handling
   715 0000238B 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   716 0000238F 740A                <1>     je .tabChar
   717 00002391 FECB                <1>     dec bl
   718                              <1> .notChar:
   719 00002393 E2F3                <1>     loop .scanString
   720                              <1> .onTabstop:
   721 00002395 2A1D(C2C20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   722                              <1> .tabChar:
   723 0000239B 28F3                <1>     sub bl, dh  ;Same on tabstop
   724 0000239D 00D9                <1>     add cl, bl
   725 0000239F 80E107              <1>     and cl, 7
   726 000023A2 5B                  <1>     pop rbx
   727 000023A3 5F                  <1>     pop rdi
   728 000023A4 FC                  <1>     cld
   729 000023A5 74BB                <1>     jz .normalChar
   730                              <1>     ;Now erase all the spaces placed on the vCon
   731                              <1> .vConDelTab:
   732 000023A7 E80C000000          <1>     call .vConEraseNoDec
   733 000023AC E2F9                <1>     loop .vConDelTab
   734 000023AE E9AFFFFFFF          <1>     jmp .normalChar
   735                              <1> .vConErase:
   736                              <1> ;Erase the char on the vCon
   737                              <1> ;Return through the output function
   738 000023B3 48FFCF              <1>     dec rdi ;Go back a space in the 
   739 000023B6 FECE                <1>     dec dh  ;Decrement char count in the buffer
   740                              <1> .vConEraseNoDec:
   741 000023B8 B008                <1>     mov al, BSP ;Move cursor back
   742 000023BA E824FAFFFF          <1>     call charOut_B.in
   743 000023BF B020                <1>     mov al, SPC ;Replace with a space
   744 000023C1 E81DFAFFFF          <1>     call charOut_B.in
   745 000023C6 B008                <1>     mov al, BSP ;Move cursor back again
   746 000023C8 E916FAFFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   747                              <1> .escape:
   748                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   749                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   750                              <1> ; including the function keys.
   751 000023CD FF2587DCFFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   752                              <1> .f2:
   753 000023D3 E846000000          <1>     call .fCommon2
   754 000023D8 EB0C                <1>     jmp short .fCommon
   755                              <1> .f3:
   756 000023DA 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   757 000023DD 28F9                <1>     sub cl, bh  ;Sub our current position
   758 000023DF EB05                <1>     jmp short .fCommon
   759                              <1> .f1:
   760 000023E1 B901000000          <1>     mov ecx, 1  ;Get one char
   761                              <1> .fCommon:
   762 000023E6 C605(F3C60300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   763 000023ED 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   764 000023EF 0F849DFEFFFF        <1>     je .mainLoop2
   765 000023F5 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   766 000023F7 0F8495FEFFFF        <1>     je .mainLoop2
   767                              <1>     ;Else, copy byte by byte, and retain char in al
   768 000023FD AC                  <1>     lodsb
   769 000023FE AA                  <1>     stosb
   770 000023FF E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   771 00002404 FEC7                <1>     inc bh
   772 00002406 FEC6                <1>     inc dh
   773 00002408 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   774 0000240A E983FEFFFF          <1>     jmp .mainLoop2
   775                              <1> .f4:
   776 0000240F E80A000000          <1>     call .fCommon2
   777 00002414 4801CE              <1>     add rsi, rcx
   778 00002417 00CF                <1>     add bh, cl
   779 00002419 E974FEFFFF          <1>     jmp .mainLoop2
   780                              <1> .fCommon2:
   781 0000241E E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   782 00002423 3A0539DCFFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   783 00002429 750B                <1>     jne .fnotEscape
   784                              <1>     ;Get another char if they typed escape and force it in the buffer
   785                              <1>     ; Do not return to caller
   786 0000242B E80FFBFFFF          <1>     call charIn_B
   787                              <1> .fforceExit:
   788 00002430 59                  <1>     pop rcx ;Get original return address from stack
   789 00002431 E95CFEFFFF          <1>     jmp .mainLoop2
   790                              <1> .fnotEscape:
   791 00002436 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   792 00002439 28F9                <1>     sub cl, bh
   793 0000243B 74F3                <1>     jz .fforceExit
   794 0000243D FFC9                <1>     dec ecx
   795 0000243F 74EF                <1>     jz .fforceExit
   796 00002441 57                  <1>     push rdi
   797 00002442 4889F7              <1>     mov rdi, rsi
   798 00002445 48FFC7              <1>     inc rdi
   799 00002448 F2AE                <1>     repne scasb ;Search for the char to start printing from
   800 0000244A 5F                  <1>     pop rdi
   801 0000244B 75E3                <1>     jne .fforceExit ;If char not found, return
   802 0000244D F6D1                <1>     not cl
   803 0000244F 00D9                <1>     add cl, bl
   804 00002451 28F9                <1>     sub cl, bh
   805                              <1>     return
    18                              <2> %%_ret:
    19 00002453 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   806                              <1> .f5:
   807 00002454 B040                <1>     mov al, "@"
   808 00002456 E888F9FFFF          <1>     call charOut_B.in   ;Print the char
   809 0000245B 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   810 0000245C 57                  <1>     push rdi
   811 0000245D E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   812 00002462 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   813 00002463 88F3                <1>     mov bl, dh
   814 00002465 E99CFEFFFF          <1>     jmp .breakAlt
   815                              <1> .f6:
   816                              <1> ;If the user wants to insert a EOF, they can use F6
   817 0000246A B01A                <1>     mov al, EOF
   818 0000246C E964FEFFFF          <1>     jmp .checkIfCanInsert
   819                              <1> .f7:
   820                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   821 00002471 8A05EBDBFFFF        <1>     mov al, byte [extESC]
   822 00002477 E959FEFFFF          <1>     jmp .checkIfCanInsert
   823                              <1> .toggleIns:
   824 0000247C F615(F3C60300)      <1>     not byte [vConInsert]   ;Toggle
   825                              <1>     return
    18                              <2> %%_ret:
    19 00002482 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   826                              <1> .eDel:
   827 00002483 38DF                <1>     cmp bh, bl
   828 00002485 0F8407FEFFFF        <1>     je .mainLoop2
   829 0000248B FEC7                <1>     inc bh
   830 0000248D 48FFC6              <1>     inc rsi
   831 00002490 E9FDFDFFFF          <1>     jmp .mainLoop2
   832                              <1> 
   833                              <1> editKeys:
   834                              <1> ;Our Default Extended keys handler
   835 00002495 E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   836 0000249A B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   837 0000249F 57                  <1>     push rdi    ;Preserve rdi
   838 000024A0 488D3DBDDBFFFF      <1>     lea rdi, extKeyTbl
   839 000024A7 57                  <1>     push rdi
   840                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   841                              <1>     ; offset of function from extKeyTbl
   842                              <1> .lp:
   843 000024A8 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   844 000024A9 740D                <1>     je .charFound
   845 000024AB FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   846 000024AD 7414                <1>     jz .notInTable
   847 000024AF 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   848 000024B6 EBF0                <1>     jmp short .lp
   849                              <1> .charFound:
   850 000024B8 59                  <1>     pop rcx ;Pop back the effective address of the table
   851 000024B9 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   852 000024BD 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   853 000024C0 5F                  <1>     pop rdi
   854 000024C1 FFE1                <1>     jmp rcx
   855                              <1> .notInTable:
   856 000024C3 59                  <1>     pop rcx ;Realign stack
   857 000024C4 59                  <1>     pop rcx
   858 000024C5 E9C8FDFFFF          <1>     jmp buffCharInput_BE.mainLoop2
    31                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    32                              <1> ;Major kernel date time functions and subroutines
    33                              <1> 
    34                              <1> getDate:           ;ah = 2Ah
    35 000024CA E879010000          <1>     call readDateTimeRecord ;Update date if necessary
    36 000024CF E8793E0000          <1>     call getUserRegs
    37 000024D4 668B15(82C40300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
    38                              <1> ;    mov dh, byte [monthOfYear]
    39 000024DB 0FB60D(84C40300)    <1>     movzx ecx, byte [years]
    40 000024E2 8A05(87C40300)      <1>     mov al, byte [dayOfWeek]
    41 000024E8 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    42 000024EC 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    43                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 000024F0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    44                              <1> setDate:           ;ah = 2Bh
    45                              <1> ;	CX = year (1980-2099)
    46                              <1> ;   DH = month (1-12)
    47                              <1> ;	DL = day (1-31)
    48 000024F1 E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    49                              <1>     return
    18                              <2> %%_ret:
    19 000024F6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    50                              <1> getTime:           ;ah = 2Ch
    51 000024F7 E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    52 000024FC E84C3E0000          <1>     call getUserRegs
    53 00002501 668B0D(0CC50300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    54 00002508 668B15(0EC50300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    55 0000250F 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    56 00002513 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    57                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 00002517 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    58                              <1> setTime:           ;ah = 2Dh
    59                              <1> ;   CH = hour (0-23)
    60                              <1> ;	CL = minutes (0-59)
    61                              <1> ;	DH = seconds (0-59)
    62                              <1> ;	DL = hundredths (0-99)
    63 00002518 80FD17              <1>     cmp ch, 23
    64 0000251B 7749                <1>     ja .exitBad
    65 0000251D 80F93B              <1>     cmp cl, 59
    66 00002520 7744                <1>     ja .exitBad
    67 00002522 80FE3B              <1>     cmp dh, 59
    68 00002525 773F                <1>     ja .exitBad
    69 00002527 80FA63              <1>     cmp dl, 99
    70 0000252A 773A                <1>     ja .exitBad
    71                              <1> ;Now we read date (updating internal count if necessary)
    72 0000252C E817010000          <1>     call readDateTimeRecord
    73 00002531 488D1D(0AC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    74 00002538 0FB705(85C40300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    75 0000253F 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    76 00002542 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    77 00002546 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    78 0000254A B906000000          <1>     mov ecx, 6
    79 0000254F 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    80 00002552 E8943C0000          <1>     call primReqWriteSetup   ;rbx now points to request header
    81 00002557 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    82 0000255E E8FF390000          <1>     call goDriver
    83 00002563 30C0                <1>     xor al, al
    84                              <1>     return
    18                              <2> %%_ret:
    19 00002565 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    85                              <1> .exitBad:
    86 00002566 B0FF                <1>     mov al, -1
    87                              <1>     return
    18                              <2> %%_ret:
    19 00002568 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    88                              <1> ;------------------------
    89                              <1> ;   Utility functions   :
    90                              <1> ;------------------------
    91                              <1> writeDate:
    92 00002569 6681F97800          <1>     cmp cx, 120
    93 0000256E 0F83D1000000        <1>     jae .exitBad
    94 00002574 80FE0C              <1>     cmp dh, 12
    95 00002577 0F87C8000000        <1>     ja .exitBad
    96 0000257D 80FA1F              <1>     cmp dl, 31
    97 00002580 0F87BF000000        <1>     ja .exitBad
    98 00002586 668915(82C40300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    99                              <1>     ;mov byte [monthOfYear], dh
   100 0000258D 880D(84C40300)      <1>     mov byte [years], cl    ;Save the years count
   101 00002593 E878010000          <1>     call setDaysInFeb   ;Set days in february this year
   102 00002598 88CD                <1>     mov ch, cl ;Get years count in ch
   103 0000259A C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
   104 0000259D 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
   105 000025A0 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
   106 000025A3 BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
   107 000025A8 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
   108                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
   109 000025AA 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
   110 000025AD 67E316              <1>     jecxz .addDay    ;Skip adding years
   111 000025B0 056E010000          <1>     add eax, 366    ;First add for a leap year
   112                              <1> .addYears:
   113 000025B5 FFC9                <1>     dec ecx
   114 000025B7 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
   115 000025BA 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   116 000025BF EBF4                <1>     jmp short .addYears
   117                              <1> .addLeap:
   118 000025C1 056E010000          <1>     add eax, 366    ;Add the days in the leap year
   119                              <1> .addDay:
   120 000025C6 89C2                <1>     mov edx, eax    ;Save this number in edx
   121                              <1>     ;Now to add day offset
   122 000025C8 0FB60D(83C40300)    <1>     movzx ecx, byte [monthOfYear]
   123 000025CF 488D35AFDAFFFF      <1>     lea rsi, monthsTbl
   124                              <1> .addDaysInMonth:
   125 000025D6 FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   126 000025D8 67E308              <1>     jecxz .addMonthOffset
   127 000025DB AC                  <1>     lodsb   ;Get the number of days in the month in al
   128 000025DC 0FB6C0              <1>     movzx eax, al
   129 000025DF 01C2                <1>     add edx, eax
   130 000025E1 EBF3                <1>     jmp short .addDaysInMonth
   131                              <1> .addMonthOffset:
   132 000025E3 0FB60D(82C40300)    <1>     movzx ecx, byte [dayOfMonth]
   133 000025EA FFC9                <1>     dec ecx
   134 000025EC 01CA                <1>     add edx, ecx    ;Add month offset
   135                              <1>     ;edx has the number of days since 01/01/1980
   136 000025EE 668915(85C40300)    <1>     mov word [daysOffset], dx   ;Store!
   137                              <1> ;Now read and then write CLOCKrecrd
   138 000025F5 488D1D(0AC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   139 000025FC B906000000          <1>     mov ecx, 6
   140 00002601 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   141 00002604 E8ED3B0000          <1>     call primReqReadSetup   ;rbx now points to request header
   142 00002609 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   143 00002610 E84D390000          <1>     call goDriver
   144                              <1> ;Now we change daycount and write it back
   145 00002615 0FB705(85C40300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   146 0000261C 488D1D(0AC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   147 00002623 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   148 00002626 B906000000          <1>     mov ecx, 6
   149 0000262B 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   150 0000262E E8B83B0000          <1>     call primReqWriteSetup   ;rbx now points to request header
   151 00002633 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   152 0000263A E823390000          <1>     call goDriver
   153 0000263F E8AE000000          <1>     call setDayofWeek
   154                              <1>     return
    18                              <2> %%_ret:
    19 00002644 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   155                              <1> .exitBad:
   156 00002645 B0FF                <1>     mov al, -1
   157                              <1>     return
    18                              <2> %%_ret:
    19 00002647 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   158                              <1> 
   159                              <1> readDateTimeRecord:
   160                              <1> ;Will read the clock using the primary request header
   161                              <1> ;Preserves all regs except eax and flags
   162 00002648 53                  <1>     push rbx
   163 00002649 51                  <1>     push rcx
   164 0000264A 52                  <1>     push rdx
   165 0000264B 56                  <1>     push rsi
   166 0000264C 55                  <1>     push rbp
   167                              <1> 
   168 0000264D 66C705(B3DA0300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   168 00002655 00                  <1>
   169 00002656 488D1D(0AC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   170 0000265D B906000000          <1>     mov ecx, 6
   171 00002662 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   172                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   173                              <1> ; rbx = Data storage buffer ptr
   174                              <1> ; ecx = Number of sectors to transfer
   175                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   176 00002665 E88C3B0000          <1>     call primReqReadSetup   ;rbx now points to request header
   177 0000266A 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   178 00002671 E8EC380000          <1>     call goDriver
   179 00002676 0FB705(0AC50300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   180                              <1> ;Here we have:  ax = Days since 1/1/1980
   181                              <1> ;Updates the internal date fields
   182                              <1> ;Internal time fields are in the clock record
   183                              <1> ;So now we check if the number of days since 1980 are the same.
   184                              <1> ;If so, we can skip updating.
   185 0000267D 663B05(85C40300)    <1>     cmp ax, word [daysOffset]
   186 00002684 7466                <1>     je .exit    ;Return if equal
   187 00002686 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   188 0000268B 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   189 0000268D 668905(85C40300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   190                              <1>     ;Now want to update years, month and day fields
   191                              <1>     ;ax has the number of days since 01/01/1980
   192                              <1>     ;Get days in a 4 year period
   193 00002694 BBB5050000          <1>     mov ebx, 365*4 + 1
   194 00002699 31D2                <1>     xor edx, edx
   195 0000269B 89D1                <1>     mov ecx, edx  ;Zero ecx
   196 0000269D F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   197                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   198                              <1>     ;edx has offset into current 4 year bunch
   199 0000269F BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   200 000026A4 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   201 000026A6 7210                <1>     jb .foundBunch
   202 000026A8 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   203 000026AA FFC1                <1>     inc ecx
   204 000026AC FFCB                <1>     dec ebx ;Number of days in a normal year
   205                              <1> .findBunch:
   206 000026AE 39DA                <1>     cmp edx, ebx
   207 000026B0 7206                <1>     jb .foundBunch
   208 000026B2 29DA                <1>     sub edx, ebx
   209 000026B4 FFC1                <1>     inc ecx
   210 000026B6 EBF6                <1>     jmp short .findBunch
   211                              <1> .foundBunch:
   212                              <1>     ;If ecx = 0, february has 29 days!
   213                              <1>     ;eax has number of four year bunches elapsed since 1980
   214 000026B8 C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   215 000026BB 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   216                              <1>     ;ecx now has the number of years since 1980
   217 000026BD E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   218                              <1> ;edx has number of days into the year we are in
   219                              <1> ;eax has number of days in Feb for this year
   220 000026C2 488D35BCD9FFFF      <1>     lea rsi, monthsTbl
   221 000026C9 31C9                <1>     xor ecx, ecx    ;Use as month counter
   222                              <1> .monthSearch:
   223 000026CB FFC1                <1>     inc ecx ;Start from 1
   224 000026CD AC                  <1>     lodsb   ;Get value in al and inc rsi
   225 000026CE 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   226 000026D1 39C2                <1>     cmp edx, eax
   227 000026D3 7204                <1>     jb .monthFound
   228 000026D5 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   229 000026D7 EBF2                <1>     jmp short .monthSearch
   230                              <1> .monthFound:
   231                              <1>     ;cl has the month (01h-0Ch)
   232                              <1>     ;dl has the day of the month - 1
   233 000026D9 FFC2                <1>     inc edx
   234 000026DB 880D(83C40300)      <1>     mov byte [monthOfYear], cl
   235 000026E1 8815(82C40300)      <1>     mov byte [dayOfMonth], dl
   236 000026E7 E806000000          <1>     call setDayofWeek
   237                              <1> .exit:
   238 000026EC 5D                  <1>     pop rbp
   239 000026ED 5E                  <1>     pop rsi
   240 000026EE 5A                  <1>     pop rdx
   241 000026EF 59                  <1>     pop rcx
   242 000026F0 5B                  <1>     pop rbx
   243                              <1>     return  ;Return with ZF is date set, or same day
    18                              <2> %%_ret:
    19 000026F1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   244                              <1> 
   245                              <1> setDayofWeek:
   246                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   247 000026F2 0FB705(85C40300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   248 000026F9 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   249                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   250 000026FE 31D2                <1>     xor edx, edx
   251 00002700 B907000000          <1>     mov ecx, 7   
   252 00002705 F7F1                <1>     div ecx  ;Get remainder in dl
   253 00002707 8815(87C40300)      <1>     mov byte [dayOfWeek], dl
   254                              <1> ;Set ZF to indicate all ok
   255 0000270D 31C0                <1>     xor eax, eax
   256                              <1>     return
    18                              <2> %%_ret:
    19 0000270F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   259                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   260                              <1> ;Input: cl = Year - 1980
   261                              <1> ;Output: al = Number of days in February
   262 00002710 880D(84C40300)      <1>     mov byte [years], cl    ;Save this figure
   263 00002716 F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   264 00002719 51                  <1>     push rcx
   265 0000271A 57                  <1>     push rdi
   266 0000271B B81C000000          <1>     mov eax, 28  ;Usual days in february
   267 00002720 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   268 00002725 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   269 00002728 488D3D57D9FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   270 0000272F AA                  <1>     stosb   ;Store the word in rdi
   271 00002730 5F                  <1>     pop rdi
   272 00002731 59                  <1>     pop rcx
   273                              <1>     return
    18                              <2> %%_ret:
    19 00002732 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   274                              <1> 
   275                              <1> getDirDTwords:
   276                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   277                              <1> ; High word of eax = Date
   278                              <1> ; Low word of eax = Time
   279                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   280                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   281                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   282                              <1> 
   283                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   284                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   285                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   286                              <1> ;Preserves all registers except eax
   287 00002733 53                  <1>     push rbx
   288 00002734 0FB61D(0FC50300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   289 0000273B D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   290 0000273D 89D8                <1>     mov eax, ebx
   291 0000273F 0FB61D(0CC50300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   292 00002746 C1E305              <1>     shl ebx, 5
   293 00002749 09D8                <1>     or eax, ebx
   294 0000274B 0FB61D(0DC50300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   295 00002752 C1E30B              <1>     shl ebx, 11
   296 00002755 09D8                <1>     or eax, ebx
   297 00002757 0FB61D(82C40300)    <1>     movzx ebx, byte [dayOfMonth]
   298 0000275E C1E310              <1>     shl ebx, 16
   299 00002761 09D8                <1>     or eax, ebx
   300 00002763 0FB61D(83C40300)    <1>     movzx ebx, byte [monthOfYear]
   301 0000276A C1E315              <1>     shl ebx, 21
   302 0000276D 09D8                <1>     or eax, ebx
   303 0000276F 0FB61D(84C40300)    <1>     movzx ebx, byte [years]
   304 00002776 C1E319              <1>     shl ebx, 25
   305 00002779 09D8                <1>     or eax, ebx
   306 0000277B 5B                  <1>     pop rbx
   307                              <1>     return
    18                              <2> %%_ret:
    19 0000277C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   308                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   309                              <1> ;Returns edx = time
   310                              <1> ;        eax = date
   311                              <1> ; Formally ax and dx but we clear the upper words
   312 0000277D E8C6FEFFFF          <1>     call readDateTimeRecord
   313 00002782 E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   314 00002787 31D2                <1>     xor edx, edx
   315 00002789 6689C2              <1>     mov dx, ax  ;Save time
   316 0000278C C1E810              <1>     shr eax, 10h    ;Get date into rax
   317                              <1>     return
    18                              <2> %%_ret:
    19 0000278F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    32                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    33                              <1> ;FCB functions.
    34                              <1> ;FCBs may only be generally used for file access FAT 12/16 volumes. 
    35                              <1> ;On FAT 32 volumes things are a bit more restricted.
    36                              <1> 
    37                              <1> ;The following functions ARE currently supported for general FAT 32 files:
    38                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
    39                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
    40                              <1> ;   parseFilename       (I mean, this function is useful anyway)
    41                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    42                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    43                              <1> ;   findNextFileFCB     (ditto the above)
    44                              <1> 
    45                              <1> ;The following functions are NOT currently supported for general FAT 32 files:
    46                              <1> ;   openFCB
    47                              <1> ;   closeFCB
    48                              <1> ;   createFCB
    49                              <1> ;   randomReadFCB
    50                              <1> ;   randomWriteFCB
    51                              <1> ;   randBlockReadFCB
    52                              <1> ;   randBlockWriteFCB
    53                              <1> ;   sequentialReadFCB
    54                              <1> ;   sequentialWriteFCB
    55                              <1> ;An attempt to run these functions on a FAT 32 volume will result in returning 
    56                              <1> ; al = -1 and an extended error code of 05 - Access Denied unless a device
    57                              <1> 
    58                              <1> ;FAT 32 volumes will support all functions for Volume Labels using xFCBs.
    59                              <1> ;Reading and Writing to the Volume label will silently return ok.
    60                              <1> ;Volume labels will be editable by being created/opened/closed.
    61                              <1> ;If the current directory is not the root, Volume Label work will assume the 
    62                              <1> ; root directory always.
    63                              <1> 
    64                              <1> findFirstFileFCB:  ;ah = 11h
    65                              <1> ;Input: rdx -> FCB
    66 00002790 488915(0AC70300)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    67 00002797 4889D6              <1>     mov rsi, rdx
    68 0000279A 803EFF              <1>     cmp byte [rsi], -1
    69 0000279D 7407                <1>     je .notExt1
    70 0000279F 4881C607000000      <1>     add rsi, exFcb.driveNum
    71                              <1> .notExt1:
    72 000027A6 0FB606              <1>     movzx eax, byte [rsi]
    73 000027A9 50                  <1>     push rax    ;Push on stack the drive number
    74 000027AA 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    75 000027B1 E804030000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    76 000027B6 7306                <1>     jnc .fcbOk
    77 000027B8 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    78 000027B9 E91E400000          <1>     jmp fcbErrExit
    79                              <1> .fcbOk:
    80 000027BE 488D3D(12C50300)    <1>     lea rdi, buffer1
    81 000027C5 E8E7E7FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    82 000027CA 7306                <1>     jnc .fileFound
    83 000027CC 5B                  <1>     pop rbx
    84 000027CD E90A400000          <1>     jmp fcbErrExit
    85                              <1> .fileFound:
    86                              <1> ;Now we build an FFBlock internally
    87 000027D2 488D3D(23C60300)    <1>     lea rdi, dosffblock
    88 000027D9 57                  <1>     push rdi
    89 000027DA E8FCE6FFFF          <1>     call setupFFBlock
    90 000027DF 5E                  <1>     pop rsi
    91                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    92 000027E0 488B3D(0AC70300)    <1>     mov rdi, qword [workingFCB]
    93 000027E7 F605(EBC60300)FF    <1>     test byte [extFCBFlag], -1
    94 000027EE 7407                <1>     jz .notExt2
    95 000027F0 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    96                              <1> .notExt2:
    97 000027F7 5B                  <1>     pop rbx ;Get back the drive number in bl
    98 000027F8 85DB                <1>     test ebx, ebx
    99 000027FA 7509                <1>     jnz .notCurrentDrive
   100 000027FC 0FB61D(26C40300)    <1>     movzx ebx, byte [currentDrv]
   101 00002803 FFC3                <1>     inc ebx ;Turn into a 1 based drive number
   102                              <1> .notCurrentDrive:
   103 00002805 AC                  <1>     lodsb   ;Get search drive from FFBlock in al
   104 00002806 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
   105 00002809 B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
   106 0000280E A5                  <1>     movsd
   107 0000280F AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
   108 00002810 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
   109 00002817 488D35(4EC60300)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
   110 0000281E F605(EBC60300)FF    <1>     test byte [extFCBFlag], -1
   111 00002825 7412                <1>     jz .notExt3
   112 00002827 B8FFFFFFFF          <1>     mov eax, -1
   113 0000282C AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
   114 0000282D FFC0                <1>     inc eax ;Make it zero
   115 0000282F AB                  <1>     stosd
   116 00002830 AA                  <1>     stosb   ;Store 5 bytes of zero
   117 00002831 0FB605(ECC60300)    <1>     movzx eax, byte [searchAttr]
   118 00002838 AA                  <1>     stosb   ;Store the search attributes
   119                              <1> .notExt3:
   120 00002839 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
   121 0000283B AA                  <1>     stosb
   122 0000283C B904000000          <1>     mov ecx, fatDirEntry_size/8
   123 00002841 F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
   124 00002844 E9903F0000          <1>     jmp fcbGoodExit
   125                              <1>     
   126                              <1> findNextFileFCB:   ;ah = 12h
   127 00002849 488915(0AC70300)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
   128 00002850 C605(EBC60300)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
   129 00002857 C605(ECC60300)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
   130 0000285E 4889D6              <1>     mov rsi, rdx
   131                              <1> 
   132 00002861 803EFF              <1>     cmp byte [rsi], -1
   133 00002864 7514                <1>     jne .notExt
   134 00002866 FE0D(EBC60300)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
   135 0000286C 4881C606000000      <1>     add rsi, exFcb.attribute
   136 00002873 AC                  <1>     lodsb   ;Get search attr in al
   137 00002874 8805(ECC60300)      <1>     mov byte [searchAttr], al
   138                              <1> .notExt:
   139                              <1>     ;rsi points to drive letter
   140 0000287A 488D3D(23C60300)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   141 00002881 31C0                <1>     xor eax, eax
   142 00002883 AC                  <1>     lodsb   ;Get the FCB drive letter
   143 00002884 50                  <1>     push rax    ;Push drive letter on the stack
   144 00002885 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   145 00002888 AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   146 00002889 B905000000          <1>     mov ecx, 5
   147 0000288E F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   148 00002890 FF35(0CC40300)      <1>     push qword [currentDTA] ;Save original currentDTA
   149 00002896 488D3D(23C60300)    <1>     lea rdi, dosffblock
   150 0000289D 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   151 0000289E 8F05(0CC40300)      <1>     pop qword [currentDTA]
   152 000028A4 E8B0E2FFFF          <1>     call findNextMain
   153 000028A9 8F05(0CC40300)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   154 000028AF 0F831DFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   155 000028B5 488B3D(0AC70300)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   156 000028BC F607FF              <1>     test byte [rdi], -1
   157 000028BF 7407                <1>     jz .notExt2
   158 000028C1 4881C707000000      <1>     add rdi, exFcb.driveNum
   159                              <1> .notExt2:
   160 000028C8 5B                  <1>     pop rbx ;Get the drive letter back into bl
   161 000028C9 881F                <1>     mov byte [rdi], bl
   162 000028CB E90C3F0000          <1>     jmp fcbErrExit  ;And exit bad
   163                              <1> 
   164                              <1> deleteFileFCB:     ;ah = 13h
   165 000028D0 488D3D(12C50300)    <1>     lea rdi, buffer1
   166 000028D7 57                  <1>     push rdi
   167 000028D8 E8DD010000          <1>     call fcbInitRoutine ;Build path and find file to delete
   168 000028DD 5F                  <1>     pop rdi ;Point rdi to the canonised path
   169 000028DE 0F82F83E0000        <1>     jc fcbErrExit
   170 000028E4 E8C8E6FFFF          <1>     call getFilePathNoCanon ;Get the file
   171 000028E9 0F82ED3E0000        <1>     jc fcbErrExit
   172 000028EF E8900E0000          <1>     call outerDeleteMain
   173 000028F4 0F82E23E0000        <1>     jc fcbErrExit
   174 000028FA E9DA3E0000          <1>     jmp fcbGoodExit
   175                              <1> 
   176                              <1> renameFileFCB:     ;ah = 17h
   177                              <1> ;Input: rdx -> User FCB
   178 000028FF 488915(0AC70300)    <1>     mov qword [workingFCB], rdx
   179                              <1>     ;First we get the drive letter 
   180 00002906 4889D6              <1>     mov rsi, rdx
   181 00002909 803EFF              <1>     cmp byte [rsi], -1
   182 0000290C 7507                <1>     jne .notExt
   183 0000290E 4881C607000000      <1>     add rsi, exFcb.driveNum
   184                              <1> .notExt:
   185 00002915 31C0                <1>     xor eax, eax
   186 00002917 AC                  <1>     lodsb
   187 00002918 50                  <1>     push rax    ;Push the drive letter on the stack for now
   188 00002919 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   189 00002920 E895010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   190 00002925 723D                <1>     jc .badPop
   191 00002927 FF35(12C60300)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   192 0000292D 8F05(1AC60300)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   193 00002933 58                  <1>     pop rax ;Get drive letter back
   194 00002934 488D3D(92C50300)    <1>     lea rdi, buffer2
   195 0000293B E84E010000          <1>     call fcbInitName2
   196 00002940 7223                <1>     jc short .bad
   197 00002942 488B05(1AC60300)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   198 00002949 488705(12C60300)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   199 00002950 488905(1AC60300)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   200 00002957 E82B0A0000          <1>     call renameMain
   201 0000295C 0F83773E0000        <1>     jnc fcbGoodExit
   202 00002962 EB01                <1>     jmp short .bad
   203                              <1> .badPop:
   204 00002964 5B                  <1>     pop rbx ;Pop drive number off stack
   205                              <1> .bad:
   206 00002965 E9723E0000          <1>     jmp fcbErrExit
   207                              <1> 
   208                              <1> getFileSizeFCB:    ;ah = 23h
   209                              <1> ;This function which can be used to test existance of file without opening it 
   210                              <1> ;Input: rdx -> FCB
   211 0000296A 488915(0AC70300)    <1>     mov qword [workingFCB], rdx
   212 00002971 488D3D(12C50300)    <1>     lea rdi, buffer1
   213 00002978 57                  <1>     push rdi
   214 00002979 E83C010000          <1>     call fcbInitRoutine
   215 0000297E 5F                  <1>     pop rdi
   216 0000297F 0F82573E0000        <1>     jc fcbErrExit
   217 00002985 E827E6FFFF          <1>     call getFilePathNoCanon
   218 0000298A 0F824C3E0000        <1>     jc fcbErrExit
   219 00002990 8B05(6AC60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   220                              <1>     ;Now we gotta set up FCB randRecrd Field
   221 00002996 488B35(0AC70300)    <1>     mov rsi, qword [workingFCB]
   222 0000299D 803EFF              <1>     cmp byte [rsi], -1
   223 000029A0 7507                <1>     jne .notExtended
   224 000029A2 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   225                              <1> .notExtended:
   226                              <1> ;rsi points to the drive number now
   227 000029A9 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   228 000029AD F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   229 000029AF 85D2                <1>     test edx, edx
   230 000029B1 7402                <1>     jz .noRemainder
   231 000029B3 FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   232                              <1> .noRemainder:
   233 000029B5 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   234 000029B8 E91C3E0000          <1>     jmp fcbGoodExit
   235                              <1> 
   236                              <1> setDTA:            ;ah = 1Ah, Always can be used
   237                              <1> ;Called with:
   238                              <1> ;   rdx = Pointer to the new default DTA
   239 000029BD 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   240 000029C4 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   241 000029C8 488915(0CC40300)    <1>     mov qword [currentDTA], rdx
   242 000029CF C3                  <1>     ret
   243                              <1> 
   244                              <1> getDTA:            ;ah = 2Fh, Always can be used
   245 000029D0 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   246 000029D7 488B1D(0CC40300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   247 000029DE 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   248                              <1>     return
    18                              <2> %%_ret:
    19 000029E2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   249                              <1>     
   250                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   251                              <1> ;Input:
   252                              <1> ;rsi points to a command line to parse
   253                              <1> ;rdi points to a future unopened FCB
   254                              <1> ;al = parsing control bits. 
   255                              <1> ; al[0] = If set, leading filename separators are scanned off
   256                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   257                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   258                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   259                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   260                              <1> ;        al = 1 => Wildcards found
   261                              <1> ;        al = -1 => Drive specifier invalid
   262                              <1> ;rsi -> to the first char past the parsed filename
   263                              <1> ;rdi -> First byte of the FCB 
   264                              <1> 
   265 000029E3 E872010000          <1>     call parseNameToFCB
   266 000029E8 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   267 000029E9 E85F390000          <1>     call getUserRegs
   268 000029EE 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   269                              <1>     return  ;al now contains dl, the signature, special unique return type
    18                              <2> %%_ret:
    19 000029F1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   270                              <1> 
   271                              <1> ;=================================================================
   272                              <1> ;=================================================================
   273                              <1> ;These functions CHECK the Volume type and fail if the volume is 
   274                              <1> ; not compatible.
   275                              <1> ;=================================================================
   276                              <1> ;=================================================================
   277                              <1> openFileFCB:       ;ah = 0Fh
   278 000029F2 B805000000          <1>     mov eax, errAccDen
   279 000029F7 E9E03D0000          <1>     jmp fcbErrExit
   280                              <1> closeFileFCB:      ;ah = 10h
   281 000029FC B805000000          <1>     mov eax, errAccDen
   282 00002A01 E9D63D0000          <1>     jmp fcbErrExit
   283                              <1> sequentialReadFCB: ;ah = 14h
   284 00002A06 B805000000          <1>     mov eax, errAccDen
   285 00002A0B E9CC3D0000          <1>     jmp fcbErrExit
   286                              <1> sequentialWriteFCB:;ah = 15h
   287 00002A10 B805000000          <1>     mov eax, errAccDen
   288 00002A15 E9C23D0000          <1>     jmp fcbErrExit
   289                              <1> createFileFCB:     ;ah = 16h
   290 00002A1A B805000000          <1>     mov eax, errAccDen
   291 00002A1F E9B83D0000          <1>     jmp fcbErrExit
   292                              <1> randomReadFCB:     ;ah = 21h
   293 00002A24 B805000000          <1>     mov eax, errAccDen
   294 00002A29 E9AE3D0000          <1>     jmp fcbErrExit
   295                              <1> randomWriteFCB:    ;ah = 22h
   296 00002A2E B805000000          <1>     mov eax, errAccDen
   297 00002A33 E9A43D0000          <1>     jmp fcbErrExit
   298                              <1> setRelRecordFCB:   ;ah = 24h
   299 00002A38 B805000000          <1>     mov eax, errAccDen
   300 00002A3D E99A3D0000          <1>     jmp fcbErrExit
   301                              <1> randBlockReadFCB:  ;ah = 27h
   302 00002A42 B805000000          <1>     mov eax, errAccDen
   303 00002A47 E9903D0000          <1>     jmp fcbErrExit
   304                              <1> randBlockWriteFCB: ;ah = 28h
   305 00002A4C B805000000          <1>     mov eax, errAccDen
   306 00002A51 E9863D0000          <1>     jmp fcbErrExit
   307                              <1> 
   308                              <1> 
   309                              <1> ;--------------------------------
   310                              <1> ;  Common FCB related Routines  :
   311                              <1> ;--------------------------------
   312                              <1> fcbCheckDriveType:
   313                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   314                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   315                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   316                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   317                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   318                              <1> ;If a net CDS, automatic fail (for now).
   319 00002A56 C605(E9C60300)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   320 00002A5D 51                  <1>     push rcx
   321 00002A5E 57                  <1>     push rdi
   322 00002A5F 55                  <1>     push rbp
   323 00002A60 9C                  <1>     pushfq
   324 00002A61 F605(59C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   325 00002A68 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   326 00002A6A E871380000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   327 00002A6F 7218                <1>     jc .exit
   328                              <1>     ;rdi has cds ptr now
   329 00002A71 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   330 00002A75 E842DDFFFF          <1>     call getFATtype
   331 00002A7A 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   332 00002A80 7707                <1>     ja .exit
   333                              <1> .okToGo:
   334 00002A82 C605(E9C60300)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   335                              <1> .exit:
   336 00002A89 9D                  <1>     popfq
   337 00002A8A 5D                  <1>     pop rbp
   338 00002A8B 5F                  <1>     pop rdi
   339 00002A8C 59                  <1>     pop rcx
   340                              <1>     return
    18                              <2> %%_ret:
    19 00002A8D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   341                              <1> fcbInitName2:
   342                              <1> ;Must be called after fcbInitRoutine has been run once
   343                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   344                              <1> ;       rdx -> UserFCB
   345                              <1> ;       eax[0] = Drive number (0 based)
   346 00002A8E 55                  <1>     push rbp
   347 00002A8F 4889E5              <1>     mov rbp, rsp
   348 00002A92 4881EC0F000000      <1>     sub rsp, 15
   349 00002A99 57                  <1>     push rdi
   350 00002A9A 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   351 00002A9E 4889D6              <1>     mov rsi, rdx
   352 00002AA1 F605(EBC60300)FF    <1>     test byte [extFCBFlag], -1
   353 00002AA8 7407                <1>     jz .notExtended
   354 00002AAA 4881C607000000      <1>     add rsi, exFcb.driveNum
   355                              <1> .notExtended:
   356                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   357 00002AB1 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   358 00002AB8 EB36                <1>     jmp short fcbInitRoutine.rename2EP
   359                              <1> fcbInitRoutine:
   360                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   361                              <1> ;Input: rdx -> User FCB
   362                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   363 00002ABA 55                  <1>     push rbp
   364 00002ABB 4889E5              <1>     mov rbp, rsp
   365 00002ABE 4881EC0F000000      <1>     sub rsp, 15    ;Make 15 char space on stack
   366                              <1>     ;This space is used to store X:FILENAME.EXT,0
   367 00002AC5 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   368 00002AC6 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   369 00002ACA C605(EBC60300)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   370 00002AD1 C605(ECC60300)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   371 00002AD8 E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   372 00002ADD 7410                <1>     jz .notExtended
   373 00002ADF C605(EBC60300)FF    <1>     mov byte [extFCBFlag], -1
   374 00002AE6 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   375 00002AE9 8805(ECC60300)      <1>     mov byte [searchAttr], al
   376                              <1> .notExtended:
   377 00002AEF AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   378                              <1> .rename2EP:
   379 00002AF0 E8E5380000          <1>     call getCDS ;Get the CDS (preserves rdi)
   380 00002AF5 723F                <1>     jc .badDisk
   381 00002AF7 E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   382 00002AFC 488D1D4ED7FFFF      <1>     lea rbx, asciiCharProperties
   383 00002B03 B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   384 00002B08 56                  <1>     push rsi    ;rsi -> fcb.filename
   385                              <1> .nameCharCheck:
   386 00002B09 AC                  <1>     lodsb   ;Get the char in al
   387 00002B0A D7                  <1>     xlatb   ;Get the char signature in al
   388 00002B0B A808                <1>     test al, 8
   389 00002B0D 7427                <1>     jz .badDisk
   390 00002B0F FFC9                <1>     dec ecx
   391 00002B11 75F6                <1>     jnz .nameCharCheck
   392 00002B13 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   393 00002B14 4889FB              <1>     mov rbx, rdi    ;Save ptr to stackbuffer + 2 (past X:)
   394 00002B17 E87FE3FFFF          <1>     call FCBToAsciiz
   395 00002B1C 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   396 00002B1D 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0?
   397 00002B20 7414                <1>     je .badDisk
   398 00002B22 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   399 00002B26 55                  <1>     push rbp
   400 00002B27 E845E4FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename
   401 00002B2C 5D                  <1>     pop rbp
   402 00002B2D 7207                <1>     jc .badDisk
   403 00002B2F E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   404 00002B34 EB03                <1>     jmp short .jiggleStack  ;Skip the error
   405                              <1> .badDisk:
   406 00002B36 B003                <1>     mov al, errPnf  ;DOS does this... so will I
   407 00002B38 F9                  <1>     stc
   408                              <1> .jiggleStack:
   409 00002B39 4889EC              <1>     mov rsp, rbp
   410 00002B3C 5D                  <1>     pop rbp
   411                              <1> .exit:
   412                              <1>     return
    18                              <2> %%_ret:
    19 00002B3D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   413                              <1> 
   414                              <1> storeZeroBasedDriveNumber:
   415                              <1> ;Input: al => 0 based drive letter
   416                              <1> ;       rdi -> Points to buffer to store the X: in
   417 00002B3E FEC0                <1>     inc al
   418                              <1> storeOneBasedDriveNumber:
   419                              <1> ;Input: al => 1 based drive letter
   420                              <1> ;       rdi -> Points to buffer to store the X: in
   421 00002B40 0440                <1>     add al, "@"
   422 00002B42 B43A                <1>     mov ah, ":"
   423 00002B44 66AB                <1>     stosw
   424                              <1>     return
    18                              <2> %%_ret:
    19 00002B46 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   425                              <1> 
   426                              <1> isFCBExtended:
   427                              <1> ;Input: rdx = FCB ptr
   428                              <1> ;Output: rsi -> Drive letter of FCB
   429                              <1> ;        rdx -> FCB first byte
   430                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   431 00002B47 4889D6              <1>     mov rsi, rdx
   432 00002B4A 803EFF              <1>     cmp byte [rsi], -1
   433 00002B4D 7507                <1>     jne .notExtended
   434 00002B4F 4881C607000000      <1>     add rsi, exFcb.driveNum
   435                              <1> .notExtended:
   436 00002B56 4839F2              <1>     cmp rdx, rsi
   437                              <1>     return
    18                              <2> %%_ret:
    19 00002B59 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   438                              <1> 
   439                              <1> parseNameToFCB:
   440                              <1> ;rsi points to a command line to parse
   441                              <1> ;rdi points to a future unopened FCB
   442                              <1> ;al = parsing control bits. 
   443                              <1> ; al[0] = If set, leading filename separators are scanned off
   444                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   445                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   446                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   447                              <1> ;
   448                              <1> ;Separators include : . ; , = + TAB SPACE
   449                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   450                              <1> 
   451 00002B5A C605(81C40300)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   452 00002B61 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   453 00002B63 A802                <1>     test al, 2  ;Set drive letter>
   454 00002B65 7402                <1>     jz .skipDriveLetter
   455 00002B67 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   456                              <1> .skipDriveLetter:
   457 00002B69 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   458 00002B6C B908000000          <1>     mov ecx, 8  ;Copy Filename
   459 00002B71 A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   460 00002B73 93                  <1>     xchg eax, ebx
   461 00002B74 B020                <1>     mov al, " " ;Clear the field
   462 00002B76 7405                <1>     jz .clearFilenameField
   463 00002B78 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   464 00002B7B 31C9                <1>     xor ecx, ecx
   465                              <1> .clearFilenameField:
   466 00002B7D F3AA                <1>     rep stosb
   467 00002B7F B903000000          <1>     mov ecx, 3
   468 00002B84 F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   469 00002B87 7405                <1>     jz .clearExtensionField
   470 00002B89 4801CF              <1>     add rdi, rcx
   471 00002B8C 31C9                <1>     xor ecx, ecx
   472                              <1> .clearExtensionField:
   473 00002B8E F3AA                <1>     rep stosb
   474 00002B90 91                  <1>     xchg eax, ecx
   475 00002B91 AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   476 00002B92 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   477 00002B99 F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   478 00002B9C 740F                <1>     jz .dontScanOff
   479 00002B9E E8243A0000          <1>     call skipSpacesAndTabs
   480 00002BA3 E82B3A0000          <1>     call isCharDelimType
   481 00002BA8 7508                <1>     jnz .skipIfDelim
   482 00002BAA 48FFC6              <1>     inc rsi
   483                              <1> .dontScanOff:
   484 00002BAD E8153A0000          <1>     call skipSpacesAndTabs  ;Skip a char
   485                              <1> .skipIfDelim:
   486 00002BB2 E8BB380000          <1>     call uppercaseCharAtPtr 
   487 00002BB7 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   488 00002BB9 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   489 00002BBC 7519                <1>     jne .skipSettingDriveLetter
   490 00002BBE 48FFC6              <1>     inc rsi ;Goto next char
   491 00002BC1 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   492 00002BC3 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   493 00002BC5 50                  <1>     push rax    ;Save the 1 based drive letter
   494 00002BC6 E8A6370000          <1>     call setDrive   ;Verifies if this drive letter is valid
   495 00002BCB 58                  <1>     pop rax
   496 00002BCC 7302                <1>     jnc .validDriveLetter
   497                              <1> .invalidDriveLetter:
   498 00002BCE B2FF                <1>     mov dl, -1
   499                              <1> .validDriveLetter:
   500 00002BD0 AA                  <1>     stosb
   501 00002BD1 48FFC6              <1>     inc rsi ;Align pointers...
   502 00002BD4 48FFCF              <1>     dec rdi 
   503                              <1> .skipSettingDriveLetter:
   504 00002BD7 48FFCE              <1>     dec rsi
   505 00002BDA 48FFC7              <1>     inc rdi
   506                              <1>     
   507                              <1> getFCBFilename:
   508                              <1> ;Input: rsi points to first char of filename
   509                              <1> ;       rdi points to storage buffer for filename
   510                              <1> ;       dl contains the signature if drive invalid
   511                              <1> ;Output:
   512                              <1> ;       Fields filled
   513                              <1> ;       al = Return signature
   514 00002BDD B908000000          <1>     mov ecx, 8
   515 00002BE2 E815000000          <1>     call getFCBNameField
   516 00002BE7 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   517 00002BEA 750D                <1>     jne .noExt
   518 00002BEC B903000000          <1>     mov ecx, 3
   519 00002BF1 48FFC6              <1>     inc rsi ;Skip this char
   520 00002BF4 E814000000          <1>     call forceFCBNameField
   521                              <1> .noExt:
   522 00002BF9 88D0                <1>     mov al, dl  ;Store the return signature
   523                              <1>     return
    18                              <2> %%_ret:
    19 00002BFB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> getFCBNameField:
   526                              <1> ;Checks if the field is appropriate before copying it
   527 00002BFC E871380000          <1>     call uppercaseCharAtPtr
   528 00002C01 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   529 00002C03 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   530 00002C06 48FFCE              <1>     dec rsi ;Point to previous char
   531                              <1>     return
    18                              <2> %%_ret:
    19 00002C09 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   532                              <1> .okName:
   533 00002C0A 48FFCE              <1>     dec rsi ;Go back now a char
   534                              <1> forceFCBNameField:
   535                              <1> ;Forcefully copies the name from rsi to rdi
   536 00002C0D E860380000          <1>     call uppercaseCharAtPtr
   537 00002C12 7226                <1>     jc .terminatingSpace
   538 00002C14 750D                <1>     jnz .notSep
   539 00002C16 F605(81C40300)FF    <1>     test byte [fcbSpaceOk], -1
   540 00002C1D 741B                <1>     jz .terminatingSpace
   541 00002C1F 3C20                <1>     cmp al, " "
   542 00002C21 7517                <1>     jne .terminatingSpace
   543                              <1> .notSep:
   544 00002C23 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   545 00002C26 FFC9                <1>     dec ecx
   546 00002C28 3C2A                <1>     cmp al, "*" ;Big wildcard?
   547 00002C2A 7504                <1>     jne .notBigWildcard
   548 00002C2C B03F                <1>     mov al, "?"
   549 00002C2E F3AA                <1>     rep stosb
   550                              <1> .notBigWildcard:
   551 00002C30 AA                  <1>     stosb   ;Stores the uppercased char
   552 00002C31 3C3F                <1>     cmp al, "?"
   553 00002C33 75D8                <1>     jne forceFCBNameField
   554 00002C35 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   555 00002C38 EBD3                <1>     jmp short forceFCBNameField
   556                              <1> .terminatingSpace:
   557 00002C3A B020                <1>     mov al, " "
   558 00002C3C AA                  <1>     stosb
   559 00002C3D 48FFCE              <1>     dec rsi ;Point to this trailing space
   560                              <1>     return
    18                              <2> %%_ret:
    19 00002C40 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    33                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    34                              <1> ;-----------------------------------:
    35                              <1> ;    File Handle Kernel routines    :
    36                              <1> ;-----------------------------------:
    37                              <1> 
    38                              <1> createFileHdl:     ;ah = 3Ch, handle function
    39                              <1> ;Input: cx = File attributes (same as search attributes for find first)
    40                              <1> ;       rdx = Ptr to ASCIZ filename to create
    41                              <1> ;Output: CF=CY => ax = File handle
    42                              <1> ;        CF=NC => al = Error code
    43 00002C41 51                  <1>     push rcx    ;Save file attributes on stack
    44 00002C42 488D0DE20C0000      <1>     lea rcx, createMain
    45 00002C49 C605(ECC60300)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive w/ directory
    46 00002C50 EB1D                <1>     jmp short openFileHdl.openCommon
    47                              <1> openFileHdl:       ;ah = 3Dh, handle function
    48                              <1> ;Input: al = Open mode, to open file with
    49                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    50                              <1> ;If called from 5D00h, cl = File attributes too
    51                              <1> ;Output: CF=CY => ax = File handle
    52                              <1> ;        CF=NC => al = Error code
    53 00002C52 BB16000000          <1>     mov ebx, dirInclusive
    54 00002C57 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
    55 00002C5E 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    56 00002C61 880D(ECC60300)      <1>     mov byte [searchAttr], cl
    57 00002C67 488D0DDA0B0000      <1>     lea rcx, openMain  
    58 00002C6E 50                  <1>     push rax    ;Save open mode on stack
    59                              <1> .openCommon:
    60 00002C6F 4889D6              <1>     mov rsi, rdx
    61 00002C72 E898380000          <1>     call checkPathspecOK
    62 00002C77 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    63                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    64 00002C79 58                  <1>     pop rax
    65 00002C7A B803000000          <1>     mov eax, errPnf
    66 00002C7F E9783B0000          <1>     jmp extErrExit
    67                              <1> .pathOk:
    68 00002C84 E8283B0000          <1>     call dosCrit1Enter
    69 00002C89 E820180000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    70 00002C8E E8283B0000          <1>     call dosCrit1Exit
    71 00002C93 0F82AF000000        <1>     jc .exitBad
    72                              <1>     ;Now save variables
    73 00002C99 E848170000          <1>     call setCurrentSFT
    74 00002C9E 66891D(2AC70300)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    75 00002CA5 E8B6180000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    76 00002CAA 0F8298000000        <1>     jc .exitBad
    77 00002CB0 66891D(2CC70300)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    78 00002CB7 48893D(1AC70300)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    79 00002CBE 0FB71D(2AC70300)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    80 00002CC5 881F                <1>     mov byte [rdi], bl  ;And open the file
    81                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    82 00002CC7 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    83 00002CCA 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
    84 00002CD1 51                  <1>     push rcx    ;Save the procedure to call on stack
    85 00002CD2 E8E5E2FFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    86 00002CD7 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    87 00002CD8 488D05690B0000      <1>     lea rax, openMain   ;Get EA for open procedure
    88 00002CDF 488B35(22C70300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    89 00002CE6 7319                <1>     jnc .proceedCall
    90                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    91                              <1> ;                              For Create New, Bad but handled later.
    92                              <1> ;If CF=CY => Path doesnt all exist:
    93                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    94                              <1> ;Now we check if we are creating or opening.
    95 00002CE8 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    96 00002CEB 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    97 00002CED F605(F5C60300)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    98 00002CF4 750B                <1>     jnz .proceedCall    ;If so, proceed.
    99                              <1> .badPathspec:
   100 00002CF6 58                  <1>     pop rax
   101 00002CF7 B802000000          <1>     mov eax, errFnf
   102 00002CFC E957000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
   103                              <1> .proceedCall:
   104                              <1> ;If the pathspec exists, recall that for create, we truncate.
   105 00002D01 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
   106 00002D03 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
   107 00002D06 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
   108 00002D07 750B                <1>     jne .callProc   ;Jump if we are creating
   109                              <1>     ;al means openmode here
   110 00002D09 A880                <1>     test al, 80h    ;No Inherit bit set?
   111 00002D0B 7407                <1>     jz .callProc
   112 00002D0D 247F                <1>     and al, 7Fh     ;Clear this bit
   113 00002D0F B900100000          <1>     mov ecx, devNoInherit
   114                              <1> .callProc:
   115 00002D14 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
   116 00002D1A 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
   117 00002D20 51                  <1>     push rcx    ;Save the device word 
   118 00002D21 FFD3                <1>     call rbx    ;Enter with open mode in 
   119 00002D23 59                  <1>     pop rcx
   120 00002D24 488B35(22C70300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
   121 00002D2B 722B                <1>     jc .exitBad2
   122 00002D2D 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
   123 00002D32 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   124 00002D36 0FB705(2CC70300)    <1>     movzx eax, word [currentHdl]
   125 00002D3D FF15(14C10300)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
   126 00002D43 E9A63A0000          <1>     jmp extGoodExit ;Save ax and return OK
   127                              <1> .exitBad:
   128 00002D48 FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
   129 00002D49 5B                  <1>     pop rbx ;Pop the word from the stack
   130 00002D4A 66C705(2AC70300)FF- <1>     mov word [currentNdx], -1
   130 00002D52 FF                  <1>
   131 00002D53 E9A43A0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   132                              <1> .exitBad2:
   133                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   134 00002D58 488B35(1AC70300)    <1>     mov rsi, qword [curHdlPtr]
   135 00002D5F C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   136 00002D62 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
   137 00002D69 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   138 00002D6E 66C705(2AC70300)FF- <1>     mov word [currentNdx], -1
   138 00002D76 FF                  <1>
   139 00002D77 E9803A0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   140                              <1> 
   141                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   142                              <1> ;Input: bx = file handle to close
   143 00002D7C E8F5170000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   144 00002D81 0F82753A0000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   145 00002D87 E85A160000          <1>     call setCurrentSFT  ;Set this as the current SFT
   146                              <1>     ;Check count to see if we need to check share mode
   147 00002D8C 31C0                <1>     xor eax, eax    ;Preset ax to 0
   148 00002D8E 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared, no need for share check
   149 00002D93 7406                <1>     je .skipShareCheck
   150                              <1>     ;Now check sharing mode
   151 00002D95 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   152 00002D99 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   153                              <1> .skipShareCheck:
   154 00002D9B 50                  <1>     push rax    ;Save the share mode on stack
   155 00002D9C E88C0E0000          <1>     call closeMain  ;Call close main!
   156 00002DA1 58                  <1>     pop rax 
   157 00002DA2 0F82543A0000        <1>     jc extErrExit   ;If an error, exit through error exit
   158 00002DA8 3C70                <1>     cmp al, netFCBShare ;Do NetFCB check (only if file opened more than once)
   159 00002DAA 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   160 00002DAC E891170000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   161 00002DB1 C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   162                              <1> .exitOk:
   163 00002DB4 31C0                <1>     xor eax, eax    ;Return value
   164 00002DB6 E9333A0000          <1>     jmp extGoodExit
   165                              <1> 
   166                              <1> readFileHdl:       ;ah = 3Fh, handle function
   167 00002DBB 488D35F20E0000      <1>     lea rsi, readBytes
   168                              <1> .common:
   169 00002DC2 E8AF170000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   170 00002DC7 0F822F3A0000        <1>     jc extErrExit   ;Error code in al and exit
   171 00002DCD E814160000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   172 00002DD2 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   173 00002DD4 FF35(0CC40300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   174 00002DDA 488915(0CC40300)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   175 00002DE1 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   176 00002DE3 8F05(0CC40300)      <1>     pop qword [currentDTA]
   177 00002DE9 0F820D3A0000        <1>     jc extErrExit   ;Error code in al and exit
   178 00002DEF 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   179 00002DF1 E9EF390000          <1>     jmp extGoodExit2    ;and exit!
   180                              <1> 
   181                              <1> writeFileHdl:      ;ah = 40h, handle function
   182 00002DF6 488D35F3110000      <1>     lea rsi, writeBytes
   183 00002DFD E9C0FFFFFF          <1>     jmp readFileHdl.common
   184                              <1> 
   185                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   186                              <1> ;Here don't allow malformed chars unless it is a network CDS
   187 00002E02 BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   188 00002E07 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   189 00002E0E 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   190 00002E11 880D(ECC60300)      <1>     mov byte [searchAttr], cl
   191 00002E17 4889D6              <1>     mov rsi, rdx
   192 00002E1A E8F0360000          <1>     call checkPathspecOK
   193 00002E1F 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   194 00002E21 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   195                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   196 00002E23 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   197 00002E2A 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   198                              <1> .badPath:
   199 00002E2C B803000000          <1>     mov eax, errPnf
   200 00002E31 E9C6390000          <1>     jmp extErrExit
   201                              <1> .pathOk:
   202 00002E36 488D3D(12C50300)    <1>     lea rdi, buffer1
   203 00002E3D 52                  <1>     push rdx
   204 00002E3E E879E1FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   205 00002E43 5A                  <1>     pop rdx
   206 00002E44 0F82B2390000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   207                              <1>     ;In the case of a wildcard, recall this will return the first file
   208 00002E4A 803D(F4C60300)FF    <1>     cmp byte [fileExist], -1
   209 00002E51 0F85A5390000        <1>     jnz extErrExit
   210 00002E57 E828090000          <1>     call outerDeleteMain
   211 00002E5C 0F829A390000        <1>     jc extErrExit
   212 00002E62 E987390000          <1>     jmp extGoodExit
   213                              <1> 
   214                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   215                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   216 00002E67 E80A170000          <1>     call getSFTPtr
   217 00002E6C 0F828A390000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   218 00002E72 3C03                <1>     cmp al, 3
   219 00002E74 720A                <1>     jb .validFunction
   220 00002E76 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   221 00002E7B E97C390000          <1>     jmp extErrExit
   222                              <1> .validFunction:
   223 00002E80 3C01                <1>     cmp al, 1
   224 00002E82 7718                <1>     ja .seekend
   225 00002E84 7203                <1>     jb .seekset
   226                              <1> ;Here we are at seekcur, seek from current (signed)
   227 00002E86 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   228                              <1> .seekset:
   229                              <1> ;Seek from the start (unsigned)
   230 00002E89 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   231 00002E8C E8BC340000          <1>     call getUserRegs    ;Get user regs in rsi
   232 00002E91 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   233                              <1> .seekExit:
   234 00002E94 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   235 00002E97 E949390000          <1>     jmp extGoodExit2    ;Return OK in eax 
   236                              <1> .seekend:
   237                              <1> ;Here we are at seekend, seek from end (signed)
   238 00002E9C 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   239 00002EA2 7505                <1>     jnz .netCheck
   240                              <1> .proceedDisk:
   241 00002EA4 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   242 00002EA7 EBE0                <1>     jmp short .seekset
   243                              <1> .netCheck:
   244 00002EA9 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   245 00002EAF 75F3                <1>     jnz .proceedDisk
   246 00002EB1 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   247                              <1>     ;Check it's share mode
   248 00002EB5 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   249 00002EBA 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   250 00002EBF 7407                <1>     je .netSeek
   251 00002EC1 3D30000000          <1>     cmp eax, denyReadShare
   252 00002EC6 75DC                <1>     jne .proceedDisk
   253                              <1> .netSeek:
   254 00002EC8 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   255 00002ECD CD4F                <1>     int 4Fh
   256 00002ECF 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   257 00002ED1 E926390000          <1>     jmp extErrExit
   258                              <1> 
   259                              <1> 
   260                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   261 00002ED6 3C01                <1>     cmp al, 1
   262 00002ED8 761F                <1>     jbe .subFuncOk
   263 00002EDA B801000000          <1>     mov eax, errInvFnc
   264                              <1> .chmodError:
   265                              <1> ;Call with ax = errorcode
   266 00002EDF C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   267 00002EE6 C605(03C40300)07    <1>     mov byte [errorClass], eClsAppFlt
   268 00002EED C605(02C40300)07    <1>     mov byte [errorAction], eActRetUsr
   269 00002EF4 E903390000          <1>     jmp extErrExit
   270                              <1> .subFuncOk:
   271 00002EF9 4889D6              <1>     mov rsi, rdx
   272 00002EFC 89C3                <1>     mov ebx, eax    ;Store function code in bl
   273 00002EFE 53                  <1>     push rbx
   274 00002EFF 51                  <1>     push rcx
   275 00002F00 E80A360000          <1>     call checkPathspecOK
   276 00002F05 7309                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   277                              <1> .badPath:
   278 00002F07 59                  <1>     pop rcx
   279 00002F08 5B                  <1>     pop rbx
   280 00002F09 B803000000          <1>     mov eax, errPnf
   281 00002F0E EBCF                <1>     jmp short .chmodError
   282                              <1> .pathOk:
   283 00002F10 E8E0360000          <1>     call checkPathNet 
   284 00002F15 74F0                <1>     jz .badPath ;Or Net paths
   285 00002F17 E885360000          <1>     call scanPathWC
   286 00002F1C 72E9                <1>     jc .badPath ;Dont allow wildcards
   287 00002F1E 488D3D(12C50300)    <1>     lea rdi, buffer1
   288 00002F25 52                  <1>     push rdx
   289 00002F26 C605(ECC60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   290 00002F2D E88AE0FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   291 00002F32 5A                  <1>     pop rdx
   292 00002F33 59                  <1>     pop rcx
   293 00002F34 5B                  <1>     pop rbx
   294 00002F35 0F82C1380000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   295                              <1>     ;In the case of a wildcard, recall this will return the first file
   296 00002F3B 803D(F4C60300)FF    <1>     cmp byte [fileExist], -1
   297 00002F42 759B                <1>     jnz .chmodError
   298                              <1> 
   299 00002F44 E897330000          <1>     call testCDSNet
   300 00002F49 730C                <1>     jnc .notNet
   301 00002F4B 750A                <1>     jnz .notNet ;This type of net ok
   302 00002F4D B805000000          <1>     mov eax, errAccDen
   303 00002F52 E9A5380000          <1>     jmp extErrExit
   304                              <1> .notNet:
   305 00002F57 84DB                <1>     test bl, bl
   306 00002F59 7526                <1>     jnz .setAttribs
   307                              <1>     ;Get attribs here
   308 00002F5B 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   309 00002F61 7412                <1>     jz .getDiskAttribs
   310 00002F63 B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   311 00002F68 CD4F                <1>     int 4Fh
   312 00002F6A 0F828C380000        <1>     jc extErrExit
   313 00002F70 E979380000          <1>     jmp extGoodExit
   314                              <1> .getDiskAttribs:
   315 00002F75 0FB605(59C60300)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   316 00002F7C E96D380000          <1>     jmp extGoodExit
   317                              <1> 
   318                              <1> .setAttribs:
   319                              <1>     ;Set attribs here
   320 00002F81 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   321 00002F87 7417                <1>     jz .setDiskAttribs
   322 00002F89 0FB7C9              <1>     movzx ecx, cx
   323 00002F8C 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   324 00002F8D B80E110000          <1>     mov eax, 110Eh
   325 00002F92 CD4F                <1>     int 4Fh
   326 00002F94 59                  <1>     pop rcx
   327 00002F95 0F8261380000        <1>     jc extErrExit
   328 00002F9B E94E380000          <1>     jmp extGoodExit
   329                              <1> .setDiskAttribs:
   330 00002FA0 E86B070000          <1>     call checkNoOpenHandlesForShareAction
   331 00002FA5 730A                <1>     jnc .okToSet
   332 00002FA7 B820000000          <1>     mov eax, errShrVio
   333 00002FAC E94B380000          <1>     jmp extErrExit
   334                              <1> .okToSet:
   335 00002FB1 E813EBFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   336 00002FB6 0F8240380000        <1>     jc extErrExit
   337 00002FBC F6C118              <1>     test cl, dirVolumeID | dirDirectory
   338 00002FBF 740A                <1>     jz .set
   339 00002FC1 B805000000          <1>     mov eax, errAccDen
   340 00002FC6 E931380000          <1>     jmp extErrExit
   341                              <1> .set:
   342 00002FCB 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   343 00002FCE 80E518              <1>     and ch, (dirVolumeID | dirDirectory)    ;Keep these two bits
   344 00002FD1 08E9                <1>     or cl, ch
   345 00002FD3 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   346 00002FD6 E874D5FFFF          <1>     call writeThroughBuffers
   347 00002FDB 7207                <1>     jc .setError
   348 00002FDD 31C0                <1>     xor eax, eax
   349 00002FDF E90A380000          <1>     jmp extGoodExit
   350                              <1> .setError:
   351 00002FE4 E844D5FFFF          <1>     call cancelWriteThroughBuffers
   352 00002FE9 E90E380000          <1>     jmp extErrExit
   353                              <1> 
   354                              <1> duplicateHandle:   ;ah = 45h, handle function
   355                              <1> ;Input: bx = Handle to duplicate
   356                              <1> ;Output: If ok then ax = New handle
   357 00002FEE 53                  <1>     push rbx
   358 00002FEF E86C150000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT
   359 00002FF4 5B                  <1>     pop rbx
   360 00002FF5 0F8201380000        <1>     jc extErrExit   ;Exit if no space
   361 00002FFB 4889FE              <1>     mov rsi, rdi    ;Points rsi to the free space
   362                              <1> .duplicateCommon:
   363 00002FFE E83F150000          <1>     call getJFTPtr  ;Get a pointer to the JFT entry in rdi for bx
   364 00003003 4887F7              <1>     xchg rsi, rdi
   365 00003006 AC                  <1>     lodsb   ;Move over the SFT ndx from the old to the new position
   366 00003007 AA                  <1>     stosb
   367 00003008 48FFCE              <1>     dec rsi
   368 0000300B 48FFCF              <1>     dec rdi
   369                              <1>     ;rdi now points to new position
   370                              <1>     ;rsi points to old position
   371                              <1>     ;al has SFT ndx
   372 0000300E 4889FE              <1>     mov rsi, rdi    ;Move rsi to point to the new position jft position
   373 00003011 0FB6D8              <1>     movzx ebx, al   ;Move SFTndx into ebx
   374 00003014 E85D150000          <1>     call getSFTPtr    ;Get the pointer to the SFT in rdi
   375 00003019 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   376 0000301C 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   377 00003022 7505                <1>     jnz .netFile
   378 00003024 E8F30B0000          <1>     call openDriverWrapper
   379                              <1> .netFile:
   380                              <1>     ;Now we must return in ax the entry in the JFT 
   381 00003029 488B3D(14C40300)    <1>     mov rdi, qword [currentPSP]
   382 00003030 488D7F2A            <1>     lea rdi, qword [rdi + psp.jobFileTbl]   ;Point to head of table
   383 00003034 4829FE              <1>     sub rsi, rdi    ;Get the difference of the two in si
   384 00003037 89F0                <1>     mov eax, esi    ;Get the difference as the return code
   385 00003039 E9B0370000          <1>     jmp extGoodExit
   386                              <1> 
   387                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   388                              <1> ;Input: bx = Handle to duplicate
   389                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   390                              <1>     ;First we close cx if it exists
   391 0000303E 87D9                <1>     xchg ebx, ecx ;Swap cx and bx
   392 00003040 53                  <1>     push rbx
   393 00003041 51                  <1>     push rcx
   394 00003042 E835FDFFFF          <1>     call closeFileHdl   ;Close handle 
   395 00003047 59                  <1>     pop rcx
   396 00003048 5B                  <1>     pop rbx
   397 00003049 7309                <1>     jnc .hdlClosed
   398 0000304B 3D06000000          <1>     cmp eax, errBadHdl  ;If the handle didnt first exist, just proceed!
   399 00003050 7402                <1>     je .hdlClosed
   400 00003052 F9                  <1>     stc
   401                              <1>     return    ;The error code is set by errExtExit and CF is set on callerFrame
    18                              <2> %%_ret:
    19 00003053 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   402                              <1> .hdlClosed:
   403                              <1>     ;Else, close was ok, lets duplicate now
   404 00003054 E8E9140000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   405 00003059 0F829D370000        <1>     jc extErrExit   ;Return bad with error code in al
   406 0000305F 87D9                <1>     xchg ebx, ecx   ;Now get source to duplicate in ebx
   407 00003061 4889FE              <1>     mov rsi, rdi    ;Put the free space ptr in rsi
   408 00003064 EB98                <1>     jmp short duplicateHandle.duplicateCommon
   409                              <1> 
   410                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   411                              <1> ;Input: cx = Search Attributes, cl only used
   412                              <1> ;       rdx = Ptr to path to file to look for
   413                              <1> ;       al = Document as needing to be 0 for now
   414                              <1> ;Return:
   415                              <1> ;Data in the DTA or error through AX with CF=CY
   416                              <1> ;CAVEATS!
   417                              <1> ;DTA:attribFnd = 40h => Char dev
   418                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   419 00003066 880D(ECC60300)      <1>     mov byte [searchAttr], cl
   420 0000306C 4889D6              <1>     mov rsi, rdx
   421 0000306F E89B340000          <1>     call checkPathspecOK
   422 00003074 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   423 00003076 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   424                              <1> .badPath:
   425 00003078 B803000000          <1>     mov eax, errPnf
   426 0000307D E97A370000          <1>     jmp extErrExit
   427                              <1> .pathspecOk:
   428 00003082 FF35(0CC40300)      <1>     push qword [currentDTA]
   429 00003088 488D3D(23C60300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   430 0000308F 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi
   431 00003096 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   432 0000309D E81ADFFFFF          <1>     call getFilePath
   433                              <1> .findfileExit:
   434 000030A2 8F05(0CC40300)      <1>     pop qword [currentDTA]
   435 000030A8 0F824E370000        <1>     jc extErrExit
   436 000030AE 488D3D(23C60300)    <1>     lea rdi, dosffblock
   437 000030B5 57                  <1>     push rdi
   438 000030B6 E820DEFFFF          <1>     call setupFFBlock
   439 000030BB 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   440 000030BC 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA]
   441 000030C3 B92B000000          <1>     mov ecx, ffBlock_size
   442 000030C8 F3A4                <1>     rep movsb   ;Copy the whole block. 
   443                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   444 000030CA 31C0                <1>     xor eax, eax    ;Return value
   445 000030CC E91D370000          <1>     jmp extGoodExit ;Exit well
   446                              <1> 
   447                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   448                              <1> ;Input: DTA has the find first block from the previous search
   449 000030D1 488B35(0CC40300)    <1>     mov rsi, qword [currentDTA]
   450 000030D8 488D3D(23C60300)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   451 000030DF B92B000000          <1>     mov ecx, ffBlock_size
   452 000030E4 F3A4                <1>     rep movsb
   453 000030E6 FF35(0CC40300)      <1>     push qword [currentDTA] ;Save the current DTA address
   454 000030EC 488D3D(23C60300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   455 000030F3 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi
   456 000030FA E85ADAFFFF          <1>     call findNextMain
   457 000030FF EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   458                              <1> 
   459                              <1> renameFile:        ;ah = 56h
   460                              <1> ;Input: rdx -> Filespec to rename
   461                              <1> ;       rdi -> New filespec
   462                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   463 00003101 4889D6              <1>     mov rsi, rdx
   464 00003104 BB16000000          <1>     mov ebx, dirInclusive
   465 00003109 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   466 00003110 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   467 00003113 880D(ECC60300)      <1>     mov byte [searchAttr], cl
   468                              <1>     ;Step 0, verify both paths provided are valid
   469 00003119 E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   470 0000311E 7249                <1>     jc .pnfError
   471 00003120 56                  <1>     push rsi
   472 00003121 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   473 00003124 E84A000000          <1>     call .renamePathCheck
   474 00003129 5E                  <1>     pop rsi
   475 0000312A 723D                <1>     jc .pnfError
   476                              <1>     ;Now we canonicalise the filenames to make life easy
   477 0000312C 56                  <1>     push rsi
   478 0000312D 4889FE              <1>     mov rsi, rdi
   479 00003130 488D3D(92C50300)    <1>     lea rdi, buffer2
   480 00003137 E835DEFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   481 0000313C 5E                  <1>     pop rsi
   482 0000313D 722A                <1>     jc .pnfError
   483                              <1>     ;Now test if first file exists.
   484 0000313F FF35(12C60300)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   485 00003145 8F05(1AC60300)      <1>     pop qword [fname2Ptr]
   486 0000314B 488D3D(12C50300)    <1>     lea rdi, buffer1
   487 00003152 E81ADEFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   488 00003157 7210                <1>     jc .pnfError  
   489 00003159 E829020000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   490 0000315E 0F8298360000        <1>     jc extErrExit
   491 00003164 E985360000          <1>     jmp extGoodExit
   492                              <1> .pnfError:
   493 00003169 B803000000          <1>     mov eax, errPnf
   494 0000316E E989360000          <1>     jmp extErrExit
   495                              <1> .renamePathCheck:
   496                              <1> ;Checks if the pathspec in rsi is OK
   497 00003173 56                  <1>     push rsi
   498 00003174 57                  <1>     push rdi
   499 00003175 E895330000          <1>     call checkPathspecOK
   500 0000317A 5F                  <1>     pop rdi
   501 0000317B 5E                  <1>     pop rsi
   502 0000317C 730D                <1>     jnc .pathOk     ;Path ok 
   503 0000317E 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   504                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   505 00003180 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   506 00003187 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   507                              <1> .badPath:
   508 00003189 F9                  <1>     stc
   509                              <1>     return
    18                              <2> %%_ret:
    19 0000318A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   510                              <1> .pathOk:
   511 0000318B F8                  <1>     clc
   512                              <1>     return
    18                              <2> %%_ret:
    19 0000318C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> getSetFileDateTime:;ah = 57h
   515 0000318D 3C01                <1>     cmp al, 1
   516 0000318F 760A                <1>     jbe .oksubfun
   517 00003191 B801000000          <1>     mov eax, errInvFnc
   518 00003196 E961360000          <1>     jmp extErrExit
   519                              <1> .oksubfun:
   520 0000319B E8D6130000          <1>     call getSFTPtr  ;Preserves al unless error returned
   521 000031A0 0F8256360000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   522 000031A6 3C01                <1>     cmp al, 1
   523 000031A8 741C                <1>     je .setTimeDate
   524                              <1>     ;Here we get the Time/Date
   525 000031AA 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   526 000031AE 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   527 000031B2 E896310000          <1>     call getUserRegs
   528 000031B7 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   529 000031BB 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   530 000031BF 31C0                <1>     xor eax, eax
   531 000031C1 E928360000          <1>     jmp extGoodExit
   532                              <1> .setTimeDate:
   533                              <1>     ;Here we set the Time/Date
   534 000031C6 66894F13            <1>     mov word [rdi + sft.wTime], cx
   535 000031CA 66895715            <1>     mov word [rdi + sft.wDate], dx
   536 000031CE 31C0                <1>     xor eax, eax
   537 000031D0 E919360000          <1>     jmp extGoodExit
   538                              <1> 
   539                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   540                              <1> ;Uses the clock to do it's bidding
   541                              <1> ;cx = file attribute 
   542                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   543                              <1> ;       filename
   544 000031D5 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   545 000031DA 740A                <1>     jz .validAttribs
   546 000031DC B805000000          <1>     mov eax, errAccDen
   547 000031E1 E916360000          <1>     jmp extErrExit
   548                              <1> .validAttribs:
   549 000031E6 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   550 000031EA 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   551 000031ED B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   552 000031F2 31C0                <1>     xor eax, eax
   553 000031F4 4889D7              <1>     mov rdi, rdx
   554 000031F7 F3AE                <1>     rep scasb
   555 000031F9 85C9                <1>     test ecx, ecx
   556 000031FB 750A                <1>     jnz .nullFnd
   557                              <1>     ;Bad path
   558 000031FD B803000000          <1>     mov eax, errPnf
   559 00003202 E9F5350000          <1>     jmp extErrExit
   560                              <1> .nullFnd:
   561 00003207 48FFCF              <1>     dec rdi
   562 0000320A 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   563 0000320E E854320000          <1>     call swapPathSeparator
   564 00003213 7403                <1>     jz .pathsepFnd
   565                              <1>     ;If no pathsep found, force one at rdi
   566 00003215 B05C                <1>     mov al, "\"
   567 00003217 AA                  <1>     stosb
   568                              <1> .pathsepFnd:
   569 00003218 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   570                              <1> .fileCreateLoop:
   571 0000321B 55                  <1>     push rbp
   572 0000321C E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   573 00003221 5D                  <1>     pop rbp
   574 00003222 0FB7C1              <1>     movzx eax, cx
   575 00003225 0FB7D2              <1>     movzx edx, dx
   576 00003228 C1E010              <1>     shl eax, 10h
   577 0000322B 09D0                <1>     or eax, edx  ;Add the bits of dx too
   578 0000322D E831000000          <1>     call .writeNybbles
   579 00003232 31C0                <1>     xor eax, eax
   580 00003234 AA                  <1>     stosb   ;Store terminating null
   581 00003235 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   582 00003238 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   583 0000323B 55                  <1>     push rbp
   584 0000323C E85C000000          <1>     call createNewFile
   585 00003241 5D                  <1>     pop rbp
   586 00003242 0F83A6350000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   587 00003248 0FB705(00C40300)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   588 0000324F 3D05000000          <1>     cmp eax, errAccDen
   589 00003254 74C5                <1>     je .fileCreateLoop
   590 00003256 3D50000000          <1>     cmp eax, errFilExist
   591 0000325B 74BE                <1>     je .fileCreateLoop
   592 0000325D F9                  <1>     stc
   593 0000325E E999350000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   594                              <1> .writeNybbles:
   595                              <1> ;Write the nybbles of eax at rdi
   596 00003263 B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   597                              <1> .wnLp:
   598 00003268 C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   599 0000326B 50                  <1>     push rax
   600 0000326C 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   601 00003271 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   602 00003276 3D39000000          <1>     cmp eax, '9'
   603 0000327B 7605                <1>     jbe .notExtDigit
   604 0000327D 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   605                              <1> .notExtDigit:
   606 00003282 AA                  <1>     stosb   ;Store the digit
   607 00003283 58                  <1>     pop rax
   608 00003284 FFC9                <1>     dec ecx
   609 00003286 75E0                <1>     jnz .wnLp
   610                              <1>     return
    18                              <2> %%_ret:
    19 00003288 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   611                              <1> 
   612                              <1> .uniqueTimeGet:
   613 00003289 E8BAF3FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   614 0000328E 668B0D(0CC50300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   615 00003295 668B15(0EC50300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   616                              <1>     return
    18                              <2> %%_ret:
    19 0000329C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   617                              <1> 
   618                              <1> createNewFile:     ;ah = 5Bh
   619 0000329D 51                  <1>     push rcx    ;Save file attributes on stack
   620 0000329E 488D0D73060000      <1>     lea rcx, createNewMain
   621 000032A5 C605(ECC60300)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
   622 000032AC E9BEF9FFFF          <1>     jmp openFileHdl.openCommon
   623                              <1> 
   624                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   625                              <1>     ;Input: bx = File to flush
   626 000032B1 E8C0120000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   627 000032B6 0F8240350000        <1>     jc extErrExit
   628 000032BC E825110000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   629                              <1>     ;Now we check if the device is a char, disk or net file and commit
   630 000032C1 E882000000          <1>     call commitMain
   631 000032C6 0F8230350000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   632                              <1> .exitOk:
   633 000032CC 30C0                <1>     xor al, al
   634 000032CE E87A300000          <1>     call getUserRegs
   635 000032D3 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   636                              <1>     return
    18                              <2> %%_ret:
    19 000032D6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   637                              <1> 
   638                              <1> lockUnlockFile:    ;ah = 5Ch
   639                              <1> ;ah = 5Ch
   640                              <1> ;al = subfunction
   641                              <1> ;       00h lock region of file
   642                              <1> ;       01h unlock region of file
   643                              <1> ;ebx = file handle
   644                              <1> ;ecx = start offset of region within file
   645                              <1> ;edi = length of region in bytes
   646 000032D7 3C01                <1>     cmp al, 1
   647 000032D9 7757                <1>     ja .badFunction
   648 000032DB 57                  <1>     push rdi
   649 000032DC E8AF120000          <1>     call derefSFTPtr
   650 000032E1 730B                <1>     jnc .validHdl
   651 000032E3 58                  <1>     pop rax ;Discard the qword on the stack
   652 000032E4 B806000000          <1>     mov eax, errBadHdl
   653 000032E9 E90E350000          <1>     jmp extErrExit
   654                              <1> .validHdl:
   655 000032EE 84C0                <1>     test al, al ;Check if al = 0
   656 000032F0 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   657 000032F1 7424                <1>     jz .lockFileRegion
   658 000032F3 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   659 000032F9 740B                <1>     jz .unlockShare ;Jump if a local file only
   660 000032FB 50                  <1>     push rax
   661 000032FC B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   662 00003301 CD4F                <1>     int 4Fh
   663 00003303 5B                  <1>     pop rbx
   664 00003304 EB06                <1>     jmp short .exitSelect
   665                              <1> .unlockShare:
   666 00003306 FF15(ECC00300)      <1>     call qword [unlockFileShare]    ;Call share hook
   667                              <1> .exitSelect:
   668 0000330C 0F82EA340000        <1>     jc extErrExit
   669 00003312 E9D7340000          <1>     jmp extGoodExit
   670                              <1> .lockFileRegion:
   671 00003317 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   672 0000331D 740B                <1>     jz .lockShare   ;Jump if a local file only
   673 0000331F 50                  <1>     push rax
   674 00003320 B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   675 00003325 CD4F                <1>     int 4Fh
   676 00003327 5B                  <1>     pop rbx
   677 00003328 EBE2                <1>     jmp short .exitSelect
   678                              <1> .lockShare:
   679 0000332A FF15(E4C00300)      <1>     call qword [lockFileShare]  ;Call share hook
   680 00003330 EBDA                <1>     jmp short .exitSelect
   681                              <1> .badFunction:
   682 00003332 B801000000          <1>     mov eax, errInvFnc
   683 00003337 668905(00C40300)    <1>     mov word [errorExCde], ax
   684 0000333E E9B9340000          <1>     jmp extErrExit
   685                              <1> ;STUB FUNCTIONS
   686                              <1> setHandleCount:    ;ah = 67h
   687 00003343 E9B4340000          <1>     jmp extErrExit
   688                              <1> 
   689                              <1> ;-----------------------------------:
   690                              <1> ;       Main File IO Routines       :
   691                              <1> ;-----------------------------------:
   692                              <1> commitMain:
   693                              <1> ;Commits the current SFT 
   694 00003348 E8A1100000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   695 0000334D 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   696 00003351 A9C0000000          <1>     test eax, devCharDev | blokFileNoFlush
   697                              <1>     retnz   ;Return if nothing has been written or a char dev
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00003356 7401                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00003358 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   698 00003359 66A90080            <1>     test ax, devRedirDev
   699 0000335D 7508                <1>     jnz .notNet
   700                              <1>     ;Commit file net redir call and exit
   701 0000335F B807110000          <1>     mov eax, 1107h
   702 00003364 CD4F                <1>     int 4Fh
   703                              <1>     return  ;Propagate CF and AL if needed due to error
    18                              <2> %%_ret:
    19 00003366 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   704                              <1> .notNet:
   705 00003367 E845340000          <1>     call dosCrit1Enter
   706 0000336C 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   707 00003370 E8632F0000          <1>     call setWorkingDPB
   708 00003375 E8C9E7FFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   709 0000337A 7205                <1>     jc short .exit    ;Return in error if this fails, exit critical
   710 0000337C E8E4D3FFFF          <1>     call flushFile  ;Now the file gets flushed
   711                              <1> .exit:
   712                              <1> ;Propagate CF and AL if needed due to error
   713 00003381 E835340000          <1>     call dosCrit1Exit
   714                              <1>     return
    18                              <2> %%_ret:
    19 00003386 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   715                              <1> renameMain:
   716                              <1> ;Now, creates a special find first block for the source file
   717                              <1> ; that is in curDirCopy. Then we build a search pattern for the new name, 
   718                              <1> ; following wildcard rules sourcing from the filespec in the special find first 
   719                              <1> ; block. 
   720                              <1> ;Then we search for that file name specifically (again), replacing 
   721                              <1> ; the filename portion of the destination buffer. If it exists or the 
   722                              <1> ; filename is a char device, we crap out. If it doesnt exist, we create
   723                              <1> ; the new directory entry and delete the original file. 
   724                              <1> ;Input:
   725                              <1> ; filenamePtr1 -> Source path + filename pattern
   726                              <1> ; filenamePtr2 -> New path + filename pattern
   727                              <1> ; workingCDS -> CDS for drive we are considering (set by )
   728 00003387 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   729 0000338E E84D2F0000          <1>     call testCDSNet ;CF=NC => Not net
   730 00003393 7308                <1>     jnc .notNet
   731 00003395 B811110000          <1>     mov eax, 1111h
   732 0000339A CD4F                <1>     int 4Fh
   733                              <1>     return
    18                              <2> %%_ret:
    19 0000339C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   734                              <1> .notNet:
   735                              <1> ;First check if both drives are on the same disk
   736 0000339D 8A05(12C50300)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   737 000033A3 8A25(92C50300)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   738 000033A9 38E0                <1>     cmp al, ah
   739 000033AB 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   740 000033AD B811000000          <1>     mov eax, errDevUnk
   741 000033B2 F9                  <1>     stc
   742                              <1>     return
    18                              <2> %%_ret:
    19 000033B3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   743                              <1> .sameDrive:
   744                              <1> ;Now we check if either pathsepc is simply X:\,0
   745                              <1> ; If they are, return fail as we cannot rename the root dir
   746 000033B4 E8F8330000          <1>     call dosCrit1Enter
   747 000033B9 8B05(12C50300)      <1>     mov eax, dword [buffer1]
   748 000033BF 30C0                <1>     xor al, al
   749 000033C1 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   750 000033C6 750B                <1>     jne .checkpath2
   751                              <1> .accDen:
   752 000033C8 B805000000          <1>     mov eax, errAccDen
   753                              <1> .errorExit:
   754 000033CD F9                  <1>     stc
   755 000033CE E9ED020000          <1>     jmp .exit2
   756                              <1> .checkpath2:
   757 000033D3 8B05(92C50300)      <1>     mov eax, dword [buffer2]
   758 000033D9 30C0                <1>     xor al, al
   759 000033DB 3D003A5C00          <1>     cmp eax, 005C3A00h
   760 000033E0 74E6                <1>     je .accDen  ;If this is the root, exit access denied
   761                              <1> ;Now we find first the source file
   762 000033E2 488B35(12C60300)    <1>     mov rsi, qword [fname1Ptr]
   763 000033E9 4889F7              <1>     mov rdi, rsi
   764 000033EC C605(ECC60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   765 000033F3 E8B9DBFFFF          <1>     call getFilePathNoCanon    ;Get the path for the file to delete
   766 000033F8 0F82C2020000        <1>     jc .exit2    ;Return with CF=CY if file doesn't exist
   767 000033FE 488D35(4EC60300)    <1>     lea rsi, curDirCopy
   768 00003405 488D3D(B2C70300)    <1>     lea rdi, renameDir
   769 0000340C B904000000          <1>     mov ecx, fatDirEntry_size/8
   770 00003411 F348A5              <1>     rep movsq   ;Copy directory over
   771 00003414 488D3D(87C70300)    <1>     lea rdi, renameFFBlk
   772 0000341B E8BBDAFFFF          <1>     call setupFFBlock   ;Need this to save the dir entry cluster/sector/offset 
   773                              <1>     ;Now we check this path, if it is a DIR, ensure it is not the current
   774                              <1>     ; dir for any CDS.
   775 00003420 F605(59C60300)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
   776 00003427 7543                <1>     jnz .notDirCheck
   777 00003429 488B3D(12C60300)    <1>     mov rdi, qword [fname1Ptr]
   778 00003430 57                  <1>     push rdi
   779 00003431 E86F300000          <1>     call strlen ;Get asciiz length in ecx
   780 00003436 5B                  <1>     pop rbx
   781 00003437 FFC9                <1>     dec ecx ;Get one less char to check, we check the last one manually
   782 00003439 488B35(6BC00300)    <1>     mov rsi, qword [cdsHeadPtr]
   783 00003440 0FB615(7EC00300)    <1>     movzx edx, byte [lastdrvNum]
   784                              <1> .dirCheck:
   785 00003447 4889DF              <1>     mov rdi, rbx
   786 0000344A 56                  <1>     push rsi    ;Save rsi pointing to the start of the CDS
   787 0000344B F3A6                <1>     repe cmpsb  ;Compare while they are equal
   788 0000344D AC                  <1>     lodsb   ;Get the last char to check in al
   789 0000344E 5E                  <1>     pop rsi ;Put rsi back to the start of the string
   790 0000344F 7510                <1>     jne .neqDir
   791 00003451 3C5C                <1>     cmp al, "\" ;Check the last char manually for pathend
   792 00003453 0F846FFFFFFF        <1>     je .accDen
   793 00003459 84C0                <1>     test al, al
   794 0000345B 0F8467FFFFFF        <1>     je .accDen
   795                              <1> .neqDir:
   796 00003461 4881C65B000000      <1>     add rsi, cds_size   ;Goto next CDS
   797 00003468 FFCA                <1>     dec edx
   798 0000346A 75DB                <1>     jnz .dirCheck
   799                              <1> .notDirCheck:
   800                              <1>     ;Now use FFBlock to temp swap out the filename with the source pattern
   801 0000346C B9FFFFFFFF          <1>     mov ecx, -1    ;Just a large number to search
   802 00003471 31C0                <1>     xor eax, eax
   803 00003473 488B3D(12C60300)    <1>     mov rdi, qword [fname1Ptr]
   804 0000347A F2AE                <1>     repne scasb   ;Search for terminating null
   805 0000347C FD                  <1>     std ;Go backwards now, to find the path sep
   806 0000347D B05C                <1>     mov al, "\"
   807 0000347F F2AE                <1>     repne scasb   ;Now rsi points one before
   808 00003481 FC                  <1>     cld ;Go normal ways now
   809 00003482 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
   810 00003489 57                  <1>     push rdi
   811 0000348A 4889FE              <1>     mov rsi, rdi
   812 0000348D 488D3D(D5C60300)    <1>     lea rdi, wcdFcbName
   813 00003494 E8BAD9FFFF          <1>     call asciiToFCB ;Copy the search pattern to wcdFcbName
   814 00003499 5F                  <1>     pop rdi
   815 0000349A 57                  <1>     push rdi    ;Save rdi on stack again
   816 0000349B 488D35(A5C70300)    <1>     lea rsi, qword [renameFFBlk + ffBlock.asciizName]
   817                              <1>     ;Copy the asciiz name (including terminating null) to pathspec
   818 000034A2 48A5                <1>     movsq
   819 000034A4 A5                  <1>     movsd
   820 000034A5 A4                  <1>     movsb   ;This is a terminating null if a full 8.3 filename
   821 000034A6 5F                  <1>     pop rdi ;rdi points to first char position
   822 000034A7 E864020000          <1>     call checkNoOpenHandlesForShareAction   ;Now do this, all regs saved!
   823 000034AC 0F821BFFFFFF        <1>     jc .errorExit   ;Propagate the share error code
   824                              <1>     ;Else return the pattern back to its original position
   825 000034B2 488D35(D5C60300)    <1>     lea rsi, wcdFcbName ;rsi -> FCBified pattern, rdi -> First char for name
   826 000034B9 E8DDD9FFFF          <1>     call FCBToAsciiz
   827                              <1>     ;Delete the original directory entry
   828 000034BE 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift] 
   829 000034C2 FFC1                <1>     inc ecx ;Get sectors/cluster in ecx
   830 000034C4 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   831 000034C8 F7E1                <1>     mul ecx ;Get bytes per cluster in eax
   832 000034CA 8B0D(94C70300)      <1>     mov ecx, dword [renameFFBlk + ffBlock.dirOffset] ;32 byte offset in cluster
   833 000034D0 C1E105              <1>     shl ecx, 5  ;Get byte offset in cluster
   834 000034D3 91                  <1>     xchg ecx, eax
   835 000034D4 F7F1                <1>     div ecx ;Get Sector in cluster in eax and sector offset in edx
   836 000034D6 89C3                <1>     mov ebx, eax
   837 000034D8 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get the current dir cluster, not start cluster
   838 000034DE E847D3FFFF          <1>     call getStartSectorOfCluster    ;Cluster number in eax, sector in rax
   839 000034E3 4801D8              <1>     add rax, rbx    ;Goto the sector for the cluster
   840 000034E6 E821D2FFFF          <1>     call getBufForDirNoFile ;Get buffer pointer in rbx
   841 000034EB 0F82DA010000        <1>     jc .badExit
   842 000034F1 488D741330          <1>     lea rsi, qword [rbx + bufferHdr.dataarea + rdx] ;Goto byte offset in sector
   843                              <1>     ;rsi points to the file entry
   844 000034F6 8A05(F8C60300)      <1>     mov al, byte [delChar]
   845 000034FC 8806                <1>     mov byte [rsi], al
   846 000034FE E87ED0FFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
   847                              <1> 
   848                              <1>     ;Now we use the destination filename pattern to build the new filename
   849 00003503 488B3D(1AC60300)    <1>     mov rdi, qword [fname2Ptr]  ;Get the destination path ptr in rdi
   850 0000350A 31C0                <1>     xor eax, eax
   851 0000350C B943000000          <1>     mov ecx, 67
   852 00003511 F2AE                <1>     repne scasb   ;Find the null terminator of the destination path
   853                              <1> .findPattern:
   854 00003513 48FFCF              <1>     dec rdi
   855 00003516 803F5C              <1>     cmp byte [rdi], "\" ;Is this a pathsep?
   856 00003519 75F8                <1>     jne .findPattern
   857                              <1> ;rdi points to the pathseparator, unless it is the root pathsep
   858 0000351B C605(EEC60300)00    <1>     mov byte [fileFDflg], 0 ;Clear this byte
   859 00003522 807FFF3A            <1>     cmp byte [rdi - 1], ":"
   860 00003526 750D                <1>     jne .notRoot
   861                              <1>     ;The root dir always exists on a volume so can skip the check.
   862 00003528 48FFC7              <1>     inc rdi ;Goto the first char of the filename
   863 0000352B 57                  <1>     push rdi
   864 0000352C 800D(EEC60300)02    <1>     or byte [fileFDflg], 2  ;Bit 2 means ROOT DIR FILE
   865 00003533 EB29                <1>     jmp short .skipCheck
   866                              <1> .notRoot:
   867 00003535 AA                  <1>     stosb   ;Store a null over the "\" and inc rdi to char one of pattern
   868 00003536 57                  <1>     push rdi    ;Push the new name pattern portion ptr in var
   869                              <1>     ;Now check if the parent directory exists for the destination
   870 00003537 57                  <1>     push rdi    ;Save the ptr to the first char of the pathsep
   871 00003538 FF35(12C60300)      <1>     push qword [fname1Ptr]  ;Preserve original source buffer
   872 0000353E 488D35(92C50300)    <1>     lea rsi, buffer2
   873 00003545 4889F7              <1>     mov rdi, rsi
   874 00003548 E85DDAFFFF          <1>     call getDirPathNoCanon ;We are searching for a directory ONLY
   875 0000354D 8F05(12C60300)      <1>     pop qword [fname1Ptr]
   876 00003553 5F                  <1>     pop rdi
   877 00003554 0F8271010000        <1>     jc .badExit    ;Error if the parent dir doesnt exist
   878 0000355A C647FF5C            <1>     mov byte [rdi - 1], "\" ;Replace the pathseparator
   879                              <1> .skipCheck:
   880                              <1>     ;rdi now points to the first char of the pattern
   881 0000355E 4889FE              <1>     mov rsi, rdi
   882 00003561 488D3D(D5C60300)    <1>     lea rdi, wcdFcbName
   883 00003568 E8E6D8FFFF          <1>     call asciiToFCB ;Convert the asciiz name to FCB format
   884                              <1>     ;Ensure the destination pattern is not all question marks
   885 0000356D 813D(D5C60300)3F3F- <1>     cmp dword [wcdFcbName], "????"
   885 00003575 3F3F                <1>
   886 00003577 7524                <1>     jne .validRenPattern
   887 00003579 813D(D9C60300)3F3F- <1>     cmp dword [wcdFcbName + 4], "????"
   887 00003581 3F3F                <1>
   888 00003583 7518                <1>     jne .validRenPattern
   889 00003585 66813D(DDC60300)3F- <1>     cmp word [wcdFcbName + 8], "??"
   889 0000358D 3F                  <1>
   890 0000358E 750D                <1>     jne .validRenPattern
   891 00003590 803D(DFC60300)3F    <1>     cmp byte [wcdFcbName + 10], "?"
   892 00003597 0F8429010000        <1>     je .bad ;Access denied buddy ol' pal
   893                              <1> .validRenPattern:
   894                              <1>     ;curDirCopy has information for the destination directory file we will 
   895                              <1>     ; write to. The cluster points to the directory file itself to search in
   896                              <1>     ;Each filename we create must be searched for to ensure it doesnt exist
   897                              <1>     ;Make new fname in fcbName from asciizname in renameDir
   898 0000359D 488D35(B2C70300)    <1>     lea rsi, renameDir  ;Copy the source filename over
   899 000035A4 488D3D(C9C60300)    <1>     lea rdi, fcbName
   900 000035AB 57                  <1>     push rdi    ;Preserve this as the destination for copy
   901 000035AC B90B000000          <1>     mov ecx, 11
   902 000035B1 F3A4                <1>     rep movsb
   903 000035B3 5F                  <1>     pop rdi
   904 000035B4 488D35(D5C60300)    <1>     lea rsi, wcdFcbName ;Now source the chars from here
   905                              <1> .mnnLp:
   906 000035BB AC                  <1>     lodsb
   907 000035BC 3C3F                <1>     cmp al, "?" ;Is it a wc?
   908 000035BE 7404                <1>     je .mnnWC   ;Skip overriding this char
   909 000035C0 AA                  <1>     stosb   ;Store new char and go forwards by one
   910 000035C1 48FFCF              <1>     dec rdi ;Now go back by one
   911                              <1> .mnnWC:
   912 000035C4 48FFC7              <1>     inc rdi ;Goto next letter
   913 000035C7 FFC1                <1>     inc ecx
   914 000035C9 81F90B000000        <1>     cmp ecx, 11
   915 000035CF 75EA                <1>     jne .mnnLp
   916 000035D1 488D35(C9C60300)    <1>     lea rsi, fcbName
   917 000035D8 488D3D(B2C70300)    <1>     lea rdi, renameDir
   918 000035DF B90B000000          <1>     mov ecx, 11
   919 000035E4 F3A4                <1>     rep movsb   ;Move the name over from fcbName to new dir entry name field
   920 000035E6 5F                  <1>     pop rdi ;Get the first char of the filename place in destination pathspec
   921 000035E7 57                  <1>     push rdi    ;Push it on stack again to be reused later if a WC spec
   922 000035E8 488D35(C9C60300)    <1>     lea rsi, fcbName
   923 000035EF E8A7D8FFFF          <1>     call FCBToAsciiz    ;Copy the name over to asciiz 
   924 000035F4 488B35(1AC60300)    <1>     mov rsi, qword [fname2Ptr]
   925 000035FB 4889F7              <1>     mov rdi, rsi
   926 000035FE E8AED9FFFF          <1>     call getFilePathNoCanon    ;This must be a non-existant file
   927 00003603 0F83C2000000        <1>     jnc .badExit   ;If the file exists, then error
   928 00003609 3D02000000          <1>     cmp eax, errFnf ;If Fnf error then we may proceed
   929 0000360E 0F85B7000000        <1>     jne .badExit
   930                              <1>     ;Now we search the parent dir (the curDirCopy dir) for free space
   931                              <1>     ;If the parent is root, deal with special case
   932 00003614 488D1D(4EC60300)    <1>     lea rbx, curDirCopy
   933 0000361B F605(EEC60300)02    <1>     test byte [fileFDflg], 2
   934 00003622 C605(EEC60300)00    <1>     mov byte [fileFDflg], 0 ;Clear the flag again
   935 00003629 7416                <1>     jz .notRoot2
   936 0000362B 488D35(C9C60300)    <1>     lea rsi, fcbName
   937 00003632 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
   938 00003639 48A5                <1>     movsq
   939 0000363B A5                  <1>     movsd
   940 0000363C A4                  <1>     movsb
   941 0000363D 31C0                <1>     xor eax, eax    ;Dir to search
   942 0000363F EB13                <1>     jmp short .getSpace
   943                              <1> .notRoot2:
   944 00003641 0FB715(62C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   945 00003648 0FB705(68C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   946 0000364F C1E210              <1>     shl edx, 10h
   947 00003652 09D0                <1>     or eax, edx ;Get first cluster of dir file in eax
   948                              <1> .getSpace:
   949 00003654 E87B000000          <1>     call .searchForDirSpace
   950 00003659 726B                <1>     jc .bad
   951                              <1> ;dir Entry found, rsi points to space in buffer
   952 0000365B 4889F7              <1>     mov rdi, rsi
   953 0000365E 488D35(B2C70300)    <1>     lea rsi, renameDir
   954 00003665 B904000000          <1>     mov ecx, fatDirEntry_size/8
   955 0000366A F348A5              <1>     rep movsq   ;Copy dir over
   956 0000366D E80FCFFFFF          <1>     call markBufferDirty ;Mark buffer as written to now
   957                              <1>     ;Now we check if source filename or wcdFcbname has a wildcard
   958                              <1>     ;If it does, we find next. If not, we exit
   959 00003672 B03F                <1>     mov al, "?"
   960 00003674 488B3D(12C60300)    <1>     mov rdi, qword [fname1Ptr]  ;Check filename
   961 0000367B E8252E0000          <1>     call strlen ;Get in rcx to get the length of the string
   962 00003680 F2AE                <1>     repne scasb
   963 00003682 7534                <1>     jne .exit  ;If source name has no wildcards, exit
   964 00003684 B90B000000          <1>     mov ecx, 11
   965 00003689 8D3D(D5C60300)      <1>     lea edi, wcdFcbName
   966 0000368F F2AE                <1>     repne scasb
   967 00003691 7525                <1>     jne .exit
   968                              <1>     ;Here we gotta do a find next now!
   969 00003693 FF35(0CC40300)      <1>     push qword [currentDTA]
   970 00003699 488D3D(87C70300)    <1>     lea rdi, renameFFBlk
   971 000036A0 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi ;Set renameFFBlk as currentDTA for operation
   972 000036A7 E8ADD4FFFF          <1>     call findNextMain
   973 000036AC 8F05(0CC40300)      <1>     pop qword [currentDTA]
   974 000036B2 0F83E5FEFFFF        <1>     jnc .validRenPattern    ;If this is ok, now find next file
   975                              <1>     ;Else propagate the CF if this ends with an error (inc no more files)
   976                              <1> .exit:
   977 000036B8 5F                  <1>     pop rdi ;Pop the ptr to the dest pathspec ptr off stack
   978 000036B9 E891CEFFFF          <1>     call writeThroughBuffers
   979 000036BE 720B                <1>     jc .badExit
   980                              <1> .exit2: ;Bad exit before we push qword on stack 
   981 000036C0 E8F6300000          <1>     call dosCrit1Exit
   982                              <1>     return
    18                              <2> %%_ret:
    19 000036C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   983                              <1> .bad:
   984 000036C6 B805000000          <1>     mov eax, errAccDen  ;Temp return code
   985                              <1> .badExit:
   986 000036CB E85DCEFFFF          <1>     call cancelWriteThroughBuffers
   987 000036D0 F9                  <1>     stc
   988 000036D1 5F                  <1>     pop rdi
   989 000036D2 EBEC                <1>     jmp short .exit2
   990                              <1> 
   991                              <1> .searchForDirSpace:
   992                              <1> ;Input: eax = First directory to search 
   993 000036D4 8905(74C70300)      <1>     mov dword [dirClustA], eax
   994 000036DA 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
   995 000036DC 668905(78C70300)    <1>     mov word [dirSect], ax
   996 000036E3 8905(7AC70300)      <1>     mov dword [dirEntry], eax
   997 000036E9 E8C8E3FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
   998 000036EE 731C                <1>     jnc .dirEntryFnd
   999 000036F0 813D(70C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
   999 000036F8 0000                <1>
  1000 000036FA 7412                <1>     je .searchBad ;Set CF and exit
  1001 000036FC E8FFE4FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1002 00003701 720B                <1>     jc .searchBad
  1003 00003703 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1004 00003708 7404                <1>     je .searchBad
  1005                              <1>     ;Else eax = Newly allocated cluster
  1006 0000370A EBC8                <1>     jmp short .searchForDirSpace
  1007                              <1> .dirEntryFnd:
  1008 0000370C F8                  <1>     clc
  1009                              <1>     return
    18                              <2> %%_ret:
    19 0000370D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1010                              <1> .searchBad:
  1011 0000370E F9                  <1>     stc
  1012                              <1>     return
    18                              <2> %%_ret:
    19 0000370F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1013                              <1> 
  1014                              <1> 
  1015                              <1> checkNoOpenHandlesForShareAction:
  1016                              <1> ;We check that we can proceed. This function will fail IF there are handles
  1017                              <1> ; open, and thus makes it an ideal candidate for checking in RENAME, for 
  1018                              <1> ; both filenames, DELETE and SETFILEATTRIBS if we have any open files. If we
  1019                              <1> ; do, then we should get a Share error and thus it would prevent us from 
  1020                              <1> ; proceeding.
  1021                              <1> ;
  1022                              <1> ;If SHARE not loaded, ALL handles must be closed before Rename or Delete.
  1023                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
  1024                              <1> ;       currDirCopy = Directory entry for the file
  1025 00003710 E885300000          <1>     call dosPushRegs    ;Save the context completely
  1026 00003715 803D(B4C00300)00    <1>     cmp byte [openFileCheck], 0 ;Some 16-bit SHAREs set the marker to 0.
  1027 0000371C 740C                <1>     jz .noOpenFileCheckHandler
  1028 0000371E FF15(B4C00300)      <1>     call qword [openFileCheck]
  1029 00003724 7204                <1>     jc .noOpenFileCheckHandler  ;If CF=CY, this function not defined
  1030 00003726 7449                <1>     jz .exit    ;If CF=NC && ZF=ZE, Function defined and No open files, proceed.
  1031 00003728 EB4E                <1>     jmp short .errorMain    ;If ZF=NZ -> Have some open files, error out!
  1032                              <1> .noOpenFileCheckHandler:
  1033                              <1>     ;The following closes most recent shared handles referencing it
  1034                              <1>     ;Only if sharePSP, shareMachineNumber are equal and openMode not Compat
  1035                              <1>     ; mode and if there is precisely 1  
  1036 0000372A FF15(1CC10300)      <1>     call qword [closeNewHdlShare]    
  1037                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
  1038 00003730 488D3D(02CD0300)    <1>     lea rdi, scratchSFT
  1039 00003737 48893D(22C70300)    <1>     mov qword [currentSFT], rdi
  1040 0000373E B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1041 00003743 C605(F7C60300)00    <1>     mov byte [openCreate], 0    ;Make sure we are just opening the file
  1042                              <1>     ;This is to avoid needing to put the file attributes on the stack
  1043 0000374A 57                  <1>     push rdi
  1044 0000374B E861020000          <1>     call buildSFTEntry
  1045 00003750 5F                  <1>     pop rdi
  1046 00003751 7225                <1>     jc .errorMain
  1047 00003753 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
  1048 00003758 66C747021000        <1>     mov word [rdi + sft.wOpenMode], denyRWShare ;Prevent everything temporarily
  1049 0000375E 57                  <1>     push rdi
  1050 0000375F E8AA370000          <1>     call shareFile
  1051 00003764 5F                  <1>     pop rdi
  1052 00003765 7211                <1>     jc .errorMain
  1053 00003767 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0
  1054 0000376C E834370000          <1>     call closeShareCallWrapper
  1055                              <1> .exit:
  1056 00003771 E80D300000          <1>     call dosPopRegs
  1057 00003776 F8                  <1>     clc
  1058                              <1>     return
    18                              <2> %%_ret:
    19 00003777 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1059                              <1> .errorMain:
  1060 00003778 E806300000          <1>     call dosPopRegs
  1061 0000377D B820000000          <1>     mov eax, errShrVio  ;Share issue so return failed with share
  1062 00003782 F9                  <1>     stc
  1063                              <1>     return
    18                              <2> %%_ret:
    19 00003783 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1064                              <1> 
  1065                              <1> outerDeleteMain:
  1066                              <1> ;Internal current dir must be populated with dir entry
  1067                              <1> ; and internal DOS directory variables now point to this entry.
  1068                              <1> ;Checks if the file is a char device or read only.
  1069                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1070                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1071                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1072                              <1> ;         CF=NC => File deleted
  1073 00003784 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
  1074 0000378B E8502B0000          <1>     call testCDSNet ;CF=NC => Not net
  1075 00003790 7308                <1>     jnc .notNet
  1076 00003792 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1077 00003797 CD4F                <1>     int 4Fh
  1078                              <1>     return
    18                              <2> %%_ret:
    19 00003799 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1079                              <1> .notNet:
  1080 0000379A B805000000          <1>     mov eax, errAccDen  
  1081 0000379F F605(59C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
  1082 000037A6 754F                <1>     jnz .exitBad  ;Can't delete a char dev
  1083 000037A8 F605(59C60300)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
  1084 000037AF 7546                <1>     jnz .exitBad  ;Can't delete a read only file
  1085 000037B1 E843000000          <1>     call deleteMain
  1086 000037B6 723F                <1>     jc .exitBad
  1087                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1088 000037B8 B03F                <1>     mov al, "?"
  1089 000037BA 488D3D(C9C60300)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1090 000037C1 B90B000000          <1>     mov ecx, 11
  1091 000037C6 F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1092 000037C8 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1093 000037CA F8                  <1>     clc
  1094                              <1>     return  ;Return ok!
    18                              <2> %%_ret:
    19 000037CB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1095                              <1> .serverWCloop:
  1096 000037CC FF35(0CC40300)      <1>     push qword [currentDTA] ;Save the current DTA address
  1097 000037D2 488D3D(23C60300)    <1>     lea rdi, dosffblock
  1098 000037D9 57                  <1>     push rdi    ;Push this address onto the stack
  1099 000037DA E8FCD6FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1100 000037DF 8F05(0CC40300)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1101 000037E5 E86FD3FFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1102 000037EA 8F05(0CC40300)      <1>     pop qword [currentDTA]
  1103 000037F0 E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1104 000037F5 73D5                <1>     jnc .serverWCloop     
  1105                              <1> ;Stop as soon as an error occurs
  1106                              <1> .exitBad:
  1107 000037F7 F9                  <1>     stc
  1108                              <1>     return
    18                              <2> %%_ret:
    19 000037F8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1109                              <1> 
  1110                              <1> deleteMain:
  1111                              <1> ;Now unlink FAT chain and then clear directory entry
  1112                              <1> ;Get the start cluster of this file
  1113                              <1> ;Input:
  1114                              <1> ; The file must have NOT be read-only.
  1115                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1116                              <1> ;     - curDirCopy must be filled with the file directory information
  1117                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1118                              <1> ;Output: CF=NC => Success, 
  1119                              <1> ; If not net CDS:
  1120                              <1> ;   rsi keeps pointing to directory entry.
  1121                              <1> ;   al = First char of the file that was deleted.
  1122                              <1> ;        CF=CY => Error
  1123                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1124 000037F9 E812FFFFFF          <1>     call checkNoOpenHandlesForShareAction   ;Also cannot delete if open handle
  1125                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000037FE 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1126 00003800 52                  <1>     push rdx
  1127 00003801 0FB715(68C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1128 00003808 0FB705(62C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1129 0000380F C1E010              <1>     shl eax, 10h
  1130 00003812 09D0                <1>     or eax, edx ;Add low bits to eax
  1131 00003814 5A                  <1>     pop rdx
  1132 00003815 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1133 00003817 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1134 00003819 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1135 00003820 E8AED1FFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1136 00003825 721B                <1>     jc .exitBad
  1137                              <1> .skipUnlink:
  1138                              <1>     ;Now replace the first char of the directory to 0E5h
  1139                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1140 00003827 E89DE2FFFF          <1>     call getDiskDirectoryEntry
  1141 0000382C 7214                <1>     jc .exitBad
  1142 0000382E 8A05(F8C60300)      <1>     mov al, byte [delChar]
  1143 00003834 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1144 00003836 E846CDFFFF          <1>     call markBufferDirty
  1145                              <1>     ;CF must be clear
  1146 0000383B E80FCDFFFF          <1>     call writeThroughBuffers
  1147                              <1>     retnc
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003840 73B6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1148                              <1> .exitBad:
  1149 00003842 E8E6CCFFFF          <1>     call cancelWriteThroughBuffers
  1150                              <1>     return
    18                              <2> %%_ret:
    19 00003847 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1151                              <1> 
  1152                              <1> openMain:
  1153                              <1> ;Input: ax (formally al) = Open mode
  1154                              <1> ;       [currentSFT] = SFT we are building
  1155                              <1> ;       [workingCDS] = CDS of drive to access
  1156                              <1> ;       [workingDPB] = DPB of drive to access
  1157                              <1> ;Ouput: CF=CY => Error, eax has error code
  1158 00003848 E897000000          <1>     call .setOpenMode
  1159                              <1>     retc    ;Error Exit 
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000384D 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1160 0000384F 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1161 00003856 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
  1162 0000385D 30E4                <1>     xor ah, ah  ;al has the access mode
  1163 0000385F 66894702            <1>     mov word [rdi + sft.wOpenMode], ax  ;Set the SFT access mode
  1164 00003863 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1165 0000386A 750A                <1>     jne .notNet
  1166                              <1> .redirOpen:
  1167 0000386C 50                  <1>     push rax    ;Push open mode onto stack
  1168 0000386D B816110000          <1>     mov eax, 1116h  ;Open remote file on \\ pathspec drives
  1169 00003872 CD4F                <1>     int 4Fh
  1170 00003874 58                  <1>     pop rax
  1171                              <1>     return
    18                              <2> %%_ret:
    19 00003875 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1172                              <1> .notNet:
  1173 00003876 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1174 0000387C 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1175 0000387E E82E2F0000          <1>     call dosCrit1Enter
  1176 00003883 C605(F7C60300)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1177 0000388A C605(F8C60300)E5    <1>     mov byte [delChar], 0E5h
  1178 00003891 E81B010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1179 00003896 7227                <1>     jc .errorExit
  1180                              <1> .openShareLoop:
  1181                              <1> ;Now we attempt to register the file with SHARE
  1182 00003898 0FB70D(25C00300)    <1>     movzx ecx, word [shareCount]    
  1183                              <1> .openShareTryAgain: 
  1184 0000389F 51                  <1>     push rcx
  1185 000038A0 E8F9350000          <1>     call openShareCallWrapper
  1186 000038A5 59                  <1>     pop rcx
  1187 000038A6 731D                <1>     jnc .fileSharedOk
  1188 000038A8 E81B360000          <1>     call shareRetryCountdown
  1189 000038AD FFC9                <1>     dec ecx
  1190 000038AF 75EE                <1>     jnz .openShareTryAgain
  1191 000038B1 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1192 000038B8 E82E360000          <1>     call shareCheckOpenViolation
  1193 000038BD 73D9                <1>     jnc .openShareLoop  ;If user selects retry, we retry!
  1194                              <1> .errorExit:
  1195 000038BF E8F72E0000          <1>     call dosCrit1Exit   ;Else we error out
  1196                              <1>     return
    18                              <2> %%_ret:
    19 000038C4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1197                              <1> .fileSharedOk:
  1198 000038C5 B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1199 000038CA E81F0B0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1200 000038CF FF15(24C10300)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1201 000038D5 E8E12E0000          <1>     call dosCrit1Exit
  1202 000038DA 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1203                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000038E0 74E2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1204 000038E2 F9                  <1>     stc ;FCB opened files are not allowed anymore, this shouldnt exist anymore
  1205                              <1>     return
    18                              <2> %%_ret:
    19 000038E3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1206                              <1> .setOpenMode:
  1207                              <1> ;Input: al = Open mode for the file open
  1208 000038E4 8805(EDC60300)      <1>     mov byte [fileOpenMd], al
  1209 000038EA 53                  <1>     push rbx
  1210 000038EB 88C3                <1>     mov bl, al
  1211 000038ED 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1212 000038F0 803D(F2C60300)FF    <1>     cmp byte [dosInvoke], -1    
  1213 000038F7 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1214 000038F9 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
  1215 000038FC 7405                <1>     je .s2
  1216                              <1> .s1:
  1217 000038FE 80FB40              <1>     cmp bl, denyNoneShare
  1218 00003901 770D                <1>     ja .somBad
  1219                              <1> .s2:
  1220 00003903 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1221 00003905 80E30F              <1>     and bl, 0Fh
  1222 00003908 80FB02              <1>     cmp bl, RWAccess
  1223 0000390B 7703                <1>     ja .somBad
  1224 0000390D 5B                  <1>     pop rbx
  1225 0000390E F8                  <1>     clc
  1226                              <1>     return
    18                              <2> %%_ret:
    19 0000390F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1227                              <1> .somBad:
  1228 00003910 5B                  <1>     pop rbx
  1229 00003911 B80C000000          <1>     mov eax, errAccCde
  1230 00003916 F9                  <1>     stc
  1231                              <1>     return
    18                              <2> %%_ret:
    19 00003917 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1232                              <1> createNewMain:
  1233                              <1> ;Input: ax (formally al) = File attributes
  1234                              <1> ;       [currentSFT] = SFT we are building
  1235                              <1> ;       [workingCDS] = CDS of drive to access
  1236                              <1> ;       [workingDPB] = DPB of drive to access
  1237 00003918 0FB6C0              <1>     movzx eax, al
  1238 0000391B F605(F4C60300)FF    <1>     test byte [fileExist], -1
  1239 00003922 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1240 00003924 B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1241 00003929 F9                  <1>     stc
  1242                              <1>     return
    18                              <2> %%_ret:
    19 0000392A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1243                              <1> createMain:
  1244                              <1> ;Input: ax (formally al) = File attributes
  1245                              <1> ;       [currentSFT] = SFT we are building
  1246                              <1> ;       [workingCDS] = CDS of drive to access
  1247                              <1> ;       [workingDPB] = DPB of drive to access
  1248 0000392B 0FB6C0              <1>     movzx eax, al
  1249                              <1> .createNewEP:
  1250 0000392E A8C0                <1>     test al, 80h | 40h   ;Invalid bits?
  1251 00003930 750A                <1>     jnz .invalidAttrib
  1252 00003932 A808                <1>     test al, dirVolumeID
  1253 00003934 7506                <1>     jnz .invalidAttrib  ;Creating volume label with this function is forbidden
  1254 00003936 0C20                <1>     or al, dirArchive   ;Set archive bit
  1255 00003938 A810                <1>     test al, dirDirectory   
  1256 0000393A 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1257                              <1> .invalidAttrib:
  1258 0000393C B805000000          <1>     mov eax, errAccDen
  1259 00003941 F9                  <1>     stc
  1260                              <1>     return
    18                              <2> %%_ret:
    19 00003942 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1261                              <1> .validAttr:
  1262 00003943 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1263 0000394A 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
  1264 00003951 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1265 00003958 750A                <1>     jne .diskFile
  1266 0000395A 50                  <1>     push rax    ;Save the new attributes
  1267 0000395B B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1268 00003960 CD4F                <1>     int 4Fh
  1269 00003962 5B                  <1>     pop rbx
  1270                              <1>     return
    18                              <2> %%_ret:
    19 00003963 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1271                              <1> .diskFile:
  1272 00003964 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1273 0000396A 740A                <1>     jz .hardFile
  1274 0000396C 50                  <1>     push rax    ;Save the new attributes
  1275 0000396D B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1276 00003972 CD4F                <1>     int 4Fh
  1277 00003974 5B                  <1>     pop rbx
  1278                              <1>     return
    18                              <2> %%_ret:
    19 00003975 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1279                              <1> .hardFile:
  1280 00003976 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
  1281 0000397C C605(F7C60300)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1282 00003983 C605(F8C60300)E5    <1>     mov byte [delChar], 0E5h
  1283 0000398A E8222E0000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1284 0000398F 57                  <1>     push rdi
  1285 00003990 50                  <1>     push rax    ;Save the file attributes on stack
  1286 00003991 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1287 00003996 E816000000          <1>     call buildSFTEntry
  1288 0000399B 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
  1289 0000399C 5F                  <1>     pop rdi
  1290 0000399D 720C                <1>     jc .errorExit
  1291 0000399F B802000000          <1>     mov eax, 2
  1292 000039A4 FF15(24C10300)      <1>     call qword [updateDirShare]
  1293 000039AA F8                  <1>     clc ;Always clear the CF flag here updateDir defaults to CF=CY
  1294                              <1> .errorExit:
  1295 000039AB E80B2E0000          <1>     call dosCrit1Exit
  1296                              <1>     return
    18                              <2> %%_ret:
    19 000039B0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1297                              <1> buildSFTEntry:
  1298                              <1> ;Called in a critical section.
  1299                              <1> ;Input: al = Open mode
  1300                              <1> ;       STACK: File attributes if creating a file
  1301                              <1> ;       [currentSFT] = SFT we are building
  1302                              <1> ;       [workingCDS] = CDS of drive to access
  1303                              <1> ;       [workingDPB] = DPB of drive to access
  1304                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1305                              <1> ;
  1306                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1307                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1308                              <1> ;        If CF=CY: - Return fail
  1309                              <1> ;
  1310                              <1> ;
  1311                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1312                              <1> ;   If not, create disk entry.
  1313                              <1> ;Check if the device was a char device by checking curDirCopy.
  1314                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1315                              <1> 
  1316                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1317                              <1> ; to start of file fields of the SFT
  1318 000039B1 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1319 000039B2 4889E5              <1>     mov rbp, rsp
  1320 000039B5 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
  1321                              <1> ;Set the open mode
  1322 000039BC 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1323                              <1> ;Get current time
  1324 000039C0 E883ECFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1325 000039C5 E869EDFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1326 000039CA 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1327                              <1> ;Set current Owner
  1328 000039CD 488B05(14C40300)    <1>     mov rax, qword [currentPSP]
  1329 000039D4 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1330                              <1> ;Set file pointer to first byte
  1331 000039D8 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1332                              <1> ;Common fields set
  1333 000039DF F605(F7C60300)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1334 000039E6 0F849D010000        <1>     jz .openProc
  1335                              <1>     ;Here if Creating a file.
  1336 000039EC F605(F4C60300)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1337 000039F3 0F84D9000000        <1>     jz .createFile
  1338 000039F9 F605(59C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1339 00003A00 0F858C010000        <1>     jnz .charDev
  1340                              <1>     ;Here disk file exists, so recreating the file.
  1341                              <1>     ;If recreating, check we are not overwriting a Dir
  1342 00003A06 F605(59C60300)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
  1343 00003A0D 0F85FC010000        <1>     jnz .bad    ;Directories are not allowed to be created
  1344 00003A13 55                  <1>     push rbp
  1345 00003A14 FF35(22C70300)      <1>     push qword [currentSFT]
  1346 00003A1A E8DAFDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1347 00003A1F 8F05(22C70300)      <1>     pop qword [currentSFT]
  1348 00003A25 5D                  <1>     pop rbp
  1349 00003A26 0F82E3010000        <1>     jc .bad
  1350                              <1>     ;al has the char for the filename
  1351                              <1>     ;Sets vars for the sector/offset into the sector
  1352 00003A2C 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1353 00003A33 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1354 00003A35 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1355                              <1>     ;al has file attributes.
  1356 00003A39 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1357 00003A3B 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1358 00003A3E 31C0                <1>     xor eax, eax
  1359                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1360 00003A40 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1361 00003A44 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1362 00003A48 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1363 00003A4B 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1364 00003A4E 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1365 00003A51 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1366 00003A54 57                  <1>     push rdi    ;Save SFT pointer
  1367 00003A55 488D3D(4EC60300)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1368 00003A5C B920000000          <1>     mov ecx, fatDirEntry_size
  1369 00003A61 F3A4                <1>     rep movsb
  1370 00003A63 E819CBFFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1371 00003A68 5F                  <1>     pop rdi
  1372                              <1> .createCommon:  ;rdi must point to the current SFT 
  1373                              <1>     ;Now populate the remaining SFT fields 
  1374 00003A69 488D35(4EC60300)    <1>     lea rsi, curDirCopy
  1375 00003A70 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1376 00003A73 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1377 00003A76 488B05(36C70300)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1378 00003A7D 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1379 00003A81 0FB705(3EC70300)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1380 00003A88 C1E805              <1>     shr eax, 5   ;Divide by 32 to get directory entry number
  1381 00003A8B 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1382 00003A8E 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1383 00003A91 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1384 00003A94 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1385 00003A98 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1386 00003A9C C1E210              <1>     shl edx, 10h
  1387 00003A9F 09D0                <1>     or eax, edx
  1388 00003AA1 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1389                              <1> 
  1390 00003AA4 31C0                <1>     xor eax, eax
  1391                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1392 00003AA6 8A05(F9C60300)      <1>     mov al, byte [workingDrv]
  1393 00003AAC 0C40                <1>     or al, blokFileNoFlush  ;Dont flush until it is accessed
  1394 00003AAE 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1395 00003AB2 488B05(FAC60300)    <1>     mov rax, qword [workingDPB]
  1396 00003AB9 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1397                              <1>     ;Last thing, copy the filename over
  1398                              <1>     ;Now save the name
  1399                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1400 00003ABD 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1401 00003AC1 488D35(4EC60300)    <1>     lea rsi, curDirCopy
  1402 00003AC8 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1403 00003ACA 66A5                <1>     movsw
  1404 00003ACC A4                  <1>     movsb
  1405                              <1>     ;SFT filled, now we open on the driver if it supports it
  1406 00003ACD E905010000          <1>     jmp .openDriver
  1407                              <1> .createFile:
  1408                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1409                              <1>     ;rsi points to current sda entry
  1410 00003AD2 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
  1411                              <1>     ;Clear out the dir entry
  1412 00003AD9 57                  <1>     push rdi
  1413 00003ADA B904000000          <1>     mov ecx, 4
  1414 00003ADF 31C0                <1>     xor eax, eax
  1415 00003AE1 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1416 00003AE4 5F                  <1>     pop rdi
  1417                              <1>     ;Copy the FCB name over    
  1418 00003AE5 56                  <1>     push rsi
  1419 00003AE6 57                  <1>     push rdi
  1420 00003AE7 B90B000000          <1>     mov ecx, 11
  1421 00003AEC 488D35(C9C60300)    <1>     lea rsi, fcbName
  1422 00003AF3 F3A4                <1>     rep movsb   ;Move over the FCB name
  1423 00003AF5 5F                  <1>     pop rdi
  1424 00003AF6 5E                  <1>     pop rsi
  1425                              <1> 
  1426 00003AF7 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1427                              <1>     ;al has file attributes.
  1428 00003AFB 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1429 00003AFD 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1430 00003B00 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1431 00003B03 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1432 00003B06 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1433 00003B09 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1434                              <1> .searchForDirSpace:
  1435 00003B0F 8905(74C70300)      <1>     mov dword [dirClustA], eax
  1436 00003B15 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1437 00003B17 668905(78C70300)    <1>     mov word [dirSect], ax
  1438 00003B1E 8905(7AC70300)      <1>     mov dword [dirEntry], eax
  1439 00003B24 57                  <1>     push rdi
  1440 00003B25 E88CDFFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1441 00003B2A 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1442 00003B2B 7328                <1>     jnc .dirEntryFnd
  1443 00003B2D 813D(70C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1443 00003B35 0000                <1>
  1444 00003B37 0F84D2000000        <1>     je .bad ;Set CF and exit
  1445 00003B3D E8BEE0FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1446 00003B42 0F82BE000000        <1>     jc .exit
  1447 00003B48 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1448 00003B4D 0F84BC000000        <1>     je .bad
  1449                              <1>     ;Else eax = Newly allocated cluster
  1450 00003B53 EBBA                <1>     jmp short .searchForDirSpace
  1451                              <1> .dirEntryFnd:
  1452 00003B55 4887FE              <1>     xchg rdi, rsi
  1453 00003B58 B904000000          <1>     mov ecx, 4
  1454 00003B5D F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1455 00003B60 E81CCAFFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1456 00003B65 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1457 00003B6C E9F8FEFFFF          <1>     jmp .createCommon
  1458                              <1> .open:
  1459                              <1> ;curdircopy has a copy of the disk file directory
  1460                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1461 00003B71 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1462 00003B78 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1463                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1464 00003B7F E845DFFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1465 00003B84 E9E0FEFFFF          <1>     jmp .createCommon
  1466                              <1> .openProc:
  1467                              <1>     ;Here if Opening a file.
  1468 00003B89 F605(59C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
  1469 00003B90 74DF                <1>     jz .open
  1470                              <1> .charDev:
  1471 00003B92 488B05(4EC60300)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1472 00003B99 E8692A0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1473 00003B9E 7307                <1>     jnc .notBadCharDevName
  1474 00003BA0 B805000000          <1>     mov eax, errAccDen
  1475 00003BA5 EB5F                <1>     jmp short .exit ;CF already set
  1476                              <1> .notBadCharDevName:
  1477 00003BA7 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
  1478 00003BAE 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1479 00003BB2 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1480 00003BB6 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1481 00003BB9 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1482 00003BBC 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1483 00003BC0 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1484 00003BC7 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1485 00003BCB B820202020          <1>     mov eax, "    "
  1486 00003BD0 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1487 00003BD4 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1488                              <1> .openDriver:
  1489 00003BD7 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1490 00003BDE 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the ptr here
  1491 00003BE2 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1492 00003BE8 7508                <1>     jnz .charDevOpen
  1493 00003BEA 0FB64601            <1>     movzx eax, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
  1494 00003BEE 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
  1495                              <1> .charDevOpen:
  1496 00003BF2 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
  1497 00003BF8 740C                <1>     jz .exit  ;If not, immediately jump to exit, all is well
  1498                              <1>     ;rsi has device driver ptr for device, make request
  1499 00003BFA 53                  <1>     push rbx
  1500 00003BFB E8A2260000          <1>     call primReqOpenSetup  ;rbx gets header ptr, rsi has driver ptr
  1501 00003C00 E85D230000          <1>     call goDriver   ;Make request
  1502 00003C05 5B                  <1>     pop rbx
  1503                              <1> .exit:
  1504 00003C06 E844C9FFFF          <1>     call writeThroughBuffers
  1505 00003C0B 7207                <1>     jc .bad2
  1506 00003C0D 5D                  <1>     pop rbp
  1507                              <1>     return
    18                              <2> %%_ret:
    19 00003C0E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1508                              <1> .bad:   ;Set Access Denied
  1509 00003C0F B805000000          <1>     mov eax, errAccDen
  1510                              <1> .bad2:  ;Error propagating error code
  1511 00003C14 E814C9FFFF          <1>     call cancelWriteThroughBuffers
  1512 00003C19 F9                  <1>     stc
  1513 00003C1A 5D                  <1>     pop rbp
  1514                              <1>     return
    18                              <2> %%_ret:
    19 00003C1B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1515                              <1> 
  1516                              <1> openDriverWrapper:  ;Int 4Fh, AX=120Ch
  1517 00003C1C 56                  <1>     push rsi    ;Preserve rsi
  1518 00003C1D 488D3507000000      <1>     lea rsi, .returnAddress
  1519 00003C24 56                  <1>     push rsi    ;Push the return address on the stack, popped on Return
  1520 00003C25 55                  <1>     push rbp    ;Push rbp on the stack, popped just before return
  1521 00003C26 E9ACFFFFFF          <1>     jmp buildSFTEntry.openDriver ;JUMP, don't call
  1522                              <1> .returnAddress:
  1523 00003C2B 5E                  <1>     pop rsi ;Get back preserved rsi
  1524                              <1>     return
    18                              <2> %%_ret:
    19 00003C2C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1525                              <1> 
  1526                              <1> closeMain: ;Int 4Fh AX=1201h
  1527                              <1> ;Gets the directory entry for a file
  1528                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1529                              <1> ;If CF=CY on return: Error, return error with al = error code
  1530                              <1> ;Preserve all regs except eax and rdi
  1531                              <1> ; If CF=NC on return: eax = Unknown
  1532                              <1> ;                     rdi = current SFT ptr
  1533 00003C2D 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1534 00003C34 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
  1535 00003C3A 7408                <1>     jz .physical
  1536                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
  1537 00003C3C B806110000          <1>     mov eax, 1106h  ;Make request
  1538 00003C41 CD4F                <1>     int 4Fh ;Beep!
  1539                              <1>     return  ;Returns with CF set or clear as appropriate
    18                              <2> %%_ret:
    19 00003C43 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1540                              <1> .physical:  
  1541                              <1> ; We make a request to the dev dir to close the device
  1542                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1543 00003C44 E8682B0000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1544 00003C49 53                  <1>     push rbx
  1545 00003C4A 56                  <1>     push rsi
  1546 00003C4B 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
  1547 00003C4F 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1548 00003C55 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
  1549                              <1>     ;rsi has DPB pointer here
  1550                              <1>     ;rdi has the SFT pointer
  1551 00003C57 55                  <1>     push rbp
  1552 00003C58 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
  1553 00003C5B E878260000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
  1554 00003C60 E8DEDEFFFF          <1>     call updateDirectoryEntryForFile
  1555 00003C65 5D                  <1>     pop rbp
  1556                              <1>     ;If CF is set, Fail was requested and ax has an error code
  1557 00003C66 723F                <1>     jc .exit
  1558 00003C68 E8F8CAFFFF          <1>     call flushFile
  1559 00003C6D 7238                <1>     jc .exit    ;If something went wrong, exit
  1560 00003C6F 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
  1561 00003C73 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
  1562                              <1> .charClose:
  1563                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
  1564                              <1>     ;We now decrement handle count in SFT structure
  1565 00003C77 E862090000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
  1566 00003C7C 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
  1567 00003C7F 7503                <1>     jnz .driverClose
  1568 00003C81 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
  1569                              <1> .driverClose:
  1570 00003C84 50                  <1>     push rax
  1571 00003C85 51                  <1>     push rcx
  1572 00003C86 E81A320000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1573 00003C8B 59                  <1>     pop rcx
  1574 00003C8C 58                  <1>     pop rax
  1575 00003C8D 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
  1576                              <1>     ;and if the device is a disk device, cl will have the unit number
  1577                              <1>     ;We first check if the driver supports oper/close requests
  1578 00003C8E 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
  1579 00003C94 7511                <1>     jnz .exit  ;If not, immediately jump to exit, all is well
  1580                              <1>     ;rsi has device driver ptr for device, make request
  1581 00003C96 E80C260000          <1>     call primReqCloseSetup  ;rbx gets header ptr, rsi has driver ptr
  1582 00003C9B E8C2220000          <1>     call goDriver   ;Make request
  1583                              <1>     ;Don't check the status here, as we are simply informing the driver 
  1584                              <1>     ; of an operation. Nothing should be able to go wrong. 
  1585                              <1>     ;Functionally, an ignore if anything does go wrong.
  1586 00003CA0 E8AAC8FFFF          <1>     call writeThroughBuffers
  1587 00003CA5 7305                <1>     jnc short .exitOk
  1588                              <1> .exit:
  1589 00003CA7 E881C8FFFF          <1>     call cancelWriteThroughBuffers
  1590                              <1> .exitOk:
  1591 00003CAC 5E                  <1>     pop rsi
  1592 00003CAD 5B                  <1>     pop rbx
  1593 00003CAE E8082B0000          <1>     call dosCrit1Exit
  1594                              <1>     return
    18                              <2> %%_ret:
    19 00003CB3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1595                              <1> 
  1596                              <1> readBytes:
  1597                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1598                              <1> ;Input: ecx = Number of bytes to read
  1599                              <1> ;Output: ecx = Number of bytes read
  1600                              <1> ;Number of bytes read 
  1601                              <1> ;If CF=CY, return with error code in ax
  1602 00003CB4 E835070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1603 00003CB9 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1604 00003CBD 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1605 00003CBF 3C01                <1>     cmp al, WriteAccess
  1606 00003CC1 7509                <1>     jne .readable
  1607 00003CC3 B805000000          <1>     mov eax, errAccDen
  1608 00003CC8 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1609 00003CCA F9                  <1>     stc
  1610                              <1>     return
    18                              <2> %%_ret:
    19 00003CCB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1611                              <1> .readable:
  1612 00003CCC E85F070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1613 00003CD1 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1614 00003CD4 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1615 00003CDA 740A                <1>     jz .notRedir
  1616 00003CDC B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1617 00003CE1 CD4F                <1>     int 4Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1618                              <1>     return 
    18                              <2> %%_ret:
    19 00003CE3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1619                              <1> .exitOk:
  1620 00003CE4 F8                  <1>     clc
  1621                              <1>     return 
    18                              <2> %%_ret:
    19 00003CE5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1622                              <1> .notRedir:
  1623 00003CE6 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1624 00003CEC 7510                <1>     jnz readCharDev
  1625 00003CEE E8BE2A0000          <1>     call dosCrit1Enter
  1626 00003CF3 E89C010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1627 00003CF8 E8BE2A0000          <1>     call dosCrit1Exit
  1628                              <1>     return 
    18                              <2> %%_ret:
    19 00003CFD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1629                              <1> readCharDev:
  1630                              <1> ;rdi points to sft for char dev to read
  1631                              <1> ;ecx has the number of bytes to transfer
  1632                              <1> ;Vars have been set up and DTA has the transfer address
  1633                              <1> ;Returns in ecx, the actual bytes transferred
  1634                              <1> ;If CF=CY, return with error code in ax
  1635 00003CFE C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1636 00003D05 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1637 00003D09 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1638 00003D10 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1639 00003D13 0F84CB020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
  1640 00003D19 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1641 00003D1C 7407                <1>     jz .notNul
  1642                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
  1643                              <1>     ;NUL never transfers bytes 
  1644 00003D1E 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1645 00003D20 E9BF020000          <1>     jmp readExitOk    ;Goto exit
  1646                              <1> .notNul:
  1647 00003D25 F6C320              <1>     test bl, charDevBinary
  1648 00003D28 0F857F000000        <1>     jnz .binary
  1649                              <1>     ;Here if the device is in ASCII mode
  1650 00003D2E F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1651 00003D31 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1652                              <1> .consoleInput:
  1653                              <1>     ;Console input here
  1654 00003D37 E8F5E4FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1655                              <1>     ;Get current offset into buffer (if one exists)
  1656 00003D3C 488B35(31C00300)    <1>     mov rsi, qword [vConHdlOff]
  1657 00003D43 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1658 00003D46 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1659 00003D48 803D(43C30300)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1660 00003D4F 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1661                              <1>     ;Else, reset the buffer
  1662 00003D51 66C705(43C30300)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1662 00003D59 FF                  <1>
  1663                              <1> .oldBuf:
  1664                              <1> ;Preserve the dta and number of chars to tfr
  1665 00003D5A 51                  <1>     push rcx
  1666 00003D5B 57                  <1>     push rdi
  1667 00003D5C 488D15(43C30300)    <1>     lea rdx, vConInBuf
  1668 00003D63 E8E9E4FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1669 00003D68 5F                  <1>     pop rdi
  1670 00003D69 59                  <1>     pop rcx
  1671 00003D6A 488D35(45C30300)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1672 00003D71 803E1A              <1>     cmp byte [rsi], EOF
  1673 00003D74 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1674 00003D76 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1675 00003D79 B00A                <1>     mov al, LF
  1676 00003D7B E863E0FFFF          <1>     call charOut_B.in   ;Echo CRLF
  1677 00003D80 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1678 00003D82 EB18                <1>     jmp short .exit
  1679                              <1> .tfrBuf:
  1680 00003D84 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1681 00003D85 AA                  <1>     stosb
  1682 00003D86 3C0D                <1>     cmp al, CR 
  1683 00003D88 7503                <1>     jne .noCRLF
  1684 00003D8A C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1685                              <1> .noCRLF:
  1686 00003D8D 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1687 00003D8F E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1688 00003D91 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1689                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1690 00003D93 E84BE0FFFF          <1>     call charOut_B.in   ;Echo CRLF
  1691 00003D98 31F6                <1>     xor esi, esi
  1692 00003D9A 0C01                <1>     or al, 1    ;Set ZF = NZ
  1693                              <1> .exit:
  1694 00003D9C E8A8E4FFFF          <1>     call vConRetDriver
  1695 00003DA1 488935(31C00300)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1696 00003DA8 E937020000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
  1697                              <1> 
  1698                              <1> .binary:
  1699                              <1>     ;Setup registers for transfer
  1700 00003DAD 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1701 00003DB0 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1702                              <1>     ;ecx has the number of bytes to transfer directly
  1703 00003DB3 E83E240000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1704 00003DB8 488B35(FAC60300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1705 00003DBF E89E210000          <1>     call goDriver   ;Make the request
  1706 00003DC4 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1707 00003DC7 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1708 00003DCE F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1709 00003DD4 7422                <1>     jz .binNoError
  1710                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
  1711 00003DD6 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1712 00003DD8 E8971C0000          <1>     call charDevErr   ;ah = has part of the error 
  1713                              <1>     ;al now has the response
  1714 00003DDD 3C00                <1>     cmp al, critIgnore
  1715 00003DDF 7417                <1>     je .binNoError ;Simply proceed as normal
  1716 00003DE1 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1717 00003DE4 3C03                <1>     cmp al, critFail
  1718 00003DE6 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1719                              <1>     ;Fallthrough here for fail!
  1720                              <1> .failExit:
  1721 00003DE8 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1722 00003DEF 31C9                <1>     xor ecx, ecx
  1723 00003DF1 B805000000          <1>     mov eax, errAccDen
  1724 00003DF6 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1725                              <1>     return
    18                              <2> %%_ret:
    19 00003DF7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1726                              <1> .binNoError:
  1727                              <1>     ;Get number of bytes transferred into 
  1728 00003DF8 8B05(CBC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1729 00003DFE F7D8                <1>     neg eax ;make it into -eax
  1730 00003E00 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1731                              <1>     ;ecx now has bytes left to transfer
  1732 00003E04 50                  <1>     push rax    ;Save value on stack
  1733 00003E05 31C0                <1>     xor eax, eax ;Set ZF
  1734 00003E07 FFC0                <1>     inc eax ;Clear ZF
  1735 00003E09 58                  <1>     pop rax ;Get back the original value
  1736 00003E0A E9D5010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1737                              <1> .generalASCII:
  1738                              <1>     ;ecx has bytes to transfer here
  1739                              <1>     ;Setup registers for transfer
  1740 00003E0F 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1741 00003E12 51                  <1>     push rcx
  1742 00003E13 B901000000          <1>     mov ecx, 1  ;Get one char
  1743 00003E18 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1744 00003E1B E8D6230000          <1>     call primReqReadSetup   ;Setup request
  1745 00003E20 59                  <1>     pop rcx
  1746                              <1>     ;rbx now has request header ptr
  1747 00003E21 488B35(FAC60300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1748                              <1> .asciiReadChar:
  1749 00003E28 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1750 00003E2B E885E3FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1751 00003E30 E82D210000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1752 00003E35 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1753 00003E3C F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1754 00003E42 741E                <1>     jz .asciiNoError
  1755 00003E44 E82B1C0000          <1>     call charDevErr    ;Call Int 44h
  1756                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1757 00003E49 C705(CBC40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1757 00003E51 0000                <1>
  1758 00003E53 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1759 00003E56 3C03                <1>     cmp al, critFail
  1760 00003E58 748E                <1>     je .failExit
  1761 00003E5A 3C01                <1>     cmp al, critRetry
  1762 00003E5C 74CA                <1>     je .asciiReadChar
  1763                              <1>     ;Ignore here, pretend NULL CHAR was read
  1764 00003E5E 30C0                <1>     xor al, al
  1765 00003E60 EB15                <1>     jmp short .asciiIgnoreEP
  1766                              <1> .asciiNoError:
  1767                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1768                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1769                              <1> ;Preserve RBX, RSI
  1770                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1771 00003E62 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1772 00003E65 813D(CBC40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1772 00003E6D 0000                <1>
  1773 00003E6F 0F856F010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1774 00003E75 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1775                              <1> .asciiIgnoreEP:
  1776 00003E77 48FF05(C3C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1777 00003E7E 48FFC7              <1>     inc rdi ;Also advance register pointer
  1778 00003E81 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1779 00003E83 0F845B010000        <1>     je readExitOk
  1780 00003E89 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1781 00003E8B E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1782                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1783 00003E8D FEC0                <1>     inc al  ;make ZF=NZ
  1784 00003E8F E950010000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1785                              <1> 
  1786                              <1> readDiskFile:
  1787                              <1> ;rdi = Current SFT
  1788                              <1> ;rbp = WorkingDPB
  1789                              <1> ;ecx = Bytes to transfer
  1790 00003E94 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1791 00003E9B C605(F0C60300)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1792                              <1>     ;We have the following vars setup:
  1793                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1794                              <1>     ;currClustF
  1795                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1796                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1797 00003EA2 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1798 00003EA5 85D2                <1>     test edx, edx
  1799 00003EA7 0F8437010000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1800 00003EAD 8B15(40C70300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  1801 00003EB3 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  1802 00003EB6 8905(44C70300)      <1>     mov dword [currClustD], eax
  1803 00003EBC 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  1804 00003EBE 0F8420010000        <1>     jz readExitOk
  1805 00003EC4 3DFFFFFFFF          <1>     cmp eax, -1 ;If left in an indeterminate state somehow, exit no bytes
  1806 00003EC9 0F8415010000        <1>     jz readExitOk   
  1807 00003ECF 8B0D(68C70300)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  1808                              <1>     ;Check if we have opened a volume label (should never happen)
  1809 00003ED5 66F747020800        <1>     test word [rdi + sft.wOpenMode], volumeLabel    ;If we try read from vollbl
  1810 00003EDB 7407                <1>     jz .shareCheck
  1811 00003EDD B805000000          <1>     mov eax, errAccDen
  1812 00003EE2 F9                  <1>     stc
  1813                              <1>     return
    18                              <2> %%_ret:
    19 00003EE3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1814                              <1> .shareCheck:
  1815                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  1816 00003EE4 E8C32F0000          <1>     call retryShareIODelay
  1817 00003EE9 7308                <1>     jnc .shareOk
  1818 00003EEB E8BD300000          <1>     call shareCheckReadLockViolation
  1819 00003EF0 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  1820                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    18                              <2> %%_ret:
    19 00003EF2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1821                              <1> .shareOk:
  1822 00003EF3 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  1823 00003EF5 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  1824 00003EF7 7426                <1>     jz .skipWalk
  1825                              <1> .goToCurrentCluster:
  1826 00003EF9 E810CBFFFF          <1>     call readFAT    ;Get in eax the next cluster
  1827 00003EFE 0F82D1000000        <1>     jc .badExit   ;This can only return Fail
  1828 00003F04 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  1829 00003F09 0F84D5000000        <1>     je readExitOk ;Exit with no bytes transferred
  1830 00003F0F 8905(44C70300)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  1831 00003F15 FFCA                <1>     dec edx ;Decrement counter
  1832 00003F17 75E0                <1>     jnz .goToCurrentCluster
  1833                              <1> ;Now we fall out with ebx = Current cluster
  1834 00003F19 8B05(44C70300)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  1835                              <1>     ;mov eax, ebx
  1836                              <1> .skipWalk:
  1837 00003F1F E806C9FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  1838                              <1>     ;Now we add the offset to this
  1839 00003F24 0FB61D(4CC70300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  1840 00003F2B 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  1841 00003F2E 488905(4DC70300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  1842                              <1> ;Main
  1843                              <1> .mainRead:
  1844 00003F35 F605(27C40300)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  1845 00003F3C 7407                <1>     jz .mainReadNoBreak
  1846 00003F3E 50                  <1>     push rax
  1847 00003F3F E871E2FFFF          <1>     call checkBreak
  1848 00003F44 58                  <1>     pop rax
  1849                              <1> .mainReadNoBreak:
  1850 00003F45 E8F7C7FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
  1851 00003F4A 0F8285000000        <1>     jc .badExit
  1852 00003F50 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  1853 00003F54 0FB71D(55C70300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  1854 00003F5B 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  1855                              <1>     ;Now we read the smallest of the following from the sector buffer:
  1856                              <1>     ; 1) Sector size, 2) Bytes left in File, 3) Bytes left to read from Request
  1857 00003F5E 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  1858 00003F61 2B4F1B              <1>     sub ecx, dword [rdi + sft.dCurntOff] ;Get bytes left to read in file in ecx
  1859 00003F64 8B1D(6CC70300)      <1>     mov ebx, dword [tfrCntr]
  1860 00003F6A 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  1861 00003F6C 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  1862 00003F6F 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  1863 00003F73 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  1864 00003F75 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  1865 00003F78 57                  <1>     push rdi
  1866 00003F79 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA]
  1867 00003F80 51                  <1>     push rcx
  1868 00003F81 F3A4                <1>     rep movsb
  1869 00003F83 59                  <1>     pop rcx
  1870 00003F84 010D(57C70300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  1871 00003F8A 290D(6CC70300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  1872 00003F90 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  1873 00003F97 8B05(57C70300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  1874 00003F9D 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  1875 00003FA1 31D2                <1>     xor edx, edx    ;Zero rdx
  1876 00003FA3 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  1877 00003FA5 668915(55C70300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  1878 00003FAC 5F                  <1>     pop rdi
  1879 00003FAD 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  1880 00003FB3 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  1881 00003FB5 742D                <1>     jz readExitOk ;Exit if so!
  1882 00003FB7 E8C1C9FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  1883 00003FBC 7217                <1>     jc .badExit
  1884                              <1>     ;If ZF=ZE then currClustF has last cluster
  1885 00003FBE 7424                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  1886                              <1>     ;Else repeat
  1887                              <1>     ;currSectD has been updated, we now set currByteS = 0
  1888 00003FC0 66C705(55C70300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  1888 00003FC8 00                  <1>
  1889 00003FC9 488B05(4DC70300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  1890 00003FD0 E960FFFFFF          <1>     jmp .mainRead
  1891                              <1> .badExit:
  1892                              <1>     ;When a disk error occurs within the bit where vars have changed,
  1893                              <1>     ; we need to update the SFT before returning
  1894 00003FD5 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  1895 00003FDB 30C0                <1>     xor al, al  ;Set ZF flag
  1896 00003FDD E802000000          <1>     call readExitOk   ;We call this
  1897 00003FE2 F9                  <1>     stc ;All calls which end up here return Fail!
  1898 00003FE3 C3                  <1>     ret
  1899                              <1> 
  1900                              <1> readExitOk:
  1901                              <1> ;Input: ecx = Number of bytes left to transfer!
  1902                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  1903 00003FE4 890D(6CC70300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  1904                              <1>     ;I argue as this is a simply read-only exit vector, this is unnecessary
  1905                              <1>     ;jnz .skipbitClear
  1906                              <1>     ;call getCurrentSFT  ;Get currentSFT in rdi
  1907                              <1>     ;The disk transfer must've flushed by now. 
  1908                              <1>     ;and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  1909                              <1> .skipbitClear:  ;Or skip that entirely
  1910 00003FEA E807040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  1911                              <1>     return 
    18                              <2> %%_ret:
    19 00003FEF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1912                              <1> 
  1913                              <1> writeBytes:
  1914                              <1> ;Writes the bytes from the user buffer
  1915                              <1> ;Input: ecx = Bytes to xfr
  1916                              <1> ;Returns number of bytes written in ecx
  1917 00003FF0 E8F9030000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1918 00003FF5 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1919 00003FF9 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1920 00003FFB 3C00                <1>     cmp al, ReadAccess
  1921 00003FFD 7509                <1>     jne .writeable
  1922                              <1> .noWrite:
  1923 00003FFF B805000000          <1>     mov eax, errAccDen
  1924 00004004 31C9                <1>     xor ecx, ecx
  1925 00004006 F9                  <1>     stc
  1926 00004007 C3                  <1>     ret
  1927                              <1> .writeable:
  1928 00004008 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1929 0000400E 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  1930 00004010 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  1931 00004014 74E9                <1>     je .noWrite ;If the file is read only, RIP
  1932                              <1> .skipAttribCheck:
  1933 00004016 E815040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  1934 0000401B 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1935 00004021 7408                <1>     jz .notRedir
  1936 00004023 B809110000          <1>     mov eax, 1109h  ;Write to redir
  1937 00004028 CD4F                <1>     int 4Fh
  1938                              <1>     return
    18                              <2> %%_ret:
    19 0000402A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1939                              <1> .notRedir:
  1940 0000402B 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1941 00004031 7510                <1>     jnz writeCharDev
  1942 00004033 E879270000          <1>     call dosCrit1Enter
  1943 00004038 E84C010000          <1>     call writeDiskFile
  1944 0000403D E879270000          <1>     call dosCrit1Exit
  1945                              <1>     return
    18                              <2> %%_ret:
    19 00004042 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1946                              <1> writeCharDev:
  1947 00004043 C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr
  1948                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  1949 0000404A 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  1950 00004050 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1951                              <1>     ;If ecx = 0, we exit
  1952 00004054 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  1953 00004056 85C9                <1>     test ecx, ecx
  1954 00004058 0F8478030000        <1>     jz writeExitChar
  1955 0000405E 488B1D(0CC40300)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  1956 00004065 4889DF              <1>     mov rdi, rbx
  1957 00004068 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  1958 0000406A A820                <1>     test al, charDevBinary
  1959 0000406C 744A                <1>     jz .asciiDev
  1960                              <1> ;Write binary transfer here
  1961                              <1> .binaryLp:
  1962 0000406E 31C0                <1>     xor eax, eax
  1963 00004070 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1964 00004073 E873210000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1965 00004078 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
  1966 0000407F E8DA1E0000          <1>     call goDriverChar
  1967 00004084 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  1968 00004087 B487                <1>     mov ah, critCharDev | critData | critWrite
  1969 00004089 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1970 00004090 F7C700800000        <1>     test edi, drvErrStatus
  1971 00004096 7415                <1>     jz .binXfrOk
  1972 00004098 E8D7190000          <1>     call charDevErr ;Invoke Int 44h
  1973 0000409D 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  1974 000040A0 3C00                <1>     cmp al, critIgnore
  1975 000040A2 7409                <1>     je .binXfrOk
  1976 000040A4 3C01                <1>     cmp al, critRetry
  1977 000040A6 74C6                <1>     je .binaryLp
  1978 000040A8 E9D5000000          <1>     jmp .exitFail
  1979                              <1> .binXfrOk:
  1980 000040AD 8B05(CBC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  1981 000040B3 E91E030000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  1982                              <1> .asciiDev:
  1983 000040B8 A802                <1>     test al, charDevConOut
  1984 000040BA 0F859E000000        <1>     jnz .conDev
  1985 000040C0 A804                <1>     test al, charDevNulDev
  1986 000040C2 0F858F000000        <1>     jnz .nulDev
  1987                              <1>     ;Here we transfer for a generic character device in ascii mode
  1988 000040C8 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  1989 000040CA 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  1990 000040CD 0F8403030000        <1>     je writeExitChar
  1991 000040D3 51                  <1>     push rcx
  1992 000040D4 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  1993 000040D9 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1994 000040DC E80A210000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1995 000040E1 59                  <1>     pop rcx
  1996 000040E2 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
  1997 000040E9 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  1998                              <1> .asciiLp:
  1999 000040ED E8C3E0FFFF          <1>     call checkBreak
  2000 000040F2 E86B1E0000          <1>     call goDriver
  2001 000040F7 57                  <1>     push rdi
  2002 000040F8 B487                <1>     mov ah, critCharDev | critData | critWrite
  2003 000040FA 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2004 00004101 F7C700800000        <1>     test edi, drvErrStatus
  2005 00004107 741D                <1>     jz .asciiNoError
  2006 00004109 E866190000          <1>     call charDevErr ;Invoke Int 44h
  2007 0000410E 5F                  <1>     pop rdi
  2008 0000410F C705(CBC40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  2008 00004117 0000                <1>
  2009 00004119 3C01                <1>     cmp al, critRetry
  2010 0000411B 74D0                <1>     je .asciiLp
  2011 0000411D 3C00                <1>     cmp al, critIgnore
  2012 0000411F 7412                <1>     je .ignoreEp
  2013 00004121 E95C000000          <1>     jmp .exitFail
  2014                              <1> .asciiNoError:
  2015 00004126 5F                  <1>     pop rdi
  2016 00004127 813D(CBC40300)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  2016 0000412F 0000                <1>
  2017 00004131 741D                <1>     je .bytesXfrdOk
  2018                              <1> .ignoreEp:
  2019 00004133 FFC2                <1>     inc edx ;One more char has been xfrd
  2020 00004135 FF05(C3C40300)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  2021 0000413B 48FFC7              <1>     inc rdi ;And our copy... 
  2022 0000413E 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  2023 00004141 740D                <1>     je .bytesXfrdOk
  2024 00004143 66C705(B8C40300)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  2024 0000414B 00                  <1>
  2025 0000414C FFC9                <1>     dec ecx
  2026 0000414E 759D                <1>     jnz .asciiLp
  2027                              <1> .bytesXfrdOk:
  2028 00004150 89D0                <1>     mov eax, edx
  2029 00004152 E97F020000          <1>     jmp writeExitChar
  2030                              <1> .nulDev:
  2031 00004157 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  2032 00004159 E978020000          <1>     jmp writeExitChar
  2033                              <1> .conDev:
  2034 0000415E E8CEE0FFFF          <1>     call vConSwapDriver
  2035 00004163 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  2036 00004166 51                  <1>     push rcx
  2037                              <1> .conDevLp:
  2038 00004167 AC                  <1>     lodsb
  2039 00004168 3C1A                <1>     cmp al, EOF
  2040 0000416A 7409                <1>     je .conDevExit
  2041 0000416C E872DCFFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  2042 00004171 FFC9                <1>     dec ecx
  2043 00004173 75F2                <1>     jnz .conDevLp
  2044                              <1> .conDevExit:
  2045 00004175 58                  <1>     pop rax ;Get initial ecx back into eax
  2046 00004176 29C8                <1>     sub eax, ecx
  2047 00004178 E8CCE0FFFF          <1>     call vConRetDriver
  2048 0000417D E954020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  2049                              <1> .exitFail:
  2050 00004182 B805000000          <1>     mov eax, errAccDen
  2051 00004187 F9                  <1>     stc
  2052                              <1>     return
    18                              <2> %%_ret:
    19 00004188 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2053                              <1> writeDiskFile:
  2054                              <1>     ;rdi has SFT ptr
  2055 00004189 8B0D(68C70300)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  2056 0000418F C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk 
  2057 00004196 C605(F0C60300)FF    <1>     mov byte [rwFlag], -1    ;Write operation
  2058 0000419D 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  2059 000041A3 0F85E4010000        <1>     jnz .badExit
  2060 000041A9 85C9                <1>     test ecx, ecx
  2061 000041AB 7505                <1>     jnz .nonZeroWrite
  2062 000041AD B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0 (i.e. truncating file), check for NO locks
  2063                              <1> .nonZeroWrite:
  2064                              <1>     ;Now do share check here
  2065 000041B2 E8F52C0000          <1>     call retryShareIODelay
  2066 000041B7 7308                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  2067 000041B9 E8E62D0000          <1>     call shareCheckWriteLockViolation
  2068 000041BE 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  2069                              <1>     return  ;Else return with CF=CY
    18                              <2> %%_ret:
    19 000041C0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2070                              <1> .proceedWithWrite:
  2071 000041C1 31DB                <1>     xor ebx, ebx
  2072 000041C3 891D(64C70300)      <1>     mov dword [bytesAppend], ebx    ;Used for file extends (not writes!)
  2073 000041C9 881D(63C70300)      <1>     mov byte [fileGrowing], bl   ;Reset the file growth flag!
  2074 000041CF 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2075                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2076 000041D2 85C0                <1>     test eax, eax
  2077 000041D4 7520                <1>     jnz .notStart
  2078 000041D6 E8C9C6FFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2079 000041DB 0F8293010000        <1>     jc .exitPrepHardErr
  2080 000041E1 3DFFFFFFFF          <1>     cmp eax, -1
  2081 000041E6 0F84B3010000        <1>     je writeExit
  2082                              <1>     ;Now eax has the first cluster of chain
  2083 000041EC 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2084 000041EF C605(63C70300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  2085                              <1> .notStart:
  2086                              <1> ;eax has the start cluster of the file
  2087                              <1> ;Now we go to CurntOff
  2088 000041F6 8905(44C70300)      <1>     mov dword [currClustD], eax ;Store in var
  2089 000041FC 31DB                <1>     xor ebx, ebx
  2090 000041FE 8B15(40C70300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2091 00004204 85D2                <1>     test edx, edx
  2092 00004206 7458                <1>     jz .skipWalk
  2093                              <1> .goToCurrentCluster:
  2094 00004208 E801C8FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2095 0000420D 0F8261010000        <1>     jc .exitPrepHardErr   ;This can only return Fail
  2096 00004213 3DFFFFFFFF          <1>     cmp eax, -1 ;Is this cluster the last cluster?
  2097 00004218 7536                <1>     jne .stillInFile
  2098                              <1> .addCluster:
  2099                              <1>     ;Here we extend by one cluster
  2100 0000421A 8B05(44C70300)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2101 00004220 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2102 00004222 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2103 00004227 E899C6FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2104 0000422C 0F8242010000        <1>     jc .exitPrepHardErr
  2105 00004232 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2106 00004234 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  2107 00004238 010D(64C70300)      <1>     add dword [bytesAppend], ecx    ;Add a bytes per sector to filesize
  2108 0000423E C605(63C70300)FF    <1>     mov byte [fileGrowing], -1
  2109 00004245 E8C4C7FFFF          <1>     call readFAT    ;Get in eax the new cluster
  2110 0000424A 0F8224010000        <1>     jc .exitPrepHardErr
  2111                              <1> .stillInFile:
  2112 00004250 8905(44C70300)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2113 00004256 FFCA                <1>     dec edx ;Decrement counter
  2114 00004258 75AE                <1>     jnz .goToCurrentCluster
  2115                              <1> ;Now we fall out
  2116 0000425A 8B05(44C70300)      <1>     mov eax, dword [currClustD]
  2117                              <1> .skipWalk:
  2118 00004260 E8C5C5FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2119                              <1>     ;Now we add the offset to this
  2120 00004265 0FB61D(4CC70300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2121 0000426C 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2122 0000426F 488905(4DC70300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2123 00004276 8B0D(68C70300)      <1>     mov ecx, dword [tfrLen]
  2124 0000427C 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2125 0000427E 751F                <1>     jnz .mainWrite  
  2126                              <1> ;Here we have a zero byte write, so either truncate or have an extend
  2127 00004280 F605(63C70300)FF    <1>     test byte [fileGrowing], -1
  2128 00004287 750B                <1>     jnz .extend
  2129                              <1> ;Here we truncate where needed
  2130 00004289 8B05(44C70300)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2131 0000428F E850C7FFFF          <1>     call truncateFAT    ;Truncate from the current cluster 
  2132                              <1> .extend:
  2133 00004294 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2134 00004297 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2135 0000429A E9F5000000          <1>     jmp .noByteExit ;Exit ok!
  2136                              <1> .mainWrite:
  2137 0000429F F605(27C40300)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  2138 000042A6 7407                <1>     jz .mainWriteNoBreak
  2139 000042A8 50                  <1>     push rax
  2140 000042A9 E807DFFFFF          <1>     call checkBreak
  2141 000042AE 58                  <1>     pop rax
  2142                              <1> .mainWriteNoBreak:
  2143 000042AF E88DC4FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
  2144 000042B4 0F82D3000000        <1>     jc .badExit
  2145 000042BA 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2146 000042BE 0FB71D(55C70300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2147 000042C5 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2148                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2149                              <1>     ; 1) Sector size, 2) Bytes left to read from Request
  2150 000042C8 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2151 000042CC 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]
  2152 000042D2 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2153 000042D4 0F47CB              <1>     cmova ecx, ebx
  2154 000042D7 56                  <1>     push rsi
  2155 000042D8 488B35(0CC40300)    <1>     mov rsi, qword [currentDTA]
  2156 000042DF 51                  <1>     push rcx
  2157 000042E0 F3A4                <1>     rep movsb
  2158 000042E2 59                  <1>     pop rcx
  2159 000042E3 010D(57C70300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2160 000042E9 290D(6CC70300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2161 000042EF 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  2162 000042F6 5E                  <1>     pop rsi
  2163 000042F7 E885C2FFFF          <1>     call markBufferDirty
  2164 000042FC E84EC2FFFF          <1>     call writeThroughBuffers ;Write thru the disk buffers for this sector
  2165 00004301 7271                <1>     jc .exitPrepHardErr
  2166 00004303 8B05(68C70300)      <1>     mov eax, dword [tfrLen] ;Get total length
  2167 00004309 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2168 0000430F 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2169 00004311 0F8488000000        <1>     jz writeExit
  2170 00004317 E861C6FFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2171 0000431C 7256                <1>     jc .exitPrepHardErr
  2172 0000431E 3DFFFFFFFF          <1>     cmp eax, -1
  2173 00004323 753A                <1>     jne .noExtend
  2174                              <1>     ;Here we need to extend by a cluster
  2175 00004325 8B05(44C70300)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2176 0000432B 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2177 0000432D B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2178 00004332 E88EC5FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2179 00004337 723B                <1>     jc .exitPrepHardErr
  2180 00004339 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2181 0000433B 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2182 0000433F 011D(64C70300)      <1>     add dword [bytesAppend], ebx    ;Add a bytes per sector to filesize
  2183 00004345 C605(63C70300)FF    <1>     mov byte [fileGrowing], -1
  2184 0000434C E82CC6FFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2185 00004351 7221                <1>     jc .exitPrepHardErr
  2186 00004353 3DFFFFFFFF          <1>     cmp eax, -1
  2187 00004358 B805000000          <1>     mov eax, errAccDen
  2188 0000435D 7415                <1>     je .exitPrepHardErr
  2189                              <1> .noExtend:
  2190 0000435F 66C705(55C70300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2190 00004367 00                  <1>
  2191 00004368 488B05(4DC70300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2192 0000436F E92BFFFFFF          <1>     jmp .mainWrite
  2193                              <1> .exitPrepHardErr:
  2194 00004374 50                  <1>     push rax    ;Save error code
  2195 00004375 E825000000          <1>     call writeExit
  2196 0000437A 58                  <1>     pop rax
  2197                              <1> .badExitHard:    ;AL has error code already
  2198 0000437B E8ADC1FFFF          <1>     call cancelWriteThroughBuffers
  2199 00004380 B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2200 00004385 FF15(24C10300)      <1>     call qword [updateDirShare]
  2201 0000438B F9                  <1>     stc
  2202                              <1>     return
    18                              <2> %%_ret:
    19 0000438C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2203                              <1> .badExit:
  2204                              <1> ;Might need to do some weird stuff later. Leave for now
  2205 0000438D B805000000          <1>     mov eax, errAccDen
  2206 00004392 EBE7                <1>     jmp short .badExitHard
  2207                              <1> 
  2208                              <1> .noByteExit:
  2209 00004394 B802000000          <1>     mov eax, 2  ;Update last accessed fields of SFT
  2210 00004399 FF15(24C10300)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default so keep xor after
  2211                              <1> writeExit:
  2212                              <1> ;Advances the bytes on the file pointer
  2213                              <1> ;Return: ecx = Number of bytes transferred
  2214 0000439F 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2215 000043A6 E84B000000          <1>     call updateCurrentSFT
  2216 000043AB 85C9                <1>     test ecx, ecx   ;If no bytes transferred, dont flush
  2217 000043AD 7404                <1>     jz .noFlush
  2218 000043AF 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2219                              <1> .noFlush:
  2220 000043B3 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2221 000043B9 750E                <1>     jnz .exit
  2222 000043BB 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]
  2223 000043BE 39471B              <1>     cmp dword [rdi + sft.dCurntOff], eax
  2224 000043C1 7606                <1>     jbe .exit   ;Don't change filesize unless offset is past the Filesize
  2225 000043C3 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2226 000043C6 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2227                              <1> .exit:
  2228 000043C9 B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2229 000043CE FF15(24C10300)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2230 000043D4 F8                  <1>     clc
  2231                              <1>     return
    18                              <2> %%_ret:
    19 000043D5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2232                              <1> writeExitChar:
  2233                              <1> ;Input: eax = Number of chars transferred
  2234 000043D6 8B0D(68C70300)      <1>     mov ecx, dword [tfrLen]
  2235 000043DC 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2236 000043DE 890D(6CC70300)      <1>     mov dword [tfrCntr], ecx
  2237 000043E4 EBB9                <1>     jmp short writeExit
  2238                              <1> ;-----------------------------------:
  2239                              <1> ;        File Handle routines       :
  2240                              <1> ;-----------------------------------:
  2241                              <1> 
  2242                              <1> setCurrentSFT:
  2243                              <1> ;Set the pointer in rdi as current SFT 
  2244 000043E6 48893D(22C70300)    <1>     mov qword [currentSFT], rdi
  2245                              <1>     return 
    18                              <2> %%_ret:
    19 000043ED C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2246                              <1> getCurrentSFT:
  2247                              <1> ;Get the current SFT pointer in rdi
  2248 000043EE 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2249                              <1>     return 
    18                              <2> %%_ret:
    19 000043F5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2250                              <1> updateCurrentSFT:
  2251                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2252                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2253 000043F6 57                  <1>     push rdi
  2254 000043F7 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2255 000043FE E8A8010000          <1>     call getBytesTransferred
  2256 00004403 67E327              <1>     jecxz .exit ;Skip this if ecx = 0
  2257                              <1>     ;ecx has bytes transferred
  2258 00004406 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2259 0000440C 751F                <1>     jnz .exit
  2260 0000440E 50                  <1>     push rax
  2261 0000440F 8B05(44C70300)      <1>     mov eax, dword [currClustD]
  2262 00004415 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2263 00004418 8B05(40C70300)      <1>     mov eax, dword [currClustF]
  2264 0000441E 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2265 00004421 58                  <1>     pop rax
  2266 00004422 51                  <1>     push rcx
  2267 00004423 8B0D(57C70300)      <1>     mov ecx, dword [currByteF]
  2268 00004429 894F1B              <1>     mov dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  2269 0000442C 59                  <1>     pop rcx
  2270                              <1> .exit:
  2271 0000442D 5F                  <1>     pop rdi
  2272 0000442E F8                  <1>     clc
  2273                              <1>     return 
    18                              <2> %%_ret:
    19 0000442F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2274                              <1> 
  2275                              <1> setupVarsForTransfer:
  2276                              <1> ;Computes the actual bytes to be transferred and 
  2277                              <1> ; sets up internal variables for the transfer. 
  2278                              <1> ;Works for both reading and writing
  2279                              <1> ;Input: ecx = User desired Bytes to transfer
  2280                              <1> ;       rdi = SFT pointer for the file
  2281                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2282                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2283                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2284                              <1> ;
  2285                              <1> ;Note: Does not account for a FULL disk. When writing,
  2286                              <1> ; if the disk will get full as a result of the write,
  2287                              <1> ; stop at the last byte before the transfer. If the 
  2288                              <1> ; file pointer is past the last free byte, write 0
  2289 00004430 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2290 00004434 488935(FAC60300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2291 0000443B 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2292 0000443E 8905(57C70300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2293 00004444 890D(68C70300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2294 0000444A 890D(6CC70300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2295 00004450 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2296 00004456 7402                <1>     jz setupVarsForDiskTransfer
  2297 00004458 F8                  <1>     clc
  2298                              <1>     return
    18                              <2> %%_ret:
    19 00004459 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2299                              <1> setupVarsForDiskTransfer:
  2300                              <1> ;Extension of the above, but for Disk files only
  2301                              <1> ;Input: ecx = User desired Bytes to transfer
  2302                              <1> ;       rdi = SFT pointer for the file
  2303                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  2304                              <1> ;        CF=CY: Error exit
  2305 0000445A 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2306 0000445D 8905(57C70300)      <1>     mov dword [currByteF], eax
  2307 00004463 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2308                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2309 00004467 48892D(FAC60300)    <1>     mov qword [workingDPB], rbp
  2310 0000446E 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2311 00004471 881D(F9C60300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2312 00004477 8B05(57C70300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2313 0000447D 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2314 00004481 31D2                <1>     xor edx, edx    ;Zero rdx
  2315 00004483 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2316                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2317                              <1>     ;edx has the offset into that sector
  2318 00004485 8905(48C70300)      <1>     mov dword [currSectF], eax
  2319 0000448B 668915(55C70300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2320 00004492 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2321 00004494 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2322 00004497 8805(4CC70300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2323 0000449D 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2324 0000449F 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  2325 000044A2 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2326 000044A4 8915(40C70300)      <1>     mov dword [currClustF], edx ;Save in var
  2327 000044AA 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2328                              <1> .exit:
  2329 000044AC F8                  <1>     clc
  2330                              <1>     return 
    18                              <2> %%_ret:
    19 000044AD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2331                              <1> findFreeSFT:
  2332                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2333                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2334                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2335                              <1> ;        CF=CY => eax = errNhl, error exit
  2336 000044AE 31DB                <1>     xor ebx, ebx
  2337                              <1> .mainLp:
  2338 000044B0 53                  <1>     push rbx    ;Save the sft ndx
  2339 000044B1 E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2340 000044B6 5B                  <1>     pop rbx
  2341 000044B7 7307                <1>     jnc .sftExists
  2342 000044B9 B804000000          <1>     mov eax, errNhl
  2343 000044BE F9                  <1>     stc
  2344                              <1>     return
    18                              <2> %%_ret:
    19 000044BF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2345                              <1> .sftExists:
  2346 000044C0 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2347 000044C5 7427                <1>     je .sftFound
  2348 000044C7 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2349 000044CC 751C                <1>     jne .gotoNextNdx
  2350                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2351 000044CE 53                  <1>     push rbx
  2352 000044CF 488B1D(30C40300)    <1>     mov rbx, qword [serverPSP]
  2353 000044D6 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2354 000044DA 750B                <1>     jne .netGoToNextNdx
  2355 000044DC 0FB71D(38C40300)    <1>     movzx ebx, word [machineNum]
  2356 000044E3 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2357                              <1> .netGoToNextNdx:
  2358 000044E7 5B                  <1>     pop rbx
  2359 000044E8 7404                <1>     je .sftFound
  2360                              <1> .gotoNextNdx:
  2361 000044EA FFC3                <1>     inc ebx
  2362 000044EC EBC2                <1>     jmp short .mainLp
  2363                              <1> .sftFound:
  2364 000044EE 53                  <1>     push rbx
  2365 000044EF 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2366 000044F4 488B1D(30C40300)    <1>     mov rbx, qword [serverPSP]
  2367 000044FB 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2368 000044FF 0FB71D(38C40300)    <1>     movzx ebx, word [machineNum]
  2369 00004506 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2370 0000450A 5B                  <1>     pop rbx
  2371 0000450B F8                  <1>     clc
  2372                              <1>     return
    18                              <2> %%_ret:
    19 0000450C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2373                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216h
  2374                              <1> ;Return a pointer to the SFT entry in rdi
  2375                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2376                              <1> ;Output: rdi = SFT pointer
  2377 0000450D 488B3D(49C00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2378                              <1> .walk:
  2379 00004514 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2380 00004518 7212                <1>     jb .thisTable
  2381 0000451A 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2382 0000451E 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2383 00004521 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2384 00004528 75EA                <1>     jne .walk
  2385 0000452A F9                  <1>     stc
  2386                              <1>     return
    18                              <2> %%_ret:
    19 0000452B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2387                              <1> .thisTable:
  2388 0000452C 50                  <1>     push rax
  2389 0000452D 52                  <1>     push rdx
  2390 0000452E B84F000000          <1>     mov eax, sft_size
  2391 00004533 F7E3                <1>     mul ebx
  2392 00004535 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2393 00004538 5A                  <1>     pop rdx
  2394 00004539 58                  <1>     pop rax
  2395 0000453A 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2396                              <1>     return
    18                              <2> %%_ret:
    19 00004541 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2397                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
  2398                              <1> ;Return a zero extended value in rdi for the SFT entry
  2399                              <1> ;Input: bx = JFT handle (we zero extend)
  2400                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
  2401                              <1> ;        CF=CY => al = Error code, Fail
  2402 00004542 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2403 00004545 663B1DCEBAFFFF      <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
  2404 0000454C 7204                <1>     jb .ok
  2405 0000454E B006                <1>     mov al, errBadHdl
  2406 00004550 F9                  <1>     stc
  2407                              <1>     return
    18                              <2> %%_ret:
    19 00004551 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2408                              <1> .ok:
  2409 00004552 488B3D(14C40300)    <1>     mov rdi, qword [currentPSP]
  2410 00004559 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2411 0000455E F8                  <1>     clc
  2412                              <1>     return
    18                              <2> %%_ret:
    19 0000455F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2413                              <1> findFreeJFTEntry:
  2414                              <1> ;Finds a free JFT entry in the currentPSP.
  2415                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2416                              <1> ;        CF=CY => al=errNhl
  2417 00004560 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2418                              <1> .searchLp:
  2419 00004562 E8DBFFFFFF          <1>     call getJFTPtr
  2420 00004567 7209                <1>     jc .badExit
  2421 00004569 803FFF              <1>     cmp byte [rdi], -1
  2422                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000456C 74F1                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  2423 0000456E FFC3                <1>     inc ebx
  2424 00004570 EBF0                <1>     jmp short .searchLp
  2425                              <1> .badExit:
  2426 00004572 B004                <1>     mov al, errNhl
  2427 00004574 F9                  <1>     stc
  2428                              <1>     return
    18                              <2> %%_ret:
    19 00004575 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2429                              <1> getSFTPtr:
  2430                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2431                              <1> ;Input: bx = JFT handle
  2432                              <1> ;Output: CF=NC: rdi = SFT pointer
  2433                              <1> ;        CF=CY: Error, ax=Error code
  2434 00004576 E815000000          <1>     call derefSFTPtr
  2435                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000457B 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  2436 0000457D 50                  <1>     push rax
  2437 0000457E 0FB705(38C40300)    <1>     movzx eax, word [machineNum]
  2438 00004585 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2439 00004589 58                  <1>     pop rax
  2440                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000458A 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  2441 0000458C B006                <1>     mov al, errBadHdl   ;Error code
  2442 0000458E F9                  <1>     stc         ;Reset CF
  2443                              <1>     return
    18                              <2> %%_ret:
    19 0000458F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2444                              <1> 
  2445                              <1> derefSFTPtr:
  2446                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2447                              <1> ;Input: bx = File handle (gets zero extended)
  2448                              <1> ;Output: CF=NC: rdi = SFT pointer
  2449                              <1> ;        CF=CY: Error, ax=Error code
  2450 00004590 E8ADFFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2451 00004595 7205                <1>     jb .fail
  2452 00004597 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2453 0000459A 7504                <1>     jne .ok
  2454                              <1> .fail:
  2455 0000459C B006                <1>     mov al, errBadHdl
  2456 0000459E F9                  <1>     stc
  2457                              <1>     return
    18                              <2> %%_ret:
    19 0000459F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2458                              <1> .ok:
  2459 000045A0 53                  <1>     push rbx    ;Preserve the JFT handle
  2460 000045A1 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2461 000045A4 E864FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2462 000045A9 5B                  <1>     pop rbx 
  2463                              <1>     return
    18                              <2> %%_ret:
    19 000045AA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2464                              <1> 
  2465                              <1> getBytesTransferred:
  2466 000045AB 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2467 000045B1 F7D9                <1>     neg ecx ;Multiply by -1
  2468 000045B3 030D(68C70300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2469                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 000045B9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2470                              <1> 
  2471                              <1> getSFTndxInheritable:
  2472                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2473                              <1> ;Input: ebx = SFTndx (word)
  2474                              <1> ;Output: 
  2475                              <1> ;   ZF=ZE => Inheritable
  2476                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2477 000045BA 57                  <1>     push rdi
  2478 000045BB E84DFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2479 000045C0 7208                <1>     jc .badNdx
  2480 000045C2 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2481 000045C8 5F                  <1>     pop rdi
  2482                              <1>     return
    18                              <2> %%_ret:
    19 000045C9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2483                              <1> .badNdx:
  2484 000045CA 31FF                <1>     xor edi, edi
  2485 000045CC FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2486 000045CE F8                  <1>     clc
  2487 000045CF 5F                  <1>     pop rdi
  2488                              <1>     return
    18                              <2> %%_ret:
    19 000045D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2489                              <1> 
  2490                              <1> incrementOpenCount:
  2491                              <1> ;Given a SFTndx, this function will increment it's open count
  2492                              <1> ;Output:
  2493                              <1> ;   CF=NC => sftndx ok, count incremented
  2494                              <1> ;   CF=CY => Bad ndx
  2495 000045D1 57                  <1>     push rdi
  2496 000045D2 E836FFFFFF          <1>     call getSFTPtrfromSFTNdx
  2497 000045D7 7203                <1>     jc .exit
  2498 000045D9 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2499                              <1> .exit:
  2500 000045DC 5F                  <1>     pop rdi
  2501                              <1>     return
    18                              <2> %%_ret:
    19 000045DD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2502                              <1> 
  2503                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
  2504                              <1> ;Input: rdi = SFT pointer
  2505                              <1> ;Output: ax = Original wNumHandles count
  2506 000045DE 9C                  <1>     pushfq
  2507 000045DF 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2508 000045E2 FFC8                <1>     dec eax     ;Decrement count
  2509 000045E4 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2510 000045E6 FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2511                              <1> .exit:
  2512 000045E8 9D                  <1>     popfq
  2513 000045E9 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2514                              <1>     return
    18                              <2> %%_ret:
    19 000045EC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    34                                  %include "./Source/Kernel/FileIO/ioctl.asm"
    35                              <1> ioctrl:            ;ah = 44h, handle function
    36                              <1> ;Possible subfunctions
    37                              <1> ;======================================================
    38                              <1> ;Handle Information Functions                         |
    39                              <1> ;al = 00h => Get Handle Information word in dx        x
    40                              <1> ;al = 01h => Set Handle Information word              x
    41                              <1> ;======================================================
    42                              <1> ;IO Control String Functions (optionally implemented) |
    43                              <1> ;al = 02h => Read from Char device                    x
    44                              <1> ;al = 03h => Write to Char device                     x
    45                              <1> ;al = 04h => Read from Block device                   x
    46                              <1> ;al = 05h => Write to Block device                    x
    47                              <1> ;======================================================
    48                              <1> ;IO Status Functions (optionally implemented)         |
    49                              <1> ;al = 06h => Get input status                         x
    50                              <1> ;al = 07h => Get output status                        x
    51                              <1> ;======================================================
    52                              <1> ;Device information (optionally implemented)          |  
    53                              <1> ;al = 08h => Is a block device removable?       
    54                              <1> ;al = 09h => Is a logical device local or remote?   
    55                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    56                              <1> ;======================================================
    57                              <1> ;SHARE.EXE control                                    |
    58                              <1> ;al = 0Bh => Change sharing retry count               x  
    59                              <1> ;======================================================
    60                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    61                              <1> ;======================================================
    62                              <1> ;Generic IOCTL string (optionally implemented)
    63                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    64                              <1> ;======================================================
    65                              <1> ;Disk Drive change drive (optionally implemented)
    66                              <1> ;al = 0Eh => Get logical device                 
    67                              <1> ;al = 0Fh => Set logical device  
    68                              <1> ;======================================================
    69 000045ED 3C0F                <1>     cmp al, 15
    70 000045EF 774B                <1>     ja .invalidFunction
    71 000045F1 3C0C                <1>     cmp al, 0Ch
    72 000045F3 7451                <1>     je .accessDeniedError
    73 000045F5 84C0                <1>     test al, al
    74 000045F7 745B                <1>     jz .getDevWord
    75 000045F9 3C01                <1>     cmp al, 1
    76 000045FB 746E                <1>     je .setDevWord
    77 000045FD 2C02                <1>     sub al, 2
    78 000045FF 3C03                <1>     cmp al, 3
    79 00004601 7673                <1>     jbe .ioctlStringFunctions
    80 00004603 2C04                <1>     sub al, 4
    81 00004605 3C01                <1>     cmp al, 1
    82 00004607 0F8681010000        <1>     jbe .ioStatusFunctions
    83 0000460D 2C02                <1>     sub al, 2
    84 0000460F 3C02                <1>     cmp al, 2
    85 00004611 0F8644020000        <1>     jbe .devControl
    86 00004617 FEC8                <1>     dec al
    87 00004619 0F840F030000        <1>     jz .setSharingCount
    88 0000461F 2C02                <1>     sub al, 2
    89 00004621 0F8425030000        <1>     jz .genericCharDevIOCTL
    90 00004627 FEC8                <1>     dec al
    91 00004629 0F844B030000        <1>     jz .genericBlokDevIOCTL
    92 0000462F FEC8                <1>     dec al
    93 00004631 0F840A040000        <1>     jz .getDrvLogicalDevice
    94 00004637 E981040000          <1>     jmp .setDrvLogicalDevice
    95                              <1> .invalidFunction:
    96 0000463C B801000000          <1>     mov eax, errInvFnc
    97                              <1> .ifExit:
    98 00004641 E9B6210000          <1>     jmp extErrExit
    99                              <1> .accessDeniedError:
   100 00004646 B805000000          <1>     mov eax, errAccDen
   101 0000464B EBF4                <1>     jmp short .ifExit
   102                              <1> .badHandle:
   103 0000464D B806000000          <1>     mov eax, errBadHdl
   104 00004652 EBED                <1>     jmp short .ifExit
   105                              <1> 
   106                              <1> ;...Functions...
   107                              <1> .getDevWord:
   108                              <1> ;Input: bx = File Handle
   109 00004654 E837FFFFFF          <1>     call derefSFTPtr
   110 00004659 72F2                <1>     jc .badHandle
   111 0000465B 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
   112 0000465F 30C0                <1>     xor al, al
   113 00004661 E8E71C0000          <1>     call getUserRegs
   114 00004666 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   115                              <1>     return
    18                              <2> %%_ret:
    19 0000466A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   116                              <1> .setDevWord:
   117                              <1> ;Input: bx = File Handle
   118                              <1> ;       dl = Low byte of Device information word
   119 0000466B E820FFFFFF          <1>     call derefSFTPtr
   120 00004670 72DB                <1>     jc .badHandle 
   121 00004672 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
   122                              <1>     return
    18                              <2> %%_ret:
    19 00004675 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   123                              <1> .ioctlStringFunctions:
   124                              <1> ;al = 0 -> ReadCharDev
   125                              <1> ;al = 1 -> WriteCharDev
   126                              <1> ;al = 2 -> ReadDiskDev
   127                              <1> ;al = 3 -> WriteDiskDev
   128                              <1> ;Input: bx = File handle/drive number
   129                              <1> ;       ecx = Bytes to transfer
   130                              <1> ;       rdx = Ptr to string to transfer
   131 00004676 0FB6F3              <1>     movzx esi, bl
   132 00004679 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   133 00004680 C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   134 00004687 C605(5CC40300)00    <1>     mov byte [Int44bitfld], 0
   135                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   136                              <1> ;Setup the common ioReqPkt fields and the read/write 
   137 0000468E C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   138 00004691 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   139 00004694 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   140 00004698 51                  <1>     push rcx
   141 00004699 52                  <1>     push rdx
   142 0000469A B903000000          <1>     mov ecx, drvIOCTLREAD
   143 0000469F BA0C000000          <1>     mov edx, drvIOCTLWRITE
   144 000046A4 A801                <1>     test al, 1  ;If set, this is a write operation
   145 000046A6 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   146 000046A9 7507                <1>     jnz .notWrite
   147 000046AB 800D(5CC40300)01    <1>     or byte [Int44bitfld], critWrite
   148                              <1> .notWrite:
   149 000046B2 5A                  <1>     pop rdx
   150 000046B3 59                  <1>     pop rcx
   151 000046B4 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   152 000046B7 3C01                <1>     cmp al, 1
   153 000046B9 772F                <1>     ja .ioctlStringBlockDevice
   154                              <1>     ;Here we are for char devices only
   155 000046BB 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   156 000046BE E8CDFEFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   157 000046C3 7288                <1>     jc .badHandle 
   158 000046C5 C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr
   159 000046CC 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   160 000046D2 0F8464FFFFFF        <1>     jz .invalidFunction
   161                              <1> 
   162 000046D8 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   163 000046DC 800D(5CC40300)80    <1>     or byte [Int44bitfld], critCharDev
   164 000046E3 4887DE              <1>     xchg rbx, rsi   ;Swap back
   165 000046E6 31C0                <1>     xor eax, eax
   166 000046E8 EB38                <1>     jmp short .ioctlStringCommon
   167                              <1> .ioctlStringBlockDevice:
   168                              <1>     ;Here we are for block devices only
   169                              <1>     ;esi has the drive number
   170 000046EA C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
   171 000046F1 89F0                <1>     mov eax, esi
   172 000046F3 53                  <1>     push rbx
   173 000046F4 E8E11C0000          <1>     call getCDS ;Returns in al the unit number of the drive
   174 000046F9 5B                  <1>     pop rbx
   175 000046FA 730A                <1>     jnc .okDrive
   176 000046FC B80F000000          <1>     mov eax, errBadDrv
   177 00004701 E9F6200000          <1>     jmp extErrExit
   178                              <1> .okDrive:
   179 00004706 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
   180 0000470D 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   181 00004711 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   182 00004714 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   183 00004717 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   184 0000471B 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   185 0000471E 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   186                              <1> .ioctlStringCommon:
   187                              <1>     ;rsi -> Device Driver header
   188                              <1>     ;rbx -> Request Header
   189                              <1>     ;al = Media descriptor
   190 00004722 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   191 00004725 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLRW
   192 0000472B 0F840BFFFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   193                              <1>     ;Make request now
   194                              <1> .ioctlStringCommonRetry:
   195 00004731 51                  <1>     push rcx    ;Push xfrctr
   196 00004732 52                  <1>     push rdx    ;Buffer Ptr
   197 00004733 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   198 00004739 E824180000          <1>     call goDriver
   199 0000473E 5A                  <1>     pop rdx
   200 0000473F 59                  <1>     pop rcx
   201                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   202 00004740 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   203 00004746 0F84A2200000        <1>     jz extGoodExit
   204 0000474C 800D(5CC40300)18    <1>     or byte [Int44bitfld], critFailOK | critRetryOK | critFailOK
   205 00004753 8A4301              <1>     mov al, byte [rbx + ioReqPkt.unitnm]
   206 00004756 8A25(5CC40300)      <1>     mov ah, byte [Int44bitfld]
   207 0000475C 48893D(04C40300)    <1>     mov qword [xInt44RDI], rdi
   208 00004763 480FB67B03          <1>     movzx rdi, byte [rbx + ioReqPkt.status] ;Get low word of status (errorcde)
   209 00004768 E81D130000          <1>     call criticalDOSError
   210 0000476D 488B3D(04C40300)    <1>     mov rdi, qword [xInt44RDI]
   211 00004774 3C00                <1>     cmp al, critIgnore
   212 00004776 0F8472200000        <1>     je extGoodExit 
   213 0000477C 3C01                <1>     cmp al, critRetry
   214 0000477E 74B1                <1>     je .ioctlStringCommonRetry
   215 00004780 0FB64303            <1>     movzx eax, byte [rbx + ioReqPkt.status]    ;Get the error code into al
   216 00004784 0513000000          <1>     add eax, drvErrShft ;Convert to general error code
   217 00004789 E96E200000          <1>     jmp extErrExit
   218                              <1> 
   219                              <1> 
   220                              <1> .ioStatusFunctions:
   221                              <1> ;al = 0 -> Get input status 
   222                              <1> ;al = 1 -> Get output status
   223 0000478E E8FDFDFFFF          <1>     call derefSFTPtr
   224 00004793 0F82B4FEFFFF        <1>     jc .badHandle 
   225 00004799 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   226 000047A0 C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   227 000047A3 C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   228 000047AA 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;File cannot be redir!
   229 000047B0 0F8586FEFFFF        <1>     jnz .invalidFunction
   230 000047B6 C605(5CC40300)00    <1>     mov byte [Int44bitfld], 0
   231 000047BD B906000000          <1>     mov ecx, drvINSTATUS
   232 000047C2 BA0A000000          <1>     mov edx, drvOUTSTATUS
   233 000047C7 84C0                <1>     test al, al
   234 000047C9 0F45CA              <1>     cmovnz ecx, edx
   235 000047CC 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   236 000047CF 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   237 000047D5 7416                <1>     jz .ioStatDisk
   238 000047D7 C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr
   239 000047DE 800D(5CC40300)80    <1>     or byte [Int44bitfld], critCharDev
   240 000047E5 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   241 000047E9 30C0                <1>     xor al, al
   242 000047EB EB15                <1>     jmp short .ioStatCommon
   243                              <1> .ioStatDisk:
   244 000047ED C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
   245 000047F4 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   246 000047F8 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   247 000047FB 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   248 000047FE 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   249                              <1> .ioStatCommon:
   250 00004802 E85B170000          <1>     call goDriver
   251 00004807 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   252 0000480D 743E                <1>     jz .ioStatOk
   253                              <1>     ;Error handling here
   254                              <1> 
   255 0000480F 800D(5CC40300)18    <1>     or byte [Int44bitfld], critFailOK | critRetryOK | critFailOK
   256 00004816 8A4301              <1>     mov al, byte [rbx + statusReqPkt.unitnm]
   257 00004819 8A25(5CC40300)      <1>     mov ah, byte [Int44bitfld]
   258 0000481F 48893D(04C40300)    <1>     mov qword [xInt44RDI], rdi
   259 00004826 480FB67B03          <1>     movzx rdi, byte [rbx + statusReqPkt.status]
   260 0000482B E85A120000          <1>     call criticalDOSError
   261 00004830 488B3D(04C40300)    <1>     mov rdi, qword [xInt44RDI]
   262 00004837 3C00                <1>     cmp al, critIgnore
   263 00004839 7412                <1>     je .ioStatOk 
   264 0000483B 3C01                <1>     cmp al, critRetry
   265 0000483D 74C3                <1>     je .ioStatCommon
   266 0000483F 0FB64303            <1>     movzx eax, byte [rbx + statusReqPkt.status]    ;Get the error code into al
   267 00004843 0513000000          <1>     add eax, drvErrShft ;Convert to general error code
   268 00004848 E9AF1F0000          <1>     jmp extErrExit
   269                              <1> 
   270                              <1> .ioStatOk:
   271 0000484D 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   272 00004853 7403                <1>     jz .notBusyExit
   273 00004855 B0FF                <1>     mov al, -1  ;Device Busy/EOF
   274                              <1>     return 
    18                              <2> %%_ret:
    19 00004857 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   275                              <1> .notBusyExit:
   276                              <1> ;Device ready/NotEOF
   277 00004858 31C0                <1>     xor eax, eax
   278                              <1>     return
    18                              <2> %%_ret:
    19 0000485A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   279                              <1> 
   280                              <1> .devControl:
   281                              <1> ;al = 0 -> Is media removable?
   282                              <1> ;al = 1 -> Is device local or remote?
   283                              <1> ;al = 2 -> Is handle local or remote?
   284 0000485B 84C0                <1>     test al, al
   285 0000485D 746D                <1>     jz .remTest
   286 0000485F A801                <1>     test al, 1
   287 00004861 751B                <1>     jnz .deviceTest
   288                              <1> ;Handle Local or Remote
   289 00004863 E828FDFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   290 00004868 0F82DFFDFFFF        <1>     jc .badHandle 
   291 0000486E 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   292                              <1> .devControlExit:
   293 00004872 E8D61A0000          <1>     call getUserRegs
   294 00004877 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   295 0000487B 31C0                <1>     xor eax, eax
   296                              <1>     return 
    18                              <2> %%_ret:
    19 0000487D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   297                              <1> .deviceTest:
   298                              <1> ;Drive Local or Remote
   299                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   300                              <1> ;Else, just get the CDS word and swap subst and net
   301 0000487E 88D8                <1>     mov al, bl
   302 00004880 E8551B0000          <1>     call getCDS
   303 00004885 730A                <1>     jnc .devTestOkDrive
   304 00004887 B80F000000          <1>     mov eax, errBadDrv
   305 0000488C E96B1F0000          <1>     jmp extErrExit
   306                              <1> .devTestOkDrive:
   307 00004891 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   308 00004898 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   309 0000489C 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   310 000048A1 7513                <1>     jnz .remoteDrive
   311 000048A3 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   312 000048A7 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   313 000048AB 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   314 000048AF 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   315 000048B4 EBBC                <1>     jmp short .devControlExit
   316                              <1> .remoteDrive:
   317 000048B6 6689D3              <1>     mov bx, dx
   318 000048B9 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   319 000048BE 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   320 000048C3 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   321 000048C5 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   322 000048CA EBA6                <1>     jmp short .devControlExit   ;Store it
   323                              <1> 
   324                              <1> .remTest:
   325                              <1> ;Drive letter in bl
   326 000048CC 88D8                <1>     mov al, bl
   327 000048CE E8071B0000          <1>     call getCDS
   328 000048D3 730A                <1>     jnc .remTestOkDrive
   329                              <1> .remTestBadDrv:
   330 000048D5 B80F000000          <1>     mov eax, errBadDrv
   331 000048DA E91D1F0000          <1>     jmp extErrExit
   332                              <1> .remTestOkDrive:
   333 000048DF 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   334 000048E6 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   335 000048EC 75E7                <1>     jnz .remTestBadDrv
   336 000048EE 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   337 000048F5 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   338 000048F9 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   339 000048FC 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   340 00004900 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL
   341 00004906 0F8430FDFFFF        <1>     jz .invalidFunction
   342 0000490C C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   343 0000490F C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   344 00004913 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   345 00004919 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   346 0000491C E841160000          <1>     call goDriver
   347 00004921 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   348 00004925 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   349 0000492A C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   350                              <1>     return
    18                              <2> %%_ret:
    19 0000492D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   351                              <1> 
   352                              <1> .setSharingCount:
   353                              <1> ;Input: cx = Share Count
   354                              <1> ;       dx = Share Retry
   355 0000492E 66890D(25C00300)    <1>     mov word [shareCount], cx
   356 00004935 6685D2              <1>     test dx, dx
   357 00004938 0F84FEFCFFFF        <1>     jz .invalidFunction
   358 0000493E 668915(27C00300)    <1>     mov word [shareDelay], dx
   359 00004945 31C0                <1>     xor eax, eax
   360 00004947 E9A21E0000          <1>     jmp extGoodExit
   361                              <1> 
   362                              <1> .genericCharDevIOCTL:
   363 0000494C E825FCFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   364 00004951 7311                <1>     jnc .okHandle
   365                              <1> .ioctrlBadHandle:
   366 00004953 C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr
   367 0000495A B806000000          <1>     mov eax, errBadHdl
   368 0000495F E9981E0000          <1>     jmp extErrExit
   369                              <1> .okHandle:
   370 00004964 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   371 0000496A 75E7                <1>     jnz .ioctrlBadHandle
   372 0000496C 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   373 00004972 74DF                <1>     jz .ioctrlBadHandle
   374 00004974 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   375 00004978 EB49                <1>     jmp short .ioctlReqMake
   376                              <1> .genericBlokDevIOCTL:
   377 0000497A 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   378 0000497C 51                  <1>     push rcx
   379 0000497D 52                  <1>     push rdx
   380 0000497E E8571A0000          <1>     call getCDS ;Sets the current CDS
   381 00004983 5A                  <1>     pop rdx
   382 00004984 59                  <1>     pop rcx
   383 00004985 7217                <1>     jc .badDrv
   384                              <1>     ;Check the CDS not net, subst or join
   385 00004987 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
   386 0000498E 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   387 00004992 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   388 00004996 7406                <1>     jz .badDrv
   389 00004998 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   390 0000499C 7411                <1>     jz .goodDrive
   391                              <1> .badDrv:
   392 0000499E C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
   393 000049A5 B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   394 000049AA E94D1E0000          <1>     jmp extErrExit
   395                              <1> .goodDrive:
   396                              <1>     ;CDS is good,now get the DPB
   397 000049AF 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   398 000049B3 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   399 000049B7 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   400 000049BA 8805(B6C40300)      <1>     mov byte [primReqHdr + ioctlReqPkt.unitnm], al
   401 000049C0 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi 
   402                              <1> .ioctlReqMake:
   403                              <1> ;rsi must point to the driver header here
   404 000049C3 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   405 000049C9 7511                <1>     jnz .supportsIOCTL
   406                              <1> .badFunction:
   407 000049CB C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   408 000049D2 B801000000          <1>     mov eax, errInvFnc
   409 000049D7 E9201E0000          <1>     jmp extErrExit
   410                              <1> .supportsIOCTL:
   411                              <1>     ;Setup the request header
   412 000049DC 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   413 000049E3 C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   414 000049E6 C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   415 000049EA 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   416 000049F0 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   417 000049F4 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   418 000049F8 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   419 000049FB E84D190000          <1>     call getUserRegs
   420 00004A00 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   421 00004A04 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   422 00004A08 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   423 00004A0C 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   424 00004A10 4889FE              <1>     mov rsi, rdi
   425 00004A13 E84A150000          <1>     call goDriver
   426 00004A18 66F743030080        <1>     test word [rbx + ioctlReqPkt.status], drvErrStatus
   427 00004A1E 0F84CA1D0000        <1>     jz extGoodExit
   428 00004A24 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   429 00004A28 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   430 00004A2E 89F8                <1>     mov eax, edi
   431 00004A30 E8C90F0000          <1>     call xlatHardError
   432 00004A35 0FB705(00C40300)    <1>     movzx eax, word [errorExCde] 
   433 00004A3C E9BB1D0000          <1>     jmp extErrExit
   434                              <1> 
   435                              <1> .getDrvLogicalDevice:
   436 00004A41 88D8                <1>     mov al, bl
   437 00004A43 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   438 00004A4A C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   439 00004A4E C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   440 00004A51 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   441 00004A57 53                  <1>     push rbx
   442 00004A58 E87D190000          <1>     call getCDS
   443 00004A5D 8805(F9C60300)      <1>     mov byte [workingDrv], al
   444 00004A63 5B                  <1>     pop rbx
   445 00004A64 0F826BFEFFFF        <1>     jc .remTestBadDrv
   446 00004A6A 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   447 00004A71 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   448 00004A75 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   449 00004A79 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   450 00004A7C 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   451                              <1> 
   452 00004A7F 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   453 00004A85 0F84B1FBFFFF        <1>     jz .invalidFunction
   454 00004A8B E8D2140000          <1>     call goDriver
   455 00004A90 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   456 00004A96 7421                <1>     jz .getDrvOk
   457                              <1>     ;Can only Fail, Ignore and Abort.
   458 00004A98 0FB605(F9C60300)    <1>     movzx eax, byte [workingDrv]  
   459 00004A9F 80CC28              <1>     or ah, critRead | critIgnorOK | critFailOK
   460 00004AA2 0FB77B03            <1>     movzx edi, word [rbx + getDevReqPkt.status]
   461 00004AA6 E8DF0F0000          <1>     call criticalDOSError
   462 00004AAB 3C00                <1>     cmp al, critIgnore
   463 00004AAD 740A                <1>     je .getDrvOk
   464 00004AAF B801000000          <1>     mov eax, errInvFnc
   465 00004AB4 E9431D0000          <1>     jmp extErrExit
   466                              <1> .getDrvOk:
   467 00004AB9 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   468                              <1>     return
    18                              <2> %%_ret:
    19 00004ABC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   469                              <1> .setDrvLogicalDevice:
   470 00004ABD 88D8                <1>     mov al, bl
   471 00004ABF 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   472 00004AC6 C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   473 00004ACA C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   474 00004ACD 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   475 00004AD3 53                  <1>     push rbx
   476 00004AD4 E801190000          <1>     call getCDS
   477 00004AD9 8805(F9C60300)      <1>     mov byte [workingDrv], al
   478 00004ADF 5B                  <1>     pop rbx
   479 00004AE0 0F82EFFDFFFF        <1>     jc .remTestBadDrv
   480 00004AE6 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   481 00004AED 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   482 00004AF1 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   483 00004AF5 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   484 00004AF8 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   485 00004AFB 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   486 00004B01 0F8435FBFFFF        <1>     jz .invalidFunction
   487 00004B07 E856140000          <1>     call goDriver
   488 00004B0C 30C0                <1>     xor al, al
   489 00004B0E 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   490                              <1>     retz    ;Return if OK
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004B14 74A6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   491                              <1>     ;Can only Fail, Ignore and Abort.
   492 00004B16 0FB605(F9C60300)    <1>     movzx eax, byte [workingDrv]  
   493 00004B1D 80CC28              <1>     or ah, critRead | critIgnorOK | critFailOK
   494 00004B20 0FB77B03            <1>     movzx edi, word [rbx + getDevReqPkt.status]
   495 00004B24 E8610F0000          <1>     call criticalDOSError
   496 00004B29 3C00                <1>     cmp al, critIgnore
   497                              <1>     rete    ;Return if Ignore
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004B2B 748F                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   498 00004B2D B801000000          <1>     mov eax, errInvFnc
   499 00004B32 E9C51C0000          <1>     jmp extErrExit
   500                              <1> 
    35                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    36                              <1> ;Memory related functions
    37                              <1> 
    38                              <1> ;-----------------------------------:
    39                              <1> ;  Memory related Kernel routines   :
    40                              <1> ;-----------------------------------:
    41                              <1> allocateMemory:    ;ah = 48h
    42                              <1> ;Input: ebx = Number of paragraphs requested
    43                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    44                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    45 00004B37 E8751C0000          <1>     call dosCrit1Enter
    46 00004B3C 31D2                <1>     xor edx, edx
    47                              <1>     ;Clear the pointers
    48 00004B3E 488915(3AC40300)    <1>     mov qword [firstMCB], rdx
    49 00004B45 488915(42C40300)    <1>     mov qword [bestMCB], rdx
    50 00004B4C 488915(4AC40300)    <1>     mov qword [lastMCB], rdx
    51 00004B53 31ED                <1>     xor ebp, ebp    
    52 00004B55 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    53 00004B57 488B35(39C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    54                              <1> .walk:
    55 00004B5E 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    56 00004B61 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    57 00004B64 7409                <1>     je .walk1
    58 00004B66 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    59 00004B69 0F850B050000        <1>     jne badMCBChain
    60                              <1> .walk1:
    61                              <1>     ;Here if valid but not the last block
    62 00004B6F 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    63 00004B77 0F8582000000        <1>     jne .walk2
    64                              <1>     ;Here we consolidate adjacent free blocks if there are any
    65                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    66                              <1>     ;End consolidation at first non free block or at last block in chain
    67 00004B7D 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    68 00004B80 744A                <1>     je .det0    ;Determine if this block is useful
    69 00004B82 31C9                <1>     xor ecx, ecx
    70 00004B84 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    71 00004B87 4881C610000000      <1>     add rsi, mcb.program
    72                              <1> .cons0:
    73 00004B8E 48C1E104            <1>     shl rcx, 4
    74 00004B92 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    75 00004B95 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    76 00004B98 7409                <1>     je .cons1
    77 00004B9A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    78 00004B9D 0F85D7040000        <1>     jne badMCBChain 
    79                              <1> .cons1:
    80 00004BA3 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    81 00004BAB 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    82                              <1>     ;Here rsi, points to a free block, add it to rdi
    83 00004BAD 31C9                <1>     xor ecx, ecx
    84 00004BAF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    85 00004BB2 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    86 00004BB8 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    87 00004BBB 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    88 00004BBD 31D2                <1>     xor edx, edx
    89 00004BBF 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    90 00004BC2 48895608            <1>     mov qword [rsi + 8], rdx
    91 00004BC6 3C5A                <1>     cmp al, mcbMarkEnd
    92 00004BC8 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    93                              <1>     ;Here we deal with if the block was the last one 
    94 00004BCA 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    95                              <1> .det0:  ;Now determine if pointer in rdi is useful
    96 00004BCC 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    97                              <1> ;ebx must be less than the arena size for the arena to be useful!
    98 00004BCF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    99 00004BD2 39D9                <1>     cmp ecx, ebx
   100 00004BD4 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
   101 00004BD6 488935(4AC40300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
   102 00004BDD 488B05(3AC40300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
   103 00004BE4 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
   104 00004BE7 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
   105 00004BE9 488935(3AC40300)    <1>     mov qword [firstMCB], rsi
   106                              <1> .det1:
   107                              <1>     ;Now test for best fit.
   108 00004BF0 29D9                <1>     sub ecx, ebx    ;Block - ebx
   109 00004BF2 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   110 00004BF4 7209                <1>     jb .walk2
   111 00004BF6 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   112 00004BF8 488935(42C40300)    <1>     mov qword [bestMCB], rsi
   113                              <1> .walk2:
   114 00004BFF 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   115 00004C02 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   116 00004C04 31C9                <1>     xor ecx, ecx
   117 00004C06 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   118 00004C09 48C1E104            <1>     shl rcx, 4
   119 00004C0D 4881C610000000      <1>     add rsi, mcb.program
   120 00004C14 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   121 00004C17 E942FFFFFF          <1>     jmp .walk
   122                              <1> .allocate:
   123                              <1>     ;Allocation fails IF the pointer is the null pointer
   124 00004C1C 803D(C8C30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   125 00004C23 7266                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   126                              <1>     ;Fall thru if last fit
   127 00004C25 488B35(4AC40300)    <1>     mov rsi, qword [lastMCB]
   128 00004C2C 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   129 00004C2F 0F84D8000000        <1>     jz .allocFail
   130 00004C35 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   131 00004C37 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   132 00004C3A 31C9                <1>     xor ecx, ecx
   133 00004C3C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   134 00004C3F 29D9                <1>     sub ecx, ebx
   135 00004C41 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   136 00004C47 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   137 00004C4A 48C1E104            <1>     shl rcx, 4
   138 00004C4E 4881C610000000      <1>     add rsi, mcb.program
   139 00004C55 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   140 00004C58 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   141 00004C5A 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   142 00004C5D 488B15(14C40300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   143 00004C64 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   144 00004C68 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   145 00004C6F 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   146 00004C76 4889F0              <1>     mov rax, rsi
   147 00004C79 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   148 00004C7C 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   149 00004C80 E8C8030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   150 00004C85 E8311B0000          <1>     call dosCrit1Exit
   151                              <1>     return
    18                              <2> %%_ret:
    19 00004C8A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   152                              <1> .bfCommon:
   153 00004C8B 488B35(3AC40300)    <1>     mov rsi, qword [firstMCB]
   154 00004C92 803D(C8C30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   155 00004C99 480F4435(42C40300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   156 00004CA1 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   157 00004CA4 7467                <1>     jz .allocFail
   158 00004CA6 8A06                <1>     mov al, byte [rsi + mcb.marker]
   159 00004CA8 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   160 00004CAB 31C9                <1>     xor ecx, ecx
   161 00004CAD 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   162 00004CB0 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   163 00004CB2 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   164 00004CB8 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   165 00004CBB 488B15(14C40300)    <1>     mov rdx, qword [currentPSP]
   166 00004CC2 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   167 00004CC6 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   168 00004CC9 4881C610000000      <1>     add rsi, mcb.program
   169 00004CD0 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   170 00004CD6 48C1E304            <1>     shl rbx, 4
   171 00004CDA 4801DE              <1>     add rsi, rbx
   172 00004CDD 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   173 00004CDF 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   174 00004CE7 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   175 00004CEA 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   176 00004CF1 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   177 00004CF8 4889F8              <1>     mov rax, rdi
   178 00004CFB 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   179 00004CFE 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   180 00004D02 E846030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   181 00004D07 E8AF1A0000          <1>     call dosCrit1Exit
   182                              <1>     return
    18                              <2> %%_ret:
    19 00004D0C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   183                              <1> .allocFail:
   184                              <1>     ;Walk the MCB chain to determine the biggest block size
   185 00004D0D 488B35(39C00300)    <1>     mov rsi, [mcbChainPtr]
   186 00004D14 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   187                              <1> .af0:
   188 00004D16 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   189 00004D19 7409                <1>     je .af1
   190 00004D1B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   191 00004D1E 0F8556030000        <1>     jne badMCBChain
   192                              <1> .af1:
   193 00004D24 31C9                <1>     xor ecx, ecx
   194 00004D26 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   195 00004D29 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   196 00004D31 7505                <1>     jne .af2
   197 00004D33 39D9                <1>     cmp ecx, ebx
   198 00004D35 0F47D9              <1>     cmova ebx, ecx
   199                              <1> .af2:
   200 00004D38 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   201 00004D3B 7410                <1>     je .afExit
   202 00004D3D 48C1E104            <1>     shl rcx, 4
   203 00004D41 4881C610000000      <1>     add rsi, mcb.program
   204 00004D48 4801CE              <1>     add rsi, rcx
   205 00004D4B EBD7                <1>     jmp short .af1
   206                              <1> .afExit:
   207 00004D4D B808000000          <1>     mov eax, errNoMem
   208 00004D52 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   209 00004D59 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   210 00004D5C E91B030000          <1>     jmp mcbErrHdlr
   211                              <1> freeMemory:        ;ah = 49h
   212                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   213                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   214                              <1> ;Always skip the first block as this is the anchor for DOS
   215 00004D61 E84B1A0000          <1>     call dosCrit1Enter
   216 00004D66 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   217 00004D6D 31C9                <1>     xor ecx, ecx
   218 00004D6F 488B35(39C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   219 00004D76 4889F7              <1>     mov rdi, rsi
   220 00004D79 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   221 00004D7C 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   222 00004D80 4881C610000000      <1>     add rsi, mcb.program
   223 00004D87 4801CE              <1>     add rsi, rcx    ;Go to next block
   224                              <1> .mainLoop:
   225 00004D8A 31C9                <1>     xor ecx, ecx
   226 00004D8C 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   227 00004D8F 7409                <1>     je .valid
   228 00004D91 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   229 00004D94 0F85E0020000        <1>     jne badMCBChain
   230                              <1> .valid:
   231 00004D9A 4939F0              <1>     cmp r8, rsi
   232 00004D9D 741C                <1>     je .blockFound
   233                              <1>     ;Not valid, check if last block in chain
   234 00004D9F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   235 00004DA2 0F84A5000000        <1>     je .blockError
   236 00004DA8 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   237 00004DAB 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   238 00004DAF 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   239 00004DB6 4801CE              <1>     add rsi, rcx    ;Go to next block
   240 00004DB9 EBCF                <1>     jmp short .mainLoop
   241                              <1> .blockFound:
   242                              <1>     ;If hole, error.
   243                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   244 00004DBB 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   245 00004DC3 0F8484000000        <1>     je .blockError
   246 00004DC9 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   247 00004DD1 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   248 00004DD9 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   249                              <1>     ;It is, let it absorb this space
   250 00004DDB 31C9                <1>     xor ecx, ecx
   251 00004DDD 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   252 00004DE0 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   253 00004DE6 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   254                              <1>     ;Replace block marker
   255 00004DE9 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   256 00004DEB 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   257 00004DED 31C9                <1>     xor ecx, ecx
   258 00004DEF 48890E              <1>     mov qword [rsi], rcx
   259 00004DF2 48894E08            <1>     mov qword [rsi + 8], rcx
   260 00004DF6 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   261                              <1> .blockFoundCheckFollowing:
   262                              <1>     ;First check if we are the last block in chain
   263 00004DF9 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   264 00004DFC 7439                <1>     je .blockFoundExit  ;If yes, exit!
   265 00004DFE 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   266 00004E01 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   267 00004E04 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   268 00004E08 4881C110000000      <1>     add rcx, mcb.program
   269 00004E0F 4801CE              <1>     add rsi, rcx    ;Go to next block
   270 00004E12 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   271 00004E1A 751B                <1>     jne .blockFoundExit ;If not free, exit
   272                              <1>     ;If free, absorb into block pointed to by rdi
   273 00004E1C 31C9                <1>     xor ecx, ecx
   274 00004E1E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   275 00004E21 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   276 00004E27 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   277                              <1>     ;Replace block marker
   278 00004E2A 8A06                <1>     mov al, byte [rsi + mcb.marker]
   279 00004E2C 8807                <1>     mov byte [rdi + mcb.marker], al
   280 00004E2E 31C9                <1>     xor ecx, ecx
   281 00004E30 48890E              <1>     mov qword [rsi], rcx
   282 00004E33 48894E08            <1>     mov qword [rsi + 8], rcx
   283                              <1> .blockFoundExit:
   284 00004E37 E811020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   285 00004E3C E87A190000          <1>     call dosCrit1Exit
   286 00004E41 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   287 00004E48 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   288                              <1>     return
    18                              <2> %%_ret:
    19 00004E4C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   289                              <1> .blockError:
   290 00004E4D C605(FEC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   291 00004E54 B809000000          <1>     mov eax, errMemAddr
   292 00004E59 E89E190000          <1>     call extErrExit ;Error thru the unified error handler
   293 00004E5E E8EA010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   294 00004E63 E853190000          <1>     call dosCrit1Exit
   295                              <1>     return
    18                              <2> %%_ret:
    19 00004E68 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   296                              <1> reallocMemory:     ;ah = 4Ah
   297                              <1> ;Input: r8 = address of the block to be realloc'ed
   298                              <1> ;       ebx = How many paras this block should contain after realloc. 
   299                              <1> ;               If ebx = 0, jump to free memory
   300 00004E69 E843190000          <1>     call dosCrit1Enter
   301 00004E6E 85DB                <1>     test ebx, ebx
   302 00004E70 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   303 00004E76 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   304 00004E7D 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   305 00004E80 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   306 00004E83 7409                <1>     je .ctn
   307 00004E85 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   308 00004E88 0F856F010000        <1>     jne .badAddrGiven
   309                              <1> .ctn:
   310                              <1>     ;Provided block is valid and not a hole
   311                              <1>     ;Check if Growth or Shrink
   312 00004E8E 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   313 00004E96 74B5                <1>     je freeMemory.blockError
   314 00004E98 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   315 00004E9B 31C9                <1>     xor ecx, ecx
   316 00004E9D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   317 00004EA0 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   318 00004EA2 0F8791000000        <1>     ja .growth
   319 00004EA8 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   320                              <1> ;We can always shrink
   321 00004EAE 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   322 00004EB0 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   323 00004EB6 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   324 00004EB9 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   325 00004EBF 48C1E304            <1>     shl rbx, 4
   326 00004EC3 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   327 00004ECA 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   328 00004ECD 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   329 00004ECF C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   330 00004ED2 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   331 00004ED4 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   332 00004EDC 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   333 00004EDF 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   334 00004EE1 0F84E6000000        <1>     je .exit
   335                              <1> ;Else, now see if the block following is also free and absorb it
   336 00004EE7 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   337 00004EEA 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   338 00004EEE 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   339 00004EF5 4801CE              <1>     add rsi, rcx    ;Goto next arena
   340 00004EF8 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   341 00004EFB 7409                <1>     je .shrinkAbsorb
   342 00004EFD 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   343 00004F00 0F8574010000        <1>     jne badMCBChain
   344                              <1> .shrinkAbsorb:
   345 00004F06 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   346 00004F0E 0F85B9000000        <1>     jne .exit
   347                              <1>     ;It is free, absorb it
   348 00004F14 8A06                <1>     mov al, byte [rsi + mcb.marker]
   349 00004F16 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   350 00004F18 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   351 00004F1B 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   352 00004F1E 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   353 00004F21 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   354 00004F24 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   355 00004F28 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   356 00004F2B 31C9                <1>     xor ecx, ecx
   357                              <1>     ;Clear absorbed MCB
   358 00004F2D 48890E              <1>     mov qword [rsi], rcx
   359 00004F30 48894E08            <1>     mov qword [rsi + 8], rcx
   360 00004F34 E994000000          <1>     jmp .exit
   361                              <1> .growth:
   362                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   363 00004F39 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   364 00004F3C 0F84A5000000        <1>     je .notEnuffMem
   365                              <1> ;Now check the following space is free. If not, not enuff mem err
   366 00004F42 31C9                <1>     xor ecx, ecx
   367 00004F44 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   368 00004F47 48C1E104            <1>     shl rcx, 4
   369 00004F4B 4889F7              <1>     mov rdi, rsi    
   370 00004F4E 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   371 00004F55 4801CE              <1>     add rsi, rcx
   372 00004F58 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   373 00004F5B 7409                <1>     je .growthOK
   374 00004F5D 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   375 00004F60 0F8514010000        <1>     jne badMCBChain
   376                              <1> .growthOK:
   377                              <1>     ;rdi points to block we are growing
   378 00004F66 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   379 00004F6E 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   380                              <1>     ;rsi must own all memory up to the next owned arena
   381 00004F70 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   382 00004F72 31C9                <1>     xor ecx, ecx
   383 00004F74 31D2                <1>     xor edx, edx
   384 00004F76 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   385 00004F79 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   386 00004F7F 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   387 00004F82 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   388 00004F84 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   389 00004F86 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   390 00004F89 775E                <1>     ja .notEnuffMem1
   391 00004F8B 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   392 00004F8D 81FA01000000        <1>     cmp edx, 1
   393 00004F93 744E                <1>     je .notEnuffMem2
   394 00004F95 31C9                <1>     xor ecx, ecx
   395 00004F97 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   396 00004F9A 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   397 00004F9E 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   398 00004FA1 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   399 00004FA4 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   400 00004FAB 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   401 00004FAF 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   402 00004FB2 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   403 00004FB6 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   404                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   405                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   406 00004FB8 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   407 00004FBA 7411                <1>     jz .exit
   408 00004FBC 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   409 00004FC2 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   410 00004FC5 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   411                              <1> .exit:
   412 00004FCD E87B000000          <1>     call verifyIntegrityOfMCBChain
   413 00004FD2 E8E4170000          <1>     call dosCrit1Exit
   414 00004FD7 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   415 00004FDE 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   416                              <1>     return
    18                              <2> %%_ret:
    19 00004FE2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   417                              <1> .notEnuffMem2:
   418 00004FE3 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   419 00004FE5 EB02                <1>     jmp short .notEnuffMem1
   420                              <1> .notEnuffMem:
   421 00004FE7 31DB                <1>     xor ebx, ebx    ;No space to grow
   422                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   423 00004FE9 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   424 00004FEE 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   425 00004FF5 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   426 00004FF8 E97F000000          <1>     jmp mcbErrHdlr
   427                              <1> .badAddrGiven:
   428 00004FFD B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   429 00005002 E975000000          <1>     jmp mcbErrHdlr
   430                              <1> getsetMallocStrat: ;ah = 58h
   431 00005007 84C0                <1>     test al, al
   432 00005009 741F                <1>     jz .get
   433 0000500B 3C02                <1>     cmp al, 2
   434 0000500D 7337                <1>     jae .bad
   435                              <1> ;Set here
   436 0000500F 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   437 00005016 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   438 0000501A 8805(C8C30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   439 00005020 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   440 00005024 E824000000          <1>     call verifyIntegrityOfMCBChain
   441                              <1>     return
    18                              <2> %%_ret:
    19 00005029 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   442                              <1> .get:
   443 0000502A 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   444 00005031 31C0                <1>     xor eax, eax
   445 00005033 8A05(C8C30300)      <1>     mov al, byte [allocStrat]
   446 00005039 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   447 0000503C 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   448 00005040 E808000000          <1>     call verifyIntegrityOfMCBChain
   449                              <1>     return
    18                              <2> %%_ret:
    19 00005045 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   450                              <1> .bad:
   451 00005046 B801000000          <1>     mov eax, errInvFnc
   452 0000504B EB2F                <1>     jmp short mcbErrHdlr
   453                              <1> ;-----------------------------------:
   454                              <1> ;      Memory related routines      :
   455                              <1> ;-----------------------------------:
   456                              <1> verifyIntegrityOfMCBChain:
   457 0000504D 50                  <1>     push rax
   458 0000504E 53                  <1>     push rbx
   459 0000504F 488B1D(39C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   460                              <1> .ok:
   461 00005056 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   462 00005059 7408                <1>     je .ok1
   463 0000505B 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   464 0000505E 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   465                              <1> .exit:
   466 00005060 5B                  <1>     pop rbx
   467 00005061 58                  <1>     pop rax
   468                              <1>     return ;We have reached the end of the chain, return all good!
    18                              <2> %%_ret:
    19 00005062 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   469                              <1> .ok1:
   470 00005063 31C0                <1>     xor eax, eax
   471 00005065 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   472 00005068 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   473 0000506C 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   474 00005073 4801C3              <1>     add rbx, rax
   475 00005076 EBDE                <1>     jmp short .ok
   476                              <1> .bmcbPrep:
   477 00005078 5B                  <1>     pop rbx ;Pop off the stack first!
   478 00005079 58                  <1>     pop rax
   479                              <1> badMCBChain:
   480 0000507A B007                <1>     mov al, errMCBbad   ;Yikes!
   481                              <1> mcbErrHdlr:
   482                              <1>     ;Jumped to with eax = error code
   483 0000507C C605(FEC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   484 00005083 E874170000          <1>     call extErrExit ;Error thru the unified error handler
   485 00005088 3C07                <1>     cmp al, errMCBbad
   486                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000508A 74D6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   487 0000508C EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    36                                  %include "./Source/Kernel/MemExec/progMgmt.asm"
    37                              <1> ;EXEC and all default terminates are here
    38                              <1> 
    39                              <1> ;========================
    40                              <1> ;   Interrupt handlers
    41                              <1> ;========================
    42                              <1> terminateProcess:   ;Int 40h
    43 0000508E 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
    44 00005090 E98D150000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
    45                              <1> terminateRes:       ;Int 47h
    46                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    47 00005095 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    48 0000509B C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    49 0000509E B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    50 000050A3 E97A150000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    51                              <1> ;========================
    52                              <1> ;    Int 21h functions
    53                              <1> ;========================
    54                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    55                              <1> ;Input:
    56                              <1> ;rdx = Pointer to new PSP in memory.
    57                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    58                              <1> ;   Officially document that this MUST be paragraph aligned.
    59                              <1> ;rsi = alloc size for new psp block
    60 000050A8 C605(09C50300)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    61 000050AF 4C8B05(14C40300)    <1>     mov r8, qword [currentPSP]
    62 000050B6 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    63 000050B8 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    64 000050B9 EB0C                <1>     jmp short copyPSP.pspCommon
    65                              <1> copyPSP:      ;ah = 26h
    66                              <1> ;Input:
    67                              <1> ;rdx = Pointer to new PSP in memory.
    68                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    69                              <1> ;   Officially document that this MUST be paragraph aligned.
    70 000050BB 4C8B05(14C40300)    <1>     mov r8, qword [currentPSP]
    71 000050C2 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    72 000050C6 53                  <1>     push rbx    ;Save this value for PSP allocsize
    73                              <1> .pspCommon:
    74 000050C7 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    75 000050CE 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    76 000050D2 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    77                              <1> ;r8 is current PSP, now copy psp to rdx
    78                              <1> ;Preserve rdx and r8 until the end
    79 000050D6 4C89C6              <1>     mov rsi, r8
    80 000050D9 4889D7              <1>     mov rdi, rdx
    81 000050DC B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    82 000050E1 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    83 000050E4 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    84 000050EC F605(09C50300)FF    <1>     test byte [pspCopyFlg], -1
    85 000050F3 7449                <1>     jz .copy
    86                              <1>     ;Now reset the parent psp data
    87 000050F5 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    88 000050FD 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    89                              <1>     ;Now reset the copied jobFileTable
    90 00005101 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    91 00005105 0FB70D0EAFFFFF      <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    92 0000510C B0FF                <1>     mov al, -1
    93 0000510E F3AA                <1>     rep stosb   ;Store maxHndls many -1's 
    94                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    95 00005110 498D702A            <1>     lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    96 00005114 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    97 00005118 0FB70DFBAEFFFF      <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    98                              <1> .xfrJFT:
    99 0000511F 67E31C              <1>     jecxz .copy
   100 00005122 FFC9                <1>     dec ecx
   101 00005124 AC                  <1>     lodsb   ;Get the SFTndx in al
   102 00005125 0FB6D8              <1>     movzx ebx, al
   103 00005128 53                  <1>     push rbx
   104 00005129 E88CF4FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
   105 0000512E 58                  <1>     pop rax
   106 0000512F 7508                <1>     jnz .badJFT
   107 00005131 AA                  <1>     stosb   ;Else store the SFTndx at that position... 
   108 00005132 E89AF4FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
   109 00005137 EBE6                <1>     jmp short .xfrJFT
   110                              <1> .badJFT:
   111 00005139 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
   112 0000513C EBE1                <1>     jmp short .xfrJFT 
   113                              <1> .copy:
   114 0000513E C605(09C50300)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
   115 00005145 58                  <1>     pop rax ;Pop the allocsize back into rax
   116 00005146 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
   117                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
   118 00005149 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
   119 0000514D B042                <1>     mov al, 42h
   120 0000514F E8EB110000          <1>     call muxGetIntVector    ;Get vector in rbx
   121 00005154 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   122 00005157 48AB                <1>     stosq   ;Move rdi to next entry and store
   123 00005159 B043                <1>     mov al, 43h
   124 0000515B E8DF110000          <1>     call muxGetIntVector    ;Get vector in rbx
   125 00005160 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   126 00005163 48AB                <1>     stosq   ;Move rdi to next entry and store
   127 00005165 B044                <1>     mov al, 44h
   128 00005167 E8D3110000          <1>     call muxGetIntVector    ;Get vector in rbx
   129 0000516C 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   130 0000516F 48AB                <1>     stosq   ;Move rdi to next entry and store
   131                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   132 00005171 66C702CD40          <1>     mov word [rdx + psp.return], 040CDh  ;Int 40h
   133 00005176 66C74250CD41        <1>     mov word [rdx + psp.unixEntry], 041CDh  
   134 0000517C C64252CB            <1>     mov byte [rdx + psp.unixEntry + 2], 0CBh ;Return
   135                              <1>     return
    18                              <2> %%_ret:
    19 00005180 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   136                              <1> 
   137                              <1> terminateStayRes:  ;ah = 31h
   138                              <1> ;Input: al  = Error code
   139                              <1> ;       edx = Number of paragraphs to keep resident
   140 00005181 C605(F6C60300)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   141                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   142 00005188 81FA06000000        <1>     cmp edx, 6
   143 0000518E 7305                <1>     jae .aboveMinimum
   144 00005190 BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   145                              <1> .aboveMinimum:
   146                              <1> ;Now we setup a call to Realloc 
   147                              <1> ;Setup regs with: 
   148                              <1> ;   r8 = address of the block to be realloc'ed
   149                              <1> ;   ebx = How many paras this block should contain after realloc.
   150 00005195 4C8B05(14C40300)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   151 0000519C 89D3                <1>     mov ebx, edx
   152 0000519E 50                  <1>     push rax    ;Preserve errorlevel across call
   153 0000519F 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   154 000051A0 E8C4FCFFFF          <1>     call reallocMemory
   155 000051A5 5B                  <1>     pop rbx
   156 000051A6 58                  <1>     pop rax
   157 000051A7 7220                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   158 000051A9 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   159                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   160 000051AD EB1A                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   161                              <1> 
   162                              <1> simpleTerminate:   ;ah = 00h
   163 000051AF 31C0                <1>     xor eax, eax    ;Just fall through as normal
   164                              <1> terminateClean:    ;ah = 4Ch, EXIT
   165                              <1> ;Here we must:
   166                              <1> ;0) Build errorlevel and adjust variables accordingly
   167                              <1> ;1) Call Network Termination hook.
   168                              <1> ;2) Check if the program is it's own parent. If so, return.
   169                              <1> ;3) Swap the console back to the original driver if it is swapped.
   170                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   171                              <1> ;4) Free all file handles associated to the current process.
   172                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   173                              <1> ;5) Free all memory blocks that have the signature of current PSP
   174                              <1> ;6) Set current PSP to parent PSP
   175                              <1> ;7) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   176                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   177                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   178                              <1> ;10) Exit all critical sections.
   179                              <1> ;
   180                              <1> ; Step 0
   181                              <1> ;For now, just adjust error level in var
   182 000051B1 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   183 000051B3 8625(F6C60300)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   184 000051B9 F605(80C40300)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   185 000051C0 740D                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   186 000051C2 C605(F6C60300)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   187                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   188 000051C9 8A25(F6C60300)      <1>     mov ah, byte [exitType] ;Get the exitType
   189                              <1> .storeELvl:
   190 000051CF 668905(24C40300)    <1>     mov word [errorLevel], ax   ;Store word
   191                              <1>     
   192                              <1> ; Step 1 Tell network a process is terminating
   193 000051D6 B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   194 000051DB 4C8B05(14C40300)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   195 000051E2 CD4F                <1>     int 4Fh
   196                              <1> 
   197                              <1> ; Step 2
   198                              <1> .step1:
   199 000051E4 488B3D(14C40300)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   200 000051EB 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   201 000051EE 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   202 000051F2 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   203                              <1>     ;rete            ;If it is, simply return (al has errorLevel)
   204 000051F5 0F84DD000000        <1>     je .exit
   205                              <1> ; Step 3
   206 000051FB E849D0FFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   207                              <1> ; Step 3.5
   208 00005200 803D(F6C60300)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   209 00005207 0F849D000000        <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   210                              <1> ; Step 4
   211 0000520D 803D(F6C60300)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   212 00005214 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   213 00005216 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   214 0000521B CD4F                <1>     int 4Fh
   215                              <1> .skipAbortNetClose:
   216 0000521D FF15(D4C00300)      <1>     call qword [closeTaskShare] ;Close all shared files for this task
   217 00005223 FF15(ACC00300)      <1>     call qword [unloadDLLHook]  ;Now free exported function for this task
   218 00005229 4881C72A000000      <1>     add rdi, psp.jobFileTbl ;Move rdi to point to the start of the JFT
   219 00005230 4889FE              <1>     mov rsi, rdi    ;Point rsi to jft too
   220 00005233 0FB70DE0ADFFFF      <1>     movzx ecx, word [maxHndls] ;Number of entries in JFT
   221                              <1> .s4lp:
   222 0000523A AC                  <1>     lodsb   ;Inc rsi, get the SFT number in al
   223 0000523B 3CFF                <1>     cmp al, -1  ;End of open JFT entries?
   224 0000523D 7429                <1>     je .step5
   225 0000523F 0FB6D8              <1>     movzx ebx, al   ;Move the file handle number into ebx
   226                              <1>     ;Replace with a call to close the handle eventually
   227 00005242 57                  <1>     push rdi
   228 00005243 E848F3FFFF          <1>     call derefSFTPtr    ;Ret in rdi the SFT pointer
   229 00005248 7216                <1>     jc .badHdl  ;If a bad handle, skip the decrementing of the handle count
   230 0000524A FF35(22C70300)      <1>     push qword [currentSFT]
   231 00005250 E891F1FFFF          <1>     call setCurrentSFT  ;Set rdi to currentSFT
   232 00005255 E8D3E9FFFF          <1>     call closeMain  ;Close all files opened by this program. Decrement ref ONLY
   233                              <1>     ;closeMain also flushes all sectors associated to the file
   234                              <1>     ;Ignore errors, simply keep closing files
   235 0000525A 8F05(22C70300)      <1>     pop qword [currentSFT]
   236                              <1> .badHdl:
   237 00005260 5F                  <1>     pop rdi
   238 00005261 B0FF                <1>     mov al, -1
   239 00005263 AA                  <1>     stosb   ;Store a -1 in it's place (not strictly necessary)
   240 00005264 FFC9                <1>     dec ecx ;Zoom Zoom \mu-op!
   241 00005266 75D2                <1>     jnz .s4lp   ;Keep looping for all entries in the JFT 
   242                              <1> ;Step 5
   243                              <1> .step5:
   244 00005268 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   245                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   246                              <1>     ; with the currentPSP signature and free them.
   247 0000526F 488B35(39C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   248                              <1> .s5lp:  ;And walk the chain
   249                              <1> ;First verify the address in rsi is a valid mcb
   250 00005276 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   251 00005278 80F94D              <1>     cmp cl, mcbMarkCtn
   252 0000527B 7405                <1>     je .checkToFree
   253 0000527D 80F95A              <1>     cmp cl, mcbMarkEnd
   254 00005280 7528                <1>     jne .step6  ;Something wrong so stop freeing
   255                              <1> .checkToFree:
   256 00005282 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   257 00005286 750F                <1>     jne .noFree
   258 00005288 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   259 0000528C 53                  <1>     push rbx
   260 0000528D 51                  <1>     push rcx
   261 0000528E 56                  <1>     push rsi
   262 0000528F E8CDFAFFFF          <1>     call freeMemory ;Free this memory block
   263 00005294 5E                  <1>     pop rsi
   264 00005295 59                  <1>     pop rcx
   265 00005296 5B                  <1>     pop rbx
   266                              <1>     ;If an error occured, the internal vars will be set.
   267                              <1> .noFree:
   268 00005297 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   269 0000529A 740E                <1>     je .step6   ;Skip if we are
   270 0000529C 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   271 0000529F 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   272 000052A3 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   273 000052A8 EBCC                <1>     jmp short .s5lp
   274                              <1> ;Step 6
   275                              <1> .step6:
   276                              <1> 
   277 000052AA 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   278 000052AE 488905(14C40300)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   279                              <1> ;Step 7
   280                              <1>     ;rbx points to current PSP, the old parent task
   281                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   282 000052B5 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   283 000052B9 B044                <1>     mov al, 44h
   284 000052BB E8E9160000          <1>     call setIntVector
   285 000052C0 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   286 000052C4 B043                <1>     mov al, 43h
   287 000052C6 E8DE160000          <1>     call setIntVector
   288 000052CB 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   289 000052CF B042                <1>     mov al, 42h
   290 000052D1 52                  <1>     push rdx
   291 000052D2 E8D2160000          <1>     call setIntVector
   292 000052D7 5A                  <1>     pop rdx
   293                              <1> ;Step 8
   294                              <1> .exit:
   295 000052D8 B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   296 000052DA CD4A                <1>     int 4ah
   297                              <1> 
   298 000052DC FA                  <1>     cli
   299 000052DD 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP]
   300 000052E4 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   301                              <1>     ;Make the parent register frame the current one
   302                              <1>     ;Make RSP point to user stack from parent entry to exec
   303 000052E8 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   304                              <1> 
   305 000052EC 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   306 000052F1 48C744245802F20000  <1>     mov qword [rsp + callerFrame.flags], 0F202h ;Mimic DOS's return flags
   307                              <1> 
   308 000052FA C605(8AC40300)00    <1>     mov byte [Int44Trans], 0    ;Clear this flag
   309 00005301 C605(FDC30300)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   310 00005308 C605(FEC30300)FF    <1>     mov byte [errorDrv], -1 ;Reset
   311 0000530F E86F140000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   312                              <1>     
   313 00005314 48CF                <1>     iretq   ;and return to address that was in rdx
    37                                  %include "./Source/Kernel/MemExec/exec.asm"
    38                              <1> 
    39                              <1> 
    40                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    41                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
    42                              <1> ;       rbx = Ptr to the parameter block used for loading
    43                              <1> ;       al = Subfunction:
    44                              <1> ;            00h = Load Program and transfer control to it
    45                              <1> ;            01h = Load Program but do not transfer ctrl to it
    46                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    47                              <1> ;      Reserved for future expansion:
    48                              <1> ;            04h = Load in background execution mode (PE only)
    49                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    50                              <1> ;               function but in 16-bit mode. 
    51                              <1> ;
    52                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    53                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    54                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    55                              <1> 
    56                              <1> ;If AL = 0 :
    57                              <1> ;            Load Child Program and Xfr control to it
    58                              <1> ; rbx ------>   |-------------------------------|
    59                              <1> ;               |   Ptr to Environment Block    |
    60                              <1> ;               |                               |
    61                              <1> ;               | Can be 0 => Get pointer to    |
    62                              <1> ;               | parent Environment Block      |
    63                              <1> ;               |-------------------------------|
    64                              <1> ;               |   Ptr to Command Line to be   |
    65                              <1> ;               |   placed at PSP + 80h         |
    66                              <1> ;               |-------------------------------|
    67                              <1> ;               |   Ptr to first default FCB    |
    68                              <1> ;               |      to copy to PSP.fcb1      |
    69                              <1> ;               |                               |
    70                              <1> ;               | Should be used to parse the   |
    71                              <1> ;               |  first two command line args  |
    72                              <1> ;               |-------------------------------|
    73                              <1> ;               |   Ptr to second default FCB   |
    74                              <1> ;               |      to copy to PSP.fcb2      |
    75                              <1> ;               |-------------------------------|
    76                              <1> ;
    77                              <1> ;If AL = 1 :
    78                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    79                              <1> ; rbx ------>   |-------------------------------|
    80                              <1> ;               |         AS IN AL=00H          |
    81                              <1> ;               |-------------------------------|
    82                              <1> ;               |     Initial Value of RSP      |
    83                              <1> ;               |       on program launch       |
    84                              <1> ;               |                               |
    85                              <1> ;               |     This is returned to the   |
    86                              <1> ;               |         caller by DOS         |
    87                              <1> ;               |-------------------------------|
    88                              <1> ;               |     Initial Value of RIP      |
    89                              <1> ;               |       on program launch       |
    90                              <1> ;               |                               |
    91                              <1> ;               |     This is returned to the   |
    92                              <1> ;               |         caller by DOS         |
    93                              <1> ;               |-------------------------------|
    94                              <1> ;
    95                              <1> ;                      !!Important Note!!
    96                              <1> ;   The block pointed to by rbx must reserve the space for 
    97                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    98                              <1> ;
    99                              <1> ;If AL = 3 :
   100                              <1> ;                      Load program overlay
   101                              <1> ; rbx ------>   |-------------------------------|
   102                              <1> ;               |  Pointer to the byte in the   |
   103                              <1> ;               |  prog space to start writing  |
   104                              <1> ;               |        the overlay at         |
   105                              <1> ;               |-------------------------------|
   106                              <1> ;               | DWORD offset from the base of |
   107                              <1> ;               |  the program to the location  |
   108                              <1> ;               |  the overlay is being loaded  |
   109                              <1> ;               |              in               |
   110                              <1> ;               |  (Called a Relocation Factor) |
   111                              <1> ;               |     Only FOR EXE Overlays     |
   112                              <1> ;               |        for CODE fixups        |
   113                              <1> ;               |  For COM, Current PSP + 100h  |
   114                              <1> ;               |      assumed to suffice       |
   115                              <1> ;               |-------------------------------|
   116                              <1> ;
   117                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
   118                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
   119                              <1> ;
   120                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
   121 00005316 55                  <1>     push rbp
   122 00005317 4889E5              <1>     mov rbp, rsp
   123 0000531A 4881EC70000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   124                              <1>     ;Clear up the pointers on the stack frame
   125 00005321 31C0                <1>     xor eax, eax
   126 00005323 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   127 00005327 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax
   128 0000532B 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   129 0000532F 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   130 00005333 488945A8            <1>     mov qword [rbp - execFrame.pProgEP], rax
   131                              <1> 
   132                              <1> 
   133 00005337 3C03                <1>     cmp al, execOverlay
   134 00005339 7615                <1>     jbe .validSubfunction
   135                              <1> .badSubFunction:
   136 0000533B B801000000          <1>     mov eax, errInvFnc
   137 00005340 C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   138                              <1> .badExit:
   139 00005347 4889EC              <1>     mov rsp, rbp
   140 0000534A 5D                  <1>     pop rbp
   141 0000534B E9AC140000          <1>     jmp extErrExit
   142                              <1> 
   143                              <1> .validSubfunction:
   144 00005350 3C02                <1>     cmp al, execInvld
   145 00005352 74E7                <1>     je .badSubFunction
   146                              <1>     ;Save registers for each function call
   147 00005354 48895DD8            <1>     mov qword [rbp - execFrame.pParam], rbx
   148 00005358 488955D0            <1>     mov qword [rbp - execFrame.pProgname], rdx
   149 0000535C 0FB6C0              <1>     movzx eax, al
   150 0000535F 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   151 00005363 4889D7              <1>     mov rdi, rdx
   152 00005366 E83A110000          <1>     call strlen ;Get string length in cx
   153 0000536B 66894DE0            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   154                              <1>     ;Now open the file we wanna yeet to
   155 0000536F 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   156 00005371 55                  <1>     push rbp    ;Preserve local frame ptr
   157 00005372 E8DBD8FFFF          <1>     call openFileHdl
   158 00005377 5D                  <1>     pop rbp
   159 00005378 72CD                <1>     jc .badExit ;Exit preserving error code in al
   160                              <1>     ;Now ax has the file handle
   161 0000537A 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   162 0000537E 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   163 00005381 E80AF2FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   164 00005386 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   165 0000538A F7C280000000        <1>     test edx, devCharDev
   166 00005390 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   167 00005392 B002                <1>     mov al, errFnf
   168 00005394 E987050000          <1>     jmp .cleanAndFail
   169                              <1> .validDiskFile:
   170 00005399 31C0                <1>     xor eax, eax
   171 0000539B 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   172 0000539F 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   173 000053A3 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   174 000053A7 0F848D000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   175 000053AD 488B7DD8            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   176 000053B1 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   177 000053B4 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   178 000053B7 7514                <1>     jnz .copyEnvironmentBlock
   179 000053B9 488B35(14C40300)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   180 000053C0 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   181 000053C4 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   182 000053C8 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   183 000053CB 746D                <1>     jz .loadProgram
   184                              <1> .copyEnvironmentBlock:
   185 000053CD 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   186                              <1>     ;Get the length of the environment
   187 000053D0 B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   188 000053D5 31C0                <1>     xor eax, eax
   189 000053D7 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   190                              <1> .envVerifyLp:
   191 000053DA F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   192 000053DC 7531                <1>     jnz .invalidEnvironmentError
   193 000053DE 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   194 000053E1 FFC9                <1>     dec ecx
   195 000053E3 AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   196 000053E4 75F4                <1>     jnz .envVerifyLp
   197                              <1> 
   198 000053E6 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   199 000053E9 57                  <1>     push rdi     ;Save the length of the environment block
   200 000053EA 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   201 000053F0 0FB75DE0            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   202 000053F4 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   203 000053F6 89FB                <1>     mov ebx, edi
   204 000053F8 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   205 000053FB 55                  <1>     push rbp
   206 000053FC E836F7FFFF          <1>     call allocateMemory
   207 00005401 5D                  <1>     pop rbp
   208 00005402 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   209 00005403 7314                <1>     jnc .copyEnvironment
   210                              <1>     ;Fall thru if not enuff memory
   211                              <1> .insufficientMemory:
   212 00005405 B808000000          <1>     mov eax, errNoMem
   213 0000540A E911050000          <1>     jmp .cleanAndFail
   214                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   215 0000540F B80A000000          <1>     mov eax, errBadEnv
   216 00005414 E907050000          <1>     jmp .cleanAndFail
   217                              <1> 
   218                              <1> .copyEnvironment:
   219                              <1>     ;rax has the ptr to allocated memory block
   220                              <1>     ;rcx has the number of chars to copy from the source env block
   221 00005419 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   222 0000541C 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   223 00005420 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pParam]
   224 00005424 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   225 00005427 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   226 00005429 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   227 0000542E 66AB                <1>     stosw       ;Away you go!
   228 00005430 488B75D0            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   229 00005434 0FB74DE0            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   230 00005438 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   231                              <1> ;Done with the environment... more or less
   232                              <1> .loadProgram:
   233 0000543A B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   234 0000543F 488D15(D3D90300)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   235 00005446 E8F1040000          <1>     call .readDataFromHdl
   236 0000544B 0F82CA040000        <1>     jc .badFmtErr
   237 00005451 85C0                <1>     test eax, eax   ;Were zero bytes read?
   238 00005453 0F84C2040000        <1>     jz .badFmtErr
   239 00005459 3D40000000          <1>     cmp eax, imageDosHdr_size
   240 0000545E 0F8214030000        <1>     jb .loadCom
   241                              <1> 
   242 00005464 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   243 00005469 740B                <1>     je .proceedEXE
   244 0000546B 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   245 00005470 0F8502030000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   246                              <1> .proceedEXE:
   247                              <1>     ;Now we need to read e_lfanew
   248 00005476 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   249 00005477 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   250 0000547A 8955A8              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   251 0000547D 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   252 0000547F 30C0                <1>     xor al, al  ;Set file pointer from start of file
   253 00005481 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   254 00005485 E8DDD9FFFF          <1>     call lseekHdl   ;Move to that position in the file
   255                              <1> 
   256 0000548A 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   257 0000548B B918000000          <1>     mov ecx, imageFileHeader_size
   258 00005490 E8A7040000          <1>     call .readDataFromHdl       ;Now read the COFF header
   259 00005495 85C0                <1>     test eax, eax   ;Were zero bytes read?
   260 00005497 0F847E040000        <1>     jz .badFmtErr
   261 0000549D 3D18000000          <1>     cmp eax, imageFileHeader_size
   262 000054A2 0F8273040000        <1>     jb .badFmtErr
   263                              <1>     ;So now rdx points to the imageFileHeader
   264 000054A8 813A50450000        <1>     cmp dword [rdx + imageFileHeader.dPESignature], imagePESignature
   265 000054AE 0F8567040000        <1>     jne .badFmtErr
   266 000054B4 66817A046486        <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   267 000054BA 0F855B040000        <1>     jne .badFmtErr
   268 000054C0 66817A147000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   269 000054C6 0F824F040000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   270                              <1>     ;Now save the number of sections in the the file
   271 000054CC 0FB74206            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   272 000054D0 85C0                <1>     test eax, eax   ;If this is 0, what?
   273 000054D2 0F8443040000        <1>     jz .badFmtErr
   274 000054D8 668945A0            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   275                              <1> 
   276                              <1>     ;Now load Optional header, file ptr points to it so all good!
   277 000054DC B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   278                              <1>     ;rdx points to exeHdrSpace
   279 000054E1 E856040000          <1>     call .readDataFromHdl
   280 000054E6 85C0                <1>     test eax, eax   ;Were zero bytes read?
   281 000054E8 0F842D040000        <1>     jz .badFmtErr
   282 000054EE 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   283 000054F3 0F8222040000        <1>     jb .badFmtErr
   284                              <1>     ;Now File Ptr points to data dirs, not an issue
   285 000054F9 81459870000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   286                              <1>     ;We load the program in, one section at a time, reading section headers in
   287                              <1>     ; one at a time to the section header internal buffer.
   288 00005500 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   289 00005504 745D                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   290 00005506 8B1D(0BDA0300)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   291 0000550C 488B05(1BDA0300)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   292 00005513 4885C0              <1>     test rax, rax
   293 00005516 750A                <1>     jnz .notDefaultStackAlloc
   294 00005518 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   294 00005521 00                  <1>
   295                              <1> .notDefaultStackAlloc:
   296 00005522 01C3                <1>     add ebx, eax    ;Add stack allocation
   297 00005524 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   298 0000552A 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   299 0000552D 81C311000000        <1>     add ebx, 11h
   300 00005533 C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   301 00005536 55                  <1>     push rbp
   302 00005537 E8FBF5FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   303 0000553C 5D                  <1>     pop rbp
   304 0000553D 0F82C2FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   305 00005543 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   306 00005547 480500010000        <1>     add rax, psp_size
   307 0000554D 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of code goes here
   308                              <1>     ;Finally, just check that we have some code to execute. 
   309                              <1>     ;Empty code sections are NOT allowed if executing. Only for overlays
   310 00005551 813D(D7D90300)0000- <1>     cmp dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfCode], 0
   310 00005559 0000                <1>
   311 0000555B 0F84BA030000        <1>     je .badFmtErr   ;If no bytes, exit error
   312 00005561 EB0F                <1>     jmp short .exeProceed1
   313                              <1> .exeOvlySkipAlloc:
   314 00005563 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   315 00005567 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   316 0000556A 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   317 0000556E 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax   ;Pretend this is the case
   318                              <1> .exeProceed1:
   319                              <1>     ;Now we align the progBase to full header size aligned to the next page
   320 00005572 8B1D(0FDA0300)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   321 00005578 4801D8              <1>     add rax, rbx    ;Add this offset where the header should go in future
   322                              <1>     ;Now we section pad
   323 0000557B 50                  <1>     push rax
   324 0000557C 8B0D(F3D90300)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   325 00005582 FFC9                <1>     dec ecx ;Turn into a mask
   326 00005584 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   327 00005587 FFC1                <1>     inc ecx
   328 00005589 4829C1              <1>     sub rcx, rax
   329 0000558C 5F                  <1>     pop rdi
   330 0000558D 31C0                <1>     xor eax, eax
   331 0000558F F3AA                <1>     rep stosb
   332 00005591 48897DB8            <1>     mov qword [rbp - execFrame.pProgBase], rdi
   333                              <1>     ;So now copy one section at a time, read section header in
   334                              <1>     ;File pointer points to the directory table, so skip that
   335 00005595 8B15(3FDA0300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   336 0000559B 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   337 000055A1 0F8274030000        <1>     jb .badFmtErr
   338                              <1>     ;dec edx ;Decrement by 1 to make into a 0 based offset
   339                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   340 000055A7 C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   341 000055AA 31C9                <1>     xor ecx, ecx
   342 000055AC 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   343 000055B0 B001                <1>     mov al, 1   ;Move handle forwards from current position
   344 000055B2 E8B0D8FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   345                              <1>     ;eax has pointer location after adjustment
   346 000055B7 894598              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   347                              <1>     ;File now points to start of Section headers. Read first header in.
   348                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   349 000055BA 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   350 000055BE 0FB74DA0            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   351                              <1> .loadLp:
   352 000055C2 51                  <1>     push rcx    ;Save # of segments left on stack
   353 000055C3 57                  <1>     push rdi    ;Save the current buffer ptr here
   354 000055C4 B928000000          <1>     mov ecx, imageSectionHdr_size
   355 000055C9 488D15(43DA0300)    <1>     lea rdx, sectHdr    ;Read section headers here
   356 000055D0 E867030000          <1>     call .readDataFromHdl
   357 000055D5 5F                  <1>     pop rdi
   358 000055D6 59                  <1>     pop rcx
   359 000055D7 85C0                <1>     test eax, eax
   360 000055D9 0F843C030000        <1>     jz .badFmtErr
   361 000055DF 3D28000000          <1>     cmp eax, imageSectionHdr_size
   362 000055E4 0F8531030000        <1>     jne .badFmtErr
   363                              <1>     ;File ptr moved forwards to next section header
   364 000055EA 81459828000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   365                              <1>     ;Section header read, now we load section into memory
   366                              <1>     ;Move file ptr to data location
   367 000055F1 8B15(57DA0300)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   368 000055F7 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   369 000055FB 31C0                <1>     xor eax, eax    ;Seek from start of file
   370 000055FD 51                  <1>     push rcx
   371 000055FE 57                  <1>     push rdi
   372 000055FF E863D8FFFF          <1>     call lseekHdl
   373 00005604 5F                  <1>     pop rdi
   374 00005605 59                  <1>     pop rcx
   375                              <1> 
   376 00005606 51                  <1>     push rcx
   377 00005607 57                  <1>     push rdi    ;Save current buffer offset
   378 00005608 8B0D(53DA0300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dSizeOfRawData]   ;Get # of bytes
   379 0000560E 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   380 00005611 E826030000          <1>     call .readDataFromHdl
   381 00005616 5F                  <1>     pop rdi
   382 00005617 59                  <1>     pop rcx
   383 00005618 0F82FD020000        <1>     jc .badFmtErr
   384 0000561E 85C0                <1>     test eax, eax
   385 00005620 0F84F5020000        <1>     jz .badFmtErr
   386 00005626 3B05(53DA0300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   387 0000562C 0F85E9020000        <1>     jne .badFmtErr
   388                              <1>     ;Data read ok, now fill in any zeros needed
   389 00005632 8B05(53DA0300)      <1>     mov eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   390 00005638 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   391 0000563B 3B05(4BDA0300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   392 00005641 730E                <1>     jae .skipInnerPadding
   393 00005643 51                  <1>     push rcx
   394 00005644 8B0D(4BDA0300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]
   395 0000564A 29C1                <1>     sub ecx, eax    ;Get number of bytes to pad with in ecx
   396                              <1>     ;rdi points to pad space
   397 0000564C 31C0                <1>     xor eax, eax
   398 0000564E F3AA                <1>     rep stosb   ;Pad that many zeros
   399 00005650 59                  <1>     pop rcx
   400                              <1> .skipInnerPadding:
   401 00005651 51                  <1>     push rcx
   402                              <1>     ;Here do section padding
   403 00005652 4889F8              <1>     mov rax, rdi    ;Get the current address
   404 00005655 8B0D(F3D90300)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   405 0000565B FFC9                <1>     dec ecx ;Turn into a mask
   406 0000565D 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   407 00005660 FFC1                <1>     inc ecx
   408 00005662 4829C1              <1>     sub rcx, rax
   409                              <1>     ;mov rcx, rax    ;Thats the number of bytes to pad by
   410 00005665 31C0                <1>     xor eax, eax
   411 00005667 F3AA                <1>     rep stosb
   412 00005669 59                  <1>     pop rcx
   413 0000566A FFC9                <1>     dec ecx ;Decrement our section counter
   414 0000566C 7419                <1>     jz .doExeFixups
   415                              <1>     ;Read next section header in here
   416 0000566E 51                  <1>     push rcx
   417 0000566F 57                  <1>     push rdi
   418 00005670 30C0                <1>     xor al, al  ;Move rel start of file
   419 00005672 8B5598              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   420 00005675 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   421 00005679 31C9                <1>     xor ecx, ecx
   422 0000567B E8E7D7FFFF          <1>     call lseekHdl
   423 00005680 5F                  <1>     pop rdi
   424 00005681 59                  <1>     pop rcx
   425 00005682 E93BFFFFFF          <1>     jmp .loadLp
   426                              <1> .doExeFixups:
   427                              <1> ;Here we fixup addresses as needed
   428                              <1> ;Program Entrypoint is saved in the header structure in the SDA
   429                              <1> ;Move File pointer to COFF header Coff + optional header sizes
   430                              <1> ;We look only for .reloc segment. We have it in memory too so use it to make 
   431                              <1> ; fixups. Zero the in memory image of reloc segment once we are done with it. 
   432                              <1> ;We checked that .reloc exists so all ok
   433 00005687 8B15(3FDA0300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   434 0000568D 8B55A8              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   435 00005690 81C2B0000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   436                              <1>     ;eax now points to position in file of direcotry entry for reloc
   437 00005696 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   438 0000569A 31C0                <1>     xor eax, eax
   439 0000569C E8C6D7FFFF          <1>     call lseekHdl   ;Move handle there in file
   440 000056A1 894598              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   441 000056A4 B908000000          <1>     mov ecx, imageDataDirectory_size
   442                              <1>     ;Read 8 bytes into sectHdr space
   443 000056A9 488D15(43DA0300)    <1>     lea rdx, sectHdr
   444 000056B0 E887020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   445                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   446 000056B5 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay    ;If overlay, skip this
   447 000056B9 745F                <1>     jz .exeComplete
   448 000056BB 8B35(43DA0300)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   449 000056C1 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   450 000056C3 7455                <1>     jz .exeComplete   ;... including if overlay
   451 000056C5 480375B8            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   452                              <1>     ;Now rsi points to where in memory the relocation data table is
   453                              <1>     ;Now compute the relocation factor 
   454 000056C9 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   455 000056CD 482B05(EBD90300)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   456                              <1>     ;The value in rax gives how much to subtract by
   457 000056D4 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   458 000056D8 7507                <1>     jne .notOverlayReloc
   459 000056DA 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   460 000056DE 034308              <1>     add eax, dword [rbx + loadOvly.dRelocFct]   ;Add the overlay reloc factor
   461                              <1> .notOverlayReloc:
   462 000056E1 48894598            <1>     mov qword [rbp - execFrame.qRelocVal], rax  ;Save relocation value
   463 000056E5 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   464                              <1>     ;rsi points to relocation data table in memory
   465 000056E8 8B0D(47DA0300)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   466 000056EE 85C9                <1>     test ecx, ecx    ;If no relocations, skip
   467 000056F0 7428                <1>     jz .exeComplete
   468 000056F2 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   469                              <1>     ;rsi points to the first base relocation block. The relocations begin
   470                              <1>     ; after the first block
   471                              <1>     ;ecx has the number of base relocation blocks to process.
   472                              <1> .nextBlock:
   473 000056F6 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   474 000056F7 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   475 000056F9 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   476 000056FC 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes
   477 000056FF D1E9                <1>     shr ecx, 1  ;Divide by 2 to get number of words = # of relocs to do
   478 00005701 67E311              <1>     jecxz .blockDone
   479                              <1> .blockNotDone:
   480 00005704 66AD                <1>     lodsw   ;Get the next page offset word
   481 00005706 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   482 0000570B 4801C7              <1>     add rdi, rax    ;Add this offset to rdi, the pointer to program image
   483                              <1>     ;rdi points to qword to rebase
   484 0000570E 48011F              <1>     add qword [rdi], rbx    ;Relocation factor was saved in rbx
   485 00005711 FFC9                <1>     dec ecx
   486 00005713 75EF                <1>     jnz .blockNotDone
   487                              <1> .blockDone:
   488 00005715 59                  <1>     pop rcx
   489 00005716 FFC9                <1>     dec ecx
   490 00005718 75DC                <1>     jnz .nextBlock
   491                              <1> .exeComplete:
   492 0000571A 8B05(E3D90300)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   493 00005720 480345B8            <1>     add rax, qword [rbp - execFrame.pProgBase]
   494 00005724 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   495 00005728 488945A8            <1>     mov qword [rbp - execFrame.pProgEP], rax
   496                              <1>     ;Now we copy the header into the memory space to pspPtr+psp_size
   497 0000572C 31C9                <1>     xor ecx, ecx
   498 0000572E 31D2                <1>     xor edx, edx
   499 00005730 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]    ;Get the handle
   500 00005734 31C0                <1>     xor eax, eax
   501 00005736 E82CD7FFFF          <1>     call lseekHdl
   502 0000573B 8B0D(0FDA0300)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   503 00005741 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase] 
   504 00005745 4881C200010000      <1>     add rdx, psp_size
   505 0000574C E8EB010000          <1>     call .readDataFromHdl
   506 00005751 0F82C4010000        <1>     jc .badFmtErr
   507 00005757 85C0                <1>     test eax, eax
   508 00005759 0F84BC010000        <1>     jz .badFmtErr
   509 0000575F 39C1                <1>     cmp ecx, eax
   510 00005761 0F85B4010000        <1>     jnz .badFmtErr
   511 00005767 FF15(A4C00300)      <1>     call qword [registerDLL]    ;Now we register the DLL
   512 0000576D 0F82A8010000        <1>     jc .badFmtErr   ;If this errors out for some reason, quit loading EXE
   513 00005773 E9A1000000          <1>     jmp .buildChildPSP
   514                              <1> .loadCom:
   515                              <1>     ;File is open here, so just read the file into memory. 
   516                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   517                              <1>     ;Allocate 64Kb of memory, or as much as we can
   518 00005778 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   519 0000577C 7450                <1>     je .comOverlay
   520 0000577E BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   521 00005783 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   522 00005786 55                  <1>     push rbp
   523 00005787 E8ABF3FFFF          <1>     call allocateMemory
   524 0000578C 5D                  <1>     pop rbp
   525 0000578D 734C                <1>     jnc .comallocOk
   526 0000578F 3C08                <1>     cmp al, errNoMem
   527 00005791 0F8589010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   528                              <1>     ;rbx should have the amount available
   529                              <1>     ;We check if this value is psp_size more than filesize
   530 00005797 53                  <1>     push rbx    ;Save new minimum size
   531 00005798 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   532 0000579D 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   533 000057A1 31D2                <1>     xor edx, edx    ;Go to end of file
   534 000057A3 E8BFD6FFFF          <1>     call lseekHdl
   535                              <1>     ;eax has file size
   536 000057A8 5B                  <1>     pop rbx ;Get back max alloc size
   537 000057A9 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   538 000057AB 29C2                <1>     sub edx, eax
   539 000057AD 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   540 000057B3 0F824CFCFFFF        <1>     jb .insufficientMemory   ;Fail
   541 000057B9 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   542 000057BC 55                  <1>     push rbp
   543 000057BD E875F3FFFF          <1>     call allocateMemory
   544 000057C2 5D                  <1>     pop rbp
   545 000057C3 0F8257010000        <1>     jc .cleanAndFail
   546 000057C9 E90D000000          <1>     jmp .comallocOk
   547                              <1> .comOverlay:
   548                              <1>     ;Here we simply read the file into the buffer provided
   549 000057CE 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   550 000057D2 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   551 000057D5 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   552 000057D9 EB0A                <1>     jmp short .comRead
   553                              <1> .comallocOk:
   554                              <1>     ;rax should point to the first byte
   555 000057DB 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   556 000057DF 480500010000        <1>     add rax, psp_size
   557                              <1> .comRead:
   558 000057E5 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   559                              <1> 
   560 000057E9 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   561 000057EE 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   562 000057F2 31D2                <1>     xor edx, edx    ;Go to end of file
   563 000057F4 E86ED6FFFF          <1>     call lseekHdl
   564                              <1>     ;eax has filesize now
   565 000057F9 50                  <1>     push rax    ;Save filesize
   566 000057FA 31C0                <1>     xor eax, eax    ;Reposition to start of file
   567 000057FC 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   568 00005800 31D2                <1>     xor edx, edx    ;Go to start of file
   569 00005802 E860D6FFFF          <1>     call lseekHdl
   570 00005807 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   571 00005808 488B55B8            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   572 0000580C E82B010000          <1>     call .readDataFromHdl   ;Read from the file handle
   573 00005811 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   574 00005815 488945A8            <1>     mov qword [rbp - execFrame.pProgEP], rax
   575                              <1> .buildChildPSP:
   576                              <1>     ;We can close handle now
   577 00005819 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   578 0000581D 55                  <1>     push rbp
   579 0000581E E859D5FFFF          <1>     call closeFileHdl   ;Close the file
   580 00005823 5D                  <1>     pop rbp
   581                              <1> 
   582                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   583 00005824 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   584 00005828 0F84CB000000        <1>     je .overlayExit
   585                              <1>     ;Now build the PSP
   586 0000582E 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   587 00005831 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   588 00005835 52                  <1>     push rdx
   589 00005836 55                  <1>     push rbp
   590 00005837 E86CF8FFFF          <1>     call createPSP
   591 0000583C 5D                  <1>     pop rbp
   592 0000583D 5A                  <1>     pop rdx
   593                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   594 0000583E 488915(14C40300)    <1>     mov qword [currentPSP], rdx
   595 00005845 E8670F0000          <1>     call dosCrit1Enter
   596 0000584A E814010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   597                              <1> 
   598 0000584F 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   599 00005856 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi ;and set it!
   600                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   601                              <1>     ; and set FS to point to the PSP
   602 0000585D 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   603                              <1> 
   604 00005861 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   605 00005865 B925000000          <1>     mov ecx, fcb_size
   606 0000586A 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   607 0000586E 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   608 00005870 F3A4                <1>     rep movsb   ;Copy fcb 1 over
   609 00005872 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   610 00005876 B925000000          <1>     mov ecx, fcb_size
   611 0000587B 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   612 0000587F 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   613 00005881 F3A4                <1>     rep movsb   ;Copy fcb 2 over
   614 00005883 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   615 00005887 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   616 0000588E B980000000          <1>     mov ecx, 80h
   617 00005893 F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   618                              <1> 
   619 00005895 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   620 00005897 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   621                              <1> 
   622                              <1>     ;Put PSP base value in edx:eax to place in FS, dont rely on this in future!
   623 0000589A B9000100C0          <1>     mov ecx, 0C0000100h ;R/W FS MSR
   624 0000589F 89D0                <1>     mov eax, edx    ;Move low dword address into rax
   625 000058A1 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   626 000058A5 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   627                              <1> 
   628 000058A7 E8A10A0000          <1>     call getUserRegs    ;Need to get Int 42h address from stack
   629 000058AC 488B4648            <1>     mov rax, qword [rsi + callerFrame.rip]  ;Get parent return address
   630 000058B0 4889470A            <1>     mov qword [rdi + psp.oldInt42h], rax    ;and save it in PSP
   631 000058B4 4889C2              <1>     mov rdx, rax    ;Move return address to rdx to set up the Interrupt Vector
   632 000058B7 B042                <1>     mov al, 42h
   633 000058B9 E8EB100000          <1>     call setIntVector   ;bx preserved by this call
   634                              <1> 
   635                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   636 000058BE 88D8                <1>     mov al, bl
   637 000058C0 30DB                <1>     xor bl, bl
   638 000058C2 E8AA0A0000          <1>     call setDrive
   639 000058C7 7302                <1>     jnc .drive1Ok
   640 000058C9 B3FF                <1>     mov bl, -1
   641                              <1> .drive1Ok:
   642 000058CB 88F8                <1>     mov al, bh
   643 000058CD 30FF                <1>     xor bh, bh
   644 000058CF E89D0A0000          <1>     call setDrive
   645 000058D4 7302                <1>     jnc .drive2Ok
   646 000058D6 B7FF                <1>     mov bh, -1
   647                              <1> .drive2Ok:
   648                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   649                              <1>     ;rdi has pointer to psp
   650 000058D8 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   651                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   652 000058DB 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   653 000058E0 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   654 000058E4 741C                <1>     je .xfrProgram
   655 000058E6 488B45A8            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   656 000058EA 488B55D8            <1>     mov rdx, qword [rbp - execFrame.pParam]
   657 000058EE 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   658 000058F2 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   659 000058F6 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   660                              <1> .overlayExit:
   661 000058F9 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   662 000058FC 5D                  <1>     pop rbp ;Point rsp to the return address
   663 000058FD E9EC0E0000          <1>     jmp extGoodExit ;And return!
   664                              <1> .xfrProgram:
   665 00005902 FA                  <1>     cli
   666 00005903 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   667 00005906 C605(FDC30300)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   668 0000590D FB                  <1>     sti
   669 0000590E FF75A8              <1>     push qword [rbp - execFrame.pProgEP]
   670 00005911 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   671 00005914 4989F9              <1>     mov r9, rdi
   672 00005917 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   673                              <1>     return  ;Return to child task
    18                              <2> %%_ret:
    19 0000591A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   674                              <1> 
   675                              <1> .badFmtErr:
   676 0000591B B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   677                              <1> .cleanAndFail:
   678                              <1> ;Close the open file and any open resources and fail
   679 00005920 E82F000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   680 00005925 E8910E0000          <1>     call dosCrit1Exit
   681 0000592A 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   682 0000592E 50                  <1>     push rax    ;Save error code
   683 0000592F 55                  <1>     push rbp
   684 00005930 E847D4FFFF          <1>     call closeFileHdl
   685 00005935 5D                  <1>     pop rbp
   686 00005936 58                  <1>     pop rax
   687 00005937 E90BFAFFFF          <1>     jmp .badExit
   688                              <1> 
   689                              <1> .readDataFromHdl:
   690                              <1> ;Input: ecx = Number of bytes to transfer
   691                              <1> ;       rdx = Ptr to the buffer to use
   692 0000593C 52                  <1>     push rdx
   693 0000593D E812000000          <1>     call .clearArenaOwner   ;Entering critical section!
   694 00005942 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   695 00005946 55                  <1>     push rbp
   696 00005947 E86FD4FFFF          <1>     call readFileHdl
   697 0000594C 5D                  <1>     pop rbp
   698 0000594D E811000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   699 00005952 5A                  <1>     pop rdx
   700                              <1>     return
    18                              <2> %%_ret:
    19 00005953 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   701                              <1> .clearArenaOwner:
   702 00005954 53                  <1>     push rbx
   703 00005955 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   704 00005957 E8550E0000          <1>     call dosCrit1Enter
   705 0000595C E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   706 00005961 5B                  <1>     pop rbx
   707                              <1>     return
    18                              <2> %%_ret:
    19 00005962 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   708                              <1> .setPSPArenaOwner:
   709                              <1> ;Sets the current PSP as the arena owner
   710 00005963 53                  <1>     push rbx
   711 00005964 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP]
   712 0000596B E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   713 00005970 E8460E0000          <1>     call dosCrit1Exit
   714 00005975 5B                  <1>     pop rbx
   715                              <1>     return
    18                              <2> %%_ret:
    19 00005976 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   716                              <1> .setProgOrEnvArenaOwnerToRBX:
   717                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   718 00005977 9C                  <1>     pushfq
   719 00005978 50                  <1>     push rax
   720                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   721                              <1>     ;This is because they are set up at separate points in the routine!
   722 00005979 488B45C0            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   723 0000597D E80C000000          <1>     call .writeArenaHeaderOwner
   724 00005982 488B45C8            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   725 00005986 E803000000          <1>     call .writeArenaHeaderOwner
   726 0000598B 58                  <1>     pop rax
   727 0000598C 9D                  <1>     popfq
   728                              <1>     return
    18                              <2> %%_ret:
    19 0000598D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   729                              <1> .writeArenaHeaderOwner:
   730                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   731                              <1> ;       rbx = Owner ID
   732 0000598E 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   733                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00005991 74FA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   734 00005993 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   735 00005999 48895801            <1>     mov qword [rax + 1], rbx
   736                              <1>     return
    18                              <2> %%_ret:
    19 0000599D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    38                                  %include "./Source/Kernel/Local/local.asm"
    39                              <1> ;Localisation based functions live here
    40                              <1> 
    41                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    42                              <1> ;al = 0 => Get the switch char
    43                              <1> ;al = 1 => Set the switch char to whats in DL
    44                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
    45                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
    46                              <1> ;       Always returns -1 => /DEV/ optional
    47                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    48                              <1> ;       Input value is ignored
    49 0000599E 3C01                <1>     cmp al, 01
    50 000059A0 740B                <1>     je .setSC
    51 000059A2 7210                <1>     jb .getSC
    52 000059A4 3C03                <1>     cmp al, 03
    53 000059A6 7214                <1>     jb .getDev
    54 000059A8 741C                <1>     je .setDev
    55 000059AA B0FF                <1>     mov al, -1
    56                              <1>     return
    18                              <2> %%_ret:
    19 000059AC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    57                              <1> .setSC:
    58 000059AD 8815(C6C30300)      <1>     mov byte [switchChar], dl
    59                              <1>     return
    18                              <2> %%_ret:
    19 000059B3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    60                              <1> .getSC:
    61 000059B4 8A15(C6C30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    62 000059BA EB02                <1>     jmp short .getRet
    63                              <1> .getDev:
    64 000059BC B2FF                <1>     mov dl, -1
    65                              <1> .getRet:
    66 000059BE E88A090000          <1>     call getUserRegs
    67 000059C3 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    68                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    69                              <1>     return
    18                              <2> %%_ret:
    19 000059C6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    70                              <1> 
    71                              <1> 
    72                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    73                              <1> ;Currently only accept subfunction al = 0, current country
    74                              <1> ;AL > 0 => errInvFnc, Subfunction error
    75                              <1> ;rdx = Ptr to buffer. If -1 => Set Country information. Also error for now.
    76 000059C7 84C0                <1>     test al, al
    77 000059C9 740A                <1>     jz .currentCountry
    78                              <1> .invalidFunction:
    79 000059CB B801000000          <1>     mov eax, errInvFnc
    80 000059D0 E9270E0000          <1>     jmp extErrExit
    81                              <1> .currentCountry:
    82 000059D5 4881FAFFFFFFFF      <1>     cmp rdx, -1
    83 000059DC 74ED                <1>     je .invalidFunction
    84 000059DE 488D3537A6FFFF      <1>     lea rsi, ctryTbl
    85 000059E5 4889D7              <1>     mov rdi, rdx
    86 000059E8 B926000000          <1>     mov ecx, countryStruc_size
    87 000059ED F3A4                <1>     rep movsb
    88 000059EF 31C0                <1>     xor eax, eax
    89 000059F1 E9F80D0000          <1>     jmp extGoodExit
    90                              <1> 
    91                              <1> 
    92                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    93                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    94 000059F6 C3                  <1>     ret
    39                                  %include "./Source/Kernel/ctrlc.asm"
    40                              <1> 
    41                              <1> fullcriticalErrorInvoke:
    42 000059F7 B803000000          <1>     mov eax, 03 ;Always fail for now
    43 000059FC F9                  <1>     stc
    44                              <1>     return
    18                              <2> %%_ret:
    19 000059FD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    45                              <1> xlatHardError:
    46                              <1> ;Translates a hard error code to a generic DOS error
    47                              <1> ;Input: edi = eax = Hard Error Code
    48 000059FE 50                  <1>     push rax
    49 000059FF 3D13000000          <1>     cmp eax, drvErrShft
    50 00005A04 7205                <1>     jb .skipXlat
    51 00005A06 0513000000          <1>     add eax, drvErrShft
    52                              <1> .skipXlat:
    53 00005A0B 8805C0A8FFFF        <1>     mov byte [hardErrorStack], al   ;Store this error code here
    54 00005A11 58                  <1>     pop rax
    55 00005A12 56                  <1>     push rsi
    56 00005A13 488D3513A7FFFF      <1>     lea rsi, extErrTbl
    57 00005A1A E8360E0000          <1>     call setErrorVars
    58 00005A1F 5E                  <1>     pop rsi
    59                              <1>     return
    18                              <2> %%_ret:
    19 00005A20 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> diskDevErr:
    62                              <1> ;Called, NOT Jumped to. 
    63                              <1> ;Input: rdi = Disk Buffer pointer
    64                              <1> ;       eax = Status word (Zero Extended)
    65                              <1> ;       rbp = Disk DPB pointer
    66                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    67                              <1> ;Output: al = Int 44h response (0-3)
    68                              <1> ; All other registers preserved
    69 00005A21 48893D(04C40300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    70 00005A28 89C7                <1>     mov edi, eax    ;Store status word in rdi
    71 00005A2A 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    72 00005A2D 8A25(5CC40300)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    73 00005A33 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    74                              <1>     ;Test for correct buffer data type
    75 00005A36 53                  <1>     push rbx    ;Save rbx temporarily
    76 00005A37 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    77 00005A3A F6C301              <1>     test bl, dosBuffer
    78 00005A3D 7505                <1>     jnz .df0
    79 00005A3F 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    80 00005A42 EB17                <1>     jmp short .df3
    81                              <1> .df0:
    82 00005A44 F6C302              <1>     test bl, fatBuffer
    83 00005A47 7505                <1>     jnz .df1
    84 00005A49 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    85 00005A4C EB0D                <1>     jmp short .df3
    86                              <1> .df1:
    87 00005A4E F6C304              <1>     test bl, dirBuffer
    88 00005A51 7505                <1>     jnz .df2
    89 00005A53 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    90 00005A56 EB03                <1>     jmp short .df3
    91                              <1> .df2:
    92 00005A58 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    93                              <1> .df3:
    94 00005A5B 5B                  <1>     pop rbx
    95 00005A5C 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    96 00005A60 E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    97 00005A65 488B2D(7EC70300)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    98 00005A6C 488B3D(04C40300)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    99                              <1>     return
    18                              <2> %%_ret:
    19 00005A73 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   100                              <1> 
   101                              <1> charDevErr:
   102                              <1> ;Called with ah with additional bits
   103 00005A74 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
   104                              <1> criticalErrorSetup:
   105 00005A77 8825(5CC40300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
   106 00005A7D 48892D(7EC70300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
   107 00005A84 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
   108                              <1>     ;For now, fall through, but need much work to change it later! 
   109                              <1> 
   110                              <1> 
   111                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
   112                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
   113                              <1> ; to the critical error handler.
   114                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
   115                              <1> ; and with Int44Bitfield set
   116                              <1> ;               AH = Critical Error Bitfield
   117                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   118                              <1> ;               Bit 6 - Reserved
   119                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   120                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   121                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   122                              <1> ;               Bits [2-1] = Affected Disk Error
   123                              <1> ;                     0 0   DOS area
   124                              <1> ;                     0 1   FAT area
   125                              <1> ;                     1 0   Directory area
   126                              <1> ;                     1 1   Data area
   127                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   128                              <1> ;               AL  = Failing drive number if AH[7] = 0
   129                              <1> ;               DIL = Error code for errorMsg
   130                              <1> ;               RSI = EA of Device Header for which device the error occured
   131                              <1> ;Return:
   132                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   133                              <1> ;                  = 1 - Retry the Operation    (Retry)
   134                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   135                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   136                              <1> ; Return response from int 44h in al
   137                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   138                              <1> ; This function will terminate the program if an abort was requested!
   139                              <1> ; This function also destroys RBP
   140 00005A8A 803D(FCC30300)01    <1>     cmp byte [critErrFlag], 1
   141 00005A91 7204                <1>     jb .noIntError  ;If not 0, enter
   142 00005A93 B003                <1>     mov al, critFail    ;Else, return Fail always
   143 00005A95 EB51                <1>     jmp short .exit     ;Don't translate fail to abort
   144                              <1> .noIntError:
   145 00005A97 FA                  <1>     cli ;Disable Interrupts
   146 00005A98 FE05(FCC30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   147 00005A9E FE0D(FDC30300)      <1>     dec byte [inDOS]    ;Exiting DOS
   148 00005AA4 488925(54C40300)    <1>     mov qword [xInt44hRSP], rsp
   149 00005AAB 488B25(6FC40300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   150 00005AB2 31ED                <1>     xor ebp, ebp    ;Always zeroed
   151 00005AB4 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   152 00005AB6 488B25(54C40300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   153 00005ABD C605(FCC30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   154 00005AC4 FE05(FDC30300)      <1>     inc byte [inDOS]    ;Reenter DOS
   155 00005ACA FB                  <1>     sti ;Reenable Interrupts
   156                              <1>     ;Now we check that the response given was allowed, and translate if needed
   157                              <1> .checkResponse:
   158 00005ACB 3C00                <1>     cmp al, critIgnore
   159 00005ACD 7421                <1>     je .checkIgnore
   160 00005ACF 3C01                <1>     cmp al, critRetry
   161 00005AD1 7428                <1>     je .checkRetry
   162 00005AD3 3C03                <1>     cmp al, critFail
   163 00005AD5 752F                <1>     jne .abort   ;Must be abort
   164                              <1> .setFail:   ;Here is for fail
   165 00005AD7 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   166 00005AD9 FE05(5EC40300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   167 00005ADF F605(5CC40300)08    <1>     test byte [Int44bitfld], critFailOK
   168 00005AE6 741E                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   169                              <1> .exit:
   170 00005AE8 C605(FEC30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   171                              <1>     return
    18                              <2> %%_ret:
    19 00005AEF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   172                              <1> .checkIgnore:
   173 00005AF0 F605(5CC40300)20    <1>     test byte [Int44bitfld], critIgnorOK
   174 00005AF7 75EF                <1>     jnz .exit
   175 00005AF9 EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   176                              <1> .checkRetry:
   177 00005AFB F605(5CC40300)10    <1>     test byte [Int44bitfld], critRetryOK
   178 00005B02 75E4                <1>     jnz .exit   
   179 00005B04 EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   180                              <1> .abort:
   181                              <1> ;Prepare to abort. We abort from within!
   182                              <1> ;If a network request requests abort, translate to fail
   183 00005B06 803D(F2C60300)FF    <1>     cmp byte [dosInvoke], -1
   184 00005B0D 7509                <1>     jne .kill   ;If this is zero, local invokation
   185 00005B0F C605(8AC40300)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   186 00005B16 EBD0                <1>     jmp short .exit
   187                              <1> .kill:
   188 00005B18 66893D(00C40300)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   189 00005B1F 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   190 00005B21 C605(F6C60300)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   191 00005B28 E99CF6FFFF          <1>     jmp terminateClean.altEP
   192                              <1> 
   193                              <1> ctrlBreakHdlr:
   194 00005B2D B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   195 00005B2F E843C6FFFF          <1>     call printCaretASCII
   196 00005B34 E86EC6FFFF          <1>     call printCRLF
   197                              <1>     ;Reset the console back to 0
   198 00005B39 C605(88C40300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   199                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   200                              <1> .exceptEP:
   201 00005B40 FA                  <1> 	cli
   202 00005B41 488B25(6FC40300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   203 00005B48 E8360C0000          <1> 	call dosPopRegs ;Get user state back
   204 00005B4D 488925(1CC40300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   205 00005B54 F8                  <1>     clc
   206 00005B55 CD43                <1>     int 43h ;Call critical error handler
   207 00005B57 FA                  <1>     cli ;Clear interrupts again
   208 00005B58 488905(28C40300)    <1>     mov qword [oldRAX], rax ;Save rax
   209 00005B5F 9C                  <1>     pushfq  ;Get flags in rax
   210 00005B60 58                  <1>     pop rax 
   211 00005B61 483B25(1CC40300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   212 00005B68 750C                <1>     jne .checkCF
   213                              <1> .returnToDOS:
   214 00005B6A 488B05(28C40300)    <1>     mov rax, qword [oldRAX]
   215 00005B71 E9AC0A0000          <1>     jmp functionDispatch    ;Goto int 41h
   216                              <1> .checkCF:
   217 00005B76 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   218 00005B7D A801                <1>     test al, 1  ;CF set?
   219 00005B7F 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   220 00005B81 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   221 00005B86 C605(80C40300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   222 00005B8D E9900A0000          <1>     jmp functionDispatch
   223                              <1> 
   224                              <1> ;CPU Exception handlers
   225                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
   226                              <1> ; CTRL+C exit.
   227                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
   228                              <1> ; system.
   229                              <1> ; Also halt if the application is it's own parent.
   230                              <1> ;An application should hook these interupts if they wish to not 
   231                              <1> ; CTRL+C exit, and instead return to DOS.
   232                              <1> i0:
   233 00005B92 31C0                <1>     xor eax, eax
   234 00005B94 E9AB000000          <1>     jmp cpu_2args
   235                              <1> i1:
   236 00005B99 B801000000          <1>     mov eax, 1
   237 00005B9E E9A1000000          <1>     jmp cpu_2args
   238                              <1> i2:
   239 00005BA3 B802000000          <1>     mov eax, 2
   240 00005BA8 E997000000          <1>     jmp cpu_2args
   241                              <1> i3:
   242 00005BAD B803000000          <1>     mov eax, 3
   243 00005BB2 E98D000000          <1>     jmp cpu_2args
   244                              <1> i4:
   245 00005BB7 B804000000          <1>     mov eax, 4
   246 00005BBC E983000000          <1>     jmp cpu_2args
   247                              <1> i5:
   248 00005BC1 B805000000          <1>     mov eax, 5
   249 00005BC6 EB7C                <1>     jmp short cpu_2args
   250                              <1> i6:
   251 00005BC8 B806000000          <1>     mov eax, 6
   252 00005BCD EB75                <1>     jmp short cpu_2args
   253                              <1> i7:
   254 00005BCF B807000000          <1>     mov eax, 7
   255 00005BD4 EB6E                <1>     jmp short cpu_2args
   256                              <1> i8:
   257 00005BD6 B808000000          <1>     mov eax, 8
   258 00005BDB EB60                <1>     jmp short cpu_3args
   259                              <1> i9:
   260 00005BDD B809000000          <1>     mov eax, 9
   261 00005BE2 EB60                <1>     jmp short cpu_2args
   262                              <1> i10:
   263 00005BE4 B80A000000          <1>     mov eax, 0Ah
   264 00005BE9 EB52                <1>     jmp short cpu_3args
   265                              <1> i11:
   266 00005BEB B80B000000          <1>     mov eax, 0Bh
   267 00005BF0 EB4B                <1>     jmp short cpu_3args
   268                              <1> i12:
   269 00005BF2 B80C000000          <1>     mov eax, 0Ch
   270 00005BF7 EB44                <1>     jmp short cpu_3args
   271                              <1> i13:
   272 00005BF9 B80D000000          <1>     mov eax, 0Dh
   273 00005BFE EB3D                <1>     jmp short cpu_3args
   274                              <1> i14:
   275 00005C00 B80E000000          <1>     mov eax, 0Eh
   276 00005C05 EB2F                <1>     jmp short cpu_4args
   277                              <1> i15:
   278 00005C07 B80F000000          <1>     mov eax, 0Fh
   279 00005C0C EB36                <1>     jmp short cpu_2args
   280                              <1> i16:
   281 00005C0E B810000000          <1>     mov eax, 10h
   282 00005C13 EB2F                <1>     jmp short cpu_2args
   283                              <1> i17:
   284 00005C15 B811000000          <1>     mov eax, 11h
   285 00005C1A EB21                <1>     jmp short cpu_3args
   286                              <1> i18:
   287 00005C1C B812000000          <1>     mov eax, 12h
   288 00005C21 EB21                <1>     jmp short cpu_2args
   289                              <1> i19:
   290 00005C23 B813000000          <1>     mov eax, 13h
   291 00005C28 EB1A                <1>     jmp short cpu_2args
   292                              <1> i20:
   293 00005C2A B814000000          <1>     mov eax, 14h
   294 00005C2F EB13                <1>     jmp short cpu_2args
   295                              <1> i21:
   296 00005C31 B815000000          <1>     mov eax, 15h
   297                              <1> cpu_4args:
   298 00005C36 B903000000          <1>     mov ecx, 3
   299 00005C3B EB0C                <1>     jmp short cpu_exception
   300                              <1> cpu_3args:
   301 00005C3D B902000000          <1>     mov ecx, 2
   302 00005C42 EB05                <1>     jmp short cpu_exception
   303                              <1> cpu_2args:
   304 00005C44 B901000000          <1>     mov ecx, 1
   305                              <1> cpu_exception:
   306                              <1> ;Enter with:
   307                              <1> ; eax = Exception number in binary
   308                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
   309 00005C49 488D3501020000      <1>     lea rsi, .fatalt0   ;Get the ptr
   310 00005C50 BB29000000          <1>     mov ebx, fatalt0L  ;Get the length
   311 00005C55 E8AF010000          <1>     call .writeExceptionMessage
   312                              <1> 
   313 00005C5A 803D(FDC30300)01    <1>     cmp byte [inDOS], 1
   314 00005C61 7327                <1>     jae .introStop
   315 00005C63 3D02000000          <1>     cmp eax, 2
   316 00005C68 7420                <1>     je .introStop
   317                              <1> 
   318 00005C6A 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP] ;If a command shell craps out, Halt
   319 00005C71 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr]
   320 00005C75 7413                <1>     je .introStop
   321                              <1> 
   322 00005C77 488D35FC010000      <1>     lea rsi, .fatal1
   323 00005C7E BBC1000000          <1>     mov ebx, fatal1L
   324 00005C83 E881010000          <1>     call .writeExceptionMessage
   325 00005C88 EB18                <1>     jmp short .introEnd
   326                              <1> .introStop:
   327 00005C8A C605(7BDA0300)FF    <1>     mov byte [haltDOS], -1
   328 00005C91 488D35A6020000      <1>     lea rsi, .fatalHalt   ;Get the ptr
   329 00005C98 BB19000000          <1>     mov ebx, fatalHaltL  ;Get the length
   330 00005C9D E867010000          <1>     call .writeExceptionMessage
   331                              <1> .introEnd:
   332 00005CA2 488D3D(6BDA0300)    <1>     lea rdi, byteBuffer
   333 00005CA9 E829010000          <1>     call .printbyte ;Store the error code in the byte buffer
   334 00005CAE 488D35(6BDA0300)    <1>     lea rsi, byteBuffer
   335 00005CB5 BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   336 00005CBA E84A010000          <1>     call .writeExceptionMessage
   337                              <1> 
   338 00005CBF 488D3575020000      <1>     lea rsi, .fatal2
   339 00005CC6 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   340 00005CCB E839010000          <1>     call .writeExceptionMessage
   341                              <1> 
   342 00005CD0 80F901              <1>     cmp cl, 1
   343 00005CD3 7768                <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   344                              <1> .cpurollprint:
   345 00005CD5 488D3D(6BDA0300)    <1>     lea rdi, byteBuffer
   346 00005CDC 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   347                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   348 00005CE0 B108                <1>     mov cl, 8    ;8 bytes
   349                              <1> .cpurollprint1:
   350 00005CE2 48C1C208            <1>     rol rdx, 8
   351 00005CE6 88D0                <1>     mov al, dl
   352 00005CE8 52                  <1>     push rdx
   353 00005CE9 E8E9000000          <1>     call .printbyte
   354 00005CEE 5A                  <1>     pop rdx
   355 00005CEF FEC9                <1>     dec cl
   356 00005CF1 75EF                <1>     jnz .cpurollprint1
   357                              <1> 
   358 00005CF3 BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   359 00005CF8 488D35(6BDA0300)    <1>     lea rsi, byteBuffer
   360 00005CFF E805010000          <1>     call .writeExceptionMessage
   361                              <1> 
   362 00005D04 BB03000000          <1>     mov ebx, crlfL
   363 00005D09 488D3547020000      <1>     lea rsi, .crlf
   364 00005D10 E8F4000000          <1>     call .writeExceptionMessage    
   365                              <1> 
   366 00005D15 F605(7BDA0300)FF    <1>     test byte [haltDOS], -1
   367 00005D1C 7516                <1>     jnz .fatalStop
   368 00005D1E E8D1000000          <1>     call .readInputChar
   369 00005D23 B8004C0000          <1>     mov eax, 4c00h
   370 00005D28 C605(80C40300)FF    <1>     mov byte [ctrlCExit], -1
   371 00005D2F E9EE080000          <1>     jmp functionDispatch    ;Call Int 41h politely
   372                              <1> .fatalStop:
   373                              <1> ;This is called if inDOS > 1 or NMI occured
   374                              <1> ;Permanently locks up the system by turning off interrupts and infinite looping.
   375 00005D34 E88C0A0000          <1>     call dosCrit2Enter  ;Suspend multitasking now
   376                              <1> .fatalLp:
   377 00005D39 FA                  <1>     cli
   378 00005D3A F4                  <1>     hlt
   379 00005D3B EBFC                <1>     jmp short .fatalLp
   380                              <1> 
   381                              <1> .cpuextendederror:
   382 00005D3D 5A                  <1>     pop rdx
   383 00005D3E 48FFC9              <1>     dec rcx
   384 00005D41 51                  <1>     push rcx
   385 00005D42 488D3D(6BDA0300)    <1>     lea rdi, byteBuffer
   386 00005D49 B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   387 00005D4B 86D6                <1>     xchg dl, dh   
   388                              <1> .pr1:
   389 00005D4D 88D0                <1>     mov al, dl
   390 00005D4F 52                  <1>     push rdx
   391 00005D50 E882000000          <1>     call .printbyte
   392 00005D55 5A                  <1>     pop rdx
   393 00005D56 C1CA08              <1>     ror edx, 8    ;Print just dx for now
   394 00005D59 FEC9                <1>     dec cl
   395 00005D5B 75F0                <1>     jnz .pr1
   396                              <1> 
   397 00005D5D 488D35(6BDA0300)    <1>     lea rsi, byteBuffer
   398 00005D64 BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   399 00005D69 E89B000000          <1>     call .writeExceptionMessage
   400                              <1> 
   401 00005D6E 488D35C6010000      <1>     lea rsi, .fatal2
   402 00005D75 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   403 00005D7A E88A000000          <1>     call .writeExceptionMessage
   404                              <1> 
   405 00005D7F 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   406 00005D80 48FFC9              <1>     dec rcx
   407 00005D83 0F844CFFFFFF        <1>     jz .cpurollprint
   408                              <1> 
   409 00005D89 B108                <1>     mov cl, 8   ;16 nybbles
   410 00005D8B 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   411 00005D8E 488D3D(6BDA0300)    <1>     lea rdi, byteBuffer
   412                              <1> .pr2:
   413 00005D95 48C1C208            <1>     rol rdx, 8    ;Print rdx
   414 00005D99 88D0                <1>     mov al, dl
   415 00005D9B 52                  <1>     push rdx
   416 00005D9C E836000000          <1>     call .printbyte
   417 00005DA1 5A                  <1>     pop rdx
   418 00005DA2 FEC9                <1>     dec cl
   419 00005DA4 75EF                <1>     jnz .pr2
   420                              <1> 
   421 00005DA6 488D35(6BDA0300)    <1>     lea rsi, byteBuffer
   422 00005DAD BB10000000          <1>     mov ebx, 16
   423 00005DB2 E852000000          <1>     call .writeExceptionMessage
   424                              <1> 
   425 00005DB7 488D357D010000      <1>     lea rsi, .fatal2
   426 00005DBE BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   427 00005DC3 E841000000          <1>     call .writeExceptionMessage
   428                              <1> 
   429 00005DC8 E908FFFFFF          <1>     jmp .cpurollprint
   430                              <1> 
   431                              <1> 
   432                              <1> .char:    ;Print a single character
   433 00005DCD 488D1D6D000000      <1>     lea rbx, .ascii
   434 00005DD4 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   435 00005DD5 AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   436 00005DD6 C3                  <1>     ret
   437                              <1> .printbyte:
   438 00005DD7 88C2                <1>     mov dl, al            ;save byte in dl
   439 00005DD9 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   440 00005DDD 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   441 00005DE2 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   442 00005DE6 E8E2FFFFFF          <1>     call .char
   443 00005DEB 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   444 00005DEE E8DAFFFFFF          <1>     call .char
   445 00005DF3 C3                  <1>     ret        
   446                              <1> 
   447                              <1> 
   448                              <1> .readInputChar:
   449 00005DF4 C605(E1C40300)04    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   450 00005DFB 488D35(10C50300)    <1>     lea rsi, singleIObyt
   451 00005E02 BB01000000          <1>     mov ebx, 1  ;Read one char
   452 00005E07 EB07                <1>     jmp short .ioException
   453                              <1> .writeExceptionMessage:
   454                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   455 00005E09 C605(E1C40300)08    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvWRITE
   456                              <1> .ioException:
   457 00005E10 C605(DFC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   458 00005E17 66C705(E2C40300)00- <1>     mov word [critReqHdr + ioReqPkt.status], 0
   458 00005E1F 00                  <1>
   459 00005E20 891D(F5C40300)      <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], ebx
   460 00005E26 488D1D(DFC40300)    <1>     lea rbx, critReqHdr
   461 00005E2D 488935(EDC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rsi
   462 00005E34 488B35(59C00300)    <1>     mov rsi, qword [vConPtr]
   463 00005E3B E822010000          <1>     call goDriver
   464                              <1>     return
    18                              <2> %%_ret:
    19 00005E40 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   465                              <1> 
   466                              <1> 
   467                              <1> ;Error messages
   468 00005E41 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   468 00005E4A 39414243444546      <1>
   469 00005E51 0D0A0A202020202020- <1> .fatalt0:  db CR,LF,LF,"        SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   469 00005E5A 20205343502F444F53- <1>
   469 00005E63 20455843455054494F- <1>
   469 00005E6C 4E2044455445435445- <1>
   469 00005E75 44210D0A0A          <1>
   470                              <1> fatalt0L   equ $ - .fatalt0
   471                              <1> 
   472                              <1> .fatal1:   
   473 00005E7A 202020204120706F74- <1>     db "    A potentially fatal error has been detected",CR,LF
   473 00005E83 656E7469616C6C7920- <1>
   473 00005E8C 666174616C20657272- <1>
   473 00005E95 6F7220686173206265- <1>
   473 00005E9E 656E20646574656374- <1>
   473 00005EA7 65640D0A            <1>
   474 00005EAB 20202020616E642074- <1>     db "    and the current application must be terminated.",CR,LF,LF
   474 00005EB4 68652063757272656E- <1>
   474 00005EBD 74206170706C696361- <1>
   474 00005EC6 74696F6E206D757374- <1>
   474 00005ECF 206265207465726D69- <1>
   474 00005ED8 6E617465642E0D0A0A  <1>
   475 00005EE1 202020205072657373- <1>     db "    Press any key to continue or CTRL+ALT+DEL to restart the machine."
   475 00005EEA 20616E79206B657920- <1>
   475 00005EF3 746F20636F6E74696E- <1>
   475 00005EFC 7565206F7220435452- <1>
   475 00005F05 4C2B414C542B44454C- <1>
   475 00005F0E 20746F207265737461- <1>
   475 00005F17 727420746865206D61- <1>
   475 00005F20 6368696E652E        <1>
   476 00005F26 0D0A0A202020205359- <1>     db CR,LF, LF,"    SYSTEM ERROR: "   ;Print standard Error message here
   476 00005F2F 5354454D204552524F- <1>
   476 00005F38 523A20              <1>
   477                              <1> fatal1L equ $ - .fatal1
   478                              <1> 
   479 00005F3B 203A20              <1> .fatal2:   db " : "
   480                              <1> fatal2L    equ $ - .fatal2
   481                              <1> 
   482                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   483 00005F3E 202020205343502F44- <1> .fatalHalt: db "    SCP/DOS SYSTEM STOP: "
   483 00005F47 4F532053595354454D- <1>
   483 00005F50 2053544F503A20      <1>
   484                              <1> fatalHaltL equ $ - .fatalHalt
   485 00005F57 0D0A0A              <1> .crlf:  db CR,LF,LF
   486                              <1> crlfL  equ $ - .crlf
    40                                  %include "./Source/Kernel/dosPrim.asm"
    41                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    42                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    43                              <1> 
    44                              <1> dosDefCritErrHdlr:
    45                              <1> ;The DOS default critical error handler always returns FAIL
    46 00005F5A B003                <1>     mov al, critFail
    47 00005F5C 48CF                <1>     iretq
    48                              <1> goDriverChar:
    49                              <1> ;Shortcut for Char requests, make a driver request
    50                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    51 00005F5E 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    52                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    53                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    54                              <1> ;       rbx = Ptr to the request header for the driver call!
    55 00005F62 E85E080000          <1>     call dosCrit2Enter
    56 00005F67 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    57 00005F6A FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    58 00005F6D E85D080000          <1>     call dosCrit2Exit
    59                              <1>     return
    18                              <2> %%_ret:
    19 00005F72 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> setupPhysicalDiskRequest:
    62                              <1> ;Ensure that al has valid disk number
    63                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    64                              <1> ;If CF=NC, rbp = DPB ptr.
    65                              <1> ;If CF=CY, exit error
    66 00005F73 84C0                <1>     test al, al
    67 00005F75 723F                <1>     jc .diskError
    68 00005F77 3A05(7EC00300)      <1>     cmp al, byte [lastdrvNum]
    69 00005F7D 7337                <1>     jae .diskError
    70 00005F7F 50                  <1>     push rax
    71 00005F80 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    72 00005F82 E853040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    73 00005F87 58                  <1>     pop rax
    74 00005F88 7235                <1>     jc .error
    75 00005F8A 8805(F9C60300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    76 00005F90 488B2D(02C70300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    77 00005F97 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    78 00005F9F 750A                <1>     jnz .netError
    79 00005FA1 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    80 00005FA5 E82E030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    81                              <1>     return
    18                              <2> %%_ret:
    19 00005FAA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    82                              <1> .netError:
    83 00005FAB 66C705(00C40300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    83 00005FB3 00                  <1>
    84 00005FB4 EB09                <1>     jmp short .error
    85                              <1> .diskError:
    86 00005FB6 66C705(00C40300)0F- <1>     mov word [errorExCde], errBadDrv
    86 00005FBE 00                  <1>
    87                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    88 00005FBF C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
    89 00005FC6 C605(02C40300)07    <1>     mov byte [errorAction], eActRetUsr
    90 00005FCD C605(03C40300)09    <1>     mov byte [errorClass], eClsBadFmt
    91 00005FD4 F9                  <1>     stc
    92                              <1>     return
    18                              <2> %%_ret:
    19 00005FD5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    93                              <1> 
    94                              <1> setupAbsDiskEntry:
    95                              <1> ;Prepares to sets up the CDS and DPB for the request
    96 00005FD6 FE05(FDC30300)      <1>     inc byte [inDOS]
    97 00005FDC FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    98 00005FDD FC                  <1>     cld ;Set string ops in the right direction
    99 00005FDE E890FFFFFF          <1>     call setupPhysicalDiskRequest
   100 00005FE3 7223                <1>     jc .exit    ;Error exit
   101 00005FE5 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
   102 00005FEC 56                  <1>     push rsi
   103 00005FED 50                  <1>     push rax
   104 00005FEE 488D35(12C50300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
   105 00005FF5 8806                <1>     mov byte [rsi], al  ;Construct a path
   106 00005FF7 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   107 00005FFA C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   108 00005FFE F8                  <1>     clc
   109                              <1> ;++++++++++++++++++++++++++++
   110                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   111                              <1> ;Entered with path in rsi (ah=03h)
   112 00005FFF B800030000          <1>     mov eax, 0300h  
   113 00006004 CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   114                              <1> ;++++++++++++++++++++++++++++
   115 00006006 58                  <1>     pop rax
   116 00006007 5E                  <1>     pop rsi
   117                              <1> .exit:
   118 00006008 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   119                              <1>     return
    18                              <2> %%_ret:
    19 0000600A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   120                              <1> 
   121                              <1> absDiskWrite:       ;Int 46h
   122                              <1> ;al = Drive number
   123                              <1> ;rbx = Memory Buffer address to read from
   124                              <1> ;ecx = Number of sectors to write
   125                              <1> ;rdx = Start LBA to write to
   126 0000600B FA                  <1>     cli
   127 0000600C 488925(6FC40300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   128 00006013 488D25(C9D90300)    <1>     lea rsp, DiskStakTop
   129 0000601A 55                  <1>     push rbp
   130 0000601B 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   131 0000601C E8B5FFFFFF          <1>     call setupAbsDiskEntry
   132 00006021 7252                <1>     jc absDiskExit
   133 00006023 E8C3010000          <1>     call primReqWriteSetup
   134 00006028 EB1D                <1>     jmp short absDiskReadWriteCommon
   135                              <1> absDiskRead:        ;Int 45h
   136                              <1> ;al = Drive number
   137                              <1> ;rbx = Memory Buffer address to write to
   138                              <1> ;ecx = Number of sectors to read
   139                              <1> ;rdx = Start LBA to read from
   140 0000602A FA                  <1>     cli 
   141 0000602B 488925(6FC40300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   142 00006032 488D25(C9D90300)    <1>     lea rsp, DiskStakTop
   143 00006039 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   144 0000603A 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   145 0000603B E896FFFFFF          <1>     call setupAbsDiskEntry
   146 00006040 7233                <1>     jc absDiskExit
   147 00006042 E8AF010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   148                              <1> absDiskReadWriteCommon:
   149                              <1> ;Entered with the appropriate function number in ah
   150                              <1> ; and primary request header in rbx
   151 00006047 E83B000000          <1>     call absDiskDriverCall
   152 0000604C 7427                <1>     jz absDiskExit  ;Skip error code checking
   153 0000604E 8A05(B8C40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   154                              <1>     ;DOS uses the following pairs in a table
   155                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   156 00006054 B480                <1>     mov ah, 80h ;Attachment failure
   157 00006056 3C0C                <1>     cmp al, 0Ch ;Gen error
   158 00006058 741A                <1>     je .absExit
   159 0000605A B440                <1>     mov ah, 40h ;Seek error
   160 0000605C 3C06                <1>     cmp al, 06h
   161 0000605E 7414                <1>     je .absExit
   162 00006060 B408                <1>     mov ah, 08h ;Bad CRC
   163 00006062 3C04                <1>     cmp al, 04h
   164 00006064 740E                <1>     je .absExit
   165 00006066 B404                <1>     mov ah, 04h ;Sector not found
   166 00006068 3C08                <1>     cmp al, 08h
   167 0000606A 7408                <1>     je .absExit
   168 0000606C 30E4                <1>     xor ah, ah  ;Write Protect Violation
   169 0000606E 84C0                <1>     test al, al
   170 00006070 7402                <1>     je .absExit
   171 00006072 B402                <1>     mov ah, 02h ;Other Error
   172                              <1> .absExit:
   173 00006074 F9                  <1>     stc
   174                              <1> absDiskExit:
   175 00006075 5B                  <1>     pop rbx
   176 00006076 5D                  <1>     pop rbp
   177 00006077 FA                  <1>     cli
   178 00006078 FE0D(FDC30300)      <1>     dec byte [inDOS]
   179 0000607E 488B25(6FC40300)    <1>     mov rsp, qword [oldRSP]
   180 00006085 FB                  <1>     sti ;Reenable interrupts
   181                              <1>     return ;Return from interrupt without popping flags!
    18                              <2> %%_ret:
    19 00006086 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   182                              <1> absDiskDriverCall:
   183                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   184                              <1> ;       rbx = Request header address
   185                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   186                              <1> ;       eax = Status word from request
   187                              <1> ;       ecx = Number of sectors transferred
   188 00006087 56                  <1>     push rsi
   189                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   190 00006088 8B0D(CBC40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   191                              <1>     ;Prepare for goDriver now
   192 0000608E 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   193 00006092 E8CBFEFFFF          <1>     call goDriver   ;Make request
   194 00006097 5E                  <1>     pop rsi
   195 00006098 8B05(CBC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   196 0000609E 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   197 000060A0 0FB705(B8C40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   198 000060A7 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   199                              <1>     return
    18                              <2> %%_ret:
    19 000060AB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> getDiskDPB:
   202                              <1> ;Gets the disk DPB if the Disk is valid
   203                              <1> ;Otherwise will return a pointer to the drive DPB
   204                              <1> ;Called with rdi pointing to the CDS
   205                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   206 000060AC 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   207 000060B0 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   208 000060B3 8805(F9C60300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   209 000060B9 E81A020000          <1>     call setWorkingDPB
   210 000060BE 57                  <1>     push rdi    ;Save the CDS ptr
   211 000060BF E84E000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   212 000060C4 5F                  <1>     pop rdi
   213 000060C5 724A                <1>     jc .exitBad ;Preserve CF
   214 000060C7 7547                <1>     jnz .exit
   215                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   216 000060C9 0FB60D(7EC00300)    <1>     movzx ecx, byte [lastdrvNum]
   217 000060D0 31C0                <1>     xor eax, eax
   218 000060D2 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   219 000060D5 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   220 000060D9 488B3D(6BC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   221                              <1> .checkCDS:
   222 000060E0 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   223 000060E6 751D                <1>     jnz .next
   224 000060E8 48397745            <1>     cmp qword [rdi + cds.qDPBPtr], rsi
   225 000060EC 7517                <1>     jne .next
   226 000060EE 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   227 000060F2 7411                <1>     jz .next    ;IF yes, skip it
   228 000060F4 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax  ;Reset start cluster!
   229                              <1>     ;Subst drives should just fail if the subdir doesnt exist.
   230                              <1>     ;TEMP TEMP: subst will become deactivated and their StartingClust=-1
   231 000060F7 66F747430010        <1>     test word [rdi + cds.wFlags], cdsSubstDrive
   232 000060FD 7406                <1>     jz .next    ;If bit not set, skip this next bit
   233 000060FF 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Clear the flags rendering this drv dead
   234                              <1> .next:
   235 00006105 4881C75B000000      <1>     add rdi, cds_size
   236 0000610C FFC9                <1>     dec ecx
   237 0000610E 75D0                <1>     jnz .checkCDS
   238                              <1> .exit:
   239 00006110 F8                  <1>     clc
   240                              <1> .exitBad:
   241                              <1>     return
    18                              <2> %%_ret:
    19 00006111 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   242                              <1> 
   243                              <1> ensureDiskValid:
   244                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   245                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   246                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   247                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   248                              <1> .medChk:
   249 00006112 E828010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   250                              <1> ;Return in rbx the req hdr address
   251 00006117 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   252 0000611B E842FEFFFF          <1>     call goDriver   ;Request!
   253 00006120 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   254 00006124 F7C700800000        <1>     test edi, drvErrStatus
   255 0000612A 756B                <1>     jnz .diskDrvCritErrMedChk
   256                              <1> .medChkIgnore:
   257 0000612C 8A05(F9C60300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   258 00006132 30E4                <1>     xor ah, ah
   259 00006134 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   260 00006137 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   261 0000613A 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   262 0000613C 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   263 0000613E E8C6A3FFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   264 00006143 F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   265 00006144 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   266                              <1>     ;ZF=NZ from test for dirty buffers
   267                              <1> .exit:
   268                              <1>     return
    18                              <2> %%_ret:
    19 00006146 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   269                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   270 00006147 C605(D1D90300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   271 0000614E E8DAA3FFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   272                              <1>     ;Get a buffer to read BPB into in rdi
   273 00006153 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   274 00006155 E8D4A5FFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   275 0000615A 72EA                <1>     jc .exit    ;Immediately exit with the carry flag set
   276 0000615C 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   277                              <1> .repeatEP:
   278 00006160 E806010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   279 00006165 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   280 00006169 E8F4FDFFFF          <1>     call goDriver   ;Request!
   281 0000616E 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   282 00006172 A900800000          <1>     test eax, drvErrStatus
   283 00006177 755C                <1>     jnz .diskDrvCritErrBPB
   284                              <1>     ;Now rebuild the dpb fields for this drive
   285 00006179 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   286 0000617D E83B090000          <1>     call createDPB
   287                              <1>     ;Adjust the buffer header information
   288 00006182 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   289 00006185 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   290 00006188 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   291 0000618B 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   292 0000618E 30E4                <1>     xor ah, ah
   293 00006190 8825(D1D90300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   294                              <1>     return
    18                              <2> %%_ret:
    19 00006196 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   295                              <1> .diskDrvCritErrMedChk:
   296                              <1> ;Critical Errors fall through here
   297                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   298 00006197 48893D(04C40300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   299 0000619E 48892D(7EC70300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   300 000061A5 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   301 000061A8 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   302 000061AA 8825(5CC40300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   303 000061B0 E8D5F8FFFF          <1>     call criticalDOSError
   304 000061B5 488B3D(04C40300)    <1>     mov rdi, qword [xInt44RDI]
   305 000061BC 488B2D(7EC70300)    <1>     mov rbp, qword [tmpDPBPtr]
   306 000061C3 3C01                <1>     cmp al, critRetry
   307 000061C5 0F8447FFFFFF        <1>     je .medChk
   308 000061CB 3C00                <1>     cmp al, critIgnore
   309 000061CD 0F8459FFFFFF        <1>     je .medChkIgnore
   310 000061D3 F9                  <1>     stc ;Set error flag to indicate fail
   311                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 000061D4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   312                              <1> 
   313                              <1> .diskDrvCritErrBPB:
   314                              <1>     ;eax has status word, rbp has dpb ptr
   315                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   316 000061D5 C605(5CC40300)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   317 000061DC E840F8FFFF          <1>     call diskDevErr
   318 000061E1 3C01                <1>     cmp al, critRetry
   319 000061E3 0F8477FFFFFF        <1>     je .repeatEP
   320                              <1>     ;Else we fail (Ignore=Fail here)
   321 000061E9 F9                  <1>     stc ;Set error flag to indicate fail
   322                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 000061EA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   323                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   324                              <1> ;           Primitive Driver Requests
   325                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   326                              <1> ;First are Disk requests, then Char device requests
   327                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   328                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   329                              <1> 
   330                              <1> primReqWriteSetup:
   331 000061EB 50                  <1>     push rax
   332 000061EC B408                <1>     mov ah, drvWRITE    ;Command code
   333 000061EE 0225(C5C30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   334 000061F4 EB03                <1>     jmp short primReqRWCommon
   335                              <1> primReqReadSetup:
   336 000061F6 50                  <1>     push rax
   337 000061F7 B404                <1>     mov ah, drvREAD
   338                              <1> primReqRWCommon:
   339                              <1> ;Sets up the IO request packet with:
   340                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   341                              <1> ; rbx = Data storage buffer ptr
   342                              <1> ; ecx = Number of sectors to transfer
   343                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   344                              <1> ; ~~~~ Set by entry function ~~~~ 
   345                              <1> ; ah = Command code
   346                              <1> ; All regs preserved EXCEPT rbx.
   347                              <1> ; Return: rbx = Transfer Address
   348 000061F9 48891D(C3C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   349 00006200 890D(CBC40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   350 00006206 C605(B5C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   351 0000620D 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   352 00006212 8905(B6C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   353 00006218 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   354 0000621B 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   355                              <1>     ;Disk operations only here!
   356 0000621D 488915(CFC40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   357 00006224 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   358 00006227 8805(C2C40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   359 0000622D 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   360 00006230 8805(B6C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   361                              <1> primReqCommonExit:
   362                              <1> ;Returns in rbx the primary request header as these functions
   363                              <1> ; setup the request in the primary request header space
   364 00006236 58                  <1>     pop rax
   365 00006237 488D1D(B5C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   366                              <1>     return
    18                              <2> %%_ret:
    19 0000623E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> primReqMedCheckSetup:
   369                              <1> ;Prepare the diskIO packet for mediacheck
   370                              <1> ;rbp has DPB pointer for device to check media on
   371 0000623F 50                  <1>     push rax
   372 00006240 C605(B5C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   373 00006247 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   374 0000624A 8805(C2C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   375 00006250 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   376 00006253 8805(B6C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   377 00006259 C605(B7C40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   378 00006260 66C705(B8C40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   378 00006268 00                  <1>
   379 00006269 EBCB                <1>     jmp short primReqCommonExit
   380                              <1> 
   381                              <1> primReqGetBPBSetup:
   382                              <1> ;rbp has DPB pointer for device
   383                              <1> ;rdi has sector buffer header pointer for transfer
   384 0000626B 50                  <1>     push rax
   385 0000626C 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   386 00006270 48893D(C3C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   387 00006277 C605(B5C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   388 0000627E 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   389 00006281 8805(C2C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   390 00006287 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   391 0000628A 8805(B6C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   392 00006290 C605(B7C40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   393 00006297 66C705(B8C40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   393 0000629F 00                  <1>
   394 000062A0 EB94                <1>     jmp short primReqCommonExit
   395                              <1> 
   396                              <1> primReqOpenSetup:
   397                              <1> ;al = unit number if a disk device. Undefined otherwise
   398 000062A2 50                  <1>     push rax
   399 000062A3 B40D                <1>     mov ah, drvOPEN
   400 000062A5 EB03                <1>     jmp short primReqOCcommon
   401                              <1> primReqCloseSetup:
   402                              <1> ;al = unit number if a disk device. Undefined otherwise
   403 000062A7 50                  <1>     push rax
   404 000062A8 B40E                <1>     mov ah, drvCLOSE
   405                              <1> primReqOCcommon:
   406 000062AA C605(B5C40300)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   407 000062B1 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   408 000062B2 8905(B6C40300)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   409                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   410 000062B8 E979FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   411                              <1> 
   412                              <1> secdReqCharIOReq:
   413                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   414                              <1> ;Input:
   415                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   416                              <1> ; ecx = Length of buffer
   417                              <1> ; rdi = Buffer pointer
   418                              <1> ;Output: 
   419                              <1> ; rbx = Transfer Address 
   420 000062BD 488D1D(8BC40300)    <1>     lea rbx, secdReqHdr
   421 000062C4 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   422 000062C7 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   423 000062CA 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   424 000062D0 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   425 000062D4 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   426                              <1>     return
    18                              <2> %%_ret:
    19 000062D7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   427                              <1> ;If the device which will process this request is a disk device
   428                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   429                              <1> ;Then we will read the appropriate byte from that buffer to the 
   430                              <1> ; singleIOByt buffer.
   431                              <1> ;Such a request will require additional setup with the following fields:
   432                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    41                                  %include "./Source/Kernel/dosUtils.asm"
    42                              <1> ;DOS utility functions 
    43                              <1> 
    44                              <1> ;Basic Drive related Utilities
    45                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    46                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    47                              <1> ; that gets set up)
    48                              <1> 
    49                              <1> setWorkingDPB:
    50                              <1> ;Gets dpb in rbp and saves to workingDPB
    51 000062D8 48892D(FAC60300)    <1>     mov qword [workingDPB], rbp
    52                              <1>     return
    18                              <2> %%_ret:
    19 000062DF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    53                              <1> 
    54                              <1> testCDSNet:
    55                              <1> ;Checks if the workingCDS is a redirector drive
    56                              <1> ;Returns: CF=NC => Not net
    57                              <1> ;         CF=CY => Network redirector
    58                              <1> ;         ZF=ZE => Net without CDS (\\ paths only)
    59                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    60                              <1> ;         rdi = workingCDS ptr
    61 000062E0 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
    62 000062E7 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    63 000062EE 7409                <1>     je .net
    64 000062F0 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    65 000062F6 7501                <1>     jnz .net ;Net with CDS
    66                              <1>     return  ;CF=NC => Not net
    18                              <2> %%_ret:
    19 000062F8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    67                              <1> .net:
    68 000062F9 F9                  <1>     stc ;Set Net bit
    69                              <1>     return
    18                              <2> %%_ret:
    19 000062FA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    70                              <1> 
    71                              <1> getDiskData:
    72                              <1> ;This function returns:
    73                              <1> ;al = sectors per cluster
    74                              <1> ;ah = media ID byte
    75                              <1> ;ebx = total clusters
    76                              <1> ;cx = bytes per sector
    77                              <1> ;edx = number of available clusters
    78                              <1> ;
    79                              <1> ;If CF=CY on exit, al contains the error code
    80 000062FB E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    81 00006300 7308                <1>     jnc .physical
    82                              <1>     ;Beep a redir request out
    83 00006302 B80C110000          <1>     mov eax, 110Ch 
    84 00006307 CD4F                <1>     int 4Fh
    85                              <1>     return
    18                              <2> %%_ret:
    19 00006309 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    86                              <1> .physical:
    87                              <1> ;Now we must lock the structures
    88 0000630A C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
    89 00006311 E89B040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    90 00006316 E891FDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    91 0000631B 721C                <1>     jc .exit
    92 0000631D E80DA6FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    93 00006322 7215                <1>     jc .exit
    94 00006324 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    95 00006327 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    96 00006329 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    97 0000632C 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    98 0000632F FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
    99 00006331 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
   100 00006335 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
   101 00006338 F8                  <1>     clc
   102                              <1> .exit:
   103 00006339 E87D040000          <1>     call dosCrit1Exit
   104                              <1>     return
    18                              <2> %%_ret:
    19 0000633E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   105                              <1> 
   106                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
   107                              <1> ;Input: al = Interrupt number
   108                              <1> ;Output: rbx = Interrupt Vector
   109 0000633F 50                  <1>     push rax    ;Preserve rax, segment selector returned by call
   110 00006340 52                  <1>     push rdx    ;Preserve rdx, Attribute Word returned by call
   111 00006341 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   112 00006343 B807F00000          <1>     mov eax, 0F007h
   113 00006348 CD35                <1>     int 35h
   114 0000634A 5A                  <1>     pop rdx
   115 0000634B 58                  <1>     pop rax
   116                              <1>     return
    18                              <2> %%_ret:
    19 0000634C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   117                              <1> 
   118                              <1> getUserRegs:   ;Int 4Fh AX=1218h
   119                              <1> ;Returns ptr to user regs in rsi
   120 0000634D 488B35(6FC40300)    <1>     mov rsi, qword [oldRSP]
   121                              <1>     return
    18                              <2> %%_ret:
    19 00006354 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   122                              <1> 
   123                              <1> walkDPBchain:
   124                              <1> ;Called with al = 0 based drive number
   125                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
   126 00006355 488B35(49C00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
   127                              <1> .walk:
   128 0000635C 4881FEFFFFFFFF      <1>     cmp rsi, -1
   129 00006363 740A                <1>     je .exitBad
   130 00006365 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   131 00006367 7407                <1>     je .exit    ;Drive found
   132 00006369 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   133 0000636D EBED                <1>     jmp short .walk
   134                              <1> .exitBad:
   135 0000636F F9                  <1>     stc
   136                              <1> .exit:
   137                              <1>     return
    18                              <2> %%_ret:
    19 00006370 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   138                              <1> setDrive:   
   139                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
   140                              <1> ;Input: al = 1-based drive number
   141                              <1> ;Output: al = 0-based drive number
   142                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   143                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   144                              <1> ;            set.
   145 00006371 E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   146 00006376 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   147 00006378 56                  <1>     push rsi
   148 00006379 488B35(02C70300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   149 00006380 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   150 00006386 5E                  <1>     pop rsi
   151 00006387 7401                <1>     jz .exit
   152 00006389 F9                  <1>     stc
   153                              <1> .exit:
   154                              <1>     return
    18                              <2> %%_ret:
    19 0000638A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   155                              <1> 
   156                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   157                              <1> ;Allows a redirector or subst/join to build a CDS
   158                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   159                              <1> ; volumes, that are made at system boot.
   160                              <1> ;Input: al = Drive Letter for drive
   161                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   162                              <1> ;Output: rdi = newly filled in workingCDS
   163                              <1> ;CF=NC => CDS valid and has a DPB
   164                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   165 0000638B 50                  <1>     push rax
   166 0000638C 2C40                <1>     sub al, "A"-1
   167 0000638E 3A05(7DC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   168 00006394 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   169 0000639B 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   170 000063A1 58                  <1>     pop rax
   171 000063A2 7235                <1>     jb .exit    ;Exit with CF=CY
   172 000063A4 50                  <1>     push rax
   173 000063A5 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   174 000063AA 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   175 000063AC 58                  <1>     pop rax
   176 000063AD 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   177 000063B3 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   178 000063BA 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   179 000063C2 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   180                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   181 000063C8 50                  <1>     push rax
   182 000063C9 56                  <1>     push rsi
   183 000063CA 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   184 000063CC E884FFFFFF          <1>     call walkDPBchain
   185 000063D1 7204                <1>     jb .skipSettingDPB
   186 000063D3 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   187                              <1> .skipSettingDPB:
   188 000063D7 5E                  <1>     pop rsi
   189 000063D8 58                  <1>     pop rax
   190                              <1> .exit:
   191                              <1>     return
    18                              <2> %%_ret:
    19 000063D9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   192                              <1> 
   193                              <1> getCDS:     ;Int 4Fh AX=1219h
   194                              <1> ;Gets the device DPB and saves it in the DOS variable
   195                              <1> ;This can be called to get CDS for network drives too!
   196                              <1> ;Input: al = 1 based drive number
   197                              <1> ;Sets workingCDS var with the CDS for the device. 
   198                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   199 000063DA 84C0                <1>     test al, al
   200 000063DC 7508                <1>     jnz .skip
   201 000063DE 8A05(26C40300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   202 000063E4 FEC0                <1>     inc al
   203                              <1> .skip:
   204 000063E6 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   205 000063E8 56                  <1>     push rsi
   206 000063E9 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   207 000063F0 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   208 000063F7 7423                <1>     jz .physDrive
   209                              <1>     ;Invokation via 21/5D00
   210 000063F9 50                  <1>     push rax
   211 000063FA 57                  <1>     push rdi
   212 000063FB 488D3D(6EC60300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   213 00006402 48893D(02C70300)    <1>     mov qword [workingCDS], rdi ;Make it current
   214 00006409 0441                <1>     add al, "A" ;Convert to a drive letter
   215 0000640B E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   216 00006410 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   217 00006416 5F                  <1>     pop rdi
   218 00006417 58                  <1>     pop rax
   219 00006418 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   220 0000641A EB17                <1>     jmp short .exitOk   ;All oki
   221                              <1> .physDrive:
   222 0000641C E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   223 00006421 7208                <1>     jc .exitBad
   224 00006423 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   225 00006429 7508                <1>     jnz .exitOk ;Exit with flag cleared
   226                              <1>     ;Else Return to unknown error locus
   227                              <1> .exitBad:
   228 0000642B C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   229                              <1> .exitBad1:
   230 00006432 F9                  <1>     stc
   231                              <1> .exitOk:
   232 00006433 5E                  <1>     pop rsi
   233                              <1>     return
    18                              <2> %%_ret:
    19 00006434 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   234                              <1> 
   235                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   236                              <1>     ;Gets the CDS for the current drive in al
   237                              <1>     ;Input: al = Drive number, 0 = A ...
   238                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   239                              <1>     ;        CF=CY => al not valid
   240 00006435 3A05(7EC00300)      <1>     cmp al, byte [lastdrvNum]
   241 0000643B 7202                <1>     jb .ctn
   242 0000643D F9                  <1>     stc 
   243                              <1>     return
    18                              <2> %%_ret:
    19 0000643E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   244                              <1> .ctn:
   245 0000643F 50                  <1>     push rax
   246 00006440 52                  <1>     push rdx
   247 00006441 0FB6C0              <1>     movzx eax, al
   248 00006444 48BE5B000000000000- <1>     mov rsi, cds_size
   248 0000644D 00                  <1>
   249 0000644E 31D2                <1>     xor edx, edx
   250 00006450 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   251 00006452 488B35(6BC00300)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   252 00006459 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   253 0000645C 488935(02C70300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   254 00006463 5A                  <1>     pop rdx
   255 00006464 58                  <1>     pop rax
   256 00006465 F8                  <1>     clc
   257                              <1>     return
    18                              <2> %%_ret:
    19 00006466 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   258                              <1> 
   259                              <1> 
   260                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   261                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   262                              <1> ;Input: AL = Char to normalise.
   263                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   264                              <1> ;If path separator, set ZF=ZE
   265 00006467 3C5C                <1>     cmp al, "\"
   266 00006469 7406                <1>     je .exit
   267 0000646B 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   268 0000646D 7502                <1>     jne .exit
   269 0000646F B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   270                              <1> .exit:
   271                              <1>     return
    18                              <2> %%_ret:
    19 00006471 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   272                              <1> 
   273                              <1> uppercaseCharAtPtr:
   274                              <1> ;Get the char pointed to by rsi and then fall
   275 00006472 AC                  <1>     lodsb
   276                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   277                              <1> ;Convert a lowercase char to uppercase
   278                              <1> ; Leave alone uppercase chars and invalid chars
   279                              <1> ;Input: al = Char to convert to uppercase
   280                              <1> ;Output: al = Processed char
   281 00006473 53                  <1>     push rbx
   282 00006474 3C61                <1>     cmp al, "a"
   283 00006476 7214                <1>     jb .exit
   284 00006478 3C7A                <1>     cmp al, "z"
   285 0000647A 7702                <1>     ja .checkExt
   286 0000647C 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   287                              <1> .checkExt:
   288 0000647E 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   289 00006480 720A                <1>     jb .exit
   290 00006482 2C80                <1>     sub al, 80h ;Turn into table offset
   291 00006484 488B1DA39BFFFF      <1>     mov rbx, qword [ctryTbl + countryStruc.mapaddr]    ;Get ptr to extAsciiTable
   292 0000648B D7                  <1>     xlatb   ;Get converted extended byte into al
   293                              <1> .exit:
   294 0000648C 50                  <1>     push rax    ;Save al temporarily
   295 0000648D 488D1DBD9DFFFF      <1>     lea rbx, asciiCharProperties
   296 00006494 D7                  <1>     xlatb   ;Get the signature in al
   297 00006495 A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   298 00006497 58                  <1>     pop rax
   299 00006498 5B                  <1>     pop rbx
   300                              <1>     return
    18                              <2> %%_ret:
    19 00006499 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   301                              <1> 
   302                              <1> strlen2:    ;Int 4Fh, AX=1212h
   303                              <1> ;Entry point for Multiplex
   304 0000649A 57                  <1>     push rdi
   305 0000649B 4889F7              <1>     mov rdi, rsi
   306 0000649E E802000000          <1>     call strlen
   307 000064A3 5F                  <1>     pop rdi
   308                              <1>     return
    18                              <2> %%_ret:
    19 000064A4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   309                              <1> strlen: 
   310                              <1> ;Gets the length of a ASCIIZ string
   311                              <1> ;Input: rdi = Source buffer
   312                              <1> ;Output: ecx = Length of string
   313 000064A5 50                  <1>     push rax
   314 000064A6 57                  <1>     push rdi
   315 000064A7 30C0                <1>     xor al, al
   316 000064A9 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   317 000064AB FFC9                <1>     dec ecx ;rcx = -1
   318 000064AD F2AE                <1>     repne scasb
   319 000064AF F7D1                <1>     not ecx
   320 000064B1 5F                  <1>     pop rdi
   321 000064B2 58                  <1>     pop rax
   322                              <1>     return
    18                              <2> %%_ret:
    19 000064B3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> strcpy:
   325                              <1> ;Copies a null terminated string from rsi to rdi
   326 000064B4 AC                  <1>     lodsb
   327 000064B5 AA                  <1>     stosb
   328 000064B6 84C0                <1>     test al, al
   329                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000064B8 74F9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   330 000064BA EBF8                <1>     jmp short strcpy
   331                              <1> 
   332                              <1> strcmp:
   333                              <1> ;Compares two ASCIIZ strings for equality.
   334                              <1> ;Input: rsi = First string
   335                              <1> ;       rdi = Second string
   336                              <1> ;       ecx = Number of bytes to compare
   337                              <1> ;Output: ZF=ZE => Equal
   338                              <1> ;        ZF=NZ => Not equal
   339 000064BC 56                  <1>     push rsi
   340 000064BD 57                  <1>     push rdi
   341 000064BE F3A6                <1>     repe cmpsb
   342 000064C0 5F                  <1>     pop rdi
   343 000064C1 5E                  <1>     pop rsi
   344                              <1>     return
    18                              <2> %%_ret:
    19 000064C2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   345                              <1> 
   346                              <1> 
   347                              <1> normaliseFileName:  ;Int 4Fh, AX=1211h
   348                              <1> ;Converts lowercase to uppercase and / to "\"
   349                              <1> ;Input: rsi = Source buffer
   350                              <1> ;       rdi = Buffer to place normalised path
   351 000064C3 50                  <1>     push rax
   352 000064C4 56                  <1>     push rsi
   353 000064C5 57                  <1>     push rdi
   354                              <1> .scan:
   355 000064C6 AC                  <1>     lodsb
   356 000064C7 84C0                <1>     test al, al
   357 000064C9 740D                <1>     jz .exit
   358 000064CB E897FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   359 000064D0 E89EFFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   360 000064D5 AA                  <1>     stosb
   361 000064D6 EBEE                <1>     jmp short .scan
   362                              <1> .exit:
   363 000064D8 5F                  <1>     pop rdi
   364 000064D9 5E                  <1>     pop rsi
   365 000064DA 58                  <1>     pop rax
   366                              <1>     return
    18                              <2> %%_ret:
    19 000064DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> compareFileNames:   ;Int 4Fh, AX=121Eh
   369                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   370                              <1> ;Input: rsi = One ASCIIZ pathname
   371                              <1> ;       rdi = Second ASCIIZ pathname
   372                              <1> ;Return:
   373                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   374 000064DC 50                  <1>     push rax
   375 000064DD 56                  <1>     push rsi
   376 000064DE 57                  <1>     push rdi
   377                              <1> .scan:
   378 000064DF 8A06                <1>     mov al, byte [rsi]
   379 000064E1 84C0                <1>     test al, al
   380 000064E3 7424                <1>     jz .endOfString
   381 000064E5 8A27                <1>     mov ah, byte [rdi]
   382 000064E7 E87BFFFFFF          <1>     call swapPathSeparator  ;Convert al to \ if pathsep
   383 000064EC 7410                <1>     jz .pathseps
   384 000064EE 660D2020            <1>     or ax, 2020h    ;Convert both chars to lower case
   385 000064F2 38E0                <1>     cmp al, ah
   386 000064F4 7515                <1>     jnz .exit
   387                              <1> .nextChar:
   388 000064F6 48FFC6              <1>     inc rsi
   389 000064F9 48FFC7              <1>     inc rdi
   390 000064FC EBE1                <1>     jmp short .scan
   391                              <1> .pathseps:
   392 000064FE 86E0                <1>     xchg ah, al
   393 00006500 E862FFFFFF          <1>     call swapPathSeparator  ;If ah is not a pathsep, then exit ZF=NZ
   394 00006505 7504                <1>     jnz .exit
   395 00006507 EBED                <1>     jmp short .nextChar ;Else get the next chars
   396                              <1> .endOfString:
   397 00006509 84E4                <1>     test ah, ah ;If ah is also the end of the path, then ZF=ZE else ZF=NZ
   398                              <1> .exit:
   399 0000650B 5F                  <1>     pop rdi
   400 0000650C 5E                  <1>     pop rsi
   401 0000650D 58                  <1>     pop rax
   402                              <1>     return
    18                              <2> %%_ret:
    19 0000650E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   403                              <1> checkPathspecOK:
   404                              <1> ;Input:
   405                              <1> ;rsi -> points to a path to verify if it is ok.
   406                              <1> ;Output:
   407                              <1> ;CF=NC => The path is totally clean and ok to use.
   408                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   409                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   410                              <1> ; and depending on method of invokation and caller, may be permissable.
   411                              <1> ;We accept lc and uc characters in this check function.
   412 0000650F 50                  <1>     push rax
   413 00006510 53                  <1>     push rbx    ;Use rbx as the return flag status
   414 00006511 56                  <1>     push rsi
   415 00006512 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   416                              <1> 
   417                              <1>     ;Start by getting the length of the ASCIIZ string.
   418 00006514 51                  <1>     push rcx
   419 00006515 57                  <1>     push rdi
   420 00006516 4889F7              <1>     mov rdi, rsi
   421 00006519 E887FFFFFF          <1>     call strlen
   422 0000651E 81F940000000        <1>     cmp ecx, 64    ;Check
   423 00006524 5F                  <1>     pop rdi
   424 00006525 59                  <1>     pop rcx
   425 00006526 776E                <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   426                              <1>     ;First we verify if our path is relative or canonical (absolute)
   427 00006528 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   428 0000652B 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   429 0000652F 7416                <1>     je .netName
   430 00006531 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   431 00006535 7410                <1>     je .netName
   432 00006537 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   433 0000653A 7412                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   434                              <1>     ;Here if relative
   435 0000653C F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   436 00006543 7551                <1>     jnz .badExit    ;If this is -1, server invoke.
   437 00006545 EB1F                <1>     jmp short .okToScan
   438                              <1> .netName:
   439 00006547 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the \    jmp short .okToScan
   441                              <1> .diskPath:
   442 0000654E 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   443 00006555 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   444 0000655C 7408                <1>     jz .okToScan
   445 0000655E AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   446 0000655F E803FFFFFF          <1>     call swapPathSeparator
   447 00006564 7530                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   448                              <1> .okToScan:
   449 00006566 AC                  <1>     lodsb   
   450 00006567 84C0                <1>     test al, al ;End of path char?
   451 00006569 7430                <1>     jz .exit
   452 0000656B E8F7FEFFFF          <1>     call swapPathSeparator
   453 00006570 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   454 00006572 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   455 00006574 7411                <1>     je .wcFound
   456 00006576 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   457 00006578 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   458                              <1>     ;Else we check that the char in al is an acceptable char
   459 0000657A 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   460 0000657C 74E8                <1>     je .okToScan
   461 0000657E E831000000          <1>     call checkCharValid
   462 00006583 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   463 00006585 EBDF                <1>     jmp short .okToScan
   464                              <1> .wcFound:
   465 00006587 BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   466 0000658C EBD8                <1>     jmp short .okToScan
   467                              <1> .wcCheck:
   468                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   469 0000658E F7C340000000        <1>     test ebx, 40h
   470 00006594 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   471                              <1>     ;Else fall through in error
   472                              <1> .badExit:
   473 00006596 BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   474                              <1> .exit:
   475 0000659B 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   476 0000659C 9D                  <1>     popfq
   477 0000659D 5E                  <1>     pop rsi
   478 0000659E 5B                  <1>     pop rbx
   479 0000659F 58                  <1>     pop rax
   480                              <1>     return
    18                              <2> %%_ret:
    19 000065A0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   481                              <1> 
   482                              <1> scanPathWC:
   483                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   484                              <1> ; even in the final path componant.
   485                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   486                              <1> ;Output: CF=NC => No wildcards present
   487                              <1> ;        CF=CY => Wildcards found
   488 000065A1 50                  <1>     push rax
   489 000065A2 56                  <1>     push rsi
   490                              <1> .scan:
   491 000065A3 AC                  <1>     lodsb
   492 000065A4 84C0                <1>     test al, al
   493 000065A6 7409                <1>     jz .exit
   494 000065A8 3C3F                <1>     cmp al, "?"
   495 000065AA 7404                <1>     je .wcFnd
   496 000065AC 3C2A                <1>     cmp al, "*"
   497 000065AE 75F3                <1>     jne .scan
   498                              <1> .wcFnd:
   499 000065B0 F9                  <1>     stc
   500                              <1> .exit:
   501 000065B1 5E                  <1>     pop rsi
   502 000065B2 58                  <1>     pop rax
   503                              <1>     return
    18                              <2> %%_ret:
    19 000065B3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   504                              <1> 
   505                              <1> checkCharValid:
   506                              <1> ;If ZF=ZE => Invalid Char
   507                              <1> ;If ZF=NZ => Valid Char
   508 000065B4 51                  <1>     push rcx
   509 000065B5 57                  <1>     push rdi
   510 000065B6 B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   511 000065BB 488D3DDF9BFFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   512 000065C2 F2AE                <1>     repne scasb ;Scan. Stop when equal
   513 000065C4 5F                  <1>     pop rdi
   514 000065C5 59                  <1>     pop rcx
   515                              <1>     return
    18                              <2> %%_ret:
    19 000065C6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   516                              <1> 
   517                              <1> 
   518                              <1> skipSpacesAndTabs:
   519                              <1> ;Input: rsi -> String 
   520                              <1> ;Output: rsi -> First non Space or Tab type char
   521 000065C7 AC                  <1>     lodsb
   522 000065C8 E815000000          <1>     call isCharSpaceType
   523 000065CD 74F8                <1>     jz skipSpacesAndTabs
   524 000065CF 48FFCE              <1>     dec rsi
   525                              <1>     return
    18                              <2> %%_ret:
    19 000065D2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> isCharDelimType:
   528                              <1> ;Input: al = Char to check properties of
   529                              <1> ;Output:    ZF=NZ => Char not name delimiter
   530                              <1> ;           ZF=ZE => Char delimiter
   531 000065D3 50                  <1>     push rax
   532 000065D4 53                  <1>     push rbx
   533 000065D5 488D1D759CFFFF      <1>     lea rbx, asciiCharProperties
   534 000065DC D7                  <1>     xlatb
   535 000065DD A802                <1>     test al, 2
   536 000065DF 5B                  <1>     pop rbx
   537 000065E0 58                  <1>     pop rax
   538                              <1>     return
    18                              <2> %%_ret:
    19 000065E1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   539                              <1> 
   540                              <1> isCharSpaceType:
   541                              <1> ;Input: al = Char to check properties of
   542                              <1> ;Output:    ZF=NZ => Char not Space or Tab
   543                              <1> ;           ZF=ZE => Char Space or Tab
   544 000065E2 50                  <1>     push rax
   545 000065E3 53                  <1>     push rbx
   546 000065E4 488D1D669CFFFF      <1>     lea rbx, asciiCharProperties
   547 000065EB D7                  <1>     xlatb
   548 000065EC A804                <1>     test al, 4
   549 000065EE 5B                  <1>     pop rbx
   550 000065EF 58                  <1>     pop rax
   551                              <1>     return
    18                              <2> %%_ret:
    19 000065F0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   552                              <1> 
   553                              <1> compareFarPointers: ;Int 4Fh, AX = 1214h
   554                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   555                              <1> ;Input: rsi = One pointer
   556                              <1> ;       rdi = Second pointer
   557                              <1> ;Output: ZF=ZE if equal
   558                              <1> ;        ZF=NZ if not
   559 000065F1 4839FE              <1>     cmp rsi, rdi
   560                              <1>     return
    18                              <2> %%_ret:
    19 000065F4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   561                              <1> 
   562                              <1> checkPathNet:
   563                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   564                              <1> ;Output: ZF=ZE => Path is a net path
   565                              <1> ;        ZF=NZ => Path is not a net path
   566 000065F5 50                  <1>     push rax
   567 000065F6 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   568 000065F9 E869FEFFFF          <1>     call swapPathSeparator
   569 000065FE 7505                <1>     jnz .exit
   570 00006600 E862FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   571                              <1> .exit:
   572 00006605 58                  <1>     pop rax
   573                              <1>     return
    18                              <2> %%_ret:
    19 00006606 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   574                              <1> 
   575                              <1> getCharDevDriverPtr:
   576                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   577                              <1> ;Input: rax = Device Driver name (space padded)
   578                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   579 00006607 488D3D(80C00300)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   580                              <1> .lp:
   581 0000660E 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   582                              <1>     rete    ;Exit if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00006612 74F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   583 00006614 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   584 00006617 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   585 0000661E 75EE                <1>     jne .lp ;If not loop
   586 00006620 F9                  <1>     stc ;Else bad exit
   587                              <1>     return
    18                              <2> %%_ret:
    19 00006621 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   588                              <1> 
    42                                  %include "./Source/Kernel/dosMain.asm"
    43                              <1> ;-----------------------------------:
    44                              <1> ;        Main Kernel dispatch       :
    45                              <1> ;            and routines           :
    46                              <1> ;-----------------------------------:
    47                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    48                              <1> ;ah = Function number, all other registers have various meanings
    49                              <1>  %if DEBUG
    50                              <1>     ;Entry function
    51                              <1>     debugEnterM
    52                              <1>     lea rbp, .l0000
    53                              <1>     call debPrintNullString
    54                              <1>     call debPrintFunctionName
    55                              <1>     jmp short .l0001
    56                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    57                              <1> .l0001:    
    58                              <1>     debugExitM
    59                              <1>     %endif
    60 00006622 FA                  <1>     cli ;Halt external interrupts
    61 00006623 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    62 00006624 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    63 00006627 0F8352010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    64                              <1>     ;Cherry pick functions
    65 0000662D 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    66 00006630 722C                <1>     jb .fsbegin   ;If below skip these checks
    67 00006632 0F8483020000        <1>     je ctrlBreakCheck
    68 00006638 80FC64              <1>     cmp ah, 64h
    69 0000663B 0F84C3020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    70 00006641 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    71 00006643 80FC51              <1>     cmp ah, 51h
    72 00006646 0F84A6020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    73 0000664C 80FC62              <1>     cmp ah, 62h
    74 0000664F 0F84A6020000        <1>     je getPSPaddr          ;Calls the above function
    75 00006655 80FC50              <1>     cmp ah, 50h
    76 00006658 0F848B020000        <1>     je setCurrProcessID
    77                              <1> .fsbegin:
    78 0000665E E837010000          <1>     call dosPushRegs ;Push the usual prologue registers
    79 00006663 48891D(77C40300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    80 0000666A 66C705(38C40300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    80 00006672 00                  <1>
    81 00006673 488B05(6FC40300)    <1>     mov rax, qword [oldRSP]
    82 0000667A 488905(5FC40300)    <1>     mov qword [oldoldRSP], rax
    83 00006681 FE05(FDC30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    84 00006687 488925(6FC40300)    <1>     mov qword [oldRSP], rsp
    85                              <1> ;Network related variable resetting
    86 0000668E C605(F2C60300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    87                              <1> ;Here, we want to save oldRSP in the callers PSP
    88 00006695 803D(FDC30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    89 0000669C 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    90 0000669E 488B05(14C40300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    91 000066A5 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    92                              <1> .fsb1:
    93 000066A9 58                  <1>     pop rax     ;Get old rax back
    94 000066AA 50                  <1>     push rax    ;and push it back onto the stack
    95                              <1> .abortEP:
    96                              <1> .charFun0CEP:
    97                              <1> .serverEP:
    98 000066AB 488D25(FACC0300)    <1>     lea rsp, critStakTop
    99 000066B2 FB                  <1>     sti         ;Reenable interrupts
   100                              <1> 
   101 000066B3 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
   102 000066B5 881D(88C40300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
   103 000066BB C605(89C40300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   104 000066C2 881D(5EC40300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
   105 000066C8 881D(7FC40300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
   106                              <1> 
   107 000066CE 50                  <1>     push rax        ;Save rax to use temporarily as table base 
   108 000066CF 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   109 000066D1 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   110 000066D3 488D05FB9BFFFF      <1>     lea rax, kDispTbl
   111 000066DA 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   112 000066DD 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   113 000066E1 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   114 000066E4 58                  <1>     pop rax
   115                              <1> 
   116 000066E5 84E4                <1>     test ah, ah     ;Simple Terminate function?
   117 000066E7 741C                <1>     jz .fddiskOp
   118 000066E9 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   119 000066EC 745E                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   120 000066EE 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   121 000066F1 7712                <1>     ja .fddiskOp
   122                              <1> ;Char operations here
   123 000066F3 F605(FCC30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   124 000066FA 7550                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   125 000066FC 488D25(89D30300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   126 00006703 EB47                <1>     jmp short .fdGoToFunction
   127                              <1> .fddiskOp:
   128                              <1>     ;Disk operations go here
   129                              <1>     ;Save rax on entry to a disk funciton
   130 00006705 488905(28C40300)    <1>     mov qword [oldRAX], rax
   131                              <1>     ;Clear up error info
   132 0000670C C605(FFC30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   133 00006713 C605(FCC30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   134 0000671A C605(80C40300)00    <1>     mov byte [ctrlCExit], 0     ;Also reset the ctrlC exit flag
   135 00006721 C605(FEC30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   136                              <1> 
   137 00006728 50                  <1>     push rax
   138 00006729 B482                <1>     mov ah, 82h ;Cancel all critical section!
   139 0000672B CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   140 0000672D 58                  <1>     pop rax
   141                              <1> 
   142 0000672E C605(89C40300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   143 00006735 488D25(C9D90300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   144 0000673C F605(27C40300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   145 00006743 7407                <1>     jz .fdGoToFunction
   146                              <1> ; HANDLE CTRL+BREAK HERE!
   147 00006745 50                  <1>     push rax
   148 00006746 E86ABAFFFF          <1>     call checkBreak   ; Check for a ^C
   149 0000674B 58                  <1>     pop rax
   150                              <1> .fdGoToFunction:
   151 0000674C 48871D(77C40300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   152                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   153                              <1>     ;
   154                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   155                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   156                              <1>     ;
   157                              <1>     %if DEBUG && REGS
   158                              <1>     ;Print stack if necessary function
   159                              <1>     debugEnterM
   160                              <1>     call debPrintDOSStack
   161                              <1>     debugExitM
   162                              <1>     %endif
   163 00006753 FF15(77C40300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   164                              <1>     %if DEBUG
   165                              <1>     ;Entry function
   166                              <1>     debugEnterM
   167                              <1>     lea rbp, .l0002
   168                              <1>     call debPrintNullString
   169                              <1>     jmp short .l0003
   170                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   171                              <1> .l0003:    
   172                              <1>     debugExitM
   173                              <1>     %endif
   174                              <1>     %if DEBUG && REGS
   175                              <1>     ;Exit function
   176                              <1>     debugEnterM
   177                              <1>     call debPrintDOSStack
   178                              <1>     debugExitM
   179                              <1>     %endif
   180                              <1> .fdExit:
   181 00006759 FA                  <1>     cli     ;Redisable interrupts
   182 0000675A FE0D(FDC30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   183 00006760 488B25(6FC40300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   184 00006767 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   185 0000676A 488B05(5FC40300)    <1>     mov rax, qword [oldoldRSP]
   186 00006771 488905(6FC40300)    <1>     mov qword [oldRSP], rax
   187 00006778 E806000000          <1>     call dosPopRegs  ;Pop the frame
   188 0000677D 48CF                <1>     iretq
   189                              <1> .fdExitBad:
   190 0000677F 30C0                <1>     xor al, al
   191                              <1> defaultIretq:
   192 00006781 48CF                <1>     iretq
   193                              <1> dosPopRegs:
   194 00006783 8F05(67C40300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   195 00006789 58                  <1>     pop rax
   196 0000678A 5B                  <1>     pop rbx
   197 0000678B 59                  <1>     pop rcx
   198 0000678C 5A                  <1>     pop rdx
   199 0000678D 5E                  <1>     pop rsi
   200 0000678E 5F                  <1>     pop rdi
   201 0000678F 5D                  <1>     pop rbp
   202 00006790 4158                <1>     pop r8
   203 00006792 4159                <1>     pop r9
   204 00006794 FF25(67C40300)      <1>     jmp qword [dosReturn]
   205                              <1> dosPushRegs:
   206 0000679A 8F05(67C40300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   207 000067A0 4151                <1>     push r9
   208 000067A2 4150                <1>     push r8
   209 000067A4 55                  <1>     push rbp
   210 000067A5 57                  <1>     push rdi
   211 000067A6 56                  <1>     push rsi
   212 000067A7 52                  <1>     push rdx
   213 000067A8 51                  <1>     push rcx
   214 000067A9 53                  <1>     push rbx
   215 000067AA 50                  <1>     push rax
   216 000067AB FF25(67C40300)      <1>     jmp qword [dosReturn]
   217                              <1> dosCrit1Enter:
   218                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    18                              <2> %%_ret:
    19 000067B1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   219 000067B2 B801800000          <1>     mov eax, 8001h
   220 000067B7 CD4A                <1>     int 4ah
   221 000067B9 58                  <1>     pop rax
   222                              <1>     return
    18                              <2> %%_ret:
    19 000067BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   223                              <1> dosCrit1Exit:
   224                              <1>     return
    18                              <2> %%_ret:
    19 000067BB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   225 000067BC B801810000          <1>     mov eax, 8101h
   226 000067C1 CD4A                <1>     int 4ah
   227 000067C3 58                  <1>     pop rax
   228                              <1>     return
    18                              <2> %%_ret:
    19 000067C4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   229                              <1> dosCrit2Enter:
   230                              <1>     return
    18                              <2> %%_ret:
    19 000067C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   231 000067C6 B802800000          <1>     mov eax, 8002h
   232 000067CB CD4A                <1>     int 4ah
   233 000067CD 58                  <1>     pop rax
   234                              <1>     return
    18                              <2> %%_ret:
    19 000067CE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   235                              <1> dosCrit2Exit:
   236                              <1>     return
    18                              <2> %%_ret:
    19 000067CF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   237 000067D0 B802810000          <1>     mov eax, 8102h
   238 000067D5 CD4A                <1>     int 4ah
   239 000067D7 58                  <1>     pop rax
   240                              <1>     return
    18                              <2> %%_ret:
    19 000067D8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   241                              <1> 
   242                              <1> ;FCB specific returns
   243                              <1> fcbGoodExit:
   244                              <1> ;Preserve the carry flag on entry to DOS
   245 000067D9 30C0                <1>     xor al, al ;Set return code al = 0
   246                              <1>     return
    18                              <2> %%_ret:
    19 000067DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   247                              <1> fcbErrExit:
   248                              <1> ;Preserve the carry flag on entry to DOS
   249                              <1> ;Input: eax = Extended error code to store in SDA 
   250 000067DC E836000000          <1>     call xLatError
   251 000067E1 B0FF                <1>     mov al, -1  ;Set return code al = -1
   252 000067E3 F9                  <1>     stc
   253                              <1>     return
    18                              <2> %%_ret:
    19 000067E4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   254                              <1> 
   255                              <1> ;Handle and General DOS Returns
   256                              <1> ;All good exits destroy AT LEAST ax 
   257                              <1> extGoodExit2:
   258                              <1> ;Good exit with an extended return code in eax
   259 000067E5 E863FBFFFF          <1>     call getUserRegs
   260 000067EA 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   261 000067EC EB08                <1>     jmp short extGoodExit.extGoodCommon
   262                              <1> extGoodExit:
   263                              <1> ;Good exit
   264                              <1> ;Return code in ax
   265 000067EE E85AFBFFFF          <1>     call getUserRegs
   266 000067F3 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   267                              <1> .extGoodCommon:
   268 000067F6 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   269 000067FA F8                  <1>     clc
   270                              <1>     return
    18                              <2> %%_ret:
    19 000067FB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   271                              <1> extErrExit:
   272                              <1> ;The extended error exit from DOS
   273                              <1> ;Jumped to with AL=Extended error code
   274                              <1> ;Can be called too.
   275                              <1> ;Input: al = Extended error code
   276                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   277                              <1> ;   Returns with: eax = xLat Error
   278                              <1> ;                 rsi = callerFrame
   279 000067FC 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   280 000067FF E813000000          <1>     call xLatError
   281 00006804 E891000000          <1>     call checkFail
   282 00006809 E83FFBFFFF          <1>     call getUserRegs
   283 0000680E 668906              <1>     mov word [rsi + callerFrame.rax], ax
   284 00006811 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   285 00006815 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   286                              <1>     return
    18                              <2> %%_ret:
    19 00006816 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   287                              <1> xLatError:
   288                              <1> ;Translates the error code given in ax and sets error code in the var
   289                              <1> ; Input: ax = Extended Error Code
   290                              <1> ; Output: ax = Potentially translated Error Code
   291                              <1> ;         [errorExCde] = Original Error Code
   292                              <1> ;Preserves all registers except ax
   293                              <1> ;AH is always returned as 0
   294 00006817 53                  <1>     push rbx
   295 00006818 51                  <1>     push rcx
   296 00006819 56                  <1>     push rsi
   297 0000681A 668905(00C40300)    <1>     mov word [errorExCde], ax
   298 00006821 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   299 00006823 488D356798FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   300                              <1> .readEntry:
   301 0000682A 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   302 0000682C 3CFF                <1>     cmp al, -1
   303 0000682E 741F                <1>     je .skipXlat
   304 00006830 3A05(29C40300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   305 00006836 7408                <1>     je .found
   306                              <1>     ;Here, entry not found, goto next entry
   307 00006838 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   308 0000683B 4801C6              <1>     add rsi, rax    ;Goto next entry
   309 0000683E EBEA                <1>     jmp short .readEntry
   310                              <1> .found:
   311                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   312 00006840 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   313                              <1> .mainSearch:
   314 00006843 AC                  <1>     lodsb   ;Get one byte into al
   315 00006844 38C3                <1>     cmp bl, al  ;Check against the error code
   316 00006846 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   317 00006848 FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   318 0000684A 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   319                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   320 0000684C 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   321                              <1> .skipXlat:
   322 0000684F 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   323 00006851 5E                  <1>     pop rsi
   324 00006852 59                  <1>     pop rcx
   325 00006853 5B                  <1>     pop rbx
   326                              <1>     return
    18                              <2> %%_ret:
    19 00006854 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   327                              <1> setErrorVars:   ;Int 4Fh, AX=1222h
   328                              <1> ;Looks up the error code in the variable and sets the other error vars
   329                              <1> ;Called with the lookup table in rsi
   330                              <1> ;All regs preserved
   331 00006855 50                  <1>     push rax
   332 00006856 53                  <1>     push rbx
   333 00006857 51                  <1>     push rcx
   334 00006858 56                  <1>     push rsi
   335 00006859 0FB71D(00C40300)    <1>     movzx ebx, word [errorExCde]
   336 00006860 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   337                              <1> .readEntry:
   338 00006865 AD                  <1>     lodsd   ;Read the dword table entry into eax
   339 00006866 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   340 0000686B 7428                <1>     je .exit    
   341 0000686D 38D8                <1>     cmp al, bl  ;Compare the error codes
   342 0000686F 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   343 00006871 D3E8                <1>     shr eax, cl
   344 00006873 3CFF                <1>     cmp al, -1
   345 00006875 7406                <1>     je .skipClass
   346 00006877 8805(03C40300)      <1>     mov byte [errorClass], al
   347                              <1> .skipClass:
   348 0000687D D3E8                <1>     shr eax, cl
   349 0000687F 3CFF                <1>     cmp al, -1
   350 00006881 7406                <1>     je .skipAct
   351 00006883 8805(02C40300)      <1>     mov byte [errorAction], al
   352                              <1> .skipAct:
   353 00006889 D3E8                <1>     shr eax, cl
   354 0000688B 3CFF                <1>     cmp al, -1
   355 0000688D 7406                <1>     je .exit
   356 0000688F 8805(FFC30300)      <1>     mov byte [errorLocus], al
   357                              <1> .exit:
   358 00006895 5E                  <1>     pop rsi
   359 00006896 59                  <1>     pop rcx
   360 00006897 5B                  <1>     pop rbx
   361 00006898 58                  <1>     pop rax
   362                              <1>     return
    18                              <2> %%_ret:
    19 00006899 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   363                              <1> checkFail:
   364                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   365                              <1> ; and swaps the var error code if so
   366 0000689A 803D(5EC40300)00    <1>     cmp byte [Int44Fail], 0
   367 000068A1 7509                <1>     jnz .skipFail
   368 000068A3 66C705(00C40300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   368 000068AB 00                  <1>
   369                              <1> .skipFail:
   370 000068AC 56                  <1>     push rsi
   371 000068AD 488D357998FFFF      <1>     lea rsi, extErrTbl
   372 000068B4 E89CFFFFFF          <1>     call setErrorVars
   373 000068B9 5E                  <1>     pop rsi
   374                              <1>     return
    18                              <2> %%_ret:
    19 000068BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   375                              <1> ;========================================:
   376                              <1> ;      Reentrant Kernel Functions        :
   377                              <1> ;========================================:
   378                              <1> ctrlBreakCheck:    ;ah = 33h
   379 000068BB 84C0                <1>     test al, al
   380 000068BD 7508                <1>     jnz .cbcget  ;Get the state or other functions
   381 000068BF 8A15(27C40300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   382 000068C5 48CF                <1>     iretq
   383                              <1> .cbcget:
   384 000068C7 3C02                <1>     cmp al, 02h
   385 000068C9 771A                <1>     ja .cbcBad
   386 000068CB 740D                <1>     jz .cbcxchg ;Function 2
   387 000068CD 52                  <1>     push rdx
   388 000068CE 80E201              <1>     and dl, 1   ;Get only the bottom bit
   389 000068D1 8815(27C40300)      <1>     mov byte [breakFlag], dl    ;Set the state
   390 000068D7 5A                  <1>     pop rdx
   391 000068D8 48CF                <1>     iretq
   392                              <1> .cbcxchg:
   393 000068DA 80E201              <1>     and dl, 1
   394 000068DD 8615(27C40300)      <1>     xchg byte [breakFlag], dl
   395 000068E3 48CF                <1>     iretq
   396                              <1> .cbcBad:
   397 000068E5 B0FF                <1>     mov al, -1
   398 000068E7 48CF                <1>     iretq
   399                              <1> 
   400                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   401 000068E9 48891D(14C40300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   402 000068F0 48CF                <1>     iretq
   403                              <1> 
   404                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   405 000068F2 488B15(14C40300)    <1>     mov rdx, qword [currentPSP]
   406 000068F9 48CF                <1>     iretq
   407                              <1> 
   408                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   409 000068FB 488B15(14C40300)    <1>     mov rdx, qword [currentPSP]
   410 00006902 48CF                <1>     iretq
   411                              <1> 
   412                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   413 00006904 8805(D2D90300)      <1>     mov byte [lookahead], al    
   414 0000690A 48CF                <1>     iretq
   415                              <1> 
   416                              <1> ;========================================:
   417                              <1> ;            Kernel Functions            :
   418                              <1> ;========================================:
   419                              <1> diskReset:         ;ah = 0Dh
   420                              <1> ;Flush all dirty buffers to disk
   421 0000690C E8A0FEFFFF          <1>     call dosCrit1Enter
   422 00006911 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   423                              <1> .drCheckBuffer:
   424 00006918 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   425 0000691C 7407                <1>     jz .drGotoNextBuffer
   426                              <1> .drFlushBuffer:
   427 0000691E E81B9BFFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   428 00006923 720C                <1>     jc .drExit
   429                              <1> .drGotoNextBuffer:
   430 00006925 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   431 00006928 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   432 0000692F 75E7                <1>     jne .drCheckBuffer
   433                              <1> .drExit:
   434 00006931 E885FEFFFF          <1>     call dosCrit1Exit
   435 00006936 B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   436 0000693B CD4F                <1>     int 4fh
   437                              <1>     return
    18                              <2> %%_ret:
    19 0000693D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   438                              <1> 
   439                              <1> selectDisk:        ;ah = 0Eh
   440                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   441 0000693E 88D0                <1>     mov al, dl
   442 00006940 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   443 00006942 E82AFAFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   444 00006947 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   445 00006949 8805(26C40300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   446                              <1> .skipSettingCurrent:
   447 0000694F 0FB605(7EC00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   448                              <1>     return
    18                              <2> %%_ret:
    19 00006956 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   449                              <1> 
   450                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   451 00006957 8A05(26C40300)      <1>     mov al, byte [currentDrv]
   452                              <1>     return
    18                              <2> %%_ret:
    19 0000695D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   453                              <1> 
   454                              <1> FATinfoDefault:    ;ah = 1Bh
   455 0000695E 30D2                <1>     xor dl, dl
   456                              <1> FATinfoDevice:     ;ah = 1Ch
   457                              <1> ;Input: dl = 1 based drive number
   458                              <1> ;Output:
   459                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   460                              <1> ;cx = bytes per sector
   461                              <1> ;edx = total number of clusters
   462                              <1> ;rbx = Ptr to media ID byte
   463 00006960 88D0                <1>     mov al, dl  ;Move drive number into al
   464 00006962 E873FAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   465 00006967 7307                <1>     jnc .fidCDSFound
   466 00006969 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   467 0000696E EB2E                <1>     jmp short .error 
   468                              <1> .fidCDSFound:
   469 00006970 E886F9FFFF          <1>     call getDiskData
   470 00006975 7227                <1>     jc .error
   471                              <1> ;Now we have that:
   472                              <1> ;al = sectors per cluster
   473                              <1> ;ah = media ID byte
   474                              <1> ;ebx = total clusters
   475                              <1> ;cx = bytes per sector
   476                              <1> ;edx = number of available clusters
   477 00006977 E8D1F9FFFF          <1>     call getUserRegs
   478 0000697C 8825(86C70300)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   479 00006982 30E4                <1>     xor ah, ah
   480 00006984 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   481 00006987 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   482 0000698B 488D1D(86C70300)    <1>     lea rbx, mediaByte
   483 00006992 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   484 00006996 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   485                              <1> .badExit:
   486 0000699A 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   487                              <1>     return
    18                              <2> %%_ret:
    19 0000699D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   488                              <1> .error:
   489 0000699E E859FEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   490 000069A3 66B8FFFF            <1>     mov ax, -1
   491 000069A7 EBF1                <1>     jmp short .badExit
   492                              <1> 
   493                              <1> setIntVector:      ;ah = 25h
   494                              <1> ;Called with:
   495                              <1> ;   rdx = Pointer to interrupt handler
   496                              <1> ;   al = Interrupt number
   497 000069A9 50                  <1>     push rax    ;Preserve all registers in call
   498 000069AA 53                  <1>     push rbx
   499 000069AB 51                  <1>     push rcx
   500 000069AC 52                  <1>     push rdx
   501 000069AD 56                  <1>     push rsi
   502 000069AE 55                  <1>     push rbp
   503 000069AF 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   504 000069B1 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   505                              <1> ;First call to get default BIOS segement selector and attribute word
   506 000069B7 88C3                <1>     mov bl, al  ;Set interrupt number 
   507 000069B9 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   508 000069BE CD35                <1>     int 35h
   509 000069C0 E888F9FFFF          <1>     call getUserRegs
   510 000069C5 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   511 000069C9 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   512 000069CB 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   513                              <1> ;dx preserves the attribute word
   514 000069CD B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   515 000069D2 CD35                <1>     int 35h
   516 000069D4 5D                  <1>     pop rbp
   517 000069D5 5E                  <1>     pop rsi
   518 000069D6 5A                  <1>     pop rdx
   519 000069D7 59                  <1>     pop rcx
   520 000069D8 5B                  <1>     pop rbx
   521 000069D9 58                  <1>     pop rax
   522                              <1>     return
    18                              <2> %%_ret:
    19 000069DA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   523                              <1> 
   524                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   525 000069DB 8805(C5C30300)      <1>     mov byte [verifyFlag], al
   526 000069E1 8025(C5C30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   527                              <1>     return
    18                              <2> %%_ret:
    19 000069E8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   528                              <1> getDOSversion:     ;ah = 30h
   529 000069E9 E85FF9FFFF          <1>     call getUserRegs
   530 000069EE 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   531 000069F0 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   532 000069F3 668B050696FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   533 000069FA 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   534                              <1>     return
    18                              <2> %%_ret:
    19 000069FD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   535                              <1> 
   536                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   537                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   538 000069FE 30D2                <1>     xor dl, dl
   539                              <1> getDeviceDPBptr:   ;ah = 32h
   540                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   541                              <1> ;On exit: rbx = DPB pointer
   542 00006A00 88D0                <1>     mov al, dl
   543 00006A02 E8D3F9FFFF          <1>     call getCDS
   544 00006A07 722C                <1>     jc .bad
   545 00006A09 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   546 00006A10 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   547 00006A16 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   548                              <1>     ;Here ONLY if accessing critical Disk data structures
   549 00006A18 E894FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   550 00006A1D E88AF6FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   551 00006A22 E894FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   552 00006A27 720C                <1>     jc .bad
   553 00006A29 E81FF9FFFF          <1>     call getUserRegs
   554 00006A2E 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   555 00006A32 30C0                <1>     xor al, al
   556                              <1>     return
    18                              <2> %%_ret:
    19 00006A34 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   557                              <1> .bad:
   558 00006A35 B0FF                <1>     mov al, -1
   559                              <1>     return
    18                              <2> %%_ret:
    19 00006A37 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> getInDOSflagPtr:   ;ah = 34h
   562 00006A38 488D15(FDC30300)    <1>     lea rdx, inDOS
   563 00006A3F E809F9FFFF          <1>     call getUserRegs
   564 00006A44 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   565                              <1>     return
    18                              <2> %%_ret:
    19 00006A48 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   566                              <1> 
   567                              <1> getIntVector:      ;ah = 35h
   568                              <1> ;Called with:
   569                              <1> ;   al = Interrupt Number
   570                              <1> ;Returns:
   571                              <1> ;   rbx = Pointer to interrupt handler
   572 00006A49 E8F1F8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   573 00006A4E E8FAF8FFFF          <1>     call getUserRegs
   574 00006A53 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   575 00006A57 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   576                              <1>     return
    18                              <2> %%_ret:
    19 00006A59 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   577                              <1> 
   578                              <1> getDiskFreeSpace:  ;ah = 36h
   579                              <1> ;Input: Drive number in dl (0 = Current)
   580                              <1> ;Output:    ax = sectors per cluster
   581                              <1> ;           ebx = number of free clusters
   582                              <1> ;           cx = bytes per sector
   583                              <1> ;           edx = total clusters on drive
   584 00006A5A 88D0                <1>     mov al, dl
   585 00006A5C E879F9FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   586 00006A61 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   587                              <1> ;Else, we at an error.
   588                              <1> ;Simply return with CY set and error code in al with extended error info
   589 00006A63 B80F000000          <1>     mov eax, errBadDrv
   590 00006A68 E88FFDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   591                              <1>     ;extErrExit sets rsi to caller regs
   592 00006A6D 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   593                              <1>     return
    18                              <2> %%_ret:
    19 00006A72 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   594                              <1> .gdfsCDSFound:
   595 00006A73 E883F8FFFF          <1>     call getDiskData
   596 00006A78 7219                <1>     jc .error
   597                              <1> ;Now we have that:
   598                              <1> ;al = sectors per cluster
   599                              <1> ;ah = media ID byte
   600                              <1> ;ebx = total clusters
   601                              <1> ;cx = bytes per sector
   602                              <1> ;edx = number of available clusters
   603 00006A7A E8CEF8FFFF          <1>     call getUserRegs
   604 00006A7F 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   605 00006A81 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   606 00006A84 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   607 00006A88 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   608 00006A8B 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   609                              <1> .badExit:
   610 00006A8F 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   611                              <1>     return
    18                              <2> %%_ret:
    19 00006A92 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   612                              <1> .error:
   613 00006A93 E864FDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   614 00006A98 66B8FFFF            <1>     mov ax, -1
   615 00006A9C EBF1                <1>     jmp short .badExit
   616                              <1> 
   617                              <1> 
   618                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   619 00006A9E 31C0                <1>     xor eax, eax
   620 00006AA0 668705(24C40300)    <1>     xchg ax, word [errorLevel]
   621 00006AA7 E942FDFFFF          <1>     jmp extGoodExit
   622                              <1> 
   623                              <1> getSysVarsPtr:     ;ah = 52h
   624 00006AAC 488D15(41C00300)    <1>     lea rdx, sysVarsPtr
   625 00006AB3 E895F8FFFF          <1>     call getUserRegs
   626 00006AB8 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   627                              <1>     return
    18                              <2> %%_ret:
    19 00006ABC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   628                              <1> 
   629                              <1> 
   630                              <1> ;AH = 53h - CREATE DPB
   631                              <1> createDPB:         ;generates a DPB from a given BPB
   632                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   633                              <1> ;This is done so that the other fields of the DPB can be recycled
   634                              <1> ;Input: rsi = ptr to the BPB
   635                              <1> ;       rbp = ptr to the DPB
   636                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   637                              <1> ;bMediaDescriptor
   638 00006ABD 8A4615              <1>     mov al, byte [rsi + bpb.media]
   639 00006AC0 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   640                              <1> ;dFirstFreeCluster
   641 00006AC3 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   642                              <1> ;dNumberOfFreeClusters
   643 00006ACA C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   644                              <1> ;wBytesPerSector
   645 00006AD1 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   646 00006AD5 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   647                              <1> ;bMaxSectorInCluster
   648 00006AD9 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   649 00006ADC FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   650 00006ADE 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   651                              <1> ;bSectorsPerClusterShift
   652 00006AE1 FEC0                <1>     inc al
   653 00006AE3 30C9                <1>     xor cl, cl
   654                              <1> .cd2:
   655 00006AE5 D0E8                <1>     shr al, 1
   656 00006AE7 7404                <1>     jz .cd3
   657 00006AE9 FEC1                <1>     inc cl
   658 00006AEB EBF8                <1>     jmp short .cd2
   659                              <1> .cd3:
   660 00006AED 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   661                              <1> ;wFAToffset, number of reserved sectors in partition
   662 00006AF0 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   663 00006AF4 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   664                              <1> ;bNumberOfFATs
   665 00006AF8 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   666 00006AFB 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   667                              <1> ;wNumberRootDirEntries
   668                              <1> ;Gets the number of 32 byte entries in the root directory
   669                              <1> ;Only valid for FAT 12/16
   670 00006AFE 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   671 00006B02 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   672                              <1> ;dFATlength, get the FAT length
   673 00006B06 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   674 00006B0A 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   675 00006B0D 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   676 00006B0F 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   677 00006B12 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   678                              <1> ;Complex cases below...
   679                              <1> ;dClusterHeapOffset, start sector of the data area
   680 00006B15 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   681 00006B19 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   682 00006B1C 85C0                <1>     test eax, eax
   683 00006B1E 0F44C3              <1>     cmovz eax, ebx
   684                              <1> ;eax = FATsz
   685 00006B21 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   686 00006B25 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   687 00006B28 85DB                <1>     test ebx, ebx
   688 00006B2A 0F44D9              <1>     cmovz ebx, ecx 
   689                              <1> ;ebx = TotSec
   690 00006B2D 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   691 00006B30 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   692                              <1> .cd4:
   693 00006B32 01C2                <1>     add edx, eax
   694 00006B34 FEC9                <1>     dec cl
   695 00006B36 75FA                <1>     jnz .cd4
   696 00006B38 89D0                <1>     mov eax, edx    ;Store product in eax
   697 00006B3A 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   698 00006B3E 01D0                <1>     add eax, edx
   699                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   700 00006B40 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   701 00006B44 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   702 00006B47 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   703 00006B4B 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   704 00006B4C 89D0                <1>     mov eax, edx
   705 00006B4E 31D2                <1>     xor edx, edx
   706 00006B50 F7F1                <1>     div ecx
   707 00006B52 89C2                <1>     mov edx, eax
   708 00006B54 58                  <1>     pop rax
   709 00006B55 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   710                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   711                              <1>     ;aka eax = Start sector of the data area in volume
   712 00006B57 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   713                              <1> ;dClusterCount
   714 00006B5A 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   715 00006B5C 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   716 00006B5E 31D2                <1>     xor edx, edx
   717 00006B60 BB01000000          <1>     mov ebx, 1
   718 00006B65 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   719 00006B68 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   720 00006B6A F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   721 00006B6C FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   722 00006B6E 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   723                              <1> ;dFirstUnitOfRootDir
   724 00006B71 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   725 00006B76 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   726 00006B79 770F                <1>     ja .cd5
   727                              <1>     ;Else, we need to find the first sector of the root directory
   728                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   729 00006B7B 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   730 00006B7F 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   731                              <1> .cd51:
   732 00006B83 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   733 00006B86 FFC9                <1>     dec ecx
   734 00006B88 75F9                <1>     jnz .cd51
   735                              <1> .cd5:
   736 00006B8A 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   737                              <1> ;Exit epilogue
   738 00006B8D 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   739 00006B94 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   740                              <1>     %if DEBUG && DPBINFO
   741                              <1>     ;Print DPB 
   742                              <1>     debugEnterM
   743                              <1>     push rbp
   744                              <1>     lea rbp, .l0000
   745                              <1>     call debPrintNullString
   746                              <1>     pop rbp
   747                              <1>     call debDPBBPBptr
   748                              <1>     call debMakeDebuggerRespond
   749                              <1>     jmp short .l0001
   750                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   751                              <1> .l0001:
   752                              <1>     debugExitM
   753                              <1>     %endif
   754                              <1>     return
    18                              <2> %%_ret:
    19 00006B96 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   755                              <1> 
   756                              <1> getVerifySetting:  ;ah = 54h
   757 00006B97 8A05(C5C30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   758                              <1>     return
    18                              <2> %%_ret:
    19 00006B9D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   759                              <1> 
   760                              <1> getExtendedError:  ;ah = 59h
   761 00006B9E E8AAF7FFFF          <1>     call getUserRegs
   762 00006BA3 668B05(00C40300)    <1>     mov ax, word [errorExCde]
   763 00006BAA 8A2D(FFC30300)      <1>     mov ch, byte [errorLocus]
   764 00006BB0 8A3D(03C40300)      <1>     mov bh, byte [errorClass]
   765 00006BB6 8A1D(02C40300)      <1>     mov bl, byte [errorAction]
   766 00006BBC 668906              <1>     mov word [rsi + callerFrame.rax], ax
   767 00006BBF 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   768 00006BC3 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   769                              <1>     return
    18                              <2> %%_ret:
    19 00006BC6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   770                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   771                              <1> noOp:
   772                              <1>     return
    18                              <2> %%_ret:
    19 00006BC7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    43                                  %include "./Source/Kernel/Net/server.asm"
    44                              <1> ;Network functions here
    45                              <1> 
    46                              <1> dosServer:  ;ah = 5Dh
    47                              <1> ;Dispatches the server function in al. Many of these are share hooks.
    48                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
    49                              <1> ;   rdx = Pointer to DPL
    50 00006BC8 3C07                <1>     cmp al, 07h
    51 00006BCA 7204                <1>     jb .skip
    52 00006BCC 3C09                <1>     cmp al, 09h
    53 00006BCE 7619                <1>     jbe .skip2
    54                              <1> .skip:
    55 00006BD0 4889D6              <1>     mov rsi, rdx
    56 00006BD3 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    57 00006BD7 66891D(38C40300)    <1>     mov word [machineNum], bx
    58 00006BDE 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    59 00006BE2 48891D(30C40300)    <1>     mov qword [serverPSP], rbx
    60                              <1> .skip2:
    61 00006BE9 488D1DD7FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    62 00006BF0 53                  <1>     push rbx
    63 00006BF1 488B1D(7CDA0300)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    64 00006BF8 53                  <1>     push rbx    ;Push the table ptr on the stack
    65 00006BF9 50                  <1>     push rax    ;Push al onto stack as a qword
    66 00006BFA E856010000          <1>     call serverFunctionSelect
    67 00006BFF B801000000          <1>     mov eax, eLocUnk
    68 00006C04 8805(FFC30300)      <1>     mov byte [errorLocus], al
    69 00006C0A E9EDFBFFFF          <1>     jmp extErrExit
    70                              <1> 
    71                              <1> serverDispatch: ;AX=5D00h
    72                              <1> ;Input: rsi points to the DOS parameter list
    73 00006C0F 58                  <1>     pop rax ;Pop additional return ptr off the stack
    74 00006C10 56                  <1>     push rsi    ;Put dpl ptr in rdi
    75 00006C11 5F                  <1>     pop rdi
    76 00006C12 E836F7FFFF          <1>     call getUserRegs
    77 00006C17 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    78 00006C1A 56                  <1>     push rsi
    79 00006C1B B906000000          <1>     mov ecx, 6
    80 00006C20 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    81 00006C23 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    82 00006C2A 48A5                <1>     movsq   ;Transfer r8...
    83 00006C2C 48A5                <1>     movsq   ;... and r9
    84 00006C2E 5E                  <1>     pop rsi
    85 00006C2F 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    86 00006C32 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    87 00006C36 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    88 00006C3A 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    89 00006C3E 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    90 00006C42 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    91 00006C46 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    92 00006C4A 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    93 00006C4E 48891D(77C40300)    <1>     mov qword [oldRBX], rbx
    94 00006C55 C605(F2C60300)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    95 00006C5C E94AFAFFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    96                              <1> 
    97                              <1> commitAllFilesForProcess:   ;AX=5D01h
    98                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    99                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
   100                              <1> ;Thus we check the first two bytes of the current PSP to be CD 40h
   101                              <1> ;If so, we proceed, otherwise, fail with AccDen
   102 00006C61 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
   103 00006C68 66813BCD40          <1>     cmp word [rbx], 40CDh
   104 00006C6D 740A                <1>     je .validTask
   105 00006C6F B805000000          <1>     mov eax, errAccDen
   106 00006C74 E983FBFFFF          <1>     jmp extErrExit
   107                              <1> .validTask:
   108 00006C79 31DB                <1>     xor ebx, ebx    ;Start from file 0
   109 00006C7B E831FBFFFF          <1>     call dosCrit1Enter
   110                              <1> .mainLoop:
   111                              <1>     ;Now loop through the JFT of the current task committing the files
   112 00006C80 53                  <1>     push rbx
   113 00006C81 E80AD9FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
   114 00006C86 7227                <1>     jc .exit
   115 00006C88 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
   116 00006C8D 741B                <1>     je .gotoNextFile
   117 00006C8F 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
   118 00006C94 7414                <1>     je .gotoNextFile
   119 00006C96 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;Dont commit redirs
   120 00006C9C 750C                <1>     jnz .gotoNextFile
   121 00006C9E 48893D(22C70300)    <1>     mov qword [currentSFT], rdi ;Set this as the current SFT
   122 00006CA5 E89EC6FFFF          <1>     call commitMain ;Will reenter critical section but thats ok
   123                              <1>     ;If it succeeded, great, cool also if not, keep going!
   124                              <1> .gotoNextFile:
   125 00006CAA 5B                  <1>     pop rbx
   126 00006CAB FFC3                <1>     inc ebx
   127 00006CAD EBD1                <1>     jmp short .mainLoop
   128                              <1> .exit:
   129 00006CAF E807FBFFFF          <1>     call dosCrit1Exit
   130 00006CB4 5B                  <1>     pop rbx ;Align stack
   131 00006CB5 E934FBFFFF          <1>     jmp extGoodExit
   132                              <1> 
   133                              <1> closeFilesByName:           ;AX=5D02h
   134 00006CBA FF15(DCC00300)      <1>     call qword [closeNameShare]
   135                              <1> .shareExit: ;Use this symbol if we need a decision to be made
   136                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
   137 00006CC0 0F8236FBFFFF        <1>     jc extErrExit
   138                              <1> .shareExitGood:
   139 00006CC6 E923FBFFFF          <1>     jmp extGoodExit
   140                              <1> 
   141                              <1> closeFilesByComputer:       ;AX=5D03h
   142 00006CCB FF15(CCC00300)      <1>     call qword [closeCompShare]
   143 00006CD1 EBED                <1>     jmp short closeFilesByName.shareExit
   144                              <1> 
   145                              <1> closeFilesByProcess:        ;AX=5D04h
   146 00006CD3 FF15(D4C00300)      <1>     call qword [closeTaskShare]
   147 00006CD9 EBE5                <1>     jmp short closeFilesByName.shareExit
   148                              <1> 
   149                              <1> getOpenFileListEntry:       ;AX=5D05h
   150 00006CDB FF15(FCC00300)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   151 00006CE1 72DD                <1>     jc closeFilesByName.shareExitBad
   152 00006CE3 E865F6FFFF          <1>     call getUserRegs
   153 00006CE8 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   154 00006CEC 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   155                              <1> .shareExit:    ;rcx must be zero extended however to use this
   156 00006CF0 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   157                              <1> .shareExit2:
   158 00006CF4 EBD0                <1>     jmp short closeFilesByName.shareExitGood
   159                              <1> 
   160                              <1> getSDAData:                 ;AX=5D06h
   161                              <1> ;Returns:
   162                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   163                              <1> ;   (critical error flag is first byte) (see #01687)
   164                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   165                              <1> ;   rdx = size in bytes of area which must always be swapped
   166 00006CF6 488D3D(FCC30300)    <1>     lea rdi, sda
   167 00006CFD 48B980160000000000- <1>     mov rcx, sdaLen
   167 00006D06 00                  <1>
   168 00006D07 48BA54160000000000- <1>     mov rdx, sdaMSLen
   168 00006D10 00                  <1>
   169 00006D11 E837F6FFFF          <1>     call getUserRegs
   170 00006D16 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   171 00006D1A 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   172 00006D1E EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   173                              <1> 
   174                              <1> printerRedir:               ;AX=5D07/8/9h
   175 00006D20 50                  <1>     push rax
   176 00006D21 B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   177 00006D26 CD4F                <1>     int 4Fh
   178 00006D28 5B                  <1>     pop rbx
   179 00006D29 7295                <1>     jc short closeFilesByName.shareExitBad
   180 00006D2B EB99                <1>     jmp short  closeFilesByName.shareExitGood
   181                              <1> 
   182                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   183                              <1> ;Input:
   184                              <1> ;   rsi -> DPL
   185 00006D2D 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   186 00006D2F 668905(00C40300)    <1>     mov word [errorExCde], ax
   187 00006D36 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Get rdi as a full ptr
   188 00006D3A 488905(04C40300)    <1>     mov qword [xInt44RDI], rax
   189 00006D41 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   190 00006D44 668905(02C40300)    <1>     mov word [errorAction], ax  ;Store action and class together
   191 00006D4B 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   192 00006D4E 8825(FFC30300)      <1>     mov byte [errorLocus], ah
   193                              <1>     return  ;Return to the function ptr on the stack (the return function)
    18                              <2> %%_ret:
    19 00006D54 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   194                              <1> 
   195                              <1> serverFunctionSelect:
   196                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   197                              <1> ;Second parameter is table address, (BP + 3*8)
   198 00006D55 55                  <1>     push rbp
   199 00006D56 4889E5              <1>     mov rbp, rsp
   200 00006D59 53                  <1>     push rbx
   201 00006D5A 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   202 00006D5E 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   203 00006D61 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   204 00006D64 731E                <1>     jnb .argumentTooBig
   205 00006D66 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx zeroextended
   206 00006D6A C1E302              <1>     shl ebx, 2  ;Convert to word offset
   207 00006D6D FFC3                <1>     inc ebx ;Go past the initial byte of the table
   208 00006D6F 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   209 00006D72 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   210 00006D76 48895D10            <1>     mov qword [rbp + 2*8], rbx  ;Store this address as the return address
   211 00006D7A 5B                  <1>     pop rbx
   212 00006D7B 5D                  <1>     pop rbp
   213 00006D7C 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   214                              <1>     return
    18                              <2> %%_ret:
    19 00006D83 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   215                              <1> .argumentTooBig:
   216 00006D84 5B                  <1>     pop rbx
   217 00006D85 5D                  <1>     pop rbp
   218 00006D86 C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   219                              <1> 
   220                              <1> netServices:   ;ah = 5Eh, do nothing
   221                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   222 00006D89 3C01                <1>     cmp al, 01
   223 00006D8B 7214                <1>     jb .getName
   224 00006D8D 7437                <1>     jz .setName
   225 00006D8F 3C06                <1>     cmp al, 6
   226 00006D91 724C                <1>     jb .netRedir
   227 00006D93 C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   228 00006D9A B001                <1>     mov al, errInvFnc
   229                              <1> .badExit:
   230 00006D9C E95BFAFFFF          <1>     jmp extErrExit
   231                              <1> .getName:
   232                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   233                              <1> ;Output: CF=NC => Success.
   234                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   235                              <1> ;        CL = NetBIOS number for the machine
   236                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   237                              <1> ;        CF=CY => Failure
   238                              <1> ;        AX = Errorcode
   239 00006DA1 4889D7              <1>     mov rdi, rdx
   240 00006DA4 0FB70D(23C00300)    <1>     movzx ecx, word [validNetNam]
   241 00006DAB E89DF5FFFF          <1>     call getUserRegs
   242 00006DB0 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   243 00006DB4 488D35(CBC30300)    <1>     lea rsi, machineName
   244                              <1> .nameCmn:
   245 00006DBB 31C0                <1>     xor eax, eax
   246 00006DBD 48A5                <1>     movsq
   247 00006DBF A5                  <1>     movsd
   248 00006DC0 66A5                <1>     movsw
   249 00006DC2 A4                  <1>     movsb
   250 00006DC3 AA                  <1>     stosb   ;Store terminating null
   251 00006DC4 EB24                <1>     jmp short .exitGood
   252                              <1> .setName:
   253                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   254                              <1> ;       CH = 0 => Mark name as invalid
   255                              <1> ;         != 0 => Mark name as valid
   256                              <1> ;       CL = NetBIOS number for the name
   257 00006DC6 66890D(23C00300)    <1>     mov word [validNetNam], cx
   258 00006DCD 4889D6              <1>     mov rsi, rdx
   259 00006DD0 FE05(CAC30300)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   260 00006DD6 488D3D(CBC30300)    <1>     lea rdi, machineName
   261 00006DDD EBDC                <1>     jmp short .nameCmn
   262                              <1> 
   263                              <1> .netRedir:
   264 00006DDF 50                  <1>     push rax
   265 00006DE0 B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   266 00006DE5 CD4F                <1>     int 4Fh
   267 00006DE7 5A                  <1>     pop rdx
   268 00006DE8 72B2                <1>     jc .badExit
   269                              <1> .exitGood:
   270 00006DEA E9FFF9FFFF          <1>     jmp extGoodExit
   271                              <1> 
   272                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   273                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   274 00006DEF 80FC07              <1>     cmp ah, 07h
   275 00006DF2 7419                <1>     je .driveAction
   276 00006DF4 80FC08              <1>     cmp ah, 08h
   277 00006DF7 7414                <1>     je .driveAction
   278                              <1>     ;Else, use redirector to process request
   279 00006DF9 50                  <1>     push rax
   280 00006DFA B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   281 00006DFF CD4F                <1>     int 4Fh
   282 00006E01 5B                  <1>     pop rbx
   283                              <1> .badExit:
   284 00006E02 0F82F4F9FFFF        <1>     jc extErrExit
   285                              <1> .goodExit:
   286 00006E08 E9E1F9FFFF          <1>     jmp extGoodExit
   287                              <1> .driveAction:
   288                              <1> ;dl must have valid 0-based drive number
   289 00006E0D 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   290 00006E0F E821F6FFFF          <1>     call getCDSforDrive
   291 00006E14 72EC                <1>     jc short .badExit
   292                              <1>     ;rsi points to CDS
   293 00006E16 80EA07              <1>     sub dl, 7
   294 00006E19 7408                <1>     jz .enable
   295 00006E1B 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   296 00006E21 EBE5                <1>     jmp short .goodExit
   297                              <1> .enable:
   298 00006E23 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   299 00006E29 EBDD                <1>     jmp short .goodExit
    44                                  %include "./Source/Kernel/Net/multiplx.asm"
    45                              <1> ;Default multiplexer. Current only installed function is ah=12h
    46                              <1> ;If a ah=11h request is made, we return CF=CY (as intended)
    47                              <1> ;If an argument needs to be in al for any function, it must be pushed on
    48                              <1> ; stack before the interrupt is called. This word is always read from the
    49                              <1> ; stack, but the stack is not rejiggled to remove it
    50                              <1> 
    51                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    52 00006E2B 80FC12              <1>     cmp ah, 12h
    53 00006E2E 7546                <1>     jne .exitBad       ;Exit if not for us
    54 00006E30 3C26                <1>     cmp al, mDispTblL / 2
    55 00006E32 7342                <1>     jae .exitBad   ;If above or equal, exit
    56 00006E34 53                  <1>     push rbx
    57 00006E35 51                  <1>     push rcx
    58 00006E36 488D1D6C95FFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    59 00006E3D 53                  <1>     push rbx
    60 00006E3E 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    61 00006E41 488B442428          <1>     mov rax, qword [rsp + 5*8]  ;Pick the word pushed on the stack before call 
    62 00006E46 D1E1                <1>     shl ecx, 1   ;multiply by 2
    63 00006E48 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    64 00006E4C 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    65 00006E4D 4801CB              <1>     add rbx, rcx
    66 00006E50 48891D(77C40300)    <1>     mov qword [oldRBX], rbx
    67 00006E57 59                  <1>     pop rcx
    68 00006E58 5B                  <1>     pop rbx
    69 00006E59 FF15(77C40300)      <1>     call qword [oldRBX]
    70 00006E5F 48891D(77C40300)    <1>     mov qword [oldRBX], rbx
    71 00006E66 9C                  <1>     pushfq  ;Move flags on the stack
    72 00006E67 5B                  <1>     pop rbx
    73 00006E68 48895C2410          <1>     mov qword [rsp + 8*2], rbx  ;Replace entry flags with our own flags
    74 00006E6D 488B1D(77C40300)    <1>     mov rbx, qword [oldRBX]
    75 00006E74 48CF                <1>     iretq
    76                              <1> .exitBad:
    77 00006E76 804C241001          <1>     or byte [rsp + 8h*2], 1
    78 00006E7B 48CF                <1>     iretq
    79                              <1> multiplexTest:
    80 00006E7D B0FF                <1>     mov al, -1
    81 00006E7F C3                  <1>     ret
    82                              <1> getDosDataSeg:  ;Int 4Fh, AX=1203h
    83                              <1> ;Return: r8 = Dos Data Segment Pointer
    84 00006E80 4C8D05(00C00300)    <1>     lea r8, dosDataArea
    85                              <1>     return
    18                              <2> %%_ret:
    19 00006E87 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    45                                  %include "./Source/Kernel/Net/share.asm"
    46                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
    47                              <1> 
    48                              <1> ;Generic Share Hooks and Wrappers
    49                              <1> shareBadFunction:
    50 00006E88 B801000000          <1>     mov eax, errInvFnc
    51 00006E8D 668905(00C40300)    <1>     mov word [errorExCde], ax
    52 00006E94 F9                  <1>     stc
    53                              <1>     return
    18                              <2> %%_ret:
    19 00006E95 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> badDfltShareHook:
    55                              <1> ;Return CF=CY
    56 00006E96 E8EDFFFFFF          <1>     call shareBadFunction
    57                              <1>     return
    18                              <2> %%_ret:
    19 00006E9B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    58                              <1> goodDfltShareHook:
    59                              <1> ;Return CF=NC
    60 00006E9C F8                  <1>     clc
    61                              <1>     return
    18                              <2> %%_ret:
    19 00006E9D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    62                              <1> openShareCallWrapper:
    63 00006E9E FF15(BCC00300)      <1>     call qword [openShare]
    64                              <1>     return
    18                              <2> %%_ret:
    19 00006EA4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    65                              <1> closeShareCallWrapper:
    66 00006EA5 FF15(C4C00300)      <1>     call qword [closeShare]
    67                              <1>     return
    18                              <2> %%_ret:
    19 00006EAB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    68                              <1> 
    69                              <1> retryShareIODelay:
    70                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    71                              <1> ;Called only in readDiskFile and writeDiskFile
    72                              <1> ;Input: rdi -> SFT for current file
    73                              <1> ;       ecx = Length of region from current position in file
    74                              <1> ;Output: If CF=NC, not locked
    75                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    76 00006EAC 0FB71D(25C00300)    <1>     movzx ebx, word [shareCount]
    77                              <1> .mainLoop:      
    78 00006EB3 53                  <1>     push rbx
    79 00006EB4 FF15(F4C00300)      <1>     call qword [checkFileLockShare]
    80 00006EBA 5B                  <1>     pop rbx
    81                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00006EBB 73EE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    82 00006EBD E806000000          <1>     call shareRetryCountdown
    83 00006EC2 FFCB                <1>     dec ebx
    84 00006EC4 75ED                <1>     jnz .mainLoop
    85 00006EC6 F9                  <1>     stc
    86                              <1>     return
    18                              <2> %%_ret:
    19 00006EC7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    87                              <1> 
    88                              <1> shareRetryCountdown:
    89                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    90                              <1> ;Does the retry wait IFF the request was not a server request.
    91 00006EC8 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    92                              <1>     retnz   ;Exit by default if it is a server call
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00006ECF 75F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    93 00006ED1 51                  <1>     push rcx
    94 00006ED2 0FB70D(27C00300)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    95 00006ED9 67E30D              <1>     jecxz .exit
    96                              <1> .loopBody:
    97 00006EDC 51                  <1>     push rcx
    98 00006EDD 31C9                <1>     xor ecx, ecx
    99                              <1> .mainLoop:
   100 00006EDF 66FFC9              <1>     dec cx
   101 00006EE2 75FB                <1>     jnz .mainLoop
   102 00006EE4 59                  <1>     pop rcx
   103 00006EE5 FFC9                <1>     dec ecx
   104 00006EE7 75F3                <1>     jnz .loopBody
   105                              <1> .exit:
   106 00006EE9 59                  <1>     pop rcx
   107                              <1>     return
    18                              <2> %%_ret:
    19 00006EEA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> shareCheckOpenViolation:
   110                              <1> ;Input: rdi -> Locally complete SFT we are opening
   111 00006EEB 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   112 00006EF1 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   113 00006EF3 50                  <1>     push rax
   114 00006EF4 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   115 00006EF8 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   116 00006EFD 58                  <1>     pop rax
   117 00006EFE 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   118                              <1> .fcbQuirk:
   119 00006F00 E83B000000          <1>     call shareLockViolationCriticalError
   120                              <1>     retnc
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00006F05 73E3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   121                              <1> .notInCompatMode:
   122 00006F07 B820000000          <1>     mov eax, errShrVio
   123 00006F0C F9                  <1>     stc ;Set the flag for error
   124                              <1>     return
    18                              <2> %%_ret:
    19 00006F0D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   125                              <1> 
   126                              <1> 
   127                              <1> 
   128                              <1> shareFile:
   129                              <1> ;Once the SFT has been made, here we allocate resoureces within share to
   130                              <1> ; share the file, if it is possible to do so!
   131                              <1> ; This is done by calling the open wrapper
   132 00006F0E 51                  <1>     push rcx
   133                              <1> .reloadCounter:
   134 00006F0F 0FB70D(25C00300)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
   135                              <1> .keepLooping:
   136 00006F16 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
   137 00006F1D 31C0                <1>     xor eax, eax
   138 00006F1F 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
   139 00006F25 51                  <1>     push rcx
   140 00006F26 E873FFFFFF          <1>     call openShareCallWrapper
   141 00006F2B 59                  <1>     pop rcx
   142 00006F2C 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
   143 00006F2E E895FFFFFF          <1>     call shareRetryCountdown
   144 00006F33 FFC9                <1>     dec ecx
   145 00006F35 75DF                <1>     jnz .keepLooping
   146 00006F37 E827000000          <1>     call shareCriticalError
   147 00006F3C 73D1                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   148                              <1> .exit:
   149 00006F3E 59                  <1>     pop rcx
   150                              <1>     return
    18                              <2> %%_ret:
    19 00006F3F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> shareLockViolationCriticalError:
   153                              <1> ;This does NOT force rwFlag to 0.
   154 00006F40 57                  <1>     push rdi
   155 00006F41 C605(5CC40300)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   156 00006F48 B821000000          <1>     mov eax, errLokVio
   157 00006F4D 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   158                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   159 00006F54 E89EEAFFFF          <1>     call fullcriticalErrorInvoke
   160 00006F59 5F                  <1>     pop rdi
   161 00006F5A 3D01000000          <1>     cmp eax, critRetry
   162                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00006F5F 74DE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   163 00006F61 F9                  <1>     stc
   164                              <1>     return
    18                              <2> %%_ret:
    19 00006F62 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   165                              <1> 
   166                              <1> shareCriticalError: ;Int 4Fh AX=120Ah
   167                              <1> ;Used for share Read/Write requests
   168 00006F63 57                  <1>     push rdi
   169 00006F64 C605(F0C60300)00    <1>     mov byte [rwFlag], 0    ;Default to read
   170 00006F6B C605(5CC40300)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   171 00006F72 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   172 00006F79 BF01000000          <1>     mov edi, 1
   173                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   174 00006F7E E874EAFFFF          <1>     call fullcriticalErrorInvoke
   175 00006F83 5F                  <1>     pop rdi
   176 00006F84 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   177                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00006F86 74DA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   178 00006F88 F9                  <1>     stc
   179                              <1>     return
    18                              <2> %%_ret:
    19 00006F89 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   180                              <1> 
   181                              <1> shareReadWriteViolationError:
   182                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
   183 00006F8A 3C0F                <1>     cmp al, drvBadDskChnge
   184 00006F8C 7510                <1>     jne .doReq
   185 00006F8E 50                  <1>     push rax    ;IF a bad disk change, drop the volume descriptor ptr here
   186 00006F8F 488B05(D7C40300)    <1>     mov rax, qword [primReqHdr + ioReqPkt.desptr]   ;Get volume descriptor ptr
   187 00006F96 488905(04C40300)    <1>     mov qword [xInt44RDI], rax
   188 00006F9D 58                  <1>     pop rax
   189                              <1> .doReq:
   190 00006F9E E854EAFFFF          <1>     call fullcriticalErrorInvoke
   191                              <1>     return
    18                              <2> %%_ret:
    19 00006FA3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   192                              <1> 
   193                              <1> shareCheckWriteLockViolation:
   194 00006FA4 C605(F0C60300)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   195 00006FAB EB07                <1>     jmp short shareCheckReadLockViolation.common
   196                              <1> shareCheckReadLockViolation:
   197 00006FAD C605(F0C60300)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   198                              <1> .common:
   199                              <1> ;Input:
   200                              <1> ;rdi -> SFT for the file we are reading
   201 00006FB4 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   202 00006FBA 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   203 00006FBC 50                  <1>     push rax
   204 00006FBD 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   205 00006FC1 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   206 00006FC6 58                  <1>     pop rax
   207 00006FC7 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   208                              <1> .fcbQuirk:
   209 00006FC9 E872FFFFFF          <1>     call shareLockViolationCriticalError
   210                              <1>     retnc
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00006FCE 73D3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   211                              <1> .notInCompatMode:
   212 00006FD0 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   213 00006FD2 B821000000          <1>     mov eax, errLokVio
   214 00006FD7 F9                  <1>     stc ;Set the flag for error
   215                              <1>     return
    18                              <2> %%_ret:
    19 00006FD8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                                  %include "./Source/Drivers/drvData.asm"
    47                              <1> ;-----------------------------------:
    48                              <1> ;          Driver routines          :
    49                              <1> ;-----------------------------------:
    50                              <1> drivers:
    51                              <1> conHdr:
    52 00006FD9 [FB6F000000000000]  <1>     dq auxHdr
    53 00006FE1 1380                <1>     dw 08013h
    54 00006FE3 [7971000000000000]  <1>     dq commonStrat
    55 00006FEB [8871000000000000]  <1>     dq conDriver
    56 00006FF3 434F4E2020202020    <1>     db "CON     "
    57                              <1> auxHdr:
    58 00006FFB [1D70000000000000]  <1>     dq prnHdr
    59 00007003 0080                <1>     dw 08000h
    60 00007005 [7971000000000000]  <1>     dq commonStrat
    61 0000700D [3D74000000000000]  <1>     dq com1Intr
    62 00007015 4155582020202020    <1>     db "AUX     "
    63                              <1> prnHdr:
    64 0000701D [3F70000000000000]  <1>     dq clkHdr
    65 00007025 40A0                <1>     dw 0A040h
    66 00007027 [8171000000000000]  <1>     dq nulStrat
    67 0000702F [8771000000000000]  <1>     dq nulIntr
    68 00007037 50524E2020202020    <1>     db "PRN     "
    69                              <1> clkHdr:
    70 0000703F [6170000000000000]  <1>     dq msdHdr
    71 00007047 0880                <1>     dw 08008h
    72 00007049 [7971000000000000]  <1>     dq commonStrat
    73 00007051 [D572000000000000]  <1>     dq clkDriver
    74 00007059 434C4F434B242020    <1>     db "CLOCK$  "
    75                              <1> msdHdr:
    76 00007061 [8370000000000000]  <1>     dq com1Hdr
    77 00007069 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    78 0000706B [7971000000000000]  <1>     dq commonStrat
    79 00007073 [C175000000000000]  <1>     dq msdDriver
    80 0000707B 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    81                              <1> com1Hdr:
    82 00007083 [A570000000000000]  <1>     dq com2Hdr
    83 0000708B 0080                <1>     dw 08000h
    84 0000708D [7971000000000000]  <1>     dq commonStrat
    85 00007095 [3D74000000000000]  <1>     dq com1Intr
    86 0000709D 434F4D3120202020    <1>     db "COM1    "
    87                              <1> com2Hdr:
    88 000070A5 [C770000000000000]  <1>     dq com3Hdr
    89 000070AD 0080                <1>     dw 08000h
    90 000070AF [7971000000000000]  <1>     dq commonStrat
    91 000070B7 [4674000000000000]  <1>     dq com2Intr
    92 000070BF 434F4D3220202020    <1>     db "COM2    "
    93                              <1> com3Hdr:
    94 000070C7 [E970000000000000]  <1>     dq com4Hdr
    95 000070CF 0080                <1>     dw 08000h
    96 000070D1 [7971000000000000]  <1>     dq commonStrat
    97 000070D9 [4F74000000000000]  <1>     dq com3Intr
    98 000070E1 434F4D3320202020    <1>     db "COM3    "
    99                              <1> com4Hdr:
   100 000070E9 [0B71000000000000]  <1>     dq lpt1Hdr
   101 000070F1 0080                <1>     dw 08000h
   102 000070F3 [7971000000000000]  <1>     dq commonStrat
   103 000070FB [5874000000000000]  <1>     dq com4Intr
   104 00007103 434F4D3420202020    <1>     db "COM4    "
   105                              <1> lpt1Hdr:
   106 0000710B [2D71000000000000]  <1>     dq lpt2Hdr
   107 00007113 40A0                <1>     dw 0A040h
   108 00007115 [8171000000000000]  <1>     dq nulStrat
   109 0000711D [8771000000000000]  <1>     dq nulIntr
   110 00007125 4C50543120202020    <1>     db "LPT1    "
   111                              <1> lpt2Hdr:
   112 0000712D [4F71000000000000]  <1>     dq lpt3Hdr
   113 00007135 40A0                <1>     dw 0A040h
   114 00007137 [8171000000000000]  <1>     dq nulStrat
   115 0000713F [8771000000000000]  <1>     dq nulIntr
   116 00007147 4C50543220202020    <1>     db "LPT2    "
   117                              <1> lpt3Hdr:
   118 0000714F FFFFFFFFFFFFFFFF    <1>     dq -1
   119 00007157 40A0                <1>     dw 0A040h
   120 00007159 [8171000000000000]  <1>     dq nulStrat
   121 00007161 [8771000000000000]  <1>     dq nulIntr
   122 00007169 4C50543320202020    <1>     dq "LPT3    "
   123 00007171 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    47                                  %include "./Source/Drivers/charDrv.asm"
    48                              <1> commonStrat:
    49                              <1> ;DOS calls this function with rbx=Ptr to request header
    50 00007179 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    51 00007180 C3                  <1>     ret
    52                              <1> nulStrat:
    53 00007181 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    54                              <1> nulIntr:
    55 00007187 C3                  <1>     ret
    56                              <1> conDriver:
    57 00007188 50                  <1>     push rax
    58 00007189 53                  <1>     push rbx
    59 0000718A 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    60 00007191 B003                <1>     mov al, 03h ;Unknown Command
    61 00007193 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    62 00007197 7739                <1>     ja .conWriteErrorCode ;If yes, error!
    63                              <1> 
    64 00007199 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    65 0000719C 3C04                <1>     cmp al, 4
    66 0000719E 7441                <1>     jz .conRead
    67 000071A0 3C05                <1>     cmp al, 5
    68 000071A2 0F847F000000        <1>     jz .conNondestructiveRead
    69 000071A8 3C06                <1>     cmp al, 6
    70 000071AA 0F84A8000000        <1>     jz .conInputStatus
    71 000071B0 3C07                <1>     cmp al, 7
    72 000071B2 0F84B0000000        <1>     jz .conFlushInputBuffers
    73 000071B8 3C08                <1>     cmp al, 8
    74 000071BA 0F84CA000000        <1>     jz .conWrite
    75 000071C0 3C09                <1>     cmp al, 9
    76 000071C2 0F84C2000000        <1>     jz .conWrite
    77 000071C8 3C0A                <1>     cmp al, 0Ah
    78 000071CA 0F84E3000000        <1>     jz .conOutputStatus
    79 000071D0 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    80                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    81 000071D2 B480                <1>     mov ah, 80h ;Set error bit
    82 000071D4 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    83                              <1> .conExit:
    84 000071D8 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    85 000071DE 5B                  <1>     pop rbx
    86 000071DF 58                  <1>     pop rax
    87 000071E0 C3                  <1>     ret
    88                              <1> .conRead:    ;Function 4
    89 000071E1 B005                <1>     mov al, 05h ;Bad request structure length?
    90 000071E3 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    91 000071E6 75EA                <1>     jne .conWriteErrorCode
    92                              <1> 
    93 000071E8 57                  <1>     push rdi
    94 000071E9 51                  <1>     push rcx
    95 000071EA 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    96 000071EE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    97                              <1> .cre1:
    98 000071F0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    99 000071F3 741C                <1>     je .cre2
   100 000071F5 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
   101 000071FC 751A                <1>     jnz .cre3   ;No, get the buffer value
   102 000071FE 31C0                <1>     xor eax, eax
   103 00007200 CD36                <1>     int 36h
   104                              <1> .cre11:
   105 00007202 AA                  <1>     stosb
   106 00007203 84C0                <1>     test al, al ;Was the ascii code stored 0?
   107 00007205 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   108 00007207 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   109                              <1> .cre12:
   110 0000720D FFC1                <1>     inc ecx ;Inc chars stored in buffer
   111 0000720F EBDF                <1>     jmp short .cre1
   112                              <1> .cre2:
   113 00007211 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   114 00007214 59                  <1>     pop rcx
   115 00007215 5F                  <1>     pop rdi
   116 00007216 EBC0                <1>     jmp short .conExit
   117                              <1> .cre3:
   118 00007218 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   119 0000721E C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   120 00007225 EBDB                <1>     jmp short .cre11
   121                              <1> 
   122                              <1> .conNondestructiveRead:  ;Function 5
   123 00007227 B005                <1>     mov al, 05h ;Bad request structure length?
   124 00007229 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   125 0000722C 75A4                <1>     jne .conWriteErrorCode
   126 0000722E 803D8E00000000      <1>     cmp byte [.conBuf], 0
   127 00007235 7519                <1>     jnz .cnr2
   128 00007237 B401                <1>     mov ah, 01h     ;Get key if exists
   129 00007239 CD36                <1>     int 36h
   130 0000723B 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   131                              <1>     ;Keystroke available
   132                              <1> .cnr0:
   133 0000723D 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   134 00007240 E993FFFFFF          <1>     jmp .conExit
   135                              <1> .cnr1: ;No keystroke available
   136 00007245 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   137 0000724B E988FFFFFF          <1>     jmp .conExit
   138                              <1> .cnr2:
   139 00007250 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   140 00007256 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   141                              <1> 
   142                              <1> .conInputStatus:         ;Function 6
   143 00007258 B005                <1>     mov al, 05h ;Bad request structure length?
   144 0000725A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   145 0000725D 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   146 00007263 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   147                              <1> 
   148                              <1> .conFlushInputBuffers:   ;Function 7
   149 00007268 B005                <1>     mov al, 05h ;Bad request structure length?
   150 0000726A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   151 0000726D 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   152 00007273 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   153                              <1> .cfib0:
   154 0000727A B401                <1>     mov ah, 01      ;Get buffer status
   155 0000727C CD36                <1>     int 36h
   156 0000727E 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   157 00007284 30E4                <1>     xor ah, ah
   158 00007286 CD36                <1>     int 36h ;Read key to flush from buffer
   159 00007288 EBF0                <1>     jmp short .cfib0
   160                              <1> 
   161                              <1> .conWrite:   ;Function 8 and 9
   162 0000728A B005                <1>     mov al, 05h ;Bad request structure length?
   163 0000728C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   164 0000728F 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   165                              <1> 
   166 00007295 56                  <1>     push rsi
   167 00007296 51                  <1>     push rcx
   168 00007297 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   169 0000729B 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   170                              <1> .cw1: 
   171 0000729D 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   172 000072A0 7407                <1>     je .cw2
   173 000072A2 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   174 000072A3 CD49                <1>     int 49h ;Fast print char
   175 000072A5 FFC1                <1>     inc ecx
   176 000072A7 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   177                              <1> .cw2:
   178 000072A9 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   179 000072AC 59                  <1>     pop rcx
   180 000072AD 5E                  <1>     pop rsi
   181 000072AE E925FFFFFF          <1>     jmp .conExit
   182                              <1> .conOutputStatus:   ;Function 0Ah
   183 000072B3 B005                <1>     mov al, 05h ;Bad request structure length?
   184 000072B5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   185 000072B8 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   186 000072BE E915FFFFFF          <1>     jmp .conExit
   187                              <1> 
   188 000072C3 00                  <1> .conBuf db 0    ;Single byte buffer
   189                              <1> fastOutput:         ;This CON driver supports Int 49h
   190                              <1> ;Called with char to transfer in al
   191 000072C4 50                  <1>     push rax
   192 000072C5 B40E                <1>     mov ah, 0Eh
   193 000072C7 CD30                <1>     int 30h
   194 000072C9 58                  <1>     pop rax
   195 000072CA 48CF                <1>     iretq
   196                              <1> ctrlBreak:
   197                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   198 000072CC C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   199 000072D3 48CF                <1>     iretq
   200                              <1> 
   201                              <1> clkDriver:
   202 000072D5 50                  <1>     push rax
   203 000072D6 53                  <1>     push rbx
   204 000072D7 51                  <1>     push rcx
   205 000072D8 52                  <1>     push rdx
   206 000072D9 56                  <1>     push rsi
   207 000072DA 55                  <1>     push rbp
   208 000072DB 488B1D8FFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   209 000072E2 B003                <1>     mov al, 03h ;Unknown Command
   210 000072E4 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   211 000072E8 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   212                              <1> 
   213 000072EA 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   214 000072ED 3C04                <1>     cmp al, 04h
   215 000072EF 7437                <1>     jz .clkRead
   216 000072F1 3C06                <1>     cmp al, 06h
   217 000072F3 0F8494000000        <1>     jz .clkInputStatus
   218 000072F9 3C07                <1>     cmp al, 07h
   219 000072FB 0F8498000000        <1>     jz .clkFlushInputBuffers
   220 00007301 3C08                <1>     cmp al, 08h
   221 00007303 0F84A0000000        <1>     jz .clkWrite
   222 00007309 3C09                <1>     cmp al, 09h
   223 0000730B 0F8498000000        <1>     jz .clkWrite
   224 00007311 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   225                              <1> .clkNotFunctioning:
   226 00007313 B002                <1>     mov al, 02h ;Device not ready error
   227                              <1> .clkWriteErrorCode:
   228 00007315 B480                <1>     mov ah, 80h ;Set error bit
   229 00007317 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   230                              <1> .clkExit:
   231 0000731B 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   232 00007321 5D                  <1>     pop rbp
   233 00007322 5E                  <1>     pop rsi
   234 00007323 5A                  <1>     pop rdx
   235 00007324 59                  <1>     pop rcx
   236 00007325 5B                  <1>     pop rbx
   237 00007326 58                  <1>     pop rax
   238 00007327 C3                  <1>     ret
   239                              <1> 
   240                              <1> .clkRead:           ;Function 4
   241 00007328 B005                <1>     mov al, 05h ;Bad request structure length?
   242 0000732A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   243 0000732D 75E6                <1>     jne .clkWriteErrorCode
   244                              <1> 
   245 0000732F 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   246 00007332 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   247 00007336 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   248 0000733D 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   249 00007341 30E4                <1>     xor ah, ah
   250 00007343 CD3A                <1>     int 3Ah         ;Read the system timer
   251 00007345 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   252 00007347 740D                <1>     jz .clkr1       ;Nope, now just time 
   253 00007349 30E4                <1>     xor ah, ah
   254                              <1>     ;This works as al should keep count of the # of days passed since last read
   255 0000734B 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   256 0000734F 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   257                              <1> .clkr1:
   258 00007356 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   259 00007359 0FB7D2              <1>     movzx edx, dx
   260 0000735C 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   261 0000735E 89D0                <1>     mov eax, edx
   262 00007360 31D2                <1>     xor edx, edx
   263 00007362 89D8                <1>     mov eax, ebx
   264 00007364 B944040000          <1>     mov ecx, 1092   
   265 00007369 F7F1                <1>     div ecx
   266 0000736B 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   267 0000736E 89D0                <1>     mov eax, edx    ;Get remainder in eax
   268 00007370 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   269 00007374 31D2                <1>     xor edx, edx
   270 00007376 B95B000000          <1>     mov ecx, 91 ;5*18.2
   271 0000737B F7F1                <1>     div ecx
   272 0000737D 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   273 00007380 89D0                <1>     mov eax, edx    ;Get remainder in eax
   274                              <1>     ;lea eax, dword [eax + 4*eax]
   275                              <1>     ;add eax, edx    ;Essentially multiply by 6
   276 00007382 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   277 00007385 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   278 00007388 E98EFFFFFF          <1>     jmp .clkExit
   279                              <1> 
   280                              <1> .clkInputStatus:    ;Function 6
   281                              <1> ;Always return ready
   282 0000738D B005                <1>     mov al, 05h ;Bad request structure length?
   283 0000738F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   284 00007392 7581                <1>     jne .clkWriteErrorCode
   285 00007394 E982FFFFFF          <1>     jmp .clkExit
   286                              <1> .clkFlushInputBuffers:  ;Function 7
   287                              <1> ;Always return done immediately
   288 00007399 B005                <1>     mov al, 05h ;Bad request structure length?
   289 0000739B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   290 0000739E 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   291 000073A4 E972FFFFFF          <1>     jmp .clkExit
   292                              <1> 
   293                              <1> .clkWrite:          ;Functions 8 and 9
   294 000073A9 B005                <1>     mov al, 05h ;Bad request structure length?
   295 000073AB 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   296 000073AE 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   297                              <1> 
   298 000073B4 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   299 000073B7 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   300 000073BB 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   301 000073BF 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   302                              <1> 
   303 000073C6 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   304 000073C8 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   305 000073CC B105                <1>     mov cl, 5
   306 000073CE F6F1                <1>     div cl          ;Divide al by 5
   307 000073D0 30E4                <1>     xor ah, ah      ;Remove the remainder
   308 000073D2 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   309                              <1> ;Using the decimal part of this formula for the low count
   310                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   311 000073D4 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   312 000073D7 B912000000          <1>     mov ecx, 18
   313 000073DC F7E1                <1>     mul ecx  
   314 000073DE 01C3                <1>     add ebx, eax
   315                              <1> 
   316 000073E0 31D2                <1>     xor edx, edx
   317 000073E2 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   318 000073E6 B944040000          <1>     mov ecx, 1092
   319 000073EB F7E1                <1>     mul ecx
   320 000073ED 01C3                <1>     add ebx, eax
   321 000073EF 89DA                <1>     mov edx, ebx    ;edx now has low count
   322 000073F1 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   323 000073F5 B401                <1>     mov ah, 01h     ;Set the system time
   324 000073F7 CD3A                <1>     int 3Ah
   325                              <1> 
   326 000073F9 4889F3              <1>     mov rbx, rsi
   327 000073FC E91AFFFFFF          <1>     jmp .clkExit
   328                              <1> 
   329                              <1> .clkBCDtoHex:
   330                              <1> ;Converts a BCD value to a Hex byte
   331                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   332 00007401 51                  <1>     push rcx
   333 00007402 0FB6C0              <1>     movzx eax, al   ;Zero extend
   334 00007405 89C1                <1>     mov ecx, eax    ;Save al in ecx
   335 00007407 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   336 0000740C 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   337 00007412 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   338                              <1> .cbth0:
   339 00007415 050A000000          <1>     add eax, 10
   340 0000741A E2F9                <1>     loop .cbth0
   341 0000741C 59                  <1>     pop rcx
   342 0000741D C3                  <1>     ret
   343                              <1> 
   344                              <1> .clkHexToBCD:
   345                              <1> ;Converts a Hex byte into two BCD digits
   346                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   347 0000741E 51                  <1>     push rcx
   348 0000741F 0FB6C0              <1>     movzx eax, al   ;Zero extend
   349 00007422 31C9                <1>     xor ecx, ecx
   350                              <1> .chtb0:
   351 00007424 3D0A000000          <1>     cmp eax, 10
   352 00007429 7209                <1>     jb .chtb1
   353 0000742B 2D0A000000          <1>     sub eax, 10
   354 00007430 FFC1                <1>     inc ecx
   355 00007432 EBF0                <1>     jmp short .chtb0
   356                              <1> .chtb1:
   357 00007434 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   358 00007437 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   359 00007439 59                  <1>     pop rcx
   360 0000743A C3                  <1>     ret
   361 0000743B 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   362                              <1> 
   363                              <1> ;COM Driver headers and main interrupt strat
   364                              <1> com1Intr:
   365 0000743D C6057C01000000      <1>     mov byte [comIntr.comDevice], 0
   366 00007444 EB19                <1>     jmp short comIntr
   367                              <1> com2Intr:
   368 00007446 C6057301000001      <1>     mov byte [comIntr.comDevice], 1
   369 0000744D EB10                <1>     jmp short comIntr
   370                              <1> com3Intr:
   371 0000744F C6056A01000002      <1>     mov byte [comIntr.comDevice], 2
   372 00007456 EB07                <1>     jmp short comIntr
   373                              <1> com4Intr:
   374 00007458 C6056101000003      <1>     mov byte [comIntr.comDevice], 3
   375                              <1> comIntr:
   376 0000745F 50                  <1>     push rax
   377 00007460 53                  <1>     push rbx
   378 00007461 51                  <1>     push rcx
   379 00007462 52                  <1>     push rdx
   380 00007463 56                  <1>     push rsi
   381 00007464 57                  <1>     push rdi
   382 00007465 488B1D05FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   383 0000746C B003                <1>     mov al, 03h ;Unknown Command
   384 0000746E 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   385 00007472 7758                <1>     ja .comWriteErrorCode ;If yes, error!
   386                              <1> 
   387 00007474 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   388 00007477 3C04                <1>     cmp al, 4   ;Read Character(s)
   389 00007479 7464                <1>     jz .comRead
   390 0000747B 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   391 0000747D 0F849D000000        <1>     jz .comNondestructiveRead   
   392 00007483 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   393 00007485 0F8486000000        <1>     jz .comReadInputStatus
   394 0000748B 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   395 0000748D 0F849C000000        <1>     jz .comFlushInputBuffers
   396 00007493 3C08                <1>     cmp al, 8
   397 00007495 0F84BA000000        <1>     jz .comWrite
   398 0000749B 3C09                <1>     cmp al, 9
   399 0000749D 0F84B2000000        <1>     jz .comWrite
   400 000074A3 3C0A                <1>     cmp al, 0Ah
   401 000074A5 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   402 000074AB EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   403                              <1> .comErrorNoCount:
   404 000074AD B002                <1>     mov al, 02h ;Unknown device
   405 000074AF EB1B                <1>     jmp short .comWriteErrorCode
   406                              <1> .comReadError:
   407 000074B1 BA0B000000          <1>     mov edx, 0Bh
   408 000074B6 EB05                <1>     jmp short .comError
   409                              <1> .comWriteError:
   410 000074B8 BA0A000000          <1>     mov edx, 0Ah
   411                              <1> .comError:
   412 000074BD 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   413 000074C0 B902000000          <1>     mov ecx, 02h    ;Unknown device
   414 000074C5 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   415 000074C7 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   416 000074CA 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   417                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   418 000074CC B480                <1>     mov ah, 80h ;Set error bit
   419 000074CE 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   420                              <1> .comExit:
   421 000074D2 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   422 000074D8 5F                  <1>     pop rdi
   423 000074D9 5E                  <1>     pop rsi
   424 000074DA 5A                  <1>     pop rdx
   425 000074DB 59                  <1>     pop rcx
   426 000074DC 5B                  <1>     pop rbx
   427 000074DD 58                  <1>     pop rax
   428 000074DE C3                  <1>     ret
   429                              <1> 
   430                              <1> .comRead:
   431 000074DF B005                <1>     mov al, 05h ;Bad request structure length?
   432 000074E1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   433 000074E4 75E6                <1>     jne .comWriteErrorCode
   434 000074E6 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   435 000074EA 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   436                              <1> .cr1:
   437 000074EC 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   438 000074EF 741B                <1>     je .cre2
   439                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   440 000074F1 B800020000          <1>     mov eax, 0200h    ;Recieve 
   441 000074F6 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   442 000074FD F8                  <1>     clc
   443 000074FE CD34                <1>     int 34h ;Recieve Char
   444 00007500 72BB                <1>     jc .comError
   445 00007502 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   446 00007505 74EA                <1>     je .cr11
   447 00007507 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   448 00007508 FFC1                <1>     inc ecx
   449 0000750A EBE0                <1>     jmp short .cr1
   450                              <1> .cre2:
   451 0000750C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   452 0000750F EBC1                <1>     jmp short .comExit
   453                              <1> 
   454                              <1> .comReadInputStatus:
   455 00007511 B005                <1>     mov al, 05h ;Bad request structure length?
   456 00007513 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   457 00007516 75B4                <1>     jne .comWriteErrorCode
   458 00007518 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   459 0000751E EBB2                <1>     jmp short .comExit
   460                              <1> 
   461                              <1> .comNondestructiveRead:
   462                              <1> ;The buffer is always empty for now (no keystroke available)
   463 00007520 B005                <1>     mov al, 05h ;Bad request structure length?
   464 00007522 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   465 00007525 75A5                <1>     jne .comWriteErrorCode
   466 00007527 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   467 0000752D EBA3                <1>     jmp short .comExit
   468                              <1> 
   469                              <1> .comFlushInputBuffers:
   470 0000752F B005                <1>     mov al, 05h ;Bad request structure length?
   471 00007531 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   472 00007534 7596                <1>     jne .comWriteErrorCode
   473                              <1> .cfib0:
   474 00007536 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   475 0000753D B800020000          <1>     mov eax, 0200h    ;Recieve
   476 00007542 F8                  <1>     clc
   477 00007543 CD34                <1>     int 34h
   478 00007545 0F8262FFFFFF        <1>     jc .comErrorNoCount
   479 0000754B 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   480 0000754E 75E6                <1>     jne .cfib0
   481 00007550 E97DFFFFFF          <1>     jmp .comExit
   482                              <1> 
   483                              <1> .comWrite:
   484 00007555 B005                <1>     mov al, 05h ;Bad request structure length?
   485 00007557 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   486 0000755A 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   487                              <1> 
   488 00007560 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   489 00007564 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   490                              <1> .cw1: 
   491 00007566 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   492 00007569 7417                <1>     je .cw2
   493 0000756B AC                  <1>     lodsb   ;Get char into al, and inc rsi
   494 0000756C B401                <1>     mov ah, 01h ;Move function number into ah
   495 0000756E 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   496 00007575 F8                  <1>     clc
   497 00007576 CD34                <1>     int 34h ;Transmit char
   498 00007578 0F823FFFFFFF        <1>     jc .comError
   499 0000757E FFC1                <1>     inc ecx
   500 00007580 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   501                              <1> .cw2:
   502 00007582 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   503 00007585 E948FFFFFF          <1>     jmp .comExit
   504                              <1> 
   505                              <1> .comOutputStatus:
   506                              <1> ;Read MODEM status
   507 0000758A B005                <1>     mov al, 05h ;Bad request structure length?
   508 0000758C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   509 0000758F 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   510                              <1> 
   511 00007595 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   512 0000759C B403                <1>     mov ah, 03h     ;Get status
   513 0000759E F8                  <1>     clc
   514 0000759F CD34                <1>     int 34h
   515 000075A1 0F8206FFFFFF        <1>     jc .comErrorNoCount
   516 000075A7 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   517 000075AC C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   518 000075AF F7D0                <1>     not eax      ;Bitwise inversion
   519 000075B1 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   520 000075B6 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   521 000075BB E912FFFFFF          <1>     jmp .comExit
   522 000075C0 00                  <1> .comDevice   db 0
    48                                  %include "./Source/Drivers/diskDrv.asm"
    49                              <1> msdDriver:
    50 000075C1 50                  <1>     push rax
    51 000075C2 53                  <1>     push rbx
    52 000075C3 51                  <1>     push rcx
    53 000075C4 52                  <1>     push rdx
    54 000075C5 56                  <1>     push rsi
    55 000075C6 57                  <1>     push rdi
    56 000075C7 55                  <1>     push rbp
    57 000075C8 4150                <1>     push r8
    58 000075CA 488B1DA0FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    59 000075D1 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    60 000075D5 B003                <1>     mov al, drvBadCmd
    61 000075D7 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    62 000075DD B001                <1>     mov al, drvBadUnit 
    63 000075DF 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    64 000075E3 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    65 000075E9 488D35D0030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    66 000075F0 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    67 000075F4 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    68 000075F7 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    69 000075FB 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    70 000075FF D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    71 00007601 488D0D9A000000      <1>     lea rcx, .msdTable
    72 00007608 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    73 0000760C 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    74 0000760E 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    75 00007610 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    76 00007613 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    77                              <1> .msdDriverExit:
    78 00007615 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    79 0000761B 4158                <1>     pop r8
    80 0000761D 5D                  <1>     pop rbp
    81 0000761E 5F                  <1>     pop rdi
    82 0000761F 5E                  <1>     pop rsi
    83 00007620 5A                  <1>     pop rdx
    84 00007621 59                  <1>     pop rcx
    85 00007622 5B                  <1>     pop rbx
    86 00007623 58                  <1>     pop rax
    87 00007624 C3                  <1>     ret
    88                              <1> 
    89                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    90 00007625 4889FB              <1>     mov rbx, rdi
    91 00007628 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    92 0000762B 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    93 0000762D 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    94                              <1> ;Now fall through to general error
    95                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    96 00007630 B401                <1>     mov ah, 01h
    97 00007632 CD33                <1>     int 33h ;Read status of last operation
    98 00007634 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    99 00007637 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
   100 00007639 7460                <1>     je .msdWriteErrorCode 
   101 0000763B B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   102 0000763D 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   103 00007640 7459                <1>     je .msdWriteErrorCode 
   104 00007642 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   105 00007645 7454                <1>     je .msdWriteErrorCode
   106                              <1> ;Device Not Ready
   107 00007647 B002                <1>     mov al, 02h  ;Device not ready code
   108 00007649 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   109 0000764C 744D                <1>     je .msdWriteErrorCode
   110 0000764E 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   111 00007652 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   112                              <1> ;Write Protected
   113 00007656 30C0                <1>     xor al, al
   114 00007658 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   115 0000765D 743C                <1>     je .msdWriteErrorCode
   116                              <1> ;CRC Error
   117 0000765F B004                <1>     mov al, 04h     ;CRC error code
   118 00007661 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   119 00007666 7433                <1>     je .msdWriteErrorCode
   120 00007668 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   121 0000766D 742C                <1>     je .msdWriteErrorCode
   122 0000766F 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   123 00007674 7425                <1>     je .msdWriteErrorCode
   124                              <1> ;Seek Error
   125 00007676 B006                <1>     mov al, 06h     ;Seek error code
   126 00007678 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   127 0000767B 741E                <1>     je .msdWriteErrorCode
   128                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   129                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   130 0000767D B007                <1>     mov al, 07h
   131 0000767F 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   132 00007682 7417                <1>     je .msdWriteErrorCode
   133                              <1> ;Sector Not Found
   134 00007684 B008                <1>     mov al, 08h     ;Sector not found code
   135 00007686 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   136 00007689 7410                <1>     je .msdWriteErrorCode
   137                              <1> ;Write faults
   138 0000768B B00A                <1>     mov al, 0Ah     ;Write fault
   139 0000768D 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   140 00007690 7409                <1>     je .msdWriteErrorCode
   141                              <1> ;Read faults
   142 00007692 B00B                <1>     mov al, 0Bh     ;Read fault
   143 00007694 80F911              <1>     cmp cl, 11h     ;Read error
   144 00007697 7402                <1>     je .msdWriteErrorCode
   145                              <1> ;General Errors
   146 00007699 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   147                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   148 0000769B B480                <1>     mov ah, 80h ;Set error bit
   149 0000769D 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   150 000076A1 C3                  <1>     ret ;Return to set done bit
   151                              <1> .msdTable:
   152 000076A2 0000                <1>     dw 0                            ;Function 0
   153 000076A4 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   154 000076A6 9800                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   155 000076A8 F800                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   156 000076AA 0401                <1>     dw .msdRead - .msdTable         ;Function 4
   157 000076AC 0000                <1>     dw 0                            ;Function 5
   158 000076AE 0000                <1>     dw 0                            ;Function 6
   159 000076B0 0000                <1>     dw 0                            ;Function 7
   160 000076B2 3D01                <1>     dw .msdWrite - .msdTable        ;Function 8
   161 000076B4 7601                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   162 000076B6 0000                <1>     dw 0                            ;Function 10
   163 000076B8 0000                <1>     dw 0                            ;Function 11
   164 000076BA BC01                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   165 000076BC C801                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   166 000076BE E301                <1>     dw .msdDevClose - .msdTable     ;Function 14
   167 000076C0 FE01                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   168 000076C2 0000                <1>     dw 0                            ;Function 16
   169 000076C4 0000                <1>     dw 0                            ;Function 17
   170 000076C6 0000                <1>     dw 0                            ;Function 18
   171 000076C8 2602                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   172 000076CA 0000                <1>     dw 0                            ;Function 20
   173 000076CC 0000                <1>     dw 0                            ;Function 21
   174 000076CE 0000                <1>     dw 0                            ;Function 22
   175 000076D0 3202                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   176 000076D2 4702                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   177                              <1> 
   178                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   179                              <1> .msdMedChk:          ;Function 1
   180 000076D4 B005                <1>     mov al, 05h ;Bad request structure length
   181 000076D6 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   182 000076D9 75C0                <1>     jne .msdWriteErrorCode
   183                              <1> 
   184 000076DB E841020000          <1>     call .msdCheckDeviceType    ;Check and ensure that media type is "swapped"
   185 000076E0 753E                <1>     jnz .mmcChange  ;Always change if swapping between same phys volume!
   186 000076E2 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   187 000076E7 488D0DC8020000      <1>     lea rcx, .msdBIOSmap
   188 000076EE 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   189 000076F1 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   190 000076F4 753F                <1>     jnz .mmcNoChange
   191                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   192 000076F6 B416                <1>     mov ah, 16h 
   193 000076F8 CD33                <1>     int 33h
   194 000076FA 0F8230FFFFFF        <1>     jc .msdGenDiskError
   195 00007700 80FC80              <1>     cmp ah, 80h
   196 00007703 740E                <1>     je .mmcNoChangeLine
   197 00007705 80FC86              <1>     cmp ah, 86h
   198 00007708 7409                <1>     je .mmcNoChangeLine
   199 0000770A 84E4                <1>     test ah, ah ;No change?
   200 0000770C 7427                <1>     jz .mmcNoChange
   201 0000770E F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   202 00007711 750D                <1>     jnz .mmcChange
   203                              <1> ;If nothing, fall through and test manually, should never happen though
   204                              <1> .mmcNoChangeLine:
   205                              <1> ;Now we test Media Descriptor
   206 00007713 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   207 00007718 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   208 0000771B 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   209 0000771E 7410                <1>     je .mmcUnsure
   210                              <1> .mmcChange:
   211 00007720 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   212 00007724 488D0581020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   213 0000772B 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   214                              <1>     ;Check here if there were any open handles on the device when it was changed
   215 0000772F C3                  <1>     ret
   216                              <1> .mmcUnsure:
   217 00007730 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   218 00007734 C3                  <1>     ret
   219                              <1> .mmcNoChange:
   220 00007735 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   221 00007739 C3                  <1>     ret
   222                              <1> 
   223                              <1> 
   224                              <1> .msdBuildBPB:        ;Function 2
   225 0000773A B005                <1>     mov al, 05h ;Bad request structure length
   226 0000773C 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   227 0000773F 0F8556FFFFFF        <1>     jne .msdWriteErrorCode
   228                              <1> 
   229 00007745 4889DE              <1>     mov rsi, rbx
   230 00007748 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   231 0000774D 488D0D62020000      <1>     lea rcx, .msdBIOSmap
   232 00007754 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   233 00007757 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   234 0000775B 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   235 0000775D 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   236 00007760 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   237 00007765 CD33                <1>     int 33h
   238 00007767 0F82C3FEFFFF        <1>     jc .msdGenDiskError
   239                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   240 0000776D 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   241 00007771 7418                <1>     je .mbbpb0
   242 00007773 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   243 00007777 7412                <1>     je .mbbpb0
   244 00007779 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   245 0000777D 740C                <1>     je .mbbpb0
   246 0000777F 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   247 00007783 B007                <1>     mov al, 07h ;Unknown media error code
   248 00007785 0F8210FFFFFF        <1>     jb .msdWriteErrorCode
   249                              <1> .mbbpb0:
   250 0000778B 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   251 0000778E 4889EF              <1>     mov rdi, rbp     ;Get pointer to buffer to overwrite
   252 00007791 B90F000000          <1>     mov ecx, bpbEx_size/8
   253 00007796 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   254 00007799 C3                  <1>     ret
   255                              <1> .msdIOCTLRead:       ;Function 3, returns done
   256 0000779A B005                <1>     mov al, drvBadDrvReq
   257 0000779C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   258 0000779F 0F85F6FEFFFF        <1>     jne .msdWriteErrorCode
   259 000077A5 C3                  <1>     ret
   260                              <1> .msdRead:            ;Function 4
   261                              <1> ;Will read one sector at a time.
   262 000077A6 B005                <1>     mov al, 05h ;Bad request structure length
   263 000077A8 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   264 000077AB 0F85EAFEFFFF        <1>     jne .msdWriteErrorCode
   265                              <1> 
   266 000077B1 E86B010000          <1>     call .msdCheckDeviceType
   267                              <1> 
   268 000077B6 4889DF              <1>     mov rdi, rbx
   269 000077B9 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   270                              <1> .msdr0:
   271 000077BB B682                <1>     mov dh, 82h ;LBA Read Sectors
   272 000077BD E83C010000          <1>     call .msdBlkIOCommon
   273 000077C2 0F825DFEFFFF        <1>     jc .msdIOError
   274 000077C8 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   275 000077CC 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   276 000077D0 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   277 000077D4 FFC6                <1>     inc esi
   278 000077D6 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   279 000077D9 75E0                <1>     jne .msdr0
   280 000077DB 4889FB              <1>     mov rbx, rdi
   281 000077DE C3                  <1>     ret
   282                              <1> .msdWrite:           ;Function 8
   283                              <1> ;Will write one sector at a time.
   284 000077DF B005                <1>     mov al, 05h ;Bad request structure length
   285 000077E1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   286 000077E4 0F85B1FEFFFF        <1>     jne .msdWriteErrorCode
   287                              <1> 
   288 000077EA E832010000          <1>     call .msdCheckDeviceType
   289                              <1> 
   290 000077EF 4889DF              <1>     mov rdi, rbx
   291 000077F2 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   292                              <1> .msdw0:
   293 000077F4 B683                <1>     mov dh, 83h ;LBA Write Sectors
   294 000077F6 E803010000          <1>     call .msdBlkIOCommon
   295 000077FB 0F8224FEFFFF        <1>     jc .msdIOError
   296 00007801 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   297 00007805 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   298 00007809 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   299 0000780D FFC6                <1>     inc esi
   300 0000780F 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   301 00007812 75E0                <1>     jne .msdw0
   302 00007814 4889FB              <1>     mov rbx, rdi
   303 00007817 C3                  <1>     ret
   304                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   305                              <1> ;Will write one sector at a time and then verify it.
   306 00007818 B005                <1>     mov al, 05h ;Bad request structure length
   307 0000781A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   308 0000781D 0F8578FEFFFF        <1>     jne .msdWriteErrorCode
   309                              <1> 
   310 00007823 E8F9000000          <1>     call .msdCheckDeviceType
   311                              <1> 
   312 00007828 4889DF              <1>     mov rdi, rbx
   313 0000782B 31F6                <1>     xor esi, esi  ;Set counter to zero
   314                              <1> .msdwv0:
   315 0000782D B683                <1>     mov dh, 83h ;LBA Write Sectors
   316 0000782F E8CA000000          <1>     call .msdBlkIOCommon
   317 00007834 0F82EBFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   318 0000783A B684                <1>     mov dh, 84h ;LBA Verify Sectors
   319 0000783C E8BD000000          <1>     call .msdBlkIOCommon
   320 00007841 0F82DEFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   321 00007847 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   322 0000784B 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   323 0000784F 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   324 00007853 FFC6                <1>     inc esi
   325 00007855 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   326 00007858 75D3                <1>     jne .msdwv0
   327 0000785A 4889FB              <1>     mov rbx, rdi
   328 0000785D C3                  <1>     ret
   329                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   330 0000785E B005                <1>     mov al, drvBadDrvReq
   331 00007860 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   332 00007863 0F8532FEFFFF        <1>     jne .msdWriteErrorCode
   333                              <1> 
   334 00007869 C3                  <1>     ret
   335                              <1> .msdDevOpen:         ;Function 13
   336 0000786A B005                <1>     mov al, drvBadDrvReq
   337 0000786C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   338 0000786F 0F8526FEFFFF        <1>     jne .msdWriteErrorCode
   339                              <1> 
   340 00007875 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   341 0000787A 488D0D3A010000      <1>     lea rcx, .msdHdlCnt
   342 00007881 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   343 00007884 C3                  <1>     ret
   344                              <1> .msdDevClose:        ;Function 14
   345 00007885 B005                <1>     mov al, drvBadDrvReq
   346 00007887 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   347 0000788A 0F850BFEFFFF        <1>     jne .msdWriteErrorCode
   348                              <1> 
   349 00007890 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   350 00007895 488D0D1F010000      <1>     lea rcx, .msdHdlCnt
   351 0000789C FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   352 0000789F C3                  <1>     ret
   353                              <1> .msdRemovableMedia:  ;Function 15
   354 000078A0 B005                <1>     mov al, drvBadDrvReq
   355 000078A2 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   356 000078A5 0F85F0FDFFFF        <1>     jne .msdWriteErrorCode
   357                              <1> 
   358 000078AB 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   359 000078B0 488D0DFF000000      <1>     lea rcx, .msdBIOSmap
   360 000078B7 0FB60401            <1>     movzx eax, byte [rcx + rax]    ;Get BIOS number
   361 000078BB 2580000000          <1>     and eax, 80h ;Isolate bit 7 (the fixed drive bit)
   362 000078C0 C1E002              <1>     shl eax, 2  ;Shift the removable bit (bit 7) to the busy bit (bit 9)
   363 000078C3 66894303            <1>     mov word [rbx + remMediaReqPkt.status], ax  ;Busy set if fixed!
   364 000078C7 C3                  <1>     ret
   365                              <1> .msdGenericIOCTL:    ;Function 19
   366 000078C8 B005                <1>     mov al, drvBadDrvReq
   367 000078CA 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   368 000078CD 0F85C8FDFFFF        <1>     jne .msdWriteErrorCode
   369                              <1> ;Need to spend some time to implement proper IOCTL with LBA instead of CHS.
   370                              <1> ;Thus for v1.0, require each BIOS implementer to also write a format routine.
   371 000078D3 C3                  <1>     ret
   372                              <1> .msdGetLogicalDev:   ;Function 23
   373 000078D4 B005                <1>     mov al, drvBadDrvReq
   374 000078D6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   375 000078D9 0F85BCFDFFFF        <1>     jne .msdWriteErrorCode
   376                              <1> 
   377 000078DF 8A05D0000000        <1>     mov al, byte [.msdCurDev]
   378 000078E5 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   379 000078E8 C3                  <1>     ret
   380                              <1> .msdSetLogicalDev:   ;Function 24
   381 000078E9 B005                <1>     mov al, drvBadDrvReq
   382 000078EB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   383 000078EE 0F85A7FDFFFF        <1>     jne .msdWriteErrorCode
   384                              <1> .msdInternalSetUnitNumber:  ;Called to set the unit number from reqpkt
   385 000078F4 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   386 000078F7 8805B8000000        <1>     mov byte [.msdCurDev], al
   387 000078FD C3                  <1>     ret
   388                              <1> 
   389                              <1> .msdBlkIOCommon:  ;Does block IO
   390                              <1> ;Called with rdi containing old rbx value and ah with function number
   391                              <1> ;rbp points to bpb
   392                              <1> ;Error handled by caller
   393                              <1> ;Sector count handled by caller
   394                              <1> ;Called with dh = BIOS function number
   395 000078FE 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   396 00007903 488D0DAC000000      <1>     lea rcx, .msdBIOSmap
   397 0000790A 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req in dl
   398 0000790D 31C9                <1>     xor ecx, ecx
   399 0000790F 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   400 00007912 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   401 00007916 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   402 0000791A 88F4                <1>     mov ah, dh
   403 0000791C B001                <1>     mov al, 01h ;Do one sector at a time 
   404 0000791E CD33                <1>     int 33h
   405                              <1>     return
    18                              <2> %%_ret:
    19 00007920 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   406                              <1> 
   407                              <1> .msdCheckDeviceType:
   408                              <1> ;If the device numbers dont match but the bpb numbers do, print the message
   409                              <1> ;!!!WARNING!!! THIS USES THE CONSOLE BIOS!!! VIOLATES HARDWARE ABSTRACTION!!!!
   410                              <1> ;Returns ZF=NZ if media number changed!
   411 00007921 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]    ;Get the now unit number
   412 00007925 3A058A000000        <1>     cmp al, byte [.msdCurDev]    ;Compare against the last transacted device
   413                              <1>     rete    ;Exit if equal (ZF=ZE)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000792B 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   414                              <1> ;If not equal, check they use different BPB's before continuing
   415 0000792D 50                  <1>     push rax
   416 0000792E 0FB60580000000      <1>     movzx eax, byte [.msdCurDev]  ;Compare current BPB ptr to previous
   417 00007935 488D3584000000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
   418 0000793C C1E003              <1>     shl eax, 3
   419 0000793F 488B1406            <1>     mov rdx, qword [rsi + rax]  ;Get the bpbptr of this device too
   420 00007943 58                  <1>     pop rax
   421 00007944 4839D5              <1>     cmp rbp, rdx    ;Is the bpb of the transacting device the same as before?
   422 00007947 7522                <1>     jne .msdCDTexit ;Exit by setting the new unit number
   423                              <1>     ;Here, device numbers are neq but bpb's are eq. Thus print message
   424 00007949 C1E803              <1>     shr eax, 3 
   425 0000794C 0441                <1>     add al, "A" ;Convert to a letter
   426 0000794E 880534000000        <1>     mov byte [.msdStrikeLetter], al
   427 00007954 488D351A000000      <1>     lea rsi, .msdStrike
   428 0000795B B937000000          <1>     mov ecx, .msdStrikeL
   429                              <1> .msdCDTprintMessage:
   430 00007960 AC                  <1>     lodsb   ;Get the char in al, inc rsi
   431 00007961 CD49                <1>     int 49h ;Print char in al
   432 00007963 FFC9                <1>     dec ecx
   433 00007965 75F9                <1>     jnz .msdCDTprintMessage
   434 00007967 31C0                <1>     xor eax, eax
   435 00007969 CD36                <1>     int 36h ;Blocking wait at the keyboard for a keystroke
   436                              <1> .msdCDTexit:
   437 0000796B E884FFFFFF          <1>     call .msdInternalSetUnitNumber  ;Set unit number internally
   438 00007970 31C0                <1>     xor eax, eax
   439 00007972 FFC0                <1>     inc eax ;Clear ZF flag (ZF=NZ)
   440 00007974 C3                  <1>     ret
   441                              <1> 
   442 00007975 0D0A496E7365727420- <1> .msdStrike db 0Dh,0Ah,"Insert for drive "
   442 0000797E 666F72206472697665- <1>
   442 00007987 20                  <1>
   443 00007988 413A20616E64207374- <1> .msdStrikeLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
   443 00007991 72696B650D0A616E79- <1>
   443 0000799A 206B6579207768656E- <1>
   443 000079A3 2072656164790D0A0A  <1>
   444                              <1> .msdStrikeL equ $ - .msdStrike
   445                              <1> 
   446 000079AC 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   447                              <1> ;LASTDRIVE default is 5
   448                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   449                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   450 000079B5 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   451                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   452 000079B6 0001FFFFFF          <1> .msdBIOSmap  db 0, 1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   453 000079BB 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   454 000079C0 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   454 000079C9 000000000000000000- <1>
   454 000079D2 000000000000000000- <1>
   454 000079DB 000000000000000000- <1>
   454 000079E4 00000000            <1>
   455                              <1> .msdBPBblks  defaultBPB ;Add two default BPB's. If no remdrv, these are used
   455                              <2> .msdBPBblks :
   181 000079E8 E9                  <2>  db 0E9h
   182 000079E9 00                  <2>  db 00h
   183 000079EA 90                  <2>  db 90h
   184 000079EB 534350444F537631    <2>  db 'SCPDOSv1'
   185 000079F3 0002                <2>  dw 0200h
   186 000079F5 01                  <2>  db 01h
   187 000079F6 0100                <2>  dw 0001h
   188 000079F8 02                  <2>  db 02h
   189 000079F9 E000                <2>  dw 00E0h
   190 000079FB 400B                <2>  dw 0B40h
   191 000079FD F0                  <2>  db 0F0h
   192 000079FE 0900                <2>  dw 0009h
   193 00007A00 1200                <2>  dw 0012h
   194 00007A02 0200                <2>  dw 0002h
   195 00007A04 00000000            <2>  dd 0
   196 00007A08 00000000            <2>  dd 0
   197 00007A0C 00                  <2>  db 00h
   198 00007A0D 00                  <2>  db 00h
   199 00007A0E 29                  <2>  db 29h
   200 00007A0F 00000000            <2>  dd 0
   201 00007A13 4E4F204E414D452020- <2>  db 'NO NAME    '
   201 00007A1C 2020                <2>
   202 00007A1E 4641543132202020    <2>  db 'FAT12   '
   203 00007A26 000000000000000000- <2>  db 58 dup 0
   203 00007A2F 000000000000000000- <2>
   203 00007A38 000000000000000000- <2>
   203 00007A41 000000000000000000- <2>
   203 00007A4A 000000000000000000- <2>
   203 00007A53 000000000000000000- <2>
   203 00007A5C 00000000            <2>
   456                              <1>              defaultBPB ;If remdrvs found, these are overridden
   181 00007A60 E9                  <2>  db 0E9h
   182 00007A61 00                  <2>  db 00h
   183 00007A62 90                  <2>  db 90h
   184 00007A63 534350444F537631    <2>  db 'SCPDOSv1'
   185 00007A6B 0002                <2>  dw 0200h
   186 00007A6D 01                  <2>  db 01h
   187 00007A6E 0100                <2>  dw 0001h
   188 00007A70 02                  <2>  db 02h
   189 00007A71 E000                <2>  dw 00E0h
   190 00007A73 400B                <2>  dw 0B40h
   191 00007A75 F0                  <2>  db 0F0h
   192 00007A76 0900                <2>  dw 0009h
   193 00007A78 1200                <2>  dw 0012h
   194 00007A7A 0200                <2>  dw 0002h
   195 00007A7C 00000000            <2>  dd 0
   196 00007A80 00000000            <2>  dd 0
   197 00007A84 00                  <2>  db 00h
   198 00007A85 00                  <2>  db 00h
   199 00007A86 29                  <2>  db 29h
   200 00007A87 00000000            <2>  dd 0
   201 00007A8B 4E4F204E414D452020- <2>  db 'NO NAME    '
   201 00007A94 2020                <2>
   202 00007A96 4641543132202020    <2>  db 'FAT12   '
   203 00007A9E 000000000000000000- <2>  db 58 dup 0
   203 00007AA7 000000000000000000- <2>
   203 00007AB0 000000000000000000- <2>
   203 00007AB9 000000000000000000- <2>
   203 00007AC2 000000000000000000- <2>
   203 00007ACB 000000000000000000- <2>
   203 00007AD4 00000000            <2>
   457 00007AD8 000000000000000000- <1>              db 3*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   457 00007AE1 000000000000000000- <1>
   457 00007AEA 000000000000000000- <1>
   457 00007AF3 000000000000000000- <1>
   457 00007AFC 000000000000000000- <1>
   457 00007B05 000000000000000000- <1>
   457 00007B0E 000000000000000000- <1>
   457 00007B17 000000000000000000- <1>
   457 00007B20 000000000000000000- <1>
   457 00007B29 000000000000000000- <1>
   457 00007B32 000000000000000000- <1>
   457 00007B3B 000000000000000000- <1>
   457 00007B44 000000000000000000- <1>
   457 00007B4D 000000000000000000- <1>
   457 00007B56 000000000000000000- <1>
   457 00007B5F 000000000000000000- <1>
   457 00007B68 000000000000000000- <1>
   457 00007B71 000000000000000000- <1>
   457 00007B7A 000000000000000000- <1>
   457 00007B83 000000000000000000- <1>
   457 00007B8C 000000000000000000- <1>
   457 00007B95 000000000000000000- <1>
   457 00007B9E 000000000000000000- <1>
   457 00007BA7 000000000000000000- <1>
   457 00007BB0 000000000000000000- <1>
   457 00007BB9 000000000000000000- <1>
   457 00007BC2 000000000000000000- <1>
   457 00007BCB 000000000000000000- <1>
   457 00007BD4 000000000000000000- <1>
   457 00007BDD 000000000000000000- <1>
   457 00007BE6 000000000000000000- <1>
   457 00007BEF 000000000000000000- <1>
   457 00007BF8 000000000000000000- <1>
   457 00007C01 000000000000000000- <1>
   457 00007C0A 000000000000000000- <1>
   457 00007C13 000000000000000000- <1>
   457 00007C1C 000000000000000000- <1>
   457 00007C25 000000000000000000- <1>
   457 00007C2E 000000000000000000- <1>
   457 00007C37 000000000000000000  <1>
   458                              <1> endptr equ $
    49                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    50                                  ;Paragraph alignment
    51                                  %include "./Source/BSS/dosDynaDataArea.asm"
    52                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    53                              <1> ; the MCB chain!
    54                              <1> ddaStart:
    55 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    56                              <1> 
    57                              <1> dosDynamicArea: ;Difference of this symbol with cfgFrame endPtr gives alloc size
    58                              <1> ;Create DPB chain of first 5 available DPB slots
    59 00000010 <res 35h>           <1> firstDPB        resb dpb_size   ;First two are always present
    60 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    61 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    62 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    63 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    64                              <1> 
    65                              <1> ;fcbsArray       resb sfth_size + 4*sft_size ;One header plus 4 SFT entries
    66                              <1> 
    67 00000119 <res 1C7h>          <1> cdsArray        resb 5*cds_size ;5 CDS's unless more are specified
    68                              <1> 
    69 000002E0 <res 30h>           <1> tmpBufHdr       resb bufferHdr_size
    70 00000310 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    71                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    72                              <1> cfgLoad:    ;This symbol is used to read config.sys here
    73                              <1> dynamicDataAreaLength equ $ - ddaStart
    73          ------------------  <1>  info: assembly required 1+16+2 passes

