     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> ;Driver structures
    66                              <1> 
    67                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    68                              <1> 
    69                              <1>     .hdrlen resb 1  ;Length of the request header
    70                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    71                              <1>     .cmdcde resb 1  ;Command code
    72                              <1>     .status resw 1  ;Status word
    73                              <1>     .devptr resq 1  ;Device queue pointer field
    74                              <1> 
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> struc drvReqHdr
    78                              <1>     drvReqHdrM
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
    79                              <1> endstruc
    80                              <1> 
    81                              <1> struc initReqPkt  ;Init Request Packet
    82                              <1> 
    83                              <1>     drvReqHdrM   ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
    84 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    85 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    86 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    87 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    88                              <1> 
    89                              <1> endstruc
    90                              <1> 
    91                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    92                              <1> 
    93                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
    94 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    95 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    96 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    97                              <1> 
    98                              <1> endstruc
    99                              <1> 
   100                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   101                              <1> 
   102                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   103 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   104 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   105 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   106                              <1> 
   107                              <1> endstruc
   108                              <1> 
   109                              <1> struc ioReqPkt   ;IO Request Packet
   110                              <1> 
   111                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   112 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   113 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   114 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   115 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   116 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
   121                              <1>     
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   123 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   124                              <1> 
   125                              <1> endstruc
   126                              <1> 
   127                              <1> struc statusReqPkt   ;Status Request Packet
   128                              <1> 
   129                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   130                              <1> 
   131                              <1> endstruc
   132                              <1> 
   133                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   134                              <1> 
   135                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   136                              <1>      
   137                              <1> endstruc
   138                              <1> 
   139                              <1> struc openReqPkt ;Open Device Request Packet
   140                              <1> 
   141                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   142                              <1>      
   143                              <1> endstruc
   144                              <1> 
   145                              <1> struc closeReqPkt ;Close Device Request Packet
   146                              <1> 
   147                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   148                              <1>      
   149                              <1> endstruc
   150                              <1> 
   151                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   152                              <1> 
   153                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   154                              <1>      
   155                              <1> endstruc
   156                              <1> 
   157                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   158                              <1> 
   159                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   160 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   161 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   162 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   163 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   164 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   165                              <1> 
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   169                              <1>     
   170                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   171                              <1> 
   172                              <1> endstruc
   173                              <1> 
   174                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   175                              <1>     
   176                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   177                              <1> 
   178                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   138                              <1> 
   139                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   140                              <1> 
   141 00000000 ??????              <1>     .jmpBoot                resb 3 
   142 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   143 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   144 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   145 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   146 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   147 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   148 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   149 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   150 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   151 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   152 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   153 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   154 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   155 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   156 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   157 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   158 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   159 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   160                              <1> 
   161                              <1> endstruc
   162                              <1> 
   163                              <1> struc FSInfo
   164                              <1> 
   165 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   166 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   167 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   168 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   169 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   170 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   171 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   172                              <1> 
   173                              <1> endstruc
     8                                  %include "./Source/Include/dosStruc.inc"
     9                              <1> 
    10                              <1> ;-------------------------------------------------------;
    11                              <1> ; This include file contains miscellaneous internal     ;
    12                              <1> ; SCP/DOS structures.                                   ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> 
    15                              <1> ;------------------------------------------------------------------------;
    16                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    17                              <1> ; its file system structure. This is used to locate files and structures
    18                              <1> ; on the device itself and to translate file requests to cluster chains
    19                              <1> ; to LBAs to pass to the disk driver..
    20                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    21                              <1> ; drivers Initialise routine has been called.
    22                              <1> ;------------------------------------------------------------------------;
    23                              <1> struc dpb        ;Drive Parameter Block
    24                              <1> 
    25 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    26 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    27 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    28 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    29 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    30 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    31 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    32 00000009 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    33 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    34 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    35 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    36 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    37                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    38 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    39 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    40 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    41 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    42 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    43 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    44                              <1> 
    45                              <1> endstruc
    46                              <1> 
    47                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    48                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    49                              <1> ;------------------------------------------------------------------------;
    50                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    51                              <1> ; All disk pathing requests go via the CDS for that drive.
    52                              <1> ; The default drive is the last accessed drive, this number is stored
    53                              <1> ; in the DOS data area.
    54                              <1> ; The CDS is stored as an array with the offset into the array being 
    55                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    56                              <1> ;
    57                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> struc cds       ;Current Directory structure
    60 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    61 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    62 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    63 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    64 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    65 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    66                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    67                              <1> ; another, we save the number of chars to skip to that deep level).
    68                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    69                              <1> ; Only affects for SUBST drives, not JOIN
    70                              <1> ; Flags: Bit 15 set = Network drive
    71                              <1> ;        Bit 14 set = Physical drive
    72                              <1> ;        Bit 13 set = JOIN'ed drive
    73                              <1> ;        Bit 12 set = SUBST'ed drive
    74                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    75                              <1> endstruc
    76                              <1> ;CDS equates
    77                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    78                              <1> cdsPhysDrive    equ 4000h   ;CDS initialised 
    79                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    80                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    81                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    82                              <1> ;------------------------------------------------------------------------;
    83                              <1> ; The SFT is a way to allow applications to open file handles to files 
    84                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    85                              <1> ; under the first header, and then a second header will be linked to the 
    86                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    87                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    88                              <1> ; using the FCBS= command. Default FCBS=5.
    89                              <1> ;
    90                              <1> ; A file handle describes the file, and the location within the file that
    91                              <1> ; we are reading. The file handle can be manipulated without the file
    92                              <1> ; being in memory, thus allowing the user to access data without needing 
    93                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    94                              <1> ; accessing devices, by treating them as files with their drivers 
    95                              <1> ; responding and translating the manipulations of the file handle itself.
    96                              <1> ; Neither the driver nor the application should see or use the SFT for
    97                              <1> ; the handle, as it is subject to change (and will change when file 
    98                              <1> ; sharing provisions are included). The DOS will make requests to the 
    99                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   100                              <1> ; track of the information in the SFT entry for that handle. 
   101                              <1> ;
   102                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   103                              <1> ; can point to the same file. It all depends on what the applications 
   104                              <1> ; want to do with the File.
   105                              <1> ;
   106                              <1> ; !!!!IMPORTANT!!!!
   107                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   108                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   109                              <1> ;
   110                              <1> ;Each SFT may look like this:
   111                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   112                              <1> ;            |                |
   113                              <1> ;       wNumFiles*sft    wNumFiles*sft
   114                              <1> ;
   115                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   116                              <1> ; System FCBs.
   117                              <1> ;
   118                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   119                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   120                              <1> ;
   121                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   122                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   123                              <1> ;------------------------------------------------------------------------;
   124                              <1> struc sfth   ;System file table header
   125                              <1> ; This is the SFT header.
   126                              <1> ; This structure comes before the start of the first file in the array/table.
   127 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   128 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc sft
   132                              <1> ;This is the file struc itself
   133 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   134 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   135 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   136 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   137 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   138 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   139 00000013 ????                <1>     .wTime       resw 1    ;File Time
   140 00000015 ????                <1>     .wDate       resw 1    ;File Date
   141 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   142 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   143 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   144 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   145 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   146 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   147 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   148 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   149 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   150 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   151 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   152                              <1> ;                           0 means no record
   153                              <1> endstruc
   154                              <1> ;Open Mode equates
   155                              <1> ;Access modes   Bits[2:0]
   156                              <1> ReadAccess      equ 0h
   157                              <1> WriteAccess     equ 1h
   158                              <1> RWAccess        equ 2h
   159                              <1> ;Bit 3 reserved 0
   160                              <1> ;Sharing modes  Bits[6:4]
   161                              <1> CompatShare     equ 0h
   162                              <1> denyRWShare     equ 10h
   163                              <1> denyWriteShare  equ 20h
   164                              <1> denyReadShare   equ 30h
   165                              <1> denyNoneShare   equ 40h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> ;Critical Error handling
   169                              <1> critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> ;------------------------------------------------------------------------;
   198                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   199                              <1> ; to an internal buffer, and then copying it to the specified location
   200                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   201                              <1> ; another request for the same sector from the same device is made, so 
   202                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   203                              <1> ; size, selected according to the largest detected sector size during 
   204                              <1> ; the initial loadup.
   205                              <1> ;
   206                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   207                              <1> ;
   208                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   209                              <1> ;------------------------------------------------------------------------;
   210                              <1> 
   211                              <1> struc bufferHdr
   212 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   213 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> ;Note! A buffer is marked as referenced IF it has been accessed via 
   230                              <1> ; a Read or Write call. 
   231                              <1> ; When a buffer is used temporarily for internal purposes (as when DOS
   232                              <1> ; gives a driver a buffer) and then DOS reads data from that buffer (such as
   233                              <1> ; a BUILD BPB situation), the data is left as unreferenced as the use for that 
   234                              <1> ; buffer goes away before the end of the DOS call, and there is no danger of.
   235                              <1> ; of misbehaviour.
   236                              <1> ;------------------------------------------------------------------------;
   237                              <1> ; Memory control block for each memory arena
   238                              <1> ;------------------------------------------------------------------------;
   239                              <1> struc mcb
   240 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   241 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   242 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   243 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   244                              <1>     .program:
   245                              <1> endstruc
   246                              <1> ;MCB equates
   247                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   248                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   249                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   250                              <1> mcbMarkCtn      equ "M"
   251                              <1> mcbMarkEnd      equ "Z"
   252                              <1> 
   253                              <1> memFirstFit     equ 0   ;First free block goes to application
   254                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   255                              <1> memLastFit      equ 2   ;Last free block goes to application
   256                              <1> 
   257                              <1> ;Owner = Para aligned address => Owning application PSP
   258                              <1> ;...To consider...
   259                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   260                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   261                              <1> ;------------------------------------------------------------------------;
   262                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   263                              <1> ; following order, thus allowing for return values to be placed in the 
   264                              <1> ; registers by accessing the caller register stack frame.
   265                              <1> ;------------------------------------------------------------------------;
   266                              <1> struc callerFrame
   267 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   268 00000008 ????????????????    <1>     .rbx    resq 1    
   269 00000010 ????????????????    <1>     .rcx    resq 1
   270 00000018 ????????????????    <1>     .rdx    resq 1
   271 00000020 ????????????????    <1>     .rsi    resq 1
   272 00000028 ????????????????    <1>     .rdi    resq 1
   273 00000030 ????????????????    <1>     .rbp    resq 1
   274 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   275 00000040 ????????????????    <1>     .r9     resq 1
   276                              <1> ;Pushed by Processor when invoked via Interrupt
   277 00000048 ????????????????    <1>     .rip    resq 1
   278 00000050 ????????????????    <1>     .cs     resq 1
   279 00000058 ????????????????    <1>     .flags  resq 1
   280                              <1> endstruc
   281                              <1> 
   282                              <1> struc fcb
   283                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   284 00000000 ??                  <1>     .driveNum   resb 1
   285 00000001 ????????????????    <1>     .filename   resb 8
   286 00000009 ??????              <1>     .fileext    resb 3
   287 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   288                              <1> ;One block consists of 128 records, of size denoted in the below
   289 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   290 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   291 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   292 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   293 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   294 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   295 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   296 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   297 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   298                              <1>     ;If record size > 64, high byte is ignored.
   299                              <1>     ;Used for random read and write operations to find the right record
   300                              <1> endstruc
   301                              <1> 
   302                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   303 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   304 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   305 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   306 0000000D ????????            <1>     .dirOffset  resd 1  ;Entry within dir (made a dword but will never be so)
   307 00000011 ????????            <1>     .parCluster resd 1  ;Parent cluster number
   308 00000015 ??                  <1>     .atrribFnd  resb 1  ;Attrib of file found
   309 00000016 ????                <1>     .fileTime   resw 1  ;File time
   310 00000018 ????                <1>     .fileDate   resw 1  ;File date
   311 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   312 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   313                              <1> endstruc
   314                              <1> 
   315                              <1> struc psp
   316 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   317 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   318 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   319 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   320 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   321 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   322 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   323 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   324 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   325 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   326 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   327 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   328 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   329                              <1> ;Extra handle arrays are grouped into a linked list
   330                              <1> ;The below are in the same place as in DOS
   331 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   332 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   333                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   334 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   335 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   336                              <1> endstruc
   337                              <1> 
   338                              <1> struc clkStruc
   339 00000000 ????                <1>     .dateWord   resw 1
   340 00000002 ??                  <1>     .minutes    resb 1
   341 00000003 ??                  <1>     .hours      resb 1
   342 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   343 00000005 ??                  <1>     .seconds    resb 1
   344                              <1> endstruc
   345                              <1> 
   346                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   347                              <1> ;for a space of 64Gb
   348                              <1> dosAPTsize  equ 60*4096
   349                              <1> 
   350                              <1> ;Critical Error AH bitfield equates
   351                              <1> critRead    equ 0h
   352                              <1> critWrite   equ 1h
   353                              <1> critDOS     equ 0h
   354                              <1> critFAT     equ 2h
   355                              <1> critDir     equ 4h
   356                              <1> critData    equ 6h
   357                              <1> critFailOK  equ 8h
   358                              <1> critRetryOK equ 10h
   359                              <1> critIgnorOK equ 20h
   360                              <1> critCharDev equ 80h
   361                              <1> 
   362                              <1> critIgnore  equ 0
   363                              <1> critRetry   equ 1
   364                              <1> critAbort   equ 2
   365                              <1> critFail    equ 3
   366                              <1> 
   367                              <1> ;MISC ASCII control chars
   368                              <1> NUL equ 00h ;^@         | ASCII Null
   369                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text)
   370                              <1> BEL equ 07h ;^G         | ASCII Bell
   371                              <1> BSP equ 08h ;^H         | ASCII Backspace
   372                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   373                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   374                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   375                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   376                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   377                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   378                              <1> SPC equ 20h ;Printable  | ASCII Space
   379                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
     9                                  %include "./Source/Debug/debSym.inc"
    10                              <1> ;This file will include the debuging symbols
    11                              <1> 
    12                              <1> %define true 1
    13                              <1> %define false 0
    14                              <1> 
    15                              <1> ;Switch the DEBUG to false in production!
    16                              <1> %define DEBUG false
    17                              <1> %define DPBINFO false
    18                              <1> %define REGS true
    19                              <1> %define ENDSTATUS true
    20                              <1> %define ALLOCTEST true
    21                              <1> 
    22                              <1> 
    23                              <1> ;Use this space as the debug stack
    24                              <1> %define debStackTop 80000h
    10                                  %include "./Source/Include/dosError.inc"
    11                              <1> ;DOS Error codes
    12                              <1> 
    13                              <1> ;Extended Error Codes
    14                              <1> errInvFnc   equ 1   ;Invalid function number
    15                              <1> errFnf      equ 2   ;File not found
    16                              <1> errPnf      equ 3   ;Path not found
    17                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    18                              <1> errAccDen   equ 5   ;Access denied (to resource)
    19                              <1> errBadHdl   equ 6   ;Invalid handle
    20                              <1> errMCBbad   equ 7   ;MCB's destroyed
    21                              <1> errNoMem    equ 8   ;Insufficient memory
    22                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    23                              <1> errBadEnv   equ 10  ;Invalid environment
    24                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    25                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    26                              <1> errInvDat   equ 13  ;Invalid data
    27                              <1> ;           equ 14  ;Reserved
    28                              <1> errBadDrv   equ 15  ;Invalid drive specified
    29                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    30                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    31                              <1> errNoFil    equ 18  ;No more files
    32                              <1> ;The following are Driver error codes + 19
    33                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    34                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    35                              <1> errUnkUnt   equ 20  ;Unknown Unit
    36                              <1> errDrvNR    equ 21  ;Drive not ready
    37                              <1> errUnkCmd   equ 22  ;Unknown Command
    38                              <1> errCRCerr   equ 23  ;Data (CRC) error
    39                              <1> errBadRLn   equ 24  ;Bad request structure length
    40                              <1> errSekErr   equ 25  ;Seek error
    41                              <1> errUnkMed   equ 26  ;Unknown media type
    42                              <1> errSecNF    equ 27  ;Sector not Found
    43                              <1> errNoPap    equ 28  ;Printer out of paper
    44                              <1> errWF       equ 29  ;Write fault
    45                              <1> errRF       equ 30  ;Read fault
    46                              <1> errGF       equ 31  ;General fault
    47                              <1> ;Number 32-33 reserved
    48                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    49                              <1> errNoFCB    equ 35  ;FCB unavailable
    50                              <1> ;Numbers 36-82 reserved
    51                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    52                              <1> errFI44     equ 83  ;Fail on INT 44h
    53                              <1> ;Numbers 84-88 reserved
    54                              <1> ;-----------------------------------------------------------------------------
    55                              <1> ;Error Loci
    56                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    57                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    58                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    59                              <1> eLocChr     equ 4   ;Serial/Character Device error
    60                              <1> eLocMem     equ 5   ;Related to RAM
    61                              <1> ;-----------------------------------------------------------------------------
    62                              <1> ;Error Actions
    63                              <1> eActRet     equ 1   ;Retry
    64                              <1> eActDRet    equ 2   ;Delay then retry
    65                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    66                              <1> eActAbt     equ 4   ;Abort with cleanup
    67                              <1> eActKil     equ 5   ;Abort without cleanup
    68                              <1> eActIgn     equ 6   ;Ignore error
    69                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    70                              <1> ;-----------------------------------------------------------------------------
    71                              <1> ;Error classes
    72                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    73                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    74                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    75                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    76                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    77                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    78                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    79                              <1> eClsNotFnd  equ 8   ;Resource not found
    80                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    81                              <1> eClsLocked  equ 10  ;Resource Locked
    82                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    83                              <1> eClsClash   equ 12  ;Resource already exists!
    84                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  Segment .text align=1   ;Init code
    12                                  %define currSegVBase 0
    13                                  %include "./Source/Sysinit/sysInit.asm"
    14                              <1> ; We arrive here with the following values in the registers.
    15                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    16                              <1> ; dx  = Int 33h boot device number
    17                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    18                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    19 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    20 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    20 0000000B 909090909090909090- <1>
    20 00000014 909090909090909090- <1>
    20 0000001D 909090909090909090- <1>
    20 00000026 909090909090909090- <1>
    20 0000002F 909090909090909090- <1>
    20 00000038 909090909090909090- <1>
    20 00000041 909090909090909090- <1>
    20 0000004A 909090909090909090- <1>
    20 00000053 909090909090909090- <1>
    20 0000005C 909090909090909090- <1>
    20 00000065 909090909090909090- <1>
    20 0000006E 909090909090909090- <1>
    20 00000077 909090909090909090- <1>
    20 00000080 909090909090909090- <1>
    20 00000089 909090909090909090- <1>
    20 00000092 909090909090909090- <1>
    20 0000009B 909090909090909090- <1>
    20 000000A4 909090909090909090- <1>
    20 000000AD 909090909090909090- <1>
    20 000000B6 909090909090909090- <1>
    20 000000BF 909090909090909090- <1>
    20 000000C8 909090909090909090- <1>
    20 000000D1 909090909090909090- <1>
    20 000000DA 909090909090909090- <1>
    20 000000E3 909090909090909090- <1>
    20 000000EC 909090909090909090- <1>
    20 000000F5 909090909090909090- <1>
    20 000000FE 9090                <1>
    21                              <1> ;First move the alignment of the DOSSEG to 4Kb
    22 00000100 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    23 00000101 52                  <1>     push rdx    ;Save dl on stack briefly
    24 00000102 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    25 00000107 0F32                <1>     rdmsr
    26 00000109 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    27 0000010B 48C1E720            <1>     shl rdi, 20h        ;Shift high
    28 0000010F 89C7                <1>     mov edi, eax        ;Get the low dword in
    29 00000111 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    30 00000114 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    31 0000011B 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    32 00000122 89F8                <1>     mov eax, edi
    33 00000124 4889FA              <1>     mov rdx, rdi
    34 00000127 48C1EA20            <1>     shr rdx, 20h
    35 0000012B 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    36 0000012D 5A                  <1>     pop rdx
    37                              <1> ;------------------------------------------------;
    38                              <1> ;              Connect Debugger                  ;
    39                              <1> ;------------------------------------------------;
    40                              <1> %if DEBUG
    41                              <1> ;Only connect if in debug mode
    42                              <1>     mov eax, 0C501h ;Connect debugger
    43                              <1>     int 35h
    44                              <1> %endif
    45                              <1> ;------------------------------------------------;
    46                              <1> ;           Sanitise the data area               ;
    47                              <1> ;------------------------------------------------;
    48                              <1> ; This call initialises ALL fields in the DOS    ;
    49                              <1> ; data area with 0's. Thus any fields, which     ;
    50                              <1> ; need to be initialised with a 0 value, are     ;
    51                              <1> ; initialised for free.                          ;
    52                              <1> ;------------------------------------------------;
    53 0000012E B9[2AD80300]        <1>     mov ecx, dSegLen
    54 00000133 30C0                <1>     xor al, al
    55 00000135 57                  <1>     push rdi    ;Temp save rdi on the stack
    56 00000136 F3AA                <1>     rep stosb
    57 00000138 5F                  <1>     pop rdi
    58                              <1> ;------------------------------------------------;
    59                              <1> ;          Start saving Basic DOS data           ;
    60                              <1> ;------------------------------------------------;
    61 00000139 64881425[10C00300]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    62                              <1> ;Copy DOS to its final resting place
    63 00000141 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    63 00000146 [00C00300]          <1>
    64 0000014A 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    64 0000014F [08C00300]          <1>
    65 00000153 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    66 00000156 4881C7[2AD80300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    67 0000015D 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    68 00000164 B900100000          <1>     mov ecx, 1000h
    69 00000169 F348A5              <1>     rep movsq
    70                              <1> 
    71 0000016C CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    72 0000016E 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    73 00000172 664489C0            <1>     mov ax, r8w
    74 00000176 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
    75 0000017E 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    76 00000186 64C60425[69C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    76 0000018E 05                  <1>
    77                              <1>     ;mov byte fs:[numPhysVol], 0    ;Number of logical drives
    78 0000018F 6466C70425-         <1>     mov word fs:[numFiles], 5      ;Default 8 files, at start 5
    78 00000194 [8FC00300]0500      <1>
    79 0000019A 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
    79 0000019F [91C00300]1400      <1>
    80 000001A5 64C60425[6AC00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
    80 000001AD 01                  <1>
    81                              <1>     ;If no detected Int 33h devices, halt 
    82 000001AE 49C1E810            <1>     shr r8, 2*8
    83 000001B2 4584C0              <1>     test r8b, r8b
    84 000001B5 0F84BC0A0000        <1>     jz errorInit
    85                              <1> ;------------------------------------------------;
    86                              <1> ;          Add additional page tables            ;
    87                              <1> ;------------------------------------------------;
    88                              <1> ;This will allow for up to 64Gb of addressible space
    89 000001BB 4889EF              <1>     mov rdi, rbp
    90                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    91 000001BE B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
    92 000001C3 57                  <1>     push rdi
    93 000001C4 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    93 000001CD 00                  <1>
    94                              <1> pdtLoop:
    95 000001CE 48AB                <1>     stosq
    96 000001D0 480500002000        <1>     add rax, 200000h
    97 000001D6 FFC9                <1>     dec ecx
    98 000001D8 75F4                <1>     jnz pdtLoop
    99 000001DA 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   100                              <1> ;Now we add every 4kb page to the page directory pointer table
   101                              <1> ;15 4kb pages to consider
   102 000001DB 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   103 000001DE 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   104 000001E1 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   105 000001E8 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   106 000001EF B93C000000          <1>     mov ecx, 60
   107 000001F4 480D03000000        <1>     or rax, 3h      ;present and r/w
   108                              <1> pdptLoop:
   109 000001FA 48AB                <1>     stosq
   110 000001FC 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   111 00000202 FFC9                <1>     dec ecx
   112 00000204 75F4                <1>     jnz pdptLoop
   113 00000206 0F20DF              <1>     mov rdi, cr3
   114 00000209 0F22DF              <1>     mov cr3, rdi
   115                              <1> 
   116                              <1> ;------------------------------------------------;
   117                              <1> ;                   MCB inits                    ;
   118                              <1> ;------------------------------------------------;
   119                              <1> mcbInit:
   120 0000020C B820E80000          <1>     mov eax, 0E820h
   121 00000211 CD35                <1>     int 35h
   122                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   123 00000213 E804010000          <1>     call .mcbFindAddress
   124 00000218 7349                <1>     jnc .mcbi1  ;If found, proceed
   125                              <1>     ;Here, we try use E801h
   126 0000021A B801E80000          <1>     mov eax, 0E801h
   127 0000021F CD35                <1>     int 35h
   128 00000221 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   129 00000224 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   130 00000227 85C0                <1>     test eax, eax
   131 00000229 741B                <1>     jz .worst
   132 0000022B C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   133 0000022E C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   134 00000231 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   135 00000239 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   136 00000241 E909010000          <1>     jmp mcbBuild
   137                              <1> .worst:
   138                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   139 00000246 B800002000          <1>     mov eax, 200000h
   140 0000024B 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   140 00000250 [08C00300]          <1>
   141 00000254 29D8                <1>     sub eax, ebx
   142 00000256 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   143 0000025E E9EC000000          <1>     jmp mcbBuild 
   144                              <1> .mcbi1:
   145 00000263 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   146 00000266 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   146 0000026F 00                  <1>
   147 00000270 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   148 00000274 0F85C2000000        <1>     jne .mcbFail
   149 0000027A 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   150                              <1>     ;PCI hole always exists so this value will always be a dword
   151 0000027E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   152 00000286 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   153 00000289 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   154 0000028C 4881FB00000001      <1>     cmp rbx, 1000000h  
   155 00000293 773C                <1>     ja .skipISA
   156                              <1> ;Here we deal with ISA hole issues
   157 00000295 B820E80000          <1>     mov eax, 0E820h
   158 0000029A CD35                <1>     int 35h
   159 0000029C 48B800000001000000- <1>     mov rax, 1000000h
   159 000002A5 00                  <1>
   160 000002A6 E871000000          <1>     call .mcbFindAddress
   161 000002AB 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   162 000002B1 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   162 000002BA 00                  <1>
   163 000002BB 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   164 000002BF 0F858A000000        <1>     jne mcbBuild  
   165 000002C5 488B5808            <1>     mov rbx, qword [rax + 8]
   166 000002C9 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   167                              <1> .skipISA:
   168 000002D1 B820E80000          <1>     mov eax, 0E820h
   169 000002D6 CD35                <1>     int 35h
   170 000002D8 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   170 000002E1 00                  <1>
   171 000002E2 E835000000          <1>     call .mcbFindAddress
   172 000002E7 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   173 000002E9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   173 000002F2 00                  <1>
   174 000002F3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   175 000002F7 7556                <1>     jne mcbBuild   
   176 000002F9 488B5808            <1>     mov rbx, qword [rax + 8]
   177                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   178 000002FD 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   178 00000306 00                  <1>
   179 00000307 4839CB              <1>     cmp rbx, rcx
   180 0000030A 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   181 0000030E 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   181 00000313 [1BC00300]          <1>
   182 00000317 E933000000          <1>     jmp mcbBuild
   183                              <1> .mcbFindAddress:
   184                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   185                              <1> ;Entry: rax = Address of arena to search for
   186                              <1> ;       rsi = Pointer to memory map
   187                              <1> ;       ecx = Number of 24 byte entries
   188                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   189                              <1> ;       CF=CY : value in rax not found
   190 0000031C 56                  <1>     push rsi
   191 0000031D 51                  <1>     push rcx
   192 0000031E 50                  <1>     push rax
   193                              <1> .mfa0:
   194 0000031F 483B06              <1>     cmp rax, qword [rsi]
   195 00000322 7410                <1>     je .mcbAddressFound
   196 00000324 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   197 0000032B FFC9                <1>     dec ecx
   198 0000032D 79F0                <1>     jns .mfa0
   199                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   200 0000032F 58                  <1>     pop rax
   201 00000330 59                  <1>     pop rcx
   202 00000331 5E                  <1>     pop rsi
   203 00000332 F9                  <1>     stc
   204 00000333 C3                  <1>     ret
   205                              <1> .mcbAddressFound:
   206 00000334 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   207 00000337 59                  <1>     pop rcx ;Pop old rax value off
   208 00000338 59                  <1>     pop rcx
   209 00000339 5E                  <1>     pop rsi
   210 0000033A F8                  <1>     clc
   211 0000033B C3                  <1>     ret
   212                              <1> .mcbFail:
   213 0000033C 488D2D5B090000      <1>     lea rbp, mcbFailmsg
   214 00000343 B804130000          <1>     mov eax, 1304h
   215 00000348 CD30                <1>     int 30h
   216 0000034A E928090000          <1>     jmp errorInit
   217                              <1> 
   218                              <1> mcbBuild:
   219                              <1> ;Actually build the MCB chain here
   220                              <1> ;Start by computing the difference between userbase and DOS area
   221                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   222 0000034F 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   222 00000354 [08C00300]          <1>
   223 00000358 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   224 0000035F 56                  <1>     push rsi    ;Save ptr
   225 00000360 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   226 00000367 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   227 0000036A 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   228 00000372 5B                  <1>     pop rbx
   229 00000373 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   230 00000376 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   231 0000037E 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   232 00000386 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   233 00000389 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   234 0000038C 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   234 00000391 [24C00300]          <1>
   235                              <1> 
   236                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   237 00000395 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   237 0000039D 00000000            <1>
   238 000003A1 746E                <1>     jz .skipISA
   239                              <1>     ;Here if an ISA hole exists, place a MCB around it
   240 000003A3 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   241                              <1>     ;Remove one MCB worth of space from alloc
   242 000003AA 31C9                <1>     xor ecx, ecx
   243 000003AC 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   244 000003AF 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   245 000003B5 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   246 000003B8 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   247 000003BB 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   248 000003BE C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   249 000003C1 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   250 000003C9 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   250 000003D2 00                  <1>
   251 000003D3 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   252 000003D6 480510000000        <1>     add rax, mcb_size
   253 000003DC 4829C1              <1>     sub rcx, rax    ;Take their difference
   254 000003DF C1E904              <1>     shr ecx, 4
   255 000003E2 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   256 000003E5 C1E104              <1>     shl ecx, 4  ;Get bytes again
   257 000003E8 4881C310000000      <1>     add rbx, mcb_size
   258 000003EF 4801CB              <1>     add rbx, rcx
   259                              <1>     ;RBX should now be at 16Mb
   260 000003F2 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   261 000003F5 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   262 000003FD 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   263 00000405 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   264 00000408 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   265 0000040E 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   266                              <1> .skipISA:
   267                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   268                              <1>     ;rbx points to a block with "Z" marker
   269 00000411 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   269 00000419 00000000            <1>
   270 0000041D 7470                <1>     jz .exit
   271                              <1>     ;Add PCI hole MCB
   272 0000041F 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   273                              <1>     ;Remove one MCB worth of space from alloc
   274 00000426 31C9                <1>     xor ecx, ecx
   275 00000428 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   276 0000042B 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   277 00000431 C1E104              <1>     shl ecx, 4  ;Get bytes
   278 00000434 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   279 00000437 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   280 0000043A C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   281 0000043D 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   282 00000445 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   282 0000044E 00                  <1>
   283 0000044F 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   284 00000452 480510000000        <1>     add rax, mcb_size
   285 00000458 4829C1              <1>     sub rcx, rax    ;Take their difference
   286 0000045B C1E904              <1>     shr ecx, 4
   287 0000045E 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   288 00000461 C1E104              <1>     shl ecx, 4  ;Get bytes again
   289 00000464 4881C310000000      <1>     add rbx, mcb_size
   290 0000046B 4801CB              <1>     add rbx, rcx
   291                              <1>     ;RBX should now be at 4Gb
   292 0000046E C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   293 00000471 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   294 00000479 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   294 0000047E [1BC00300]          <1>
   295 00000482 48C1E904            <1>     shr rcx, 4
   296 00000486 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   297 0000048C 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   298                              <1> .exit:
   299                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   300 0000048F 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   301                              <1> ;------------------------------------------------;
   302                              <1> ;          Kernel inits and adjustments          ;
   303                              <1> ;------------------------------------------------;
   304                              <1> ;Adjust Interrupt Entries Int 40h-49h
   305                              <1> adjInts:
   306 00000496 B340                <1>     mov bl, 40h
   307 00000498 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   308 0000049D CD35                <1>     int 35h
   309 0000049F B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   310 000004A4 488D3D68080000      <1>     lea rdi, intData
   311 000004AB 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   312                              <1> .ai0:
   313 000004AD B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   314 000004B2 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   315 000004B5 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   316                              <1> .ai1:
   317 000004B8 CD35                <1>     int 35h
   318 000004BA 4881C708000000      <1>     add rdi, 8
   319 000004C1 FFC1                <1>     inc ecx
   320 000004C3 81F950000000        <1>     cmp ecx, 50h
   321 000004C9 75E2                <1>     jne .ai0
   322                              <1> 
   323                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   324                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   325                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   326                              <1>     %if DEBUG
   327                              <1> debugPopUpMsg:
   328                              <1>     push rbx
   329                              <1>     push rbp
   330                              <1>     push rcx
   331                              <1>     push rdx
   332                              <1>     mov ecx, 53 ;A large number of lines
   333                              <1>     xor edx, edx    ;COM 1
   334                              <1> .cls:
   335                              <1>     mov eax, 010Ah ;Transmit Line feed
   336                              <1>     int 34h
   337                              <1>     dec ecx
   338                              <1>     jnz .cls
   339                              <1>     lea rbx, qword [debPrintNullString + rbp]
   340                              <1>     lea rbp, .msg
   341                              <1>     call rbx
   342                              <1>     jmp short .exit
   343                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   344                              <1> .exit:
   345                              <1>     pop rdx
   346                              <1>     pop rcx
   347                              <1>     pop rbp
   348                              <1>     pop rbx
   349                              <1>     %endif
   350                              <1> 
   351                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   352 000004CB 488D15A5070000      <1>     lea rdx, errorInit ;Get segment start address
   353 000004D2 B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   354 000004D7 CD41                <1>     int 41h
   355 000004D9 488D1597070000      <1>     lea rdx, errorInit ;Get segment start address
   356 000004E0 B844250000          <1>     mov eax, 2544h
   357 000004E5 CD41                <1>     int 41h
   358                              <1> ;------------------------------------------------;
   359                              <1> ;          Driver Adjustments and inits          ;
   360                              <1> ;------------------------------------------------;
   361                              <1> ;Modify the pointers in nData before putting them in the data area
   362 000004E7 48012DA5080000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   363 000004EE 48012DA8080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   364 000004F5 48012DA9080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   365                              <1> ;Copy the Null driver to its location in Sysvars
   366 000004FC B922000000          <1>     mov ecx, drvHdr_size
   367 00000501 488D358B080000      <1>     lea rsi, qword [nData]
   368 00000508 488DBD[6CC00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   369 0000050F F3A4                <1>     rep movsb   
   370                              <1> 
   371                              <1> ;Adjust the addresses in the other driver headers 
   372 00000511 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   372 00000513 [1C24000000000000]  <1>
   373 0000051B B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   374 00000520 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   375                              <1> adjDrivers:
   376 00000524 E83B070000          <1>     call adjustDrvHdr
   377 00000529 E2F9                <1>     loop adjDrivers
   378                              <1> 
   379                              <1> ;Open NUL
   380                              <1> ;NUL opened
   381                              <1> ;Open CON
   382                              <1> conInit:    ;Rather than keeping this resident... do it here
   383                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   384 0000052B 488D95[03270000]    <1>     lea rdx, qword [rbp + fastOutput]
   385 00000532 B849250000          <1>     mov eax, 2549h
   386 00000537 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   387 00000539 488D95[0B270000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   388 00000540 B83B250000          <1>     mov eax, 253Bh
   389 00000545 CD41                <1>     int 41h ;Hook int 3Bh
   390                              <1> .ci0:
   391 00000547 B401                <1>     mov ah, 01      ;Get buffer status
   392 00000549 CD36                <1>     int 36h
   393 0000054B 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   394 0000054D 30E4                <1>     xor ah, ah
   395 0000054F CD36                <1>     int 36h ;Read key to flush from buffer
   396 00000551 EBF4                <1>     jmp short .ci0
   397                              <1> .ci1:
   398 00000553 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   399 00000558 CD30                <1>     int 30h
   400 0000055A B402                <1>     mov ah, 02h
   401 0000055C 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   402 0000055E 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   403 00000560 CD30                <1>     int 30h
   404 00000562 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   405 00000564 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   406 00000569 CD30                <1>     int 30h
   407                              <1> 
   408                              <1>     ;Save ptr to ConHdr in Sysvars
   409 0000056B 488D85[1C240000]    <1>     lea rax, qword [rbp + conHdr]
   410 00000572 6448890425-         <1>     mov qword fs:[vConPtr], rax
   410 00000577 [44C00300]          <1>
   411                              <1> 
   412                              <1>     ;Save ptr to ClkHdr in Sysvars
   413 0000057B 488D85[82240000]    <1>     lea rax, qword [rbp + clkHdr]
   414 00000582 6448890425-         <1>     mov qword fs:[clockPtr], rax
   414 00000587 [3CC00300]          <1>
   415                              <1> 
   416                              <1> ;------------------------------------------------;
   417                              <1> ;         Link DOS to temporary Buffer           ;
   418                              <1> ;------------------------------------------------;
   419                              <1> tempBufferInit:
   420 0000058B 488DBD[19010000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   421 00000592 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   421 00000597 [4EC00300]          <1>
   422 0000059B 31C0                <1>     xor eax, eax
   423 0000059D 48FFC8              <1>     dec rax
   424 000005A0 48AB                <1>     stosq   ;.nextBufPtr, end of list
   425 000005A2 AA                  <1>     stosb   ;.driveNumber, Free entry
   426 000005A3 48FFC0              <1>     inc rax
   427 000005A6 AA                  <1>     stosb   ;.bufferFlags, No flags
   428                              <1> ;------------------------------------------------;
   429                              <1> ;         Init msd driver, create DPB            ;
   430                              <1> ;------------------------------------------------;
   431                              <1> storageInits:
   432                              <1> ;First save dpb pointer in sysvars
   433 000005A7 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   434 000005AE 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   434 000005B3 [2CC00300]          <1>
   435                              <1> ;Open Mass Storage
   436                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   437                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   438                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   439                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   440                              <1>     ;mov al, byte fs:[numPhysVol]
   441                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   442                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   443                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   444                              <1>     ;Check if it returned OK first!
   445                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   446                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   447                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   448                              <1>     ;mov byte fs:[numPhysVol], al
   449                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   450                              <1> 
   451                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   452 000005B7 E8F9070000          <1>     call diskInit
   453 000005BC 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   454 000005BF 648A0425[68C00300]  <1>     mov al, byte fs:[numPhysVol]
   455 000005C7 488D95[C32D0000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   456 000005CE 30C9                <1>     xor cl, cl  ;Clear counter
   457 000005D0 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   457 000005D5 [2CC00300]          <1>
   458                              <1> .si0:   
   459 000005D9 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   460 000005DC B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   461 000005DE CD41                <1>     int 41h
   462                              <1> ;Add other data to DPB
   463 000005E0 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   464 000005E3 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   465 000005E6 50                  <1>     push rax
   466 000005E7 488D87[A4240000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   467 000005EE 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   468 000005F2 58                  <1>     pop rax
   469 000005F3 FEC1                <1>     inc cl
   470 000005F5 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   471 000005F7 7416                <1>     je .si1
   472 000005F9 50                  <1>     push rax
   473 000005FA 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   474 000005FE 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   475 00000602 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   476 00000605 58                  <1>     pop rax
   477 00000606 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   478 0000060D EBCA                <1>     jmp short .si0
   479                              <1> .si1:
   480                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   481 0000060F 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   482 00000617 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   483                              <1> ;------------------------------------------------;
   484                              <1> ;          Find largest sector size              ;
   485                              <1> ;------------------------------------------------;
   486                              <1> sectorSizeSearch:
   487                              <1> ;Done by reading BPB's for each drive
   488 0000061A 488D9D[C32D0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   489                              <1>     
   490                              <1>     ;Go thru each block individually
   491 00000621 31C0                <1>     xor eax, eax
   492 00000623 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   493                              <1> .findLargest:
   494 00000626 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   495 0000062A 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   496 0000062F 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   497 00000636 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   498 00000639 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   499 0000063C 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   500 0000063E 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   500 00000643 [4CC00300]          <1>
   501                              <1>     
   502                              <1> ;------------------------------------------------;
   503                              <1> ;                 Temp CDS inits                 ;
   504                              <1> ;------------------------------------------------;
   505                              <1> tempCDS:
   506                              <1> ;Build a temporary CDS for Drive A to use it for booting
   507 00000647 488DBD[68C50300]    <1>     lea rdi, qword [rbp + tmpCDS]  ;Use Temp CDS in the SDA
   508 0000064E 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   508 00000653 [56C00300]          <1>
   509                              <1>     ;"A:\"+NULL char (in rev order because LITTLE ENDIAN!!)
   510 00000657 C707413A5C00        <1>     mov dword [rdi + cds.sCurrentPath], 005C3A41h  
   511 0000065D 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   512 00000663 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   512 00000668 [2CC00300]          <1>
   513 0000066C 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   514 00000670 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   515                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   516                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   517                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   518                              <1>     ;cds.dStartCluster is 0 since we zero-ed the data area earlier
   519                              <1> ;------------------------------------------------;
   520                              <1> ;     Set up general PSP areas and DOS vars      ;
   521                              <1> ;------------------------------------------------;
   522                              <1> ;Additional DOS Vars init
   523                              <1>     ;xor eax, eax
   524                              <1>     ;mov byte fs:[currentDrv], al ;Current Drive = Drive A
   525                              <1>     ;mov byte fs:[breakFlag], al  ;Break off
   526                              <1>     ;mov byte fs:[verifyFlag], al ;Write only
   527                              <1>     ;mov byte fs:[singleDrv], al  ;Only used on single drive systems
   528                              <1>     ;mov byte fs:[critErrFlag], al   ;Not in critical error
   529                              <1>     ;mov byte fs:[inDOS], al      ;Not in DOS
   530 00000676 64C60425[65C30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   530 0000067E FF                  <1>
   531                              <1>     ;mov word fs:[errorLevel], ax   ;Last return code is 0, no error
   532                              <1>     ;mov byte fs:[allocStrat], al    ;First Fit
   533 0000067F 64C60425[2DC30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   533 00000687 2F                  <1>
   534                              <1>     ;mov byte fs:[vConUnread], al   ;vCon has no unread data!
   535                              <1> 
   536                              <1> ;Set network machine name to... nothing!
   537 00000688 488DBD[32C30300]    <1>     lea rdi, qword [rbp + machineName]
   538 0000068F B910000000          <1>     mov ecx, 10h    ;16 chars long
   539 00000694 B020                <1>     mov al, SPC ;Space char
   540 00000696 F3AA                <1>     rep stosb   ;Fill with space chars
   541                              <1>     ;xor al, al
   542                              <1>     ;mov byte fs:[serverCnt], al ;Set server call count to zero
   543                              <1>     ;mov word fs:[machineNum], ax   ;Clear machine number
   544                              <1> 
   545                              <1> ;Patch Data Table init
   546 00000698 488DBD[42C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   547 0000069F 488D85[F51D0000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   548 000006A6 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   549 000006A8 488D85[FF1D0000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   550 000006AF 48AB                <1>     stosq
   551 000006B1 488D85[091E0000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   552 000006B8 48AB                <1>     stosq
   553 000006BA 488D85[131E0000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   554 000006C1 48AB                <1>     stosq
   555                              <1> 
   556                              <1> ;Initial PSP Init
   557 000006C3 488D1D36F9FFFF      <1>     lea rbx, qword [tempPSP]
   558 000006CA 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   558 000006CF [7BC30300]          <1>
   559 000006D3 53                  <1>     push rbx
   560 000006D4 4881C380000000      <1>     add rbx, psp.dta
   561 000006DB 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   561 000006E0 [73C30300]          <1>
   562 000006E4 5B                  <1>     pop rbx
   563 000006E5 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   564 000006EA C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   565 000006F1 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   566 000006F5 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   567 000006F9 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   568 000006FD 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   569 00000701 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   569 0000070A FF                  <1>
   570 0000070B 48AB                <1>     stosq   ;8 bytes
   571 0000070D 31C0                <1>     xor eax, eax
   572 0000070F 50                  <1>     push rax    ;Save 0 on the stack
   573 00000710 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   574 00000713 48AB                <1>     stosq   ;16 bytes
   575 00000715 AB                  <1>     stosd   ;20 bytes
   576 00000716 58                  <1>     pop rax ;Get 0 back
   577 00000717 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   578 0000071F 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   579 00000723 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   580 00000727 4889DA              <1>     mov rdx, rbx
   581 0000072A B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   582 0000072F CD41                <1>     int 41h
   583 00000731 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   584 00000735 B843350000          <1>     mov eax, 3543h
   585 0000073A CD41                <1>     int 41h
   586 0000073C 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   587 00000740 B844350000          <1>     mov eax, 3544h
   588 00000745 CD41                <1>     int 41h
   589 00000747 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   590                              <1> 
   591 0000074B B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   592 00000750 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   593 00000754 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   594                              <1> ;------------------------------------------------;
   595                              <1> ;          Default File Handle Creation          ;
   596                              <1> ;                                                ;
   597                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   598                              <1> ;------------------------------------------------;
   599                              <1> defaultFileHandles:
   600                              <1> ;Fill in the default file table entries
   601 00000756 488D9D[93C00300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   602 0000075D 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   603 00000764 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   604 0000076A 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   604 0000076F [34C00300]          <1>
   605 00000773 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   605 0000077C 20                  <1>
   606                              <1> ;GOTO FIRST FILE 
   607 0000077D 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   608                              <1> ;Write AUX
   609 00000784 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   610 00000789 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   611 0000078F C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   612 00000793 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   613                              <1>     ;No EOF when reading from the device
   614 00000797 488B85[3E240000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   615 0000079E 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   616                              <1>     ;Ignore disk related fields and Date/Time of open
   617 000007A2 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   618                              <1>     ;11 chars in 8.3 name
   619 000007A6 488D3540050000      <1>     lea rsi, auxName
   620 000007AD B903000000          <1>     mov ecx, 3
   621 000007B2 F3A4                <1>     rep movsb   ;Move the three bytes
   622 000007B4 4889D0              <1>     mov rax, rdx
   623 000007B7 48AB                <1>     stosq   ;Eight spaces left to print
   624 000007B9 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   624 000007BE [7BC30300]          <1>
   625 000007C2 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   626                              <1> ;GOTO NEXT ENTRY
   627 000007C6 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   628                              <1>     ;Write CON
   629 000007CD 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   630 000007D2 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   631 000007D8 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   632 000007DC C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   633                              <1>     ;No EOF when reading from the device
   634 000007E0 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   634 000007E5 [44C00300]          <1>
   635 000007E9 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   636                              <1>     ;Ignore disk related fields and Date/Time of open
   637 000007ED 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   638                              <1>     ;11 chars in 8.3 name
   639 000007F1 488D35F1040000      <1>     lea rsi, conName
   640 000007F8 B903000000          <1>     mov ecx, 3
   641 000007FD F3A4                <1>     rep movsb   ;Move the three bytes
   642 000007FF 4889D0              <1>     mov rax, rdx
   643 00000802 48AB                <1>     stosq   ;Eight spaces left to print
   644 00000804 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   644 00000809 [7BC30300]          <1>
   645 0000080D 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   646                              <1> ;GOTO NEXT ENTRY
   647 00000811 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   648                              <1> ;Write PRN
   649 00000818 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   650 0000081D 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   651 00000823 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   652 00000827 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   653                              <1>     ;Want EOF when reading from to the device
   654 0000082B 488B85[60240000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   655 00000832 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   656                              <1>     ;Ignore disk related fields and Date/Time of open
   657 00000836 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   658                              <1>     ;11 chars in 8.3 name
   659 0000083A 488D35B0040000      <1>     lea rsi, prnName
   660 00000841 B903000000          <1>     mov ecx, 3
   661 00000846 F3A4                <1>     rep movsb   ;Move the three bytes
   662 00000848 4889D0              <1>     mov rax, rdx
   663 0000084B 48AB                <1>     stosq   ;Eight spaces left to print
   664 0000084D 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   664 00000852 [7BC30300]          <1>
   665 00000856 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   666                              <1> ;Zero word 0 of entry 4 and 5
   667 0000085A 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   668 00000861 31C0                <1>     xor eax, eax
   669                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   670                              <1>     ; which is ok as these are empty entries, ready to be used)
   671 00000863 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   672 00000865 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   673 0000086C 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   674                              <1> ;------------------------------------------------;
   675                              <1> ;               Load CONFIG.SYS                  ;
   676                              <1> ;------------------------------------------------;
   677                              <1> ;------------------------------------------------;
   678                              <1> ;              Process CONFIG.SYS                ;
   679                              <1> ;------------------------------------------------;
   680                              <1> ;------------------------------------------------;
   681                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   682                              <1> ;------------------------------------------------;
   683                              <1> ;------------------------------------------------;
   684                              <1> ;   Setup Final Data Areas With Overrides from   ;
   685                              <1> ;                  CONFIG.SYS                    ;
   686                              <1> ;------------------------------------------------;
   687                              <1> ;------------------------------------------------;
   688                              <1> ;           Load Command interpreter             ;
   689                              <1> ;------------------------------------------------;
   690 0000086E 488D1513040000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   691 00000875 B409                <1>     mov ah, 09h
   692 00000877 CD41                <1>     int 41h
   693                              <1> ;Resize DOS allocation before loading COMMAND.COM
   694 00000879 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   694 0000087E [24C00300]          <1>
   695 00000882 4981C010000000      <1>     add r8, mcb.program
   696 00000889 BB39110000          <1>     mov ebx, dynamicDataAreaLength
   697 0000088E C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   698 00000891 FFC3                <1>     inc ebx
   699 00000893 B44A                <1>     mov ah, 4Ah
   700 00000895 CD41                <1>     int 41h
   701                              <1>     
   702                              <1>     %if DEBUG && ALLOCTEST
   703                              <1> ;Test Allocation, Growth and Deallocation
   704                              <1>     mov r15, qword fs:[currentPSP]
   705                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   706                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   707                              <1>     mov ah, 48h ;Allocate
   708                              <1>     int 41h
   709                              <1> 
   710                              <1>     mov r8, rax ;Move the pointer to r8
   711                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   712                              <1>     mov ah, 4Ah
   713                              <1>     int 41h
   714                              <1> 
   715                              <1>     mov ah, 49h ;Free r8
   716                              <1>     int 41h
   717                              <1>     mov qword fs:[currentPSP], r15
   718                              <1>     %endif
   719                              <1> 
   720                              <1>     %if ENDSTATUS
   721                              <1> debugFinal:
   722                              <1>     ;Print system state
   723 00000897 55                  <1>     push rbp    ;Only rbp really matters here
   724 00000898 4989E8              <1>     mov r8, rbp
   725                              <1> 
   726 0000089B 488D2DD0020000      <1>     lea rbp, .msg2
   727 000008A2 4D8D88[C3010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   728 000008A9 41FFD1              <1>     call r9
   729                              <1> 
   730 000008AC 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   731 000008B3 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   731 000008B8 [08C00300]          <1>
   732                              <1> 
   733 000008BC 4D8D88[FE040000]    <1>     lea r9, qword [r8 + overlayQword]
   734 000008C3 41FFD1              <1>     call r9
   735                              <1> 
   736 000008C6 4881C31B000000      <1>     add rbx, 19+8
   737 000008CD 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   737 000008D2 [00C00300]          <1>
   738 000008D6 41FFD1              <1>     call r9
   739                              <1> 
   740 000008D9 4881C31B000000      <1>     add rbx, 19+8
   741 000008E0 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   741 000008E5 [24C00300]          <1>
   742 000008E9 41FFD1              <1>     call r9
   743                              <1> 
   744 000008EC 4881C31C000000      <1>     add rbx, 20+8
   745 000008F3 4D8D88[BB040000]    <1>     lea r9, qword [r8 + overlayDword]
   746 000008FA 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   747 00000902 41FFD1              <1>     call r9
   748                              <1> 
   749 00000905 4881C312000000      <1>     add rbx, 10+8
   750 0000090C 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   751 00000914 41FFD1              <1>     call r9
   752                              <1> 
   753 00000917 4881C312000000      <1>     add rbx, 10+8
   754 0000091E 64488B0425-         <1>     mov rax, qword fs:[longMem]
   754 00000923 [1BC00300]          <1>
   755 00000927 4D8D88[FE040000]    <1>     lea r9, qword [r8 + overlayQword]
   756 0000092E 41FFD1              <1>     call r9
   757                              <1> 
   758 00000931 4881C31B000000      <1>     add rbx, 19+8
   759 00000938 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   759 0000093D [2CC00300]          <1>
   760 00000941 41FFD1              <1>     call r9
   761                              <1> 
   762 00000944 4881C31B000000      <1>     add rbx, 19+8
   763 0000094B 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   763 00000950 [34C00300]          <1>
   764 00000954 41FFD1              <1>     call r9
   765                              <1> 
   766 00000957 4881C31B000000      <1>     add rbx, 19+8
   767 0000095E 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   767 00000963 [4EC00300]          <1>
   768 00000967 41FFD1              <1>     call r9
   769                              <1> 
   770 0000096A 4881C31B000000      <1>     add rbx, 19+8
   771 00000971 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   771 00000976 [56C00300]          <1>
   772 0000097A 41FFD1              <1>     call r9
   773                              <1> 
   774 0000097D 4D8D88[49040000]    <1>     lea r9, qword [r8 + overlayByte]
   775                              <1> 
   776 00000984 4881C32C000000      <1>     add rbx, 25+19
   777 0000098B 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
   777 00000991 [68C00300]          <1>
   778 00000995 41FFD1              <1>     call r9
   779                              <1> 
   780 00000998 4881C31E000000      <1>     add rbx, 30
   781 0000099F 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   781 000009A5 [12C00300]          <1>
   782 000009A9 41FFD1              <1>     call r9
   783                              <1> 
   784 000009AC 4881C31E000000      <1>     add rbx, 30
   785 000009B3 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   785 000009B9 [11C00300]          <1>
   786 000009BD 41FFD1              <1>     call r9
   787                              <1> 
   788 000009C0 4881C310000000      <1>     add rbx, 16
   789 000009C7 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   789 000009CD [10C00300]          <1>
   790 000009D1 0441                <1>     add al, "A"
   791 000009D3 8803                <1>     mov byte [rbx], al
   792                              <1> 
   793 000009D5 488D2D10000000      <1>     lea rbp, .msg
   794 000009DC 4D8D88[C3010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   795 000009E3 41FFD1              <1>     call r9
   796 000009E6 5D                  <1>     pop rbp
   797 000009E7 E99E010000          <1>     jmp l1
   798 000009EC 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   798 000009F5 206261736520464646- <1>
   798 000009FE 464646464646464646- <1>
   798 00000A07 46464646680A0D      <1>
   799 00000A0E 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   799 00000A17 464646464646464646- <1>
   799 00000A20 464646464646680A0D  <1>
   800 00000A29 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   800 00000A32 464646464646464646- <1>
   800 00000A3B 46464646464668200A- <1>
   800 00000A44 0D                  <1>
   801 00000A45 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   801 00000A4E 464646464646466820  <1>
   802 00000A57 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   802 00000A60 464646464646466820  <1>
   803 00000A69 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   803 00000A72 464646464646464646- <1>
   803 00000A7B 464646464646680A0D  <1>
   804 00000A84 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   804 00000A8D 464646464646464646- <1>
   804 00000A96 464646464646680A0D  <1>
   805 00000A9F 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   805 00000AA8 464646464646464646- <1>
   805 00000AB1 464646464646680A0D  <1>
   806 00000ABA 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   806 00000AC3 464646464646464646- <1>
   806 00000ACC 464646464646680A0D  <1>
   807 00000AD5 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   807 00000ADE 464646464646464646- <1>
   807 00000AE7 464646464646680A0D  <1>
   808 00000AF0 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   808 00000AF9 204C6F676963616C20- <1>
   808 00000B02 447269766573204646- <1>
   808 00000B0B 680A0D              <1>
   809 00000B0E 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   809 00000B17 204669786564204472- <1>
   809 00000B20 697665732020204646- <1>
   809 00000B29 680A0D              <1>
   810 00000B2C 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   810 00000B35 2052656D6F7661626C- <1>
   810 00000B3E 652044727673204646- <1>
   810 00000B47 680A0D              <1>
   811 00000B4A 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   811 00000B53 65205A3A0A0D        <1>
   812 00000B59 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   812 00000B62 4F4D4D414E442E434F- <1>
   812 00000B6B 4D2E2E2E0A0D00      <1>
   813 00000B72 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   813 00000B7B 626F6F742073756D6D- <1>
   813 00000B84 6172790A0D00        <1>
   814                              <1>     %endif
   815                              <1> l1:
   816 00000B8A B401                <1>     mov ah, 01h  ;Write with echo
   817 00000B8C CD41                <1>     int 41h
   818 00000B8E 3C00                <1>     cmp al, 0
   819 00000B90 7402                <1>     je l2
   820 00000B92 EBF6                <1>     jmp short l1
   821                              <1> l2:
   822 00000B94 B407                <1>     mov ah, 07h
   823 00000B96 CD41                <1>     int 41h
   824 00000B98 3C42                <1>     cmp al, 42h
   825 00000B9A 75EE                <1>     jne l1
   826                              <1> l3:
   827 00000B9C 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   827 00000BA1 [42C50300]0000      <1>
   828 00000BA7 488D9D[EEC30300]    <1>     lea rbx, qword [rbp + secdReqHdr] ;Get the address of this request block
   829 00000BAE 488D85[42C50300]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   830 00000BB5 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   831 00000BB8 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   832 00000BBC 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   833 00000BC2 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   834 00000BC6 C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   835 00000BCD FF95[8C240000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   836 00000BD3 FF95[94240000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr] 
   837                              <1> 
   838 00000BD9 B403                <1>     mov ah, 03h
   839 00000BDB 30FF                <1>     xor bh, bh
   840 00000BDD CD30                <1>     int 30h
   841 00000BDF 30D2                <1>     xor dl, dl  ;0 column
   842 00000BE1 B402                <1>     mov ah, 02h
   843 00000BE3 CD30                <1>     int 30h
   844                              <1> 
   845 00000BE5 488D9D[42C50300]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   846 00000BEC 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   847 00000BF0 E832000000          <1>     call .clkHexToBCD
   848 00000BF5 B40E                <1>     mov ah, 0Eh
   849 00000BF7 B03A                <1>     mov al, ":"
   850 00000BF9 CD30                <1>     int 30h
   851 00000BFB 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   852 00000BFF E823000000          <1>     call .clkHexToBCD
   853 00000C04 B40E                <1>     mov ah, 0Eh
   854 00000C06 B03A                <1>     mov al, ":"
   855 00000C08 CD30                <1>     int 30h
   856 00000C0A 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   857 00000C0E E814000000          <1>     call .clkHexToBCD
   858 00000C13 B40E                <1>     mov ah, 0Eh
   859 00000C15 B02E                <1>     mov al, "."
   860 00000C17 CD30                <1>     int 30h
   861 00000C19 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   862 00000C1D E805000000          <1>     call .clkHexToBCD
   863 00000C22 E963FFFFFF          <1>     jmp l1
   864                              <1> .clkHexToBCD:
   865                              <1> ;Converts a Hex byte into two BCD digits
   866                              <1> ;Takes input in each nybble of al
   867 00000C27 53                  <1>     push rbx
   868 00000C28 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   868 00000C31 00                  <1>
   869 00000C32 31D2                <1>     xor edx, edx
   870 00000C34 48F7F3              <1>     div rbx
   871 00000C37 80C230              <1>     add dl, '0'
   872 00000C3A 80FA39              <1>     cmp dl, '9'
   873 00000C3D 7603                <1>     jbe .chtb0
   874 00000C3F 80C207              <1>     add dl, 'A'-'0'-10
   875                              <1> .chtb0:
   876 00000C42 88D1                <1>     mov cl, dl    ;Save remainder byte
   877 00000C44 31D2                <1>     xor edx, edx
   878 00000C46 48F7F3              <1>     div rbx
   879 00000C49 80C230              <1>     add dl, '0'
   880 00000C4C 80FA39              <1>     cmp dl, '9'
   881 00000C4F 7603                <1>     jbe .chtb1
   882 00000C51 80C207              <1>     add dl, 'A'-'0'-10
   883                              <1> .chtb1:
   884 00000C54 88D5                <1>     mov ch, dl    ;Save remainder byte
   885                              <1> 
   886 00000C56 88E8                <1>     mov al, ch    ;Get most sig digit into al
   887 00000C58 B40E                <1>     mov ah, 0Eh
   888 00000C5A CD30                <1>     int 30h
   889 00000C5C 88C8                <1>     mov al, cl    ;Get least sig digit into al
   890 00000C5E B40E                <1>     mov ah, 0Eh
   891 00000C60 CD30                <1>     int 30h
   892 00000C62 5B                  <1>     pop rbx
   893 00000C63 C3                  <1>     ret
   894                              <1> ;--------------------------------
   895                              <1> ;       PROCS FOR SYSINIT       :
   896                              <1> ;--------------------------------
   897                              <1> adjustDrvHdr:
   898                              <1> ;Input: rsi = Effective address of driver in DOS segment
   899                              <1> ;       rbp = Ptr to the start of the DOS segment
   900                              <1> ;Output: rsi = EA of next header in DOS segment
   901 00000C64 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   902 00000C67 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   903 00000C6B 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   904 00000C6F 4881C622000000      <1>     add rsi, drvHdr_size
   905 00000C76 C3                  <1>     ret
   906                              <1> errorInit:
   907                              <1> ;If a critical error occurs during sysinit, fail through here
   908                              <1> ;Int 42h, 43h and 44h point here during sysinit
   909 00000C77 488D2D3A000000      <1>     lea rbp, hltmsg
   910 00000C7E B804130000          <1>     mov eax, 1304h
   911 00000C83 CD30                <1>     int 30h
   912                              <1>     ;cli ;Clear interrupts
   913                              <1>     ;mov al, -1
   914                              <1>     ;mov dx, 0A1h    ;PIC2 data
   915                              <1>     ;out dx, al      ;Mask all lines
   916                              <1>     ;mov dx, 21h     ;PIC1 data
   917                              <1>     ;out dx, al      ;Mask all lines
   918                              <1> .ei0:
   919 00000C85 F4                  <1>     hlt
   920 00000C86 EBFD                <1>     jmp short .ei0
   921                              <1> ;--------------------------------
   922                              <1> ;       DATA FOR SYSINIT        :
   923                              <1> ;--------------------------------
   924 00000C88 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   924 00000C91 5343502F444F532E2E- <1>
   924 00000C9A 2E0A0D24            <1>
   925 00000C9E 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   925 00000CA7 6C6F636174696F6E20- <1>
   925 00000CB0 4572726F720A0D00    <1>
   926 00000CB8 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   926 00000CC1 7469616C6973696E67- <1>
   926 00000CCA 20534350444F532E53- <1>
   926 00000CD3 59532E205379737465- <1>
   926 00000CDC 6D2068616C74696E67- <1>
   926 00000CE5 2E2E2E00            <1>
   927 00000CE9 434F4E00            <1> conName db "CON",0
   928 00000CED 41555800            <1> auxName db "AUX",0
   929 00000CF1 50524E00            <1> prnName db "PRN",0
   930                              <1> 
   931 00000CF5 003A5C4155544F4558- <1> aexec   db 0,":\AUTOEXEC.BAT",0 ;ASCIIZ for AUTOEXEC (with space for drvletter)
   931 00000CFE 45432E42415400      <1>
   932 00000D05 003A5C434F4E464947- <1> cfgspec db 0,":\CONFIG.SYS",0 ;ASCIIZ for CONFIG (with space for drive letter)
   932 00000D0E 2E53595300          <1>
   933                              <1> 
   934                              <1> intData:
   935 00000D13 [C216000000000000]  <1>     dq terminateProcess ;Int 40h
   936 00000D1B [6D1C000000000000]  <1>     dq functionDispatch ;Int 41h
   937 00000D23 [770C000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   938 00000D2B [C51D000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
   939 00000D33 [B717000000000000]  <1>     dq dosDefCritErrHdlr 
   940 00000D3B [8318000000000000]  <1>     dq absDiskRead      ;Int 45h
   941 00000D43 [6418000000000000]  <1>     dq absDiskWrite     ;Int 46h
   942 00000D4B [C416000000000000]  <1>     dq terminateRes     ;Int 47h
   943 00000D53 [C51D000000000000]  <1>     dq defaultIretq     ;Int 48h
   944 00000D5B [C51D000000000000]  <1>     dq defaultIretq     ;Int 49h
   945 00000D63 [C51D000000000000]  <1>     dq defaultIretq     ;Int 4Ah
   946 00000D6B [C51D000000000000]  <1>     dq defaultIretq     ;Int 4Bh
   947 00000D73 [C51D000000000000]  <1>     dq defaultIretq     ;Int 4Ch
   948 00000D7B [C51D000000000000]  <1>     dq defaultIretq     ;Int 4Dh
   949 00000D83 [C51D000000000000]  <1>     dq defaultIretq     ;Int 4Eh
   950 00000D8B [6521000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
   951                              <1> nData:
   952 00000D93 [1C24000000000000]  <1>     dq conHdr
   953 00000D9B 0480                <1>     dw 08004h
   954 00000D9D [C425000000000000]  <1>     dq nulStrat
   955 00000DA5 [CA25000000000000]  <1>     dq nulIntr
   956 00000DAD 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   957                              <1> 
   958                              <1> diskInit:
   959                              <1>     ;We create a function to deal with BPB parsing etc
   960                              <1>     ;Start with the first primary partition on each hard disk (until max)
   961                              <1>     ;   They dont have to be bootable
   962                              <1>     ;Then go back and look for other partitions partitions. 
   963                              <1>     ;   Add each other primary or logical ptn (until max)
   964                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   965                              <1>     ;Use r8 as device counter
   966 00000DB5 488DBD[EB2D0000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
   967 00000DBC 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
   967 00000DC4 00                  <1>
   968 00000DC5 0F84C6000000        <1>     jz .remInit ;No? Go to removables
   969 00000DCB 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   969 00000DD4 00                  <1>
   970 00000DD5 B280                <1>     mov dl, 80h ;Start with HDD 0
   971                              <1> .primary:
   972 00000DD7 64803C25[68C00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
   972 00000DDF 03                  <1>
   973 00000DE0 0F84AB000000        <1>     je .remInit
   974 00000DE6 31C9                <1>     xor ecx, ecx    ;Sector 0
   975 00000DE8 E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   976 00000DED 0F8289000000        <1>     jc .primaryEpilog
   977                              <1>     ;Here, check MBR or BPB
   978 00000DF3 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   979 00000DFC 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   980                              <1>     ;Now check if BPB or MBR
   981 00000DFE 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   982 00000E00 8A6302              <1>     mov ah, byte [rbx + 2]
   983 00000E03 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   984 00000E07 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   985                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   986                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   987 00000E09 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   988 00000E10 B104                <1>     mov cl, 4
   989                              <1> .checkPrimary:
   990 00000E12 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   991 00000E15 3C01                <1>     cmp al, 01
   992 00000E17 7421                <1>     je .primaryFound
   993 00000E19 3C04                <1>     cmp al, 04
   994 00000E1B 741D                <1>     je .primaryFound
   995 00000E1D 3C06                <1>     cmp al, 06
   996 00000E1F 7419                <1>     je .primaryFound
   997 00000E21 3C0B                <1>     cmp al, 0Bh
   998 00000E23 7415                <1>     je .primaryFound
   999 00000E25 3C0C                <1>     cmp al, 0Ch
  1000 00000E27 7411                <1>     je .primaryFound
  1001 00000E29 3C0E                <1>     cmp al, 0Eh
  1002 00000E2B 740D                <1>     je .primaryFound
  1003 00000E2D 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1004 00000E34 FEC9                <1>     dec cl
  1005 00000E36 7444                <1>     jz .primaryEpilog
  1006 00000E38 EBD8                <1>     jmp short .checkPrimary
  1007                              <1> .primaryFound:
  1008                              <1>     ;Copy the first sector of this partition into memory
  1009 00000E3A 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1010 00000E3D E8E9000000          <1>     call .initReadSector
  1011 00000E42 7238                <1>     jc .primaryEpilog
  1012                              <1>     ;Now verify this is a BPB
  1013 00000E44 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1014 00000E46 8A6302              <1>     mov ah, byte [rbx + 2]
  1015 00000E49 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1016 00000E4D 752D                <1>     jne .primaryEpilog   ;If not, skip
  1017                              <1>     ;Now copy data to internal tables
  1018 00000E4F 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1019 00000E52 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1020 00000E57 57                  <1>     push rdi
  1021 00000E58 F348A5              <1>     rep movsq   ;Copy the BPB
  1022 00000E5B 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1023                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1024 00000E5C 4A8D9C05[B92D0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1025                              <1>     ;Add device count to rbx to point to correct entry
  1026 00000E64 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1027 00000E66 4A8D9CC5[C32D0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1028 00000E6E 488933              <1>     mov qword [rbx], rsi
  1029 00000E71 49FFC0              <1>     inc r8  ;Goto next logical drive
  1030 00000E74 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1031                              <1> .primaryEpilog:
  1032 00000E7C FEC2                <1>     inc dl  ;Goto next BIOS drive
  1033 00000E7E 88D6                <1>     mov dh, dl
  1034 00000E80 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1035 00000E83 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1036 00000E8B 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1037                              <1> .extended:
  1038                              <1> ;We have gone through all the devices once
  1039                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1040                              <1>     ;je .remInit ;If yes, get removable devices
  1041                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1042                              <1>     ;xor ecx, ecx    ;Get MBR back
  1043                              <1>     ;call .initReadSector
  1044                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1045                              <1> .remInit:
  1046                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1047 00000E91 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1048 00000E94 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1049 00000E96 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1050                              <1>     ;rdi points to the space for the subsequent bpb's
  1051                              <1> .removables:
  1052 00000E99 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1053 00000E9B E88B000000          <1>     call .initReadSector
  1054 00000EA0 7238                <1>     jc .removableEpilogue   ;Goto next device
  1055                              <1>     ;Now verify this is a BPB
  1056 00000EA2 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1057 00000EA4 8A6302              <1>     mov ah, byte [rbx + 2]
  1058 00000EA7 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1059 00000EAB 752D                <1>     jne .removableEpilogue   ;If not, skip
  1060                              <1>     ;Now copy data to internal tables
  1061 00000EAD 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1062 00000EB0 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1063 00000EB5 57                  <1>     push rdi
  1064 00000EB6 F348A5              <1>     rep movsq   ;Copy the BPB
  1065 00000EB9 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1066                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1067 00000EBA 4A8D9C05[B92D0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1068                              <1>     ;Add device count to rbx to point to correct entry
  1069 00000EC2 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1070 00000EC4 4A8D9CC5[C32D0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1071 00000ECC 488933              <1>     mov qword [rbx], rsi
  1072 00000ECF 49FFC0              <1>     inc r8  ;Goto next logical drive
  1073 00000ED2 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1074                              <1> .removableEpilogue:
  1075 00000EDA FEC2                <1>     inc dl  ;Goto next BIOS device now
  1076 00000EDC 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1077 00000EE4 7412                <1>     je .end
  1078 00000EE6 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1079 00000EED 7403                <1>     je .re0
  1080 00000EEF 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1081                              <1> .re0:
  1082 00000EF2 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1083 00000EF6 72A1                <1>     jb .removables
  1084                              <1> .end:
  1085 00000EF8 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1085 00000F00 01                  <1>
  1086 00000F01 7401                <1>     je .singleRemDev
  1087 00000F03 C3                  <1>     ret
  1088                              <1> .singleRemDev:
  1089                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1090 00000F04 488D9D[B92D0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1091 00000F0B 8A95[B92D0000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1092 00000F11 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1093 00000F14 488D9D[C32D0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1094 00000F1B 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1095 00000F1E 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1096 00000F22 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1097 00000F2A C3                  <1>     ret
  1098                              <1> .initReadSector:
  1099                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1100 00000F2B B482                <1>     mov ah, 82h ;Read
  1101 00000F2D B001                <1>     mov al, 1   ;One sector
  1102 00000F2F 488D9D[39010000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1103 00000F36 CD33                <1>     int 33h
  1104 00000F38 C3                  <1>     ret
    14                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    15                                  %include "./Source/BSS/dosSeg.asm"
    16                              <1> ;This file contains the main DOS data segment
    17                              <1> dosAPT: ;Additional Page tables
    18 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    19                              <1> dosDataArea:
    20 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    21 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    22 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    23 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    24 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    25 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    26 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    27 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    28                              <1> ;Above is the system stats
    29                              <1> ;Below is the DOS vars
    30 0003C023 ??                  <1>     vConOutOff  resb 1    ;Offset in output buffer to the next char to output
    31                              <1>     ;   A value of 0 means no chars buffered.
    32 0003C024 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    33                              <1> sysVarsPtr:
    34 0003C02C ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    35 0003C034 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    36 0003C03C ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    37                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    38 0003C044 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    39                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    40 0003C04C ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    41 0003C04E ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    42 0003C056 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    43 0003C05E ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    44 0003C066 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    45                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    46 0003C068 ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    47 0003C069 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    48 0003C06A ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    49 0003C06B ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    50 0003C06C <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    51                              <1> ;Additional internal variables
    52                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    53 0003C08E ??                  <1>     singleDrv   resb 1    ;Set if last drive accessed was drive B x
    54 0003C08F ????                <1>     numFiles    resw 1    ;FILES=5 default
    55 0003C091 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    56                              <1> ;Create SFT header and corresponding array of five default sft entries
    57 0003C093 <res Ah>            <1>     firstSftHeader  resb sfth_size
    58 0003C09D <res 4Fh>           <1>     firstSft    resb sft_size
    59 0003C0EC <res 4Fh>           <1>     secondSft   resb sft_size
    60 0003C13B <res 4Fh>           <1>     thirdSft    resb sft_size
    61 0003C18A <res 4Fh>           <1>     fourthSft   resb sft_size
    62 0003C1D9 <res 4Fh>           <1>     fifthSft    resb sft_size
    63                              <1> 
    64                              <1> ;Virtual CONsole Buffers
    65 0003C228 ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
    66                              <1>     ;Only incremented when CON device runs vCon
    67                              <1> vConBuf:    ;Proper buffer symbol
    68 0003C229 ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
    69 0003C22A <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
    70                              <1>     ;Only 128 if also taking input and outputting simultaneously
    71 0003C2AA <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
    72 0003C32A ??                  <1>     bufpad      resb 1     ;Used to pad with LF
    73                              <1> 
    74 0003C32B ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
    75 0003C32C ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    76 0003C32D ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
    77 0003C32E ??                  <1>     vConCursor  resb 1     ;Inc on each char output, regardless of redirection
    78                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
    79                              <1> 
    80 0003C32F ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    81                              <1> ;Server stuff. Default to all zeros (blank)
    82 0003C330 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
    83 0003C331 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
    84 0003C332 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
    85                              <1> ;Swappable Data Area
    86 0003C342 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    87 0003C362 ??                  <1>                 resb 1  ;Alignment byte
    88                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    89 0003C363 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    90 0003C364 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    91 0003C365 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    92 0003C366 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    93 0003C367 ????                <1>     errorExCde  resw 1  ;Extended Error Code
    94 0003C369 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    95 0003C36A ??                  <1>     errorClass  resb 1  ;Error Class
    96 0003C36B ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
    97 0003C373 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    98 0003C37B ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
    99                              <1> 
   100 0003C383 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   101 0003C38B ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   102 0003C38D ??                  <1>     currentDrv  resb 1  ;Default drive x
   103 0003C38E ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   104                              <1> ;SDA, needs to be replaced between processes
   105 0003C38F ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   106 0003C397 ????????????????    <1>     sharePSP    resq 1  ;PSP of the share program
   107 0003C39F ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   108 0003C3A1 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   109 0003C3A9 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   110 0003C3B1 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   111                              <1> 
   112 0003C3B9 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   113 0003C3C1 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   114 0003C3C2 ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   115                              <1> 
   116 0003C3C3 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   117 0003C3CB ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   118 0003C3D3 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   119 0003C3DB ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   120 0003C3E3 ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   121                              <1> ;The below flag tells DOS to print ^C in the termination function
   122 0003C3E4 ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   123                              <1> 
   124                              <1> ;Time stuff
   125 0003C3E5 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   126 0003C3E6 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   127 0003C3E7 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
   128 0003C3E8 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   129 0003C3EA ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   130                              <1> 
   131 0003C3EB ??                  <1>     vConDrvFlg  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   132 0003C3EC ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   133 0003C3ED ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   134                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   135                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   136                              <1> ; without forcing to re-build the whole primary request block.
   137                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   138                              <1> ; with secondary char output going through the secondary header
   139                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   140                              <1> ; for output)
   141                              <1> ;ioReqPkt is the largest possible packet
   142 0003C3EE <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   143 0003C418 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   144                              <1> 
   145                              <1> ;Swappable Buffers
   146 0003C442 <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   147 0003C4C2 <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   148 0003C542 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   149 0003C548 ??                  <1>     singleIObyt resb 1  ;For single IO byte buffers
   150                              <1> ;Misc bookkeeping flags and vars
   151                              <1>     ;secClusConv resb 1  ;For networking, do we convert sector to cluster?
   152 0003C549 ??                  <1>     rwFlag      resb 1  ;00h=Read, 01h=Write
   153 0003C54A ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   154 0003C54B ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   155 0003C54C ??                  <1>     typePSPcopy resb 1  ;00=Simple copy, -1=Make Child process
   156 0003C54D ??                  <1>     spliceFlag  resb 1  ;01 = file name and directory name together
   157 0003C54E ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   158                              <1> 
   159 0003C54F ??                  <1>     workingDrv  resb 1  ;Working drive number
   160                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   161                              <1> workingDD:  ;Create a symbol for the working device driver too
   162 0003C550 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   163 0003C558 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   164                              <1> vConOldSFT: ;Alternate symbol for saving the oldSFTptr during a char func
   165 0003C560 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr
   166 0003C568 <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need tmp CDS
   167 0003C5C3 ????????????????    <1>     curJFTNum   resq 1  ;Ptr to JFT num in caller PSP of file being accessed
   168                              <1> vConCurSFT: ;Alternate symbol for the SFT to be used for char function
   169 0003C5CB ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   170 0003C5D3 ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   171 0003C5D5 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   172                              <1> ;Temp vars, used when walking FAT or changing sectors
   173 0003C5DD ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   174 0003C5E5 ????                <1>     entries     resw 1  ;FAT entries per FAT sector
   175                              <1> ;***************************************************|
   176                              <1> ; Needs to be set up before any file access         |
   177                              <1> ; These vars keep track of file access properties   |
   178                              <1> ;   and must be used only for such purposes.        |
   179                              <1> ;***************************************************|
   180 0003C5E7 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   181 0003C5EB ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   182                              <1> 
   183 0003C5EF ??                  <1>     clustFact   resb 1  ;NUMBER of sectors per cluster
   184                              <1> 
   185 0003C5F0 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   186 0003C5F4 ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   187 0003C5F5 ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   188                              <1> 
   189 0003C5FD ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   190 0003C5FF ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   191                              <1> ;***************************************************|
   192 0003C603 ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   193 0003C607 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   194 0003C60B ????????            <1>     bytesAdded  resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   195 0003C60F ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   196 0003C613 ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   197                              <1> ;Directory stuff
   198 0003C617 ????????            <1>     dirClust    resd 1  ;Cluster number of current directory
   199 0003C61B ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   200 0003C61F ??                  <1>     dirSect     resb 1  ;Sector of current directory
   201 0003C620 ??                  <1>     dirEntry    resb 1  ;32 byte offset in dir sect for file being searched for
   202                              <1> ;Error DPB 
   203 0003C621 ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   204                              <1>     
   205                              <1> ;Stacks and scratch SFT
   206 0003C629 <res 528h>          <1>     critStack   resq 165
   207 0003CB51 ????????????????    <1>     critStakTop resq 1
   208                              <1> 
   209 0003CB59 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   210                              <1> 
   211 0003CBA8 <res 638h>          <1>     AuxStack    resq 199
   212 0003D1E0 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   213 0003D1E8 <res 638h>          <1>     DiskStack   resq 199
   214 0003D820 ????????????????    <1>     DiskStakTop resq 1
   215                              <1> 
   216 0003D828 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   217 0003D829 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls!  
   218                              <1>     dSegLen     equ     $
    16                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    17                                  %define currSegVBase section.resSeg.vstart
    18                                  %include "./Source/Data/staticData.asm"
    19                              <1> 
    20                              <1> ;-----------------------------------:
    21                              <1> ;           Static Data             :
    22                              <1> ;-----------------------------------:
    23 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    24 00000001 01                  <1> dosMinor    db 01h      ;.01
    25 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    25 0000000B 535953              <1>
    26 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    26 00000017 535953              <1>
    19                                  %include "./Source/Data/dispTbl.asm"
    20                              <1> ;Kernel Dispatch Function Table
    21                              <1> 
    22                              <1> kDispTbl:
    23 0000001A AC16                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    24 0000001C B10B                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    25 0000001E C00B                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    26 00000020 DC0B                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    27 00000022 DC0B                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    28 00000024 DC0B                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    29 00000026 DC0B                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    30 00000028 DC0B                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    31 0000002A DC0B                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    32 0000002C F40B                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    33 0000002E 030C                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    34 00000030 030C                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    35 00000032 030C                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    36 00000034 4E1E                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    37 00000036 6F1E                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    38 00000038 DA0C                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    39 0000003A DA0C                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    40 0000003C DA0C                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    41 0000003E DA0C                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    42 00000040 DA0C                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    43 00000042 DA0C                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    44 00000044 DA0C                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    45 00000046 DA0C                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    46 00000048 DA0C                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    47 0000004A 4A21                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    48 0000004C 881E                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    49 0000004E DB0C                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    50 00000050 8F1E                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    51 00000052 911E                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    52 00000054 4A21                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    53 00000056 4A21                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    54 00000058 4C1F                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    55 0000005A 4A21                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    56 0000005C EE0C                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    57 0000005E EE0C                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    58 00000060 EE0C                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    59 00000062 EE0C                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    60 00000064 FB1E                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    61 00000066 281F                <1>     dw createNewPSP - kDispTbl        ;AH = 26H, PROCESS MANAGEMENT
    62 00000068 EE0C                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    63 0000006A EE0C                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    64 0000006C EE0C                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    65 0000006E D90C                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    66 00000070 D90C                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    67 00000072 D90C                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    68 00000074 D90C                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    69 00000076 291F                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    70 00000078 EF0C                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    71 0000007A 371F                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    72 0000007C AD16                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    73 0000007E 4E1F                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    74 00000080 031E                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    75 00000082 941F                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    76 00000084 A51F                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    77 00000086 BA1F                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    78 00000088 B016                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    79 0000008A B016                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    80 0000008C A108                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    81 0000008E A108                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    82 00000090 A108                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    83 00000092 020D                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    84 00000094 030D                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    85 00000096 040D                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    86 00000098 050D                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    87 0000009A 3E0D                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    88 0000009C 4A0D                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    89 0000009E 4B0D                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    90 000000A0 9E0D                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    91 000000A2 9E0D                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    92 000000A4 9E0D                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    93 000000A6 9E0D                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    94 000000A8 A108                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    95 000000AA A110                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    96 000000AC BE12                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    97 000000AE E713                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    98 000000B0 AE16                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    99 000000B2 AF16                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   100 000000B4 2320                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   101 000000B6 9E0D                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   102 000000B8 9E0D                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   103 000000BA 311E                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   104 000000BC 3A1E                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   105 000000BE 3520                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   106 000000C0 4620                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   107 000000C2 1821                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   108 000000C4 1F21                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   109 000000C6 9E0D                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   110 000000C8 A108                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   111 000000CA 9815                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   112 000000CC 2021                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   113 000000CE 9E0D                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   114 000000D0 9E0D                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   115 000000D2 9E0D                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   116 000000D4 4921                <1>     dw getCritErrorInfo - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   117 000000D6 4921                <1>     dw networkServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   118 000000D8 4921                <1>     dw networkRedirection - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   119 000000DA A108                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   120 000000DC 4A21                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   121 000000DE 431E                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   122 000000E0 4A21                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   123 000000E2 4C1E                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   124 000000E4 B016                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   125 000000E6 B016                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   126 000000E8 9E0D                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   127 000000EA 9E0D                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   128 000000EC 4A21                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   129                              <1> kDispTblL  equ $ - kDispTbl 
   130                              <1> 
   131                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   132 000000EE 9820                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   133                              <1> mDispTblL   equ     $ - mDispTbl
    20                                  %include "./Source/Debug/debug.asm"
    21                              <1> ;This file contains debugging macros, procs and strings
    22                              <1> ; that we can use to output to COM1 bypassing the operating system.
    23                              <1> ;A serial terminal must be connected for this to work.
    24                              <1> 
    25                              <1> ;Variables and equates
    26                              <1> 
    27 000000F0 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    28                              <1> 
    29 000000F8 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    29 00000101 39414243444546      <1>
    30                              <1> ;Common procedures
    31                              <1> debMakeDebuggerRespond:
    32 00000108 488D2D26000000      <1>     lea rbp, .msg
    33 0000010F E8AF000000          <1>     call debPrintNullString
    34 00000114 B900001000          <1>     mov ecx, 100000h
    35                              <1> .waiting:
    36 00000119 FFC9                <1>     dec ecx
    37 0000011B 740C                <1>     jz .timeout
    38 0000011D B402                <1>     mov ah, 02h ;Blocking recieve!
    39 0000011F 31D2                <1>     xor edx, edx
    40 00000121 CD34                <1>     int 34h
    41 00000123 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    42 00000126 75F1                <1>     jnz .waiting
    43 00000128 C3                  <1>     ret
    44                              <1> .timeout:
    45 00000129 488D2D47000000      <1>     lea rbp, .msg2
    46 00000130 E98E000000          <1>     jmp debPrintNullString
    47 00000135 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    47 0000013E 6B6579206174207468- <1>
    47 00000147 65207465726D696E61- <1>
    47 00000150 6C20746F20636F6E74- <1>
    47 00000159 696E7565206F722077- <1>
    47 00000162 61697420666F722074- <1>
    47 0000016B 696D656F75742E2E2E- <1>
    47 00000174 0A0D00              <1>
    48 00000177 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    48 00000180 436F6E74696E75696E- <1>
    48 00000189 672E2E2E0A0D00      <1>
    49                              <1> debPrintHexByte:
    50                              <1> ;Print the hex byte in al as a hex value
    51 00000190 52                  <1>     push rdx
    52 00000191 53                  <1>     push rbx
    53 00000192 50                  <1>     push rax
    54                              <1> 
    55 00000193 88C2                <1>     mov dl, al           ;save byte in dl
    56 00000195 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    57 00000199 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    58 0000019E 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    59 000001A2 E80C000000          <1>     call .wrchar
    60 000001A7 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    61 000001AA E804000000          <1>     call .wrchar
    62                              <1> 
    63 000001AF 58                  <1>     pop rax
    64 000001B0 5B                  <1>     pop rbx
    65 000001B1 5A                  <1>     pop rdx
    66 000001B2 C3                  <1>     ret
    67                              <1> .wrchar:
    68 000001B3 6687DB              <1>     xchg bx, bx
    69 000001B6 488D1D3BFFFFFF      <1>     lea rbx, debascii
    70 000001BD D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    71 000001BE B401                <1>     mov ah, 01h
    72 000001C0 CD34                <1>     int 34h  ;print char
    73 000001C2 C3                  <1>     ret
    74                              <1> 
    75                              <1> debPrintNullString:
    76                              <1> ;Print a null terminated string pointed to by rbp
    77 000001C3 56                  <1>     push rsi
    78 000001C4 50                  <1>     push rax
    79 000001C5 52                  <1>     push rdx
    80 000001C6 31D2                <1>     xor edx, edx    ;Select COM1
    81 000001C8 4889EE              <1>     mov rsi, rbp
    82                              <1> .getChar:
    83 000001CB AC                  <1>     lodsb
    84 000001CC 84C0                <1>     test al, al
    85 000001CE 7406                <1>     jz .exit
    86 000001D0 B401                <1>     mov ah, 01h
    87 000001D2 CD34                <1>     int 34h
    88 000001D4 EBF5                <1>     jmp short .getChar
    89                              <1> .exit:
    90 000001D6 5A                  <1>     pop rdx
    91 000001D7 58                  <1>     pop rax
    92 000001D8 5E                  <1>     pop rsi
    93 000001D9 C3                  <1>     ret
    94                              <1> 
    95                              <1> debPrintDOSStack:
    96                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    97                              <1> ;Shows me which function, and parameters passed and returned
    98 000001DA 488D2DA5010000      <1>     lea rbp, .a1
    99 000001E1 E8DDFFFFFF          <1>     call debPrintNullString
   100 000001E6 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   101 000001ED 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   102 000001F4 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   103 000001F7 E802030000          <1>     call overlayQword
   104 000001FC 4881C316000000      <1>     add rbx, 22
   105 00000203 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   106 00000207 E8F2020000          <1>     call overlayQword
   107 0000020C 4881C316000000      <1>     add rbx, 22
   108 00000213 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   109 00000217 E8E2020000          <1>     call overlayQword
   110 0000021C 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   111 00000223 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   112 00000227 E8D2020000          <1>     call overlayQword
   113 0000022C 4881C316000000      <1>     add rbx, 22 
   114 00000233 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   115 00000237 E8C2020000          <1>     call overlayQword
   116 0000023C 4881C316000000      <1>     add rbx, 22
   117 00000243 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   118 00000247 E8B2020000          <1>     call overlayQword
   119 0000024C 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   120 00000253 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   121 00000257 E8A2020000          <1>     call overlayQword
   122 0000025C 4881C316000000      <1>     add rbx, 22
   123 00000263 488B05(D3C30300)    <1>     mov rax, qword [oldRSP]
   124 0000026A 480560000000        <1>     add rax, callerFrame_size
   125 00000270 E889020000          <1>     call overlayQword
   126 00000275 4881C316000000      <1>     add rbx, 22
   127 0000027C 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   128 00000280 E879020000          <1>     call overlayQword
   129 00000285 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   130 0000028C 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   131 00000290 E869020000          <1>     call overlayQword
   132 00000295 488D2D06000000      <1>     lea rbp, .a0
   133 0000029C E822FFFFFF          <1>     call debPrintNullString
   134 000002A1 C3                  <1>     ret
   135                              <1> 
   136 000002A2 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   136 000002AB 303030303030303030- <1>
   136 000002B4 30306820            <1>
   137 000002B8 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   137 000002C1 303030303030303030- <1>
   137 000002CA 30306820            <1>
   138 000002CE 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   138 000002D7 303030303030303030- <1>
   138 000002E0 30306820            <1>
   139 000002E4 0A0D                <1>     db  0Ah,0Dh
   140 000002E6 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   140 000002EF 303030303030303030- <1>
   140 000002F8 30306820            <1>
   141 000002FC 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   141 00000305 303030303030303030- <1>
   141 0000030E 30306820            <1>
   142 00000312 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   142 0000031B 303030303030303030- <1>
   142 00000324 30306820            <1>
   143 00000328 0A0D                <1>     db 0Ah, 0Dh
   144 0000032A 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   144 00000333 303030303030303030- <1>
   144 0000033C 30306820            <1>
   145 00000340 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   145 00000349 303030303030303030- <1>
   145 00000352 30306820            <1>
   146 00000356 7269703D3030303030- <1>     db "rip=0000000000000000h"
   146 0000035F 303030303030303030- <1>
   146 00000368 303068              <1>
   147 0000036B 0A0D                <1>     db 0Ah, 0Dh
   148 0000036D 666C673D3030303030- <1>     db "flg=0000000000000000h "
   148 00000376 303030303030303030- <1>
   148 0000037F 30306820            <1>
   149 00000383 0A0D00              <1>     db 0Ah,0Dh,0
   150 00000386 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   150 0000038F 206F6E20496E742034- <1>
   150 00000398 316820737461636B0A- <1>
   150 000003A1 0D00                <1>
   151                              <1> 
   152                              <1> debDPBptr:
   153                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   154 000003A3 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   155 000003AA 4889E8              <1>     mov rax, rbp
   156 000003AD E84C010000          <1>     call overlayQword
   157 000003B2 488D2D06000000      <1>     lea rbp, .dpb
   158 000003B9 E805FEFFFF          <1>     call debPrintNullString
   159 000003BE C3                  <1>     ret
   160                              <1> .dpb: 
   161 000003BF 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   161 000003C8 203030303030303030- <1>
   161 000003D1 303030303030303068- <1>
   161 000003DA 200A0D00            <1>
   162                              <1> 
   163                              <1> debDPBBPBptr:
   164                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   165                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   166 000003DE 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   167 000003E5 4889E8              <1>     mov rax, rbp
   168 000003E8 E811010000          <1>     call overlayQword
   169 000003ED 4881C321000000      <1>     add rbx, 33
   170 000003F4 4889F0              <1>     mov rax, rsi
   171 000003F7 E802010000          <1>     call overlayQword
   172 000003FC 488D2D06000000      <1>     lea rbp, .dpb
   173 00000403 E8BBFDFFFF          <1>     call debPrintNullString
   174 00000408 C3                  <1>     ret
   175                              <1> .dpb: 
   176 00000409 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   176 00000412 203030303030303030- <1>
   176 0000041B 303030303030303068- <1>
   176 00000424 2066726F6D20        <1>
   177 0000042A 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   177 00000433 203030303030303030- <1>
   177 0000043C 303030303030303068- <1>
   177 00000445 200A0D00            <1>
   178                              <1> overlayByte:
   179                              <1>     ;Called with number in rax
   180                              <1>     ;pointer to START of 16 byte space for number in rbx
   181 00000449 53                  <1>     push rbx
   182 0000044A 51                  <1>     push rcx
   183 0000044B 52                  <1>     push rdx
   184 0000044C 55                  <1>     push rbp
   185 0000044D 4889DD              <1>     mov rbp, rbx
   186 00000450 4889C2              <1>     mov rdx, rax
   187 00000453 48FFC5              <1>     inc rbp ;Go to end of number
   188                              <1> 
   189 00000456 488D1D9BFCFFFF      <1>     lea rbx, debascii
   190 0000045D 88D0                <1>     mov al, dl  ;Go low nybble first
   191 0000045F 240F                <1>     and al, 0Fh
   192 00000461 D7                  <1>     xlatb
   193 00000462 884500              <1>     mov byte [rbp], al
   194 00000465 48FFCD              <1>     dec rbp ;Go down one char pos
   195 00000468 88D0                <1>     mov al, dl
   196 0000046A 24F0                <1>     and al, 0F0h    ;Hi nybble next
   197 0000046C C0E804              <1>     shr al, 4   ;Shift hi nybble low
   198 0000046F D7                  <1>     xlatb
   199 00000470 884500              <1>     mov byte [rbp], al  ;Store char
   200                              <1> 
   201 00000473 5D                  <1>     pop rbp
   202 00000474 5A                  <1>     pop rdx
   203 00000475 59                  <1>     pop rcx
   204 00000476 5B                  <1>     pop rbx
   205 00000477 C3                  <1>     ret
   206                              <1> 
   207                              <1> overlayWord:
   208                              <1>     ;Called with number in rax
   209                              <1>     ;pointer to START of 16 byte space for number in rbx
   210 00000478 53                  <1>     push rbx
   211 00000479 51                  <1>     push rcx
   212 0000047A 52                  <1>     push rdx
   213 0000047B 55                  <1>     push rbp
   214 0000047C 4889DD              <1>     mov rbp, rbx
   215 0000047F 4889C2              <1>     mov rdx, rax
   216 00000482 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   217 00000489 B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   218 0000048E 488D1D63FCFFFF      <1>     lea rbx, debascii
   219                              <1> .ow0:
   220 00000495 88D0                <1>     mov al, dl  ;Go low nybble first
   221 00000497 240F                <1>     and al, 0Fh
   222 00000499 D7                  <1>     xlatb
   223 0000049A 884500              <1>     mov byte [rbp], al
   224 0000049D 48FFCD              <1>     dec rbp ;Go down one char pos
   225 000004A0 88D0                <1>     mov al, dl
   226 000004A2 24F0                <1>     and al, 0F0h    ;Hi nybble next
   227 000004A4 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   228 000004A7 D7                  <1>     xlatb
   229 000004A8 884500              <1>     mov byte [rbp], al  ;Store char
   230 000004AB 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   231 000004AF 48FFCD              <1>     dec rbp
   232 000004B2 FFC9                <1>     dec ecx
   233 000004B4 75DF                <1>     jnz .ow0
   234 000004B6 5D                  <1>     pop rbp
   235 000004B7 5A                  <1>     pop rdx
   236 000004B8 59                  <1>     pop rcx
   237 000004B9 5B                  <1>     pop rbx
   238 000004BA C3                  <1>     ret
   239                              <1> 
   240                              <1> overlayDword:
   241                              <1>     ;Called with number in rax
   242                              <1>     ;pointer to START of 16 byte space for number in rbx
   243 000004BB 53                  <1>     push rbx
   244 000004BC 51                  <1>     push rcx
   245 000004BD 52                  <1>     push rdx
   246 000004BE 55                  <1>     push rbp
   247 000004BF 4889DD              <1>     mov rbp, rbx
   248 000004C2 4889C2              <1>     mov rdx, rax
   249 000004C5 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   250 000004CC B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   251 000004D1 488D1D20FCFFFF      <1>     lea rbx, debascii
   252                              <1> .od0:
   253 000004D8 88D0                <1>     mov al, dl  ;Go low nybble first
   254 000004DA 240F                <1>     and al, 0Fh
   255 000004DC D7                  <1>     xlatb
   256 000004DD 884500              <1>     mov byte [rbp], al
   257 000004E0 48FFCD              <1>     dec rbp ;Go down one char pos
   258 000004E3 88D0                <1>     mov al, dl
   259 000004E5 24F0                <1>     and al, 0F0h    ;Hi nybble next
   260 000004E7 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   261 000004EA D7                  <1>     xlatb
   262 000004EB 884500              <1>     mov byte [rbp], al  ;Store char
   263 000004EE 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   264 000004F2 48FFCD              <1>     dec rbp
   265 000004F5 FFC9                <1>     dec ecx
   266 000004F7 75DF                <1>     jnz .od0
   267 000004F9 5D                  <1>     pop rbp
   268 000004FA 5A                  <1>     pop rdx
   269 000004FB 59                  <1>     pop rcx
   270 000004FC 5B                  <1>     pop rbx
   271 000004FD C3                  <1>     ret
   272                              <1> 
   273                              <1> overlayQword:
   274                              <1>     ;Called with number in rax
   275                              <1>     ;pointer to START of 16 byte space for number in rbx
   276 000004FE 53                  <1>     push rbx
   277 000004FF 51                  <1>     push rcx
   278 00000500 52                  <1>     push rdx
   279 00000501 55                  <1>     push rbp
   280 00000502 4889DD              <1>     mov rbp, rbx
   281 00000505 4889C2              <1>     mov rdx, rax
   282 00000508 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   283 0000050F B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   284 00000514 488D1DDDFBFFFF      <1>     lea rbx, debascii
   285                              <1> .oq0:
   286 0000051B 88D0                <1>     mov al, dl  ;Go low nybble first
   287 0000051D 240F                <1>     and al, 0Fh
   288 0000051F D7                  <1>     xlatb
   289 00000520 884500              <1>     mov byte [rbp], al
   290 00000523 48FFCD              <1>     dec rbp ;Go down one char pos
   291 00000526 88D0                <1>     mov al, dl
   292 00000528 24F0                <1>     and al, 0F0h    ;Hi nybble next
   293 0000052A C0E804              <1>     shr al, 4   ;Shift hi nybble low
   294 0000052D D7                  <1>     xlatb
   295 0000052E 884500              <1>     mov byte [rbp], al  ;Store char
   296 00000531 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   297 00000535 48FFCD              <1>     dec rbp
   298 00000538 FFC9                <1>     dec ecx
   299 0000053A 75DF                <1>     jnz .oq0
   300 0000053C 5D                  <1>     pop rbp
   301 0000053D 5A                  <1>     pop rdx
   302 0000053E 59                  <1>     pop rcx
   303 0000053F 5B                  <1>     pop rbx
   304 00000540 C3                  <1>     ret
   305                              <1> 
   306                              <1> debPrintFunctionName:
   307                              <1> ;Prints the DOS function that has been entered
   308                              <1> ;Entered with ah = Function number
   309 00000541 88E0                <1>     mov al, ah  ;Get dos function number
   310 00000543 488D1DAEFBFFFF      <1>     lea rbx, debascii
   311 0000054A 488D1535000000      <1>     lea rdx, .number
   312 00000551 24F0                <1>     and al, 0F0h    ;Get high nybble first
   313 00000553 C0E804              <1>     shr al, 4
   314 00000556 D7                  <1>     xlatb
   315 00000557 8802                <1>     mov byte [rdx], al
   316 00000559 88E0                <1>     mov al, ah
   317 0000055B 240F                <1>     and al, 0Fh
   318 0000055D D7                  <1>     xlatb
   319 0000055E 884201              <1>     mov byte [rdx + 1], al
   320 00000561 488D2D06000000      <1>     lea rbp, .dosString
   321 00000568 E856FCFFFF          <1>     call debPrintNullString
   322 0000056D C3                  <1>     ret
   323 0000056E 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   323 00000577 696F6E20496E742034- <1>
   323 00000580 31682F41483D        <1>
   324 00000586 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   325                              <1> 
   326                              <1> ;----------------:
   327                              <1> ;!!!! MACROS !!!!:
   328                              <1> ;----------------:
   329                              <1> ;Insert macro when entering a debug block
   330                              <1> %macro debugEnterM 0
   331                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   332                              <1>     mov rsp, debStackTop
   333                              <1> ;Push all registers except rsp on stack
   334                              <1>     push rax
   335                              <1>     push rbx
   336                              <1>     push rcx
   337                              <1>     push rdx
   338                              <1>     push rsi
   339                              <1>     push rdi
   340                              <1>     push rbp
   341                              <1>     push r8
   342                              <1>     push r9
   343                              <1>     push r10
   344                              <1>     push r11
   345                              <1>     push r12
   346                              <1>     push r13
   347                              <1>     push r14
   348                              <1>     push r15
   349                              <1>     pushfq
   350                              <1> %endmacro
   351                              <1> ;Insert macro when exiting a debug block
   352                              <1> %macro debugExitM 0
   353                              <1>     popfq
   354                              <1>     pop r15
   355                              <1>     pop r14
   356                              <1>     pop r13
   357                              <1>     pop r12
   358                              <1>     pop r11
   359                              <1>     pop r10
   360                              <1>     pop r9
   361                              <1>     pop r8
   362                              <1>     pop rbp
   363                              <1>     pop rdi
   364                              <1>     pop rsi
   365                              <1>     pop rdx
   366                              <1>     pop rcx
   367                              <1>     pop rbx
   368                              <1>     pop rax
   369                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   370                              <1> %endmacro
    21                                  %include "./Source/Kernel/FAT/bufferFunctions.asm"
    22                              <1> ;This file contains FAT disk buffer related functions that
    23                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    24                              <1> ;----------------------------------------------------
    25                              <1> ;           Externally referenced functions         :
    26                              <1> ;----------------------------------------------------
    27                              <1> 
    28                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    29                              <1> ;Sets the buffer in rdi to the head of the chain
    30                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    31                              <1> ;Output: Buffer header set to the head of the chain
    32 0000058C 48393D(4EC00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    33 00000593 7428                <1>     je .exit
    34 00000595 56                  <1>     push rsi
    35 00000596 488B35(4EC00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    36                              <1> .mainlp:
    37 0000059D 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    38 000005A0 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    39 000005A2 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    40 000005A5 EBF6                <1>     jmp short .mainlp
    41                              <1> .fnd:
    42 000005A7 57                  <1>     push rdi
    43 000005A8 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    44 000005AB 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    45 000005AE 5F                  <1>     pop rdi ;Get original buf back
    46 000005AF 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    47 000005B2 488735(4EC00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    48 000005B9 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    49 000005BC 5E                  <1>     pop rsi
    50                              <1> .exit:
    51 000005BD C3                  <1>     ret
    52                              <1> 
    53                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h
    54 000005BE E846000000          <1>     call flushBuffer
    55 000005C3 7306                <1>     jnc .exit
    56                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    57 000005C5 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    58                              <1> .exit:
    59 000005CB C3                  <1>     ret
    60                              <1> 
    61                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    62                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    63                              <1> ;Output: rdi = First disk buffer
    64 000005CC 488B3D(4EC00300)    <1>     mov rdi, [bufHeadPtr]
    65 000005D3 57                  <1>     push rdi
    66                              <1> .lp:
    67 000005D4 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    68 000005D8 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    69 000005DB 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    70 000005E2 75F0                <1>     jne .lp
    71 000005E4 5F                  <1>     pop rdi
    72 000005E5 C3                  <1>     ret
    73                              <1> 
    74                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    75                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    76                              <1> ; second buffer in the chain in rdi
    77                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    78                              <1> ;Output: rdi = Second buffer in the chain
    79 000005E6 E8A1FFFFFF          <1>     call makeBufferMostRecentlyUsed
    80 000005EB 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
    81 000005F2 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    82 000005F5 C3                  <1>     ret
    83                              <1> 
    84                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    85                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    86                              <1> ;Input: rdi = Buffer header to start searching at
    87                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    88                              <1> ;        ZF=ZE => No unreferenced buffer found
    89 000005F6 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    90 000005FA 750C                <1>     jnz .exit
    91 000005FC 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    92 000005FF 4881FFFFFFFFFF      <1>     cmp rdi, -1
    93 00000606 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    94                              <1> .exit:
    95 00000608 C3                  <1>     ret
    96                              <1> 
    97                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
    98                              <1> ;Flushes the data in a sector buffer to disk!
    99                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   100                              <1> ;Exit:  CF=NC : Success
   101                              <1> ;       CF=CY : Fail, terminate the request
   102                              <1> ;First make request to device driver
   103 00000609 50                  <1>     push rax
   104 0000060A 53                  <1>     push rbx
   105 0000060B 51                  <1>     push rcx
   106 0000060C 52                  <1>     push rdx
   107 0000060D 56                  <1>     push rsi
   108 0000060E 55                  <1>     push rbp
   109 0000060F F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   110 00000613 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   111                              <1> .fbRequest0:
   112 00000615 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   113 0000061A F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   114 0000061E 7406                <1>     jz .fbRequest1
   115 00000620 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   116                              <1> .fbRequest1:
   117 00000626 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   118 00000629 B901000000          <1>     mov ecx, 1  ;One sector to copy
   119 0000062E 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   120 00000632 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   121 00000636 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   122 0000063A E824140000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   123 0000063F E89C120000          <1>     call absDiskDriverCall    ;Make Driver Request
   124 00000644 7525                <1>     jnz .fbFail
   125                              <1> ;Now check if the buffer was a FAT, to write additional copies
   126 00000646 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   127 0000064A 7417                <1>     jz .fbFreeExit  ;If not, exit
   128 0000064C FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   129 0000064F 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   130 00000651 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   131 00000654 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   132 00000658 E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   133                              <1> .fbFreeExit1:
   134 0000065D 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   135 00000660 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   136                              <1> .fbFreeExit:
   137 00000663 F8                  <1>     clc
   138                              <1> .fbExitFail:
   139 00000664 5D                  <1>     pop rbp
   140 00000665 5E                  <1>     pop rsi
   141 00000666 5A                  <1>     pop rdx
   142 00000667 59                  <1>     pop rcx
   143 00000668 5B                  <1>     pop rbx
   144 00000669 58                  <1>     pop rax
   145 0000066A C3                  <1>     ret
   146                              <1> .fbFail:
   147                              <1> ;Enter here only if the request failed
   148 0000066B FFCE                <1>     dec esi
   149 0000066D 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   150                              <1> ;Request failed thrice, critical error call
   151 0000066F 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   152 00000676 48892D(21C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   153 0000067D 89C7                <1>     mov edi, eax    ;Save status word in di
   154 0000067F 48892D(21C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   155 00000686 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   156 00000689 B419                <1>     mov ah, critWrite | critFailOK | critRetryOK ;Set bits
   157                              <1>     ;Test for correct buffer data type
   158 0000068B F6C401              <1>     test ah, dosBuffer
   159 0000068E 7505                <1>     jnz .fbFail0
   160 00000690 80CC00              <1>     or ah, critDOS
   161 00000693 EB14                <1>     jmp short .fbFailMain
   162                              <1> .fbFail0:
   163 00000695 F6C402              <1>     test ah, fatBuffer
   164 00000698 7504                <1>     jnz .fbFail1
   165 0000069A B402                <1>     mov ah, critFAT
   166 0000069C EB0B                <1>     jmp short .fbFailMain
   167                              <1> .fbFail1:
   168 0000069E F6C404              <1>     test ah, dirBuffer
   169 000006A1 7504                <1>     jnz .fbFail2
   170 000006A3 B404                <1>     mov ah, critDir
   171 000006A5 EB02                <1>     jmp short .fbFailMain
   172                              <1> .fbFail2:
   173                              <1> ;Here it must be a data buffer
   174 000006A7 B406                <1>     mov ah, critData
   175                              <1> .fbFailMain:
   176 000006A9 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   177 000006AF 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   178 000006B3 E833100000          <1>     call criticalDOSError   ;Return in al the return code
   179 000006B8 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   180 000006BF 488B2D(21C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   181 000006C6 3C01                <1>     cmp al, critRetry
   182 000006C8 0F8447FFFFFF        <1>     je .fbRequest0
   183                              <1>     ;Else we fail (Ignore=Fail here)
   184 000006CE 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   184 000006D6 00                  <1>
   185 000006D7 F9                  <1>     stc ;Set error flag to indicate fail
   186 000006D8 E987FFFFFF          <1>     jmp .fbExitFail
   187                              <1> 
   188                              <1> 
   189                              <1> testDirtyBufferForDrive:    ;External linkage
   190                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   191                              <1> ;Input: al = Drive number (0 based)
   192                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   193                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   194 000006DD 53                  <1>     push rbx
   195 000006DE 488B1D(4EC00300)    <1>     mov rbx, qword [bufHeadPtr]
   196                              <1> .tdbfdCheckBuffer:
   197 000006E5 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   198 000006E8 7509                <1>     jne .tdbfdGotoNextBuffer
   199 000006EA F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   200 000006EE 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   201 000006F0 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   202                              <1> .tdbfdExit:
   203 000006F1 5B                  <1>     pop rbx
   204 000006F2 C3                  <1>     ret
   205                              <1> .tdbfdGotoNextBuffer:
   206 000006F3 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   207 000006F6 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   208 000006FD 74F2                <1>     je .tdbfdExit
   209 000006FF EBE4                <1>     jmp short .tdbfdCheckBuffer
   210                              <1> 
   211                              <1> freeBuffersForDPB:
   212                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   213                              <1> ; to have a drive number of -1, thus freeing it
   214                              <1> ;Given DPB is in rbp
   215 00000701 53                  <1>     push rbx
   216 00000702 488B1D(4EC00300)    <1>     mov rbx, qword [bufHeadPtr]
   217                              <1> .i0:
   218 00000709 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   219 0000070D 7506                <1>     jne .i1 ;If no, skip freeing
   220 0000070F 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   221                              <1> .i1:
   222 00000715 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   223 00000718 4881FBFFFFFFFF      <1>     cmp rbx, -1
   224 0000071F 75E8                <1>     jne .i0
   225                              <1> .exit:
   226 00000721 5B                  <1>     pop rbx
   227 00000722 C3                  <1>     ret
   228                              <1> 
   229                              <1> getBuffer: ;External Linkage (dosPrim.asm, fat.asm)
   230                              <1> ;
   231                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   232                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   233                              <1> ;Flushes if not in disk change mode. 
   234                              <1> ;If in disk change mode, will check to see if the selected buffer 
   235                              <1> ; has data referring a device using the same DPB as we are changing.
   236                              <1> ; If it is, skip flushing, if not, flush first!
   237                              <1> ;
   238                              <1> ;This function will return a pointer to the desired data sector OR 
   239                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   240                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   241                              <1> ;Entry: rax = Sector to read
   242                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   243                              <1> ;       qword [workingDPB] = DPB to use for transaction
   244                              <1> ;Exit:  CF=NC => 
   245                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   246                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   247 00000723 51                  <1>     push rcx
   248 00000724 52                  <1>     push rdx
   249 00000725 56                  <1>     push rsi
   250 00000726 57                  <1>     push rdi
   251 00000727 488B35(50C50300)    <1>     mov rsi, qword [workingDPB]  ;Get DPB of transacting device
   252 0000072E 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   253 00000730 E865010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   254 00000735 4881FFFFFFFFFF      <1>     cmp rdi, -1
   255 0000073C 740D                <1>     je .rbReadNewSector
   256                              <1> .rbExit:
   257 0000073E F8                  <1>     clc
   258                              <1> .rbExitNoFlag:
   259 0000073F 5F                  <1>     pop rdi
   260 00000740 5E                  <1>     pop rsi
   261 00000741 5A                  <1>     pop rdx
   262 00000742 59                  <1>     pop rcx
   263 00000743 488B1D(D5C50300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   264 0000074A C3                  <1>     ret
   265                              <1> .rbReadNewSector:
   266 0000074B E8F3000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   267 00000750 803D(28D80300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   268 00000757 7506                <1>     jne .flush  ;We are not, flush buffer
   269 00000759 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   270 0000075D 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used
   271                              <1> .flush:
   272 0000075F E85AFEFFFF          <1>     call flushAndFreeBuffer
   273 00000764 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   274                              <1> .skipFlush:
   275                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   276 00000766 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   277 00000769 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
   278 0000076C 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   279 00000770 80F902              <1>     cmp cl, fatBuffer
   280 00000773 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   281 00000775 7503                <1>     jne .rbNonFATbuffer
   282 00000777 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   283                              <1> .rbNonFATbuffer:
   284 0000077A 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   285 0000077D 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   286 00000780 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   287 00000783 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   288 00000787 C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   289 0000078B E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   290 00000790 EBAD                <1>     jmp short .rbExitNoFlag
   291                              <1> 
   292                              <1> readSectorBuffer:   ;Internal Linkage
   293                              <1> ;Reads a sector into a built sector buffer
   294                              <1> ;Entry: rdi = Pointer to buffer header
   295                              <1> ;Exit:  CF=NC : Success
   296                              <1> ;       CF=CY : Fail, terminate the request
   297                              <1> ;       rbx pointing to buffer header
   298                              <1> ;First make request to device driver
   299 00000792 50                  <1>     push rax
   300 00000793 53                  <1>     push rbx
   301 00000794 51                  <1>     push rcx
   302 00000795 52                  <1>     push rdx
   303 00000796 56                  <1>     push rsi
   304 00000797 55                  <1>     push rbp
   305                              <1> .rsRequest0:
   306 00000798 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   307 0000079D F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   308 000007A1 7406                <1>     jz .rsRequest1
   309 000007A3 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   310                              <1> .rsRequest1:
   311 000007A9 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   312 000007AC B901000000          <1>     mov ecx, 1  ;One sector to copy
   313 000007B1 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   314 000007B5 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   315 000007B9 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   316 000007BD E8AC120000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   317 000007C2 E819110000          <1>     call absDiskDriverCall    ;Make Driver Request
   318 000007C7 7508                <1>     jnz .rsFail
   319                              <1> .rsExit:
   320 000007C9 F8                  <1>     clc
   321                              <1> .rsExitFail:
   322 000007CA 5D                  <1>     pop rbp
   323 000007CB 5E                  <1>     pop rsi
   324 000007CC 5A                  <1>     pop rdx
   325 000007CD 59                  <1>     pop rcx
   326 000007CE 5B                  <1>     pop rbx
   327 000007CF 58                  <1>     pop rax
   328 000007D0 C3                  <1>     ret
   329                              <1> .rsFail:
   330                              <1> ;Enter here only if the request failed
   331 000007D1 FFCE                <1>     dec esi
   332 000007D3 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   333                              <1> ;Request failed thrice, critical error call
   334 000007D5 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   335 000007DC 48892D(21C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   336 000007E3 89C7                <1>     mov edi, eax    ;Save status word in di
   337 000007E5 48892D(21C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   338 000007EC 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   339 000007EF B418                <1>     mov ah, critRead | critFailOK | critRetryOK ;Set bits
   340                              <1>     ;Test for correct buffer data type
   341 000007F1 F6C401              <1>     test ah, dosBuffer
   342 000007F4 7505                <1>     jnz .rsFail0
   343 000007F6 80CC00              <1>     or ah, critDOS
   344 000007F9 EB14                <1>     jmp short .rsFailMain
   345                              <1> .rsFail0:
   346 000007FB F6C402              <1>     test ah, fatBuffer
   347 000007FE 7504                <1>     jnz .rsFail1
   348 00000800 B402                <1>     mov ah, critFAT
   349 00000802 EB0B                <1>     jmp short .rsFailMain
   350                              <1> .rsFail1:
   351 00000804 F6C404              <1>     test ah, dirBuffer
   352 00000807 7504                <1>     jnz .rsFail2
   353 00000809 B404                <1>     mov ah, critDir
   354 0000080B EB02                <1>     jmp short .rsFailMain
   355                              <1> .rsFail2:
   356                              <1> ;Here it must be a data buffer
   357 0000080D B406                <1>     mov ah, critData
   358                              <1> .rsFailMain:
   359 0000080F 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   360 00000815 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   361 00000819 E8CD0E0000          <1>     call criticalDOSError
   362 0000081E 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   363 00000825 488B2D(21C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   364 0000082C 3C01                <1>     cmp al, critRetry
   365 0000082E 0F8464FFFFFF        <1>     je .rsRequest0
   366                              <1>     ;Else we fail (Ignore=Fail here)
   367 00000834 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   367 0000083C 00                  <1>
   368 0000083D F9                  <1>     stc ;Set error flag to indicate fail
   369 0000083E E987FFFFFF          <1>     jmp .rsExitFail
   370                              <1>     
   371                              <1> findLRUBuffer: ;Internal Linkage
   372                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   373                              <1> ; in rbx and the currBuff variable
   374                              <1> ;Input: Nothing
   375                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   376                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   377 00000843 52                  <1>     push rdx
   378 00000844 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   379 0000084B 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   380 0000084F 7436                <1>     je .flbExit 
   381 00000851 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   382 00000858 742D                <1>     je .flbExit
   383                              <1> .flbWalk:
   384 0000085A 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   385 0000085D 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   386 00000860 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   387 00000864 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   388 00000866 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   389 0000086D 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   390 0000086F 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   391                              <1> .flbHeadLink:
   392 00000876 488B15(4EC00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   393 0000087D 48893D(4EC00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   394 00000884 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   395                              <1> .flbExit:
   396 00000887 5A                  <1>     pop rdx
   397 00000888 48893D(D5C50300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   398 0000088F C3                  <1>     ret
   399                              <1> .flbFreeLink:
   400 00000890 51                  <1>     push rcx
   401 00000891 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   402 00000894 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   403 00000897 59                  <1>     pop rcx
   404 00000898 EBDC                <1>     jmp short .flbHeadLink
   405                              <1> 
   406                              <1> findSectorInBuffer:     ;Internal linkage
   407                              <1> ;Finds the Buffer for a sector
   408                              <1> ;If the sector is not in a buffer, returns with a -1
   409                              <1> ;Input: rax = Sector number
   410                              <1> ;        dl = Drive number
   411                              <1> ;Output: rdi = Buffer hdr pointer or -1
   412 0000089A 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   413                              <1> .fsiCheckBuffer:
   414 000008A1 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   415 000008A4 7507                <1>     jne .fsiGotoNextBuffer
   416 000008A6 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   417 000008AA 7501                <1>     jne .fsiGotoNextBuffer
   418                              <1> .fsiExit:
   419 000008AC C3                  <1>     ret
   420                              <1> .fsiGotoNextBuffer:
   421 000008AD 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   422 000008B0 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   423 000008B7 74F3                <1>     je .fsiExit
   424 000008B9 EBE6                <1>     jmp short .fsiCheckBuffer
    22                                  %include "./Source/Kernel/FAT/fat.asm"
    23                              <1> ;---------------------------------------------------:
    24                              <1> ;                   KERNEL FUNCTIONS                :
    25                              <1> ;---------------------------------------------------:
    26                              <1> makeDIR:           ;ah = 39h
    27                              <1> removeDIR:         ;ah = 3Ah
    28                              <1> setCurrentDIR:     ;ah = 3Bh, set dir for current drive (or drive in path)
    29                              <1> getCurrentDIR:     ;ah = 47h
    30                              <1> getSetFileDateTime:;ah = 57h
    31                              <1> trueName:          ;ah = 60h, get fully qualified name
    32 000008BB C3                  <1>     ret
    33                              <1> 
    34                              <1> 
    35                              <1> ;-----------------------------------:
    36                              <1> ;       File System routines        :
    37                              <1> ;-----------------------------------:
    38                              <1> getFATtype:
    39                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    40                              <1> ;Entry: rbp = DPB to ascertain FAT
    41                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    42 000008BC 53                  <1>     push rbx
    43 000008BD 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    44 000008C0 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    45 000008C5 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    46 000008CB 730F                <1>     jae .exit
    47 000008CD FFC9                <1>     dec ecx     ;FAT 12 marker
    48 000008CF 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    49 000008D5 7205                <1>     jb .exit
    50 000008D7 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    51                              <1> .exit:
    52 000008DC 5B                  <1>     pop rbx
    53 000008DD C3                  <1>     ret
    54                              <1> 
    55                              <1> clust2FATEntry:
    56                              <1> ;Converts a cluster number to a offset in the FAT
    57                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    58                              <1> ;        eax = Cluster number to look for
    59                              <1> ;Exit:   eax = Sector on disk of FAT 
    60                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    61                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    62 000008DE 53                  <1>     push rbx
    63 000008DF 55                  <1>     push rbp
    64 000008E0 488B2D(50C50300)    <1>     mov rbp, qword [workingDPB]
    65 000008E7 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    66 000008EA 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    67 000008F0 731E                <1>     jae .fat32
    68 000008F2 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    69 000008F8 7209                <1>     jb .fat12
    70                              <1> ;FAT16
    71 000008FA D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    72 000008FC 6801000000          <1>     push qword 1
    73 00000901 EB15                <1>     jmp short .common
    74                              <1> .fat12:
    75 00000903 89C1                <1>     mov ecx, eax    ;ecx = eax
    76 00000905 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    77 00000907 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    78 00000909 6800000000          <1>     push qword 0
    79 0000090E EB08                <1>     jmp short .common
    80                              <1> .fat32:
    81 00000910 6802000000          <1>     push qword 2
    82 00000915 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    83                              <1> .common:
    84                              <1> ;eax has the FAToffset
    85 00000918 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    86 0000091C 31D2                <1>     xor edx, edx    ;edx = 0
    87 0000091E F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    88 00000920 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    89 00000924 01D8                <1>     add eax, ebx
    90 00000926 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    91 00000927 5D                  <1>     pop rbp
    92 00000928 5B                  <1>     pop rbx
    93 00000929 C3                  <1>     ret
    94                              <1> 
    95                              <1> getStartSectorOfCluster:
    96                              <1> ;Input: eax = Cluster Number
    97                              <1> ;       rbp = dpb pointer
    98                              <1> ;Output: rax = Starting Sector number for cluster
    99                              <1> ;Gives the data sector we are at in the current cluster
   100                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
   101 0000092A 51                  <1>     push rcx
   102 0000092B 09C0                <1>     or eax, eax ;Zero upper dword
   103 0000092D 482D02000000        <1>     sub rax, 2
   104 00000933 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   105 00000936 48D3E0              <1>     shl rax, cl
   106 00000939 31C9                <1>     xor ecx, ecx
   107 0000093B 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
   108 0000093E 4801C8              <1>     add rax, rcx
   109                              <1>     ;rax now has the first sector of the current cluster
   110 00000941 59                  <1>     pop rcx
   111 00000942 C3                  <1>     ret
   112                              <1> 
   113                              <1> findFreeCluster:
   114                              <1> ;Walks the FAT to find a free cluster and returns the 
   115                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   116                              <1> ;Works on the workingDPB
   117                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   118 00000943 53                  <1>     push rbx
   119 00000944 51                  <1>     push rcx
   120 00000945 52                  <1>     push rdx
   121 00000946 57                  <1>     push rdi
   122 00000947 55                  <1>     push rbp
   123 00000948 488B2D(50C50300)    <1>     mov rbp, qword [workingDPB]
   124 0000094F 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   125 00000953 488905(DDC50300)    <1>     mov qword [tempSect], rax   ;Save the sector number temporarily
   126                              <1> ;Use ebp as sector counter
   127 0000095A 8B5513              <1>     mov edx, dword [rbp + dpb.dFATlength]
   128                              <1> ;Get Sector Size in bytes in ebx
   129 0000095D 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
   130                              <1> ;Get FAT type
   131 00000961 E856FFFFFF          <1>     call getFATtype ;Gets FAT type (for number of elements in sector)
   132 00000966 0F84B6000000        <1>     jz .fat12
   133 0000096C F6C101              <1>     test cl, 1
   134 0000096F 7571                <1>     jnz .fat16
   135                              <1> ;FAT32 proceeds here
   136 00000971 C1EB02              <1>     shr ebx, 2  ;Divide by 4 to get number of FAT entries in a sector buffer
   137 00000974 66891D(E5C50300)    <1>     mov word [entries], bx
   138                              <1> .fat32Search:
   139 0000097B B102                <1>     mov cl, fatBuffer
   140 0000097D 488B05(DDC50300)    <1>     mov rax, qword [tempSect]
   141 00000984 E89AFDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   142 00000989 724A                <1>     jc .exitFail
   143 0000098B 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   144 0000098F 31C0                <1>     xor eax, eax
   145 00000991 0FB70D(E5C50300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   146 00000998 F2AF                <1>     repne scasd ;Look for the zero dword 
   147 0000099A 740D                <1>     je .fat32Found  ;If found, report cluster number (offset into FAT)
   148 0000099C FFCA                <1>     dec edx ;Dec number of sectors left to search
   149 0000099E 743B                <1>     jz .noFreeClusters
   150 000009A0 48FF05(DDC50300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   151 000009A7 EBD2                <1>     jmp short .fat32Search
   152                              <1> .fat32Found:
   153 000009A9 81EF04000000        <1>     sub edi, 4  ;edi is one dword past the entry
   154                              <1> .computeEntry:
   155 000009AF 480FB74D06          <1>     movzx rcx, word [rbp + dpb.wFAToffset] ;Get start sector number of FAT 
   156 000009B4 488B05(DDC50300)    <1>     mov rax, qword [tempSect]   ;Get disk sector number of FAT into rax
   157 000009BB 4829C8              <1>     sub rax, rcx   ;Get Offset into FAT in rax
   158 000009BE 0FB70D(E5C50300)    <1>     movzx ecx, word [entries] ;Get number of entries in a FAT sector
   159 000009C5 52                  <1>     push rdx
   160 000009C6 48F7E1              <1>     mul rcx ;Multiply rax with rcx (technically eax with ecx)
   161 000009C9 5A                  <1>     pop rdx
   162                              <1> ;rbx points to current buffer header
   163 000009CA 488D5320            <1>     lea rdx, qword [rbx + bufferHdr.dataarea]
   164 000009CE 4829D7              <1>     sub rdi, rdx
   165 000009D1 4801F8              <1>     add rax, rdi    ;Add the offset into the sector to rax to get cluster number
   166                              <1> .exit:
   167 000009D4 F8                  <1>     clc
   168                              <1> .exitFail:      ;Keep carry flag
   169 000009D5 5D                  <1>     pop rbp
   170 000009D6 5F                  <1>     pop rdi
   171 000009D7 5A                  <1>     pop rdx
   172 000009D8 59                  <1>     pop rcx
   173 000009D9 5B                  <1>     pop rbx
   174 000009DA C3                  <1>     ret
   175                              <1> .noFreeClusters:
   176 000009DB B8FFFFFFFF          <1>     mov eax, -1 ;No free cluster marker
   177 000009E0 EBF2                <1>     jmp short .exit
   178                              <1> .fat16:
   179 000009E2 D1EB                <1>     shr ebx, 1  ;Divide by 2 to get number of FAT entries in a sector buffer
   180 000009E4 66891D(E5C50300)    <1>     mov word [entries], bx
   181                              <1> .fat16Search:
   182 000009EB B102                <1>     mov cl, fatBuffer
   183 000009ED 488B05(DDC50300)    <1>     mov rax, qword [tempSect]
   184 000009F4 E82AFDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   185 000009F9 72DA                <1>     jc .exitFail
   186 000009FB 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   187 000009FF 31C0                <1>     xor eax, eax
   188 00000A01 0FB70D(E5C50300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   189 00000A08 F266AF              <1>     repne scasw ;Look for the zero word 
   190 00000A0B 740D                <1>     je .fat16Found  ;If found, report cluster number (offset into FAT)
   191 00000A0D FFCA                <1>     dec edx ;Dec number of sectors left to search
   192 00000A0F 74CA                <1>     jz .noFreeClusters
   193 00000A11 48FF05(DDC50300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   194 00000A18 EBD1                <1>     jmp short .fat16Search
   195                              <1> .fat16Found:
   196 00000A1A 81EF02000000        <1>     sub edi, 2  ;edi is one word past the entry
   197 00000A20 EB8D                <1>     jmp short .computeEntry
   198                              <1> .fat12:
   199 00000A22 89D8                <1>     mov eax, ebx    ;Get sectorsize in ax
   200 00000A24 D1E0                <1>     shl eax, 1  ;Multiply by 2
   201 00000A26 B903000000          <1>     mov ecx, 3  ;1.5 bytes per FAT entry *2
   202 00000A2B 52                  <1>     push rdx    ;Preserve number of sectors in FAT counter
   203 00000A2C 31D2                <1>     xor edx, edx
   204 00000A2E F7F1                <1>     div ecx
   205 00000A30 5A                  <1>     pop rdx
   206 00000A31 668905(E5C50300)    <1>     mov word [entries], ax ;Get quotient (number of whole entries in sector) 
   207                              <1>     ;The value is rounded down so we can read the next sector for the 
   208                              <1>     ;last entry manually (thus buffering it if it not already buffered)
   209 00000A38 B102                <1>     mov cl, fatBuffer
   210 00000A3A 488B05(DDC50300)    <1>     mov rax, qword [tempSect]
   211 00000A41 E8DDFCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   212 00000A46 728D                <1>     jc .exitFail
   213 00000A48 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   214                              <1> .fat12SearchNewSector:
   215 00000A4C 0FB70D(E5C50300)    <1>     movzx ecx, word [entries]   ;This is total entries in Sector rounded down
   216                              <1> .fat12Search:
   217 00000A53 0FB707              <1>     movzx eax, word [rdi]   ;Get first word (EVEN ENTRY)
   218 00000A56 25FF0F0000          <1>     and eax, 0FFFh   ;Clear upper nybble
   219 00000A5B 744A                <1>     jz .fat12EntryFound
   220 00000A5D 48FFC7              <1>     inc rdi ;Goto next byte
   221 00000A60 FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   222 00000A62 0FB707              <1>     movzx eax, word [rdi]  ;Get second word (ODD ENTRY)
   223 00000A65 C1E804              <1>     shr eax, 4  ;Shift down by 4
   224 00000A68 743D                <1>     jz .fat12EntryFound
   225 00000A6A 48FFC7              <1>     inc rdi ;Goto next entry
   226 00000A6D FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   227 00000A6F 75E2                <1>     jnz .fat12Search
   228                              <1> ;We arrive here when we are at the last entry in the sector
   229 00000A71 48FF05(DDC50300)    <1>     inc qword [tempSect]    ;Get next Sector
   230 00000A78 488B05(DDC50300)    <1>     mov rax, qword [tempSect]   ;Get this sector in rax
   231 00000A7F B102                <1>     mov cl, fatBuffer
   232 00000A81 E89DFCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   233 00000A86 0F8249FFFFFF        <1>     jc .exitFail
   234 00000A8C 0FB607              <1>     movzx eax, byte [rdi]  ;Get last byte in old buffer (rdi still points there)
   235 00000A8F 488D4B20            <1>     lea rcx, qword [rbx + bufferHdr.dataarea]   ;Go to data area (preserve rdi)
   236 00000A93 8A21                <1>     mov ah, byte [rcx]  ;Get first byte in new sector
   237 00000A95 C1E804              <1>     shr eax, 4  ;Clear out bottom nybble
   238 00000A98 740D                <1>     jz .fat12EntryFound ;Found a sector!
   239                              <1>     ;Empty cluster not found in sector
   240 00000A9A FFCA                <1>     dec edx ;Decrement sector count
   241 00000A9C 0F8439FFFFFF        <1>     jz .noFreeClusters
   242 00000AA2 4889CF              <1>     mov rdi, rcx    ;Set rdi to point at start of next sector
   243 00000AA5 EBA5                <1>     jmp short .fat12SearchNewSector ;Reload the number of entries and search
   244                              <1> .fat12EntryFound:
   245 00000AA7 E903FFFFFF          <1>     jmp .computeEntry   ;Unnecessary redirection
   246                              <1> 
   247                              <1> getDataSector:
   248                              <1> ;This function will request the sector of data in [currSectD].
   249                              <1> ;This call can only be used for DATA sectors.
   250                              <1> ;Preserves all registers
   251                              <1> ;On ret: CF=NC => currBuff = Buffer with data
   252                              <1> ;        CF=CY => Critical error occurred and was FAILed
   253 00000AAC 50                  <1>     push rax
   254 00000AAD 53                  <1>     push rbx
   255 00000AAE 51                  <1>     push rcx
   256 00000AAF 488B05(F5C50300)    <1>     mov rax, qword [currSectD]  ;Get the disk sector number to read
   257 00000AB6 BB01000000          <1>     mov ebx, dosBuffer
   258 00000ABB B908000000          <1>     mov ecx, dataBuffer 
   259 00000AC0 4885C0              <1>     test rax, rax
   260 00000AC3 0F44CB              <1>     cmovz ecx, ebx  ;If sector 0, change to DOS buffer
   261                              <1> .getSectorRead:
   262 00000AC6 E858FCFFFF          <1>     call getBuffer  ;Get ptr to buffer header in [currBuff] (and rbx but ignore)
   263 00000ACB 59                  <1>     pop rcx
   264 00000ACC 5B                  <1>     pop rbx
   265 00000ACD 58                  <1>     pop rax
   266 00000ACE C3                  <1>     ret
   267                              <1> 
   268                              <1> getNextSectorOfFile:
   269                              <1> ;This function will read the next sector for a file into a buffer.
   270                              <1> ;If the next sector to be read lives in the next cluster, it will update
   271                              <1> ; the file handle of the file being read/written to the new cluster
   272                              <1> ;
   273                              <1> ;Input: rbp = dpb pointer
   274                              <1> ;Output:
   275                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   276                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File
   277                              <1> ;       CF=CY => Critical error occurred and was FAILed
   278                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   279                              <1> ; next cluster and read first sector 
   280                              <1>     ;Check if we need to go to next cluster
   281 00000ACF 8A05(F4C50300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   282 00000AD5 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   283 00000AD8 7416                <1>     je .gotoNextCluster
   284                              <1>     ;Goto next sector in same cluster
   285 00000ADA FE05(F4C50300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   286 00000AE0 48FF05(F5C50300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk
   287 00000AE7 488B05(F5C50300)    <1>     mov rax, qword [currSectD]
   288                              <1> .exitOK:
   289 00000AEE F8                  <1>     clc
   290                              <1> .exitFail:
   291 00000AEF C3                  <1>     ret
   292                              <1> .gotoNextCluster:
   293 00000AF0 8B05(EBC50300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   294 00000AF6 E82A000000          <1>     call walkFAT
   295 00000AFB 72F2                <1>     jc .exitFail
   296                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   297 00000AFD 3DFFFFFFFF          <1>     cmp eax, -1
   298 00000B02 74EA                <1>     je .exitOK
   299                              <1> ;Update the new cluster and sector information
   300 00000B04 8905(EBC50300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   301 00000B0A FF05(E7C50300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   302 00000B10 E815FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster
   303 00000B15 488905(F5C50300)    <1>     mov qword [currSectD], rax  ;Save it
   304 00000B1C C605(F4C50300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   305 00000B23 EBC9                <1>     jmp short .exitOK
   306                              <1> 
   307                              <1> 
   308                              <1> walkFAT:
   309                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   310                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   311                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   312                              <1> ;       rbp = DPB number
   313                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   314                              <1> ;If carry set, getBuffer failed!
   315 00000B25 53                  <1>     push rbx
   316 00000B26 51                  <1>     push rcx
   317 00000B27 52                  <1>     push rdx
   318 00000B28 57                  <1>     push rdi
   319 00000B29 55                  <1>     push rbp
   320 00000B2A 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   321 00000B2C E8ADFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   322                              <1>     ;and FAT type in ecx
   323 00000B31 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]
   324 00000B35 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   325 00000B37 51                  <1>     push rcx    ;Move FAT signature onto stack
   326 00000B38 B102                <1>     mov cl, fatBuffer
   327 00000B3A E8E4FBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   328 00000B3F 59                  <1>     pop rcx
   329 00000B40 722D                <1>     jc .exitFail
   330                              <1>     ;Check if FAT 12, 16, 32
   331 00000B42 85C9                <1>     test ecx, ecx
   332 00000B44 742F                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   333 00000B46 F7C101000000        <1>     test ecx, 1
   334 00000B4C 7410                <1>     jz .goToNextClusterFat32
   335                              <1>     ;Here we handle FAT16
   336 00000B4E 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   337 00000B53 663DFFFF            <1>     cmp ax, -1
   338 00000B57 7515                <1>     jne .exit
   339 00000B59 0FBEC0              <1>     movsx eax, al
   340 00000B5C EB10                <1>     jmp short .exit
   341                              <1> .goToNextClusterFat32:
   342 00000B5E 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   343 00000B62 3DFFFFFFFF          <1>     cmp eax, -1
   344 00000B67 7405                <1>     je .exit   ;If EOC, skip zeroing nybble
   345 00000B69 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   346                              <1> .exit:
   347 00000B6E F8                  <1>     clc
   348                              <1> .exitFail:
   349 00000B6F 5D                  <1>     pop rbp
   350 00000B70 5F                  <1>     pop rdi
   351 00000B71 5A                  <1>     pop rdx
   352 00000B72 59                  <1>     pop rcx
   353 00000B73 5B                  <1>     pop rbx
   354 00000B74 C3                  <1>     ret
   355                              <1> .gotoNextClusterFat12:
   356                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   357                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   358                              <1> 
   359 00000B75 57                  <1>     push rdi    ;Save the cluster number on the stack
   360 00000B76 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   361 00000B79 FFC0                <1>     inc eax ;Get next sector
   362 00000B7B B102                <1>     mov cl, fatBuffer
   363 00000B7D E8A1FBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   364 00000B82 59                  <1>     pop rcx ;Return the cluster number in rcx
   365 00000B83 72EA                <1>     jc .exitFail
   366                              <1>     ;rdi has first buffer header, rbx has second buffer header
   367                              <1>     ;rdx has offset into first header for entry
   368 00000B85 F7C101000000        <1>     test ecx, 1  ;Check if cluster is odd
   369 00000B8B 7422                <1>     jz .gotoNextClusterFat12Even
   370                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   371 00000B8D 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   372 00000B91 29D0                <1>     sub eax, edx
   373 00000B93 FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   374 00000B95 750E                <1>     jnz .gotoNextClusterFat12NoCross
   375                              <1>     ;Boundary cross, build entry properly
   376 00000B97 31C0                <1>     xor eax, eax
   377 00000B99 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   378 00000B9D 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   379 00000BA0 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   380 00000BA3 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   381                              <1> .gotoNextClusterFat12NoCross:
   382 00000BA5 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   383 00000BAA C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   384 00000BAD EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   385                              <1> .gotoNextClusterFat12Even:
   386                              <1>     ;Here the cluster is even and can't cross a sector boundary
   387 00000BAF 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   388 00000BB4 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   389                              <1> .checkIfLastFAT12Cluster:
   390 00000BB9 663DFF0F            <1>     cmp ax, 0FFFh
   391 00000BBD 75AF                <1>     jne .exit
   392 00000BBF B8FFFFFFFF          <1>     mov eax, -1
   393 00000BC4 E9A5FFFFFF          <1>     jmp .exit
    23                                  %include "./Source/Kernel/FAT/fileSearch.asm"
    24                              <1> ;Generic Find First and Find Next functions here
    25                              <1> 
    26                              <1> genericFindFirst:
    27 00000BC9 C3                  <1>     ret
    28                              <1> genericFindNext:
    29 00000BCA C3                  <1>     ret
    24                                  %include "./Source/Kernel/CharDevs/charFunctions.asm"
    25                              <1> ;-----------------------------------------------------------------------:
    26                              <1> ;                  DOS default char functions live here                 :
    27                              <1> ;                                                                       :
    28                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    29                              <1> ;                                                                       :
    30                              <1> ;Rules for the naming of the DOS functions                              :
    31                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    32                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    33                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    34                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    35                              <1> ;                                                                       :
    36                              <1> ;-----------------------------------------------------------------------:
    37                              <1> 
    38                              <1> charIn_BE:     ;ah = 01h
    39                              <1> ;Return char that has been read and echoed in al
    40 00000BCB E826000000          <1>     call charIn_B
    41 00000BD0 84C0                <1>     test al, al
    42 00000BD2 7405                <1>     jz .stdireexit
    43 00000BD4 E803000000          <1>     call charOut_B.skipEP    ;Output it to screen
    44                              <1> .stdireexit:
    45                              <1>     return
    18                              <2> %%_ret:
    19 00000BD9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> 
    47                              <1> charOut_B:       ;ah = 02h
    48                              <1> ;Bspace is regular cursor left, does not insert a blank
    49 00000BDA 88D0                <1>     mov al, dl
    50                              <1> .skipEP:  ;Internal function Entry Point, with char in al
    51 00000BDC 56                  <1>     push rsi
    52 00000BDD 8805(48C50300)      <1>     mov byte [singleIObyt], al
    53 00000BE3 488B35(44C00300)    <1>     mov rsi, qword [vConPtr]   ;Get ptr to current con device header
    54 00000BEA E82E000000          <1>     call wByteSetup ;Puts in rbx the request block
    55 00000BEF E8C70B0000          <1>     call goDriver
    56 00000BF4 5E                  <1>     pop rsi
    57                              <1>     return
    18                              <2> %%_ret:
    19 00000BF5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    58                              <1> auxIn_B:        ;ah = 03h
    59                              <1> auxOut_B:       ;ah = 04h
    60                              <1> prnOut_B:       ;ah = 05h
    61                              <1> directConIO:    ;ah = 06h
    62                              <1> ;Only special thing about this function is that it doesn't wait for input.
    63                              <1> charIn:         ;ah = 07h
    64                              <1> ;Return char in al from STDIN
    65                              <1> charIn_B:       ;ah = 08h
    66                              <1> ;Return char in al from STDIN
    67 00000BF6 E827000000          <1>     call rByteSetup
    68 00000BFB 488B35(44C00300)    <1>     mov rsi, qword [vConPtr]   ;Get ptr to current con device header
    69 00000C02 E8B40B0000          <1>     call goDriver
    70 00000C07 8A05(48C50300)      <1>     mov al, byte [singleIObyt]  ;Get byte in al to return as return value
    71                              <1>     return
    18                              <2> %%_ret:
    19 00000C0D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    72                              <1> printString_B:      ;ah = 09h
    73 00000C0E 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
    74                              <1> .ps0:
    75 00000C11 AC                  <1>     lodsb   ;Get char in al and inc rsi
    76 00000C12 3C24                <1>     cmp al, "$" ;End of string char?
    77                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C14 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    78 00000C16 E8C1FFFFFF          <1>     call charOut_B.skipEP
    79 00000C1B EBF4                <1>     jmp short .ps0
    80                              <1> buffCharInput_BE:  ;ah = 0Ah
    81                              <1> ;Works as the main input function for the vCon keyboard buffer
    82                              <1> checkStdinStatus:  ;ah = 0Bh
    83                              <1> ;Returns the status of the driver controlling vCon
    84                              <1> clearbuffDoFunc:   ;ah = 0Ch
    85                              <1> ;Clears any buffers and issues a console command
    86                              <1> ;------------------------
    87                              <1> ;  Primitive functions  :
    88                              <1> ;------------------------
    89                              <1> wByteSetup:
    90                              <1> ;Preserve all registers EXCEPT RBX= Request header pointer
    91 00000C1D 50                  <1>     push rax
    92 00000C1E B408                <1>     mov ah, drvWRITE
    93 00000C20 EB03                <1>     jmp short rByteSetup.ep
    94                              <1> rByteSetup:
    95                              <1> ;Preserve all registers EXCEPT RBX= Request header pointer
    96 00000C22 50                  <1>     push rax
    97 00000C23 B404                <1>     mov ah, drvREAD
    98                              <1> .ep:
    99 00000C25 51                  <1>     push rcx
   100 00000C26 57                  <1>     push rdi
   101 00000C27 B901000000          <1>     mov ecx, 1
   102 00000C2C 488D3D(48C50300)    <1>     lea rdi, singleIObyt    ;Get address of symbol
   103 00000C33 E8E20E0000          <1>     call secdReqCharIOReq   ;Make request, return rbx = Request header
   104 00000C38 5F                  <1>     pop rdi
   105 00000C39 59                  <1>     pop rcx
   106 00000C3A 58                  <1>     pop rax
   107                              <1>     return
    18                              <2> %%_ret:
    19 00000C3B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   108                              <1> getCharFunHandle:
   109                              <1> ;Gets the handle pointer for a device. 
   110                              <1> ; If the handle is 0,1,2, if the handle is closed, then return vConPtr.
   111                              <1> ; If the handle is 3,4, if the handle is closed, then return nullDevPtr
   112                              <1> ; Else find SFT entry, check it is char device.
   113                              <1> ; If it is disk device, transfer control to readHandle function.
   114                              <1> ; Else, return device driver pointer for device.
   115                              <1> 
   116                              <1> ;Input: bx = File handle (zero extended to rbx)
   117                              <1> ;Output: CF=NC -> rdi = SFT entry 
   118                              <1> ;        CF=CY -> SFT closed, get default driver ptr
   119                              <1> 
   120 00000C3C E8FB030000          <1>     call getJFTPtr    ;Get a ptr to the SFT entry in rdi
   121 00000C41 803FFF              <1>     cmp byte [rdi], -1  ;SFT entry closed?
   122 00000C44 7502                <1>     jne .validDevice
   123 00000C46 F9                  <1>     stc ;Set carry flag
   124                              <1>     return ;Return with al destroyed
    18                              <2> %%_ret:
    19 00000C47 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   125                              <1> .validDevice:
   126 00000C48 E837040000          <1>     call derefSFTPtr.ok    ;bx has file handle, now get sft ptr in rdi
   127                              <1>     return
    18                              <2> %%_ret:
    19 00000C4D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   128                              <1> testDeviceCharBlock:
   129                              <1> ;Input: rdi = SFT pointer
   130                              <1> ;Output: ZF=ZE => Block device, ZF=NZ => Char device
   131 00000C4E 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   132                              <1>     return
    18                              <2> %%_ret:
    19 00000C54 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   133                              <1> 
   134                              <1> ;------------------------
   135                              <1> ;   Utility functions   :
   136                              <1> ;------------------------
   137                              <1> checkBreakOnCon:
   138                              <1> ;Reads bytes from CON if there are any bytes to read and 
   139                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   140 00000C55 803D(64C30300)01    <1>     cmp byte [inDOS], 1
   141 00000C5C 7401                <1>     je checkBreak  ;Only check ^C on first entry to DOS
   142                              <1>     return
    18                              <2> %%_ret:
    19 00000C5E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   143                              <1> checkBreak:
   144                              <1> ;Returns in al the keystroke that is available IF one is available
   145                              <1> ; or al=0 if no keystroke available
   146 00000C5F 53                  <1>     push rbx
   147 00000C60 56                  <1>     push rsi
   148 00000C61 488B35(44C00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   149 00000C68 31C0                <1>     xor eax, eax
   150                              <1>     ;Place command code and a zero status word at the same time
   151 00000C6A B005                <1>     mov al, drvNONDESTREAD
   152 00000C6C 8905(F0C30300)      <1>     mov dword [secdReqHdr + nonDestInNoWaitReqPkt.cmdcde], eax
   153                              <1>     ;Place the packet size in the hdrlen field
   154 00000C72 B00E                <1>     mov al, nonDestInNoWaitReqPkt_size
   155 00000C74 8805(EEC30300)      <1>     mov byte [secdReqHdr + nonDestInNoWaitReqPkt.hdrlen], al
   156 00000C7A 488D1D(EEC30300)    <1>     lea rbx, secdReqHdr
   157 00000C81 E8350B0000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   158                              <1>     ;Check if the busy bit is set (No keystroke available)
   159 00000C86 66F705(F1C30300)00- <1>     test word [secdReqHdr + nonDestInNoWaitReqPkt.status], drvBsyStatus
   159 00000C8E 02                  <1>
   160 00000C8F 7403                <1>     jz .charFound
   161                              <1> .exit:
   162 00000C91 5E                  <1>     pop rsi
   163 00000C92 5B                  <1>     pop rbx
   164 00000C93 C3                  <1>     ret
   165                              <1> .charFound:
   166                              <1> ;Keystroke available, proceed
   167 00000C94 8A05(FBC30300)      <1>     mov al, byte [secdReqHdr + nonDestInNoWaitReqPkt.retbyt]    ;Get char
   168 00000C9A 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   169 00000C9C 75F3                <1>     jne .exit   ;If not equal exit
   170                              <1> ;Now we pull the char out of the buffer
   171 00000C9E 31C0                <1>     xor eax, eax
   172 00000CA0 B004                <1>     mov al, drvREAD ;Read command
   173 00000CA2 8905(F0C30300)      <1>     mov dword [secdReqHdr + ioReqPkt.cmdcde], eax
   174                              <1>     ;Place packet size
   175 00000CA8 C605(EEC30300)2A    <1>     mov byte [secdReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   176                              <1>     ;Place pointers and number of chars
   177 00000CAF C705(04C40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   177 00000CB7 0000                <1>
   178 00000CB9 488D05(48C50300)    <1>     lea rax, singleIObyt    ;IO Byte buffer
   179 00000CC0 488905(FCC30300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rax
   180 00000CC7 E8EF0A0000          <1>     call goDriver   ;RSI and RBX as before
   181                              <1>     return ;Stopgap right now, do nothing
    18                              <2> %%_ret:
    19 00000CCC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> 
   184                              <1> swapVConDriver:
   185                              <1> ;Sets up the vCon to use the alternative device driver 
   186 00000CCD 57                  <1>     push rdi
   187 00000CCE E810000000          <1>     call vConUseAlt
   188 00000CD3 488B3D(CBC50300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   189 00000CDA 48893D(60C50300)    <1>     mov qword [vConOldSFT], rdi ;Save the SFT ptr in var
   190 00000CE1 5F                  <1>     pop rdi
   191                              <1>     return
    18                              <2> %%_ret:
    19 00000CE2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   192                              <1> ;These functions set/clear whether vCon should use vConOldSFT or vConPtr
   193                              <1> ;If vConDrvFlg = 1 => Use vConOldSFT
   194                              <1> ;If vConDrvFlg = 0 => Use vConPtr
   195                              <1> vConUseAlt:
   196 00000CE3 C605(EBC30300)01    <1>     mov byte [vConDrvFlg], 1    ;Set to use alternative driver
   197                              <1>     return
    18                              <2> %%_ret:
    19 00000CEA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   198                              <1> vConUseDef:
   199 00000CEB C605(EBC30300)00    <1>     mov byte [vConDrvFlg], 0    ;Clear to use default driver
   200                              <1>     return
    18                              <2> %%_ret:
    19 00000CF2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    25                                  %include "./Source/Kernel/CharDevs/dateTimeFunctions.asm"
    26                              <1> ;Major kernel date time functions and subroutines
    27                              <1> 
    28                              <1> getDate:           ;ah = 2Ah
    29                              <1> setDate:           ;ah = 2Bh
    30                              <1> getTime:           ;ah = 2Ch
    31                              <1> setTime:           ;ah = 2Dh
    32 00000CF3 C3                  <1>     ret
    26                                  %include "./Source/Kernel/FileIO/fcbFunctions.asm"
    27                              <1> openFileFCB:       ;ah = 0Fh
    28                              <1> closeFileFCB:      ;ah = 10h
    29                              <1> findFirstFileFCB:  ;ah = 11h
    30                              <1> findNextFileFCB:   ;ah = 12h
    31                              <1> deleteFileFCB:     ;ah = 13h
    32                              <1> sequentialReadFCB: ;ah = 14h
    33                              <1> sequentialWriteFCB:;ah = 15h
    34                              <1> createFileFCB:     ;ah = 16h
    35                              <1> renameFileFCB:     ;ah = 17h
    36 00000CF4 C3                  <1>     ret
    37                              <1> setDTA:            ;ah = 1Ah
    38                              <1> ;Called with:
    39                              <1> ;   rdx = Pointer to the new default DTA
    40 00000CF5 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
    41 00000CFC 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    42 00000D00 488915(73C30300)    <1>     mov qword [currentDTA], rdx
    43 00000D07 C3                  <1>     ret
    44                              <1> randomReadFCB:     ;ah = 21h
    45                              <1> randomWriteFCB:    ;ah = 22h
    46                              <1> getFileSizeFCB:    ;ah = 23h
    47                              <1> setRelRecordFCB:   ;ah = 24h
    48                              <1> randBlockReadFCB:  ;ah = 27h
    49                              <1> randBlockWriteFCB: ;ah = 28h
    50                              <1> parseFilenameFCB:  ;ah = 29h
    51 00000D08 C3                  <1>     ret
    52                              <1> getDTA:            ;ah = 2Fh
    53 00000D09 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
    54 00000D10 488B1D(73C30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    55 00000D17 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    56 00000D1B C3                  <1>     ret
    27                                  %include "./Source/Kernel/FileIO/handleFunctions.asm"
    28                              <1> ;-----------------------------------:
    29                              <1> ;    File Handle Kernel routines    :
    30                              <1> ;-----------------------------------:
    31                              <1> 
    32                              <1> createFileHdl:     ;ah = 3Ch, handle function
    33 00000D1C C3                  <1>     ret
    34                              <1> openFileHdl:       ;ah = 3Dh, handle function
    35 00000D1D C3                  <1>     ret
    36                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    37 00000D1E C3                  <1>     ret
    38                              <1> readFileHdl:       ;ah = 3Fh, handle function
    39 00000D1F 488D3593000000      <1>     lea rsi, readBytes
    40                              <1> .common:
    41 00000D26 E82F030000          <1>     call getSFTPtr ;Get SFT ptr in rdi (if file is r/w-able from machine)
    42 00000D2B 7221                <1>     jb .error
    43 00000D2D E81B020000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
    44 00000D32 FF35(73C30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
    45 00000D38 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
    46 00000D3A 8F05(73C30300)      <1>     pop qword [currentDTA]
    47 00000D40 720C                <1>     jb .errorFromDataTransfer
    48 00000D42 E8F60D0000          <1>     call getUserRegs
    49 00000D47 890E                <1>     mov dword [rsi + callerFrame.rax], ecx  ;Put actual number of bytes tfrd
    50 00000D49 806658FE            <1>     and byte [rsi + callerFrame.flags], 0FEh    ;Clear CF
    51 00000D4D C3                  <1>     ret
    52                              <1> ;Temporary Error handler, simply return with CF set
    53                              <1> .error:
    54                              <1> .errorFromDataTransfer:
    55 00000D4E E8EA0D0000          <1>     call getUserRegs
    56 00000D53 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set CF
    57 00000D57 C3                  <1>     ret
    58                              <1> writeFileHdl:      ;ah = 40h, handle function
    59 00000D58 488D35B5010000      <1>     lea rsi, writeBytes
    60 00000D5F E9C2FFFFFF          <1>     jmp readFileHdl.common
    61                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    62 00000D64 C3                  <1>     ret
    63                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
    64                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
    65 00000D65 E8F0020000          <1>     call getSFTPtr
    66 00000D6A 7326                <1>     jnc .sftValid
    67                              <1>     ;Error code and exit
    68                              <1>     ;al (eax) has error code for bad file handle
    69 00000D6C 668905(67C30300)    <1>     mov word [errorExCde], ax
    70                              <1> .exitBad:
    71 00000D73 C605(66C30300)01    <1>     mov byte [errorLocus], eLocUnk  ;Unknown Locus
    72 00000D7A C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Reinput data
    73 00000D81 C605(6AC30300)08    <1>     mov byte [errorClass], eClsNotFnd
    74 00000D88 E8B00D0000          <1>     call getUserRegs    ;Get user regs in rsi
    75 00000D8D 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set CF
    76 00000D91 C3                  <1>     ret
    77                              <1> .sftValid:
    78 00000D92 3C03                <1>     cmp al, 3
    79 00000D94 7206                <1>     jb .validFunction
    80                              <1>     ;Error code and exit
    81 00000D96 66B80100            <1>     mov ax, errInvFnc
    82 00000D9A EBD7                <1>     jmp short .exitBad
    83                              <1> .validFunction:
    84 00000D9C 3C01                <1>     cmp al, 1
    85 00000D9E 7713                <1>     ja .seekend
    86 00000DA0 7203                <1>     jb .seekset
    87                              <1> ;Here we are at seekcur, seek from current (signed)
    88 00000DA2 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
    89                              <1> .seekset:
    90                              <1> ;Seek from the start (unsigned)
    91 00000DA5 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
    92 00000DA8 E8900D0000          <1>     call getUserRegs    ;Get user regs in rsi
    93 00000DAD 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
    94 00000DB0 30C0                <1>     xor al, al  ;Return OK!
    95 00000DB2 C3                  <1>     ret
    96                              <1> .seekend:
    97                              <1> ;Here we are at seekend, seek from end (signed)
    98 00000DB3 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
    99 00000DB6 EBED                <1>     jmp short .seekset
   100                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   101                              <1> ioctrl:            ;ah = 44h, handle function
   102                              <1> duplicateHandle:   ;ah = 45h, handle function
   103                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   104                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   105                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   106                              <1> renameFile:        ;ah = 56h
   107                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   108                              <1> createNewFile:     ;ah = 5Bh
   109                              <1> lockUnlockFile:    ;ah = 5Ch
   110                              <1> setHandleCount:    ;ah = 67h
   111                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   112 00000DB8 C3                  <1>     ret
   113                              <1> ;-----------------------------------:
   114                              <1> ;       Main File IO Routines       :
   115                              <1> ;-----------------------------------:
   116                              <1> readBytes:
   117                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
   118                              <1> ;Input: ecx = Number of bytes to read
   119                              <1> ;Output: ecx = Number of bytes read
   120                              <1> ;Number of bytes read 
   121 00000DB9 E897010000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   122 00000DBE 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   123 00000DC2 240F                <1>     and al, 0Fh ;Eliminate except access mode
   124 00000DC4 3C01                <1>     cmp al, WriteAccess
   125 00000DC6 750E                <1>     jne .readable
   126 00000DC8 B805000000          <1>     mov eax, errAccDen
   127 00000DCD 668905(67C30300)    <1>     mov word [errorExCde], ax
   128 00000DD4 F9                  <1>     stc
   129 00000DD5 C3                  <1>     ret ;Exit with error code 
   130                              <1> .readable:
   131 00000DD6 E8BB010000          <1>     call setupVarsForTransfer
   132 00000DDB 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
   133 00000DDE 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   134 00000DE4 740A                <1>     jz .notRedir
   135 00000DE6 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
   136 00000DEB CD4F                <1>     int 4fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
   137 00000DED C3                  <1>     ret
   138                              <1> .exitOk:
   139 00000DEE F8                  <1>     clc
   140 00000DEF C3                  <1>     ret
   141                              <1> .notRedir:
   142 00000DF0 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   143 00000DF6 7510                <1>     jnz readCharDev
   144 00000DF8 E8F80F0000          <1>     call dosCrit1Enter
   145 00000DFD E80B010000          <1>     call readDiskFile
   146 00000E02 E8F80F0000          <1>     call dosCrit1Exit
   147 00000E07 C3                  <1>     ret
   148                              <1> readCharDev:
   149                              <1> ;rdi points to sft for char dev to read
   150                              <1> ;ecx has the number of bytes to transfer
   151                              <1> ;Vars have been set up and DTA has the transfer address
   152                              <1> ;Returns in ecx, the actual bytes transferred
   153 00000E08 C605(66C30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
   154 00000E0F 488B3D(73C30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
   155 00000E16 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
   156 00000E1A F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
   157 00000E1D 0F8413010000        <1>     jz rwExitOk    ;If it does, jump to exit as if EOF has been hit
   158 00000E23 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
   159 00000E26 7507                <1>     jnz .notNul
   160                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
   161                              <1>     ;NUL never transfers bytes 
   162 00000E28 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
   163 00000E2A E907010000          <1>     jmp rwExitOk    ;Goto exit
   164                              <1> .notNul:
   165 00000E2F F6C320              <1>     test bl, charDevBinary
   166 00000E32 750A                <1>     jnz .binary
   167                              <1>     ;Here if the device is in ASCII mode
   168 00000E34 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
   169 00000E37 7457                <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
   170                              <1> .consoleInput:
   171                              <1>     ;Console input here
   172 00000E39 E88FFEFFFF          <1>     call swapVConDriver    ;Prepare CON Useage!
   173                              <1>     
   174                              <1> 
   175                              <1> .binary:
   176                              <1>     ;Setup registers for transfer
   177 00000E3E 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
   178 00000E41 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
   179                              <1>     ;ecx has the number of bytes to transfer directly
   180 00000E44 E8250C0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
   181 00000E49 488B35(50C50300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
   182 00000E50 E866090000          <1>     call goDriver   ;Make the request
   183 00000E55 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
   184 00000E58 0FB73D(1BC40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   185 00000E5F F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   186 00000E65 7412                <1>     jz .binNoError
   187                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
   188 00000E67 B486                <1>     mov ah, 86h ;Char device, data error signature
   189 00000E69 E867080000          <1>     call binaryCharDevErr   ;ah = has part of the error 
   190                              <1>     ;al now has the response
   191                              <1>     ;Cannot return Abort as Abort returns to command interpreter through DOS
   192 00000E6E 3C00                <1>     cmp al, critIgnore
   193 00000E70 7407                <1>     je .binNoError ;Simply proceed as normal
   194 00000E72 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
   195 00000E75 3C03                <1>     cmp al, critFail
   196 00000E77 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
   197                              <1>     ;Fallthrough here for fail!
   198                              <1> .failExit:
   199                              <1>     
   200                              <1> .binNoError:
   201                              <1>     ;Get number of bytes transferred into 
   202 00000E79 8B05(2EC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
   203 00000E7F F7D8                <1>     neg eax ;make it into -eax
   204 00000E81 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
   205                              <1>     ;ecx now has bytes left to transfer
   206 00000E85 50                  <1>     push rax    ;Save value on stack
   207 00000E86 31C0                <1>     xor eax, eax ;Set ZF
   208 00000E88 FFC0                <1>     inc eax ;Clear ZF
   209 00000E8A 58                  <1>     pop rax ;Get back the original value
   210 00000E8B E9A6000000          <1>     jmp rwExitOk    ;GoExit with ecx=Bytes left to read
   211                              <1> .generalASCII:
   212                              <1>     ;ecx has bytes to transfer here
   213                              <1>     ;Setup registers for transfer
   214 00000E90 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
   215 00000E93 51                  <1>     push rcx
   216 00000E94 B901000000          <1>     mov ecx, 1  ;Get one char
   217 00000E99 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
   218 00000E9C E8CD0B0000          <1>     call primReqReadSetup   ;Setup request
   219 00000EA1 59                  <1>     pop rcx
   220                              <1>     ;rbx now has request header ptr
   221 00000EA2 488B35(50C50300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
   222                              <1> .asciiReadChar:
   223 00000EA9 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
   224 00000EAC E8A4FDFFFF          <1>     call checkBreakOnCon    ;Check we don't have a ^C pending on CON
   225 00000EB1 E805090000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
   226 00000EB6 0FB73D(1BC40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   227 00000EBD F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   228 00000EC3 741E                <1>     jz .asciiNoError
   229 00000EC5 E806080000          <1>     call asciiCharDevErr    ;Call Int 44h
   230                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
   231 00000ECA C705(2EC40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
   231 00000ED2 0000                <1>
   232 00000ED4 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   233 00000ED7 3C03                <1>     cmp al, critFail
   234 00000ED9 749E                <1>     je .failExit
   235 00000EDB 3C01                <1>     cmp al, critRetry
   236 00000EDD 74CA                <1>     je .asciiReadChar
   237                              <1>     ;Ignore here, pretend NULL CHAR was read
   238 00000EDF 30C0                <1>     xor al, al
   239 00000EE1 EB11                <1>     jmp short .asciiIgnoreEP
   240                              <1> .asciiNoError:
   241                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
   242                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
   243                              <1> ;Preserve RBX, RSI
   244                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
   245 00000EE3 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   246 00000EE6 813D(2EC40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
   246 00000EEE 0000                <1>
   247 00000EF0 7544                <1>     jne rwExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
   248 00000EF2 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
   249                              <1> .asciiIgnoreEP:
   250 00000EF4 48FF05(26C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
   251 00000EFB 48FFC7              <1>     inc rdi ;Also advance register pointer
   252 00000EFE 3C1A                <1>     cmp al, EOF ;Was this char EOF?
   253 00000F00 7434                <1>     je rwExitOk
   254 00000F02 3C0D                <1>     cmp al, CR  ;Was this char CR?
   255 00000F04 E0A3                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
   256                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
   257 00000F06 FEC0                <1>     inc al  ;make ZF=NZ
   258 00000F08 E929000000          <1>     jmp rwExitOk    ;Called with ecx = Number of bytes LEFT to transfer
   259                              <1>     
   260                              <1> readDiskFile:
   261 00000F0D C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
   262                              <1> 
   263                              <1> writeBytes:
   264                              <1> ;Writes the bytes from the user buffer
   265 00000F14 E83C000000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   266 00000F19 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   267 00000F1D 240F                <1>     and al, 0Fh ;Eliminate except access mode
   268 00000F1F 3C00                <1>     cmp al, ReadAccess
   269 00000F21 750E                <1>     jne .writeable
   270 00000F23 B805000000          <1>     mov eax, errAccDen
   271 00000F28 668905(67C30300)    <1>     mov word [errorExCde], ax
   272 00000F2F F9                  <1>     stc
   273 00000F30 C3                  <1>     ret ;Exit with error code 
   274                              <1> .writeable:
   275 00000F31 E860000000          <1>     call setupVarsForTransfer
   276                              <1> 
   277                              <1> rwExitOk:
   278                              <1> ;Input: ecx = Number of bytes left to transfer!
   279                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
   280 00000F36 890D(13C60300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
   281 00000F3C 7509                <1>     jnz .skipbitClear
   282 00000F3E E812000000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
   283                              <1>     ;The disk transfer must've flushed by now. 
   284 00000F43 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokDevNotFlush|charDevNoEOF) ;OR
   285                              <1>     ;Next char dev read should give EOF.
   286                              <1> .skipbitClear:  ;Or skip that entirely
   287 00000F47 E811000000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
   288 00000F4C C3                  <1>     ret
   289                              <1> rwExitBad:
   290                              <1> ;-----------------------------------:
   291                              <1> ;        File Handle routines       :
   292                              <1> ;-----------------------------------:
   293                              <1> 
   294                              <1> setCurrentSFT:
   295                              <1> ;Set the pointer in rdi as current SFT 
   296 00000F4D 48893D(CBC50300)    <1>     mov qword [currentSFT], rdi
   297 00000F54 C3                  <1>     ret
   298                              <1> getCurrentSFT:
   299                              <1> ;Get the current SFT pointer in rdi
   300 00000F55 488B3D(CBC50300)    <1>     mov rdi, qword [currentSFT]
   301 00000F5C C3                  <1>     ret
   302                              <1> updateCurrentSFT:
   303                              <1> ;Updates the Current SFT fields before returning from a file handle operation
   304                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
   305 00000F5D 57                  <1>     push rdi
   306 00000F5E 488B3D(CBC50300)    <1>     mov rdi, qword [currentSFT]
   307 00000F65 8B0D(0FC60300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
   308 00000F6B 2B0D(13C60300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
   309                              <1>     ;ecx has bytes transferred
   310 00000F71 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
   311 00000F77 751A                <1>     jnz .exit
   312 00000F79 50                  <1>     push rax
   313 00000F7A 8B05(EBC50300)      <1>     mov eax, dword [currClustD]
   314 00000F80 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
   315 00000F83 8B05(E7C50300)      <1>     mov eax, dword [currClustF]
   316 00000F89 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
   317 00000F8C 58                  <1>     pop rax
   318 00000F8D 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
   319 00000F90 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
   320                              <1> .exit:
   321 00000F93 5F                  <1>     pop rdi
   322 00000F94 F8                  <1>     clc
   323 00000F95 C3                  <1>     ret
   324                              <1> setupVarsForTransfer:
   325                              <1> ;Computes the actual bytes to be transferred and 
   326                              <1> ; sets up internal variables for the transfer. 
   327                              <1> ;Works for both reading and writing
   328                              <1> ;Input: ecx = User desired Bytes to transfer
   329                              <1> ;       rdi = SFT pointer for the file
   330                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   331                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
   332                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
   333                              <1> ;
   334                              <1> ;Note: Does not account for a FULL disk. When writing,
   335                              <1> ; if the disk will get full as a result of the write,
   336                              <1> ; stop at the last byte before the transfer. If the 
   337                              <1> ; file pointer is past the last free byte, write 0
   338 00000F96 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
   339 00000F9A 488935(50C50300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
   340 00000FA1 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
   341 00000FA4 8905(FFC50300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
   342 00000FAA 890D(0FC60300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
   343 00000FB0 890D(13C60300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
   344 00000FB6 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev ;If not disk...
   345 00000FBC 7402                <1>     jz setupVarsForDiskTransfer
   346 00000FBE F8                  <1>     clc
   347 00000FBF C3                  <1>     ret ;Else just exit here
   348                              <1> setupVarsForDiskTransfer:
   349                              <1> ;Extension of the above, but for Disk files only
   350                              <1> ;Input: ecx = User desired Bytes to transfer
   351                              <1> ;       rdi = SFT pointer for the file
   352                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   353 00000FC0 488B2D(50C50300)    <1>     mov rbp, qword [workingDPB] ;Get the workingDPB (the same as qPtr)
   354 00000FC7 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
   355 00000FCA 881D(4FC50300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
   356 00000FD0 8B05(FFC50300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
   357 00000FD6 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   358 00000FDA 31D2                <1>     xor edx, edx    ;Zero rdx
   359 00000FDC F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
   360                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
   361                              <1>     ;edx has the offset into that sector
   362 00000FDE 8905(F0C50300)      <1>     mov dword [currSectF], eax
   363 00000FE4 668915(FDC50300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
   364 00000FEB 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
   365 00000FED 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
   366 00000FF0 8805(F4C50300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
   367 00000FF6 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
   368 00000FF8 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   369 00000FFB D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
   370 00000FFD 8915(E7C50300)      <1>     mov dword [currClustF], edx ;Save in var
   371 00001003 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in eax
   372 00001005 F8                  <1>     clc
   373 00001006 C3                  <1>     ret
   374                              <1> 
   375                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216
   376                              <1> ;Return a pointer to the SFT entry in rdi
   377                              <1> ;Input: rbx = Valid SFT ndx number (word)
   378                              <1> ;Output: rdi = SFT pointer
   379 00001007 488B3D(34C00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
   380                              <1> .walk:
   381 0000100E 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
   382 00001012 7212                <1>     jb .thisTable
   383 00001014 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
   384 00001018 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
   385 0000101B 4881FFFFFFFFFF      <1>     cmp rdi, -1
   386 00001022 75EA                <1>     jne .walk
   387 00001024 F9                  <1>     stc
   388                              <1>     return
    18                              <2> %%_ret:
    19 00001025 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   389                              <1> .thisTable:
   390 00001026 50                  <1>     push rax
   391 00001027 52                  <1>     push rdx
   392 00001028 B84F000000          <1>     mov eax, sft_size
   393 0000102D F7E3                <1>     mul ebx
   394 0000102F 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
   395 00001032 5A                  <1>     pop rdx
   396 00001033 58                  <1>     pop rax
   397 00001034 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
   398                              <1>     return
    18                              <2> %%_ret:
    19 0000103B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   399                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
   400                              <1> ;Return a zero extended value in rdi for the SFT entry
   401                              <1> ;Input: bx = JFT handle (we zero extend)
   402                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
   403                              <1> ;        CF=CY => al = Error code, Fail
   404 0000103C 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
   405 0000103F 663B1D(91C00300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
   406 00001046 7204                <1>     jb .ok
   407 00001048 B006                <1>     mov al, errBadHdl
   408 0000104A F9                  <1>     stc
   409                              <1>     return
    18                              <2> %%_ret:
    19 0000104B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   410                              <1> .ok:
   411 0000104C 488B3D(7BC30300)    <1>     mov rdi, qword [currentPSP]
   412 00001053 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
   413 00001058 F8                  <1>     clc
   414                              <1>     return
    18                              <2> %%_ret:
    19 00001059 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   415                              <1> 
   416                              <1> getSFTPtr:
   417                              <1> ;This gets the SFT pointer and checks it was opened by this machine
   418                              <1> ;Input: bx = JFT handle
   419                              <1> ;Output: CF=NC: rdi = SFT pointer
   420                              <1> ;        CF=CY: Error, ax=Error code
   421 0000105A E815000000          <1>     call derefSFTPtr
   422                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000105F 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   423 00001061 50                  <1>     push rax
   424 00001062 0FB705(9FC30300)    <1>     movzx eax, word [machineNum]
   425 00001069 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
   426 0000106D 58                  <1>     pop rax
   427                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000106E 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   428 00001070 B006                <1>     mov al, errBadHdl   ;Error code
   429 00001072 F9                  <1>     stc         ;Reset CF
   430                              <1>     return
    18                              <2> %%_ret:
    19 00001073 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> derefSFTPtr:
   433                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
   434                              <1> ;Input: bx = File handle
   435                              <1> ;Output: CF=NC: rdi = SFT pointer
   436                              <1> ;        CF=CY: Error, ax=Error code
   437 00001074 E8C3FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
   438 00001079 7205                <1>     jb .fail
   439 0000107B 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
   440 0000107E 7504                <1>     jne .ok
   441                              <1> .fail:
   442 00001080 B006                <1>     mov al, errBadHdl
   443 00001082 F9                  <1>     stc
   444                              <1>     return
    18                              <2> %%_ret:
    19 00001083 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   445                              <1> .ok:
   446 00001084 53                  <1>     push rbx    ;Preserve the JFT handle
   447 00001085 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
   448 00001088 E87AFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
   449 0000108D 5B                  <1>     pop rbx 
   450                              <1>     return
    18                              <2> %%_ret:
    19 0000108E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   451                              <1> 
   452                              <1> getBytesTransferred:
   453 0000108F 8B0D(13C60300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
   454 00001095 F7D9                <1>     neg ecx ;Multiply by -1
   455 00001097 030D(0FC60300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
   456 0000109D C3                  <1>     ret ;Return bytes transferred in ecx
   457                              <1> 
   458                              <1> readWriteBytesBinary:
   459                              <1> ;Input: ecx = number of bytes to read in Binary mode
   460                              <1> ;       rdi = Points to where in caller buffer to place bytes
   461                              <1> ;       rsi = Points to where in DOS buffer to place pointer
   462                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
   463                              <1> ;Preserve rcx so we know how many bytes transferred
   464                              <1> ;Update the currByteA variable
   465                              <1> ;Returns (rsi and rdi) + (ecx on entry)
   466 0000109E 51                  <1>     push rcx
   467 0000109F F605(49C50300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
   468 000010A6 7403                <1>     jz .noSwap
   469 000010A8 4887FE              <1>     xchg rdi, rsi
   470                              <1> .noSwap:
   471 000010AB F3A4                <1>     rep movsb
   472 000010AD 59                  <1>     pop rcx
   473 000010AE 010D(FFC50300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
   474 000010B4 290D(13C60300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
   475 000010BA C3                  <1>     ret
    28                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    29                              <1> ;Memory related functions
    30                              <1> 
    31                              <1> ;-----------------------------------:
    32                              <1> ;  Memory related Kernel routines   :
    33                              <1> ;-----------------------------------:
    34                              <1> allocateMemory:    ;ah = 48h
    35                              <1> ;Input: ebx = Number of paragraphs requested
    36                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    37                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    38 000010BB 31D2                <1>     xor edx, edx
    39                              <1>     ;Clear the pointers
    40 000010BD 488915(A1C30300)    <1>     mov qword [firstMCB], rdx
    41 000010C4 488915(A9C30300)    <1>     mov qword [bestMCB], rdx
    42 000010CB 488915(B1C30300)    <1>     mov qword [lastMCB], rdx
    43 000010D2 31ED                <1>     xor ebp, ebp    
    44 000010D4 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    45 000010D6 488B35(24C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    46                              <1> .walk:
    47 000010DD 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    48 000010E0 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    49 000010E3 7409                <1>     je .walk1
    50 000010E5 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    51 000010E8 0F8565050000        <1>     jne memSysHalt
    52                              <1> .walk1:
    53                              <1>     ;Here if valid but not the last block
    54 000010EE 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    55 000010F6 0F8582000000        <1>     jne .walk2
    56                              <1>     ;Here we consolidate adjacent free blocks if there are any
    57                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    58                              <1>     ;End consolidation at first non free block or at last block in chain
    59 000010FC 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    60 000010FF 744A                <1>     je .det0    ;Determine if this block is useful
    61 00001101 31C9                <1>     xor ecx, ecx
    62 00001103 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    63 00001106 4881C610000000      <1>     add rsi, mcb.program
    64                              <1> .cons0:
    65 0000110D 48C1E104            <1>     shl rcx, 4
    66 00001111 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    67 00001114 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    68 00001117 7409                <1>     je .cons1
    69 00001119 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    70 0000111C 0F8531050000        <1>     jne memSysHalt 
    71                              <1> .cons1:
    72 00001122 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    73 0000112A 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    74                              <1>     ;Here rsi, points to a free block, add it to rdi
    75 0000112C 31C9                <1>     xor ecx, ecx
    76 0000112E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    77 00001131 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    78 00001137 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    79 0000113A 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    80 0000113C 31D2                <1>     xor edx, edx
    81 0000113E 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    82 00001141 48895608            <1>     mov qword [rsi + 8], rdx
    83 00001145 3C5A                <1>     cmp al, mcbMarkEnd
    84 00001147 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    85                              <1>     ;Here we deal with if the block was the last one 
    86 00001149 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    87                              <1> .det0:  ;Now determine if pointer in rdi is useful
    88 0000114B 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    89                              <1> ;ebx must be less than the arena size for the arena to be useful!
    90 0000114E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    91 00001151 39D9                <1>     cmp ecx, ebx
    92 00001153 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    93 00001155 488935(B1C30300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    94 0000115C 488B05(A1C30300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    95 00001163 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    96 00001166 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    97 00001168 488935(A1C30300)    <1>     mov qword [firstMCB], rsi
    98                              <1> .det1:
    99                              <1>     ;Now test for best fit.
   100 0000116F 29D9                <1>     sub ecx, ebx    ;Block - ebx
   101 00001171 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   102 00001173 7209                <1>     jb .walk2
   103 00001175 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   104 00001177 488935(A9C30300)    <1>     mov qword [bestMCB], rsi
   105                              <1> .walk2:
   106 0000117E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   107 00001181 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   108 00001183 31C9                <1>     xor ecx, ecx
   109 00001185 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   110 00001188 48C1E104            <1>     shl rcx, 4
   111 0000118C 4881C610000000      <1>     add rsi, mcb.program
   112 00001193 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   113 00001196 E942FFFFFF          <1>     jmp .walk
   114                              <1> .allocate:
   115                              <1>     ;Allocation fails IF the pointer is the null pointer
   116 0000119B 803D(2FC30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   117 000011A2 7261                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   118                              <1>     ;Fall thru if last fit
   119 000011A4 488B35(B1C30300)    <1>     mov rsi, qword [lastMCB]
   120 000011AB 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   121 000011AE 0F84CE000000        <1>     jz .allocFail
   122 000011B4 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   123 000011B6 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   124 000011B9 31C9                <1>     xor ecx, ecx
   125 000011BB 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   126 000011BE 29D9                <1>     sub ecx, ebx
   127 000011C0 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   128 000011C6 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   129 000011C9 48C1E104            <1>     shl rcx, 4
   130 000011CD 4881C610000000      <1>     add rsi, mcb.program
   131 000011D4 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   132 000011D7 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   133 000011D9 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   134 000011DC 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   135 000011E3 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   136 000011E7 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   137 000011EE 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   138 000011F5 4889F0              <1>     mov rax, rsi
   139 000011F8 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   140 000011FB 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   141 000011FF E824040000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   142 00001204 C3                  <1>     ret
   143                              <1> .bfCommon:
   144 00001205 488B35(A1C30300)    <1>     mov rsi, qword [firstMCB]
   145 0000120C 803D(2FC30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   146 00001213 480F4435(A9C30300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   147 0000121B 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   148 0000121E 7462                <1>     jz .allocFail
   149 00001220 8A06                <1>     mov al, byte [rsi + mcb.marker]
   150 00001222 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   151 00001225 31C9                <1>     xor ecx, ecx
   152 00001227 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   153 0000122A 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   154 0000122C 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   155 00001232 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   156 00001235 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP]
   157 0000123C 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   158 00001240 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   159 00001243 4881C610000000      <1>     add rsi, mcb.program
   160 0000124A 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   161 00001250 48C1E304            <1>     shl rbx, 4
   162 00001254 4801DE              <1>     add rsi, rbx
   163 00001257 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   164 00001259 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   165 00001261 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   166 00001264 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   167 0000126B 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   168 00001272 4889F8              <1>     mov rax, rdi
   169 00001275 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   170 00001278 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   171 0000127C E8A7030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   172 00001281 C3                  <1>     ret
   173                              <1> .allocFail:
   174                              <1>     ;Walk the MCB chain to determine the biggest block size
   175 00001282 488B35(24C00300)    <1>     mov rsi, [mcbChainPtr]
   176 00001289 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   177                              <1> .af0:
   178 0000128B 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   179 0000128E 7409                <1>     je .af1
   180 00001290 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   181 00001293 0F85BA030000        <1>     jne memSysHalt
   182                              <1> .af1:
   183 00001299 31C9                <1>     xor ecx, ecx
   184 0000129B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   185 0000129E 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   186 000012A6 7505                <1>     jne .af2
   187 000012A8 39D9                <1>     cmp ecx, ebx
   188 000012AA 0F47D9              <1>     cmova ebx, ecx
   189                              <1> .af2:
   190 000012AD 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   191 000012B0 7410                <1>     je .afExit
   192 000012B2 48C1E104            <1>     shl rcx, 4
   193 000012B6 4881C610000000      <1>     add rsi, mcb.program
   194 000012BD 4801CE              <1>     add rsi, rcx
   195 000012C0 EBD7                <1>     jmp short .af1
   196                              <1> .afExit:
   197 000012C2 B808000000          <1>     mov eax, errNoMem
   198 000012C7 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   199 000012CE 8802                <1>     mov byte [rdx + callerFrame.rax], al
   200 000012D0 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx
   201 000012D3 804A5801            <1>     or byte [rdx + callerFrame.flags], 1
   202 000012D7 C3                  <1>     ret
   203                              <1> freeMemory:        ;ah = 49h
   204                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   205                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   206                              <1> ;Always skip the first block as this is the anchor for DOS
   207 000012D8 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   208 000012DF 31C9                <1>     xor ecx, ecx
   209 000012E1 488B35(24C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   210 000012E8 4889F7              <1>     mov rdi, rsi
   211 000012EB 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   212 000012EE 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   213 000012F2 4881C610000000      <1>     add rsi, mcb.program
   214 000012F9 4801CE              <1>     add rsi, rcx    ;Go to next block
   215                              <1> .mainLoop:
   216 000012FC 31C9                <1>     xor ecx, ecx
   217 000012FE 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   218 00001301 7409                <1>     je .valid
   219 00001303 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   220 00001306 0F8547030000        <1>     jne memSysHalt
   221                              <1> .valid:
   222 0000130C 4939F0              <1>     cmp r8, rsi
   223 0000130F 741C                <1>     je .blockFound
   224                              <1>     ;Not valid, check if last block in chain
   225 00001311 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   226 00001314 0F84A0000000        <1>     je .blockNotFound
   227 0000131A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   228 0000131D 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   229 00001321 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   230 00001328 4801CE              <1>     add rsi, rcx    ;Go to next block
   231 0000132B EBCF                <1>     jmp short .mainLoop
   232                              <1> .blockFound:
   233                              <1>     ;If hole, error.
   234                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   235 0000132D 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   236 00001335 0F8488000000        <1>     je .blockHole
   237 0000133B 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   238 00001343 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   239 0000134B 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   240                              <1>     ;It is, let it absorb this space
   241 0000134D 31C9                <1>     xor ecx, ecx
   242 0000134F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   243 00001352 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   244 00001358 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   245                              <1>     ;Replace block marker
   246 0000135B 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   247 0000135D 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   248 0000135F 31C9                <1>     xor ecx, ecx
   249 00001361 48890E              <1>     mov qword [rsi], rcx
   250 00001364 48894E08            <1>     mov qword [rsi + 8], rcx
   251 00001368 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   252                              <1> .blockFoundCheckFollowing:
   253                              <1>     ;First check if we are the last block in chain
   254 0000136B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   255 0000136E 7439                <1>     je .blockFoundExit  ;If yes, exit!
   256 00001370 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   257 00001373 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   258 00001376 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   259 0000137A 4881C110000000      <1>     add rcx, mcb.program
   260 00001381 4801CE              <1>     add rsi, rcx    ;Go to next block
   261 00001384 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   262 0000138C 751B                <1>     jne .blockFoundExit ;If not free, exit
   263                              <1>     ;If free, absorb into block pointed to by rdi
   264 0000138E 31C9                <1>     xor ecx, ecx
   265 00001390 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   266 00001393 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   267 00001399 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   268                              <1>     ;Replace block marker
   269 0000139C 8A06                <1>     mov al, byte [rsi + mcb.marker]
   270 0000139E 8807                <1>     mov byte [rdi + mcb.marker], al
   271 000013A0 31C9                <1>     xor ecx, ecx
   272 000013A2 48890E              <1>     mov qword [rsi], rcx
   273 000013A5 48894E08            <1>     mov qword [rsi + 8], rcx
   274                              <1> .blockFoundExit:
   275 000013A9 E87A020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   276 000013AE 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   277 000013B5 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   278 000013B9 C3                  <1>     ret
   279                              <1> .blockNotFound:
   280                              <1>     ;Set CF and error code
   281 000013BA C605(6AC30300)08    <1>     mov byte [errorClass], eClsNotFnd   ;Block not found 
   282 000013C1 EB07                <1>     jmp short .blockError
   283                              <1> .blockHole:
   284                              <1> ;Cannot free a hole! Fail!
   285 000013C3 C605(6AC30300)0A    <1>     mov byte [errorClass], eClsLocked   ;Cant free a hole
   286                              <1> .blockError:
   287 000013CA C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   288 000013D1 C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   289 000013D8 66C705(67C30300)09- <1>     mov word [errorExCde], errMemAddr   ;Invalid mem addr
   289 000013E0 00                  <1>
   290 000013E1 C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   291 000013E8 B809000000          <1>     mov eax, errMemAddr
   292 000013ED 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   293 000013F4 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   294 000013F7 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   295 000013FB E828020000          <1>     call verifyIntegrityOfMCBChain
   296 00001400 C3                  <1>     ret
   297                              <1> reallocMemory:     ;ah = 4Ah
   298                              <1> ;Input: r8 = address of the block to be realloc'ed
   299                              <1> ;       ebx = How many paras this block should contain after realloc. 
   300                              <1> ;               If ebx = 0, jump to free memory
   301 00001401 85DB                <1>     test ebx, ebx
   302 00001403 0F84CFFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   303 00001409 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   304 00001410 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   305 00001413 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   306 00001416 7409                <1>     je .ctn
   307 00001418 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   308 0000141B 0F855C010000        <1>     jne .badAddrGiven
   309                              <1> .ctn:
   310                              <1>     ;Provided block is valid and not a hole
   311                              <1>     ;Check if Growth or Shrink
   312 00001421 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   313 00001429 7498                <1>     je freeMemory.blockHole
   314 0000142B 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   315 0000142E 31C9                <1>     xor ecx, ecx
   316 00001430 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   317 00001433 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   318 00001435 0F8786000000        <1>     ja .growth
   319 0000143B 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   320                              <1> ;We can always shrink
   321 00001441 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   322 00001443 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   323 00001449 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   324 0000144C 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   325 00001452 48C1E304            <1>     shl rbx, 4
   326 00001456 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   327 0000145D 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   328 00001460 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   329 00001462 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   330 00001465 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   331 00001467 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   332 0000146F 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   333 00001472 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   334 00001474 0F84DB000000        <1>     je .exit
   335                              <1> ;Else, now see if the block following is also free and absorb it
   336 0000147A 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   337 0000147D 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   338 00001481 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   339 00001488 4801CE              <1>     add rsi, rcx    ;Goto next arena
   340 0000148B 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   341 0000148E 7409                <1>     je .shrinkAbsorb
   342 00001490 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   343 00001493 0F85BA010000        <1>     jne memSysHalt
   344                              <1> .shrinkAbsorb:
   345 00001499 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   346 000014A1 0F85AE000000        <1>     jne .exit
   347                              <1>     ;It is free, absorb it
   348 000014A7 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   349 000014AA 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   350 000014B0 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   351 000014B3 31C9                <1>     xor ecx, ecx
   352                              <1>     ;Clear absorbed MCB
   353 000014B5 48890E              <1>     mov qword [rsi], rcx
   354 000014B8 48894E08            <1>     mov qword [rsi + 8], rcx
   355 000014BC E994000000          <1>     jmp .exit
   356                              <1> .growth:
   357                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   358 000014C1 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   359 000014C4 0F84A0000000        <1>     je .notEnuffMem
   360                              <1> ;Now check the following space is free. If not, not enuff mem err
   361 000014CA 31C9                <1>     xor ecx, ecx
   362 000014CC 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   363 000014CF 48C1E104            <1>     shl rcx, 4
   364 000014D3 4889F7              <1>     mov rdi, rsi    
   365 000014D6 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   366 000014DD 4801CE              <1>     add rsi, rcx
   367 000014E0 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   368 000014E3 7409                <1>     je .growthOK
   369 000014E5 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   370 000014E8 0F8565010000        <1>     jne memSysHalt
   371                              <1> .growthOK:
   372                              <1>     ;rdi points to block we are growing
   373 000014EE 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   374 000014F6 7572                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   375                              <1>     ;rsi must own all memory up to the next owned arena
   376 000014F8 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   377 000014FA 31C9                <1>     xor ecx, ecx
   378 000014FC 31D2                <1>     xor edx, edx
   379 000014FE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   380 00001501 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   381 00001507 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   382 0000150A 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   383 0000150C 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   384 0000150E 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   385 00001511 7759                <1>     ja .notEnuffMem1
   386 00001513 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   387 00001515 81FA01000000        <1>     cmp edx, 1
   388 0000151B 7449                <1>     je .notEnuffMem2
   389 0000151D 31C9                <1>     xor ecx, ecx
   390 0000151F 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   391 00001522 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   392 00001526 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   393 00001529 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   394 0000152C 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   395 00001533 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   396 00001537 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   397 0000153A 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   398 0000153E 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   399                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   400                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   401 00001540 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   402 00001542 7411                <1>     jz .exit
   403 00001544 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   404 0000154A 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   405 0000154D 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   406                              <1> .exit:
   407 00001555 E8CE000000          <1>     call verifyIntegrityOfMCBChain
   408 0000155A 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   409 00001561 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   410 00001565 C3                  <1>     ret
   411                              <1> .notEnuffMem2:
   412 00001566 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   413 00001568 EB02                <1>     jmp short .notEnuffMem1
   414                              <1> .notEnuffMem:
   415 0000156A 31DB                <1>     xor ebx, ebx    ;No space to grow
   416                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   417 0000156C B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   418 00001571 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   419 00001578 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   420 0000157B EB0C                <1>     jmp short .bad
   421                              <1> .badAddrGiven:
   422 0000157D 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   423 00001584 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   424                              <1> .bad:
   425 00001589 C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   426 00001590 C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   427 00001597 668905(67C30300)    <1>     mov word [errorExCde], ax   ;Error code
   428 0000159E C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   429 000015A5 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save this word on stack
   430 000015A8 804A5801            <1>     or byte [rdx + callerFrame.flags], 1    ;Set Carry flag on
   431 000015AC E877000000          <1>     call verifyIntegrityOfMCBChain
   432 000015B1 C3                  <1>     ret
   433                              <1> getsetMallocStrat: ;ah = 58h
   434 000015B2 84C0                <1>     test al, al
   435 000015B4 741F                <1>     jz .get
   436 000015B6 3C02                <1>     cmp al, 2
   437 000015B8 7337                <1>     jae .bad
   438                              <1> ;Set here
   439 000015BA 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   440 000015C1 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   441 000015C5 8805(2FC30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   442 000015CB 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   443 000015CF E854000000          <1>     call verifyIntegrityOfMCBChain
   444 000015D4 C3                  <1>     ret
   445                              <1> .get:
   446 000015D5 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   447 000015DC 31C0                <1>     xor eax, eax
   448 000015DE 8A05(2FC30300)      <1>     mov al, byte [allocStrat]
   449 000015E4 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   450 000015E7 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   451 000015EB E838000000          <1>     call verifyIntegrityOfMCBChain
   452 000015F0 C3                  <1>     ret
   453                              <1> .bad:
   454 000015F1 C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   455 000015F8 C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   456 000015FF 66C705(67C30300)01- <1>     mov word [errorExCde], errInvFnc   ;Invalid function number addr
   456 00001607 00                  <1>
   457 00001608 C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   458 0000160F B801000000          <1>     mov eax, errInvFnc
   459 00001614 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   460 0000161B 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   461 0000161E 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   462 00001622 E801000000          <1>     call verifyIntegrityOfMCBChain
   463 00001627 C3                  <1>     ret
   464                              <1> ;-----------------------------------:
   465                              <1> ;      Memory related routines      :
   466                              <1> ;-----------------------------------:
   467                              <1> verifyIntegrityOfMCBChain:
   468 00001628 50                  <1>     push rax
   469 00001629 53                  <1>     push rbx
   470 0000162A 488B1D(24C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   471                              <1> .ok:
   472 00001631 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   473 00001634 7408                <1>     je .ok1
   474 00001636 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   475 00001639 7518                <1>     jne memSysHalt    ;It was not M or Z, fail violently
   476                              <1> .exit:
   477 0000163B 5B                  <1>     pop rbx
   478 0000163C 58                  <1>     pop rax
   479 0000163D C3                  <1>     ret ;We have reached the end of the chain, return all good!
   480                              <1> .ok1:
   481 0000163E 31C0                <1>     xor eax, eax
   482 00001640 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   483 00001643 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   484 00001647 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   485 0000164E 4801C3              <1>     add rbx, rax
   486 00001651 EBDE                <1>     jmp short .ok
   487                              <1> memSysHalt:
   488                              <1> ;Only arrive here if the integrity of the system is not verified
   489                              <1> ;Lock the system
   490 00001653 C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   491 0000165A C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   492 00001661 66C705(67C30300)07- <1>     mov word [errorExCde], errMCBbad   ;Destroyed MCB chain
   492 00001669 00                  <1>
   493 0000166A C605(69C30300)05    <1>     mov byte [errorAction], eActKil ;Abort the system
   494 00001671 488D150E000000      <1>     lea rdx, .sysHltString
   495 00001678 B409                <1>     mov ah, 09h
   496 0000167A CD41                <1>     int 41h
   497                              <1>     ;Only halt IRQ's in production!
   498                              <1>     %if !DEBUG
   499 0000167C FA                  <1>     cli ;Halt interrupts
   500 0000167D B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
   501 0000167F E6A1                <1>     out 0A1h, al
   502 00001681 E621                <1>     out 021h, al
   503                              <1>     %endif
   504 00001683 F4                  <1>     hlt             ;Halt the system
   505 00001684 EBFD                <1>     jmp short $ - 1 ;Go back far enough to capture the hlt
   506 00001686 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
   506 0000168F 6C6F636174696F6E20- <1>
   506 00001698 6572726F720D0A      <1>
   507 0000169F 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
   507 000016A8 616420434F4D4D414E- <1>
   507 000016B1 442C2073797374656D- <1>
   507 000016BA 2068616C74656424    <1>
    29                                  %include "./Source/Kernel/MemExec/execTerm.asm"
    30                              <1> ;EXEC and all default terminates are here
    31                              <1> 
    32                              <1> ;========================
    33                              <1> ;   Interrupt handlers
    34                              <1> ;========================
    35                              <1> terminateProcess:   ;Int 40h
    36 000016C2 48CF                <1>     iretq
    37                              <1> terminateRes:       ;Int 47h
    38 000016C4 48CF                <1>     iretq
    39                              <1> ;========================
    40                              <1> ;    Int 21h functions
    41                              <1> ;========================
    42                              <1> simpleTerminate:   ;ah = 00h
    43 000016C6 C3                  <1>     ret
    44                              <1> terminateStayRes:  ;ah = 31h
    45 000016C7 C3                  <1>     ret
    46                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    47 000016C8 C3                  <1>     ret
    48                              <1> terminateClean:    ;ah = 4Ch, EXIT
    49 000016C9 C3                  <1>     ret
    30                                  %include "./Source/Kernel/Local/Local.asm"
    31                              <1> ;Localisation based functions live here
    32                              <1> 
    33                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    34                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    35                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    36                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    37 000016CA C3                  <1>     ret
    31                                  %include "./Source/Kernel/ctrlc.asm"
    32                              <1> diskErr:
    33 000016CB 80CC00              <1>     or ah, 00h
    34 000016CE EB08                <1>     jmp short criticalErrorSetup
    35                              <1> asciiCharDevErr:
    36 000016D0 80CC00              <1>     or ah, 00h
    37 000016D3 EB03                <1>     jmp short criticalErrorSetup
    38                              <1> binaryCharDevErr:
    39                              <1> ;Called with ah with additional bits
    40 000016D5 80CC38              <1>     or ah, 38h  ;Ignore,Retry,Fail OK
    41                              <1> criticalErrorSetup:
    42 000016D8 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    43 000016DE 48892D(21C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp should be NULLPTR
    44 000016E5 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    45                              <1>     ;For now, fall through, but change it later! 
    46                              <1> 
    47                              <1> 
    48                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    49                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    50                              <1> ; to the critical error handler.
    51                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    52                              <1> ; and with Int44Bitfield set
    53                              <1> ;               AH = Critical Error Bitfield
    54                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    55                              <1> ;               Bit 6 - Reserved
    56                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    57                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    58                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    59                              <1> ;               Bits [2-1] = Affected Disk Error
    60                              <1> ;                     0 0   DOS area
    61                              <1> ;                     0 1   FAT area
    62                              <1> ;                     1 0   Directory area
    63                              <1> ;                     1 1   Data area
    64                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    65                              <1> ;               AL  = Failing drive number if AH[7] = 0
    66                              <1> ;               DIL = Error code for errorMsg
    67                              <1> ;               RSI = EA of Device Header for which device the error occured
    68                              <1> ;Return:
    69                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    70                              <1> ;                  = 1 - Retry the Operation    (Retry)
    71                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
    72                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    73                              <1> ; Return response from int 44h in al
    74                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
    75                              <1> ; This function will terminate the program if an abort was requested!
    76                              <1> ; This function also destroys RBP
    77 000016EB 803D(63C30300)01    <1>     cmp byte [critErrFlag], 1
    78 000016F2 7204                <1>     jb .noIntError  ;If not 0, enter
    79 000016F4 B003                <1>     mov al, critFail    ;Else, return Fail always
    80 000016F6 EB34                <1>     jmp short .checkResponse
    81                              <1> .noIntError:
    82 000016F8 FA                  <1>     cli ;Disable Interrupts
    83 000016F9 FE05(63C30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
    84 000016FF FE0D(64C30300)      <1>     dec byte [inDOS]    ;Exiting DOS
    85 00001705 488925(B9C30300)    <1>     mov qword [xInt44hRSP], rsp
    86 0000170C 488B25(D3C30300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    87 00001713 31ED                <1>     xor ebp, ebp
    88 00001715 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
    89 00001717 488B25(B9C30300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    90 0000171E C605(63C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    91 00001725 FE05(64C30300)      <1>     inc byte [inDOS]    ;Reenter DOS
    92 0000172B FB                  <1>     sti ;Reenable Interrupts
    93                              <1>     ;Now we check that the response given was allowed, and translate if needed
    94                              <1> .checkResponse:
    95 0000172C 3C01                <1>     cmp al, critRetry
    96 0000172E 7217                <1>     jb .checkIgnore
    97 00001730 7420                <1>     je .checkRetry
    98 00001732 3C03                <1>     cmp al, critFail
    99 00001734 752F                <1>     jne .abort   ;Must be abort
   100                              <1> ;Here is for fail
   101 00001736 F605(C1C30300)08    <1>     test byte [Int44bitfld], critFailOK
   102 0000173D 7526                <1>     jnz .abort
   103                              <1> .exit:
   104 0000173F C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   105 00001746 C3                  <1>     ret
   106                              <1> .checkIgnore:
   107 00001747 F605(C1C30300)20    <1>     test byte [Int44bitfld], critIgnorOK
   108 0000174E 75EF                <1>     jnz .exit
   109 00001750 EB09                <1>     jmp short .setFail
   110                              <1> .checkRetry:
   111 00001752 F605(C1C30300)10    <1>     test byte [Int44bitfld], critRetryOK
   112 00001759 75E4                <1>     jnz .exit
   113                              <1> .setFail:
   114 0000175B B003                <1>     mov al, critFail
   115 0000175D FE05(C2C30300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   116 00001763 EBC7                <1>     jmp short .checkResponse    ;Double check if I can return Fail
   117                              <1> .abort:
   118                              <1> ;Prepare to abort. We abort from within!
   119                              <1> ;Currently fall into ^C
   120                              <1> ctrlBreakHdlr:
   121                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   122 00001765 FA                  <1> 	cli
   123 00001766 488B25(D3C30300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   124 0000176D E855060000          <1> 	call dosPopRegs ;Get user state back
   125 00001772 488925(83C30300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   126 00001779 F8                  <1>     clc
   127 0000177A CD43                <1>     int 43h ;Call critical error handler
   128 0000177C FA                  <1>     cli ;Clear interrupts again
   129 0000177D 488905(8FC30300)    <1>     mov qword [oldRAX], rax ;Save rax
   130 00001784 9C                  <1>     pushfq  ;Get flags in rax
   131 00001785 58                  <1>     pop rax 
   132 00001786 483B25(83C30300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   133 0000178D 750C                <1>     jne .checkCF
   134                              <1> .returnToDOS:
   135 0000178F 488B05(8FC30300)    <1>     mov rax, qword [oldRAX]
   136 00001796 E9D2040000          <1>     jmp functionDispatch    ;Goto int 41h
   137                              <1> .checkCF:
   138 0000179B 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   139 000017A2 A801                <1>     test al, 1  ;CF set?
   140 000017A4 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   141 000017A6 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   142 000017AB C605(E4C30300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   143 000017B2 E9B6040000          <1>     jmp functionDispatch
   144                              <1> 
    32                                  %include "./Source/Kernel/dosPrim.asm"
    33                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    34                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    35                              <1> 
    36                              <1> dosDefCritErrHdlr:
    37                              <1> ;The DOS default critical error handler always returns FAIL
    38 000017B7 B003                <1>     mov al, critFail
    39 000017B9 48CF                <1>     iretq
    40                              <1> 
    41                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    42                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    43                              <1> ;       rbx = Ptr to the request header for the driver call!
    44 000017BB E849060000          <1>     call dosCrit2Enter
    45 000017C0 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    46 000017C3 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    47 000017C6 E848060000          <1>     call dosCrit2Exit
    48 000017CB C3                  <1>     ret
    49                              <1> 
    50                              <1> setupPhysicalDiskRequest:
    51                              <1> ;Ensure that al has valid disk number
    52                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    53                              <1> ;If CF=NC, rbp = DPB ptr.
    54                              <1> ;If CF=CY, exit error
    55 000017CC 84C0                <1>     test al, al
    56 000017CE 723F                <1>     jc .diskError
    57 000017D0 3A05(69C00300)      <1>     cmp al, byte [lastdrvNum]
    58 000017D6 7337                <1>     jae .diskError
    59 000017D8 50                  <1>     push rax
    60 000017D9 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    61 000017DB E8EA030000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    62 000017E0 58                  <1>     pop rax
    63 000017E1 7235                <1>     jc .error
    64 000017E3 8805(4FC50300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    65 000017E9 488B2D(58C50300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    66 000017F0 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    67 000017F8 750A                <1>     jnz .netError
    68 000017FA 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    69 000017FE E832030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    70 00001803 C3                  <1>     ret
    71                              <1> .netError:
    72 00001804 66C705(67C30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    72 0000180C 00                  <1>
    73 0000180D EB09                <1>     jmp short .error
    74                              <1> .diskError:
    75 0000180F 66C705(67C30300)0F- <1>     mov word [errorExCde], errBadDrv
    75 00001817 00                  <1>
    76                              <1> .error:
    77 00001818 C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk
    78 0000181F C605(69C30300)07    <1>     mov byte [errorAction], eActRetUsr
    79 00001826 C605(6AC30300)09    <1>     mov byte [errorClass], eClsBadFmt
    80 0000182D F9                  <1>     stc
    81 0000182E C3                  <1>     ret
    82                              <1> 
    83                              <1> setupAbsDiskEntry:
    84                              <1> ;Prepares to sets up the CDS and DPB for the request
    85 0000182F FE05(64C30300)      <1>     inc byte [inDOS]
    86 00001835 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    87 00001836 FC                  <1>     cld ;Set string ops in the right direction
    88 00001837 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    89 0000183C 7223                <1>     jc .exit    ;Error exit
    90 0000183E C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    91 00001845 56                  <1>     push rsi
    92 00001846 50                  <1>     push rax
    93 00001847 488D35(42C40300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    94 0000184E 8806                <1>     mov byte [rsi], al  ;Construct a path
    95 00001850 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    96 00001853 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
    97 00001857 F8                  <1>     clc
    98                              <1> ;++++++++++++++++++++++++++++
    99                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   100                              <1> ;Entered with path in rsi (ah=03h)
   101 00001858 B800030000          <1>     mov eax, 0300h  
   102 0000185D CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   103                              <1> ;++++++++++++++++++++++++++++
   104 0000185F 58                  <1>     pop rax
   105 00001860 5E                  <1>     pop rsi
   106                              <1> .exit:
   107 00001861 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   108 00001863 C3                  <1>     ret
   109                              <1> 
   110                              <1> absDiskWrite:       ;Int 46h
   111                              <1> ;al = Drive number
   112                              <1> ;rbx = Memory Buffer address to read from
   113                              <1> ;ecx = Number of sectors to write
   114                              <1> ;rdx = Start LBA to write to
   115 00001864 FA                  <1>     cli
   116 00001865 488925(D3C30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   117 0000186C 488D25(20D80300)    <1>     lea rsp, DiskStakTop
   118 00001873 55                  <1>     push rbp
   119 00001874 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   120 00001875 E8B5FFFFFF          <1>     call setupAbsDiskEntry
   121 0000187A 7252                <1>     jc absDiskExit
   122 0000187C E8E2010000          <1>     call primReqWriteSetup
   123 00001881 EB1D                <1>     jmp short absDiskReadWriteCommon
   124                              <1> absDiskRead:        ;Int 45h
   125                              <1> ;al = Drive number
   126                              <1> ;rbx = Memory Buffer address to write to
   127                              <1> ;ecx = Number of sectors to read
   128                              <1> ;rdx = Start LBA to read from
   129 00001883 FA                  <1>     cli 
   130 00001884 488925(D3C30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   131 0000188B 488D25(20D80300)    <1>     lea rsp, DiskStakTop
   132 00001892 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   133 00001893 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   134 00001894 E896FFFFFF          <1>     call setupAbsDiskEntry
   135 00001899 7233                <1>     jc absDiskExit
   136 0000189B E8CE010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   137                              <1> absDiskReadWriteCommon:
   138                              <1> ;Entered with the appropriate function number in ah
   139                              <1> ; and primary request header in rbx
   140 000018A0 E83B000000          <1>     call absDiskDriverCall
   141 000018A5 7427                <1>     jz absDiskExit  ;Skip error code checking
   142 000018A7 8A05(1BC40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   143                              <1>     ;DOS uses the following pairs in a table
   144                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   145 000018AD B480                <1>     mov ah, 80h ;Attachment failure
   146 000018AF 3C0C                <1>     cmp al, 0Ch ;Gen error
   147 000018B1 741A                <1>     je .absExit
   148 000018B3 B440                <1>     mov ah, 40h ;Seek error
   149 000018B5 3C06                <1>     cmp al, 06h
   150 000018B7 7414                <1>     je .absExit
   151 000018B9 B408                <1>     mov ah, 08h ;Bad CRC
   152 000018BB 3C04                <1>     cmp al, 04h
   153 000018BD 740E                <1>     je .absExit
   154 000018BF B404                <1>     mov ah, 04h ;Sector not found
   155 000018C1 3C08                <1>     cmp al, 08h
   156 000018C3 7408                <1>     je .absExit
   157 000018C5 30E4                <1>     xor ah, ah  ;Write Protect Violation
   158 000018C7 84C0                <1>     test al, al
   159 000018C9 7402                <1>     je .absExit
   160 000018CB B402                <1>     mov ah, 02h ;Other Error
   161                              <1> .absExit:
   162 000018CD F9                  <1>     stc
   163                              <1> absDiskExit:
   164 000018CE 5B                  <1>     pop rbx
   165 000018CF 5D                  <1>     pop rbp
   166 000018D0 FA                  <1>     cli
   167 000018D1 FE0D(64C30300)      <1>     dec byte [inDOS]
   168 000018D7 488B25(D3C30300)    <1>     mov rsp, qword [oldRSP]
   169 000018DE FB                  <1>     sti ;Reenable interrupts
   170 000018DF C3                  <1>     ret ;Return from interrupt without popping flags!
   171                              <1> absDiskDriverCall:
   172                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   173                              <1> ;       rbx = Request header address
   174                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   175                              <1> ;       eax = Status word from request
   176                              <1> ;       ecx = Number of sectors transferred
   177 000018E0 56                  <1>     push rsi
   178                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   179 000018E1 8B0D(2EC40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   180                              <1>     ;Prepare for goDriver now
   181 000018E7 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   182 000018EB E8CBFEFFFF          <1>     call goDriver   ;Make request
   183 000018F0 5E                  <1>     pop rsi
   184 000018F1 8B05(2EC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   185 000018F7 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   186 000018F9 0FB705(1BC40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   187 00001900 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   188 00001904 C3                  <1>     ret
   189                              <1> 
   190                              <1> getDiskDPB:
   191                              <1> ;Gets the disk DPB if the Disk is physical
   192                              <1> ;Otherwise will return a pointer to the drive DPB
   193                              <1> ;Called with rdi pointing to the CDS
   194                              <1> ;CF=NC => RBP=DPBptr, CF=CY => Error exit
   195 00001905 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   196 00001909 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   197 0000190C 8805(4FC50300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   198 00001912 E81E020000          <1>     call setWorkingDPB
   199 00001917 57                  <1>     push rdi    ;Save the CDS ptr
   200 00001918 E838000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   201 0000191D 5F                  <1>     pop rdi
   202 0000191E 7234                <1>     jc .exitBad ;Preserve CF
   203 00001920 7531                <1>     jnz .exit
   204                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   205 00001922 8A0D(69C00300)      <1>     mov cl, byte [lastdrvNum]
   206 00001928 4831C0              <1>     xor rax, rax
   207 0000192B 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   208 0000192E 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   209 00001932 488B3D(56C00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   210                              <1> .checkCDS:
   211 00001939 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   212 0000193D 7509                <1>     jne .next
   213 0000193F 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   214 00001943 7403                <1>     jz .next    ;IF yes, skip it
   215 00001945 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   216                              <1> .next:
   217 00001948 4881C75B000000      <1>     add rdi, cds_size
   218 0000194F FEC9                <1>     dec cl
   219 00001951 75E6                <1>     jnz .checkCDS
   220                              <1> .exit:
   221 00001953 F8                  <1>     clc
   222                              <1> .exitBad:
   223 00001954 C3                  <1>     ret
   224                              <1> 
   225                              <1> ensureDiskValid:
   226                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   227                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   228                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   229                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   230                              <1> .medChk:
   231 00001955 E85D010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   232                              <1> ;Return in rbx the req hdr address
   233 0000195A 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   234 0000195E E858FEFFFF          <1>     call goDriver   ;Request!
   235 00001963 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   236 00001967 F7C700800000        <1>     test edi, drvErrStatus
   237 0000196D 756C                <1>     jnz .diskDrvCritErrMedChk
   238                              <1> .medChkIgnore:
   239 0000196F 8A05(4FC50300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   240 00001975 30E4                <1>     xor ah, ah
   241 00001977 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   242 0000197A 84630E              <1>     test byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   243 0000197D 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   244 0000197F 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   245 00001981 E857EDFFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   246 00001986 F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   247 00001987 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   248                              <1>     ;ZF=NZ from test for dirty buffers
   249                              <1> .exit:
   250 00001989 C3                  <1>     ret
   251                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   252 0000198A C605(28D80300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   253 00001991 E86BEDFFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   254                              <1>     ;Get a buffer to read BPB into in rdi
   255 00001996 B101                <1>     mov cl, dosBuffer
   256 00001998 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   257 0000199A E884EDFFFF          <1>     call getBuffer ;Get a disk buffer
   258 0000199F 72E8                <1>     jc .exit    ;Immediately exit with the carry flag set
   259 000019A1 4889DF              <1>     mov rdi, rbx
   260                              <1> .repeatEP:
   261 000019A4 E83A010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   262 000019A9 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   263 000019AD E809FEFFFF          <1>     call goDriver   ;Request!
   264 000019B2 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   265 000019B6 A900800000          <1>     test eax, drvErrStatus
   266 000019BB 7565                <1>     jnz .diskDrvCritErrBPB
   267                              <1>     ;Now rebuild the dpb fields for this drive
   268 000019BD 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   269 000019C1 E89A060000          <1>     call createDPB  
   270                              <1>     ;Adjust the buffer header information
   271 000019C6 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   272 000019C9 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   273 000019CC 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   274 000019CF 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   275 000019D2 30E4                <1>     xor ah, ah
   276 000019D4 8825(28D80300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   277 000019DA C3                  <1>     ret
   278                              <1> .diskDrvCritErrMedChk:
   279                              <1> ;Critical Errors fall through here
   280                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   281 000019DB 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   282 000019E2 48892D(21C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   283 000019E9 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   284 000019EC B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   285 000019EE 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   286 000019F4 E8F2FCFFFF          <1>     call criticalDOSError
   287 000019F9 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   288 00001A00 488B2D(21C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   289 00001A07 3C01                <1>     cmp al, critRetry
   290 00001A09 0F8446FFFFFF        <1>     je .medChk
   291 00001A0F 3C00                <1>     cmp al, critIgnore
   292 00001A11 0F8458FFFFFF        <1>     je .medChkIgnore
   293 00001A17 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   293 00001A1F 00                  <1>
   294 00001A20 F9                  <1>     stc ;Set error flag to indicate fail
   295 00001A21 C3                  <1>     ret ;And exit from function with CF set
   296                              <1> 
   297                              <1> .diskDrvCritErrBPB:
   298                              <1>     ;eax has status word, rbp has dpb ptr
   299                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   300 00001A22 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   301 00001A29 48892D(21C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   302 00001A30 89C7                <1>     mov edi, eax    ;Transfer the status word over
   303 00001A32 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   304 00001A35 B418                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK ;Set bits
   305 00001A37 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   306 00001A3D E8A9FCFFFF          <1>     call criticalDOSError
   307 00001A42 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   308 00001A49 488B2D(21C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   309 00001A50 3C01                <1>     cmp al, critRetry
   310 00001A52 0F844CFFFFFF        <1>     je .repeatEP
   311                              <1>     ;Else we fail (Ignore=Fail here)
   312 00001A58 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   312 00001A60 00                  <1>
   313 00001A61 F9                  <1>     stc ;Set error flag to indicate fail
   314 00001A62 C3                  <1>     ret ;And exit from function with CF set
   315                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   316                              <1> ;           Primitive Driver Requests
   317                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   318                              <1> ;First are Disk requests, then Char device requests
   319                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   320                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   321                              <1> 
   322                              <1> primReqWriteSetup:
   323 00001A63 50                  <1>     push rax
   324 00001A64 B408                <1>     mov ah, drvWRITE    ;Command code
   325 00001A66 0225(2CC30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   326 00001A6C EB03                <1>     jmp short primReqRWCommon
   327                              <1> primReqReadSetup:
   328 00001A6E 50                  <1>     push rax
   329 00001A6F B404                <1>     mov ah, drvREAD
   330                              <1> primReqRWCommon:
   331                              <1> ;Sets up the IO request packet with:
   332                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   333                              <1> ; rbx = Data storage buffer ptr
   334                              <1> ; ecx = Number of sectors to transfer
   335                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   336                              <1> ; ~~~~ Set by entry function ~~~~ 
   337                              <1> ; ah = Command code
   338                              <1> ; All regs preserved EXCEPT rbx.
   339                              <1> ; Return: rbx = Transfer Address
   340 00001A71 48891D(26C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   341 00001A78 890D(2EC40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   342 00001A7E C605(18C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   343 00001A85 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   344 00001A8A 8905(19C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   345 00001A90 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   346 00001A93 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   347                              <1>     ;Disk operations only here!
   348 00001A95 488915(32C40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   349 00001A9C 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   350 00001A9F 8805(25C40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   351 00001AA5 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   352 00001AA8 8805(19C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   353                              <1> primReqCommonExit:
   354                              <1> ;Returns in rbx the primary request header as these functions
   355                              <1> ; setup the request in the primary request header space
   356 00001AAE 58                  <1>     pop rax
   357 00001AAF 488D1D(18C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   358 00001AB6 C3                  <1>     ret
   359                              <1> 
   360                              <1> primReqMedCheckSetup:
   361                              <1> ;Prepare the diskIO packet for mediacheck
   362                              <1> ;rbp has DPB pointer for device to check media on
   363 00001AB7 50                  <1>     push rax
   364 00001AB8 C605(18C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   365 00001ABF 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   366 00001AC2 8805(25C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   367 00001AC8 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   368 00001ACB 8805(19C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   369 00001AD1 C605(1AC40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   370 00001AD8 66C705(1BC40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   370 00001AE0 00                  <1>
   371 00001AE1 EBCB                <1>     jmp short primReqCommonExit
   372                              <1> 
   373                              <1> primReqGetBPBSetup:
   374                              <1> ;rbp has DPB pointer for device
   375                              <1> ;rdi has sector buffer header pointer for transfer
   376 00001AE3 50                  <1>     push rax
   377 00001AE4 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   378 00001AE8 48893D(26C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   379 00001AEF C605(18C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   380 00001AF6 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   381 00001AF9 8805(25C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   382 00001AFF 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   383 00001B02 8805(19C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   384 00001B08 C605(1AC40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   385 00001B0F 66C705(1BC40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   385 00001B17 00                  <1>
   386 00001B18 EB94                <1>     jmp short primReqCommonExit
   387                              <1> 
   388                              <1> secdReqCharIOReq:
   389                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   390                              <1> ;Input:
   391                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   392                              <1> ; ecx = Length of buffer
   393                              <1> ; rdi = Buffer pointer
   394                              <1> ;Output: 
   395                              <1> ; rbx = Transfer Address 
   396 00001B1A 488D1D(EEC30300)    <1>     lea rbx, secdReqHdr
   397 00001B21 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   398 00001B24 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   399 00001B27 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   400 00001B2D 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   401 00001B31 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   402 00001B34 C3                  <1>     ret
   403                              <1> ;If the device which will process this request is a disk device
   404                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   405                              <1> ;Then we will read the appropriate byte from that buffer to the 
   406                              <1> ; singleIOByt buffer.
   407                              <1> ;Such a request will require additional setup with the following fields:
   408                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    33                                  %include "./Source/Kernel/dosUtils.asm"
    34                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    35                              <1> 
    36                              <1> ;Basic Drive related Utilities
    37                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    38                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    39                              <1> ; that gets set up)
    40                              <1> 
    41                              <1> setWorkingDPB:
    42                              <1> ;Gets dpb in rbp and saves to curDrvDPB (working dpb)
    43 00001B35 48892D(50C50300)    <1>     mov qword [workingDPB], rbp
    44 00001B3C C3                  <1>     ret
    45                              <1> 
    46                              <1> getUserRegs:   ;Int 4Fh AX=1218h
    47                              <1> ;Returns ptr to user regs in rsi
    48 00001B3D 488B35(D3C30300)    <1>     mov rsi, qword [oldRSP]
    49 00001B44 C3                  <1>     ret
    50                              <1> 
    51                              <1> walkDPBchain:
    52                              <1> ;Called with al = 0 based drive number
    53                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    54 00001B45 488B35(34C00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    55                              <1> .walk:
    56 00001B4C 4881FEFFFFFFFF      <1>     cmp rsi, -1
    57 00001B53 740A                <1>     je .exitBad
    58 00001B55 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    59 00001B57 7407                <1>     je .exit    ;Drive found
    60 00001B59 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    61 00001B5D EBED                <1>     jmp short .walk
    62                              <1> .exitBad:
    63 00001B5F F9                  <1>     stc
    64                              <1> .exit:
    65 00001B60 C3                  <1>     ret
    66                              <1> setDrive:   
    67                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
    68                              <1> ;Input: al = 1-based drive number
    69                              <1> ;Output: al = 0-based drive number
    70                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
    71                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
    72                              <1> ;            set.
    73 00001B61 E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
    74 00001B66 7212                <1>     jc .exit    ;Carry the CF flag if not Physical
    75 00001B68 56                  <1>     push rsi
    76 00001B69 488B35(58C50300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
    77 00001B70 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
    78 00001B76 5E                  <1>     pop rsi
    79 00001B77 7401                <1>     jz .exit
    80 00001B79 F9                  <1>     stc
    81                              <1> .exit:
    82 00001B7A C3                  <1>     ret
    83                              <1> 
    84                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
    85                              <1> ;Allows a redirector or subst/join to build a CDS
    86                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
    87                              <1> ; volumes, that are made at system boot.
    88                              <1> ;Input: al = Drive Letter for drive
    89                              <1> ;       workingCDS = Set to the CDS array slot for the drive
    90                              <1> ;Output: rdi = newly filled in workingCDS
    91                              <1> ;CF=NC => CDS valid and has a DPB
    92                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
    93 00001B7B 50                  <1>     push rax
    94 00001B7C 2C40                <1>     sub al, "A"-1
    95 00001B7E 3A05(68C00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
    96 00001B84 488B3D(58C50300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
    97 00001B8B 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
    98 00001B91 58                  <1>     pop rax
    99 00001B92 7235                <1>     jb .exit    ;Exit with CF=CY
   100 00001B94 50                  <1>     push rax
   101 00001B95 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   102 00001B9A 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   103 00001B9C 58                  <1>     pop rax
   104 00001B9D 66814F430040        <1>     or word [rdi + cds.wFlags], cdsPhysDrive    ;Config bit set
   105 00001BA3 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   106 00001BAA 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   107 00001BB2 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   108                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   109 00001BB8 50                  <1>     push rax
   110 00001BB9 56                  <1>     push rsi
   111 00001BBA 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   112 00001BBC E884FFFFFF          <1>     call walkDPBchain
   113 00001BC1 7204                <1>     jb .skipSettingDPB
   114 00001BC3 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   115                              <1> .skipSettingDPB:
   116 00001BC7 5E                  <1>     pop rsi
   117 00001BC8 58                  <1>     pop rax
   118                              <1> .exit:
   119 00001BC9 C3                  <1>     ret
   120                              <1> 
   121                              <1> getCDS:     ;Int 4Fh AX=1219h
   122                              <1> ;Gets the device DPB and saves it in the DOS variable
   123                              <1> ;This can be called to get CDS for network drives too!
   124                              <1> ;Input: al = 1 based drive number
   125                              <1> ;Sets workingCDS var with the CDS for the device. 
   126                              <1> ;   If device on a network, sets CF
   127                              <1> ;Returns al with 0-based drive number
   128 00001BCA 84C0                <1>     test al, al
   129 00001BCC 7508                <1>     jnz .skip
   130 00001BCE 8A05(8DC30300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   131 00001BD4 FEC0                <1>     inc al
   132                              <1> .skip:
   133 00001BD6 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   134 00001BD8 56                  <1>     push rsi
   135 00001BD9 C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   136 00001BE0 F605(4EC50300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   137 00001BE7 7423                <1>     jz .physDrive
   138                              <1>     ;Invokation via 21/5D00, not yet fully supported
   139                              <1>     ;If returned with CF=CY, consider it an error for now
   140 00001BE9 50                  <1>     push rax
   141 00001BEA 57                  <1>     push rdi
   142 00001BEB 488D3D(68C50300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   143 00001BF2 48893D(58C50300)    <1>     mov qword [workingCDS], rdi ;Make it current
   144 00001BF9 0441                <1>     add al, "A" ;Convert to a drive letter
   145 00001BFB E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   146 00001C00 66F747430040        <1>     test word [rdi + cds.wFlags], cdsPhysDrive  ;Is the CDS valid?
   147 00001C06 5F                  <1>     pop rdi
   148 00001C07 58                  <1>     pop rax
   149 00001C08 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   150 00001C0A EB17                <1>     jmp short .exitOk   ;All oki
   151                              <1> .physDrive:
   152 00001C0C E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   153 00001C11 7208                <1>     jc .exitBad
   154 00001C13 66F746430040        <1>     test word [rsi + cds.wFlags], cdsPhysDrive
   155 00001C19 7508                <1>     jnz .exitOk ;Exit with flag cleared
   156                              <1>     ;Else Return to unknown error locus
   157                              <1> .exitBad:
   158 00001C1B C605(66C30300)01    <1>     mov byte [errorLocus], eLocUnk
   159                              <1> .exitBad1:
   160 00001C22 F9                  <1>     stc
   161                              <1> .exitOk:
   162 00001C23 5E                  <1>     pop rsi
   163 00001C24 C3                  <1>     ret
   164                              <1> 
   165                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   166                              <1>     ;Gets the CDS for the current drive in al
   167                              <1>     ;Input: al = Drive number, 0 = A ...
   168                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   169                              <1>     ;        CF=CY => al not valid
   170 00001C25 3A05(69C00300)      <1>     cmp al, byte [lastdrvNum]
   171 00001C2B 7202                <1>     jb .ctn
   172 00001C2D F9                  <1>     stc 
   173 00001C2E C3                  <1>     ret
   174                              <1> .ctn:
   175 00001C2F 50                  <1>     push rax
   176 00001C30 52                  <1>     push rdx
   177 00001C31 0FB6C0              <1>     movzx eax, al
   178 00001C34 48BE5B000000000000- <1>     mov rsi, cds_size
   178 00001C3D 00                  <1>
   179 00001C3E 31D2                <1>     xor edx, edx
   180 00001C40 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip
   181 00001C42 488D05(56C00300)    <1>     lea rax, qword [cdsHeadPtr] ;Get the first CDS
   182 00001C49 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   183 00001C4C 488935(58C50300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   184 00001C53 5A                  <1>     pop rdx
   185 00001C54 58                  <1>     pop rax
   186 00001C55 F8                  <1>     clc
   187 00001C56 C3                  <1>     ret
   188                              <1> 
   189                              <1> 
   190                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   191                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   192                              <1> ;Input: AL = Char to normalise.
   193                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   194                              <1> ;If path separator, set ZF=ZE
   195 00001C57 3C5C                <1>     cmp al, "\"
   196 00001C59 7406                <1>     je .exit
   197 00001C5B 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   198 00001C5D 7502                <1>     jne .exit
   199 00001C5F B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   200                              <1> .exit:
   201 00001C61 C3                  <1>     ret
   202                              <1> 
   203                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   204                              <1> ;Convert a lowercase char to uppercase
   205                              <1> ; Leave alone uppercase chars and invalid chars
   206                              <1> ;Input: al = Char to convert to uppercase
   207                              <1> ;Output: al = Processed char
   208 00001C62 3C7A                <1>     cmp al, "z"
   209 00001C64 7706                <1>     ja .exit
   210 00001C66 3C61                <1>     cmp al, "a"
   211 00001C68 7202                <1>     jb .exit
   212 00001C6A 2C20                <1>     sub al, "a" - "A"   ;Convert the char
   213                              <1> .exit:
   214 00001C6C C3                  <1>     ret
    34                                  %include "./Source/Kernel/dosMain.asm"
    35                              <1> ;-----------------------------------:
    36                              <1> ;        Main Kernel dispatch       :
    37                              <1> ;            and routines           :
    38                              <1> ;-----------------------------------:
    39                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    40                              <1> ;ah = Function number, all other registers have various meanings
    41                              <1>  %if DEBUG
    42                              <1>     ;Entry function
    43                              <1>     debugEnterM
    44                              <1>     lea rbp, .l0000
    45                              <1>     call debPrintNullString
    46                              <1>     call debPrintFunctionName
    47                              <1>     jmp short .l0001
    48                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    49                              <1> .l0001:    
    50                              <1>     debugExitM
    51                              <1>     %endif
    52 00001C6D FA                  <1>     cli ;Halt external interrupts
    53 00001C6E FC                  <1>     cld ;Ensure all string ops occur in the right direction
    54 00001C6F 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    55 00001C72 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    56                              <1>     ;Cherry pick functions
    57 00001C78 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    58 00001C7B 722C                <1>     jb .fsbegin   ;If below skip these checks
    59 00001C7D 0F849A010000        <1>     je ctrlBreakCheck
    60 00001C83 80FC64              <1>     cmp ah, 64h
    61 00001C86 0F84DA010000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    62 00001C8C 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    63 00001C8E 80FC51              <1>     cmp ah, 51h
    64 00001C91 0F84BD010000        <1>     je getCurrProcessID    ;This and below are exactly the same
    65 00001C97 80FC62              <1>     cmp ah, 62h
    66 00001C9A 0F84BD010000        <1>     je getPSPaddr          ;Calls the above function
    67 00001CA0 80FC50              <1>     cmp ah, 50h
    68 00001CA3 0F84A2010000        <1>     je setCurrProcessID
    69                              <1> .fsbegin:
    70 00001CA9 E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    71 00001CAE 48891D(DBC30300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    72 00001CB5 66C705(9FC30300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    72 00001CBD 00                  <1>
    73 00001CBE 488B05(D3C30300)    <1>     mov rax, qword [oldRSP]
    74 00001CC5 488905(C3C30300)    <1>     mov qword [oldoldRSP], rax
    75 00001CCC FE05(64C30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    76 00001CD2 488925(D3C30300)    <1>     mov qword [oldRSP], rsp
    77                              <1> ;Network related variable resetting
    78 00001CD9 C605(4EC50300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    79                              <1> ;Here, we want to save oldRSP in the callers PSP
    80 00001CE0 803D(64C30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    81 00001CE7 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    82 00001CE9 488B05(7BC30300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    83 00001CF0 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    84                              <1> .fsb1:
    85 00001CF4 58                  <1>     pop rax     ;Get old rax back
    86 00001CF5 50                  <1>     push rax    ;and push it back onto the stack
    87 00001CF6 488D25(51CB0300)    <1>     lea rsp, critStakTop
    88 00001CFD FB                  <1>     sti         ;Reenable interrupts
    89                              <1> 
    90 00001CFE 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    91 00001D00 881D(EBC30300)      <1>     mov byte [vConDrvFlg], bl   ;Clear the conDrvFlg (use default CON driver)
    92 00001D06 C605(ECC30300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    93 00001D0D 881D(C2C30300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
    94 00001D13 881D(E3C30300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    95                              <1> 
    96 00001D19 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    97 00001D1A 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    98 00001D1C D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    99 00001D1E 488D05F5E2FFFF      <1>     lea rax, kDispTbl
   100 00001D25 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   101 00001D28 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   102 00001D2C 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   103 00001D2F 58                  <1>     pop rax
   104                              <1> 
   105 00001D30 84E4                <1>     test ah, ah     ;Simple Terminate function?
   106 00001D32 741C                <1>     jz .fddiskOp
   107 00001D34 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   108 00001D37 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   109 00001D39 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   110 00001D3C 7712                <1>     ja .fddiskOp
   111                              <1> ;Char operations here
   112 00001D3E F605(63C30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   113 00001D45 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   114 00001D47 488D25(E0D10300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   115 00001D4E EB40                <1>     jmp short .fdGoToFunction
   116                              <1> .fddiskOp:
   117                              <1>     ;Disk operations go here
   118                              <1>     ;Save rax on entry to a disk funciton
   119 00001D50 488905(8FC30300)    <1>     mov qword [oldRAX], rax
   120                              <1>     ;Clear up error info
   121 00001D57 C605(66C30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   122 00001D5E C605(63C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   123 00001D65 C605(65C30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   124                              <1> 
   125 00001D6C 50                  <1>     push rax
   126 00001D6D B482                <1>     mov ah, 82h ;Cancel all critical section!
   127 00001D6F CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   128 00001D71 58                  <1>     pop rax
   129                              <1> 
   130 00001D72 C605(ECC30300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   131 00001D79 488D25(20D80300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   132 00001D80 F605(8EC30300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   133 00001D87 7407                <1>     jz .fdGoToFunction
   134                              <1> ; HANDLE CTRL+BREAK HERE!
   135 00001D89 50                  <1>     push rax
   136 00001D8A E8C6EEFFFF          <1>     call checkBreakOnCon    ; Check for a ^C in the CON buffer
   137 00001D8F 58                  <1>     pop rax
   138                              <1> .fdGoToFunction:
   139 00001D90 48871D(DBC30300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   140                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   141                              <1>     ;
   142                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   143                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   144                              <1>     ;
   145                              <1>     %if DEBUG && REGS
   146                              <1>     ;Print stack if necessary function
   147                              <1>     debugEnterM
   148                              <1>     call debPrintDOSStack
   149                              <1>     debugExitM
   150                              <1>     %endif
   151 00001D97 FF15(DBC30300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   152                              <1>     %if DEBUG
   153                              <1>     ;Entry function
   154                              <1>     debugEnterM
   155                              <1>     lea rbp, .l0002
   156                              <1>     call debPrintNullString
   157                              <1>     jmp short .l0003
   158                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   159                              <1> .l0003:    
   160                              <1>     debugExitM
   161                              <1>     %endif
   162                              <1>     %if DEBUG && REGS
   163                              <1>     ;Exit function
   164                              <1>     debugEnterM
   165                              <1>     call debPrintDOSStack
   166                              <1>     debugExitM
   167                              <1>     %endif
   168                              <1> .fdExit:
   169 00001D9D FA                  <1>     cli     ;Redisable interrupts
   170 00001D9E FE0D(64C30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   171 00001DA4 488B25(D3C30300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   172 00001DAB 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   173 00001DAE 488B05(C3C30300)    <1>     mov rax, qword [oldoldRSP]
   174 00001DB5 488905(D3C30300)    <1>     mov qword [oldRSP], rax
   175 00001DBC E806000000          <1>     call dosPopRegs  ;Pop the frame
   176 00001DC1 48CF                <1>     iretq
   177                              <1> .fdExitBad:
   178 00001DC3 30C0                <1>     xor al, al
   179                              <1> defaultIretq:
   180 00001DC5 48CF                <1>     iretq
   181                              <1> dosPopRegs:
   182 00001DC7 8F05(CBC30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   183 00001DCD 58                  <1>     pop rax
   184 00001DCE 5B                  <1>     pop rbx
   185 00001DCF 59                  <1>     pop rcx
   186 00001DD0 5A                  <1>     pop rdx
   187 00001DD1 5E                  <1>     pop rsi
   188 00001DD2 5F                  <1>     pop rdi
   189 00001DD3 5D                  <1>     pop rbp
   190 00001DD4 4158                <1>     pop r8
   191 00001DD6 4159                <1>     pop r9
   192 00001DD8 FF25(CBC30300)      <1>     jmp qword [dosReturn]
   193                              <1> dosPushRegs:
   194 00001DDE 8F05(CBC30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   195 00001DE4 4151                <1>     push r9
   196 00001DE6 4150                <1>     push r8
   197 00001DE8 55                  <1>     push rbp
   198 00001DE9 57                  <1>     push rdi
   199 00001DEA 56                  <1>     push rsi
   200 00001DEB 52                  <1>     push rdx
   201 00001DEC 51                  <1>     push rcx
   202 00001DED 53                  <1>     push rbx
   203 00001DEE 50                  <1>     push rax
   204 00001DEF FF25(CBC30300)      <1>     jmp qword [dosReturn]
   205                              <1> dosCrit1Enter:
   206 00001DF5 C3                  <1>     ret     ;Needs to be patched with 50h (PUSH RAX)
   207 00001DF6 B801800000          <1>     mov eax, 8001h
   208 00001DFB CD4A                <1>     int 4ah
   209 00001DFD 58                  <1>     pop rax
   210 00001DFE C3                  <1>     ret
   211                              <1> dosCrit1Exit:
   212 00001DFF C3                  <1>     ret
   213 00001E00 B801810000          <1>     mov eax, 8101h
   214 00001E05 CD4A                <1>     int 4ah
   215 00001E07 58                  <1>     pop rax
   216 00001E08 C3                  <1>     ret
   217                              <1> dosCrit2Enter:
   218 00001E09 C3                  <1>     ret
   219 00001E0A B802800000          <1>     mov eax, 8002h
   220 00001E0F CD4A                <1>     int 4ah
   221 00001E11 58                  <1>     pop rax
   222 00001E12 C3                  <1>     ret
   223                              <1> dosCrit2Exit:
   224 00001E13 C3                  <1>     ret
   225 00001E14 B802810000          <1>     mov eax, 8102h
   226 00001E19 CD4A                <1>     int 4ah
   227 00001E1B 58                  <1>     pop rax
   228 00001E1C C3                  <1>     ret
   229                              <1> ;========================================:
   230                              <1> ;      Reentrant Kernel Functions        :
   231                              <1> ;========================================:
   232                              <1> ctrlBreakCheck:    ;ah = 33h
   233 00001E1D 84C0                <1>     test al, al
   234 00001E1F 7508                <1>     jnz .cbcget  ;Get the state or other functions
   235 00001E21 8A15(8EC30300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   236 00001E27 48CF                <1>     iretq
   237                              <1> .cbcget:
   238 00001E29 3C02                <1>     cmp al, 02h
   239 00001E2B 771A                <1>     ja .cbcBad
   240 00001E2D 740D                <1>     jz .cbcxchg ;Function 2
   241 00001E2F 52                  <1>     push rdx
   242 00001E30 80E201              <1>     and dl, 1   ;Get only the bottom bit
   243 00001E33 8815(8EC30300)      <1>     mov byte [breakFlag], dl    ;Set the state
   244 00001E39 5A                  <1>     pop rdx
   245 00001E3A 48CF                <1>     iretq
   246                              <1> .cbcxchg:
   247 00001E3C 80E201              <1>     and dl, 1
   248 00001E3F 8615(8EC30300)      <1>     xchg byte [breakFlag], dl
   249 00001E45 48CF                <1>     iretq
   250                              <1> .cbcBad:
   251 00001E47 B0FF                <1>     mov al, -1
   252 00001E49 48CF                <1>     iretq
   253                              <1> 
   254                              <1> 
   255                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   256 00001E4B 48891D(7BC30300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   257 00001E52 48CF                <1>     iretq
   258                              <1> 
   259                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   260 00001E54 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP]
   261 00001E5B 48CF                <1>     iretq
   262                              <1> 
   263                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   264 00001E5D 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP]
   265 00001E64 48CF                <1>     iretq
   266                              <1> 
   267                              <1> setDriverLookahead:;ah = 64h, reserved
   268 00001E66 48CF                <1>     iretq
   269                              <1> 
   270                              <1> ;========================================:
   271                              <1> ;            Kernel Functions            :
   272                              <1> ;========================================:
   273                              <1> diskReset:         ;ah = 0Dh
   274                              <1> ;Flush all dirty buffers to disk
   275 00001E68 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   276                              <1> .drCheckBuffer:
   277 00001E6F F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   278 00001E73 7407                <1>     jz .drGotoNextBuffer
   279                              <1> .drFlushBuffer:
   280 00001E75 E844E7FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   281 00001E7A 720C                <1>     jc .drExit
   282                              <1> .drGotoNextBuffer:
   283 00001E7C 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   284 00001E7F 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   285 00001E86 75E7                <1>     jne .drCheckBuffer
   286                              <1> .drExit:
   287 00001E88 C3                  <1>     ret
   288                              <1> 
   289                              <1> selectDisk:        ;ah = 0Eh
   290                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   291 00001E89 88D0                <1>     mov al, dl
   292 00001E8B FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   293 00001E8D E8CFFCFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   294 00001E92 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   295 00001E94 8805(8DC30300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   296                              <1> .skipSettingCurrent:
   297 00001E9A 0FB605(69C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   298 00001EA1 C3                  <1>     ret
   299                              <1> 
   300                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   301 00001EA2 8A05(8DC30300)      <1>     mov al, byte [currentDrv]
   302 00001EA8 C3                  <1>     ret
   303                              <1> 
   304                              <1> FATinfoDefault:    ;ah = 1Bh
   305 00001EA9 30D2                <1>     xor dl, dl
   306                              <1> FATinfoDevice:     ;ah = 1Ch
   307                              <1> ;Return in:
   308                              <1> ;   al = Number of sectors per cluster
   309                              <1> ;   edx = Number of clusters
   310                              <1> ;   cx =  Size of a clsuter
   311 00001EAB 84D2                <1>     test dl, dl
   312 00001EAD 7508                <1>     jnz .fidSkipdefault
   313 00001EAF 8A15(8DC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   314 00001EB5 FEC2                <1>     inc dl
   315                              <1> .fidSkipdefault:
   316 00001EB7 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   317                              <1> ;Walk the dpb chain manually
   318 00001EB9 88D0                <1>     mov al, dl  ;Move drive number into al
   319 00001EBB E885FCFFFF          <1>     call walkDPBchain    ;Get in rsi the dpb pointer for drive in al
   320 00001EC0 7331                <1>     jnc .fidDPBFound
   321                              <1> ;Else, we at an error.
   322                              <1> ;Simply return with CY set and error code in al with extended error info
   323 00001EC2 E876FCFFFF          <1>     call getUserRegs
   324 00001EC7 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set the CY flag
   325 00001ECF B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   326 00001ED4 66C705(67C30300)0F- <1>     mov word [errorExCde], errBadDrv     
   326 00001EDC 00                  <1>
   327 00001EDD C605(66C30300)01    <1>     mov byte [errorLocus], eLocUnk    ;Not appropriate
   328 00001EE4 C605(6AC30300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   329 00001EEB C605(69C30300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   330 00001EF2 C3                  <1>     ret
   331                              <1> .fidDPBFound:
   332 00001EF3 8A4604              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   333 00001EF6 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   334 00001EF8 8B560F              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   335 00001EFB 0FB74E02            <1>     movzx ecx, word [rsi + dpb.wBytesPerSector] ; Save the value in ecx
   336 00001EFF 488D5E23            <1>     lea rbx, qword [rsi + dpb.bMediaDescriptor]
   337 00001F03 E835FCFFFF          <1>     call getUserRegs
   338 00001F08 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   339 00001F0C 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   340 00001F10 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   341 00001F14 C3                  <1>     ret
   342                              <1> 
   343                              <1> setIntVector:      ;ah = 25h
   344                              <1> ;Called with:
   345                              <1> ;   rdx = Pointer to interrupt handler
   346                              <1> ;   al = Interrupt number
   347 00001F15 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   348 00001F17 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   349                              <1> ;First call to get default BIOS segement selector and attribute word
   350 00001F1D 88C3                <1>     mov bl, al  ;Set interrupt number 
   351 00001F1F B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   352 00001F24 CD35                <1>     int 35h
   353 00001F26 E812FCFFFF          <1>     call getUserRegs
   354 00001F2B 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   355 00001F2F 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   356 00001F31 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   357                              <1> ;dx preserves the attribute word
   358 00001F33 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   359 00001F38 CD35                <1>     int 35h
   360 00001F3A E8FEFBFFFF          <1>     call getUserRegs
   361 00001F3F 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Preserve low byte of rax
   362 00001F41 C3                  <1>     ret
   363                              <1> createNewPSP:      ;ah = 26h
   364 00001F42 C3                  <1>     ret
   365                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   366 00001F43 8805(2CC30300)      <1>     mov byte [verifyFlag], al
   367 00001F49 8025(2CC30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   368 00001F50 C3                  <1>     ret
   369                              <1> getDOSversion:     ;ah = 30h
   370 00001F51 E8E7FBFFFF          <1>     call getUserRegs
   371 00001F56 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   372 00001F58 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   373 00001F5B 668B059EE0FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   374 00001F62 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   375 00001F65 C3                  <1>     ret
   376                              <1> 
   377                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   378                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   379 00001F66 30D2                <1>     xor dl, dl
   380                              <1> getDeviceDPBptr:   ;ah = 32h
   381                              <1> ;On entry: dl = Drive number
   382                              <1> ;On exit: rbx = DPB pointer
   383 00001F68 84D2                <1>     test dl, dl
   384 00001F6A 7508                <1>     jnz .gddpskipdefault
   385 00001F6C 8A15(8DC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   386 00001F72 FEC2                <1>     inc dl
   387                              <1> .gddpskipdefault:
   388                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   389 00001F74 FECA                <1>     dec dl
   390 00001F76 88D0                <1>     mov al, dl
   391 00001F78 E84DFCFFFF          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   392 00001F7D 722C                <1>     jc .bad
   393 00001F7F 488B3D(58C50300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   394 00001F86 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   395 00001F8C 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   396                              <1>     ;Here ONLY if accessing critical Disk data structures
   397 00001F8E E862FEFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   398 00001F93 E86DF9FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   399 00001F98 E862FEFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   400 00001F9D 720C                <1>     jc .bad
   401 00001F9F E899FBFFFF          <1>     call getUserRegs
   402 00001FA4 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   403 00001FA8 30C0                <1>     xor al, al
   404 00001FAA C3                  <1>     ret
   405                              <1> .bad:
   406 00001FAB B0FF                <1>     mov al, -1
   407 00001FAD C3                  <1>     ret
   408                              <1> 
   409                              <1> getInDOSflagPtr:   ;ah = 34h
   410 00001FAE 488D15(64C30300)    <1>     lea rdx, inDOS
   411 00001FB5 E883FBFFFF          <1>     call getUserRegs
   412 00001FBA 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   413 00001FBE C3                  <1>     ret
   414                              <1> getIntVector:      ;ah = 35h
   415                              <1> ;Called with:
   416                              <1> ;   al = Interrupt Number
   417                              <1> ;Returns:
   418                              <1> ;   rbx = Pointer to interrupt handler
   419 00001FBF 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   420 00001FC1 B807F00000          <1>     mov eax, 0F007h
   421 00001FC6 CD35                <1>     int 35h
   422 00001FC8 E870FBFFFF          <1>     call getUserRegs
   423 00001FCD 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   424 00001FD1 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   425 00001FD3 C3                  <1>     ret
   426                              <1> 
   427                              <1> getDiskFreeSpace:  ;ah = 36h
   428 00001FD4 84D2                <1>     test dl, dl
   429 00001FD6 7508                <1>     jnz .gdfsSkipdefault
   430 00001FD8 8A15(8DC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   431 00001FDE FEC2                <1>     inc dl
   432                              <1> .gdfsSkipdefault:
   433 00001FE0 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   434 00001FE2 88D0                <1>     mov al, dl
   435 00001FE4 E85CFBFFFF          <1>     call walkDPBchain ;Get in rsi the dpb pointer for drive al
   436 00001FE9 7331                <1>     jnc .gdfsDPBFound
   437                              <1> ;Else, we at an error.
   438                              <1> ;Simply return with CY set and error code in al with extended error info
   439 00001FEB 66C705(67C30300)0F- <1>     mov word [errorExCde], errBadDrv     ;Invalid drive error
   439 00001FF3 00                  <1>
   440 00001FF4 C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk    ;Not appropriate
   441 00001FFB C605(6AC30300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   442 00002002 C605(69C30300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   443 00002009 E82FFBFFFF          <1>     call getUserRegs
   444 0000200E 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   445 00002013 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set CF=CY
   446 0000201B C3                  <1>     ret
   447                              <1> .gdfsDPBFound:
   448 0000201C 8A4604              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   449 0000201F FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   450 00002021 8B560F              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   451 00002024 0FB74E02            <1>     movzx ecx, word [rsi + dpb.wBytesPerSector] ;Save the value in ecx
   452 00002028 8B5E31              <1>     mov ebx, dword [rsi + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   453 0000202B E80DFBFFFF          <1>     call getUserRegs
   454 00002030 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   455 00002034 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   456 00002038 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   457 0000203C C3                  <1>     ret
   458                              <1> 
   459                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   460 0000203D 31C0                <1>     xor eax, eax
   461 0000203F 668705(8BC30300)    <1>     xchg ax, word [errorLevel]
   462 00002046 E8F2FAFFFF          <1>     call getUserRegs
   463 0000204B 668906              <1>     mov word [rsi + callerFrame.rax], ax
   464 0000204E C3                  <1>     ret
   465                              <1> 
   466                              <1> getSysVarsPtr:     ;ah = 52h
   467 0000204F 488D15(2CC00300)    <1>     lea rdx, sysVarsPtr
   468 00002056 E8E2FAFFFF          <1>     call getUserRegs
   469 0000205B 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   470 0000205F C3                  <1>     ret
   471                              <1> 
   472                              <1> 
   473                              <1> ;AH = 53h - CREATE DPB
   474                              <1> createDPB:         ;generates a DPB from a given BPB
   475                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   476                              <1> ;This is done so that the other fields of the DPB can be recycled
   477                              <1> ;Input: rsi = ptr to the BPB
   478                              <1> ;       rbp = ptr to the DPB
   479                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   480                              <1> ;bMediaDescriptor
   481 00002060 8A4615              <1>     mov al, byte [rsi + bpb.media]
   482 00002063 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   483                              <1> ;dFirstFreeCluster
   484 00002066 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   485                              <1> ;dNumberOfFreeClusters
   486 0000206D C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   487                              <1> ;wBytesPerSector
   488 00002074 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   489 00002078 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   490                              <1> ;bMaxSectorInCluster
   491 0000207C 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   492 0000207F FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   493 00002081 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   494                              <1> ;bSectorsPerClusterShift
   495 00002084 FEC0                <1>     inc al
   496 00002086 30C9                <1>     xor cl, cl
   497                              <1> .cd2:
   498 00002088 D0E8                <1>     shr al, 1
   499 0000208A 7404                <1>     jz .cd3
   500 0000208C FEC1                <1>     inc cl
   501 0000208E EBF8                <1>     jmp short .cd2
   502                              <1> .cd3:
   503 00002090 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   504                              <1> ;wFAToffset, number of reserved sectors in partition
   505 00002093 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   506 00002097 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   507                              <1> ;bNumberOfFATs
   508 0000209B 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   509 0000209E 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   510                              <1> ;wNumberRootDirSectors
   511 000020A1 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   512 000020A5 C1E005              <1>     shl eax, 5  ;Multiply by 32
   513 000020A8 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   514 000020AC FFC9                <1>     dec ecx
   515 000020AE 01C8                <1>     add eax, ecx
   516 000020B0 31D2                <1>     xor edx, edx    ;Clear for divide
   517 000020B2 F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   518 000020B4 66894509            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   519                              <1> ;dFATlength, get the FAT length
   520 000020B8 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   521 000020BC 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   522 000020BF 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   523 000020C1 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   524 000020C4 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   525                              <1> ;Complex cases below...
   526                              <1> ;dClusterHeapOffset, start sector of the data area
   527 000020C7 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   528 000020CB 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   529 000020CE 85C0                <1>     test eax, eax
   530 000020D0 0F44C3              <1>     cmovz eax, ebx
   531                              <1> ;eax = FATsz
   532 000020D3 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   533 000020D7 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   534 000020DA 85DB                <1>     test ebx, ebx
   535 000020DC 0F44D9              <1>     cmovz ebx, ecx 
   536                              <1> ;ebx = TotSec
   537 000020DF 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   538 000020E2 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   539                              <1> .cd4:
   540 000020E4 01C2                <1>     add edx, eax
   541 000020E6 FEC9                <1>     dec cl
   542 000020E8 75FA                <1>     jnz .cd4
   543 000020EA 89D0                <1>     mov eax, edx    ;Store product in eax
   544 000020EC 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   545 000020F0 01D0                <1>     add eax, edx
   546 000020F2 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   547 000020F6 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   548                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   549                              <1>     ;aka eax = Start sector of the data area in volume
   550 000020F8 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   551                              <1> ;dClusterCount
   552 000020FB 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   553 000020FD 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   554 000020FF 31D2                <1>     xor edx, edx
   555 00002101 BB01000000          <1>     mov ebx, 1
   556 00002106 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   557 00002109 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   558 0000210B F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   559 0000210D FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   560 0000210F 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   561                              <1> ;dFirstUnitOfRootDir
   562 00002112 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   563 00002117 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   564 0000211A 7709                <1>     ja .cd5
   565                              <1>     ;Else, we need to find the first sector of the root directory
   566                              <1>     ;Get the start sector of data area in volume 
   567                              <1>     ; and sub the number of sectors in the root directory
   568 0000211C 8B450B              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   569 0000211F 0FB75D09            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   570 00002123 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   571                              <1> .cd5:
   572 00002125 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   573                              <1> ;Exit epilogue
   574 00002128 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   575 0000212F 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   576                              <1>     %if DEBUG && DPBINFO
   577                              <1>     ;Print DPB 
   578                              <1>     debugEnterM
   579                              <1>     push rbp
   580                              <1>     lea rbp, .l0000
   581                              <1>     call debPrintNullString
   582                              <1>     pop rbp
   583                              <1>     call debDPBBPBptr
   584                              <1>     call debMakeDebuggerRespond
   585                              <1>     jmp short .l0001
   586                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   587                              <1> .l0001:
   588                              <1>     debugExitM
   589                              <1>     %endif
   590 00002131 C3                  <1>     ret
   591                              <1> 
   592                              <1> getVerifySetting:  ;ah = 54h
   593 00002132 8A05(2CC30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   594 00002138 C3                  <1>     ret
   595                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   596 00002139 C3                  <1>     ret
   597                              <1> getExtendedError:  ;ah = 59h
   598 0000213A E8FEF9FFFF          <1>     call getUserRegs
   599 0000213F 668B05(67C30300)    <1>     mov ax, word [errorExCde]
   600 00002146 8A2D(66C30300)      <1>     mov ch, byte [errorLocus]
   601 0000214C 8A3D(6AC30300)      <1>     mov bh, byte [errorClass]
   602 00002152 8A1D(69C30300)      <1>     mov bl, byte [errorAction]
   603 00002158 668906              <1>     mov word [rsi + callerFrame.rax], ax
   604 0000215B 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   605 0000215F 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   606 00002162 C3                  <1>     ret
   607                              <1> getCritErrorInfo:  ;ah = 5Dh
   608                              <1> networkServices:   ;ah = 5Eh, do nothing
   609                              <1> networkRedirection:;ah = 5Fh, do nothing
   610 00002163 C3                  <1>     ret
   611                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   612                              <1> noOp:
   613 00002164 C3                  <1>     ret
    35                                  %include "./Source/Kernel/multiplx.asm"
    36                              <1> ;Default multiplexer. Current only installed function is ah=12h
    37                              <1> 
    38                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    39 00002165 80FC12              <1>     cmp ah, 12h
    40 00002168 751A                <1>     jne .exit       ;Exit if not for us
    41 0000216A 3C01                <1>     cmp al, mDispTblL / 2
    42 0000216C 7316                <1>     jae .exit   ;If above or equal, exit
    43 0000216E 53                  <1>     push rbx
    44 0000216F 51                  <1>     push rcx
    45 00002170 31C9                <1>     xor ecx, ecx
    46 00002172 488D1D75DFFFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    47 00002179 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    48 0000217B D1E1                <1>     shl ecx, 1   ;multiply by 2
    49 0000217D 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    50 00002180 FFD3                <1>     call rbx
    51 00002182 59                  <1>     pop rcx
    52 00002183 5B                  <1>     pop rbx
    53                              <1> .exit:
    54 00002184 48CF                <1>     iretq
    55                              <1> multiplexTest:
    56 00002186 B0FF                <1>     mov al, -1
    57 00002188 C3                  <1>     ret
    36                                  %include "./Source/Misc/int44h.asm"
    37                              <1> critErrorHandler:   ;Int 44h
    38                              <1> ;User Stack in usage here, must be swapped to before this is called
    39                              <1> ;Entered with:  
    40                              <1> ;               AH = Critical Error Bitfield
    41                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    42                              <1> ;               Bit 6 - Reserved
    43                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    44                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    45                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    46                              <1> ;               Bits [2-1] = Affected Disk Error
    47                              <1> ;                     0 0   DOS area
    48                              <1> ;                     0 1   FAT area
    49                              <1> ;                     1 0   Directory area
    50                              <1> ;                     1 1   Data area
    51                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    52                              <1> ;               AL  = Failing drive number if AH[7] = 0
    53                              <1> ;               DIL = Error code for errorMsg
    54                              <1> ;               RSI = EA of Device Header for which device the error occured
    55                              <1> ;Return:
    56                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    57                              <1> ;                  = 1 - Retry the Operation    (Retry)
    58                              <1> ;                  = 2 - Terminate the Program  (Abort)
    59                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    60 00002189 53                  <1>     push rbx
    61 0000218A 51                  <1>     push rcx
    62 0000218B 52                  <1>     push rdx
    63 0000218C 57                  <1>     push rdi
    64 0000218D 56                  <1>     push rsi
    65 0000218E FC                  <1>     cld         ;Make String ops go forward
    66                              <1> 
    67 0000218F 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    68 00002192 488D155E020000      <1>     lea rdx, qword [.crlf]
    69 00002199 B409                <1>     mov ah, 09h ;Print String
    70 0000219B CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    71                              <1> 
    72 0000219D 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    73 000021A3 B90C000000          <1>     mov ecx, 0Ch
    74 000021A8 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    75 000021AA 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    76 000021AD 480FB7FF            <1>     movzx rdi, di
    77 000021B1 4889FA              <1>     mov rdx, rdi    ;Copy error code
    78 000021B4 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    79 000021B8 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    80 000021BB 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    81 000021BE 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    82 000021C5 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    83 000021C9 B409                <1>     mov ah, 09h ;Print String
    84 000021CB CD41                <1>     int 41h     ;Call DOS to print first part of message
    85                              <1> 
    86 000021CD 488D1505020000      <1>     lea rdx, qword [.readmsg]
    87 000021D4 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    88 000021DB F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    89 000021DE 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    90 000021E2 B409                <1>     mov ah, 09h ;Print String
    91 000021E4 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    92                              <1> 
    93 000021E6 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    94 000021E9 0F85DF000000        <1>     jnz .charError
    95                              <1> ;Disk error continues here
    96 000021EF 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    97 000021F6 B409                <1>     mov ah, 09h
    98 000021F8 CD41                <1>     int 41h
    99 000021FA 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   100 000021FC 80C241              <1>     add dl, "A" ;Add ASCII code
   101 000021FF B402                <1>     mov ah, 02h ;Print char in dl
   102 00002201 CD41                <1>     int 41h
   103                              <1> .userInput:
   104 00002203 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   105 0000220A B409                <1>     mov ah, 09h
   106 0000220C CD41                <1>     int 41h
   107                              <1> ;Abort, Retry, Ignore, Fail is word order
   108                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   109                              <1> .userAbort:
   110                              <1> ;Abort is always an option
   111 0000220E 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   112 00002215 B409                <1>     mov ah, 09h
   113 00002217 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   114                              <1> .userRetry:
   115 00002219 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   116 0000221C 7416                <1>     jz .userIgnore    ;If clear, dont print message
   117 0000221E 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   118 00002225 B409                <1>     mov ah, 09h
   119 00002227 CD41                <1>     int 41h
   120 00002229 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   121 00002230 B409                <1>     mov ah, 09h
   122 00002232 CD41                <1>     int 41h
   123                              <1> .userIgnore:
   124 00002234 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   125 00002237 7416                <1>     jz .userFail
   126 00002239 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   127 00002240 B409                <1>     mov ah, 09h
   128 00002242 CD41                <1>     int 41h
   129 00002244 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   130 0000224B B409                <1>     mov ah, 09h
   131 0000224D CD41                <1>     int 41h
   132                              <1> .userFail:
   133 0000224F F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   134 00002252 7416                <1>     jz .userMsgEnd
   135 00002254 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   136 0000225B B409                <1>     mov ah, 09h
   137 0000225D CD41                <1>     int 41h
   138 0000225F 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   139 00002266 B409                <1>     mov ah, 09h
   140 00002268 CD41                <1>     int 41h
   141                              <1> .userMsgEnd:
   142 0000226A 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   143 00002271 B409                <1>     mov ah, 09h
   144 00002273 CD41                <1>     int 41h
   145                              <1> ;Get user input now 
   146 00002275 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   147 00002277 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   148 0000227E B401                <1>     mov ah, 01h ;STDIN without Console Echo
   149 00002280 CD41                <1>     int 41h ;Get char in al
   150 00002282 3C61                <1>     cmp al, "a" ;Chack if lowercase
   151 00002284 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   152 00002286 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   153                              <1> .uip1:
   154 00002288 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   155 00002289 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   156 0000228B FFC1                <1>     inc ecx
   157 0000228D 81F904000000        <1>     cmp ecx, 4
   158 00002293 75F3                <1>     jne .uip1
   159 00002295 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   160                              <1> .validInput:
   161 0000229A 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   162                              <1> ;Now check if the input is permitted
   163 0000229C 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   164 0000229E 7427                <1>     je .cehExit
   165 000022A0 84C0                <1>     test al, al ;Check if 0 => Ignore
   166 000022A2 740F                <1>     je .viIgnore
   167 000022A4 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   168 000022A6 7416                <1>     je .viRetry
   169                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   170 000022A8 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   171 000022AB 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   172 000022B1 EB14                <1>     jmp short .cehExit
   173                              <1> .viIgnore:
   174 000022B3 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   175 000022B6 0F8447FFFFFF        <1>     jz .userInput
   176 000022BC EB09                <1>     jmp short .cehExit
   177                              <1> .viRetry:
   178 000022BE F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   179 000022C1 0F843CFFFFFF        <1>     jz .userInput
   180                              <1> .cehExit:
   181 000022C7 5E                  <1>     pop rsi
   182 000022C8 5F                  <1>     pop rdi
   183 000022C9 5A                  <1>     pop rdx
   184 000022CA 59                  <1>     pop rcx
   185 000022CB 5B                  <1>     pop rbx
   186 000022CC 48CF                <1>     iretq
   187                              <1> .charError:
   188 000022CE B908000000          <1>     mov ecx, 8  ;8 chars in device name
   189 000022D3 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   190                              <1> .ce1:
   191 000022DA AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   192 000022DB 88C2                <1>     mov dl, al  ;Move char into dl
   193 000022DD B402                <1>     mov ah, 02h
   194 000022DF CD41                <1>     int 41h ;Print char
   195 000022E1 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   196 000022E3 E91BFFFFFF          <1>     jmp .userInput
   197                              <1> 
   198                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   199 000022E8 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   199 000022F1 746563742024202020  <1>
   200 000022FA 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   200 00002303 6E6974202420202020  <1>
   201 0000230C 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   201 00002315 202420202020202020  <1>
   202 0000231E 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   202 00002327 6F6D6D616E64202420  <1>
   203 00002330 446174612024202020- <1>             db "Data $            "       ;Error 4
   203 00002339 202020202020202020  <1>
   204 00002342 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   204 0000234B 737420242020202020  <1>
   205 00002354 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   205 0000235D 202020202020202020  <1>
   206 00002366 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   206 0000236F 656469612024202020  <1>
   207 00002378 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   207 00002381 7420466F756E642024  <1>
   208 0000238A 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   208 00002393 706572202420202020  <1>
   209 0000239C 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   209 000023A5 6C7420242020202020  <1>
   210 000023AE 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   210 000023B7 742024202020202020  <1>
   211 000023C0 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   211 000023C9 61696C757265202420  <1>
   212                              <1> 
   213 000023D2 64726976652024      <1> .drive      db "drive $"
   214 000023D9 6572726F7220726561- <1> .readmsg    db "error reading $"
   214 000023E2 64696E672024        <1>
   215 000023E8 6572726F7220777269- <1> .writemsg   db "error writing $"
   215 000023F1 74696E672024        <1>
   216 000023F7 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   217 000023FA 41626F727424        <1> .abortmsg   db "Abort$" 
   218 00002400 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   219 00002407 526574727924        <1> .retrymsg   db "Retry$"
   220 0000240D 4661696C24          <1> .failmsg    db "Fail$"
   221 00002412 2C2024              <1> .betweenMsg db ", $"
   222 00002415 3F2024              <1> .endMsg     db "? $"
   223 00002418 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    37                                  %include "./Source/Drivers/drvData.asm"
    38                              <1> ;-----------------------------------:
    39                              <1> ;          Driver routines          :
    40                              <1> ;-----------------------------------:
    41                              <1> drivers:
    42                              <1> conHdr:
    43 0000241C [3E24000000000000]  <1>     dq auxHdr
    44 00002424 1308                <1>     dw 0813h
    45 00002426 [BC25000000000000]  <1>     dq commonStrat
    46 0000242E [CB25000000000000]  <1>     dq conDriver
    47 00002436 434F4E2020202020    <1>     db "CON     "
    48                              <1> auxHdr:
    49 0000243E [6024000000000000]  <1>     dq prnHdr
    50 00002446 0080                <1>     dw 08000h
    51 00002448 [BC25000000000000]  <1>     dq commonStrat
    52 00002450 [A128000000000000]  <1>     dq com1Intr
    53 00002458 4155582020202020    <1>     db "AUX     "
    54                              <1> prnHdr:
    55 00002460 [8224000000000000]  <1>     dq clkHdr
    56 00002468 40A0                <1>     dw 0A040h
    57 0000246A [C425000000000000]  <1>     dq nulStrat
    58 00002472 [CA25000000000000]  <1>     dq nulIntr
    59 0000247A 50524E2020202020    <1>     db "PRN     "
    60                              <1> clkHdr:
    61 00002482 [A424000000000000]  <1>     dq msdHdr
    62 0000248A 0880                <1>     dw 08008h
    63 0000248C [BC25000000000000]  <1>     dq commonStrat
    64 00002494 [1427000000000000]  <1>     dq clkDriver
    65 0000249C 434C4F434B242020    <1>     db "CLOCK$  "
    66                              <1> msdHdr:
    67 000024A4 [C624000000000000]  <1>     dq com1Hdr
    68 000024AC 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    69 000024AE [BC25000000000000]  <1>     dq commonStrat
    70 000024B6 [462A000000000000]  <1>     dq msdDriver
    71 000024BE 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    72                              <1> com1Hdr:
    73 000024C6 [E824000000000000]  <1>     dq com2Hdr
    74 000024CE 0080                <1>     dw 08000h
    75 000024D0 [BC25000000000000]  <1>     dq commonStrat
    76 000024D8 [A128000000000000]  <1>     dq com1Intr
    77 000024E0 434F4D3120202020    <1>     db "COM1    "
    78                              <1> com2Hdr:
    79 000024E8 [0A25000000000000]  <1>     dq com3Hdr
    80 000024F0 0080                <1>     dw 08000h
    81 000024F2 [BC25000000000000]  <1>     dq commonStrat
    82 000024FA [AA28000000000000]  <1>     dq com2Intr
    83 00002502 434F4D3220202020    <1>     db "COM2    "
    84                              <1> com3Hdr:
    85 0000250A [2C25000000000000]  <1>     dq com4Hdr
    86 00002512 0080                <1>     dw 08000h
    87 00002514 [BC25000000000000]  <1>     dq commonStrat
    88 0000251C [B328000000000000]  <1>     dq com3Intr
    89 00002524 434F4D3320202020    <1>     db "COM3    "
    90                              <1> com4Hdr:
    91 0000252C [4E25000000000000]  <1>     dq lpt1Hdr
    92 00002534 0080                <1>     dw 08000h
    93 00002536 [BC25000000000000]  <1>     dq commonStrat
    94 0000253E [BC28000000000000]  <1>     dq com4Intr
    95 00002546 434F4D3420202020    <1>     db "COM4    "
    96                              <1> lpt1Hdr:
    97 0000254E [7025000000000000]  <1>     dq lpt2Hdr
    98 00002556 40A0                <1>     dw 0A040h
    99 00002558 [C425000000000000]  <1>     dq nulStrat
   100 00002560 [CA25000000000000]  <1>     dq nulIntr
   101 00002568 4C50543120202020    <1>     db "LPT1    "
   102                              <1> lpt2Hdr:
   103 00002570 [9225000000000000]  <1>     dq lpt3Hdr
   104 00002578 40A0                <1>     dw 0A040h
   105 0000257A [C425000000000000]  <1>     dq nulStrat
   106 00002582 [CA25000000000000]  <1>     dq nulIntr
   107 0000258A 4C50543220202020    <1>     db "LPT2    "
   108                              <1> lpt3Hdr:
   109 00002592 FFFFFFFFFFFFFFFF    <1>     dq -1
   110 0000259A 40A0                <1>     dw 0A040h
   111 0000259C [C425000000000000]  <1>     dq nulStrat
   112 000025A4 [CA25000000000000]  <1>     dq nulIntr
   113 000025AC 4C50543320202020    <1>     dq "LPT3    "
   114 000025B4 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    38                                  %include "./Source/Drivers/charDrv.asm"
    39                              <1> commonStrat:
    40                              <1> ;DOS calls this function with rbx=Ptr to request header
    41 000025BC 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    42 000025C3 C3                  <1>     ret
    43                              <1> nulStrat:
    44 000025C4 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    45                              <1> nulIntr:
    46 000025CA C3                  <1>     ret
    47                              <1> conDriver:
    48 000025CB 50                  <1>     push rax
    49 000025CC 53                  <1>     push rbx
    50 000025CD 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    51 000025D4 B003                <1>     mov al, 03h ;Unknown Command
    52 000025D6 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    53 000025DA 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    54                              <1> 
    55 000025DC 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    56 000025DF 3C04                <1>     cmp al, 4
    57 000025E1 743D                <1>     jz .conRead
    58 000025E3 3C05                <1>     cmp al, 5
    59 000025E5 747F                <1>     jz .conNondestructiveRead
    60 000025E7 3C06                <1>     cmp al, 6
    61 000025E9 0F84A8000000        <1>     jz .conInputStatus
    62 000025EF 3C07                <1>     cmp al, 7
    63 000025F1 0F84B0000000        <1>     jz .conFlushInputBuffers
    64 000025F7 3C08                <1>     cmp al, 8
    65 000025F9 0F84CA000000        <1>     jz .conWrite
    66 000025FF 3C09                <1>     cmp al, 9
    67 00002601 0F84C2000000        <1>     jz .conWrite
    68 00002607 3C0A                <1>     cmp al, 0Ah
    69 00002609 0F84E3000000        <1>     jz .conOutputStatus
    70 0000260F EB06                <1>     jmp short .conExit  ;All other valid functions return done
    71                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    72 00002611 B480                <1>     mov ah, 80h ;Set error bit
    73 00002613 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    74                              <1> .conExit:
    75 00002617 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    76 0000261D 5B                  <1>     pop rbx
    77 0000261E 58                  <1>     pop rax
    78 0000261F C3                  <1>     ret
    79                              <1> .conRead:    ;Function 4
    80 00002620 B005                <1>     mov al, 05h ;Bad request structure length?
    81 00002622 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    82 00002625 75EA                <1>     jne .conWriteErrorCode
    83                              <1> 
    84 00002627 57                  <1>     push rdi
    85 00002628 51                  <1>     push rcx
    86 00002629 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    87 0000262D 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    88                              <1> .cre1:
    89 0000262F 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    90 00002632 741C                <1>     je .cre2
    91 00002634 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    92 0000263B 751A                <1>     jnz .cre3   ;No, get the buffer value
    93 0000263D 31C0                <1>     xor eax, eax
    94 0000263F CD36                <1>     int 36h
    95                              <1> .cre11:
    96 00002641 AA                  <1>     stosb
    97 00002642 84C0                <1>     test al, al ;Was the ascii code stored 0?
    98 00002644 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    99 00002646 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   100                              <1> .cre12:
   101 0000264C FFC1                <1>     inc ecx ;Inc chars stored in buffer
   102 0000264E EBDF                <1>     jmp short .cre1
   103                              <1> .cre2:
   104 00002650 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   105 00002653 59                  <1>     pop rcx
   106 00002654 5F                  <1>     pop rdi
   107 00002655 EBC0                <1>     jmp short .conExit
   108                              <1> .cre3:
   109 00002657 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   110 0000265D C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   111 00002664 EBDB                <1>     jmp short .cre11
   112                              <1> 
   113                              <1> .conNondestructiveRead:  ;Function 5
   114 00002666 B005                <1>     mov al, 05h ;Bad request structure length?
   115 00002668 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   116 0000266B 75A4                <1>     jne .conWriteErrorCode
   117 0000266D 803D8E00000000      <1>     cmp byte [.conBuf], 0
   118 00002674 7519                <1>     jnz .cnr2
   119 00002676 B401                <1>     mov ah, 01h     ;Get key if exists
   120 00002678 CD36                <1>     int 36h
   121 0000267A 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   122                              <1>     ;Keystroke available
   123                              <1> .cnr0:
   124 0000267C 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   125 0000267F E993FFFFFF          <1>     jmp .conExit
   126                              <1> .cnr1: ;No keystroke available
   127 00002684 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   128 0000268A E988FFFFFF          <1>     jmp .conExit
   129                              <1> .cnr2:
   130 0000268F 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   131 00002695 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   132                              <1> 
   133                              <1> .conInputStatus:         ;Function 6
   134 00002697 B005                <1>     mov al, 05h ;Bad request structure length?
   135 00002699 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   136 0000269C 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   137 000026A2 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   138                              <1> 
   139                              <1> .conFlushInputBuffers:   ;Function 7
   140 000026A7 B005                <1>     mov al, 05h ;Bad request structure length?
   141 000026A9 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   142 000026AC 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   143 000026B2 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   144                              <1> .cfib0:
   145 000026B9 B401                <1>     mov ah, 01      ;Get buffer status
   146 000026BB CD36                <1>     int 36h
   147 000026BD 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   148 000026C3 30E4                <1>     xor ah, ah
   149 000026C5 CD36                <1>     int 36h ;Read key to flush from buffer
   150 000026C7 EBF0                <1>     jmp short .cfib0
   151                              <1> 
   152                              <1> .conWrite:   ;Function 8 and 9
   153 000026C9 B005                <1>     mov al, 05h ;Bad request structure length?
   154 000026CB 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   155 000026CE 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   156                              <1> 
   157 000026D4 56                  <1>     push rsi
   158 000026D5 51                  <1>     push rcx
   159 000026D6 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   160 000026DA 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   161                              <1> .cw1: 
   162 000026DC 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   163 000026DF 7407                <1>     je .cw2
   164 000026E1 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   165 000026E2 CD49                <1>     int 49h ;Fast print char
   166 000026E4 FFC1                <1>     inc ecx
   167 000026E6 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   168                              <1> .cw2:
   169 000026E8 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   170 000026EB 59                  <1>     pop rcx
   171 000026EC 5E                  <1>     pop rsi
   172 000026ED E925FFFFFF          <1>     jmp .conExit
   173                              <1> .conOutputStatus:   ;Function 0Ah
   174 000026F2 B005                <1>     mov al, 05h ;Bad request structure length?
   175 000026F4 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   176 000026F7 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   177 000026FD E915FFFFFF          <1>     jmp .conExit
   178                              <1> 
   179 00002702 00                  <1> .conBuf db 0    ;Single byte buffer
   180                              <1> fastOutput:         ;This CON driver supports Int 49h
   181                              <1> ;Called with char to transfer in al
   182 00002703 50                  <1>     push rax
   183 00002704 B40E                <1>     mov ah, 0Eh
   184 00002706 CD30                <1>     int 30h
   185 00002708 58                  <1>     pop rax
   186 00002709 48CF                <1>     iretq
   187                              <1> ctrlBreak:
   188                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   189 0000270B C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   190 00002712 48CF                <1>     iretq
   191                              <1> 
   192                              <1> clkDriver:
   193 00002714 50                  <1>     push rax
   194 00002715 53                  <1>     push rbx
   195 00002716 51                  <1>     push rcx
   196 00002717 52                  <1>     push rdx
   197 00002718 56                  <1>     push rsi
   198 00002719 55                  <1>     push rbp
   199 0000271A 488B1D93FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   200 00002721 B003                <1>     mov al, 03h ;Unknown Command
   201 00002723 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   202 00002727 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   203                              <1> 
   204 00002729 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   205 0000272C 3C04                <1>     cmp al, 04h
   206 0000272E 7437                <1>     jz .clkRead
   207 00002730 3C06                <1>     cmp al, 06h
   208 00002732 0F8494000000        <1>     jz .clkInputStatus
   209 00002738 3C07                <1>     cmp al, 07h
   210 0000273A 0F8498000000        <1>     jz .clkFlushInputBuffers
   211 00002740 3C08                <1>     cmp al, 08h
   212 00002742 0F84A0000000        <1>     jz .clkWrite
   213 00002748 3C09                <1>     cmp al, 09h
   214 0000274A 0F8498000000        <1>     jz .clkWrite
   215 00002750 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   216                              <1> .clkNotFunctioning:
   217 00002752 B002                <1>     mov al, 02h ;Device not ready error
   218                              <1> .clkWriteErrorCode:
   219 00002754 B480                <1>     mov ah, 80h ;Set error bit
   220 00002756 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   221                              <1> .clkExit:
   222 0000275A 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   223 00002760 5D                  <1>     pop rbp
   224 00002761 5E                  <1>     pop rsi
   225 00002762 5A                  <1>     pop rdx
   226 00002763 59                  <1>     pop rcx
   227 00002764 5B                  <1>     pop rbx
   228 00002765 58                  <1>     pop rax
   229 00002766 C3                  <1>     ret
   230                              <1> 
   231                              <1> .clkRead:           ;Function 4
   232 00002767 B005                <1>     mov al, 05h ;Bad request structure length?
   233 00002769 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   234 0000276C 75E6                <1>     jne .clkWriteErrorCode
   235                              <1> 
   236 0000276E 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   237 00002771 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   238 00002775 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   239 0000277C 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   240 00002780 30E4                <1>     xor ah, ah
   241 00002782 CD3A                <1>     int 3Ah         ;Read the system timer
   242 00002784 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   243 00002786 740D                <1>     jz .clkr1       ;Nope, now just time 
   244 00002788 30E4                <1>     xor ah, ah
   245                              <1>     ;This works as al should keep count of the # of days passed since last read
   246 0000278A 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   247 0000278E 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   248                              <1> .clkr1:
   249 00002795 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   250 00002798 0FB7D2              <1>     movzx edx, dx
   251 0000279B 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   252 0000279D 89D0                <1>     mov eax, edx
   253 0000279F 31D2                <1>     xor edx, edx
   254 000027A1 89D8                <1>     mov eax, ebx
   255 000027A3 B944040000          <1>     mov ecx, 1092   
   256 000027A8 F7F1                <1>     div ecx
   257 000027AA 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   258 000027AD 89D0                <1>     mov eax, edx    ;Get remainder in eax
   259 000027AF 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   260 000027B3 31D2                <1>     xor edx, edx
   261 000027B5 B95B000000          <1>     mov ecx, 91 ;5*18.2
   262 000027BA F7F1                <1>     div ecx
   263 000027BC 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   264 000027BF 89D0                <1>     mov eax, edx    ;Get remainder in eax
   265                              <1>     ;lea eax, dword [eax + 4*eax]
   266                              <1>     ;add eax, edx    ;Essentially multiply by 6
   267 000027C1 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   268 000027C4 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   269 000027C7 E98EFFFFFF          <1>     jmp .clkExit
   270                              <1> 
   271                              <1> .clkInputStatus:    ;Function 6
   272                              <1> ;Always return ready
   273 000027CC B005                <1>     mov al, 05h ;Bad request structure length?
   274 000027CE 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   275 000027D1 7581                <1>     jne .clkWriteErrorCode
   276 000027D3 E982FFFFFF          <1>     jmp .clkExit
   277                              <1> .clkFlushInputBuffers:  ;Function 7
   278                              <1> ;Always return done immediately
   279 000027D8 B005                <1>     mov al, 05h ;Bad request structure length?
   280 000027DA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   281 000027DD 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   282 000027E3 E972FFFFFF          <1>     jmp .clkExit
   283                              <1> 
   284                              <1> .clkWrite:          ;Functions 8 and 9
   285 000027E8 B005                <1>     mov al, 05h ;Bad request structure length?
   286 000027EA 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   287 000027ED 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   288                              <1> 
   289 000027F3 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   290 000027F6 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   291 000027FA 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   292 000027FE 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   293                              <1> 
   294 00002805 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   295 00002807 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   296 0000280B B105                <1>     mov cl, 5
   297 0000280D F6F1                <1>     div cl          ;Divide al by 5
   298 0000280F 30E4                <1>     xor ah, ah      ;Remove the remainder
   299 00002811 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   300                              <1> ;Using the decimal part of this formula for the low count
   301                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   302 00002813 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   303 00002816 B912000000          <1>     mov ecx, 18
   304 0000281B F7E1                <1>     mul ecx  
   305 0000281D 01C3                <1>     add ebx, eax
   306                              <1> 
   307 0000281F 31D2                <1>     xor edx, edx
   308 00002821 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   309 00002825 B944040000          <1>     mov ecx, 1092
   310 0000282A F7E1                <1>     mul ecx
   311 0000282C 01C3                <1>     add ebx, eax
   312 0000282E 89DA                <1>     mov edx, ebx    ;edx now has low count
   313 00002830 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   314 00002834 B401                <1>     mov ah, 01h     ;Set the system time
   315 00002836 CD3A                <1>     int 3Ah
   316                              <1> 
   317 00002838 4889F3              <1>     mov rbx, rsi
   318 0000283B E91AFFFFFF          <1>     jmp .clkExit
   319                              <1> 
   320                              <1> .clkBCDtoHex:
   321                              <1> ;Converts a BCD value to a Hex byte
   322                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   323 00002840 51                  <1>     push rcx
   324 00002841 0FB6C0              <1>     movzx eax, al   ;Zero extend
   325 00002844 89C1                <1>     mov ecx, eax    ;Save al in ecx
   326 00002846 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   327 0000284B 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   328 00002851 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   329                              <1> .cbth0:
   330 00002854 050A000000          <1>     add eax, 10
   331 00002859 E2F9                <1>     loop .cbth0
   332 0000285B 59                  <1>     pop rcx
   333 0000285C C3                  <1>     ret
   334                              <1> 
   335                              <1> .clkHexToBCD:
   336                              <1> ;Converts a Hex byte into two BCD digits
   337                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   338 0000285D 51                  <1>     push rcx
   339 0000285E 0FB6C0              <1>     movzx eax, al   ;Zero extend
   340 00002861 31C9                <1>     xor ecx, ecx
   341                              <1> .chtb0:
   342 00002863 3D0A000000          <1>     cmp eax, 10
   343 00002868 7209                <1>     jb .chtb1
   344 0000286A 2D0A000000          <1>     sub eax, 10
   345 0000286F FFC1                <1>     inc ecx
   346 00002871 EBF0                <1>     jmp short .chtb0
   347                              <1> .chtb1:
   348 00002873 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   349 00002876 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   350 00002878 59                  <1>     pop rcx
   351 00002879 C3                  <1>     ret
   352 0000287A 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   353                              <1> ;When counting the number of days, first compute the number of years since
   354                              <1> ; 1980 and your year. 
   355                              <1> ;Then, using the table below, find the number of leap years between 1980
   356                              <1> ; and (YourYear - 1). 
   357                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   358                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   359                              <1> ;Use the months table to get the number of days in a normal month as leap 
   360                              <1> ; years are added using the previous comment.
   361                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   362                              <1> ; a leap year using the table. If it is, add an extra day.
   363                              <1> .clkLeapYears:
   364 0000287C 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   364 00002885 24282C30            <1>
   365 00002889 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   365 00002892 585C60              <1>
   366                              <1> .clkMonths:
   367 00002895 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   367 0000289E 1F1E1F              <1>
   368                              <1> ;COM Driver headers and main interrupt strat
   369                              <1> com1Intr:
   370 000028A1 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   371 000028A8 EB19                <1>     jmp short comIntr
   372                              <1> com2Intr:
   373 000028AA C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   374 000028B1 EB10                <1>     jmp short comIntr
   375                              <1> com3Intr:
   376 000028B3 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   377 000028BA EB07                <1>     jmp short comIntr
   378                              <1> com4Intr:
   379 000028BC C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   380                              <1> comIntr:
   381 000028C3 50                  <1>     push rax
   382 000028C4 53                  <1>     push rbx
   383 000028C5 51                  <1>     push rcx
   384 000028C6 52                  <1>     push rdx
   385 000028C7 56                  <1>     push rsi
   386 000028C8 57                  <1>     push rdi
   387 000028C9 488B1DE4FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   388 000028D0 B003                <1>     mov al, 03h ;Unknown Command
   389 000028D2 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   390 000028D6 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   391                              <1> 
   392 000028D8 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   393 000028DB 3C04                <1>     cmp al, 4   ;Read Character(s)
   394 000028DD 7462                <1>     jz .comRead
   395 000028DF 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   396 000028E1 0F849B000000        <1>     jz .comNondestructiveRead   
   397 000028E7 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   398 000028E9 0F8484000000        <1>     jz .comReadInputStatus
   399 000028EF 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   400 000028F1 0F84B9000000        <1>     jz .comFlushInputBuffers
   401 000028F7 3C08                <1>     cmp al, 8
   402 000028F9 0F84DB000000        <1>     jz .comWrite
   403 000028FF 3C09                <1>     cmp al, 9
   404 00002901 0F84D3000000        <1>     jz .comWrite
   405 00002907 3C0A                <1>     cmp al, 0Ah
   406 00002909 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   407 0000290F EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   408                              <1> .comErrorNoCount:
   409 00002911 B002                <1>     mov al, 02h ;Unknown device
   410 00002913 EB19                <1>     jmp short .comWriteErrorCode
   411                              <1> .comReadError:
   412 00002915 BA0B000000          <1>     mov edx, 0Bh
   413                              <1> .comWriteError:
   414 0000291A BA0A000000          <1>     mov edx, 0Ah
   415                              <1> .comError:
   416 0000291F 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   417 00002922 B902000000          <1>     mov ecx, 02h    ;Unknown device
   418 00002927 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   419 00002929 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   420 0000292C 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   421                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   422 0000292E B480                <1>     mov ah, 80h ;Set error bit
   423 00002930 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   424                              <1> .comExit:
   425 00002934 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   426 0000293A 5F                  <1>     pop rdi
   427 0000293B 5E                  <1>     pop rsi
   428 0000293C 5A                  <1>     pop rdx
   429 0000293D 59                  <1>     pop rcx
   430 0000293E 5B                  <1>     pop rbx
   431 0000293F 58                  <1>     pop rax
   432 00002940 C3                  <1>     ret
   433                              <1> 
   434                              <1> .comRead:
   435 00002941 B005                <1>     mov al, 05h ;Bad request structure length?
   436 00002943 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   437 00002946 75E6                <1>     jne .comWriteErrorCode
   438                              <1> 
   439 00002948 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   440 0000294C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   441                              <1> .cr1:
   442 0000294E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   443 00002951 741B                <1>     je .cre2
   444                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   445 00002953 B802000000          <1>     mov eax, 02h    ;Recieve 
   446 00002958 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   447 0000295E 6698                <1>     cbw     ;Zero extend to upper byte
   448 00002960 CD34                <1>     int 34h ;Recieve Char
   449 00002962 72BB                <1>     jc .comError
   450 00002964 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   451 00002967 74EA                <1>     je .cr11
   452 00002969 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   453 0000296A FFC1                <1>     inc ecx
   454 0000296C EBE0                <1>     jmp short .cr1
   455                              <1> .cre2:
   456 0000296E 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   457 00002971 EBC1                <1>     jmp short .comExit
   458                              <1> 
   459                              <1> .comReadInputStatus:
   460 00002973 B005                <1>     mov al, 05h ;Bad request structure length?
   461 00002975 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   462 00002978 75B4                <1>     jne .comWriteErrorCode
   463 0000297A 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   464 00002980 EBB2                <1>     jmp short .comExit
   465                              <1> 
   466                              <1> .comNondestructiveRead:
   467                              <1> ;Acts like a "read one character if there is one" function
   468 00002982 B005                <1>     mov al, 05h ;Bad request structure length?
   469 00002984 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   470 00002987 75A5                <1>     jne .comWriteErrorCode
   471                              <1> .cndr1:
   472 00002989 B802000000          <1>     mov eax, 02h    ;Recieve 
   473 0000298E 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   474 00002994 6698                <1>     cbw     ;Zero extend to upper byte
   475 00002996 CD34                <1>     int 34h ;Recieve Char
   476 00002998 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   477 0000299E 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   478 000029A1 7405                <1>     je .cndr2
   479 000029A3 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   480 000029A6 EB8C                <1>     jmp short .comExit
   481                              <1> .cndr2:
   482 000029A8 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   483 000029AE EB84                <1>     jmp short .comExit
   484                              <1> 
   485                              <1> .comFlushInputBuffers:
   486 000029B0 B005                <1>     mov al, 05h ;Bad request structure length?
   487 000029B2 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   488 000029B5 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   489                              <1> .cfib0:
   490 000029BB 8A1584000000        <1>     mov dl, byte [.comDevice]
   491 000029C1 6698                <1>     cbw
   492 000029C3 B802000000          <1>     mov eax, 02h    ;Recieve
   493 000029C8 CD34                <1>     int 34h
   494 000029CA 0F8241FFFFFF        <1>     jc .comErrorNoCount
   495 000029D0 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   496 000029D3 75E6                <1>     jne .cfib0
   497 000029D5 E95AFFFFFF          <1>     jmp .comExit
   498                              <1> 
   499                              <1> .comWrite:
   500 000029DA B005                <1>     mov al, 05h ;Bad request structure length?
   501 000029DC 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   502 000029DF 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   503                              <1> 
   504 000029E5 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   505 000029E9 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   506                              <1> .cw1: 
   507 000029EB 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   508 000029EE 7417                <1>     je .cw2
   509 000029F0 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   510 000029F1 B401                <1>     mov ah, 01h ;Move function number into ah
   511 000029F3 8A154C000000        <1>     mov dl, byte [.comDevice]
   512 000029F9 6698                <1>     cbw     ;Zero extend to upper byte
   513 000029FB CD34                <1>     int 34h ;Transmit char
   514 000029FD 0F821CFFFFFF        <1>     jc .comError
   515 00002A03 FFC1                <1>     inc ecx
   516 00002A05 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   517                              <1> .cw2:
   518 00002A07 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   519 00002A0A E925FFFFFF          <1>     jmp .comExit
   520                              <1> 
   521                              <1> .comOutputStatus:
   522                              <1> ;Read MODEM status
   523 00002A0F B005                <1>     mov al, 05h ;Bad request structure length?
   524 00002A11 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   525 00002A14 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   526                              <1> 
   527 00002A1A 8A1525000000        <1>     mov dl, byte [.comDevice]
   528 00002A20 6698                <1>     cbw     ;Zero extend to upper byte
   529 00002A22 B403                <1>     mov ah, 03h     ;Get status
   530 00002A24 CD34                <1>     int 34h
   531 00002A26 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   532 00002A2C 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   533 00002A31 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   534 00002A34 F7D0                <1>     not eax      ;Bitwise inversion
   535 00002A36 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   536 00002A3B 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   537 00002A40 E9EFFEFFFF          <1>     jmp .comExit
   538 00002A45 00                  <1> .comDevice   db 0
    39                                  %include "./Source/Drivers/diskDrv.asm"
    40                              <1> msdDriver:
    41 00002A46 50                  <1>     push rax
    42 00002A47 53                  <1>     push rbx
    43 00002A48 51                  <1>     push rcx
    44 00002A49 52                  <1>     push rdx
    45 00002A4A 56                  <1>     push rsi
    46 00002A4B 57                  <1>     push rdi
    47 00002A4C 55                  <1>     push rbp
    48 00002A4D 4150                <1>     push r8
    49 00002A4F 488B1D5EFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    50 00002A56 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    51 00002A5A B003                <1>     mov al, drvBadCmd
    52 00002A5C 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    53 00002A62 B001                <1>     mov al, drvBadUnit 
    54 00002A64 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    55 00002A68 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    56 00002A6E 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    57 00002A75 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    58 00002A79 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    59 00002A7C 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    60 00002A80 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    61 00002A84 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    62 00002A86 488D0D9A000000      <1>     lea rcx, .msdTable
    63 00002A8D 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    64 00002A91 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    65 00002A93 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    66 00002A95 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    67 00002A98 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    68                              <1> .msdDriverExit:
    69 00002A9A 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    70 00002AA0 4158                <1>     pop r8
    71 00002AA2 5D                  <1>     pop rbp
    72 00002AA3 5F                  <1>     pop rdi
    73 00002AA4 5E                  <1>     pop rsi
    74 00002AA5 5A                  <1>     pop rdx
    75 00002AA6 59                  <1>     pop rcx
    76 00002AA7 5B                  <1>     pop rbx
    77 00002AA8 58                  <1>     pop rax
    78 00002AA9 C3                  <1>     ret
    79                              <1> 
    80                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    81 00002AAA 4889FB              <1>     mov rbx, rdi
    82 00002AAD 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    83 00002AB0 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    84 00002AB2 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    85                              <1> ;Now fall through to general error
    86                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    87 00002AB5 B401                <1>     mov ah, 01h
    88 00002AB7 CD33                <1>     int 33h ;Read status of last operation
    89 00002AB9 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    90 00002ABC B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    91 00002ABE 7460                <1>     je .msdWriteErrorCode 
    92 00002AC0 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    93 00002AC2 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    94 00002AC5 7459                <1>     je .msdWriteErrorCode 
    95 00002AC7 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    96 00002ACA 7454                <1>     je .msdWriteErrorCode
    97                              <1> ;Device Not Ready
    98 00002ACC B002                <1>     mov al, 02h  ;Device not ready code
    99 00002ACE 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   100 00002AD1 744D                <1>     je .msdWriteErrorCode
   101 00002AD3 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   102 00002AD7 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   103                              <1> ;Write Protected
   104 00002ADB 30C0                <1>     xor al, al
   105 00002ADD 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   106 00002AE2 743C                <1>     je .msdWriteErrorCode
   107                              <1> ;CRC Error
   108 00002AE4 B004                <1>     mov al, 04h     ;CRC error code
   109 00002AE6 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   110 00002AEB 7433                <1>     je .msdWriteErrorCode
   111 00002AED 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   112 00002AF2 742C                <1>     je .msdWriteErrorCode
   113 00002AF4 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   114 00002AF9 7425                <1>     je .msdWriteErrorCode
   115                              <1> ;Seek Error
   116 00002AFB B006                <1>     mov al, 06h     ;Seek error code
   117 00002AFD 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   118 00002B00 741E                <1>     je .msdWriteErrorCode
   119                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   120                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   121 00002B02 B007                <1>     mov al, 07h
   122 00002B04 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   123 00002B07 7417                <1>     je .msdWriteErrorCode
   124                              <1> ;Sector Not Found
   125 00002B09 B008                <1>     mov al, 08h     ;Sector not found code
   126 00002B0B 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   127 00002B0E 7410                <1>     je .msdWriteErrorCode
   128                              <1> ;Write faults
   129 00002B10 B00A                <1>     mov al, 0Ah     ;Write fault
   130 00002B12 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   131 00002B15 7409                <1>     je .msdWriteErrorCode
   132                              <1> ;Read faults
   133 00002B17 B00B                <1>     mov al, 0Bh     ;Read fault
   134 00002B19 80F911              <1>     cmp cl, 11h     ;Read error
   135 00002B1C 7402                <1>     je .msdWriteErrorCode
   136                              <1> ;General Errors
   137 00002B1E B00C                <1>     mov al, 0Ch     ;Everything else is general error
   138                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   139 00002B20 B480                <1>     mov ah, 80h ;Set error bit
   140 00002B22 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   141 00002B26 C3                  <1>     ret ;Return to set done bit
   142                              <1> .msdTable:
   143 00002B27 0000                <1>     dw 0                            ;Function 0
   144 00002B29 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   145 00002B2B 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   146 00002B2D 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   147 00002B2F 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   148 00002B31 0000                <1>     dw 0                            ;Function 5
   149 00002B33 0000                <1>     dw 0                            ;Function 6
   150 00002B35 0000                <1>     dw 0                            ;Function 7
   151 00002B37 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   152 00002B39 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   153 00002B3B 0000                <1>     dw 0                            ;Function 10
   154 00002B3D 0000                <1>     dw 0                            ;Function 11
   155 00002B3F C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   156 00002B41 D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   157 00002B43 ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   158 00002B45 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   159 00002B47 0000                <1>     dw 0                            ;Function 16
   160 00002B49 0000                <1>     dw 0                            ;Function 17
   161 00002B4B 0000                <1>     dw 0                            ;Function 18
   162 00002B4D 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   163 00002B4F 0000                <1>     dw 0                            ;Function 20
   164 00002B51 0000                <1>     dw 0                            ;Function 21
   165 00002B53 0000                <1>     dw 0                            ;Function 22
   166 00002B55 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   167 00002B57 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   168                              <1> 
   169                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   170                              <1> .msdMedChk:          ;Function 1
   171 00002B59 B005                <1>     mov al, 05h ;Bad request structure length
   172 00002B5B 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   173 00002B5E 75C0                <1>     jne .msdWriteErrorCode
   174                              <1> 
   175 00002B60 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   176 00002B65 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   177 00002B6C 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   178 00002B6F F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   179 00002B72 753F                <1>     jnz .mmcNoChange
   180                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   181 00002B74 B416                <1>     mov ah, 16h 
   182 00002B76 CD33                <1>     int 33h
   183 00002B78 0F8237FFFFFF        <1>     jc .msdGenDiskError
   184 00002B7E 80FC80              <1>     cmp ah, 80h
   185 00002B81 740E                <1>     je .mmcNoChangeLine
   186 00002B83 80FC86              <1>     cmp ah, 86h
   187 00002B86 7409                <1>     je .mmcNoChangeLine
   188 00002B88 84E4                <1>     test ah, ah ;No change?
   189 00002B8A 7427                <1>     jz .mmcNoChange
   190 00002B8C F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   191 00002B8F 750D                <1>     jnz .mmcChange
   192                              <1> ;If nothing, fall through and test manually, should never happen though
   193                              <1> .mmcNoChangeLine:
   194                              <1> ;Now we test Media Descriptor
   195 00002B91 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   196 00002B96 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   197 00002B99 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   198 00002B9C 7410                <1>     je .mmcUnsure
   199                              <1> .mmcChange:
   200 00002B9E C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   201 00002BA2 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   202 00002BA9 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   203                              <1>     ;Check here if there were any open handles on the device when it was changed
   204 00002BAD C3                  <1>     ret
   205                              <1> .mmcUnsure:
   206 00002BAE C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   207 00002BB2 C3                  <1>     ret
   208                              <1> .mmcNoChange:
   209 00002BB3 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   210 00002BB7 C3                  <1>     ret
   211                              <1> 
   212                              <1> 
   213                              <1> .msdBuildBPB:        ;Function 2
   214 00002BB8 B005                <1>     mov al, 05h ;Bad request structure length
   215 00002BBA 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   216 00002BBD 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   217                              <1> 
   218 00002BC3 4889DE              <1>     mov rsi, rbx
   219 00002BC6 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   220 00002BCB 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   221 00002BD2 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   222 00002BD5 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   223 00002BD9 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   224 00002BDB 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   225 00002BDE B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   226 00002BE3 CD33                <1>     int 33h
   227 00002BE5 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   228                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   229 00002BEB 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   230 00002BEF 7418                <1>     je .mbbpb0
   231 00002BF1 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   232 00002BF5 7412                <1>     je .mbbpb0
   233 00002BF7 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   234 00002BFB 740C                <1>     je .mbbpb0
   235 00002BFD 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   236 00002C01 B007                <1>     mov al, 07h ;Unknown media error code
   237 00002C03 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   238                              <1> .mbbpb0:
   239 00002C09 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   240 00002C0C 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   241 00002C11 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   242 00002C18 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   243 00002C1C 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   244 00002C1F 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   245 00002C23 B90F000000          <1>     mov ecx, bpbEx_size/8
   246 00002C28 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   247 00002C2B C3                  <1>     ret
   248                              <1> .msdIOCTLRead:       ;Function 3, returns done
   249 00002C2C B005                <1>     mov al, drvBadDrvReq
   250 00002C2E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   251 00002C31 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   252 00002C37 C3                  <1>     ret
   253                              <1> .msdRead:            ;Function 4
   254                              <1> ;Will read one sector at a time.
   255 00002C38 B005                <1>     mov al, 05h ;Bad request structure length
   256 00002C3A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   257 00002C3D 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   258                              <1> 
   259 00002C43 4889DF              <1>     mov rdi, rbx
   260 00002C46 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   261                              <1> .msdr0:
   262 00002C48 B682                <1>     mov dh, 82h ;LBA Read Sectors
   263 00002C4A E841010000          <1>     call .msdBlkIOCommon
   264 00002C4F 0F8255FEFFFF        <1>     jc .msdIOError
   265 00002C55 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   266 00002C5D 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   267 00002C65 FFC6                <1>     inc esi
   268 00002C67 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   269 00002C6A 75DC                <1>     jne .msdr0
   270 00002C6C 4889FB              <1>     mov rbx, rdi
   271 00002C6F C3                  <1>     ret
   272                              <1> .msdWrite:           ;Function 8
   273                              <1> ;Will write one sector at a time.
   274 00002C70 B005                <1>     mov al, 05h ;Bad request structure length
   275 00002C72 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   276 00002C75 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   277                              <1> 
   278 00002C7B 4889DF              <1>     mov rdi, rbx
   279 00002C7E 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   280                              <1> .msdw0:
   281 00002C80 B683                <1>     mov dh, 83h ;LBA Write Sectors
   282 00002C82 E809010000          <1>     call .msdBlkIOCommon
   283 00002C87 0F821DFEFFFF        <1>     jc .msdIOError
   284 00002C8D 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   285 00002C95 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   286 00002C9D FFC6                <1>     inc esi
   287 00002C9F 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   288 00002CA2 75DC                <1>     jne .msdw0
   289 00002CA4 4889FB              <1>     mov rbx, rdi
   290 00002CA7 C3                  <1>     ret
   291                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   292                              <1> ;Will write one sector at a time and then verify it.
   293 00002CA8 B005                <1>     mov al, 05h ;Bad request structure length
   294 00002CAA 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   295 00002CAD 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   296                              <1> 
   297 00002CB3 4889DF              <1>     mov rdi, rbx
   298 00002CB6 31F6                <1>     xor esi, esi  ;Set counter to zero
   299                              <1> .msdwv0:
   300 00002CB8 B683                <1>     mov dh, 83h ;LBA Write Sectors
   301 00002CBA E8D1000000          <1>     call .msdBlkIOCommon
   302 00002CBF 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   303 00002CC5 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   304 00002CC7 E8C4000000          <1>     call .msdBlkIOCommon
   305 00002CCC 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   306 00002CD2 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   307 00002CDA 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   308 00002CE2 FFC6                <1>     inc esi
   309 00002CE4 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   310 00002CE7 75CF                <1>     jne .msdwv0
   311 00002CE9 4889FB              <1>     mov rbx, rdi
   312 00002CEC C3                  <1>     ret
   313                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   314 00002CED B005                <1>     mov al, drvBadDrvReq
   315 00002CEF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   316 00002CF2 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   317                              <1> 
   318 00002CF8 C3                  <1>     ret
   319                              <1> .msdDevOpen:         ;Function 13
   320 00002CF9 B005                <1>     mov al, drvBadDrvReq
   321 00002CFB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   322 00002CFE 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   323                              <1> 
   324 00002D04 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   325 00002D09 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   326 00002D10 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   327 00002D13 C3                  <1>     ret
   328                              <1> .msdDevClose:        ;Function 14
   329 00002D14 B005                <1>     mov al, drvBadDrvReq
   330 00002D16 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   331 00002D19 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   332                              <1> 
   333 00002D1F 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   334 00002D24 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   335 00002D2B FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   336 00002D2E C3                  <1>     ret
   337                              <1> .msdRemovableMedia:  ;Function 15
   338 00002D2F B005                <1>     mov al, drvBadDrvReq
   339 00002D31 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   340 00002D34 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   341                              <1> 
   342 00002D3A 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   343 00002D3F 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   344 00002D46 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   345 00002D49 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   346 00002D4E 31D2                <1>     xor edx, edx    ;Busy bit clear
   347 00002D50 A880                <1>     test al, 80h
   348 00002D52 0F44CA              <1>     cmovz ecx, edx
   349 00002D55 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   350 00002D59 C3                  <1>     ret
   351                              <1> .msdGenericIOCTL:    ;Function 19
   352 00002D5A B005                <1>     mov al, drvBadDrvReq
   353 00002D5C 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   354 00002D5F 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   355                              <1> 
   356 00002D65 C3                  <1>     ret
   357                              <1> .msdGetLogicalDev:   ;Function 23
   358 00002D66 B005                <1>     mov al, drvBadDrvReq
   359 00002D68 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   360 00002D6B 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   361                              <1> 
   362 00002D71 8A0541000000        <1>     mov al, byte [.msdCurDev]
   363 00002D77 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   364 00002D7A C3                  <1>     ret
   365                              <1> .msdSetLogicalDev:   ;Function 24
   366 00002D7B B005                <1>     mov al, drvBadDrvReq
   367 00002D7D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   368 00002D80 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   369                              <1> 
   370 00002D86 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   371 00002D89 880529000000        <1>     mov byte [.msdCurDev], al
   372 00002D8F C3                  <1>     ret
   373                              <1> 
   374                              <1> .msdBlkIOCommon:  ;Does block IO
   375                              <1> ;Called with rdi containing old rbx value and ah with function number
   376                              <1> ;rbp points to bpb
   377                              <1> ;Error handled by caller
   378                              <1> ;Sector count handled by caller
   379                              <1> ;Called with dh = BIOS function number
   380 00002D90 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   381 00002D95 8A90[B92D0000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   382 00002D9B 31C9                <1>     xor ecx, ecx
   383 00002D9D 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   384 00002DA0 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   385 00002DA4 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   386 00002DA8 88F4                <1>     mov ah, dh
   387 00002DAA B001                <1>     mov al, 01h ;Do one sector at a time 
   388 00002DAC CD33                <1>     int 33h
   389 00002DAE C3                  <1>     ret
   390                              <1> 
   391 00002DAF 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   392                              <1> ;LASTDRIVE default is 5
   393                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   394                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   395 00002DB8 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   396                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   397 00002DB9 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   398 00002DBE 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   399 00002DC3 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   399 00002DCC 000000000000000000- <1>
   399 00002DD5 000000000000000000- <1>
   399 00002DDE 000000000000000000- <1>
   399 00002DE7 00000000            <1>
   400 00002DEB 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   400 00002DF4 000000000000000000- <1>
   400 00002DFD 000000000000000000- <1>
   400 00002E06 000000000000000000- <1>
   400 00002E0F 000000000000000000- <1>
   400 00002E18 000000000000000000- <1>
   400 00002E21 000000000000000000- <1>
   400 00002E2A 000000000000000000- <1>
   400 00002E33 000000000000000000- <1>
   400 00002E3C 000000000000000000- <1>
   400 00002E45 000000000000000000- <1>
   400 00002E4E 000000000000000000- <1>
   400 00002E57 000000000000000000- <1>
   400 00002E60 000000000000000000- <1>
   400 00002E69 000000000000000000- <1>
   400 00002E72 000000000000000000- <1>
   400 00002E7B 000000000000000000- <1>
   400 00002E84 000000000000000000- <1>
   400 00002E8D 000000000000000000- <1>
   400 00002E96 000000000000000000- <1>
   400 00002E9F 000000000000000000- <1>
   400 00002EA8 000000000000000000- <1>
   400 00002EB1 000000000000000000- <1>
   400 00002EBA 000000000000000000- <1>
   400 00002EC3 000000000000000000- <1>
   400 00002ECC 000000000000000000- <1>
   400 00002ED5 000000000000000000- <1>
   400 00002EDE 000000000000000000- <1>
   400 00002EE7 000000000000000000- <1>
   400 00002EF0 000000000000000000- <1>
   400 00002EF9 000000000000000000- <1>
   400 00002F02 000000000000000000- <1>
   400 00002F0B 000000000000000000- <1>
   400 00002F14 000000000000000000- <1>
   400 00002F1D 000000000000000000- <1>
   400 00002F26 000000000000000000- <1>
   400 00002F2F 000000000000000000- <1>
   400 00002F38 000000000000000000- <1>
   400 00002F41 000000000000000000- <1>
   400 00002F4A 000000000000000000- <1>
   400 00002F53 000000000000000000- <1>
   400 00002F5C 000000000000000000- <1>
   400 00002F65 000000000000000000- <1>
   400 00002F6E 000000000000000000- <1>
   400 00002F77 000000000000000000- <1>
   400 00002F80 000000000000000000- <1>
   400 00002F89 000000000000000000- <1>
   400 00002F92 000000000000000000- <1>
   400 00002F9B 000000000000000000- <1>
   400 00002FA4 000000000000000000- <1>
   400 00002FAD 000000000000000000- <1>
   400 00002FB6 000000000000000000- <1>
   400 00002FBF 000000000000000000- <1>
   400 00002FC8 000000000000000000- <1>
   400 00002FD1 000000000000000000- <1>
   400 00002FDA 000000000000000000- <1>
   400 00002FE3 000000000000000000- <1>
   400 00002FEC 000000000000000000- <1>
   400 00002FF5 000000000000000000- <1>
   400 00002FFE 000000000000000000- <1>
   400 00003007 000000000000000000- <1>
   400 00003010 000000000000000000- <1>
   400 00003019 000000000000000000- <1>
   400 00003022 000000000000000000- <1>
   400 0000302B 000000000000000000- <1>
   400 00003034 000000000000000000- <1>
   400 0000303D 000000000000        <1>
   401                              <1> 
   402                              <1> endptr equ $
    40                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    41                                  ;Paragraph alignment
    42                                  %include "./Source/BSS/dosDynaDataArea.asm"
    43                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    44                              <1> ; the MCB chain!
    45                              <1> ddaStart:
    46 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    47                              <1> 
    48                              <1> ;Create DPB chain of first 5 available DPB slots
    49                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    50 00000010 <res 35h>           <1> firstDPB        resb dpb_size
    51 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    52                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    53                              <1> ;Always jettison this space
    54 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    55 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    56 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    57                              <1> 
    58 00000119 <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    59 00000139 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    60                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    61                              <1> dynamicDataAreaLength equ $ - ddaStart
    61          ------------------  <1>  info: assembly required 1+5+2 passes

