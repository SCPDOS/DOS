     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvExtFun   equ 40h ;If set, functions 13, 17, 18 supported (must be)
    73                              <1>     devDrvIOCTL2   equ 80h ;If set, IOCTL function 19 supported
    74                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    75                              <1>     devDrvIOCTL    equ 4000h ;If set, Generic IOCTL supported
    76                              <1>     devDrvChar     equ 8000h ;If set, Char device
    77                              <1> ;Bit 0 1=console input
    78                              <1> ;    1 1=console output (character devices)
    79                              <1> ;    2 1=NUL device
    80                              <1> ;    3 1=CLOCK device
    81                              <1> ;    4 1=INT 49 output (CON)
    82                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    83                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    84                              <1> ;   11 1=open/close/removable media supported (3.0+)
    85                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    86                              <1> ;      1=media descriptor in FAT required (block devices)
    87                              <1> ;   14 1=IOCTL supported
    88                              <1> ;   15 0=block device
    89                              <1> ;      1=character device
    90                              <1> 
    91                              <1> ;Driver structures
    92                              <1> 
    93                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    94                              <1> 
    95                              <1>     .hdrlen resb 1  ;Length of the request header
    96                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    97                              <1>     .cmdcde resb 1  ;Command code
    98                              <1>     .status resw 1  ;Status word
    99                              <1>     .devptr resq 1  ;Device queue pointer field
   100                              <1> 
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> struc drvReqHdr
   104                              <1>     drvReqHdrM
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   105                              <1> endstruc
   106                              <1> 
   107                              <1> struc initReqPkt  ;Init Request Packet
   108                              <1> 
   109                              <1>     drvReqHdrM   ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   110 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   111 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   112 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   113 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   118                              <1> 
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   120 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   121 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   122 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   129 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   130 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   131 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   132                              <1> 
   133                              <1> endstruc
   134                              <1> 
   135                              <1> struc ioReqPkt   ;IO Request Packet
   136                              <1> 
   137                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   138 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   139 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   140 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   141 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   142 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   143                              <1> 
   144                              <1> endstruc
   145                              <1> 
   146                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   147                              <1>     
   148                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   149 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc statusReqPkt   ;Status Request Packet
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   156                              <1> 
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc openReqPkt ;Open Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc closeReqPkt ;Close Device Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   180                              <1>      
   181                              <1> endstruc
   182                              <1> 
   183                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   184                              <1> 
   185                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   186 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   187 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   188 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   189 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   190 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   201                              <1>     
   202                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   203                              <1> 
   204                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   138                              <1>     ;If any of the three bits are set, then ALL three bits are set
   139                              <1>     ; in addition to whatever the user passed to search for.
   140                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   141                              <1> 
   142                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   143                              <1> 
   144 00000000 ??????              <1>     .jmpBoot                resb 3 
   145 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   146 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   147 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   148 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   149 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   150 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   151 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   152 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   153 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   154 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   155 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   156 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   157 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   158 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   159 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   160 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   161 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   162 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   163                              <1> 
   164                              <1> endstruc
   165                              <1> 
   166                              <1> struc FSInfo
   167                              <1> 
   168 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   169 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   170 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   171 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   172 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   173 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   174 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   175                              <1> 
   176                              <1> endstruc
     8                                  %include "./Source/Include/dosStruc.inc"
     9                              <1> 
    10                              <1> ;-------------------------------------------------------;
    11                              <1> ; This include file contains miscellaneous internal     ;
    12                              <1> ; SCP/DOS structures.                                   ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> 
    15                              <1> ;------------------------------------------------------------------------;
    16                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    17                              <1> ; its file system structure. This is used to locate files and structures
    18                              <1> ; on the device itself and to translate file requests to cluster chains
    19                              <1> ; to LBAs to pass to the disk driver..
    20                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    21                              <1> ; drivers Initialise routine has been called.
    22                              <1> ;------------------------------------------------------------------------;
    23                              <1> struc dpb        ;Drive Parameter Block
    24                              <1> 
    25 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    26 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    27 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    28 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    29 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    30 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    31 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    32 00000009 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    33 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    34 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    35 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    36 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    37                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    38 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    39 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    40 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    41 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    42 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    43 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    44                              <1> 
    45                              <1> endstruc
    46                              <1> 
    47                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    48                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    49                              <1> ;------------------------------------------------------------------------;
    50                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    51                              <1> ; All disk pathing requests go via the CDS for that drive.
    52                              <1> ; The default drive is the last accessed drive, this number is stored
    53                              <1> ; in the DOS data area.
    54                              <1> ; The CDS is stored as an array with the offset into the array being 
    55                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    56                              <1> ;
    57                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> struc cds       ;Current Directory structure
    60 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    61 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    62 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    63 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    64 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    65 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    66                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    67                              <1> ; another, we save the number of chars to skip to that deep level).
    68                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    69                              <1> ; Only affects for SUBST drives, not JOIN
    70                              <1> ; Flags: Bit 15 set = Network drive
    71                              <1> ;        Bit 14 set = Physical drive
    72                              <1> ;        Bit 13 set = JOIN'ed drive
    73                              <1> ;        Bit 12 set = SUBST'ed drive
    74                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    75                              <1> endstruc
    76                              <1> ;CDS equates
    77                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    78                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    79                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    80                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    81                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    82                              <1> ;------------------------------------------------------------------------;
    83                              <1> ; The SFT is a way to allow applications to open file handles to files 
    84                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    85                              <1> ; under the first header, and then a second header will be linked to the 
    86                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    87                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    88                              <1> ; using the FCBS= command. Default FCBS=5.
    89                              <1> ;
    90                              <1> ; A file handle describes the file, and the location within the file that
    91                              <1> ; we are reading. The file handle can be manipulated without the file
    92                              <1> ; being in memory, thus allowing the user to access data without needing 
    93                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    94                              <1> ; accessing devices, by treating them as files with their drivers 
    95                              <1> ; responding and translating the manipulations of the file handle itself.
    96                              <1> ; Neither the driver nor the application should see or use the SFT for
    97                              <1> ; the handle, as it is subject to change (and will change when file 
    98                              <1> ; sharing provisions are included). The DOS will make requests to the 
    99                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   100                              <1> ; track of the information in the SFT entry for that handle. 
   101                              <1> ;
   102                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   103                              <1> ; can point to the same file. It all depends on what the applications 
   104                              <1> ; want to do with the File.
   105                              <1> ;
   106                              <1> ; !!!!IMPORTANT!!!!
   107                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   108                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   109                              <1> ;
   110                              <1> ;Each SFT may look like this:
   111                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   112                              <1> ;            |                |
   113                              <1> ;       wNumFiles*sft    wNumFiles*sft
   114                              <1> ;
   115                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   116                              <1> ; System FCBs.
   117                              <1> ;
   118                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   119                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   120                              <1> ;
   121                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   122                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   123                              <1> ;------------------------------------------------------------------------;
   124                              <1> struc sfth   ;System file table header
   125                              <1> ; This is the SFT header.
   126                              <1> ; This structure comes before the start of the first file in the array/table.
   127 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   128 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc sft
   132                              <1> ;This is the file struc itself
   133 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   134 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   135 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   136 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   137 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   138 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   139 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   140 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   141 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   142 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   143 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   144 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   145 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   146 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   147 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   148 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   149 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   150 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   151 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   152                              <1> ;                           0 means no record
   153                              <1> endstruc
   154                              <1> ;Open Mode equates
   155                              <1> ;Access modes   Bits[2:0]
   156                              <1> ReadAccess      equ 0h
   157                              <1> WriteAccess     equ 1h
   158                              <1> RWAccess        equ 2h
   159                              <1> ;Bit 3 reserved 0
   160                              <1> ;Sharing modes  Bits[6:4]
   161                              <1> CompatShare     equ 0h
   162                              <1> denyRWShare     equ 10h
   163                              <1> denyWriteShare  equ 20h
   164                              <1> denyReadShare   equ 30h
   165                              <1> denyNoneShare   equ 40h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> ;------------------------------------------------------------------------;
   198                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   199                              <1> ; to an internal buffer, and then copying it to the specified location
   200                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   201                              <1> ; another request for the same sector from the same device is made, so 
   202                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   203                              <1> ; size, selected according to the largest detected sector size during 
   204                              <1> ; the initial loadup.
   205                              <1> ;
   206                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   207                              <1> ;
   208                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   209                              <1> ;------------------------------------------------------------------------;
   210                              <1> 
   211                              <1> struc bufferHdr
   212 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   213 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   219 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   220 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   221                              <1>     .dataarea:             ;Points to the start of the data area
   222                              <1> endstruc
   223                              <1> ;Buffer Flag equates
   224                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   225                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   226                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   227                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   228                              <1> refBuffer   equ 20h ;Data in buffer referenced by an application
   229                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   230                              <1> ;Note! A buffer is marked as referenced IF it has been accessed via 
   231                              <1> ; a Read or Write call. 
   232                              <1> ; When a buffer is used temporarily for internal purposes (as when DOS
   233                              <1> ; gives a driver a buffer) and then DOS reads data from that buffer (such as
   234                              <1> ; a BUILD BPB situation), the data is left as unreferenced as the use for that 
   235                              <1> ; buffer goes away before the end of the DOS call, and there is no danger of.
   236                              <1> ; of misbehaviour.
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> ; Memory control block for each memory arena
   239                              <1> ;------------------------------------------------------------------------;
   240                              <1> struc mcb
   241 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   242 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   243 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   244 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   245                              <1>     .program:
   246                              <1> endstruc
   247                              <1> ;MCB equates
   248                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   249                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   250                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   251                              <1> mcbMarkCtn      equ "M"
   252                              <1> mcbMarkEnd      equ "Z"
   253                              <1> 
   254                              <1> memFirstFit     equ 0   ;First free block goes to application
   255                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   256                              <1> memLastFit      equ 2   ;Last free block goes to application
   257                              <1> 
   258                              <1> ;Owner = Para aligned address => Owning application PSP
   259                              <1> ;...To consider...
   260                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   261                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   262                              <1> ;------------------------------------------------------------------------;
   263                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   264                              <1> ; following order, thus allowing for return values to be placed in the 
   265                              <1> ; registers by accessing the caller register stack frame.
   266                              <1> ;------------------------------------------------------------------------;
   267                              <1> struc callerFrame
   268 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   269 00000008 ????????????????    <1>     .rbx    resq 1    
   270 00000010 ????????????????    <1>     .rcx    resq 1
   271 00000018 ????????????????    <1>     .rdx    resq 1
   272 00000020 ????????????????    <1>     .rsi    resq 1
   273 00000028 ????????????????    <1>     .rdi    resq 1
   274 00000030 ????????????????    <1>     .rbp    resq 1
   275 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   276 00000040 ????????????????    <1>     .r9     resq 1
   277                              <1> ;Pushed by Processor when invoked via Interrupt
   278 00000048 ????????????????    <1>     .rip    resq 1
   279 00000050 ????????????????    <1>     .cs     resq 1
   280 00000058 ????????????????    <1>     .flags  resq 1
   281                              <1> endstruc
   282                              <1> 
   283                              <1> struc fcb
   284                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   285 00000000 ??                  <1>     .driveNum   resb 1
   286 00000001 ????????????????    <1>     .filename   resb 8
   287 00000009 ??????              <1>     .fileext    resb 3
   288 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   289                              <1> ;One block consists of 128 records, of size denoted in the below
   290 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   291 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   292 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   293 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   294 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   295 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   296 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   297 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   298 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   299                              <1>     ;If record size > 64, high byte is ignored.
   300                              <1>     ;Used for random read and write operations to find the right record
   301                              <1> endstruc
   302                              <1> 
   303                              <1> struc filename
   304                              <1> ;8.3 File name struct
   305 00000000 ????????????????    <1>     .fName  resb 8
   306 00000008 ??????              <1>     .fExt   resb 3
   307                              <1> endstruc
   308                              <1> 
   309                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   310 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   311 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   312 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   313 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   314 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   315 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   316 00000016 ????                <1>     .fileTime   resw 1  ;File time
   317 00000018 ????                <1>     .fileDate   resw 1  ;File date
   318 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   319 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   320                              <1> endstruc
   321                              <1> 
   322                              <1> struc psp
   323 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   324 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   325 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   326 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   327 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   328 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   329 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   330 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   331 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   332 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   333 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   334 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   335 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   336 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   337                              <1> ;Extra handle arrays are grouped into a linked list
   338                              <1> ;The below are in the same place as in DOS
   339 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   340 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   341                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   342 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   343 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   344                              <1> endstruc
   345                              <1> 
   346                              <1> struc clkStruc
   347 00000000 ????                <1>     .dateWord   resw 1
   348 00000002 ??                  <1>     .minutes    resb 1
   349 00000003 ??                  <1>     .hours      resb 1
   350 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   351 00000005 ??                  <1>     .seconds    resb 1
   352                              <1> endstruc
   353                              <1> 
   354                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   355                              <1> ;for a space of 64Gb
   356                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   357                              <1> 
   358                              <1> ;Critical Error AH bitfield equates
   359                              <1> critRead    equ 0h
   360                              <1> critWrite   equ 1h
   361                              <1> critDOS     equ 0h
   362                              <1> critFAT     equ 2h
   363                              <1> critDir     equ 4h
   364                              <1> critData    equ 6h
   365                              <1> critFailOK  equ 8h
   366                              <1> critRetryOK equ 10h
   367                              <1> critIgnorOK equ 20h
   368                              <1> critCharDev equ 80h
   369                              <1> 
   370                              <1> critIgnore  equ 0
   371                              <1> critRetry   equ 1
   372                              <1> critAbort   equ 2
   373                              <1> critFail    equ 3
   374                              <1> 
   375                              <1> ;MISC ASCII control chars
   376                              <1> NUL equ 00h ;^@         | ASCII Null
   377                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   378                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   379                              <1> BEL equ 07h ;^G         | ASCII Bell
   380                              <1> BSP equ 08h ;^H         | ASCII Backspace
   381                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   382                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   383                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   384                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   385                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   386                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   387                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   388                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   389                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   390                              <1> SPC equ 20h ;Printable  | ASCII Space
   391                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   392                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   393                              <1> 
   394                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   395                              <1> ;Extended Ascii Codes
   396                              <1> eF1     equ 3Bh ;F1 second byte
   397                              <1> eF2     equ 3Ch ;F2 second byte
   398                              <1> eF3     equ 3Dh ;F3 second byte
   399                              <1> eF4     equ 3Eh ;F4 second byte
   400                              <1> eF5     equ 3Fh ;F5 second byte
   401                              <1> eF6     equ 40h ;F6 second byte
   402                              <1> eF7     equ 41h ;F7 second byte
   403                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   404                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   405                              <1> eIns    equ 52h ;Insert second byte
   406                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
     9                                  %include "./Source/Debug/debSym.inc"
    10                              <1> ;This file will include the debuging symbols
    11                              <1> 
    12                              <1> %define true 1
    13                              <1> %define false 0
    14                              <1> 
    15                              <1> ;Switch the DEBUG to false in production!
    16                              <1> %define DEBUG false
    17                              <1> %define DPBINFO false
    18                              <1> %define REGS false
    19                              <1> %define ENDSTATUS true
    20                              <1> %define ALLOCTEST false
    21                              <1> 
    22                              <1> 
    23                              <1> ;Use this space as the debug stack
    24                              <1> %define debStackTop 80000h
    10                                  %include "./Source/Include/dosError.inc"
    11                              <1> ;DOS Error codes
    12                              <1> 
    13                              <1> ;Extended Error Codes
    14                              <1> errInvFnc   equ 1   ;Invalid function number
    15                              <1> errFnf      equ 2   ;File not found
    16                              <1> errPnf      equ 3   ;Path not found
    17                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    18                              <1> errAccDen   equ 5   ;Access denied (to resource)
    19                              <1> errBadHdl   equ 6   ;Invalid handle
    20                              <1> errMCBbad   equ 7   ;MCB's destroyed
    21                              <1> errNoMem    equ 8   ;Insufficient memory
    22                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    23                              <1> errBadEnv   equ 10  ;Invalid environment
    24                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    25                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    26                              <1> errInvDat   equ 13  ;Invalid data
    27                              <1> ;           equ 14  ;Reserved
    28                              <1> errBadDrv   equ 15  ;Invalid drive specified
    29                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    30                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    31                              <1> errNoFil    equ 18  ;No more files
    32                              <1> ;The following are Driver error codes + 19
    33                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    34                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    35                              <1> errUnkUnt   equ 20  ;Unknown Unit
    36                              <1> errDrvNR    equ 21  ;Drive not ready
    37                              <1> errUnkCmd   equ 22  ;Unknown Command
    38                              <1> errCRCerr   equ 23  ;Data (CRC) error
    39                              <1> errBadRLn   equ 24  ;Bad request structure length
    40                              <1> errSekErr   equ 25  ;Seek error
    41                              <1> errUnkMed   equ 26  ;Unknown media type
    42                              <1> errSecNF    equ 27  ;Sector not Found
    43                              <1> errNoPap    equ 28  ;Printer out of paper
    44                              <1> errWF       equ 29  ;Write fault
    45                              <1> errRF       equ 30  ;Read fault
    46                              <1> errGF       equ 31  ;General fault
    47                              <1> ;----------------------------------------------
    48                              <1> ;The following two go inbetween the Disk errors
    49                              <1> errShrVio   equ 32  ;Sharing violations
    50                              <1> errLokVio   equ 33  ;File Lock violation
    51                              <1> ;----------------------------------------------
    52                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    53                              <1> errNoFCB    equ 35  ;FCB unavailable
    54                              <1> errShrFul   equ 36  ;Sharing buffer full
    55                              <1> 
    56                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    57                              <1> 
    58                              <1> errFilExist equ 80  ;File already exists
    59                              <1> errDirExist equ 82  ;Directory already exists
    60                              <1> errFI44     equ 83  ;Fail on INT 44h
    61                              <1> errRedir    equ 84  ;Too many levels of redirection
    62                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    63                              <1> errBadPass  equ 86  ;Bad password
    64                              <1> errBadParam equ 87  ;Bad parameter passed to request
    65                              <1> errNetWrite equ 88  ;Network Write Fault
    66                              <1> ;-----------------------------------------------------------------------------
    67                              <1> ;Error Loci
    68                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    69                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    70                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    71                              <1> eLocChr     equ 4   ;Serial/Character Device error
    72                              <1> eLocMem     equ 5   ;Related to RAM
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error Actions
    75                              <1> eActRet     equ 1   ;Retry
    76                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    77                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    78                              <1> eActAbt     equ 4   ;Abort with cleanup
    79                              <1> eActKil     equ 5   ;Abort without cleanup
    80                              <1> eActIgn     equ 6   ;Ignore error
    81                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    82                              <1> ;-----------------------------------------------------------------------------
    83                              <1> ;Error classes
    84                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    85                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    86                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    87                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    88                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    89                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    90                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    91                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    92                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    93                              <1> eClsLocked  equ 10  ;Resource Locked
    94                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    95                              <1> eClsClash   equ 12  ;Resource already exists!
    96                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  Segment .text align=1   ;Init code
    12                                  %define currSegVBase 0
    13                                  %include "./Source/Sysinit/sysInit.asm"
    14                              <1> ; We arrive here with the following values in the registers.
    15                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    16                              <1> ; dx  = Int 33h boot device number
    17                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    18                              <1> 
    19 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    20 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
    21 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
    22 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    23 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    24 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    25 0000001A F348A5              <1>     rep movsq   ;Copy over
    26 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    27 00000022 50                  <1>     push rax
    28 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    29                              <1> sysInitldr:
    30                              <1> ;Now the tough part, load DOS to 800
    31 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    32                              <1> .read:
    33 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    34 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    34 00000035 00                  <1>
    35 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    36 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    37 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    38 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    39 0000003F CD33                <1>     int 33h
    40 00000041 0F83B9010000        <1>     jnc initBegin   ;No error? Yay, DOS loaded.
    41 00000047 FFCE                <1>     dec esi
    42 00000049 75DE                <1>     jnz .read
    43 0000004B 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    44 00000052 B804130000          <1>     mov eax, 1304h
    45 00000057 CD30                <1>     int 30h
    46 00000059 CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    47 0000005B 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    47 00000064 6F6164204572726F72- <1>
    47 0000006D 0A0D00              <1>
    48 00000070 000000000000000000- <1>     db 100h-($-$$) dup 00h ;Fill with nulls  
    48 00000079 000000000000000000- <1>
    48 00000082 000000000000000000- <1>
    48 0000008B 000000000000000000- <1>
    48 00000094 000000000000000000- <1>
    48 0000009D 000000000000000000- <1>
    48 000000A6 000000000000000000- <1>
    48 000000AF 000000000000000000- <1>
    48 000000B8 000000000000000000- <1>
    48 000000C1 000000000000000000- <1>
    48 000000CA 000000000000000000- <1>
    48 000000D3 000000000000000000- <1>
    48 000000DC 000000000000000000- <1>
    48 000000E5 000000000000000000- <1>
    48 000000EE 000000000000000000- <1>
    48 000000F7 000000000000000000  <1>
    49                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    50                              <1>     ;Store space for a static PSP
    51 00000100 000000000000000000- <1>     db 100h dup 00h
    51 00000109 000000000000000000- <1>
    51 00000112 000000000000000000- <1>
    51 0000011B 000000000000000000- <1>
    51 00000124 000000000000000000- <1>
    51 0000012D 000000000000000000- <1>
    51 00000136 000000000000000000- <1>
    51 0000013F 000000000000000000- <1>
    51 00000148 000000000000000000- <1>
    51 00000151 000000000000000000- <1>
    51 0000015A 000000000000000000- <1>
    51 00000163 000000000000000000- <1>
    51 0000016C 000000000000000000- <1>
    51 00000175 000000000000000000- <1>
    51 0000017E 000000000000000000- <1>
    51 00000187 000000000000000000- <1>
    51 00000190 000000000000000000- <1>
    51 00000199 000000000000000000- <1>
    51 000001A2 000000000000000000- <1>
    51 000001AB 000000000000000000- <1>
    51 000001B4 000000000000000000- <1>
    51 000001BD 000000000000000000- <1>
    51 000001C6 000000000000000000- <1>
    51 000001CF 000000000000000000- <1>
    51 000001D8 000000000000000000- <1>
    51 000001E1 000000000000000000- <1>
    51 000001EA 000000000000000000- <1>
    51 000001F3 000000000000000000- <1>
    51 000001FC 00000000            <1>
    52                              <1> ;END OF FIRST SECTOR!!
    53                              <1> ;DOS SYSINIT BEGINS HERE
    54                              <1> ;First move the alignment of the DOSSEG to 4Kb
    55                              <1> initBegin:
    56 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    57 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    58 00000206 0F32                <1>     rdmsr
    59 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    60 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    61 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    62 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    63 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    64 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    65 00000221 89F8                <1>     mov eax, edi
    66 00000223 4889FA              <1>     mov rdx, rdi
    67 00000226 48C1EA20            <1>     shr rdx, 20h
    68 0000022A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    69                              <1> ;------------------------------------------------;
    70                              <1> ;              Connect Debugger                  ;
    71                              <1> ;------------------------------------------------;
    72                              <1> %if DEBUG
    73                              <1> ;Only connect if in debug mode
    74                              <1>     mov eax, 0C501h ;Connect debugger
    75                              <1>     int 35h
    76                              <1> %endif
    77                              <1> ;------------------------------------------------;
    78                              <1> ;           Sanitise the data area               ;
    79                              <1> ;------------------------------------------------;
    80                              <1> ; This call initialises ALL fields in the DOS    ;
    81                              <1> ; data area with 0's. Thus any fields, which     ;
    82                              <1> ; need to be initialised with a 0 value, are     ;
    83                              <1> ; initialised for free.                          ;
    84                              <1> ;------------------------------------------------;
    85 0000022C B9[0BD90300]        <1>     mov ecx, dSegLen
    86 00000231 30C0                <1>     xor al, al
    87 00000233 57                  <1>     push rdi    ;Temp save rdi on the stack
    88 00000234 F3AA                <1>     rep stosb
    89 00000236 5F                  <1>     pop rdi
    90                              <1> ;------------------------------------------------;
    91                              <1> ;          Start saving Basic DOS data           ;
    92                              <1> ;------------------------------------------------;
    93 00000237 6444883C25-         <1>     mov byte fs:[bootDrive], r15b ;Save the boot drive in memory
    93 0000023C [10C00300]          <1>
    94                              <1> ;Copy DOS to its final resting place
    95 00000240 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    95 00000245 [00C00300]          <1>
    96 00000249 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    96 0000024E [08C00300]          <1>
    97 00000252 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    98 00000255 4881C7[0BD90300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    99 0000025C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
   100 00000263 B900100000          <1>     mov ecx, 1000h
   101 00000268 F348A5              <1>     rep movsq
   102                              <1> 
   103 0000026B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   104 0000026D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   105 00000271 664489C0            <1>     mov ax, r8w
   106 00000275 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
   107 0000027D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
   108 00000285 64C60425[70C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
   108 0000028D 05                  <1>
   109                              <1>     ;mov byte fs:[numPhysVol], 0    ;Number of logical drives
   110 0000028E 64C60425[96C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 8 files, at start 5
   110 00000296 05                  <1>
   111 00000297 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
   111 0000029C [97C00300]1400      <1>
   112 000002A2 64C60425[71C00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
   112 000002AA 01                  <1>
   113                              <1>     ;If no detected Int 33h devices, halt 
   114 000002AB 49C1E810            <1>     shr r8, 2*8
   115 000002AF 4584C0              <1>     test r8b, r8b
   116 000002B2 0F84B40A0000        <1>     jz errorInit
   117                              <1> ;------------------------------------------------;
   118                              <1> ;          Add additional page tables            ;
   119                              <1> ;------------------------------------------------;
   120                              <1> ;This will allow for up to 64Gb of addressible space
   121 000002B8 4889EF              <1>     mov rdi, rbp
   122                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
   123 000002BB B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
   124 000002C0 57                  <1>     push rdi
   125 000002C1 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
   125 000002CA 00                  <1>
   126                              <1> pdtLoop:
   127 000002CB 48AB                <1>     stosq
   128 000002CD 480500002000        <1>     add rax, 200000h
   129 000002D3 FFC9                <1>     dec ecx
   130 000002D5 75F4                <1>     jnz pdtLoop
   131 000002D7 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   132                              <1> ;Now we add every 4kb page to the page directory pointer table
   133                              <1> ;15 4kb pages to consider
   134 000002D8 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   135 000002DB 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   136 000002DE 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   137 000002E5 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   138 000002EC B93C000000          <1>     mov ecx, 60
   139 000002F1 480D03000000        <1>     or rax, 3h      ;present and r/w
   140                              <1> pdptLoop:
   141 000002F7 48AB                <1>     stosq
   142 000002F9 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   143 000002FF FFC9                <1>     dec ecx
   144 00000301 75F4                <1>     jnz pdptLoop
   145 00000303 0F20DF              <1>     mov rdi, cr3
   146 00000306 0F22DF              <1>     mov cr3, rdi
   147                              <1> 
   148                              <1> ;------------------------------------------------;
   149                              <1> ;                   MCB inits                    ;
   150                              <1> ;------------------------------------------------;
   151                              <1> mcbInit:
   152 00000309 B820E80000          <1>     mov eax, 0E820h
   153 0000030E CD35                <1>     int 35h
   154                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   155 00000310 E804010000          <1>     call .mcbFindAddress
   156 00000315 7349                <1>     jnc .mcbi1  ;If found, proceed
   157                              <1>     ;Here, we try use E801h
   158 00000317 B801E80000          <1>     mov eax, 0E801h
   159 0000031C CD35                <1>     int 35h
   160 0000031E 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   161 00000321 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   162 00000324 85C0                <1>     test eax, eax
   163 00000326 741B                <1>     jz .worst
   164 00000328 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   165 0000032B C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   166 0000032E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   167 00000336 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   168 0000033E E909010000          <1>     jmp mcbBuild
   169                              <1> .worst:
   170                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   171 00000343 B800002000          <1>     mov eax, 200000h
   172 00000348 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   172 0000034D [08C00300]          <1>
   173 00000351 29D8                <1>     sub eax, ebx
   174 00000353 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   175 0000035B E9EC000000          <1>     jmp mcbBuild 
   176                              <1> .mcbi1:
   177 00000360 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   178 00000363 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   178 0000036C 00                  <1>
   179 0000036D 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   180 00000371 0F85C2000000        <1>     jne .mcbFail
   181 00000377 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   182                              <1>     ;PCI hole always exists so this value will always be a dword
   183 0000037B 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   184 00000383 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   185 00000386 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   186 00000389 4881FB00000001      <1>     cmp rbx, 1000000h  
   187 00000390 773C                <1>     ja .skipISA
   188                              <1> ;Here we deal with ISA hole issues
   189 00000392 B820E80000          <1>     mov eax, 0E820h
   190 00000397 CD35                <1>     int 35h
   191 00000399 48B800000001000000- <1>     mov rax, 1000000h
   191 000003A2 00                  <1>
   192 000003A3 E871000000          <1>     call .mcbFindAddress
   193 000003A8 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   194 000003AE 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   194 000003B7 00                  <1>
   195 000003B8 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   196 000003BC 0F858A000000        <1>     jne mcbBuild  
   197 000003C2 488B5808            <1>     mov rbx, qword [rax + 8]
   198 000003C6 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   199                              <1> .skipISA:
   200 000003CE B820E80000          <1>     mov eax, 0E820h
   201 000003D3 CD35                <1>     int 35h
   202 000003D5 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   202 000003DE 00                  <1>
   203 000003DF E835000000          <1>     call .mcbFindAddress
   204 000003E4 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   205 000003E6 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   205 000003EF 00                  <1>
   206 000003F0 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   207 000003F4 7556                <1>     jne mcbBuild   
   208 000003F6 488B5808            <1>     mov rbx, qword [rax + 8]
   209                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   210 000003FA 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   210 00000403 00                  <1>
   211 00000404 4839CB              <1>     cmp rbx, rcx
   212 00000407 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   213 0000040B 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   213 00000410 [1BC00300]          <1>
   214 00000414 E933000000          <1>     jmp mcbBuild
   215                              <1> .mcbFindAddress:
   216                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   217                              <1> ;Entry: rax = Address of arena to search for
   218                              <1> ;       rsi = Pointer to memory map
   219                              <1> ;       ecx = Number of 24 byte entries
   220                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   221                              <1> ;       CF=CY : value in rax not found
   222 00000419 56                  <1>     push rsi
   223 0000041A 51                  <1>     push rcx
   224 0000041B 50                  <1>     push rax
   225                              <1> .mfa0:
   226 0000041C 483B06              <1>     cmp rax, qword [rsi]
   227 0000041F 7410                <1>     je .mcbAddressFound
   228 00000421 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   229 00000428 FFC9                <1>     dec ecx
   230 0000042A 79F0                <1>     jns .mfa0
   231                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   232 0000042C 58                  <1>     pop rax
   233 0000042D 59                  <1>     pop rcx
   234 0000042E 5E                  <1>     pop rsi
   235 0000042F F9                  <1>     stc
   236 00000430 C3                  <1>     ret
   237                              <1> .mcbAddressFound:
   238 00000431 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   239 00000434 59                  <1>     pop rcx ;Pop old rax value off
   240 00000435 59                  <1>     pop rcx
   241 00000436 5E                  <1>     pop rsi
   242 00000437 F8                  <1>     clc
   243 00000438 C3                  <1>     ret
   244                              <1> .mcbFail:
   245 00000439 488D2D53090000      <1>     lea rbp, mcbFailmsg
   246 00000440 B804130000          <1>     mov eax, 1304h
   247 00000445 CD30                <1>     int 30h
   248 00000447 E920090000          <1>     jmp errorInit
   249                              <1> 
   250                              <1> mcbBuild:
   251                              <1> ;Actually build the MCB chain here
   252                              <1> ;Start by computing the difference between userbase and DOS area
   253                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   254 0000044C 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   254 00000451 [08C00300]          <1>
   255 00000455 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   256 0000045C 56                  <1>     push rsi    ;Save ptr
   257 0000045D 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   258 00000464 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   259 00000467 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   260 0000046F 5B                  <1>     pop rbx
   261 00000470 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   262 00000473 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   263 0000047B 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   264 00000483 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   265 00000486 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   266 00000489 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   266 0000048E [2BC00300]          <1>
   267                              <1> 
   268                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   269 00000492 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   269 0000049A 00000000            <1>
   270 0000049E 746E                <1>     jz .skipISA
   271                              <1>     ;Here if an ISA hole exists, place a MCB around it
   272 000004A0 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   273                              <1>     ;Remove one MCB worth of space from alloc
   274 000004A7 31C9                <1>     xor ecx, ecx
   275 000004A9 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   276 000004AC 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   277 000004B2 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   278 000004B5 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   279 000004B8 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   280 000004BB C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   281 000004BE 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   282 000004C6 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   282 000004CF 00                  <1>
   283 000004D0 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   284 000004D3 480510000000        <1>     add rax, mcb_size
   285 000004D9 4829C1              <1>     sub rcx, rax    ;Take their difference
   286 000004DC C1E904              <1>     shr ecx, 4
   287 000004DF 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   288 000004E2 C1E104              <1>     shl ecx, 4  ;Get bytes again
   289 000004E5 4881C310000000      <1>     add rbx, mcb_size
   290 000004EC 4801CB              <1>     add rbx, rcx
   291                              <1>     ;RBX should now be at 16Mb
   292 000004EF C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   293 000004F2 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   294 000004FA 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   295 00000502 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   296 00000505 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   297 0000050B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   298                              <1> .skipISA:
   299                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   300                              <1>     ;rbx points to a block with "Z" marker
   301 0000050E 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   301 00000516 00000000            <1>
   302 0000051A 7470                <1>     jz .exit
   303                              <1>     ;Add PCI hole MCB
   304 0000051C 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   305                              <1>     ;Remove one MCB worth of space from alloc
   306 00000523 31C9                <1>     xor ecx, ecx
   307 00000525 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   308 00000528 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   309 0000052E C1E104              <1>     shl ecx, 4  ;Get bytes
   310 00000531 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   311 00000534 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   312 00000537 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   313 0000053A 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   314 00000542 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   314 0000054B 00                  <1>
   315 0000054C 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   316 0000054F 480510000000        <1>     add rax, mcb_size
   317 00000555 4829C1              <1>     sub rcx, rax    ;Take their difference
   318 00000558 C1E904              <1>     shr ecx, 4
   319 0000055B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   320 0000055E C1E104              <1>     shl ecx, 4  ;Get bytes again
   321 00000561 4881C310000000      <1>     add rbx, mcb_size
   322 00000568 4801CB              <1>     add rbx, rcx
   323                              <1>     ;RBX should now be at 4Gb
   324 0000056B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   325 0000056E 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   326 00000576 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   326 0000057B [1BC00300]          <1>
   327 0000057F 48C1E904            <1>     shr rcx, 4
   328 00000583 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   329 00000589 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   330                              <1> .exit:
   331                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   332 0000058C 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   333                              <1> ;------------------------------------------------;
   334                              <1> ;          Kernel inits and adjustments          ;
   335                              <1> ;------------------------------------------------;
   336                              <1> ;Adjust Interrupt Entries Int 40h-49h
   337                              <1> adjInts:
   338 00000593 B340                <1>     mov bl, 40h
   339 00000595 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   340 0000059A CD35                <1>     int 35h
   341 0000059C B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   342 000005A1 488D3D5A080000      <1>     lea rdi, intData
   343 000005A8 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   344                              <1> .ai0:
   345 000005AA B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   346 000005AF 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   347 000005B2 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   348                              <1> .ai1:
   349 000005B5 CD35                <1>     int 35h
   350 000005B7 4881C708000000      <1>     add rdi, 8
   351 000005BE FFC1                <1>     inc ecx
   352 000005C0 81F950000000        <1>     cmp ecx, 50h
   353 000005C6 75E2                <1>     jne .ai0
   354                              <1> 
   355                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   356                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   357                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   358                              <1>     %if DEBUG
   359                              <1> debugPopUpMsg:
   360                              <1>     push rbx
   361                              <1>     push rbp
   362                              <1>     push rcx
   363                              <1>     push rdx
   364                              <1>     mov ecx, 53 ;A large number of lines
   365                              <1>     xor edx, edx    ;COM 1
   366                              <1> .cls:
   367                              <1>     mov eax, 010Ah ;Transmit Line feed
   368                              <1>     int 34h
   369                              <1>     dec ecx
   370                              <1>     jnz .cls
   371                              <1>     lea rbx, qword [debPrintNullString + rbp]
   372                              <1>     lea rbp, .msg
   373                              <1>     call rbx
   374                              <1>     jmp short .exit
   375                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   376                              <1> .exit:
   377                              <1>     pop rdx
   378                              <1>     pop rcx
   379                              <1>     pop rbp
   380                              <1>     pop rbx
   381                              <1>     %endif
   382                              <1> 
   383                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   384 000005C8 488D159D070000      <1>     lea rdx, errorInit ;Get segment start address
   385 000005CF B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   386 000005D4 CD41                <1>     int 41h
   387 000005D6 488D158F070000      <1>     lea rdx, errorInit ;Get segment start address
   388 000005DD B844250000          <1>     mov eax, 2544h
   389 000005E2 CD41                <1>     int 41h
   390                              <1> ;------------------------------------------------;
   391                              <1> ;          Driver Adjustments and inits          ;
   392                              <1> ;------------------------------------------------;
   393                              <1> ;Modify the pointers in nData before putting them in the data area
   394 000005E4 48012D97080000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   395 000005EB 48012D9A080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   396 000005F2 48012D9B080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   397                              <1> ;Copy the Null driver to its location in Sysvars
   398 000005F9 B922000000          <1>     mov ecx, drvHdr_size
   399 000005FE 488D357D080000      <1>     lea rsi, qword [nData]
   400 00000605 488DBD[73C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   401 0000060C F3A4                <1>     rep movsb   
   402                              <1> 
   403                              <1> ;Adjust the addresses in the other driver headers 
   404 0000060E 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   404 00000610 [8B3F000000000000]  <1>
   405 00000618 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   406 0000061D 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   407                              <1> adjDrivers:
   408 00000621 E833070000          <1>     call adjustDrvHdr
   409 00000626 E2F9                <1>     loop adjDrivers
   410                              <1> 
   411                              <1> ;Open NUL
   412                              <1> ;NUL opened
   413                              <1> ;Open CON
   414                              <1> conInit:    ;Rather than keeping this resident... do it here
   415                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   416 00000628 488D95[76420000]    <1>     lea rdx, qword [rbp + fastOutput]
   417 0000062F B849250000          <1>     mov eax, 2549h
   418 00000634 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   419 00000636 488D95[7E420000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   420 0000063D B83B250000          <1>     mov eax, 253Bh
   421 00000642 CD41                <1>     int 41h ;Hook int 3Bh
   422                              <1> .ci0:
   423 00000644 B401                <1>     mov ah, 01      ;Get buffer status
   424 00000646 CD36                <1>     int 36h
   425 00000648 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   426 0000064A 30E4                <1>     xor ah, ah
   427 0000064C CD36                <1>     int 36h ;Read key to flush from buffer
   428 0000064E EBF4                <1>     jmp short .ci0
   429                              <1> .ci1:
   430 00000650 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   431 00000655 CD30                <1>     int 30h
   432 00000657 B402                <1>     mov ah, 02h
   433 00000659 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   434 0000065B 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   435 0000065D CD30                <1>     int 30h
   436 0000065F B707                <1>     mov bh, 07h     ;Grey/Black attribs
   437 00000661 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   438 00000666 CD30                <1>     int 30h
   439                              <1> 
   440                              <1>     ;Save ptr to ConHdr in Sysvars
   441 00000668 488D85[8B3F0000]    <1>     lea rax, qword [rbp + conHdr]
   442 0000066F 6448890425-         <1>     mov qword fs:[vConPtr], rax
   442 00000674 [4BC00300]          <1>
   443                              <1> 
   444                              <1>     ;Fix the ext ESC function handler address
   445 00000678 488D85[461E0000]    <1>     lea rax, qword [rbp + editKeys]
   446 0000067F 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   446 00000684 [59000000]          <1>
   447                              <1> 
   448                              <1> ;CLOCK init prock
   449                              <1> ;Set the time and date using the RTC (if present)
   450                              <1> clkInit:
   451                              <1>    ;Save ptr to ClkHdr in Sysvars first
   452 00000688 488D85[F13F0000]    <1>     lea rax, qword [rbp + clkHdr]
   453 0000068F 6448890425-         <1>     mov qword fs:[clockPtr], rax
   453 00000694 [43C00300]          <1>
   454                              <1> ;CH - Hours, in BCD
   455                              <1> ;CL - Minutes, in BCD
   456                              <1> ;DH - Seconds, in BCD
   457 00000698 B402                <1>     mov ah, 02  ;Read RTC Time
   458 0000069A CD3A                <1>     int 3Ah
   459 0000069C 7271                <1>     jc .clkEnd  ;if error, just exit
   460                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   461 0000069E 0FB6C5              <1>     movzx eax, ch   ;Hours
   462 000006A1 E84D000000          <1>     call .bcd2Bin
   463 000006A6 88C5                <1>     mov ch, al
   464 000006A8 0FB6C1              <1>     movzx eax, cl     ;Mins
   465 000006AB E843000000          <1>     call .bcd2Bin
   466 000006B0 88C1                <1>     mov cl, al
   467 000006B2 0FB6C6              <1>     movzx eax, dh   ;Seconds
   468 000006B5 E839000000          <1>     call .bcd2Bin
   469 000006BA 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   470 000006BC 89C2                <1>     mov edx, eax
   471 000006BE B42D                <1>     mov ah, 2Dh ;DOS Set Time
   472 000006C0 CD41                <1>     int 41h
   473                              <1> ;Now get the date from RTC
   474                              <1> ;CL - Year, in BCD
   475                              <1> ;DH - Month, in BCD
   476                              <1> ;DL - Day, in BCD
   477 000006C2 B404                <1>     mov ah, 04  ;Read RTC Date
   478 000006C4 CD3A                <1>     int 3Ah
   479 000006C6 7247                <1>     jc .clkEnd
   480                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   481 000006C8 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   482 000006CB E823000000          <1>     call .bcd2Bin
   483 000006D0 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   484 000006D3 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   485 000006D9 0FB6C6              <1>     movzx eax, dh   ;Get Months
   486 000006DC E812000000          <1>     call .bcd2Bin
   487 000006E1 88C6                <1>     mov dh, al  
   488 000006E3 0FB6C2              <1>     movzx eax, dl   ;Get day
   489 000006E6 E808000000          <1>     call .bcd2Bin
   490 000006EB 88C2                <1>     mov dl, al
   491 000006ED B42B                <1>     mov ah, 2Bh ;DOS Set Date
   492 000006EF CD41                <1>     int 41h
   493 000006F1 EB1C                <1>     jmp short .clkEnd
   494                              <1> .bcd2Bin:
   495                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   496 000006F3 51                  <1>     push rcx
   497 000006F4 89C1                <1>     mov ecx, eax
   498 000006F6 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   499 000006FB 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   500 00000701 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   501 00000704 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   502                              <1> .b2blp:
   503 00000707 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   504 00000709 FFC9                <1>     dec ecx
   505 0000070B 75FA                <1>     jnz .b2blp
   506                              <1> .b2bexit:
   507 0000070D 59                  <1>     pop rcx
   508 0000070E C3                  <1>     ret
   509                              <1> .clkEnd:
   510                              <1> ;------------------------------------------------;
   511                              <1> ;         Link DOS to temporary Buffer           ;
   512                              <1> ;------------------------------------------------;
   513                              <1> tempBufferInit:
   514 0000070F 488DBD[19010000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   515 00000716 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   515 0000071B [55C00300]          <1>
   516 0000071F 31C0                <1>     xor eax, eax
   517 00000721 48FFC8              <1>     dec rax
   518 00000724 48AB                <1>     stosq   ;.nextBufPtr, end of list
   519 00000726 AA                  <1>     stosb   ;.driveNumber, Free entry
   520 00000727 48FFC0              <1>     inc rax
   521 0000072A AA                  <1>     stosb   ;.bufferFlags, No flags
   522                              <1> ;------------------------------------------------;
   523                              <1> ;         Init msd driver, create DPB            ;
   524                              <1> ;------------------------------------------------;
   525                              <1> storageInits:
   526                              <1> ;First save dpb pointer in sysvars
   527 0000072B 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   528 00000732 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   528 00000737 [33C00300]          <1>
   529                              <1> ;Open Mass Storage
   530                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   531                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   532                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   533                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   534                              <1>     ;mov al, byte fs:[numPhysVol]
   535                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   536                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   537                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   538                              <1>     ;Check if it returned OK first!
   539                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   540                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   541                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   542                              <1>     ;mov byte fs:[numPhysVol], al
   543                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   544                              <1> 
   545                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   546 0000073B E864070000          <1>     call diskInit
   547 00000740 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   548 00000743 648A0425[6FC00300]  <1>     mov al, byte fs:[numPhysVol]
   549 0000074B 488D95[11490000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   550 00000752 30C9                <1>     xor cl, cl  ;Clear counter
   551 00000754 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   551 00000759 [33C00300]          <1>
   552                              <1> .si0:   
   553 0000075D 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   554 00000760 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   555 00000762 CD41                <1>     int 41h
   556                              <1> ;Add other data to DPB
   557 00000764 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   558 00000767 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   559 0000076A 50                  <1>     push rax
   560 0000076B 488D87[13400000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   561 00000772 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   562 00000776 58                  <1>     pop rax
   563 00000777 FEC1                <1>     inc cl
   564 00000779 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   565 0000077B 7416                <1>     je .si1
   566 0000077D 50                  <1>     push rax
   567 0000077E 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   568 00000782 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   569 00000786 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   570 00000789 58                  <1>     pop rax
   571 0000078A 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   572 00000791 EBCA                <1>     jmp short .si0
   573                              <1> .si1:
   574                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   575 00000793 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   576 0000079B 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   577                              <1> ;------------------------------------------------;
   578                              <1> ;          Find largest sector size              ;
   579                              <1> ;------------------------------------------------;
   580                              <1> sectorSizeSearch:
   581                              <1> ;Done by reading BPB's for each drive
   582 0000079E 488D9D[11490000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   583                              <1>     
   584                              <1>     ;Go thru each block individually
   585 000007A5 31C0                <1>     xor eax, eax
   586 000007A7 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   587                              <1> .findLargest:
   588 000007AA 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   589 000007AE 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   590 000007B3 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   591 000007BA 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   592 000007BD 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   593 000007C0 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   594 000007C2 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   594 000007C7 [53C00300]          <1>
   595                              <1>     
   596                              <1> ;------------------------------------------------;
   597                              <1> ;                 Temp CDS inits                 ;
   598                              <1> ;------------------------------------------------;
   599                              <1> tempCDS:
   600                              <1> ;Build a temporary CDS for Drive A to use it for booting
   601 000007CB 488DBD[FCC50300]    <1>     lea rdi, qword [rbp + tmpCDS]  ;Use Temp CDS in the SDA
   602 000007D2 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   602 000007D7 [5DC00300]          <1>
   603                              <1>     ;"A:\"+NULL char (in rev order because LITTLE ENDIAN!!)
   604 000007DB C707413A5C00        <1>     mov dword [rdi + cds.sCurrentPath], 005C3A41h  
   605 000007E1 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsValidDrive   ;Set the drive to be valid!
   606 000007E7 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   606 000007EC [33C00300]          <1>
   607 000007F0 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   608 000007F4 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   609                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   610                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   611                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   612                              <1>     ;cds.dStartCluster is 0 since we zero-ed the data area earlier
   613                              <1> ;------------------------------------------------;
   614                              <1> ;     Set up general PSP areas and DOS vars      ;
   615                              <1> ;------------------------------------------------;
   616                              <1> ;Additional DOS Vars init
   617                              <1>     ;xor eax, eax
   618                              <1>     ;mov byte fs:[currentDrv], al ;Current Drive = Drive A
   619                              <1>     ;mov byte fs:[breakFlag], al  ;Break off
   620                              <1>     ;mov byte fs:[verifyFlag], al ;Write only
   621                              <1>     ;mov byte fs:[singleDrv], al  ;Only used on single drive systems
   622                              <1>     ;mov byte fs:[critErrFlag], al   ;Not in critical error
   623                              <1>     ;mov byte fs:[inDOS], al      ;Not in DOS
   624 000007FA 64C60425[6BC30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   624 00000802 FF                  <1>
   625                              <1>     ;mov word fs:[errorLevel], ax   ;Last return code is 0, no error
   626                              <1>     ;mov byte fs:[allocStrat], al    ;First Fit
   627 00000803 64C60425[33C30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   627 0000080B 2F                  <1>
   628                              <1>     ;mov byte fs:[vConUnread], al   ;vCon has no unread data!
   629                              <1> 
   630                              <1> ;Set network machine name to... nothing!
   631 0000080C 488DBD[38C30300]    <1>     lea rdi, qword [rbp + machineName]
   632 00000813 B910000000          <1>     mov ecx, 10h    ;16 chars long
   633 00000818 B020                <1>     mov al, SPC ;Space char
   634 0000081A F3AA                <1>     rep stosb   ;Fill with space chars
   635                              <1>     ;xor al, al
   636                              <1>     ;mov byte fs:[serverCnt], al ;Set server call count to zero
   637                              <1>     ;mov word fs:[machineNum], ax   ;Clear machine number
   638                              <1> 
   639                              <1> ;Patch Data Table init
   640 0000081C 488DBD[48C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   641 00000823 488D85[A7380000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   642 0000082A 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   643 0000082C 488D85[B1380000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   644 00000833 48AB                <1>     stosq
   645 00000835 488D85[BB380000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   646 0000083C 48AB                <1>     stosq
   647 0000083E 488D85[C5380000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   648 00000845 48AB                <1>     stosq
   649                              <1> 
   650                              <1> ;Initial PSP Init
   651 00000847 488D1DB2F8FFFF      <1>     lea rbx, qword [tempPSP]
   652 0000084E 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   652 00000853 [81C30300]          <1>
   653 00000857 53                  <1>     push rbx
   654 00000858 4881C380000000      <1>     add rbx, psp.dta
   655 0000085F 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   655 00000864 [79C30300]          <1>
   656 00000868 5B                  <1>     pop rbx
   657 00000869 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   658 0000086E C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   659 00000875 48C7430200000000    <1>     mov qword [rbx + psp.allocSize], 0    ;Size of allocation (dummy value)
   660 0000087D 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   661 00000881 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   662 00000885 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   663 00000889 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   663 00000892 FF                  <1>
   664 00000893 48AB                <1>     stosq   ;8 bytes
   665 00000895 31C0                <1>     xor eax, eax
   666 00000897 50                  <1>     push rax    ;Save 0 on the stack
   667 00000898 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   668 0000089B 48AB                <1>     stosq   ;16 bytes
   669 0000089D AB                  <1>     stosd   ;20 bytes
   670 0000089E 58                  <1>     pop rax ;Get 0 back
   671 0000089F 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   672 000008A7 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   673 000008AB C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   674 000008AF 4889DA              <1>     mov rdx, rbx
   675 000008B2 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   676 000008B7 CD41                <1>     int 41h
   677 000008B9 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   678 000008BD B843350000          <1>     mov eax, 3543h
   679 000008C2 CD41                <1>     int 41h
   680 000008C4 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   681 000008C8 B844350000          <1>     mov eax, 3544h
   682 000008CD CD41                <1>     int 41h
   683 000008CF 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   684                              <1> 
   685 000008D3 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   686 000008D8 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   687 000008DC F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   688                              <1> ;------------------------------------------------;
   689                              <1> ;          Default File Handle Creation          ;
   690                              <1> ;                                                ;
   691                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   692                              <1> ;------------------------------------------------;
   693                              <1> defaultFileHandles:
   694                              <1> ;Fill in the default file table entries
   695 000008DE 488D9D[99C00300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   696 000008E5 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   697 000008EC 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   698 000008F2 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   698 000008F7 [3BC00300]          <1>
   699 000008FB 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   699 00000904 20                  <1>
   700                              <1> ;GOTO FIRST FILE 
   701 00000905 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   702                              <1> ;Write AUX
   703 0000090C 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   704 00000911 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   705 00000917 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   706 0000091B C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   707                              <1>     ;No EOF when reading from the device
   708 0000091F 488B85[AD3F0000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   709 00000926 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   710                              <1>     ;Ignore disk related fields and Date/Time of open
   711 0000092A 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   712                              <1>     ;11 chars in 8.3 name
   713 0000092E 488D35AD040000      <1>     lea rsi, auxName
   714 00000935 B903000000          <1>     mov ecx, 3
   715 0000093A F3A4                <1>     rep movsb   ;Move the three bytes
   716 0000093C 4889D0              <1>     mov rax, rdx
   717 0000093F 48AB                <1>     stosq   ;Eight spaces left to print
   718 00000941 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   718 00000946 [81C30300]          <1>
   719 0000094A 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   720                              <1> ;GOTO NEXT ENTRY
   721 0000094E 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   722                              <1>     ;Write CON
   723 00000955 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   724 0000095A 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   725 00000960 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   726 00000964 C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   727                              <1>     ;No EOF when reading from the device
   728 00000968 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   728 0000096D [4BC00300]          <1>
   729 00000971 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   730                              <1>     ;Ignore disk related fields and Date/Time of open
   731 00000975 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   732                              <1>     ;11 chars in 8.3 name
   733 00000979 488D355E040000      <1>     lea rsi, conName
   734 00000980 B903000000          <1>     mov ecx, 3
   735 00000985 F3A4                <1>     rep movsb   ;Move the three bytes
   736 00000987 4889D0              <1>     mov rax, rdx
   737 0000098A 48AB                <1>     stosq   ;Eight spaces left to print
   738 0000098C 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   738 00000991 [81C30300]          <1>
   739 00000995 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   740                              <1> ;GOTO NEXT ENTRY
   741 00000999 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   742                              <1> ;Write PRN
   743 000009A0 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   744 000009A5 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   745 000009AB C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   746 000009AF C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   747                              <1>     ;Want EOF when reading from to the device
   748 000009B3 488B85[CF3F0000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   749 000009BA 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   750                              <1>     ;Ignore disk related fields and Date/Time of open
   751 000009BE 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   752                              <1>     ;11 chars in 8.3 name
   753 000009C2 488D351D040000      <1>     lea rsi, prnName
   754 000009C9 B903000000          <1>     mov ecx, 3
   755 000009CE F3A4                <1>     rep movsb   ;Move the three bytes
   756 000009D0 4889D0              <1>     mov rax, rdx
   757 000009D3 48AB                <1>     stosq   ;Eight spaces left to print
   758 000009D5 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   758 000009DA [81C30300]          <1>
   759 000009DE 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   760                              <1> ;Zero word 0 of entry 4 and 5
   761 000009E2 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   762 000009E9 31C0                <1>     xor eax, eax
   763                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   764                              <1>     ; which is ok as these are empty entries, ready to be used)
   765 000009EB 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   766 000009ED 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   767 000009F4 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   768                              <1> ;------------------------------------------------;
   769                              <1> ;               Load CONFIG.SYS                  ;
   770                              <1> ;------------------------------------------------;
   771                              <1> ;------------------------------------------------;
   772                              <1> ;              Process CONFIG.SYS                ;
   773                              <1> ;------------------------------------------------;
   774                              <1> ;------------------------------------------------;
   775                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   776                              <1> ;------------------------------------------------;
   777                              <1> ;------------------------------------------------;
   778                              <1> ;   Setup Final Data Areas With Overrides from   ;
   779                              <1> ;                  CONFIG.SYS                    ;
   780                              <1> ;------------------------------------------------;
   781                              <1> ;------------------------------------------------;
   782                              <1> ;           Load Command interpreter             ;
   783                              <1> ;------------------------------------------------;
   784 000009F6 488D1580030000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   785 000009FD B409                <1>     mov ah, 09h
   786 000009FF CD41                <1>     int 41h
   787                              <1> ;Resize DOS allocation before loading COMMAND.COM
   788 00000A01 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   788 00000A06 [2BC00300]          <1>
   789 00000A0A 4981C010000000      <1>     add r8, mcb.program
   790 00000A11 BB49110000          <1>     mov ebx, dynamicDataAreaLength
   791 00000A16 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   792 00000A19 FFC3                <1>     inc ebx
   793 00000A1B B44A                <1>     mov ah, 4Ah
   794 00000A1D CD41                <1>     int 41h
   795                              <1>     
   796                              <1>     %if DEBUG && ALLOCTEST
   797                              <1> ;Test Allocation, Growth and Deallocation
   798                              <1>     mov r15, qword fs:[currentPSP]
   799                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   800                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   801                              <1>     mov ah, 48h ;Allocate
   802                              <1>     int 41h
   803                              <1> 
   804                              <1>     mov byte [rax - 10h], 0 ;Trash chain
   805                              <1>     mov r8, rax ;Move the pointer to r8
   806                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   807                              <1>     mov ah, 4Ah
   808                              <1>     int 41h
   809                              <1> 
   810                              <1>     mov ah, 49h ;Free r8
   811                              <1>     int 41h
   812                              <1>     mov qword fs:[currentPSP], r15
   813                              <1>     %endif
   814                              <1> 
   815                              <1>     %if ENDSTATUS
   816                              <1> debugFinal:
   817                              <1>     ;Print system state
   818 00000A1F 55                  <1>     push rbp    ;Only rbp really matters here
   819 00000A20 4989E8              <1>     mov r8, rbp
   820                              <1> 
   821 00000A23 488D2DD0020000      <1>     lea rbp, .msg2
   822 00000A2A 4D8D88[79040000]    <1>     lea r9, qword [r8 + debPrintNullString]
   823 00000A31 41FFD1              <1>     call r9
   824                              <1> 
   825 00000A34 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   826 00000A3B 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   826 00000A40 [08C00300]          <1>
   827                              <1> 
   828 00000A44 4D8D88[B4070000]    <1>     lea r9, qword [r8 + overlayQword]
   829 00000A4B 41FFD1              <1>     call r9
   830                              <1> 
   831 00000A4E 4881C31B000000      <1>     add rbx, 19+8
   832 00000A55 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   832 00000A5A [00C00300]          <1>
   833 00000A5E 41FFD1              <1>     call r9
   834                              <1> 
   835 00000A61 4881C31B000000      <1>     add rbx, 19+8
   836 00000A68 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   836 00000A6D [2BC00300]          <1>
   837 00000A71 41FFD1              <1>     call r9
   838                              <1> 
   839 00000A74 4881C31C000000      <1>     add rbx, 20+8
   840 00000A7B 4D8D88[71070000]    <1>     lea r9, qword [r8 + overlayDword]
   841 00000A82 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   842 00000A8A 41FFD1              <1>     call r9
   843                              <1> 
   844 00000A8D 4881C312000000      <1>     add rbx, 10+8
   845 00000A94 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   846 00000A9C 41FFD1              <1>     call r9
   847                              <1> 
   848 00000A9F 4881C312000000      <1>     add rbx, 10+8
   849 00000AA6 64488B0425-         <1>     mov rax, qword fs:[longMem]
   849 00000AAB [1BC00300]          <1>
   850 00000AAF 4D8D88[B4070000]    <1>     lea r9, qword [r8 + overlayQword]
   851 00000AB6 41FFD1              <1>     call r9
   852                              <1> 
   853 00000AB9 4881C31B000000      <1>     add rbx, 19+8
   854 00000AC0 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   854 00000AC5 [33C00300]          <1>
   855 00000AC9 41FFD1              <1>     call r9
   856                              <1> 
   857 00000ACC 4881C31B000000      <1>     add rbx, 19+8
   858 00000AD3 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   858 00000AD8 [3BC00300]          <1>
   859 00000ADC 41FFD1              <1>     call r9
   860                              <1> 
   861 00000ADF 4881C31B000000      <1>     add rbx, 19+8
   862 00000AE6 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   862 00000AEB [55C00300]          <1>
   863 00000AEF 41FFD1              <1>     call r9
   864                              <1> 
   865 00000AF2 4881C31B000000      <1>     add rbx, 19+8
   866 00000AF9 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   866 00000AFE [5DC00300]          <1>
   867 00000B02 41FFD1              <1>     call r9
   868                              <1> 
   869 00000B05 4D8D88[FF060000]    <1>     lea r9, qword [r8 + overlayByte]
   870                              <1> 
   871 00000B0C 4881C32C000000      <1>     add rbx, 25+19
   872 00000B13 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
   872 00000B19 [6FC00300]          <1>
   873 00000B1D 41FFD1              <1>     call r9
   874                              <1> 
   875 00000B20 4881C31E000000      <1>     add rbx, 30
   876 00000B27 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   876 00000B2D [12C00300]          <1>
   877 00000B31 41FFD1              <1>     call r9
   878                              <1> 
   879 00000B34 4881C31E000000      <1>     add rbx, 30
   880 00000B3B 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   880 00000B41 [11C00300]          <1>
   881 00000B45 41FFD1              <1>     call r9
   882                              <1> 
   883 00000B48 4881C310000000      <1>     add rbx, 16
   884 00000B4F 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   884 00000B55 [10C00300]          <1>
   885 00000B59 0441                <1>     add al, "A"
   886 00000B5B 8803                <1>     mov byte [rbx], al
   887                              <1> 
   888 00000B5D 488D2D10000000      <1>     lea rbp, .msg
   889 00000B64 4D8D88[79040000]    <1>     lea r9, qword [r8 + debPrintNullString]
   890 00000B6B 41FFD1              <1>     call r9
   891 00000B6E 5D                  <1>     pop rbp
   892 00000B6F E99E010000          <1>     jmp l1
   893 00000B74 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   893 00000B7D 206261736520464646- <1>
   893 00000B86 464646464646464646- <1>
   893 00000B8F 46464646680A0D      <1>
   894 00000B96 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   894 00000B9F 464646464646464646- <1>
   894 00000BA8 464646464646680A0D  <1>
   895 00000BB1 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   895 00000BBA 464646464646464646- <1>
   895 00000BC3 46464646464668200A- <1>
   895 00000BCC 0D                  <1>
   896 00000BCD 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   896 00000BD6 464646464646466820  <1>
   897 00000BDF 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   897 00000BE8 464646464646466820  <1>
   898 00000BF1 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   898 00000BFA 464646464646464646- <1>
   898 00000C03 464646464646680A0D  <1>
   899 00000C0C 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   899 00000C15 464646464646464646- <1>
   899 00000C1E 464646464646680A0D  <1>
   900 00000C27 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   900 00000C30 464646464646464646- <1>
   900 00000C39 464646464646680A0D  <1>
   901 00000C42 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   901 00000C4B 464646464646464646- <1>
   901 00000C54 464646464646680A0D  <1>
   902 00000C5D 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   902 00000C66 464646464646464646- <1>
   902 00000C6F 464646464646680A0D  <1>
   903 00000C78 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   903 00000C81 204C6F676963616C20- <1>
   903 00000C8A 447269766573204646- <1>
   903 00000C93 680A0D              <1>
   904 00000C96 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   904 00000C9F 204669786564204472- <1>
   904 00000CA8 697665732020204646- <1>
   904 00000CB1 680A0D              <1>
   905 00000CB4 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   905 00000CBD 2052656D6F7661626C- <1>
   905 00000CC6 652044727673204646- <1>
   905 00000CCF 680A0D              <1>
   906 00000CD2 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   906 00000CDB 65205A3A0A0D        <1>
   907 00000CE1 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   907 00000CEA 4F4D4D414E442E434F- <1>
   907 00000CF3 4D2E2E2E0A0D00      <1>
   908 00000CFA 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   908 00000D03 626F6F742073756D6D- <1>
   908 00000D0C 6172790A0D00        <1>
   909                              <1>     %endif
   910                              <1> l1:
   911 00000D12 488D151E030000      <1>     lea rdx, tmpDTA
   912 00000D19 B41A                <1>     mov ah, 1Ah
   913 00000D1B CD41                <1>     int 41h ;Set tempDTA to current DTA
   914 00000D1D B44E                <1>     mov ah, 4Eh
   915 00000D1F 488D1503030000      <1>     lea rdx, tmpName
   916 00000D26 0FB60DFB020000      <1>     movzx ecx, byte [tmpAttr] ;Get the search attribute
   917 00000D2D CD41                <1>     int 41h
   918                              <1> 
   919                              <1> l11:
   920 00000D2F B402                <1>     mov ah, 02h
   921 00000D31 B20A                <1>     mov dl, 0Ah
   922 00000D33 CD41                <1>     int 41h
   923 00000D35 B409                <1>     mov ah, 09h
   924 00000D37 488D1516000000      <1>     lea rdx, .str
   925 00000D3E CD41                <1>     int 41h
   926                              <1>     ;lea rdx, tmpBuffer
   927                              <1>     ;mov ah, 0Ah  ;Buffered input
   928 00000D40 B980000000          <1>     mov ecx, 80h
   929 00000D45 488D156B030000      <1>     lea rdx, tmpBuffer
   930 00000D4C 31DB                <1>     xor ebx, ebx
   931 00000D4E B43F                <1>     mov ah, 3fh
   932 00000D50 CD41                <1>     int 41h
   933 00000D52 EBDB                <1>     jmp short l11
   934 00000D54 433A5C3E24          <1> .str: db "C:\>$"
   935                              <1> ;--------------------------------
   936                              <1> ;       PROCS FOR SYSINIT       :
   937                              <1> ;--------------------------------
   938                              <1> adjustDrvHdr:
   939                              <1> ;Input: rsi = Effective address of driver in DOS segment
   940                              <1> ;       rbp = Ptr to the start of the DOS segment
   941                              <1> ;Output: rsi = EA of next header in DOS segment
   942 00000D59 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   943 00000D5C 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   944 00000D60 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   945 00000D64 4881C622000000      <1>     add rsi, drvHdr_size
   946 00000D6B C3                  <1>     ret
   947                              <1> errorInit:
   948                              <1> ;If a critical error occurs during sysinit, fail through here
   949                              <1> ;Int 42h, 43h and 44h point here during sysinit
   950 00000D6C 488D2D3A000000      <1>     lea rbp, hltmsg
   951 00000D73 B804130000          <1>     mov eax, 1304h
   952 00000D78 CD30                <1>     int 30h
   953                              <1>     ;cli ;Clear interrupts
   954                              <1>     ;mov al, -1
   955                              <1>     ;mov dx, 0A1h    ;PIC2 data
   956                              <1>     ;out dx, al      ;Mask all lines
   957                              <1>     ;mov dx, 21h     ;PIC1 data
   958                              <1>     ;out dx, al      ;Mask all lines
   959                              <1> .ei0:
   960 00000D7A F4                  <1>     hlt
   961 00000D7B EBFD                <1>     jmp short .ei0
   962                              <1> ;--------------------------------
   963                              <1> ;       DATA FOR SYSINIT        :
   964                              <1> ;--------------------------------
   965 00000D7D 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   965 00000D86 5343502F444F532E2E- <1>
   965 00000D8F 2E0A0D24            <1>
   966 00000D93 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   966 00000D9C 6C6F636174696F6E20- <1>
   966 00000DA5 4572726F720A0D00    <1>
   967 00000DAD 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   967 00000DB6 7469616C6973696E67- <1>
   967 00000DBF 20534350444F532E53- <1>
   967 00000DC8 59532E205379737465- <1>
   967 00000DD1 6D2068616C74696E67- <1>
   967 00000DDA 2E2E2E00            <1>
   968 00000DDE 434F4E00            <1> conName db "CON",0
   969 00000DE2 41555800            <1> auxName db "AUX",0
   970 00000DE6 50524E00            <1> prnName db "PRN",0
   971                              <1> 
   972 00000DEA 4155544F455845432E- <1> aexec   db "AUTOEXEC.BAT",0 ;ASCIIZ for AUTOEXEC
   972 00000DF3 42415400            <1>
   973 00000DF7 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
   973 00000E00 5300                <1>
   974                              <1> 
   975                              <1> intData:
   976 00000E02 [962D000000000000]  <1>     dq terminateProcess ;Int 40h
   977 00000E0A [1F37000000000000]  <1>     dq functionDispatch ;Int 41h
   978 00000E12 [6C0D000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   979 00000E1A [7738000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
   980 00000E22 [3731000000000000]  <1>     dq dosDefCritErrHdlr 
   981 00000E2A [0732000000000000]  <1>     dq absDiskRead      ;Int 45h
   982 00000E32 [E831000000000000]  <1>     dq absDiskWrite     ;Int 46h
   983 00000E3A [9D2D000000000000]  <1>     dq terminateRes     ;Int 47h
   984 00000E42 [7738000000000000]  <1>     dq defaultIretq     ;Int 48h
   985 00000E4A [7738000000000000]  <1>     dq defaultIretq     ;Int 49h
   986 00000E52 [7738000000000000]  <1>     dq defaultIretq     ;Int 4Ah
   987 00000E5A [7738000000000000]  <1>     dq defaultIretq     ;Int 4Bh
   988 00000E62 [7738000000000000]  <1>     dq defaultIretq     ;Int 4Ch
   989 00000E6A [7738000000000000]  <1>     dq defaultIretq     ;Int 4Dh
   990 00000E72 [7738000000000000]  <1>     dq defaultIretq     ;Int 4Eh
   991 00000E7A [CD3C000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
   992                              <1> nData:
   993 00000E82 [8B3F000000000000]  <1>     dq conHdr
   994 00000E8A 0480                <1>     dw 08004h
   995 00000E8C [3341000000000000]  <1>     dq nulStrat
   996 00000E94 [3941000000000000]  <1>     dq nulIntr
   997 00000E9C 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   998                              <1> 
   999                              <1> diskInit:
  1000                              <1>     ;We create a function to deal with BPB parsing etc
  1001                              <1>     ;Start with the first primary partition on each hard disk (until max)
  1002                              <1>     ;   They dont have to be bootable
  1003                              <1>     ;Then go back and look for other partitions partitions. 
  1004                              <1>     ;   Add each other primary or logical ptn (until max)
  1005                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
  1006                              <1>     ;Use r8 as device counter
  1007 00000EA4 488DBD[39490000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
  1008 00000EAB 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
  1008 00000EB3 00                  <1>
  1009 00000EB4 0F84C6000000        <1>     jz .remInit ;No? Go to removables
  1010 00000EBA 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
  1010 00000EC3 00                  <1>
  1011 00000EC4 B280                <1>     mov dl, 80h ;Start with HDD 0
  1012                              <1> .primary:
  1013 00000EC6 64803C25[6FC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1013 00000ECE 03                  <1>
  1014 00000ECF 0F84AB000000        <1>     je .remInit
  1015 00000ED5 31C9                <1>     xor ecx, ecx    ;Sector 0
  1016 00000ED7 E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
  1017 00000EDC 0F8289000000        <1>     jc .primaryEpilog
  1018                              <1>     ;Here, check MBR or BPB
  1019 00000EE2 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
  1020 00000EEB 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
  1021                              <1>     ;Now check if BPB or MBR
  1022 00000EED 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1023 00000EEF 8A6302              <1>     mov ah, byte [rbx + 2]
  1024 00000EF2 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1025 00000EF6 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
  1026                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
  1027                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
  1028 00000EF8 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
  1029 00000EFF B104                <1>     mov cl, 4
  1030                              <1> .checkPrimary:
  1031 00000F01 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
  1032 00000F04 3C01                <1>     cmp al, 01
  1033 00000F06 7421                <1>     je .primaryFound
  1034 00000F08 3C04                <1>     cmp al, 04
  1035 00000F0A 741D                <1>     je .primaryFound
  1036 00000F0C 3C06                <1>     cmp al, 06
  1037 00000F0E 7419                <1>     je .primaryFound
  1038 00000F10 3C0B                <1>     cmp al, 0Bh
  1039 00000F12 7415                <1>     je .primaryFound
  1040 00000F14 3C0C                <1>     cmp al, 0Ch
  1041 00000F16 7411                <1>     je .primaryFound
  1042 00000F18 3C0E                <1>     cmp al, 0Eh
  1043 00000F1A 740D                <1>     je .primaryFound
  1044 00000F1C 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1045 00000F23 FEC9                <1>     dec cl
  1046 00000F25 7444                <1>     jz .primaryEpilog
  1047 00000F27 EBD8                <1>     jmp short .checkPrimary
  1048                              <1> .primaryFound:
  1049                              <1>     ;Copy the first sector of this partition into memory
  1050 00000F29 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1051 00000F2C E8E9000000          <1>     call .initReadSector
  1052 00000F31 7238                <1>     jc .primaryEpilog
  1053                              <1>     ;Now verify this is a BPB
  1054 00000F33 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1055 00000F35 8A6302              <1>     mov ah, byte [rbx + 2]
  1056 00000F38 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1057 00000F3C 752D                <1>     jne .primaryEpilog   ;If not, skip
  1058                              <1>     ;Now copy data to internal tables
  1059 00000F3E 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1060 00000F41 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1061 00000F46 57                  <1>     push rdi
  1062 00000F47 F348A5              <1>     rep movsq   ;Copy the BPB
  1063 00000F4A 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1064                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1065 00000F4B 4A8D9C05[07490000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1066                              <1>     ;Add device count to rbx to point to correct entry
  1067 00000F53 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1068 00000F55 4A8D9CC5[11490000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1069 00000F5D 488933              <1>     mov qword [rbx], rsi
  1070 00000F60 49FFC0              <1>     inc r8  ;Goto next logical drive
  1071 00000F63 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1072                              <1> .primaryEpilog:
  1073 00000F6B FEC2                <1>     inc dl  ;Goto next BIOS drive
  1074 00000F6D 88D6                <1>     mov dh, dl
  1075 00000F6F 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1076 00000F72 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1077 00000F7A 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1078                              <1> .extended:
  1079                              <1> ;We have gone through all the devices once
  1080                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1081                              <1>     ;je .remInit ;If yes, get removable devices
  1082                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1083                              <1>     ;xor ecx, ecx    ;Get MBR back
  1084                              <1>     ;call .initReadSector
  1085                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1086                              <1> .remInit:
  1087                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1088 00000F80 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1089 00000F83 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1090 00000F85 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1091                              <1>     ;rdi points to the space for the subsequent bpb's
  1092                              <1> .removables:
  1093 00000F88 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1094 00000F8A E88B000000          <1>     call .initReadSector
  1095 00000F8F 7238                <1>     jc .removableEpilogue   ;Goto next device
  1096                              <1>     ;Now verify this is a BPB
  1097 00000F91 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1098 00000F93 8A6302              <1>     mov ah, byte [rbx + 2]
  1099 00000F96 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1100 00000F9A 752D                <1>     jne .removableEpilogue   ;If not, skip
  1101                              <1>     ;Now copy data to internal tables
  1102 00000F9C 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1103 00000F9F B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1104 00000FA4 57                  <1>     push rdi
  1105 00000FA5 F348A5              <1>     rep movsq   ;Copy the BPB
  1106 00000FA8 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1107                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1108 00000FA9 4A8D9C05[07490000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1109                              <1>     ;Add device count to rbx to point to correct entry
  1110 00000FB1 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1111 00000FB3 4A8D9CC5[11490000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1112 00000FBB 488933              <1>     mov qword [rbx], rsi
  1113 00000FBE 49FFC0              <1>     inc r8  ;Goto next logical drive
  1114 00000FC1 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1115                              <1> .removableEpilogue:
  1116 00000FC9 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1117 00000FCB 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1118 00000FD3 7412                <1>     je .end
  1119 00000FD5 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1120 00000FDC 7403                <1>     je .re0
  1121 00000FDE 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1122                              <1> .re0:
  1123 00000FE1 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1124 00000FE5 72A1                <1>     jb .removables
  1125                              <1> .end:
  1126 00000FE7 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1126 00000FEF 01                  <1>
  1127 00000FF0 7401                <1>     je .singleRemDev
  1128 00000FF2 C3                  <1>     ret
  1129                              <1> .singleRemDev:
  1130                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1131 00000FF3 488D9D[07490000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1132 00000FFA 8A95[07490000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1133 00001000 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1134 00001003 488D9D[11490000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1135 0000100A 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1136 0000100D 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1137 00001011 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1138 00001019 C3                  <1>     ret
  1139                              <1> .initReadSector:
  1140                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1141 0000101A B482                <1>     mov ah, 82h ;Read
  1142 0000101C B001                <1>     mov al, 1   ;One sector
  1143 0000101E 488D9D[49010000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1144 00001025 CD33                <1>     int 33h
  1145 00001027 C3                  <1>     ret
  1146 00001028 16                  <1> tmpAttr     db dirInclusive ;Search for all files
  1147 00001029 413A73637062696F73- <1> tmpName     db "A:scpbios.sys",0
  1147 00001032 2E73797300          <1>
  1148 00001037 000000000000000000- <1> tmpDTA      db 80h dup 00h
  1148 00001040 000000000000000000- <1>
  1148 00001049 000000000000000000- <1>
  1148 00001052 000000000000000000- <1>
  1148 0000105B 000000000000000000- <1>
  1148 00001064 000000000000000000- <1>
  1148 0000106D 000000000000000000- <1>
  1148 00001076 000000000000000000- <1>
  1148 0000107F 000000000000000000- <1>
  1148 00001088 000000000000000000- <1>
  1148 00001091 000000000000000000- <1>
  1148 0000109A 000000000000000000- <1>
  1148 000010A3 000000000000000000- <1>
  1148 000010AC 000000000000000000- <1>
  1148 000010B5 0000                <1>
  1149 000010B7 500000000000000000- <1> tmpBuffer   db 80, 0, 126 dup 00h 
  1149 000010C0 000000000000000000- <1>
  1149 000010C9 000000000000000000- <1>
  1149 000010D2 000000000000000000- <1>
  1149 000010DB 000000000000000000- <1>
  1149 000010E4 000000000000000000- <1>
  1149 000010ED 000000000000000000- <1>
  1149 000010F6 000000000000000000- <1>
  1149 000010FF 000000000000000000- <1>
  1149 00001108 000000000000000000- <1>
  1149 00001111 000000000000000000- <1>
  1149 0000111A 000000000000000000- <1>
  1149 00001123 000000000000000000- <1>
  1149 0000112C 000000000000000000- <1>
  1149 00001135 0000                <1>
    14                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    15                                  %include "./Source/BSS/dosSeg.asm"
    16                              <1> ;This file contains the main DOS data segment
    17                              <1> dosAPT: ;Additional Page tables
    18 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    19                              <1> dosDataArea:
    20 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    21 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    22 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    23 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    24 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    25 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    26 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    27 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    28                              <1> ;Above is the system stats
    29                              <1> ;Below is the DOS vars
    30 0003C023 ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    31                              <1>     ;   A value of 0 means no chars buffered.
    32 0003C02B ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    33                              <1> sysVarsPtr:
    34 0003C033 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    35 0003C03B ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    36 0003C043 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    37                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    38 0003C04B ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    39                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    40 0003C053 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    41 0003C055 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    42 0003C05D ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    43 0003C065 ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    44 0003C06D ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    45                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    46 0003C06F ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    47 0003C070 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    48 0003C071 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    49 0003C072 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    50 0003C073 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    51                              <1> ;Additional internal variables
    52                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    53 0003C095 ??                  <1>     singleDrv   resb 1    ;Set if last drive accessed was drive B x
    54 0003C096 ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    55 0003C097 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    56                              <1> ;Create SFT header and corresponding array of five default sft entries
    57 0003C099 <res Ah>            <1>     firstSftHeader  resb sfth_size
    58 0003C0A3 <res 4Fh>           <1>     firstSft    resb sft_size
    59 0003C0F2 <res 4Fh>           <1>     secondSft   resb sft_size
    60 0003C141 <res 4Fh>           <1>     thirdSft    resb sft_size
    61 0003C190 <res 4Fh>           <1>     fourthSft   resb sft_size
    62 0003C1DF <res 4Fh>           <1>     fifthSft    resb sft_size
    63                              <1> 
    64                              <1> ;Virtual CONsole Buffers
    65 0003C22E ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
    66                              <1>     ;Only incremented when CON device runs vCon
    67                              <1> vConBuf:    ;Proper buffer symbol
    68 0003C22F ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
    69 0003C230 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
    70                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
    71 0003C2B0 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
    72 0003C330 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
    73                              <1> 
    74 0003C331 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
    75 0003C332 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    76 0003C333 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
    77 0003C334 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
    78                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
    79                              <1> 
    80 0003C335 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    81                              <1> ;Server stuff. Default to all zeros (blank)
    82 0003C336 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
    83                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
    84 0003C337 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
    85 0003C338 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
    86                              <1> ;Swappable Data Area
    87 0003C348 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    88 0003C368 ??                  <1>                 resb 1  ;Alignment byte
    89                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    90 0003C369 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    91 0003C36A ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    92 0003C36B ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    93 0003C36C ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    94 0003C36D ????                <1>     errorExCde  resw 1  ;Extended Error Code
    95 0003C36F ??                  <1>     errorAction resb 1  ;Suggested action for error  
    96 0003C370 ??                  <1>     errorClass  resb 1  ;Error Class
    97 0003C371 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
    98 0003C379 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    99 0003C381 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   100                              <1> 
   101 0003C389 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   102 0003C391 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   103                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   104                              <1>     ;Lower byte: User Specified
   105 0003C393 ??                  <1>     currentDrv  resb 1  ;Default drive x
   106 0003C394 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   107                              <1> ;SDA, needs to be replaced between processes
   108                              <1> sdaMainSwap:
   109 0003C395 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   110 0003C39D ????????????????    <1>     sharePSP    resq 1  ;PSP of the share program
   111 0003C3A5 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   112 0003C3A7 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   113 0003C3AF ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   114 0003C3B7 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   115 0003C3BF ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   116 0003C3C1 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   117 0003C3C9 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   118 0003C3CA ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   119 0003C3CB ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   120                              <1> 
   121 0003C3CC ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   122 0003C3D4 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   123 0003C3DC ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   124 0003C3E4 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   125 0003C3EC ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   126                              <1> ;The below flag tells DOS to print ^C in the termination function
   127 0003C3ED ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   128 0003C3EE ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   129                              <1> ;Time stuff
   130                              <1> ;Read the below two as a word
   131 0003C3EF ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   132 0003C3F0 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   133 0003C3F1 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   134 0003C3F2 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   135 0003C3F4 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   136                              <1> 
   137 0003C3F5 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   138 0003C3F6 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   139 0003C3F7 ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   140                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   141                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   142                              <1> ; without forcing to re-build the whole primary request block.
   143                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   144                              <1> ; with secondary char output going through the secondary header
   145                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   146                              <1> ; for output)
   147                              <1> ;ioReqPkt is the largest possible packet
   148 0003C3F8 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   149 0003C422 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   150 0003C44C <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   151 0003C476 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   152                              <1> ;Swappable Buffers
   153 0003C477 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   154                              <1>     ;We add an additional byte to save ah too
   155 0003C47D ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   156 0003C47F <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   157 0003C4FF <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   158 0003C57F ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   159 0003C587 ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   160 0003C58F ????                <1>     lastPartOff resw 1  ;Offset of last component in pathname or FFFFh 
   161                              <1> ;Misc bookkeeping flags and vars
   162 0003C591 <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal searching block
   163 0003C5BC <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   164 0003C5DC <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   165 0003C5E8 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards in fcbName
   166 0003C5F4 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   167 0003C5FC <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need tmp CDS
   168 0003C657 ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   169 0003C658 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   170 0003C659 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   171 0003C65A ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   172 0003C65B ??                  <1>     rwFlag      resb 1  ;00h=Read, 01h=Write
   173 0003C65C ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   174 0003C65D ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   175                              <1> 
   176 0003C65E ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   177 0003C65F ??                  <1>     filspcExist resb 1  ;-1 if Filename of existing file/dir for create
   178 0003C660 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlelv
   179 0003C661 ??                  <1>     workingDrv  resb 1  ;Working drive number
   180                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   181                              <1> workingDD:  ;Create a symbol for the working device driver too
   182 0003C662 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   183 0003C66A ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   184                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   185                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   186 0003C672 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   187 0003C67A ????????????????    <1>     curJFTNum   resq 1  ;Ptr to JFT num in caller PSP of file being accessed
   188 0003C682 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   189 0003C68A ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   190 0003C68C ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   191                              <1> ;Temp vars, used when walking FAT or changing sectors
   192 0003C694 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   193 0003C69C ????                <1>     entries     resw 1  ;FAT entries per FAT sector
   194                              <1> ;***************************************************|
   195                              <1> ; Needs to be set up before any file access         |
   196                              <1> ; These vars keep track of file access properties   |
   197                              <1> ;   and must be used only for such purposes.        |
   198                              <1> ;***************************************************|
   199 0003C69E ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   200 0003C6A2 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   201                              <1> 
   202 0003C6A6 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   203 0003C6AA ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   204 0003C6AB ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   205                              <1> 
   206 0003C6B3 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   207 0003C6B5 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   208                              <1> ;***************************************************|
   209 0003C6B9 ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   210 0003C6BD ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   211 0003C6C1 ????????            <1>     bytesAdded  resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   212 0003C6C5 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   213 0003C6C9 ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   214                              <1> ;Directory stuff
   215 0003C6CD ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   216 0003C6D1 ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   217 0003C6D3 ??                  <1>     dirEntry    resb 1  ;32 byte offset in dir sect for file being searched for
   218                              <1> ;Error DPB 
   219 0003C6D4 ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   220 0003C6DC ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   221                              <1> ;Stacks and scratch SFT
   222 0003C6DD <res 528h>          <1>     critStack   resq 165
   223 0003CC05 ????????????????    <1>     critStakTop resq 1
   224                              <1> 
   225 0003CC0D <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   226                              <1> 
   227 0003CC5C <res 638h>          <1>     AuxStack    resq 199
   228 0003D294 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   229 0003D29C <res 638h>          <1>     DiskStack   resq 199
   230 0003D8D4 ????????????????    <1>     DiskStakTop resq 1
   231                              <1> 
   232 0003D8DC ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   233 0003D8DD ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls!  
   234                              <1>     sdaLen      equ     $ - sda 
   235                              <1>     sdaMSLen    equ     $ - sda
   236                              <1> 
   237                              <1> ;Additional variables NOT in the SDA
   238 0003D8DE <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   239                              <1>     ;for saving the current header when quickly doing a second request
   240                              <1> 
   241                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   242                              <1> inExtASCII:
   243 0003D908 ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   244 0003D909 ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   245                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   246                              <1>     ; copy of the date/time record
   247                              <1>     dSegLen     equ     $
    16                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    17                                  %define currSegVBase section.resSeg.vstart
    18                                  %include "./Source/Data/staticData.asm"
    19                              <1> 
    20                              <1> ;-----------------------------------:
    21                              <1> ;       Static Data Variables       :
    22                              <1> ;-----------------------------------:
    23 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    24 00000001 01                  <1> dosMinor    db 01h      ;.01
    25 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    25 0000000B 535953              <1>
    26 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    26 00000017 535953              <1>
    27                              <1> 
    28                              <1> ;-----------------------------------:
    29                              <1> ;        Static Data Tables         :
    30                              <1> ;-----------------------------------:
    31                              <1> ctryTbl:
    32                              <1> ;Country Table (defaulting to UK)
    33 0000001A 0100                <1> .dtfmt:     dw 1            ;Date time format (2 bytes)
    34                              <1>                             ;0 = month day year hh:mm:ss
    35                              <1>                             ;1 = day month year hh:mm:ss
    36                              <1>                             ;2 = year month day hh:mm:ss
    37 0000001C C2A300000000        <1> .curr:      db "£",0,0,0,0  ;ASCIIZ Currency symbol (5 chars)
    38 00000022 2C00                <1> .thouSep:   db ",",0        ;ASCIIZ Thousands separator
    39 00000024 2E00                <1> .dcmlSep:   db ".",0        ;ASCIIZ Decimal separator
    40 00000026 2D00                <1> .dateSep:   db "-",0        ;ASCIIZ Date separator
    41 00000028 3A00                <1> .timeSep:   db ":",0        ;ASCIIZ Time separator
    42 0000002A 00                  <1> .currFmt:   db 0            ;Currency Format
    43                              <1>                 ;0 = Symbol leads, without space
    44                              <1>                 ;1 = Symbol follows, without space
    45                              <1>                 ;2 = Symbol leads, one space
    46                              <1>                 ;3 = Symbol follows, one space
    47                              <1>                 ;4 = Symbol replace decimal separator
    48 0000002B 02                  <1> .digtdpt:   db 2 ;Number of digits after the decimal point
    49 0000002C 00                  <1> .timefmt:   db 0 ;Time format, Bit 0 = 0 => 12 hour clock, = 1 => 24 hour clock
    50 0000002D 0000000000000000    <1> .mapaddr:   dq 0 ;Case map address (0 is nulptr)
    51 00000035 2C00                <1> .dataSep:   db ",",0    ;Data list separator
    52 00000037 000000000000000000- <1> .resv:      db 0,0,0,0,0,0,0,0,0,0  ;Reserve 10 bytes
    52 00000040 00                  <1>
    53                              <1> 
    54                              <1> ;IO Char table
    55                              <1> ;This table has Request header length, command code and error flags
    56                              <1> ; as a packed DWORD entry
    57                              <1> ioRqCmdErrTbl:
    58                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    59                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    60 00000041 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    61 00000045 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    62 00000049 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    63 0000004D 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    64 00000051 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    65 00000055 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    66                              <1> 
    67                              <1> 
    68                              <1> 
    69                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    70                              <1> ; wish to install their own custom logic.
    71 00000059 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    72 00000061 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    73 00000062 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    74                              <1> ;Extended ASCII keys with special meanings
    75 00000063 3B                  <1> extKeyTbl   db eF1
    76 00000064 2F1D                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    77 00000066 3C                  <1>             db eF2
    78 00000067 211D                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    79 00000069 3D                  <1>             db eF3
    80 0000006A 281D                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    81 0000006C 3E                  <1>             db eF4
    82 0000006D 5D1D                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    83 0000006F 3F                  <1>             db eF5
    84 00000070 A21D                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    85 00000072 40                  <1>             db eF6
    86 00000073 B81D                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    87 00000075 41                  <1>             db eF7
    88 00000076 BF1D                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    89 00000078 4B                  <1>             db eCursL
    90 00000079 861C                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    91 0000007B 4D                  <1>             db eCursR
    92 0000007C 2F1D                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    93 0000007E 52                  <1>             db eIns
    94 0000007F CA1D                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    95 00000081 53                  <1>             db eDel
    96 00000082 D11D                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    97                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    98                              <1> 
    99                              <1> ;When counting the number of days, first compute the number of years since
   100                              <1> ; 1980 and your year. 
   101                              <1> ;Then, using the table below, find the number of leap years between 1980
   102                              <1> ; and (YourYear - 1). 
   103                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   104                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   105                              <1> ;
   106                              <1> ;Use the months table to get the number of days in a normal month as leap 
   107                              <1> ; years are added using the previous comment.
   108                              <1> 
   109                              <1> ;This table is the number of days in the month
   110                              <1> ;The function which updates the days in Feb writes the number to this table
   111                              <1> monthsTbl:  
   112 00000084 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   112 0000008D 1F1E1F              <1>
   113                              <1> 
   114                              <1> ;Error tables
   115                              <1> errXlatTbl:
   116                              <1> ;Each entry is n bytes long, defined as
   117                              <1> ; Byte 0      : DOS function number for which translation will occur
   118                              <1> ; Byte 1      : Length of the table entry - 2
   119                              <1> ; Bytes n - 3 : Acceptable Error codes
   120                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   121                              <1> ;The table is terminated with a single -1 byte
   122                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   123                              <1> ; only on entry to a disk function
   124 00000090 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   125 00000094 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   126 00000099 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   127 0000009F 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   128 000000A3 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   129 000000A9 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   130 000000B0 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   131 000000B3 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   132 000000B7 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   133 000000BB 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   134 000000C0 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   135 000000C4 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   136 000000CA 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   137 000000D1 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   138 000000D5 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   139 000000D9 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   140 000000DC 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   141 000000E0 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   142 000000E4 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   143 000000E9 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   144 000000F1 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   145 000000F3 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   146 000000F8 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   147 000000FB 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   148 00000101 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   149 00000105 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   150 00000108 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   151 0000010E 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   152 00000115 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   153 0000011B 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   154 0000011F 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   155 00000123 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   156 00000126 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   157 0000012B FF                  <1>     db -1   ;End Of Table marker
   158                              <1> 
   159                              <1> 
   160                              <1> extErrTbl:
   161                              <1> ;This table contains the default values for how to respond
   162                              <1> ; to particular errors. Fields with -1 need to be filled in before
   163                              <1> ; setting variables using this table.
   164                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   165                              <1> ; Byte 0: Extended Error Code as a byte
   166                              <1> ; Byte 1: Error Class
   167                              <1> ; Byte 2: Error Suggested Action
   168                              <1> ; Byte 3: Error Locus
   169                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   170                              <1> ;
   171                              <1> ;Error 01: Invalid function number
   172 0000012C 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   173                              <1> ;Error 02: File not found
   174 00000130 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   175                              <1> ;Error 03: Path not found
   176 00000134 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   177                              <1> ;Error 04: Too many open handles, and no handles are left
   178 00000138 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   179                              <1> ;Error 05: Access being denied
   180 0000013C 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   181                              <1> ;Error 06: Invalid File handle being provided
   182 00000140 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   183                              <1> ;Error 07: MCB chain destroyed
   184 00000144 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   185                              <1> ;Error 08: No Memory remaining
   186 00000148 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   187                              <1> ;Error 09: Invalid MCB block Address
   188 0000014C 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   189                              <1> ;Error 0A: Bad Environment block
   190 00000150 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   191                              <1> ;Error 0B: Data provided in a bad format
   192 00000154 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   193                              <1> ;Error 0C: Access Code Invalid
   194 00000158 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   195                              <1> ;Error 0D: Error due to Invalid Data provided
   196 0000015C 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   197                              <1> ;Error 0F: Error due to a bad drive letter being provided
   198 00000160 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   199                              <1> ;Error 10: Error due to attempting to delete the CWD
   200 00000164 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   201                              <1> ;Error 11: Error due to a unknown device being used
   202 00000168 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   203                              <1> ;Error 12: No more file handles available
   204 0000016C 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   205                              <1> ;Error 50: Network request not supported
   206 00000170 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   207                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   208 00000174 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   209                              <1> ;Error 21: File Locking Violation
   210 00000178 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   211                              <1> ;Error 54: Too many levels of redirection error
   212 0000017C 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   213                              <1> ;Error 56: Bad resource password provided
   214 00000180 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   215                              <1> ;Error 52: Directory already exists
   216 00000184 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   217                              <1> ;Error 32: Network request not supported by DOS
   218 00000188 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   219                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   220 0000018C 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   221                              <1> ;Error 57: Bad parameter in request
   222 00000190 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   223                              <1> ;Error 53: Fail was returned from Int 44h
   224 00000194 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   225                              <1> ;Error 24: Sharing Buffer Full
   226 00000198 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   227 0000019C FFFFFFFF            <1>     dd -1   ;End of table signature
   228                              <1> 
   229                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   230 000001A0 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   230 000001A9 090A0B0C0D0E0F      <1>
   231 000001B0 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   231 000001B9 191A1B1C1D1E1F      <1>
   232 000001C0 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   232 000001C9 3D3E3F5B5C5D7C      <1>
   233                              <1> badDirNameCharL equ $ - badDirNameChar
   234                              <1> ;The chars * ? . \ / need to always be handled separately
   235                              <1> 
   236                              <1> extAsciiTbl:    ;This table needs to be replaced in other Codepages
   237 000001D0 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   237 000001D9 4545494949          <1>
   238 000001DE 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   238 000001E7 5559999A9B          <1>
   239 000001EC 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   239 000001F5 A5A6A7A8            <1>
   240 000001F9 A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   240 00000202 B2B3B4              <1>
   241 00000205 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   241 0000020E BEBFC0              <1>
   242 00000211 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   242 0000021A CACBCC              <1>
   243 0000021D CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   243 00000226 D6D7D8              <1>
   244 00000229 D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   244 00000232 E2E3E4              <1>
   245 00000235 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   245 0000023E EEEFF0              <1>
   246 00000241 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   246 0000024A FAFBFC              <1>
   247 0000024D FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   248                              <1> extAsciiSig:   ;This table needs to replaces in other Codepages
   249 00000250 F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   249 00000259 F0F6F6              <1>
   250 0000025C F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   250 00000265 F6F6F6              <1>
   251 00000268 F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   251 00000271 FFF6FF              <1>
   252 00000274 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   252 0000027D FFFEF6              <1>
   253 00000280 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   253 00000289 FFF4F4              <1>
   254 0000028C F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   254 00000295 FFFFFF              <1>
   255 00000298 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   255 000002A1 FFFFFF              <1>
   256 000002A4 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   256 000002AD F6FFFF              <1>
   257 000002B0 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   257 000002B9 FFFFFF              <1>
   258 000002BC FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   258 000002C5 FFFFFF              <1>
   259 000002C8 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
    19                                  %include "./Source/Data/dispTbl.asm"
    20                              <1> ;Kernel Dispatch Function Table
    21                              <1> 
    22                              <1> kDispTbl:
    23 000002D0 9F2B                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    24 000002D2 B514                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    25 000002D4 C214                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    26 000002D6 7F15                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    27 000002D8 A815                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    28 000002DA B015                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    29 000002DC C815                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    30 000002DE FB15                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    31 000002E0 2016                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    32 000002E2 7F16                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    33 000002E4 3219                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    34 000002E6 8E16                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    35 000002E8 9A16                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    36 000002EA 2037                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    37 000002EC 5237                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    38 000002EE 5B1E                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    39 000002F0 5B1E                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    40 000002F2 5B1E                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    41 000002F4 5B1E                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    42 000002F6 5B1E                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    43 000002F8 5B1E                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    44 000002FA 5B1E                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    45 000002FC 5B1E                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    46 000002FE 5B1E                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    47 00000300 FC39                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    48 00000302 6B37                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    49 00000304 5C1E                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    50 00000306 7237                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    51 00000308 7437                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    52 0000030A FC39                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    53 0000030C FC39                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    54 0000030E 1E38                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    55 00000310 FC39                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    56 00000312 6F1E                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    57 00000314 6F1E                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    58 00000316 6F1E                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    59 00000318 6F1E                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    60 0000031A CB37                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    61 0000031C F32A                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    62 0000031E 6F1E                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    63 00000320 6F1E                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    64 00000322 6F1E                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    65 00000324 A81B                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    66 00000326 CF1B                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    67 00000328 D51B                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    68 0000032A F61B                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    69 0000032C FB37                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    70 0000032E 701E                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    71 00000330 0938                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    72 00000332 712B                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    73 00000334 2038                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    74 00000336 D536                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    75 00000338 6638                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    76 0000033A 7738                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    77 0000033C 8838                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    78 0000033E C52C                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    79 00000340 EE2C                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    80 00000342 D212                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    81 00000344 D212                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    82 00000346 D212                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    83 00000348 831E                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    84 0000034A 841E                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    85 0000034C 851E                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    86 0000034E C21E                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    87 00000350 FD1E                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    88 00000352 091F                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    89 00000354 0A1F                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    90 00000356 741F                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    91 00000358 741F                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    92 0000035A 741F                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    93 0000035C B21F                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    94 0000035E D212                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    95 00000360 A625                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    96 00000362 C127                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    97 00000364 B628                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    98 00000366 C42C                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    99 00000368 A12B                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   100 0000036A DA38                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   101 0000036C D21F                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   102 0000036E 3620                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   103 00000370 0337                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   104 00000372 0C37                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   105 00000374 E838                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   106 00000376 F938                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   107 00000378 CB39                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   108 0000037A E02A                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   109 0000037C 3620                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   110 0000037E D212                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   111 00000380 3F2A                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   112 00000382 D239                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   113 00000384 3620                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   114 00000386 3620                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   115 00000388 3620                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   116 0000038A FB39                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   117 0000038C FB39                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   118 0000038E FB39                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   119 00000390 D212                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   120 00000392 FC39                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   121 00000394 1537                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   122 00000396 FC39                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   123 00000398 1E37                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   124 0000039A EE2C                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   125 0000039C EE2C                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   126 0000039E 3B20                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   127 000003A0 4020                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   128 000003A2 FC39                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   129                              <1> kDispTblL  equ $ - kDispTbl 
   130                              <1> 
   131                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   132 000003A4 5139                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   133                              <1> mDispTblL   equ     $ - mDispTbl
    20                                  %include "./Source/Debug/debug.asm"
    21                              <1> ;This file contains debugging macros, procs and strings
    22                              <1> ; that we can use to output to COM1 bypassing the operating system.
    23                              <1> ;A serial terminal must be connected for this to work.
    24                              <1> 
    25                              <1> ;Variables and equates
    26                              <1> 
    27 000003A6 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    28                              <1> 
    29 000003AE 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    29 000003B7 39414243444546      <1>
    30                              <1> ;Common procedures
    31                              <1> debMakeDebuggerRespond:
    32 000003BE 488D2D26000000      <1>     lea rbp, .msg
    33 000003C5 E8AF000000          <1>     call debPrintNullString
    34 000003CA B900001000          <1>     mov ecx, 100000h
    35                              <1> .waiting:
    36 000003CF FFC9                <1>     dec ecx
    37 000003D1 740C                <1>     jz .timeout
    38 000003D3 B402                <1>     mov ah, 02h ;Blocking recieve!
    39 000003D5 31D2                <1>     xor edx, edx
    40 000003D7 CD34                <1>     int 34h
    41 000003D9 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    42 000003DC 75F1                <1>     jnz .waiting
    43 000003DE C3                  <1>     ret
    44                              <1> .timeout:
    45 000003DF 488D2D47000000      <1>     lea rbp, .msg2
    46 000003E6 E98E000000          <1>     jmp debPrintNullString
    47 000003EB 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    47 000003F4 6B6579206174207468- <1>
    47 000003FD 65207465726D696E61- <1>
    47 00000406 6C20746F20636F6E74- <1>
    47 0000040F 696E7565206F722077- <1>
    47 00000418 61697420666F722074- <1>
    47 00000421 696D656F75742E2E2E- <1>
    47 0000042A 0A0D00              <1>
    48 0000042D 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    48 00000436 436F6E74696E75696E- <1>
    48 0000043F 672E2E2E0A0D00      <1>
    49                              <1> debPrintHexByte:
    50                              <1> ;Print the hex byte in al as a hex value
    51 00000446 52                  <1>     push rdx
    52 00000447 53                  <1>     push rbx
    53 00000448 50                  <1>     push rax
    54                              <1> 
    55 00000449 88C2                <1>     mov dl, al           ;save byte in dl
    56 0000044B 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    57 0000044F 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    58 00000454 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    59 00000458 E80C000000          <1>     call .wrchar
    60 0000045D 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    61 00000460 E804000000          <1>     call .wrchar
    62                              <1> 
    63 00000465 58                  <1>     pop rax
    64 00000466 5B                  <1>     pop rbx
    65 00000467 5A                  <1>     pop rdx
    66 00000468 C3                  <1>     ret
    67                              <1> .wrchar:
    68 00000469 6687DB              <1>     xchg bx, bx
    69 0000046C 488D1D3BFFFFFF      <1>     lea rbx, debascii
    70 00000473 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    71 00000474 B401                <1>     mov ah, 01h
    72 00000476 CD34                <1>     int 34h  ;print char
    73 00000478 C3                  <1>     ret
    74                              <1> 
    75                              <1> debPrintNullString:
    76                              <1> ;Print a null terminated string pointed to by rbp
    77 00000479 56                  <1>     push rsi
    78 0000047A 50                  <1>     push rax
    79 0000047B 52                  <1>     push rdx
    80 0000047C 31D2                <1>     xor edx, edx    ;Select COM1
    81 0000047E 4889EE              <1>     mov rsi, rbp
    82                              <1> .getChar:
    83 00000481 AC                  <1>     lodsb
    84 00000482 84C0                <1>     test al, al
    85 00000484 7406                <1>     jz .exit
    86 00000486 B401                <1>     mov ah, 01h
    87 00000488 CD34                <1>     int 34h
    88 0000048A EBF5                <1>     jmp short .getChar
    89                              <1> .exit:
    90 0000048C 5A                  <1>     pop rdx
    91 0000048D 58                  <1>     pop rax
    92 0000048E 5E                  <1>     pop rsi
    93 0000048F C3                  <1>     ret
    94                              <1> 
    95                              <1> debPrintDOSStack:
    96                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    97                              <1> ;Shows me which function, and parameters passed and returned
    98 00000490 488D2DA5010000      <1>     lea rbp, .a1
    99 00000497 E8DDFFFFFF          <1>     call debPrintNullString
   100 0000049C 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   101 000004A3 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   102 000004AA 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   103 000004AD E802030000          <1>     call overlayQword
   104 000004B2 4881C316000000      <1>     add rbx, 22
   105 000004B9 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   106 000004BD E8F2020000          <1>     call overlayQword
   107 000004C2 4881C316000000      <1>     add rbx, 22
   108 000004C9 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   109 000004CD E8E2020000          <1>     call overlayQword
   110 000004D2 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   111 000004D9 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   112 000004DD E8D2020000          <1>     call overlayQword
   113 000004E2 4881C316000000      <1>     add rbx, 22 
   114 000004E9 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   115 000004ED E8C2020000          <1>     call overlayQword
   116 000004F2 4881C316000000      <1>     add rbx, 22
   117 000004F9 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   118 000004FD E8B2020000          <1>     call overlayQword
   119 00000502 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   120 00000509 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   121 0000050D E8A2020000          <1>     call overlayQword
   122 00000512 4881C316000000      <1>     add rbx, 22
   123 00000519 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
   124 00000520 480560000000        <1>     add rax, callerFrame_size
   125 00000526 E889020000          <1>     call overlayQword
   126 0000052B 4881C316000000      <1>     add rbx, 22
   127 00000532 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   128 00000536 E879020000          <1>     call overlayQword
   129 0000053B 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   130 00000542 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   131 00000546 E869020000          <1>     call overlayQword
   132 0000054B 488D2D06000000      <1>     lea rbp, .a0
   133 00000552 E822FFFFFF          <1>     call debPrintNullString
   134 00000557 C3                  <1>     ret
   135                              <1> 
   136 00000558 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   136 00000561 303030303030303030- <1>
   136 0000056A 30306820            <1>
   137 0000056E 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   137 00000577 303030303030303030- <1>
   137 00000580 30306820            <1>
   138 00000584 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   138 0000058D 303030303030303030- <1>
   138 00000596 30306820            <1>
   139 0000059A 0A0D                <1>     db  0Ah,0Dh
   140 0000059C 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   140 000005A5 303030303030303030- <1>
   140 000005AE 30306820            <1>
   141 000005B2 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   141 000005BB 303030303030303030- <1>
   141 000005C4 30306820            <1>
   142 000005C8 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   142 000005D1 303030303030303030- <1>
   142 000005DA 30306820            <1>
   143 000005DE 0A0D                <1>     db 0Ah, 0Dh
   144 000005E0 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   144 000005E9 303030303030303030- <1>
   144 000005F2 30306820            <1>
   145 000005F6 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   145 000005FF 303030303030303030- <1>
   145 00000608 30306820            <1>
   146 0000060C 7269703D3030303030- <1>     db "rip=0000000000000000h"
   146 00000615 303030303030303030- <1>
   146 0000061E 303068              <1>
   147 00000621 0A0D                <1>     db 0Ah, 0Dh
   148 00000623 666C673D3030303030- <1>     db "flg=0000000000000000h "
   148 0000062C 303030303030303030- <1>
   148 00000635 30306820            <1>
   149 00000639 0A0D00              <1>     db 0Ah,0Dh,0
   150 0000063C 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   150 00000645 206F6E20496E742034- <1>
   150 0000064E 316820737461636B0A- <1>
   150 00000657 0D00                <1>
   151                              <1> 
   152                              <1> debDPBptr:
   153                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   154 00000659 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   155 00000660 4889E8              <1>     mov rax, rbp
   156 00000663 E84C010000          <1>     call overlayQword
   157 00000668 488D2D06000000      <1>     lea rbp, .dpb
   158 0000066F E805FEFFFF          <1>     call debPrintNullString
   159 00000674 C3                  <1>     ret
   160                              <1> .dpb: 
   161 00000675 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   161 0000067E 203030303030303030- <1>
   161 00000687 303030303030303068- <1>
   161 00000690 200A0D00            <1>
   162                              <1> 
   163                              <1> debDPBBPBptr:
   164                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   165                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   166 00000694 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   167 0000069B 4889E8              <1>     mov rax, rbp
   168 0000069E E811010000          <1>     call overlayQword
   169 000006A3 4881C321000000      <1>     add rbx, 33
   170 000006AA 4889F0              <1>     mov rax, rsi
   171 000006AD E802010000          <1>     call overlayQword
   172 000006B2 488D2D06000000      <1>     lea rbp, .dpb
   173 000006B9 E8BBFDFFFF          <1>     call debPrintNullString
   174 000006BE C3                  <1>     ret
   175                              <1> .dpb: 
   176 000006BF 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   176 000006C8 203030303030303030- <1>
   176 000006D1 303030303030303068- <1>
   176 000006DA 2066726F6D20        <1>
   177 000006E0 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   177 000006E9 203030303030303030- <1>
   177 000006F2 303030303030303068- <1>
   177 000006FB 200A0D00            <1>
   178                              <1> overlayByte:
   179                              <1>     ;Called with number in rax
   180                              <1>     ;pointer to START of 16 byte space for number in rbx
   181 000006FF 53                  <1>     push rbx
   182 00000700 51                  <1>     push rcx
   183 00000701 52                  <1>     push rdx
   184 00000702 55                  <1>     push rbp
   185 00000703 4889DD              <1>     mov rbp, rbx
   186 00000706 4889C2              <1>     mov rdx, rax
   187 00000709 48FFC5              <1>     inc rbp ;Go to end of number
   188                              <1> 
   189 0000070C 488D1D9BFCFFFF      <1>     lea rbx, debascii
   190 00000713 88D0                <1>     mov al, dl  ;Go low nybble first
   191 00000715 240F                <1>     and al, 0Fh
   192 00000717 D7                  <1>     xlatb
   193 00000718 884500              <1>     mov byte [rbp], al
   194 0000071B 48FFCD              <1>     dec rbp ;Go down one char pos
   195 0000071E 88D0                <1>     mov al, dl
   196 00000720 24F0                <1>     and al, 0F0h    ;Hi nybble next
   197 00000722 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   198 00000725 D7                  <1>     xlatb
   199 00000726 884500              <1>     mov byte [rbp], al  ;Store char
   200                              <1> 
   201 00000729 5D                  <1>     pop rbp
   202 0000072A 5A                  <1>     pop rdx
   203 0000072B 59                  <1>     pop rcx
   204 0000072C 5B                  <1>     pop rbx
   205 0000072D C3                  <1>     ret
   206                              <1> 
   207                              <1> overlayWord:
   208                              <1>     ;Called with number in rax
   209                              <1>     ;pointer to START of 16 byte space for number in rbx
   210 0000072E 53                  <1>     push rbx
   211 0000072F 51                  <1>     push rcx
   212 00000730 52                  <1>     push rdx
   213 00000731 55                  <1>     push rbp
   214 00000732 4889DD              <1>     mov rbp, rbx
   215 00000735 4889C2              <1>     mov rdx, rax
   216 00000738 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   217 0000073F B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   218 00000744 488D1D63FCFFFF      <1>     lea rbx, debascii
   219                              <1> .ow0:
   220 0000074B 88D0                <1>     mov al, dl  ;Go low nybble first
   221 0000074D 240F                <1>     and al, 0Fh
   222 0000074F D7                  <1>     xlatb
   223 00000750 884500              <1>     mov byte [rbp], al
   224 00000753 48FFCD              <1>     dec rbp ;Go down one char pos
   225 00000756 88D0                <1>     mov al, dl
   226 00000758 24F0                <1>     and al, 0F0h    ;Hi nybble next
   227 0000075A C0E804              <1>     shr al, 4   ;Shift hi nybble low
   228 0000075D D7                  <1>     xlatb
   229 0000075E 884500              <1>     mov byte [rbp], al  ;Store char
   230 00000761 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   231 00000765 48FFCD              <1>     dec rbp
   232 00000768 FFC9                <1>     dec ecx
   233 0000076A 75DF                <1>     jnz .ow0
   234 0000076C 5D                  <1>     pop rbp
   235 0000076D 5A                  <1>     pop rdx
   236 0000076E 59                  <1>     pop rcx
   237 0000076F 5B                  <1>     pop rbx
   238 00000770 C3                  <1>     ret
   239                              <1> 
   240                              <1> overlayDword:
   241                              <1>     ;Called with number in rax
   242                              <1>     ;pointer to START of 16 byte space for number in rbx
   243 00000771 53                  <1>     push rbx
   244 00000772 51                  <1>     push rcx
   245 00000773 52                  <1>     push rdx
   246 00000774 55                  <1>     push rbp
   247 00000775 4889DD              <1>     mov rbp, rbx
   248 00000778 4889C2              <1>     mov rdx, rax
   249 0000077B 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   250 00000782 B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   251 00000787 488D1D20FCFFFF      <1>     lea rbx, debascii
   252                              <1> .od0:
   253 0000078E 88D0                <1>     mov al, dl  ;Go low nybble first
   254 00000790 240F                <1>     and al, 0Fh
   255 00000792 D7                  <1>     xlatb
   256 00000793 884500              <1>     mov byte [rbp], al
   257 00000796 48FFCD              <1>     dec rbp ;Go down one char pos
   258 00000799 88D0                <1>     mov al, dl
   259 0000079B 24F0                <1>     and al, 0F0h    ;Hi nybble next
   260 0000079D C0E804              <1>     shr al, 4   ;Shift hi nybble low
   261 000007A0 D7                  <1>     xlatb
   262 000007A1 884500              <1>     mov byte [rbp], al  ;Store char
   263 000007A4 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   264 000007A8 48FFCD              <1>     dec rbp
   265 000007AB FFC9                <1>     dec ecx
   266 000007AD 75DF                <1>     jnz .od0
   267 000007AF 5D                  <1>     pop rbp
   268 000007B0 5A                  <1>     pop rdx
   269 000007B1 59                  <1>     pop rcx
   270 000007B2 5B                  <1>     pop rbx
   271 000007B3 C3                  <1>     ret
   272                              <1> 
   273                              <1> overlayQword:
   274                              <1>     ;Called with number in rax
   275                              <1>     ;pointer to START of 16 byte space for number in rbx
   276 000007B4 53                  <1>     push rbx
   277 000007B5 51                  <1>     push rcx
   278 000007B6 52                  <1>     push rdx
   279 000007B7 55                  <1>     push rbp
   280 000007B8 4889DD              <1>     mov rbp, rbx
   281 000007BB 4889C2              <1>     mov rdx, rax
   282 000007BE 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   283 000007C5 B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   284 000007CA 488D1DDDFBFFFF      <1>     lea rbx, debascii
   285                              <1> .oq0:
   286 000007D1 88D0                <1>     mov al, dl  ;Go low nybble first
   287 000007D3 240F                <1>     and al, 0Fh
   288 000007D5 D7                  <1>     xlatb
   289 000007D6 884500              <1>     mov byte [rbp], al
   290 000007D9 48FFCD              <1>     dec rbp ;Go down one char pos
   291 000007DC 88D0                <1>     mov al, dl
   292 000007DE 24F0                <1>     and al, 0F0h    ;Hi nybble next
   293 000007E0 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   294 000007E3 D7                  <1>     xlatb
   295 000007E4 884500              <1>     mov byte [rbp], al  ;Store char
   296 000007E7 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   297 000007EB 48FFCD              <1>     dec rbp
   298 000007EE FFC9                <1>     dec ecx
   299 000007F0 75DF                <1>     jnz .oq0
   300 000007F2 5D                  <1>     pop rbp
   301 000007F3 5A                  <1>     pop rdx
   302 000007F4 59                  <1>     pop rcx
   303 000007F5 5B                  <1>     pop rbx
   304 000007F6 C3                  <1>     ret
   305                              <1> 
   306                              <1> debPrintFunctionName:
   307                              <1> ;Prints the DOS function that has been entered
   308                              <1> ;Entered with ah = Function number
   309 000007F7 88E0                <1>     mov al, ah  ;Get dos function number
   310 000007F9 488D1DAEFBFFFF      <1>     lea rbx, debascii
   311 00000800 488D1535000000      <1>     lea rdx, .number
   312 00000807 24F0                <1>     and al, 0F0h    ;Get high nybble first
   313 00000809 C0E804              <1>     shr al, 4
   314 0000080C D7                  <1>     xlatb
   315 0000080D 8802                <1>     mov byte [rdx], al
   316 0000080F 88E0                <1>     mov al, ah
   317 00000811 240F                <1>     and al, 0Fh
   318 00000813 D7                  <1>     xlatb
   319 00000814 884201              <1>     mov byte [rdx + 1], al
   320 00000817 488D2D06000000      <1>     lea rbp, .dosString
   321 0000081E E856FCFFFF          <1>     call debPrintNullString
   322 00000823 C3                  <1>     ret
   323 00000824 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   323 0000082D 696F6E20496E742034- <1>
   323 00000836 31682F41483D        <1>
   324 0000083C 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   325                              <1> 
   326                              <1> ;----------------:
   327                              <1> ;!!!! MACROS !!!!:
   328                              <1> ;----------------:
   329                              <1> ;Insert macro when entering a debug block
   330                              <1> %macro debugEnterM 0
   331                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   332                              <1>     mov rsp, debStackTop
   333                              <1> ;Push all registers except rsp on stack
   334                              <1>     push rax
   335                              <1>     push rbx
   336                              <1>     push rcx
   337                              <1>     push rdx
   338                              <1>     push rsi
   339                              <1>     push rdi
   340                              <1>     push rbp
   341                              <1>     push r8
   342                              <1>     push r9
   343                              <1>     push r10
   344                              <1>     push r11
   345                              <1>     push r12
   346                              <1>     push r13
   347                              <1>     push r14
   348                              <1>     push r15
   349                              <1>     pushfq
   350                              <1> %endmacro
   351                              <1> ;Insert macro when exiting a debug block
   352                              <1> %macro debugExitM 0
   353                              <1>     popfq
   354                              <1>     pop r15
   355                              <1>     pop r14
   356                              <1>     pop r13
   357                              <1>     pop r12
   358                              <1>     pop r11
   359                              <1>     pop r10
   360                              <1>     pop r9
   361                              <1>     pop r8
   362                              <1>     pop rbp
   363                              <1>     pop rdi
   364                              <1>     pop rsi
   365                              <1>     pop rdx
   366                              <1>     pop rcx
   367                              <1>     pop rbx
   368                              <1>     pop rax
   369                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   370                              <1> %endmacro
    21                                  %include "./Source/Kernel/FAT/buffun.asm"
    22                              <1> ;This file contains FAT disk buffer related functions that
    23                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    24                              <1> ;----------------------------------------------------
    25                              <1> ;           Externally referenced functions         :
    26                              <1> ;----------------------------------------------------
    27                              <1> 
    28                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    29                              <1> ;Sets the buffer in rdi to the head of the chain
    30                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    31                              <1> ;Output: Buffer header set to the head of the chain
    32 00000842 48393D(55C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    33 00000849 7428                <1>     je .exit
    34 0000084B 56                  <1>     push rsi
    35 0000084C 488B35(55C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    36                              <1> .mainlp:
    37 00000853 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    38 00000856 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    39 00000858 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    40 0000085B EBF6                <1>     jmp short .mainlp
    41                              <1> .fnd:
    42 0000085D 57                  <1>     push rdi
    43 0000085E 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    44 00000861 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    45 00000864 5F                  <1>     pop rdi ;Get original buf back
    46 00000865 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    47 00000868 488735(55C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    48 0000086F 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    49 00000872 5E                  <1>     pop rsi
    50                              <1> .exit:
    51                              <1>     return
    18                              <2> %%_ret:
    19 00000873 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    52                              <1> 
    53                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h
    54                              <1> ;Input: rdi = Buffer header to flush and free
    55 00000874 E844000000          <1>     call flushBuffer
    56 00000879 7306                <1>     jnc .exit
    57                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    58 0000087B 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    59                              <1> .exit:
    60                              <1>     return
    18                              <2> %%_ret:
    19 00000881 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    61                              <1> 
    62                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    63                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    64                              <1> ;Output: rdi = First disk buffer
    65 00000882 488B3D(55C00300)    <1>     mov rdi, [bufHeadPtr]
    66 00000889 57                  <1>     push rdi
    67                              <1> .lp:
    68 0000088A 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    69 0000088E 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    70 00000891 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    71 00000898 75F0                <1>     jne .lp
    72 0000089A 5F                  <1>     pop rdi
    73                              <1>     return
    18                              <2> %%_ret:
    19 0000089B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    74                              <1> 
    75                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    76                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    77                              <1> ; second buffer in the chain in rdi
    78                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    79                              <1> ;Output: rdi = Second buffer in the chain
    80 0000089C 52                  <1>     push rdx
    81 0000089D 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    82 000008A0 E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    83 000008A5 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    84 000008A8 5A                  <1>     pop rdx
    85                              <1>     return
    18                              <2> %%_ret:
    19 000008A9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    88                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    89                              <1> ;Input: rdi = Buffer header to start searching at
    90                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    91                              <1> ;        ZF=ZE => No unreferenced buffer found
    92 000008AA F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    93 000008AE 750C                <1>     jnz .exit
    94 000008B0 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    95 000008B3 4881FFFFFFFFFF      <1>     cmp rdi, -1
    96 000008BA 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    97                              <1> .exit:
    98                              <1>     return
    18                              <2> %%_ret:
    19 000008BC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    99                              <1> 
   100                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
   101                              <1> ;Flushes the data in a sector buffer to disk!
   102                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   103                              <1> ;Exit:  CF=NC : Success
   104                              <1> ;       CF=CY : Fail, terminate the request
   105                              <1> ;First make request to device driver
   106 000008BD 50                  <1>     push rax
   107 000008BE 53                  <1>     push rbx
   108 000008BF 51                  <1>     push rcx
   109 000008C0 52                  <1>     push rdx
   110 000008C1 56                  <1>     push rsi
   111 000008C2 55                  <1>     push rbp
   112                              <1> ;If the buffer is freed, skip flushing to avoid issues
   113 000008C3 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
   114 000008C7 7454                <1>     je .fbFreeExit  ;If it is freem exit
   115 000008C9 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   116 000008CD 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   117                              <1> .fbRequest0:
   118 000008CF BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   119 000008D4 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   120 000008D8 7406                <1>     jz .fbRequest1
   121 000008DA 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   122                              <1> .fbRequest1:
   123 000008E0 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   124 000008E3 B901000000          <1>     mov ecx, 1  ;One sector to copy
   125 000008E8 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   126 000008EC 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   127 000008F0 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   128 000008F4 E8B72A0000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   129 000008F9 E866290000          <1>     call absDiskDriverCall    ;Make Driver Request
   130 000008FE 7525                <1>     jnz .fbFail
   131                              <1> ;Now check if the buffer was a FAT, to write additional copies
   132 00000900 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   133 00000904 7417                <1>     jz .fbFreeExit  ;If not, exit
   134 00000906 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   135 00000909 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   136 0000090B 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   137 0000090E 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   138 00000912 E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   139                              <1> .fbFreeExit1:
   140 00000917 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   141 0000091A 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   142                              <1> .fbFreeExit:
   143 0000091D F8                  <1>     clc
   144                              <1> .fbExitFail:
   145 0000091E 5D                  <1>     pop rbp
   146 0000091F 5E                  <1>     pop rsi
   147 00000920 5A                  <1>     pop rdx
   148 00000921 59                  <1>     pop rcx
   149 00000922 5B                  <1>     pop rbx
   150 00000923 58                  <1>     pop rax
   151                              <1>     return
    18                              <2> %%_ret:
    19 00000924 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   152                              <1> .fbFail:
   153                              <1> ;Enter here only if the request failed
   154 00000925 FFCE                <1>     dec esi
   155 00000927 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   156                              <1> ;Request failed thrice, critical error call
   157 00000929 C605(C9C30300)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   158 00000930 E88A260000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   159 00000935 3C01                <1>     cmp al, critRetry
   160 00000937 7496                <1>     je .fbRequest0
   161                              <1>     ;Else we fail (Ignore=Fail here)
   162 00000939 F9                  <1>     stc ;Set error flag to indicate fail
   163 0000093A E9DFFFFFFF          <1>     jmp .fbExitFail
   164                              <1> 
   165                              <1> 
   166                              <1> testDirtyBufferForDrive:    ;External linkage
   167                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   168                              <1> ;Input: al = Drive number (0 based)
   169                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   170                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   171 0000093F 53                  <1>     push rbx
   172 00000940 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   173                              <1> .tdbfdCheckBuffer:
   174 00000947 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   175 0000094A 7509                <1>     jne .tdbfdGotoNextBuffer
   176 0000094C F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   177 00000950 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   178 00000952 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   179                              <1> .tdbfdExit:
   180 00000953 5B                  <1>     pop rbx
   181                              <1>     return
    18                              <2> %%_ret:
    19 00000954 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   182                              <1> .tdbfdGotoNextBuffer:
   183 00000955 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   184 00000958 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   185 0000095F 74F2                <1>     je .tdbfdExit
   186 00000961 EBE4                <1>     jmp short .tdbfdCheckBuffer
   187                              <1> 
   188                              <1> freeBuffersForDPB:
   189                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   190                              <1> ; to have a drive number of -1, thus freeing it
   191                              <1> ;Given DPB is in rbp
   192 00000963 53                  <1>     push rbx
   193 00000964 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   194                              <1> .i0:
   195 0000096B 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   196 0000096F 7506                <1>     jne .i1 ;If no, skip freeing
   197 00000971 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   198                              <1> .i1:
   199 00000977 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   200 0000097A 4881FBFFFFFFFF      <1>     cmp rbx, -1
   201 00000981 75E8                <1>     jne .i0
   202                              <1> .exit:
   203 00000983 5B                  <1>     pop rbx
   204                              <1>     return
    18                              <2> %%_ret:
    19 00000984 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   205                              <1> 
   206                              <1> getBuffer: ;Internal Linkage ONLY
   207                              <1> ;
   208                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   209                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   210                              <1> ;Flushes if not in disk change mode. 
   211                              <1> ;If in disk change mode, will check to see if the selected buffer 
   212                              <1> ; has data referring a device using the same DPB as we are changing.
   213                              <1> ; If it is, skip flushing, if not, flush first!
   214                              <1> ;
   215                              <1> ;This function will return a pointer to the desired data sector OR 
   216                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   217                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   218                              <1> ;Entry: rax = Sector to read
   219                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   220                              <1> ;       rsi = DPB to use for transaction
   221                              <1> ;Exit:  CF=NC => 
   222                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   223                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   224 00000985 51                  <1>     push rcx
   225 00000986 52                  <1>     push rdx
   226 00000987 56                  <1>     push rsi
   227 00000988 57                  <1>     push rdi
   228 00000989 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   229 0000098B E825010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   230 00000990 4881FFFFFFFFFF      <1>     cmp rdi, -1
   231 00000997 740D                <1>     je .rbReadNewSector
   232                              <1> .rbExit:
   233 00000999 F8                  <1>     clc
   234                              <1> .rbExitNoFlag:
   235 0000099A 5F                  <1>     pop rdi
   236 0000099B 5E                  <1>     pop rsi
   237 0000099C 5A                  <1>     pop rdx
   238 0000099D 59                  <1>     pop rcx
   239 0000099E 488B1D(8CC60300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   240                              <1>     return
    18                              <2> %%_ret:
    19 000009A5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   241                              <1> .rbReadNewSector:
   242 000009A6 E8B3000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   243 000009AB 803D(DCD80300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   244 000009B2 7506                <1>     jne .flush  ;We are not, flush buffer
   245 000009B4 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   246 000009B8 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   247                              <1> .flush:
   248 000009BA E8B5FEFFFF          <1>     call flushAndFreeBuffer
   249 000009BF 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   250                              <1> .skipFlush:
   251                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   252                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   253                              <1>     ; is no longer owned by that File so we mark the owner as none
   254 000009C1 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   255 000009C9 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   256 000009CC 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   257 000009CF 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   258 000009D3 80F902              <1>     cmp cl, fatBuffer
   259 000009D6 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   260 000009D8 7503                <1>     jne .rbNonFATbuffer
   261 000009DA 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   262                              <1> .rbNonFATbuffer:
   263 000009DD 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   264 000009E0 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   265 000009E3 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   266 000009E6 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   267 000009EA C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   268 000009EE E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   269 000009F3 EBA5                <1>     jmp short .rbExitNoFlag
   270                              <1> 
   271                              <1> readSectorBuffer:   ;Internal Linkage
   272                              <1> ;Reads a sector into a built sector buffer
   273                              <1> ;Entry: rdi = Pointer to buffer header
   274                              <1> ;Exit:  CF=NC : Success
   275                              <1> ;       CF=CY : Fail, terminate the request
   276                              <1> ;       rbx pointing to buffer header
   277                              <1> ;First make request to device driver
   278 000009F5 50                  <1>     push rax
   279 000009F6 53                  <1>     push rbx
   280 000009F7 51                  <1>     push rcx
   281 000009F8 52                  <1>     push rdx
   282 000009F9 56                  <1>     push rsi
   283 000009FA 55                  <1>     push rbp
   284                              <1> .rsRequest0:
   285 000009FB BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   286 00000A00 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   287 00000A04 7406                <1>     jz .rsRequest1
   288 00000A06 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   289                              <1> .rsRequest1:
   290 00000A0C 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   291 00000A0F B901000000          <1>     mov ecx, 1  ;One sector to copy
   292 00000A14 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   293 00000A18 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   294 00000A1C 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   295 00000A20 E896290000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   296 00000A25 E83A280000          <1>     call absDiskDriverCall    ;Make Driver Request
   297 00000A2A 7508                <1>     jnz .rsFail
   298                              <1> .rsExit:
   299 00000A2C F8                  <1>     clc
   300                              <1> .rsExitFail:
   301 00000A2D 5D                  <1>     pop rbp
   302 00000A2E 5E                  <1>     pop rsi
   303 00000A2F 5A                  <1>     pop rdx
   304 00000A30 59                  <1>     pop rcx
   305 00000A31 5B                  <1>     pop rbx
   306 00000A32 58                  <1>     pop rax
   307                              <1>     return
    18                              <2> %%_ret:
    19 00000A33 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   308                              <1> .rsFail:
   309                              <1> ;Enter here only if the request failed
   310 00000A34 FFCE                <1>     dec esi
   311 00000A36 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   312                              <1> ;Request failed thrice, critical error call
   313                              <1> ;First free the buffer if we failed to read data into it 
   314 00000A38 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   315 00000A3C 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   316 00000A42 C605(C9C30300)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   317 00000A49 E871250000          <1>     call diskDevErr
   318 00000A4E 3C01                <1>     cmp al, critRetry
   319 00000A50 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   320 00000A52 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   321 00000A56 EBA3                <1>     jmp short .rsRequest0
   322                              <1> .fail:
   323 00000A58 F9                  <1>     stc ;Set error flag to indicate fail
   324 00000A59 E9CFFFFFFF          <1>     jmp .rsExitFail
   325                              <1>     
   326                              <1> findLRUBuffer: ;Internal Linkage
   327                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   328                              <1> ; in rbx and the currBuff variable
   329                              <1> ;Input: Nothing
   330                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   331                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   332 00000A5E 52                  <1>     push rdx
   333 00000A5F 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   334 00000A66 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   335 00000A6A 7436                <1>     je .flbExit 
   336 00000A6C 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   337 00000A73 742D                <1>     je .flbExit
   338                              <1> .flbWalk:
   339 00000A75 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   340 00000A78 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   341 00000A7B 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   342 00000A7F 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   343 00000A81 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   344 00000A88 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   345 00000A8A 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   346                              <1> .flbHeadLink:
   347 00000A91 488B15(55C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   348 00000A98 48893D(55C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   349 00000A9F 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   350                              <1> .flbExit:
   351 00000AA2 5A                  <1>     pop rdx
   352 00000AA3 48893D(8CC60300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   353                              <1>     return
    18                              <2> %%_ret:
    19 00000AAA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   354                              <1> .flbFreeLink:
   355 00000AAB 51                  <1>     push rcx
   356 00000AAC 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   357 00000AAF 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   358 00000AB2 59                  <1>     pop rcx
   359 00000AB3 EBDC                <1>     jmp short .flbHeadLink
   360                              <1> 
   361                              <1> findSectorInBuffer:     ;Internal linkage
   362                              <1> ;Finds the Buffer for a sector
   363                              <1> ;If the sector is not in a buffer, returns with a -1
   364                              <1> ;Input: rax = Sector number
   365                              <1> ;        dl = Drive number
   366                              <1> ;Output: rdi = Buffer hdr pointer or -1
   367 00000AB5 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   368                              <1> .fsiCheckBuffer:
   369 00000ABC 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   370 00000ABF 7507                <1>     jne .fsiGotoNextBuffer
   371 00000AC1 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   372 00000AC5 7501                <1>     jne .fsiGotoNextBuffer
   373                              <1> .fsiExit:
   374                              <1>     return
    18                              <2> %%_ret:
    19 00000AC7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   375                              <1> .fsiGotoNextBuffer:
   376 00000AC8 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   377 00000ACB 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   378 00000AD2 74F3                <1>     je .fsiExit
   379 00000AD4 EBE6                <1>     jmp short .fsiCheckBuffer
   380                              <1> ;-----------------------------------------------------------------------------
   381                              <1> ;SPECIAL BUFFER FUNCTIONS
   382                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   383                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   384                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   385                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   386                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   387                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   388                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   389                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   390                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   391                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   392                              <1> ;-----------------------------------------------------------------------------
   393                              <1> getBufForFat:
   394                              <1> ;Returns a buffer to use for fat data in rbx
   395                              <1> ;Input: [workingDPB] = DPB to transact on
   396                              <1> ;       rax = Sector to transfer
   397                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   398 00000AD6 51                  <1>     push rcx
   399 00000AD7 B102                <1>     mov cl, fatBuffer
   400 00000AD9 EB03                <1>     jmp short getBufCommon2
   401                              <1> getBufForDOS:
   402                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   403                              <1> ;Input: [workingDPB] = DPB to transact on
   404                              <1> ;       rax = Sector to transfer
   405                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   406 00000ADB 51                  <1>     push rcx
   407 00000ADC B101                <1>     mov cl, dosBuffer
   408                              <1> getBufCommon2:
   409 00000ADE 56                  <1>     push rsi
   410 00000ADF 57                  <1>     push rdi    ;Push rdi to preserve it
   411 00000AE0 488B35(62C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   412 00000AE7 EB15                <1>     jmp short getBufCommon.makeReq
   413                              <1> getBufForDir:
   414                              <1> ;Returns a buffer to use for disk directory data in rbx
   415                              <1> ;Input: [currentSFT] = File to manipulate
   416                              <1> ;       rax = Sector to transfer
   417                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   418 00000AE9 51                  <1>     push rcx
   419 00000AEA B104                <1>     mov cl, dirBuffer
   420 00000AEC EB03                <1>     jmp short getBufCommon
   421                              <1> getBufForData:
   422                              <1> ;Returns a buffer to use for disk data in rbx
   423                              <1> ;Requires a File Handle.
   424                              <1> ;Input: [currentSFT] = File to manipulate
   425                              <1> ;       rax = Sector to transfer
   426                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   427 00000AEE 51                  <1>     push rcx
   428 00000AEF B108                <1>     mov cl, dataBuffer
   429                              <1> getBufCommon:
   430 00000AF1 56                  <1>     push rsi
   431 00000AF2 57                  <1>     push rdi
   432 00000AF3 488B3D(82C60300)    <1>     mov rdi, qword [currentSFT]
   433 00000AFA 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   434                              <1> .makeReq:
   435 00000AFE E882FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   436 00000B03 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   437                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   438                              <1>     ; flushed to the file!
   439                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   440                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   441                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   442 00000B05 F6C103              <1>     test cl, dosBuffer | fatBuffer
   443 00000B08 7504                <1>     jnz .exit
   444 00000B0A 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   445                              <1> .exit:
   446 00000B0E 5F                  <1>     pop rdi
   447 00000B0F 5E                  <1>     pop rsi
   448 00000B10 59                  <1>     pop rcx
   449                              <1>     return
    18                              <2> %%_ret:
    19 00000B11 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   450                              <1> 
   451                              <1> flushFile:
   452                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   453                              <1> ; FAT/DOS buffers to flush
   454                              <1> ; We flush and free, and set to head of chain before continuing to search
   455                              <1> ;Input: rdi = is the file (sft) we wish to flush
   456                              <1> ;Output: CF=NC => All ok
   457                              <1> ;        CF=CY => A sector failed, exit. 
   458 00000B12 57                  <1>     push rdi
   459 00000B13 56                  <1>     push rsi
   460                              <1>     ;First check if the file has been written to?
   461 00000B14 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   462 00000B1A 742A                <1>     jz .exitNoFlush ;Exit without flushing
   463 00000B1C 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   464 00000B1F 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   465                              <1> .ffLoop:
   466 00000B26 4881FFFFFFFFFF      <1>     cmp rdi, -1
   467 00000B2D 7411                <1>     je .exit
   468 00000B2F F6470903            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer
   469 00000B33 7514                <1>     jnz .found  ;Flush if either bit is set
   470 00000B35 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   471 00000B39 740E                <1>     je .found
   472 00000B3B 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   473 00000B3E EBE6                <1>     jmp short .ffLoop
   474                              <1> .exit:
   475                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   476 00000B40 66816605BFFF        <1>     and word [rsi + sft.wDeviceInfo], ~blokFileToFlush  ;Clear that bit!
   477                              <1> .exitNoFlush:
   478 00000B46 5E                  <1>     pop rsi
   479 00000B47 5F                  <1>     pop rdi
   480                              <1>     return
    18                              <2> %%_ret:
    19 00000B48 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   481                              <1> .found:
   482                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   483                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   484 00000B49 E826FDFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   485 00000B4E 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   486                              <1>     ;If the sector has been successfully flushed, then it
   487                              <1>     ; is no longer owned by that File so we mark the owner as none
   488 00000B50 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   489 00000B58 E83FFDFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   490 00000B5D EBC7                <1>     jmp short .ffLoop
    22                                  %include "./Source/Kernel/FAT/fat.asm"
    23                              <1> ;-----------------------------------:
    24                              <1> ;       File System routines        :
    25                              <1> ;-----------------------------------:
    26                              <1> getFATtype:
    27                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    28                              <1> ;Entry: rbp = DPB to ascertain FAT
    29                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    30 00000B5F 53                  <1>     push rbx
    31 00000B60 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    32 00000B63 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    33 00000B68 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    34 00000B6E 730F                <1>     jae .exit
    35 00000B70 FFC9                <1>     dec ecx     ;FAT 12 marker
    36 00000B72 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    37 00000B78 7205                <1>     jb .exit
    38 00000B7A B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    39                              <1> .exit:
    40 00000B7F 5B                  <1>     pop rbx
    41                              <1>     return
    18                              <2> %%_ret:
    19 00000B80 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> clust2FATEntry:
    44                              <1> ;Converts a cluster number to a offset in the FAT
    45                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    46                              <1> ;        eax = Cluster number to look for
    47                              <1> ;Exit:   eax = Sector on disk of FAT 
    48                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    49                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    50 00000B81 53                  <1>     push rbx
    51 00000B82 55                  <1>     push rbp
    52 00000B83 488B2D(62C60300)    <1>     mov rbp, qword [workingDPB]
    53 00000B8A 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    54 00000B8D 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    55 00000B93 731E                <1>     jae .fat32
    56 00000B95 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    57 00000B9B 7209                <1>     jb .fat12
    58                              <1> ;FAT16
    59 00000B9D D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    60 00000B9F 6801000000          <1>     push qword 1
    61 00000BA4 EB15                <1>     jmp short .common
    62                              <1> .fat12:
    63 00000BA6 89C1                <1>     mov ecx, eax    ;ecx = eax
    64 00000BA8 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    65 00000BAA 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    66 00000BAC 6800000000          <1>     push qword 0
    67 00000BB1 EB08                <1>     jmp short .common
    68                              <1> .fat32:
    69 00000BB3 6802000000          <1>     push qword 2
    70 00000BB8 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    71                              <1> .common:
    72                              <1> ;eax has the FAToffset
    73 00000BBB 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    74 00000BBF 31D2                <1>     xor edx, edx    ;edx = 0
    75 00000BC1 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    76 00000BC3 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    77 00000BC7 01D8                <1>     add eax, ebx
    78 00000BC9 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    79 00000BCA 5D                  <1>     pop rbp
    80 00000BCB 5B                  <1>     pop rbx
    81                              <1>     return
    18                              <2> %%_ret:
    19 00000BCC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    82                              <1> 
    83                              <1> getStartSectorOfCluster:
    84                              <1> ;Input: eax = Cluster Number
    85                              <1> ;       rbp = dpb pointer
    86                              <1> ;Output: rax = Starting Sector number for cluster
    87                              <1> ;Gives the data sector we are at in the current cluster
    88                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    89 00000BCD 51                  <1>     push rcx
    90 00000BCE 09C0                <1>     or eax, eax ;Zero upper dword
    91 00000BD0 482D02000000        <1>     sub rax, 2
    92 00000BD6 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    93 00000BD9 48D3E0              <1>     shl rax, cl
    94 00000BDC 31C9                <1>     xor ecx, ecx
    95 00000BDE 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    96 00000BE1 4801C8              <1>     add rax, rcx
    97                              <1>     ;rax now has the first sector of the current cluster
    98 00000BE4 59                  <1>     pop rcx
    99                              <1>     return
    18                              <2> %%_ret:
    19 00000BE5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   100                              <1> 
   101                              <1> findFreeClusterData:
   102                              <1> ;Walks the FAT to find a free cluster and returns the 
   103                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   104                              <1> ;Also finds NumberOfFreeCLusters. Both fields get filled in the workingDPB
   105                              <1> ;Works on the workingDPB
   106                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   107 00000BE6 53                  <1>     push rbx
   108 00000BE7 51                  <1>     push rcx
   109 00000BE8 52                  <1>     push rdx
   110 00000BE9 57                  <1>     push rdi
   111 00000BEA 55                  <1>     push rbp
   112 00000BEB 488B2D(62C60300)    <1>     mov rbp, qword [workingDPB]
   113 00000BF2 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   114 00000BF6 488905(94C60300)    <1>     mov qword [tempSect], rax   ;Save the sector number temporarily
   115                              <1>     ;Mark dFirstFreeCluster as -1 and dNumberOfFreeClusters as 0
   116 00000BFD 31D2                <1>     xor edx, edx
   117 00000BFF 895531              <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], edx ;Zero this field
   118 00000C02 FFCA                <1>     dec edx
   119 00000C04 89552D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], edx ;Set to -1, unknown (i.e. none)
   120                              <1>     ;Use edx as sector counter
   121 00000C07 8B5513              <1>     mov edx, dword [rbp + dpb.dFATlength]
   122                              <1> ;Get Sector Size in bytes in ebx
   123 00000C0A 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
   124                              <1> ;Get FAT type
   125 00000C0E E84CFFFFFF          <1>     call getFATtype ;Gets FAT type (for number of elements in sector)
   126 00000C13 84C9                <1>     test cl, cl
   127 00000C15 0F84B9000000        <1>     jz .fat12
   128 00000C1B F6C101              <1>     test cl, 1
   129 00000C1E 755F                <1>     jnz .fat16
   130                              <1> ;FAT32 proceeds here
   131 00000C20 C1EB02              <1>     shr ebx, 2  ;Divide by 4 to get number of FAT entries in a sector buffer
   132 00000C23 66891D(9CC60300)    <1>     mov word [entries], bx
   133                              <1> .fat32Search:
   134 00000C2A 488B05(94C60300)    <1>     mov rax, qword [tempSect]
   135 00000C31 E8A0FEFFFF          <1>     call getBufForFat ;Buffer Header in ebx
   136 00000C36 7241                <1>     jc .exitFail
   137 00000C38 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   138 00000C3C 31C0                <1>     xor eax, eax
   139 00000C3E 0FB70D(9CC60300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   140                              <1> .fat32Continue:
   141 00000C45 F2AF                <1>     repne scasd ;Look for the zero dword 
   142 00000C47 740D                <1>     je .fat32Found  ;If found, report cluster number (offset into FAT)
   143 00000C49 FFCA                <1>     dec edx ;Dec number of sectors left to search
   144 00000C4B 7428                <1>     jz .exit    ;Once we have none left, we exit
   145 00000C4D 48FF05(94C60300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   146 00000C54 EBD4                <1>     jmp short .fat32Search
   147                              <1> .fat32Found:
   148 00000C56 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   149 00000C59 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   150 00000C60 75E3                <1>     jne .fat32Continue  ;If so, keep searching sectors for more free clusters
   151 00000C62 81EF04000000        <1>     sub edi, 4  ;edi is one dword past the entry
   152 00000C68 E824010000          <1>     call .computeEntry  ;Add field to dpb
   153 00000C6D 81C704000000        <1>     add edi, 4  ;Put rdi now back onto the next FAT entry
   154 00000C73 EBD0                <1>     jmp short .fat32Continue
   155                              <1> .exit:
   156 00000C75 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   157 00000C78 F8                  <1>     clc
   158                              <1> .exitFail:      ;Keep carry flag
   159 00000C79 5D                  <1>     pop rbp
   160 00000C7A 5F                  <1>     pop rdi
   161 00000C7B 5A                  <1>     pop rdx
   162 00000C7C 59                  <1>     pop rcx
   163 00000C7D 5B                  <1>     pop rbx
   164                              <1>     return
    18                              <2> %%_ret:
    19 00000C7E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   165                              <1> .fat16:
   166 00000C7F D1EB                <1>     shr ebx, 1  ;Divide by 2 to get number of FAT entries in a sector buffer
   167 00000C81 66891D(9CC60300)    <1>     mov word [entries], bx
   168                              <1> .fat16Search:
   169 00000C88 488B05(94C60300)    <1>     mov rax, qword [tempSect]
   170 00000C8F E842FEFFFF          <1>     call getBufForFat ;Buffer Header in ebx
   171 00000C94 72E3                <1>     jc .exitFail
   172 00000C96 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   173 00000C9A 31C0                <1>     xor eax, eax
   174 00000C9C 0FB70D(9CC60300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   175                              <1> .fat16Continue:
   176 00000CA3 F266AF              <1>     repne scasw ;Look for the zero word 
   177 00000CA6 740D                <1>     je .fat16Found  ;If found, report cluster number (offset into FAT)
   178 00000CA8 FFCA                <1>     dec edx ;Dec number of sectors left to search
   179 00000CAA 74C9                <1>     jz .exit    ;Once we have none left, exit
   180 00000CAC 48FF05(94C60300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   181 00000CB3 EBD3                <1>     jmp short .fat16Search
   182                              <1> .fat16Found:
   183 00000CB5 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   184 00000CB8 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   185 00000CBF 75E2                <1>     jne .fat16Continue
   186 00000CC1 81EF02000000        <1>     sub edi, 2  ;edi is one word past the entry
   187 00000CC7 E8C5000000          <1>     call .computeEntry
   188 00000CCC 81C702000000        <1>     add edi, 2  ;Put rdi back to the next entry
   189 00000CD2 EBCF                <1>     jmp short .fat16Continue
   190                              <1> .fat12:
   191 00000CD4 89D8                <1>     mov eax, ebx    ;Get sectorsize in ax
   192 00000CD6 D1E0                <1>     shl eax, 1  ;Multiply by 2
   193 00000CD8 B903000000          <1>     mov ecx, 3  ;1.5 bytes per FAT entry *2
   194 00000CDD 52                  <1>     push rdx    ;Preserve number of sectors in FAT counter
   195 00000CDE 31D2                <1>     xor edx, edx
   196 00000CE0 F7F1                <1>     div ecx
   197 00000CE2 5A                  <1>     pop rdx
   198 00000CE3 668905(9CC60300)    <1>     mov word [entries], ax ;Get quotient (number of whole entries in sector) 
   199                              <1>     ;The value is rounded down so we can read the next sector for the 
   200                              <1>     ;last entry manually (thus buffering it if it not already buffered)
   201 00000CEA 488B05(94C60300)    <1>     mov rax, qword [tempSect]
   202 00000CF1 E8E0FDFFFF          <1>     call getBufForFat ;Buffer Header in ebx
   203 00000CF6 7281                <1>     jc .exitFail
   204 00000CF8 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   205                              <1> .fat12SearchNewSector:
   206 00000CFC 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]   ;This is bytes per sector 
   207                              <1>     ;When this value is one, we have the cross sector issue
   208                              <1> .fat12Search:
   209 00000D00 E87C000000          <1>     call .fat12GetEvenCluster
   210 00000D05 7505                <1>     jnz .getOddEntry    ;Skip denoting entry if not 0
   211 00000D07 E862000000          <1>     call .fat12EntryFound
   212                              <1> .getOddEntry:
   213 00000D0C 48FFC7              <1>     inc rdi ;Goto next byte
   214 00000D0F FFC9                <1>     dec ecx ;Dec the byte offset counter
   215 00000D11 744E                <1>     jz .noXcluster  ;If ecx is now zero, exit
   216 00000D13 81F901000000        <1>     cmp ecx, 1
   217 00000D19 741A                <1>     je .lastFat12entry
   218 00000D1B E86A000000          <1>     call .fat12GetOddCluster
   219 00000D20 7505                <1>     jnz .getNextSector
   220 00000D22 E847000000          <1>     call .fat12EntryFound
   221                              <1> .getNextSector:
   222 00000D27 48FFC7              <1>     inc rdi ;Goto next entry
   223 00000D2A 48FFC7              <1>     inc rdi
   224 00000D2D FFC9                <1>     dec ecx ;Dec the byte offset counter twice
   225 00000D2F FFC9                <1>     dec ecx
   226 00000D31 742E                <1>     jz .noXcluster  ;If ecx is now zero, exit
   227 00000D33 EBCB                <1>     jmp short .fat12Search
   228                              <1> .lastFat12entry:
   229                              <1> ;We arrive here when we are at the last entry in the sector
   230 00000D35 48FF05(94C60300)    <1>     inc qword [tempSect]    ;Get next Sector
   231 00000D3C 488B05(94C60300)    <1>     mov rax, qword [tempSect]   ;Get this sector in rax
   232 00000D43 E88EFDFFFF          <1>     call getBufForFat ;Buffer Header in ebx
   233 00000D48 0F822BFFFFFF        <1>     jc .exitFail
   234 00000D4E 0FB607              <1>     movzx eax, byte [rdi]  ;Get last byte in old buffer (rdi still points there)
   235 00000D51 488D4B30            <1>     lea rcx, qword [rbx + bufferHdr.dataarea]   ;Go to data area (preserve rdi)
   236 00000D55 8A21                <1>     mov ah, byte [rcx]  ;Get first byte in new sector
   237 00000D57 C1E804              <1>     shr eax, 4  ;Clear out bottom nybble
   238 00000D5A 7505                <1>     jnz .noXcluster
   239 00000D5C E80D000000          <1>     call .fat12EntryFound   ;Found a free cluster!
   240                              <1> .noXcluster:
   241                              <1>     ;Empty cluster not found in sector
   242 00000D61 FFCA                <1>     dec edx ;Decrement sector count
   243 00000D63 0F840CFFFFFF        <1>     jz .exit    ;Once all sectors have been processed, exit
   244 00000D69 4889CF              <1>     mov rdi, rcx    ;Set rdi to point at start of next sector
   245 00000D6C EB8E                <1>     jmp short .fat12SearchNewSector ;Reload the number of entries and search
   246                              <1> .fat12EntryFound:
   247 00000D6E FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   248 00000D71 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   249                              <1>     retne
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00000D78 7401                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00000D7A C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   250 00000D7B E811000000          <1>     call .computeEntry  ;Compute the first cluster if this is -1
   251                              <1>     return
    18                              <2> %%_ret:
    19 00000D80 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   252                              <1> .fat12GetEvenCluster:
   253 00000D81 0FB707              <1>     movzx eax, word [rdi]   ;Get first word (EVEN ENTRY)
   254 00000D84 25FF0F0000          <1>     and eax, 0FFFh   ;Clear upper nybble
   255                              <1>     return
    18                              <2> %%_ret:
    19 00000D89 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   256                              <1> .fat12GetOddCluster:
   257 00000D8A 0FB707              <1>     movzx eax, word [rdi]  ;Get second word (ODD ENTRY)
   258 00000D8D C1E804              <1>     shr eax, 4  ;Shift down by 4
   259                              <1>     return
    18                              <2> %%_ret:
    19 00000D90 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   260                              <1> .computeEntry:
   261                              <1> ;We only call this to compute the first entry cluster number
   262                              <1> ;We preserve ALL registers when doing so
   263 00000D91 50                  <1>     push rax
   264 00000D92 51                  <1>     push rcx
   265 00000D93 52                  <1>     push rdx
   266 00000D94 57                  <1>     push rdi
   267 00000D95 480FB74D06          <1>     movzx rcx, word [rbp + dpb.wFAToffset] ;Get start sector number of FAT 
   268 00000D9A 488B05(94C60300)    <1>     mov rax, qword [tempSect]   ;Get disk sector number of FAT into rax
   269 00000DA1 4829C8              <1>     sub rax, rcx   ;Get Offset into FAT in rax
   270 00000DA4 0FB70D(9CC60300)    <1>     movzx ecx, word [entries] ;Get number of entries in a FAT sector
   271 00000DAB 52                  <1>     push rdx
   272 00000DAC 48F7E1              <1>     mul rcx ;Multiply rax with rcx (technically eax with ecx)
   273 00000DAF 5A                  <1>     pop rdx
   274                              <1> ;rbx points to current buffer header
   275 00000DB0 488D5330            <1>     lea rdx, qword [rbx + bufferHdr.dataarea]
   276 00000DB4 4829D7              <1>     sub rdi, rdx
   277 00000DB7 4801F8              <1>     add rax, rdi    ;Add the offset into the sector to rax to get cluster number
   278 00000DBA 89452D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], eax    ;Store this zx value in dpb
   279 00000DBD 5F                  <1>     pop rdi
   280 00000DBE 5A                  <1>     pop rdx
   281 00000DBF 59                  <1>     pop rcx
   282 00000DC0 58                  <1>     pop rax
   283                              <1>     return
    18                              <2> %%_ret:
    19 00000DC1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   284                              <1> 
   285                              <1> getDataSector:
   286                              <1> ;This function will request the sector of data in [currSectD].
   287                              <1> ;This call can only be used for DATA sectors.
   288                              <1> ;Preserves all registers
   289                              <1> ;On ret: CF=NC => currBuff = Buffer with data
   290                              <1> ;        CF=CY => Critical error occurred and was FAILed
   291 00000DC2 50                  <1>     push rax
   292 00000DC3 53                  <1>     push rbx
   293 00000DC4 51                  <1>     push rcx
   294 00000DC5 488B05(ABC60300)    <1>     mov rax, qword [currSectD]  ;Get the disk sector number to read
   295 00000DCC 488D0D08FDFFFF      <1>     lea rcx, getBufForDOS
   296 00000DD3 488D1D14FDFFFF      <1>     lea rbx, getBufForData
   297 00000DDA 4885C0              <1>     test rax, rax
   298 00000DDD 480F44D9            <1>     cmovz rbx, rcx  ;If sector 0, change to DOS buffer
   299                              <1> .getSectorRead:
   300 00000DE1 FFD3                <1>     call rbx  ;Get ptr to buffer header in [currBuff] (and rbx but ignore)
   301 00000DE3 59                  <1>     pop rcx
   302 00000DE4 5B                  <1>     pop rbx
   303 00000DE5 58                  <1>     pop rax
   304                              <1>     return
    18                              <2> %%_ret:
    19 00000DE6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   305                              <1> 
   306                              <1> getNextSectorOfFile:
   307                              <1> ;This function will read the next sector for a file into a buffer.
   308                              <1> ;If the next sector to be read lives in the next cluster, it will update
   309                              <1> ; the vars appropriately
   310                              <1> ;
   311                              <1> ;Input: rbp = dpb pointer
   312                              <1> ;Output:
   313                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   314                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   315                              <1> ;       CF=CY => Critical error occurred and was FAILed
   316                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   317                              <1> ; next cluster and read first sector 
   318                              <1>     ;Check if we need to go to next cluster
   319 00000DE7 8A05(AAC60300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   320 00000DED 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   321 00000DF0 7416                <1>     je .gotoNextCluster
   322                              <1>     ;Goto next sector in same cluster
   323 00000DF2 FE05(AAC60300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   324 00000DF8 48FF05(ABC60300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   325 00000DFF 488B05(ABC60300)    <1>     mov rax, qword [currSectD]
   326                              <1> .exitOK:
   327 00000E06 F8                  <1>     clc
   328                              <1> .exitFail:
   329                              <1>     return
    18                              <2> %%_ret:
    19 00000E07 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   330                              <1> .gotoNextCluster:
   331 00000E08 8B05(A2C60300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   332 00000E0E E82A000000          <1>     call walkFAT
   333 00000E13 72F2                <1>     jc .exitFail
   334                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   335 00000E15 3DFFFFFFFF          <1>     cmp eax, -1
   336 00000E1A 74EA                <1>     je .exitOK
   337                              <1> ;Update the new cluster and sector information
   338 00000E1C 8905(A2C60300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   339 00000E22 FF05(9EC60300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   340 00000E28 E8A0FDFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   341 00000E2D 488905(ABC60300)    <1>     mov qword [currSectD], rax  ;Save it
   342 00000E34 C605(AAC60300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   343 00000E3B EBC9                <1>     jmp short .exitOK
   344                              <1> 
   345                              <1> 
   346                              <1> walkFAT:
   347                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   348                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   349                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   350                              <1> ;       rbp = DPB
   351                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   352                              <1> ;If carry set, getBuffer failed!
   353 00000E3D 53                  <1>     push rbx
   354 00000E3E 51                  <1>     push rcx
   355 00000E3F 52                  <1>     push rdx
   356 00000E40 57                  <1>     push rdi
   357 00000E41 55                  <1>     push rbp
   358 00000E42 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   359 00000E44 E838FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   360                              <1>     ;and FAT type in ecx
   361 00000E49 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]
   362 00000E4D 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   363 00000E4F E882FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx
   364 00000E54 7237                <1>     jc .exitFail
   365                              <1>     ;Check if FAT 12, 16, 32
   366 00000E56 85C9                <1>     test ecx, ecx
   367 00000E58 7439                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   368 00000E5A F7C101000000        <1>     test ecx, 1
   369 00000E60 7413                <1>     jz .goToNextClusterFat32
   370                              <1>     ;Here we handle FAT16
   371 00000E62 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   372 00000E67 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   373 00000E6C 721E                <1>     jb .exit
   374 00000E6E B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   375 00000E73 EB17                <1>     jmp short .exit
   376                              <1> .goToNextClusterFat32:
   377 00000E75 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   378 00000E79 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   379 00000E7E 7207                <1>     jb .validCluster32   
   380 00000E80 B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   381 00000E85 EB05                <1>     jmp short .exit
   382                              <1> .validCluster32:
   383 00000E87 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   384                              <1> .exit:
   385 00000E8C F8                  <1>     clc
   386                              <1> .exitFail:
   387 00000E8D 5D                  <1>     pop rbp
   388 00000E8E 5F                  <1>     pop rdi
   389 00000E8F 5A                  <1>     pop rdx
   390 00000E90 59                  <1>     pop rcx
   391 00000E91 5B                  <1>     pop rbx
   392                              <1>     return
    18                              <2> %%_ret:
    19 00000E92 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   393                              <1> .gotoNextClusterFat12:
   394                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   395                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   396                              <1> 
   397 00000E93 57                  <1>     push rdi    ;Save the cluster number on the stack
   398 00000E94 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   399 00000E97 FFC0                <1>     inc eax ;Get next sector
   400 00000E99 E838FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx
   401 00000E9E 59                  <1>     pop rcx ;Return the cluster number in rcx
   402 00000E9F 72EC                <1>     jc .exitFail
   403                              <1>     ;rdi has first buffer header, rbx has second buffer header
   404                              <1>     ;rdx has offset into first header for entry
   405 00000EA1 F7C101000000        <1>     test ecx, 1  ;Check if cluster is odd
   406 00000EA7 7422                <1>     jz .gotoNextClusterFat12Even
   407                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   408 00000EA9 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   409 00000EAD 29D0                <1>     sub eax, edx
   410 00000EAF FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   411 00000EB1 750E                <1>     jnz .gotoNextClusterFat12NoCross
   412                              <1>     ;Boundary cross, build entry properly
   413 00000EB3 31C0                <1>     xor eax, eax
   414 00000EB5 8A441730            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   415 00000EB9 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   416 00000EBC C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   417 00000EBF EB14                <1>     jmp short .checkIfLastFAT12Cluster
   418                              <1> .gotoNextClusterFat12NoCross:
   419 00000EC1 0FB7441730          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   420 00000EC6 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   421 00000EC9 EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   422                              <1> .gotoNextClusterFat12Even:
   423                              <1>     ;Here the cluster is even and can't cross a sector boundary
   424 00000ECB 0FB7441730          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   425 00000ED0 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   426                              <1> .checkIfLastFAT12Cluster:
   427 00000ED5 3DF60F0000          <1>     cmp eax, 0FF6h   ;Is it below the first invalid cluster number?
   428 00000EDA 72B0                <1>     jb .exit         ;If so, exit with it in eax
   429 00000EDC B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   430 00000EE1 E9A6FFFFFF          <1>     jmp .exit
    23                                  %include "./Source/Kernel/FAT/findfile.asm"
    24                              <1> ;Generic Find First and Find Next functions here
    25                              <1> 
    26                              <1> searchMoreDir:
    27                              <1> ;Called in a level 1 critical section. 
    28                              <1> ;The three directory variables are set up from the ffblock. 
    29                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    30                              <1> ;Current DTA is also used to contain the ff block address
    31                              <1> ;All registers can be trashed
    32 00000EE6 488B2D(62C60300)    <1>     mov rbp, qword [workingDPB]
    33                              <1>     ;First setup dirClustA and dirSect vars
    34 00000EED 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
    35 00000EF4 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    36 00000EF7 8905(CDC60300)      <1>     mov dword [dirClustA], eax  ;... into dir var
    37                              <1>     ;Get number of 32 byte entries in a sector
    38 00000EFD 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    39 00000F01 C1E905              <1>     shr ecx, 5  ;Divide number of bytes per sector by 32
    40 00000F04 31D2                <1>     xor edx, edx
    41 00000F06 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]
    42 00000F09 F7F1                <1>     div ecx ;Divide 32 byte Cluster offset by # of 32 byte entries in a sector
    43                              <1>     ;eax has sector rel cluster value, edx has 32 byte entry rel sector value
    44 00000F0B 668905(D1C60300)    <1>     mov word [dirSect], ax
    45 00000F12 8815(D3C60300)      <1>     mov byte [dirEntry], dl
    46 00000F18 8B05(CDC60300)      <1>     mov eax, dword [dirClustA]
    47 00000F1E 85C0                <1>     test eax, eax
    48 00000F20 7514                <1>     jnz .clusters
    49                              <1> ;Old FAT 12/16 root dirs fall thru here only
    50 00000F22 488D052D010000      <1>     lea rax, searchDir.oldNextEP
    51 00000F29 50                  <1>     push rax    ;Push return address onto the stack
    52 00000F2A 0FB705(D1C60300)    <1>     movzx eax, word [dirSect]   ;Get the root directory sector offset
    53 00000F31 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
    54 00000F34 EB1D                <1>     jmp short .common
    55                              <1> .clusters:
    56 00000F36 488D0573000000      <1>     lea rax, searchDir.nextEp
    57 00000F3D 50                  <1>     push rax    ;Push the return address onto stack
    58 00000F3E 8B05(CDC60300)      <1>     mov eax, dword [dirClustA]
    59 00000F44 E884FCFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
    60 00000F49 0FB71D(D1C60300)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
    61 00000F50 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
    62                              <1> .common:
    63 00000F53 E883FBFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
    64 00000F58 0F8212010000        <1>     jc searchDir.hardError
    65 00000F5E E810010000          <1>     call searchDir.setupBuffer  ;rbx has the buffer ptr for this dir sector
    66 00000F63 0FB605(D3C60300)    <1>     movzx eax, byte [dirEntry]
    67 00000F6A 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
    68 00000F6C C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
    69 00000F6F 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
    70                              <1>     ;We continue AS IF this entry was bad
    71                              <1>     ;Now setup al and rdi as upon normal entry 
    72 00000F72 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get FFBlock buffer to use in rdi
    73 00000F79 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib]  ;Get the search attrib
    74 00000F7C E932010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within findInBuffer
    75                              <1>     ;The return address on the stack will return to the ep's pushed
    76                              <1> 
    77                              <1> searchDir:
    78                              <1> ;Called in a level 1 critical section. 
    79                              <1> ;The three directory variables are set and the ffblock is setup
    80                              <1> ; with template, drive number and attribute fields. 
    81                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    82                              <1> ;Current DTA is also used to contain the ff block address
    83                              <1> ;All registers can be trashed
    84                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
    85 00000F81 488B2D(62C60300)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
    86 00000F88 8B05(CDC60300)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
    87 00000F8E 85C0                <1>     test eax, eax
    88 00000F90 0F84A5000000        <1>     jz .oldRoot
    89 00000F96 E832FCFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
    90                              <1> .sectorLoop:
    91 00000F9B E83BFBFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
    92 00000FA0 0F82CA000000        <1>     jc .hardError
    93 00000FA6 E8C8000000          <1>     call .setupBuffer       ;rbx has the buffer pointer for this dir sector
    94 00000FAB E8D3000000          <1>     call findInBuffer
    95                              <1> .nextEp:
    96                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00000FB0 7201                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00000FB2 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    97                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
    98                              <1>     ;IF however, the next cluster is -1, then we return fail
    99 00000FB3 FF35(9EC60300)      <1>     push qword [currClustF] ;Push currClustF and D together
   100 00000FB9 FF35(AAC60300)      <1>     push qword [currSectC]
   101 00000FBF FF35(ABC60300)      <1>     push qword [currSectD]
   102 00000FC5 8B05(CDC60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   103 00000FCB 8905(A2C60300)      <1>     mov dword [currClustD], eax
   104 00000FD1 668B05(D1C60300)    <1>     mov ax, word [dirSect]
   105 00000FD8 8805(AAC60300)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   106 00000FDE 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   107 00000FE2 488905(ABC60300)    <1>     mov qword [currSectD], rax  
   108 00000FE9 C705(9EC60300)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   108 00000FF1 0000                <1>
   109 00000FF3 E8EFFDFFFF          <1>     call getNextSectorOfFile
   110 00000FF8 8F05(ABC60300)      <1>     pop qword [currSectD]
   111 00000FFE 8F05(AAC60300)      <1>     pop qword [currSectC]
   112 00001004 8F05(9EC60300)      <1>     pop qword [currClustF] ;Push currClustF and D together
   113 0000100A 7264                <1>     jc .hardError
   114 0000100C 483DFFFFFFFF        <1>     cmp rax, -1
   115 00001012 7458                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   116 00001014 66FF05(D1C60300)    <1>     inc word [dirSect]  ;Goto next sector
   117 0000101B 8B05(CDC60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   118 00001021 3B05(A2C60300)      <1>     cmp eax, dword [currClustD] ;Did it change?
   119 00001027 0F846EFFFFFF        <1>     je .sectorLoop  ;If not, we advanced sectors only
   120 0000102D 66C705(D1C60300)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   120 00001035 00                  <1>
   121 00001036 E960FFFFFF          <1>     jmp .sectorLoop 
   122                              <1> 
   123                              <1> .oldRoot:
   124                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   125                              <1> ; one large contiguous cluster.
   126                              <1> ;   ecx = Number of entries per sector
   127                              <1> .oldSectorLp:
   128 0000103B 0FB705(D1C60300)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   129 00001042 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   130 00001045 E891FAFFFF          <1>     call getBufForDOS
   131 0000104A 7224                <1>     jc .hardError
   132 0000104C E822000000          <1>     call .setupBuffer       ;rbx has the buffer pointer for this dir sector
   133 00001051 E82D000000          <1>     call findInBuffer
   134                              <1> .oldNextEP:
   135                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00001056 7201                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00001058 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   136 00001059 66FF05(D1C60300)    <1>     inc word [dirSect]  ;Goto next sector in directory
   137 00001060 8B4509              <1>     mov eax, dword [rbp + dpb.wNumberRootDirSectors]
   138 00001063 663905(D1C60300)    <1>     cmp word [dirSect], ax
   139 0000106A 72CF                <1>     jb .oldSectorLp    ;If equal, no more sectors to search. Game over!
   140                              <1> .fnfError:
   141 0000106C B012                <1>     mov al, errNoFil
   142 0000106E F9                  <1>     stc
   143                              <1>     return
    18                              <2> %%_ret:
    19 0000106F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> .hardError:
   145 00001070 B0FF                <1>     mov al, -1
   146                              <1>     return
    18                              <2> %%_ret:
    19 00001072 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   147                              <1> .setupBuffer:
   148 00001073 C6430904            <1>     mov byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   149 00001077 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   150 0000107B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   151 0000107F C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   152                              <1>     return
    18                              <2> %%_ret:
    19 00001082 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   153                              <1> 
   154                              <1> findInBuffer:
   155                              <1> ;Input: ecx = Number of entries in sector buffer to look for
   156                              <1> ;       rsi = Sector buffer data area
   157                              <1> ;Output: CF=CY => No entries found
   158                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   159 00001083 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get FFBlock buffer to use in rdi
   160 0000108A 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib]  ;Get the search attrib
   161                              <1> .searchMainLp:
   162 0000108D 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   163 00001090 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   164 00001093 803D(CAC30300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   165 0000109A 742A                <1>     je .exclusiveDir
   166 0000109C 3C08                <1>     cmp al, dirVolumeID
   167 0000109E 742D                <1>     je .volFile
   168 000010A0 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   169 000010A2 770F                <1>     ja .nextEntry
   170                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   171                              <1>     ;rdi points to the ffBlock to use
   172                              <1> .scanName:
   173 000010A4 56                  <1>     push rsi
   174 000010A5 57                  <1>     push rdi
   175 000010A6 488D7F01            <1>     lea rdi, qword [rdi + ffBlock.template] ;Goto name to search for
   176 000010AA E874000000          <1>     call .nameCompare
   177 000010AF 5F                  <1>     pop rdi
   178 000010B0 5E                  <1>     pop rsi
   179 000010B1 7420                <1>     je .searchEntryFound
   180                              <1> .nextEntry:
   181                              <1> ;Go to next entry
   182 000010B3 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   183 000010BA FE05(D3C60300)      <1>     inc byte [dirEntry] ;And denote that in variable
   184 000010C0 FFC9                <1>     dec ecx
   185 000010C2 75C9                <1>     jnz .searchMainLp
   186 000010C4 F9                  <1>     stc
   187                              <1>     return
    18                              <2> %%_ret:
    19 000010C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   188                              <1> .exclusiveDir:
   189                              <1> ;Used when going down a path, dir bit simply need be set
   190 000010C6 F6C410              <1>     test ah, dirDirectory
   191 000010C9 75D9                <1>     jnz .scanName
   192 000010CB EBE6                <1>     jmp short .nextEntry
   193                              <1> 
   194                              <1> .volFile:
   195 000010CD 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   196 000010CF 74D3                <1>     je .scanName       ;If so, scan the name agrees
   197 000010D1 EBE0                <1>     jmp short .nextEntry    ;Else, goto next entry
   198                              <1> 
   199                              <1> .searchEntryFound:
   200                              <1> ;Here a good entry was found!
   201 000010D3 57                  <1>     push rdi
   202 000010D4 488D3D(BCC50300)    <1>     lea rdi, curDirCopy
   203 000010DB B904000000          <1>     mov ecx, 32/8
   204 000010E0 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   205 000010E3 5F                  <1>     pop rdi
   206                              <1>     ;Now fill in ffBlock. rdi points to ffblock start
   207 000010E4 8A05(D3C60300)      <1>     mov al, byte [dirEntry]
   208 000010EA 88470D              <1>     mov byte [rdi + ffBlock.dirOffset], al
   209 000010ED 8B05(CDC60300)      <1>     mov eax, dword [dirClustA]
   210 000010F3 894711              <1>     mov dword [rdi + ffBlock.parDirClus], eax
   211 000010F6 8A05(C7C50300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   212 000010FC 884715              <1>     mov byte [rdi + ffBlock.attribFnd], al
   213 000010FF 8B05(D2C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   214 00001105 894716              <1>     mov dword [rdi + ffBlock.fileTime], eax
   215 00001108 8B05(D8C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   216 0000110E 89471A              <1>     mov dword [rdi + ffBlock.fileSize], eax
   217 00001111 488D7F1E            <1>     lea rdi, qword [rdi + ffBlock.asciizName]   ;Goto the name field
   218 00001115 488D35(BCC50300)    <1>     lea rsi, curDirCopy
   219 0000111C E86B000000          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   220 00001121 F8                  <1>     clc
   221                              <1>     return
    18                              <2> %%_ret:
    19 00001122 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   222                              <1> .nameCompare:
   223                              <1> ;Input: rsi = source string
   224                              <1> ;       rdi = string template to compare against
   225                              <1> ;Output: ZF=ZE => Strings are ok
   226                              <1> ;        ZF=NZ => Strings not ok
   227                              <1> ;Accepts wildcards. Trashes al
   228 00001123 51                  <1>     push rcx
   229 00001124 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   230                              <1> .ncLp:
   231 00001126 81F90B000000        <1>     cmp ecx, 11
   232 0000112C 740B                <1>     je .ncExit
   233 0000112E FFC1                <1>     inc ecx
   234 00001130 A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   235 00001131 74F3                <1>     je .ncLp    ;If equal, keep going
   236 00001133 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   237 00001137 74ED                <1>     je .ncLp
   238                              <1> .ncExit:
   239 00001139 59                  <1>     pop rcx
   240                              <1>     return
    18                              <2> %%_ret:
    19 0000113A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   241                              <1> 
   242                              <1> adjustSearchAttr:
   243                              <1> ;Converts the byte to a system only if the bit is set
   244                              <1> ;Input: eax = User selected search mask
   245                              <1> ;Output: eax = Modified search mask
   246 0000113B 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   247 00001140 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   248                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001145 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   249 00001147 B808000000          <1>     mov eax, dirVolumeID
   250                              <1>     return
    18                              <2> %%_ret:
    19 0000114C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   251                              <1> 
   252                              <1> asciizToFCB:
   253                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   254                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   255                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   256                              <1> ;Name is space padded.
   257                              <1> ;Input: rsi = ASCIIZ string buffer
   258                              <1> ;       rdi = FCB name buffer
   259 0000114D 53                  <1>     push rbx    
   260 0000114E 57                  <1>     push rdi
   261 0000114F B90B000000          <1>     mov ecx, 11
   262 00001154 B020                <1>     mov al, " "
   263 00001156 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   264 00001158 5F                  <1>     pop rdi
   265 00001159 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   266                              <1> .processName:
   267 0000115C AC                  <1>     lodsb   ;Get the char in al
   268 0000115D E8ED240000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   269 00001162 84C0                <1>     test al, al
   270 00001164 7424                <1>     jz .exit
   271 00001166 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   272 00001168 7407                <1>     je .extSpace
   273 0000116A 3C2E                <1>     cmp al, "."
   274 0000116C 740C                <1>     je .ext
   275 0000116E AA                  <1>     stosb   ;Store the char
   276 0000116F EBEB                <1>     jmp short .processName
   277                              <1> .extSpace:
   278                              <1> ;Now we scan for a period in the name
   279 00001171 AC                  <1>     lodsb   ;Get a char and increase rsi
   280 00001172 84C0                <1>     test al, al
   281 00001174 7414                <1>     jz .exit
   282 00001176 3C2E                <1>     cmp al, "."     ;If al is not a period...
   283 00001178 75F7                <1>     jne .extSpace   ; keep searching
   284                              <1> .ext:
   285 0000117A 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   286                              <1> .processExt:
   287 0000117E AC                  <1>     lodsb
   288 0000117F 84C0                <1>     test al, al
   289 00001181 7407                <1>     jz .exit
   290 00001183 3C20                <1>     cmp al, " "
   291 00001185 7403                <1>     je .exit
   292 00001187 AA                  <1>     stosb
   293 00001188 EBF4                <1>     jmp short .processExt
   294                              <1> .exit:
   295 0000118A 5B                  <1>     pop rbx
   296                              <1>     return
    18                              <2> %%_ret:
    19 0000118B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   297                              <1> 
   298                              <1> FCBToAsciiz:
   299                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   300                              <1> ;Name is space padded too
   301                              <1> ;Input: rsi = FCB name buffer
   302                              <1> ;       rdi = ASCIIZ string buffer
   303 0000118C B908000000          <1>     mov ecx, 8
   304 00001191 F3A4                <1>     rep movsb   ;Move the name over
   305                              <1> .scanNameSpace:
   306 00001193 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   307 00001197 750D                <1>     jne .ext
   308 00001199 48FFCF              <1>     dec rdi
   309 0000119C FFC1                <1>     inc ecx
   310 0000119E 81F908000000        <1>     cmp ecx, 8
   311 000011A4 72ED                <1>     jb .scanNameSpace
   312                              <1> .ext:
   313 000011A6 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   314 000011AB 7508                <1>     jne .validExt
   315 000011AD 66817E022000        <1>     cmp word [rsi + 2], " " ;Is the final char a space?
   316 000011B3 7415                <1>     je .exit
   317                              <1> .validExt:
   318 000011B5 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   319 000011B7 AA                  <1>     stosb
   320 000011B8 B903000000          <1>     mov ecx, 3
   321 000011BD F3A4                <1>     rep movsb   ;Move the three extension chars over
   322                              <1> .scanExtSpace:
   323 000011BF 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   324 000011C3 7505                <1>     jne .exit
   325 000011C5 48FFCF              <1>     dec rdi
   326 000011C8 EBF5                <1>     jmp short .scanExtSpace
   327                              <1> .exit:
   328 000011CA 31C0                <1>     xor eax, eax
   329 000011CC AA                  <1>     stosb   ;Store a null at the end
   330                              <1>     return
    18                              <2> %%_ret:
    19 000011CD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   331                              <1> 
   332                              <1> setupFFBlock:
   333                              <1> ;Sets up the find first block for the search
   334                              <1> ;Uses currentDrv and fcbName
   335                              <1> ;Input: al = Search attributes
   336 000011CE 50                  <1>     push rax
   337 000011CF 53                  <1>     push rbx
   338 000011D0 56                  <1>     push rsi
   339 000011D1 57                  <1>     push rdi
   340 000011D2 488B1D(79C30300)    <1>     mov rbx, qword [currentDTA]
   341 000011D9 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   342 000011DC 0FB605(93C30300)    <1>     movzx eax, byte [currentDrv]  ;Get the 0 based current drive number
   343 000011E3 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   344 000011E5 488D35(DCC50300)    <1>     lea rsi, fcbName
   345 000011EC 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   346 000011F0 48A5                <1>     movsq   ;Move 8 chars
   347 000011F2 66A5                <1>     movsw   ;Move 2 chars
   348 000011F4 A4                  <1>     movsb   ;Move the final char
   349 000011F5 5F                  <1>     pop rdi
   350 000011F6 5E                  <1>     pop rsi
   351 000011F7 5B                  <1>     pop rbx
   352 000011F8 58                  <1>     pop rax
   353                              <1>     return
    18                              <2> %%_ret:
    19 000011F9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   354                              <1> 
   355                              <1> getDrvLetterFromPath:
   356                              <1> ;Gets the drive letter for the path in al
   357                              <1> ;Input: rsi = Buffer to process
   358                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   359                              <1> ;       ZF=ZE and al = 0 => Null path
   360                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   361                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   362                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   363 000011FA 30C0                <1>     xor al, al
   364 000011FC 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   365                              <1>     retz    ;Return if a null path
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000011FF 74F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   366 00001201 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   367                              <1>     retne   ;If not equal, Relative path or network path
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001205 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   368 00001207 66AD                <1>     lodsw   ;Get first word, rsi += 2
   369                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   370 00001209 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   371 0000120B 2C60                <1>     sub al, 60h
   372                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000120D 75EA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   373 0000120F B0FF                <1>     mov al, -1  ;Else not a valid drive number
   374                              <1>     return
    18                              <2> %%_ret:
    19 00001211 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   375                              <1> getDirPath:
   376 00001212 30C0                <1>     xor al, al   ;Set to Directory
   377 00001214 EB02                <1>     jmp short getPath
   378                              <1> getFilePath:
   379 00001216 B0FF                <1>     mov al, -1  ;Set to File
   380                              <1> getPath:
   381                              <1> ;Determines whether the path is spliced or not and transfers the chars
   382                              <1> ; from the user buffer into an internal buffer, normalising them.
   383                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   384                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   385                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   386                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   387                              <1> ; we let it do its thing and return.
   388                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   389                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   390                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   391                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   392                              <1> ; (converted from using machine name by the net client program).
   393                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   394                              <1> ; was good.
   395                              <1> ;Called with:
   396                              <1> ; rdi = SDA Buffer for filename
   397                              <1> ; rsi = Potentially unqualified filename
   398                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   399 00001218 8805(CAC30300)      <1>     mov byte [fileDirFlag], al  
   400 0000121E B0FF                <1>     mov al, -1
   401 00001220 8805(5CC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   402 00001226 8805(5FC60300)      <1>     mov byte [filspcExist], al  ;We are searching for a file that exists
   403 0000122C 48893D(7FC50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   404 00001233 6698                <1>     cbw  ;make ah = -1
   405 00001235 668905(8FC50300)    <1>     mov word [lastPartOff], ax  ;Store -1 for the last part of the path
   406 0000123C F605(5DC60300)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   407 00001243 7423                <1>     jz .notServer
   408                              <1>     ;In this case, the client network program will have correctly
   409                              <1>     ; substituted the drive letter for the path before making the request.
   410                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   411 00001245 E8B0FFFFFF          <1>     call getDrvLetterFromPath
   412 0000124A E84C230000          <1>     call getCDS ;Get the cds for the drive letter on the path
   413                              <1>     ;Do nothing for now
   414 0000124F 488B3D(6AC60300)    <1>     mov rdi, qword [workingCDS]
   415 00001256 E84C260000          <1>     call dosCrit1Enter
   416 0000125B E878200000          <1>     call ensureDiskValid
   417 00001260 E84C260000          <1>     call dosCrit1Exit
   418                              <1> .serverExit:
   419 00001265 B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   420                              <1>     return
    18                              <2> %%_ret:
    19 00001267 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   421                              <1> .notServer:
   422                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   423 00001268 48C705(6AC60300)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   423 00001270 FFFFFF              <1>
   424 00001273 B823110000          <1>     mov eax, 1123h
   425 00001278 CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   426                              <1>     retnc  ;Return if resolved
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000127A 73EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   427 0000127C E879FFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   428 00001281 9C                  <1>     pushfq  ;Save the flag state on stack
   429 00001282 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   430 00001283 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   431 00001286 E89D230000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   432 0000128B 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   433 0000128D E896230000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   434 00001292 7525                <1>     jnz .notNet
   435 00001294 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   436 00001296 7521                <1>     jne .notNet
   437 00001298 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   438 00001299 9D                  <1>     popfq
   439 0000129A 66A5                <1>     movsw   ;Tfr the two chars rsi, rdi + 2
   440                              <1> .moveNetChars:
   441 0000129C AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   442 0000129D E8AD230000          <1>     call uppercaseChar  ;Make char in al uppercase
   443 000012A2 84C0                <1>     test al, al
   444 000012A4 7411                <1>     jz .netEnd
   445 000012A6 E87D230000          <1>     call swapPathSeparator  ;If path sep, swap it
   446 000012AB 4889FB              <1>     mov rbx, rdi    ;Store current buffer offset in rbx
   447 000012AE AA                  <1>     stosb
   448 000012AF 75EB                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   449 000012B1 E849000000          <1>     call .mainlp    ;Now expand the pathspec portion
   450                              <1>     return
    18                              <2> %%_ret:
    19 000012B6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   451                              <1> .netEnd:
   452 000012B7 AA                  <1>     stosb
   453                              <1>     return
    18                              <2> %%_ret:
    19 000012B8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   454                              <1> .notNet:
   455                              <1> ;This is the normal case; paths can be relative, or absolute.
   456 000012B9 58                  <1>     pop rax ;Get the drive letter back
   457 000012BA 9D                  <1>     popfq   ;Get the flag state back
   458 000012BB 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   459                              <1> .pnfErr:
   460 000012BD B003                <1>     mov al, errPnf  ;Null path error
   461 000012BF F9                  <1>     stc
   462                              <1>     return
    18                              <2> %%_ret:
    19 000012C0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   463                              <1> .notNull:
   464 000012C1 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   465 000012C3 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   466 000012C5 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   467 000012C7 F9                  <1>     stc
   468                              <1>     return
    18                              <2> %%_ret:
    19 000012C8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   469                              <1> .driveOk:
   470 000012C9 84C0                <1>     test al, al
   471 000012CB 7417                <1>     jz .curRelPath ;If al = 0, the path is definitely relative (rel curr. drv.)
   472                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   473 000012CD 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   474 000012D0 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   475 000012D2 50                  <1>     push rax    ;Save the drive letter
   476 000012D3 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   477 000012D4 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   478 000012D7 E84C230000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   479                              <1>     ;If al is a path separator, then this path is absolute.
   480 000012DC 58                  <1>     pop rax ;Get back the drive letter
   481 000012DD 750D                <1>     jnz .relMain ;If relative, rsi points to first char in path
   482                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   483 000012DF 48FFC6              <1>     inc rsi
   484 000012E2 EB0F                <1>     jmp short .commonDir
   485                              <1> .curRelPath:
   486                              <1> ;This is only jumped to if we are relative the current drive
   487                              <1> ;rsi points to first char in path
   488 000012E4 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   489 000012EA FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   490                              <1> .relMain:
   491 000012EC C605(5CC60300)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   492                              <1> .commonDir:
   493                              <1> ;rsi points to the start of the string we will be appending
   494 000012F3 E8AF250000          <1>     call dosCrit1Enter
   495 000012F8 E81F000000          <1>     call prepareDirCrit    ;Prepare the dir if the drive is subst/join drive
   496 000012FD 7216                <1>     jc .badDriveExit
   497                              <1> .mainlp:    ;Now we transfer each directory portion
   498 000012FF E8DA000000          <1>     call copyPathspecCrit  ;Now setup the filename in the FCB name field
   499 00001304 E890010000          <1>     call searchForPathspecCrit  ;and search the directory
   500 00001309 7204                <1>     jc .driveExit    ;Return if the carry flag is set, error code in al
   501 0000130B 84C0                <1>     test al, al ;Fallthru if this pathspec was a file
   502 0000130D 75F0                <1>     jnz .mainlp  ;Else, it was a directory name, keep looping
   503                              <1> .driveExit:
   504 0000130F E89D250000          <1>     call dosCrit1Exit
   505                              <1>     return
    18                              <2> %%_ret:
    19 00001314 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   506                              <1> .badDriveExit:
   507 00001315 B812000000          <1>     mov eax, errNoFil ;No file for that spec found
   508 0000131A EBF3                <1>     jmp short .driveExit
   509                              <1> 
   510                              <1> 
   511                              <1> prepareDirCrit:
   512                              <1> ;Used to transfer the current directory if it is necessary.
   513                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   514                              <1> ; relative
   515                              <1> ;Input: al = 1-based drive letter
   516                              <1> ;Output: rdi = Pointing at where to place chars from source string
   517                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   518 0000131C 56                  <1>     push rsi
   519 0000131D E810220000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   520 00001322 7258                <1>     jc .badDriveExit    ;If the drive number in al is too great or drive invalid
   521 00001324 488B3D(6AC60300)    <1>     mov rdi, qword [workingCDS] 
   522 0000132B 57                  <1>     push rdi    ;Push CDS pointer on stack...
   523 0000132C E8581F0000          <1>     call getDiskDPB  ;Update the working DPB ptr before searching, dpbptr in rbp
   524 00001331 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   525 00001332 488B3D(7FC50300)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   526                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   527                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   528                              <1>     ;   terminating char (\, / or Null)
   529                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   530                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   531 00001339 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   532 0000133F 753D                <1>     jnz .prepDirJoin
   533 00001341 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   534 00001347 7556                <1>     jnz .prepDirSubst
   535                              <1> .prepMain:
   536                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   537 00001349 F605(5CC60300)FF    <1>     test byte [spliceFlag], -1
   538 00001350 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   539                              <1>     ;Else we copy the first two chars only (X:)
   540 00001352 66A5                <1>     movsw  
   541 00001354 B05C                <1>     mov al, "\"
   542 00001356 AA                  <1>     stosb   ;Store the path separator and increment rdi
   543 00001357 31C0                <1>     xor eax, eax    ;Get cluster 0
   544 00001359 EB1B                <1>     jmp short .prepDirExitSkip
   545                              <1> .prepLoop:
   546 0000135B AC                  <1>     lodsb
   547 0000135C 84C0                <1>     test al, al ;If al was null, then we stop
   548 0000135E 7403                <1>     jz .prepDirExit
   549 00001360 AA                  <1>     stosb
   550 00001361 EBF8                <1>     jmp short .prepLoop
   551                              <1> .prepDirExit:
   552 00001363 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   553 00001367 7403                <1>     je .prepDirExitSkipPathsep
   554 00001369 B05C                <1>     mov al, "\"
   555 0000136B AA                  <1>     stosb   ;Store the path separator and increment rdi
   556                              <1> .prepDirExitSkipPathsep:
   557 0000136C 488B35(6AC60300)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   558 00001373 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   559                              <1> .prepDirExitSkip:
   560 00001376 E837000000          <1>     call .prepSetupDirSearchVars
   561 0000137B F8                  <1>     clc ;Clear carry before exiting
   562                              <1> .badDriveExit:
   563 0000137C 5E                  <1>     pop rsi
   564                              <1>     return
    18                              <2> %%_ret:
    19 0000137D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   565                              <1> .prepDirJoin:
   566 0000137E 51                  <1>     push rcx
   567 0000137F 56                  <1>     push rsi
   568 00001380 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   569 00001387 B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   570                              <1> .prepDirJoin1:
   571 0000138C AC                  <1>     lodsb   ;Get the char
   572 0000138D 84C0                <1>     test al, al ;Null char?
   573 0000138F 740B                <1>     jz .prepDirJoin2
   574 00001391 E892220000          <1>     call swapPathSeparator
   575 00001396 7404                <1>     jz .prepDirJoin2
   576 00001398 FFC1                <1>     inc ecx ;Accrue length to copy
   577 0000139A EBF0                <1>     jmp short .prepDirJoin1
   578                              <1> .prepDirJoin2:
   579 0000139C 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   580 0000139D EB05                <1>     jmp short .prepDirCopy1
   581                              <1> .prepDirSubst:
   582 0000139F 51                  <1>     push rcx
   583 000013A0 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   584                              <1> .prepDirCopy1:
   585 000013A4 F3A4                <1>     rep movsb   ;Copy the string over
   586 000013A6 59                  <1>     pop rcx
   587 000013A7 F605(5CC60300)FF    <1>     test byte [spliceFlag], -1
   588 000013AE 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   589 000013B0 EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   590                              <1> .prepSetupDirSearchVars:
   591                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   592                              <1> ;       rbp = DPB pointer for the device which will do transaction
   593 000013B2 51                  <1>     push rcx
   594 000013B3 31C9                <1>     xor ecx, ecx
   595 000013B5 66890D(D1C60300)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   596 000013BC 880D(D3C60300)      <1>     mov byte [dirEntry], cl ;Always start at entry 0 of the sector in cluster
   597 000013C2 E898F7FFFF          <1>     call getFATtype ;Get type of fat
   598 000013C7 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   599 000013CD 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   600                              <1>     ;FAT 32 here
   601 000013CF 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   602 000013D1 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   603 000013D3 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   604                              <1> .psdsvExit:
   605 000013D6 8905(CDC60300)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   606 000013DC 59                  <1>     pop rcx
   607                              <1>     return 
    18                              <2> %%_ret:
    19 000013DD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   608                              <1> 
   609                              <1> copyPathspecCrit:
   610                              <1> ;1) Copies a path portion from the source buffer to the destination
   611                              <1> ;2) Advances rsi to the next null, \ or /
   612                              <1> ;3) Expands all * to ?'s
   613                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   614                              <1> ;    next path separator
   615                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   616                              <1> ;    with rsi moving to path separator
   617                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   618                              <1> ;
   619                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   620                              <1> ;           rdi = Points to where to store it
   621                              <1> ;
   622                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   623                              <1> ;           rdi = First char of next space to store next pathspec
   624                              <1> ;           al = Last char stored (either \ or NULL)
   625                              <1> ;           CF=NC = OK path
   626                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   627                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   628 000013DE 57                  <1>     push rdi    ;Save the pointer into the user buffer
   629 000013DF C605(EEC30300)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   630 000013E6 488D3D(DCC50300)    <1>     lea rdi, fcbName
   631 000013ED 57                  <1>     push rdi
   632 000013EE B903000000          <1>     mov ecx, 3
   633 000013F3 B820202020          <1>     mov eax, "    " ;Four spaces
   634 000013F8 F3AB                <1>     rep stosd   ;Store 12 spaces
   635 000013FA 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   636                              <1> 
   637 000013FB B908000000          <1>     mov ecx, 8 ;8 chars to move over, when ecx = 0, the char must be . or term
   638 00001400 B501                <1>     mov ch, 1   ;Set that we are in name field
   639 00001402 AC                  <1>     lodsb   ;Get first char from user path in al
   640 00001403 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   641 00001405 7451                <1>     je .cpsDots
   642 00001407 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   643                              <1> ;First char is not a dot, so now check if starts with E5h? 
   644                              <1> ;If so, store 05h in its place
   645 0000140A 3CE5                <1>     cmp al, 0E5h
   646 0000140C 7508                <1>     jne .cpsMainLoop
   647 0000140E 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   648 00001411 B005                <1>     mov al, 05h
   649 00001413 AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   650 00001414 FEC9                <1>     dec cl  ;One less char to tfr
   651                              <1> .cpsMainLoop:
   652 00001416 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   653 00001417 84C0                <1>     test al, al ;Is it the null char?
   654 00001419 7474                <1>     jz .cpsProcessName  ;If so, terminate
   655 0000141B E808220000          <1>     call swapPathSeparator  ;And if it is a pathsep, convert it before exiting
   656 00001420 746D                <1>     jz .cpsProcessName
   657 00001422 3C2E                <1>     cmp al, "." ;Filename extension separator
   658 00001424 7424                <1>     je .cpsExtension
   659 00001426 81F900010000        <1>     cmp ecx, 0100h  ;If ch = 1 and cl = 0, then look for either . or terminator
   660 0000142C 74E8                <1>     je .cpsMainLoop
   661 0000142E 67E32E              <1>     jecxz .cpsCharSkip ;If ch = 0 and cl = 0, scan for next terminator
   662                              <1>     ;If we have space in the filename, we check to see if the next char is *
   663 00001431 3C2A                <1>     cmp al, "*" ;Wildcard?
   664 00001433 7431                <1>     je .cpsWildcard
   665 00001435 E815220000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   666 0000143A E8B2220000          <1>     call checkCharValid ; and check it is a valid char
   667 0000143F 7405                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   668 00001441 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   669 00001442 FEC9                <1>     dec cl  ;One less char left to tfr
   670 00001444 EBD0                <1>     jmp short .cpsMainLoop
   671                              <1> .cpsInvalidChar:
   672 00001446 30C0                <1>     xor al, al
   673 00001448 EB45                <1>     jmp short .cpsProcessName
   674                              <1> .cpsExtension:
   675                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   676 0000144A B903000000          <1>     mov ecx, 3  ;Set to 3 chars left, in extension (ch = 0)
   677 0000144F 488D3D(E4C50300)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   678 00001456 EBBE                <1>     jmp short .cpsMainLoop
   679                              <1> .cpsDots:
   680 00001458 AA                  <1>     stosb   ;Store the first dot
   681 00001459 AC                  <1>     lodsb   ;Check now if we have a second dot
   682 0000145A 3C2E                <1>     cmp al, "."
   683 0000145C 7501                <1>     jne .cpsCharSkip
   684 0000145E AA                  <1>     stosb   ;Store the second dot
   685                              <1> .cpsCharSkip:
   686 0000145F E812000000          <1>     call .cpsPtrSkip    ;Now we are skipping any chars that arent terminators
   687 00001464 EB29                <1>     jmp short .cpsProcessName
   688                              <1> .cpsWildcard:
   689                              <1>     ;cl has the number of chars of ? to store 
   690 00001466 B03F                <1>     mov al, "?"
   691 00001468 51                  <1>     push rcx
   692 00001469 0FB6C9              <1>     movzx ecx, cl   ;Temporarily extend cl to ecx
   693 0000146C F3AA                <1>     rep stosb   ;Store that many ? in buffer and return cl to 0
   694 0000146E 59                  <1>     pop rcx
   695 0000146F F6C501              <1>     test ch, 1  ;Is this bit set? If so, we jump to .cpsExtension
   696 00001472 75D6                <1>     jnz .cpsExtension   ;Now fill the extension field
   697                              <1>     ;Else, we process filename
   698 00001474 EBE9                <1>     jmp short .cpsCharSkip
   699                              <1> .cpsPtrSkip:
   700                              <1> ;Now advance rsi past the next pathsep or null char
   701                              <1> ;If an invalid char is detected, it is considered to be a terminator
   702                              <1> ;Output: al = Terminator char (either \ or null)
   703                              <1> ;        rsi -> First char of next pathspec (if al = \)
   704 00001476 AC                  <1>     lodsb
   705 00001477 E888220000          <1>     call checkCharOk
   706 0000147C 740E                <1>     je .cpsBadChar
   707 0000147E 84C0                <1>     test al, al ;Is this null?
   708                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00001480 7501                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00001482 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   709 00001483 E8A0210000          <1>     call swapPathSeparator
   710                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001488 74F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   711 0000148A EBEA                <1>     jmp short .cpsPtrSkip
   712                              <1> .cpsBadChar:
   713 0000148C 30C0                <1>     xor al, al  ;Convert the char to a terminator
   714                              <1>     return
    18                              <2> %%_ret:
    19 0000148E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   715                              <1> .cpsProcessName:
   716                              <1> ;Store the final char in the 12 space in the FCB name field
   717 0000148F 488D3D(E7C50300)    <1>     lea rdi, fcbName+11
   718 00001496 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   719 00001497 5F                  <1>     pop rdi
   720                              <1>     return
    18                              <2> %%_ret:
    19 00001498 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   721                              <1> 
   722                              <1> searchForPathspecCrit:
   723                              <1>     ;Now search the current directory for this filename
   724                              <1>     ;Find first using SDA ffBlock
   725                              <1>     ;If al = 0, we have a file name
   726                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   727 00001499 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   728 0000149A 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   729                              <1> ;Evaluate whether we are searching for a file for a directory
   730 0000149B 84C0                <1>     test al, al
   731 0000149D 741D                <1>     jz .sfpPNfile
   732                              <1>     ;Fall if subdir
   733 0000149F 488D3D(DCC50300)    <1>     lea rdi, fcbName
   734 000014A6 B03F                <1>     mov al, "?" ;Search for wildcard
   735 000014A8 B90C000000          <1>     mov ecx, 12
   736 000014AD F2AE                <1>     repne scasb
   737 000014AF 746D                <1>     je .sfpPnf  ;Path not found if a ? found in the name
   738 000014B1 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
   739 000014B3 C605(CAC30300)00    <1>     mov byte [fileDirFlag], 0   ;Set to search exclusively for a dir
   740 000014BA EB0E                <1>     jmp short .sfpPNMain
   741                              <1> .sfpPNfile:
   742                              <1>     ;Here if we are searching for a file
   743 000014BC C605(CAC30300)FF    <1>     mov byte [fileDirFlag], -1  ;Search for file or dir according to attribs
   744 000014C3 0FB605(57C60300)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
   745                              <1> .sfpPNMain:
   746 000014CA E86CFCFFFF          <1>     call adjustSearchAttr   ;Edit the search attributes as needed
   747 000014CF E8FAFCFFFF          <1>     call setupFFBlock   ;Sets up the internal ff block, attribs in al
   748                              <1>     ;Now the internal ff block is setup, conduct search.
   749 000014D4 E8A8FAFFFF          <1>     call searchDir
   750 000014D9 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
   751 000014DA 5E                  <1>     pop rsi
   752 000014DB 7241                <1>     jc .sfpSearchError
   753                              <1> ;Here if a file was found. First check the FCB pattern to see if it was . or ..
   754 000014DD 803D(DCC50300)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
   755 000014E4 7420                <1>     je .sfpPNDots
   756                              <1>     ;Copy filename over to internal buffer
   757 000014E6 56                  <1>     push rsi    ;Save source pointer position
   758 000014E7 488B35(79C30300)    <1>     mov rsi, qword [currentDTA]
   759 000014EE 488D761E            <1>     lea rsi, qword [rsi + ffBlock.asciizName]    ;Get asciiz name ptr
   760                              <1> .sfpPNtfrName:
   761 000014F2 AC                  <1>     lodsb
   762 000014F3 84C0                <1>     test al, al
   763 000014F5 7403                <1>     jz .sfpPNlastchar   ;Keep copying until null found, DONT PRINT IT
   764 000014F7 AA                  <1>     stosb
   765 000014F8 EBF8                <1>     jmp short .sfpPNtfrName ;Keep looping
   766                              <1> .sfpPNlastchar:
   767 000014FA 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
   768 000014FB 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
   769 000014FE 84C0                <1>     test al, al ;If null, return it
   770 00001500 7402                <1>     jz short .sfpPNexit
   771 00001502 B05C                <1>     mov al, "\" ;Else, return path
   772                              <1> .sfpPNexit:
   773 00001504 AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
   774                              <1>     return
    18                              <2> %%_ret:
    19 00001505 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   775                              <1> .sfpPNDots:
   776                              <1> ;For one dot, we leave rdi where it is
   777                              <1> ;For two dots, we search backwards for the previous "\"
   778 00001506 803D(DDC50300)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
   779                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000150D 75F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   780                              <1>     ;Here we have two dots
   781                              <1>     ;Walk rdi backwards until a \ is found
   782 0000150F 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
   783                              <1> .sfpPNDotsLp:
   784 00001512 48FFCF              <1>     dec rdi
   785 00001515 803F5C              <1>     cmp byte [rdi], "\"
   786 00001518 75EC                <1>     jne .sfpPNDots  ;Keep looping around until it is a "\"
   787 0000151A 48FFC7              <1>     inc rdi ;Go past that pathsep
   788                              <1>     return
    18                              <2> %%_ret:
    19 0000151D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   789                              <1> .sfpSearchError:
   790                              <1> .sfpPnf:
   791 0000151E B803000000          <1>     mov eax, errPnf
   792 00001523 EB05                <1>     jmp short .sfpErrExit
   793                              <1> .sfpFnf:
   794 00001525 B802000000          <1>     mov eax, errFnf
   795                              <1> .sfpErrExit:
   796 0000152A F9                  <1>     stc ;Set carry
   797                              <1>     return
    18                              <2> %%_ret:
    19 0000152B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   798                              <1> 
   799                              <1> checkDevPath:
   800                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV folder)
   801                              <1> ; If it is, it looksahead to see if the next portion (if one exists)
   802                              <1> ; is a char device name. If it is, it intercepts the find call
   803                              <1> ; and returns with a dummy FFblock for the char device.
   804                              <1> checkDeviceName:
   805                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
   806                              <1> ; device driver chain. Creates a dummy FFblock for them.
   807                              <1> ;Input: Nothing
   808                              <1> ;Output: ZF=ZE => fcbname a Character Device
   809                              <1> ;        ZF=NZ => fcbname NOT a device name
   810                              <1> ;If returns with CF=CY, fail request as date/time driver failed.
   811 0000152C 50                  <1>     push rax
   812 0000152D 57                  <1>     push rdi
   813 0000152E 488B05(DCC50300)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
   814 00001535 488D3D(73C00300)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
   815                              <1> .checkName:
   816 0000153C 48F7470800800000    <1>     test qword [rdi + drvHdr.attrib], devDrvChar  ;Is the driver for disk drive?
   817 00001544 7406                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
   818 00001546 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
   819 0000154A 7412                <1>     je .deviceFound
   820                              <1> .walkList:
   821 0000154C 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
   822 0000154F 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
   823 00001556 75E4                <1>     jne .checkName  ;If no, rdi points to char device
   824 00001558 48FFCF              <1>     dec rdi ;Clear ZF and CF before returning (-1 -> -2)
   825                              <1> .exit:
   826 0000155B 5F                  <1>     pop rdi
   827 0000155C 58                  <1>     pop rax
   828                              <1>     return
    18                              <2> %%_ret:
    19 0000155D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   829                              <1> .deviceFound:
   830                              <1> ;Now build a dummy directory entry for the char device
   831 0000155E 488D3D(BCC50300)    <1>     lea rdi, curDirCopy
   832                              <1>     ;Zero the directory copy (32 bytes)
   833 00001565 50                  <1>     push rax
   834 00001566 51                  <1>     push rcx
   835 00001567 57                  <1>     push rdi
   836 00001568 31C0                <1>     xor eax, eax    ;Zero rax
   837 0000156A B904000000          <1>     mov ecx, 4
   838 0000156F F348A5              <1>     rep movsq   ;Store 4 qwords of 0 to fill directory entry with zeros
   839 00001572 5F                  <1>     pop rdi
   840 00001573 59                  <1>     pop rcx
   841 00001574 58                  <1>     pop rax
   842                              <1> 
   843 00001575 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
   844 00001578 66B82020            <1>     mov ax, "  "    ;Two spaces
   845 0000157C 884708              <1>     mov byte [rdi + fatDirEntry.name + filename.fExt], al
   846 0000157F 66894709            <1>     mov word [rdi + fatDirEntry.name + filename.fExt + 1], ax
   847 00001583 C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], 40h ;Mimic DOS, set to 40h
   848                              <1>     ;Get date and time and set the write time in the directory entry
   849 00001587 E86A0A0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   850 0000158C 72CD                <1>     jc .exit  ;If we fail to get time/date, fail the request with CF=CY
   851                              <1>     ;Build date and time words
   852 0000158E E84E0B0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   853 00001593 66894716            <1>     mov word [rdi + fatDirEntry.wrtTime], ax
   854 00001597 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   855 0000159A 66894718            <1>     mov word [rdi + fatDirEntry.wrtDate], ax
   856 0000159E 31C0                <1>     xor eax, eax    ;Clear CF and set ZF
   857 000015A0 EBB9                <1>     jmp short .exit
    24                                  %include "./Source/Kernel/FAT/dirfun.asm"
    25                              <1> ;---------------------------------------------------:
    26                              <1> ;                   KERNEL FUNCTIONS                :
    27                              <1> ;---------------------------------------------------:
    28                              <1> makeDIR:           ;ah = 39h
    29                              <1> removeDIR:         ;ah = 3Ah
    30                              <1> setCurrentDIR:     ;ah = 3Bh, set dir for current drive (or drive in path)
    31                              <1> getCurrentDIR:     ;ah = 47h
    32                              <1> getSetFileDateTime:;ah = 57h
    33                              <1> trueName:          ;ah = 60h, get fully qualified name
    34                              <1>     return
    18                              <2> %%_ret:
    19 000015A2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    35                              <1> 
    36                              <1> ;-----------------------------------
    37                              <1> ;    General Directory Routines    :
    38                              <1> ;-----------------------------------
    39                              <1> 
    40                              <1> updateDirectoryEntryForFile:    
    41                              <1> ;Updates the directory entry for disk files
    42                              <1> ;Called with:
    43                              <1> ;   [workingDPB] = DPB pointer for the disk device
    44                              <1> ;   [currentSFT] = Current SFT pointer
    45 000015A3 50                  <1>     push rax
    46 000015A4 53                  <1>     push rbx
    47 000015A5 57                  <1>     push rdi
    48 000015A6 55                  <1>     push rbp
    49                              <1> 
    50 000015A7 488B3D(82C60300)    <1>     mov rdi, qword [currentSFT]
    51 000015AE 488B2D(62C60300)    <1>     mov rbp, qword [workingDPB]
    52 000015B5 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
    53 000015BB 751D                <1>     jnz .skipDT
    54                              <1>     ;Get date and time words and add them to the directory entry
    55 000015BD E8340A0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    56 000015C2 7260                <1>     jc .exit  ;If we fail to get time/date, fail the request
    57                              <1>     ;Build date and time words
    58 000015C4 E8180B0000          <1>     call getDirDTwords  ;Get date time words packed in eax
    59                              <1>     ;Update SFT fields
    60 000015C9 66894713            <1>     mov word [rdi + sft.wTime], ax
    61 000015CD C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
    62 000015D0 66894715            <1>     mov word [rdi + sft.wDate], ax
    63 000015D4 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush  ;We update DT, so flush
    64                              <1> .skipDT:
    65                              <1> ;Before we read the dir sector in, if we never wrote to the disk
    66                              <1> ; we skip all of this
    67 000015DA 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
    68 000015E0 7442                <1>     jz .exit ;If the file was never written to, don't bother updating DIR data
    69 000015E2 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
    70 000015E6 E8FEF4FFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
    71 000015EB 7237                <1>     jc .exit    ;If an error is to be returned from, we skip the rest of this
    72                              <1>     ;Now we write the changes to the sector
    73 000015ED 4889DD              <1>     mov rbp, rbx    ;Move disk buffer header into rbp
    74                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
    75 000015F0 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer 
    76 000015F4 488D6D30            <1>     lea rbp, qword [rbp + bufferHdr.dataarea]   ;Goto data area
    77 000015F8 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
    78 000015FC C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
    79 000015FF 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
    80 00001602 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
    81 00001605 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
    82 00001608 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
    83 0000160C 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
    84 00001610 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
    85 00001614 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
    86 00001618 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
    87                              <1>     ;Directory sector updated and marked to be flushed to disk!
    88                              <1>     ;Now mark that the file has sectors not yet flushed to disk
    89                              <1> 
    90 0000161C 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
    91 0000161D 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush
    92 00001623 9D                  <1>     popfq
    93                              <1> .exit:
    94 00001624 5D                  <1>     pop rbp
    95 00001625 5F                  <1>     pop rdi
    96 00001626 5B                  <1>     pop rbx
    97 00001627 58                  <1>     pop rax
    98                              <1>     return
    18                              <2> %%_ret:
    19 00001628 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    25                                  %include "./Source/Kernel/FileIO/devio.asm"
    26                              <1> ;This file contains the primitive dev io function, which will be called 
    27                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    28                              <1> ; make requests for device IO.
    29                              <1> 
    30                              <1> mainCharIO:
    31                              <1> ;This is the main IO clearing function for Char IO.
    32                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    33                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    34                              <1> ;
    35                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    36                              <1> ;       ah = {0,..., 5}, a subfunction number
    37                              <1> ;       Function 0: Read Char (drvREAD)
    38                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    39                              <1> ;       Function 2: Write Char (drvWrite)
    40                              <1> ; In the case the below functions are called for Disk/Net files
    41                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    42                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    43                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    44                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    45                              <1> ;
    46                              <1> ; If and only if ah = 02h, al = Char to write to device
    47                              <1> ;
    48                              <1> ;
    49                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    50                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    51                              <1> ;                                           ZF = NZ => Device ready (not busy)
    52                              <1> ;                                               If ND read, AL = Next Char
    53                              <1> ; For Files/Net:
    54                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    55                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    56                              <1> ;           For Read and ND Read:
    57                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    58                              <1> ;               Read returns ^Z on EOF.
    59                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    60                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    61                              <1> ;
    62                              <1> ;All registers preserved EXCEPT for ax and flags
    63                              <1> 
    64                              <1> ;Reference Request Header
    65                              <1> ;Common Section:
    66                              <1> ;    .hdrlen resb 1  ;Length of the request header
    67                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    68                              <1> ;    .cmdcde resb 1  ;Command code
    69                              <1> ;    .status resw 1  ;Status word
    70                              <1> ;    .devptr resq 1  ;Reserved. Unused
    71                              <1> ;Below used by calls 0,1,2,5
    72                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    73                              <1> ;Below used by calls 0,2
    74                              <1> ;    .bufptr resq 1
    75                              <1> ;    .tfrlen resd 1
    76                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    77                              <1> ;    .strtsc resq 1
    78                              <1> ;    .desptr resq 1
    79                              <1> 
    80                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    81 00001629 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    82 0000162A 488D1D(7DC40300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    83 00001631 48891D(06C40300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    84 00001638 5B                  <1>     pop rbx
    85 00001639 C705(0EC40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    85 00001641 0000                <1>
    86 00001643 668905(7DC40300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    87 0000164A 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    88 00001650 0F85A1000000        <1>     jnz .notChar
    89 00001656 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    90 0000165C 0F8495000000        <1>     jz .notChar
    91                              <1> ;Char devices only here
    92 00001662 E829220000          <1>     call dosPushRegs    ;Save context here
    93 00001667 488D1DD3E9FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    94 0000166E 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    95 00001671 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    96 00001674 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    97 00001677 890D(F8C30300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    98                              <1>     ;Now set up cx for status word
    99 0000167D 31C9                <1>     xor ecx, ecx
   100 0000167F 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   101 00001682 7506                <1>     jne .skipBsySet
   102 00001684 81C900020000        <1>     or ecx, drvBsyStatus
   103                              <1> .skipBsySet:
   104 0000168A 66870D(FBC30300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   105                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   106 00001691 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   107 00001698 E89E1A0000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   108 0000169D 668B3D(FBC30300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   109 000016A4 F7C700800000        <1>     test edi, drvErrStatus
   110 000016AA 752D                <1>     jnz .error
   111                              <1> .ignoreRet:
   112 000016AC 803D(FAC30300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   113 000016B3 750C                <1>     jne .notNDRead
   114 000016B5 8A05(05C40300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   115 000016BB 8805(7DC40300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   116                              <1> .notNDRead:
   117 000016C1 8A25(FCC30300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   118 000016C7 F6D4                <1>     not ah
   119 000016C9 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   120 000016CC E8A8210000          <1>     call dosPopRegs ;Get back the context
   121 000016D1 668B05(7DC40300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   122                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 000016D8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   123                              <1> .error:
   124                              <1>     ;cl has flags
   125 000016D9 88CC                <1>     mov ah, cl
   126 000016DB E832190000          <1>     call charDevErr
   127 000016E0 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   128 000016E2 750A                <1>     jne .errorIgnore
   129                              <1>     ;Fallthrough => Retry
   130 000016E4 E890210000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   131 000016E9 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   132                              <1> .errorIgnore:
   133                              <1>     ;Clear the busy bit in the status word
   134 000016EE 8025(FCC30300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   135 000016F5 EBB5                <1>     jmp short .ignoreRet
   136                              <1> .notChar:
   137                              <1> ;Just return with ZF=NZ for now
   138 000016F7 50                  <1>     push rax
   139 000016F8 31C0                <1>     xor eax, eax
   140 000016FA FEC0                <1>     inc al
   141 000016FC 58                  <1>     pop rax
   142                              <1>     return
    18                              <2> %%_ret:
    19 000016FD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   143                              <1> 
   144                              <1> openSFT:
   145                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   146                              <1> ;Input: rdi = SFT pointer
   147 000016FE E88D210000          <1>     call dosPushRegs
   148 00001703 B00D                <1>     mov al, drvOPEN
   149 00001705 EB07                <1>     jmp short openCloseCommon
   150                              <1> closeSFT:
   151                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   152 00001707 E884210000          <1>     call dosPushRegs
   153 0000170C B00E                <1>     mov al, drvCLOSE
   154                              <1> openCloseCommon:
   155                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   156 0000170E 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   157 00001714 7469                <1>     jz .exit    ;Exit if so
   158 00001716 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   159 0000171A 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   160 0000171E 7512                <1>     jnz .charDev
   161                              <1>     ;Here a disk drive, rdi is a DPB ptr
   162 00001720 803D(36C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   163 00001727 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   164 00001729 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   165 0000172C 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   166 0000172E 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   167                              <1> .charDev:
   168 00001732 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   169 00001738 7445                <1>     jz .exit    ;No, exit!
   170 0000173A 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   171 0000173D 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   172 00001744 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   173                              <1> .retryEP:
   174 00001747 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   175 0000174A C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   176 0000174D 50                  <1>     push rax    ;Save the dword
   177 0000174E E8EC190000          <1>     call goDriver
   178 00001753 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   179 0000175A F7C700800000        <1>     test edi, drvErrStatus
   180 00001760 741C                <1>     jz .exitPop
   181                              <1>     ;Error here, check if char or block drive
   182 00001762 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   183 00001768 7404                <1>     jz .blockError
   184                              <1>     ;Char error here
   185 0000176A B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   186 0000176C EB04                <1>     jmp short .errorCmn
   187                              <1> .blockError:
   188 0000176E 88C8                <1>     mov al, cl  ;Move drive number into al
   189 00001770 B406                <1>     mov ah, critData    ;Data on block dev error
   190                              <1> .errorCmn:
   191                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   192 00001772 E89B180000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   193 00001777 B001                <1>     mov al, critRetry   ;al returns user response
   194 00001779 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   195 0000177B 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   196 0000177C EBC9                <1>     jmp short .retryEP  ;Reset
   197                              <1> .exitPop:
   198 0000177E 58                  <1>     pop rax    
   199                              <1> .exit:
   200 0000177F E8F5200000          <1>     call dosPopRegs
   201                              <1>     return
    18                              <2> %%_ret:
    19 00001784 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    26                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    27                              <1> ;-----------------------------------------------------------------------:
    28                              <1> ;                  DOS default char functions live here                 :
    29                              <1> ;                                                                       :
    30                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    31                              <1> ;                                                                       :
    32                              <1> ;Rules for the naming of the DOS functions                              :
    33                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    34                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    35                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    36                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    37                              <1> ;                                                                       :
    38                              <1> ;-----------------------------------------------------------------------:
    39                              <1> 
    40                              <1> charIn_BE:     ;ah = 01h
    41                              <1> ;Return char that has been read and echoed in al
    42 00001785 E866010000          <1>     call charIn_B
    43 0000178A 50                  <1>     push rax
    44 0000178B E804000000          <1>     call charOut_B.in    ;Output it to screen
    45 00001790 58                  <1>     pop rax
    46                              <1>     return
    18                              <2> %%_ret:
    19 00001791 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    47                              <1> 
    48                              <1> charOut_B:       ;ah = 02h
    49                              <1> ;Bspace is regular cursor left, does not insert a blank
    50 00001792 88D0                <1>     mov al, dl
    51                              <1> .in:  ;Internal function Entry Point, with char in al
    52 00001794 3C20                <1>     cmp al, asciiCaret
    53 00001796 7277                <1>     jb .control
    54 00001798 3C7F                <1>     cmp al, DEL ;DEL char?
    55 0000179A 7406                <1>     je .skipCurs
    56 0000179C FE05(2EC20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    57                              <1> .skipCurs:
    58 000017A2 FE05(34C30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    59 000017A8 8025(34C30300)03    <1>     and byte [vConErr], 3
    60 000017AF 56                  <1>     push rsi
    61 000017B0 7507                <1>     jnz .skipErrorCheck
    62 000017B2 50                  <1>     push rax
    63 000017B3 E884020000          <1>     call vConCtrlCheck
    64 000017B8 58                  <1>     pop rax
    65                              <1> .skipErrorCheck:
    66 000017B9 E80C020000          <1>     call outputOnStdout
    67 000017BE 5E                  <1>     pop rsi
    68 000017BF F605(31C30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    69                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000017C6 74C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    70 000017C8 53                  <1>     push rbx
    71 000017C9 56                  <1>     push rsi
    72 000017CA BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    73 000017CF E82F030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    74 000017D4 7236                <1>     jc .exitPrintEcho
    75                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    76 000017D6 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    77 000017DA F7C300800000        <1>     test ebx, devRedirDev
    78 000017E0 752A                <1>     jnz .exitPrintEcho  ;Exit if STDOUT is redir
    79 000017E2 F7C380000000        <1>     test ebx, devCharDev
    80 000017E8 7422                <1>     jz .exitPrintEcho
    81 000017EA BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    82 000017EF E80F030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    83 000017F4 7216                <1>     jc .exitPrintEcho   ;Exit if handle closed
    84 000017F6 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    85 000017FC 7407                <1>     jz .netSpool
    86 000017FE E8FB010000          <1>     call outputOnSFT
    87 00001803 EB07                <1>     jmp short .exitPrintEcho
    88                              <1> .netSpool:
    89 00001805 C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    90                              <1> .exitPrintEcho:
    91 0000180C 5E                  <1>     pop rsi
    92 0000180D 5B                  <1>     pop rbx
    93                              <1>     return
    18                              <2> %%_ret:
    19 0000180E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    94                              <1> .control:
    95 0000180F 3C0D                <1>     cmp al, CR
    96 00001811 7425                <1>     je .newline
    97 00001813 3C08                <1>     cmp al, BSP
    98 00001815 742D                <1>     je .back
    99 00001817 3C09                <1>     cmp al, TAB
   100 00001819 7587                <1>     jne .skipCurs   ;Treat as normal
   101                              <1>     ;TAB key here
   102                              <1> .tab:
   103 0000181B 51                  <1>     push rcx
   104 0000181C 0FB60D(2EC20300)    <1>     movzx ecx, byte [vConCursPos]
   105 00001823 80C9F8              <1>     or cl, ~7
   106 00001826 F6D9                <1>     neg cl
   107 00001828 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   108                              <1> .tabloop:
   109 0000182B B020                <1>     mov al, SPC
   110 0000182D E862FFFFFF          <1>     call charOut_B.in   ;Output the char
   111 00001832 FEC9                <1>     dec cl
   112 00001834 75F5                <1>     jnz .tabloop
   113                              <1> .stopTab:
   114 00001836 59                  <1>     pop rcx
   115                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 00001837 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   116                              <1> .newline:
   117 00001838 C605(2EC20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   118 0000183F E95EFFFFFF          <1>     jmp .skipCurs   ;And echo 
   119                              <1> .back:
   120 00001844 FE0D(2EC20300)      <1>     dec byte [vConCursPos]
   121 0000184A E953FFFFFF          <1>     jmp .skipCurs   ;And echo
   122                              <1> 
   123                              <1> auxIn_B:        ;ah = 03h
   124 0000184F E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   125 00001854 BB03000000          <1>     mov ebx, 3
   126 00001859 E8A5020000          <1>     call getCharDevSFT
   127                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000185E 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   128                              <1> .auxloop:
   129 00001860 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   130 00001862 E8C2FDFFFF          <1>     call mainCharIO
   131 00001867 7408                <1>     jz .signalLoop
   132 00001869 30E4                <1>     xor ah, ah  ;Read the char in
   133 0000186B E8B9FDFFFF          <1>     call mainCharIO
   134                              <1>     return
    18                              <2> %%_ret:
    19 00001870 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   135                              <1> .signalLoop:
   136 00001871 E8A3010000          <1>     call callInt48h
   137 00001876 EBE8                <1>     jmp short .auxloop
   138                              <1> 
   139                              <1> auxOut_B:       ;ah = 04h
   140 00001878 53                  <1>     push rbx
   141 00001879 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   142 0000187E EB06                <1>     jmp short auxOutCmn
   143                              <1> prnOut_B:       ;ah = 05h
   144 00001880 53                  <1>     push rbx
   145 00001881 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   146                              <1> auxOutCmn: ;Auxilliary output device common 
   147 00001886 88D0                <1>     mov al, dl  ;Get the char into al
   148 00001888 50                  <1>     push rax
   149 00001889 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   150 0000188E 58                  <1>     pop rax
   151 0000188F 56                  <1>     push rsi
   152 00001890 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   153 00001895 5E                  <1>     pop rsi
   154 00001896 5B                  <1>     pop rbx
   155                              <1>     return
    18                              <2> %%_ret:
    19 00001897 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   156                              <1> 
   157                              <1> directConIO:    ;ah = 06h
   158 00001898 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   159 0000189A 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   160 0000189C 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   161                              <1> ;Here is the read char direct function
   162 000018A2 31DB                <1>     xor ebx, ebx    
   163 000018A4 E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   164                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000018A9 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   165 000018AB 488B2D(DCC30300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   166 000018B2 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   167 000018B4 E870FDFFFF          <1>     call mainCharIO
   168 000018B9 E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   169 000018BE 7507                <1>     jnz .readChar
   170 000018C0 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   171 000018C4 30C0                <1>     xor al, al  ;Set caller return code to 0
   172                              <1>     return
    18                              <2> %%_ret:
    19 000018C6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   173                              <1> .readChar:
   174 000018C7 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   175                              <1>     ;Fallthrough here to get the char at STDIN
   176                              <1> charIn:         ;ah = 07h
   177                              <1> ;Return char in al from STDIN without waiting
   178 000018CB 31DB                <1>     xor ebx, ebx
   179 000018CD E831020000          <1>     call getCharDevSFT
   180                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000018D2 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   181 000018D4 B401                <1>     mov ah, 01  ;ND read for char
   182 000018D6 E84EFDFFFF          <1>     call mainCharIO
   183 000018DB 750B                <1>     jnz .getChar
   184 000018DD B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   185 000018DF CD4A                <1>     int 4Ah
   186 000018E1 E833010000          <1>     call callInt48h
   187 000018E6 EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   188                              <1> .getChar:
   189                              <1>     ;Get the char in al and exit
   190 000018E8 30E4                <1>     xor ah, ah
   191 000018EA E83AFDFFFF          <1>     call mainCharIO
   192                              <1>     return
    18                              <2> %%_ret:
    19 000018EF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   193                              <1> charIn_B:       ;ah = 08h
   194                              <1> ;Return char in al from STDIN
   195 000018F0 56                  <1>     push rsi
   196                              <1> .readAgain:
   197 000018F1 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   198                              <1>     ;Also sets rsi to point to the device SFT for 
   199 000018F6 7543                <1>     jnz .pullChar
   200 000018F8 803D(DDD80300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   201 000018FF 7507                <1>     jne .skiplookahead
   202 00001901 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   203 00001903 E821FDFFFF          <1>     call mainCharIO
   204                              <1> .skiplookahead:
   205 00001908 B484                <1>     mov ah, 84h
   206 0000190A CD4A                <1>     int 4ah ;Multitasking keyboard loop
   207 0000190C 66813D(09D90300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   207 00001914 FF                  <1>
   208 00001915 751B                <1>     jne .skipClockRead
   209 00001917 E8741F0000          <1>     call dosPushRegs
   210 0000191C F8                  <1>     clc ;Clear CF, write primary header to backup
   211 0000191D E882000000          <1>     call swapPrimaryHeader
   212 00001922 E8CF060000          <1>     call readDateTimeRecord
   213 00001927 F9                  <1>     stc ;Set CF, write backup to primary header
   214 00001928 E877000000          <1>     call swapPrimaryHeader
   215 0000192D E8471F0000          <1>     call dosPopRegs
   216                              <1> .skipClockRead:
   217 00001932 66FF05(09D90300)    <1>     inc word [keybTicks]
   218 00001939 EBB6                <1>     jmp short .readAgain
   219                              <1> .pullChar:
   220 0000193B 30E4                <1>     xor ah, ah
   221 0000193D E8E7FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   222 00001942 5E                  <1>     pop rsi
   223 00001943 3C00                <1>     cmp al, NUL ;Is this the null char?
   224 00001945 7507                <1>     jne .exit
   225                              <1>     ;We are mid extended ascii, prevent printer toggling
   226 00001947 C605(08D90300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   227                              <1> .exit:
   228                              <1>     return
    18                              <2> %%_ret:
    19 0000194E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   229                              <1> 
   230                              <1> printString_B:      ;ah = 09h
   231 0000194F 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   232                              <1> .ps0:
   233 00001952 AC                  <1>     lodsb   ;Get char in al and inc rsi
   234 00001953 3C24                <1>     cmp al, "$" ;End of string char?
   235                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001955 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   236 00001957 E838FEFFFF          <1>     call charOut_B.in
   237 0000195C EBF4                <1>     jmp short .ps0
   238                              <1> 
   239                              <1> checkStdinStatus:  ;ah = 0Bh
   240                              <1> ;Returns the status of the driver controlling vCon
   241 0000195E E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   242 00001963 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   243                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001965 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   244 00001967 FEC8                <1>     dec al  ;Set al to -1 if char available
   245                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 00001969 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   246                              <1> clearbuffDoFunc:   ;ah = 0Ch
   247                              <1> ;Clears any buffers and issues a console read command (the command in al)
   248                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   249 0000196A 50                  <1>     push rax
   250 0000196B 52                  <1>     push rdx
   251 0000196C 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   252 0000196E E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   253 00001973 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   254 00001975 B404                <1>     mov ah, 04h ;Flush input buffers
   255 00001977 E8ADFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   256                              <1> .skipFlush:
   257 0000197C 5A                  <1>     pop rdx
   258 0000197D 58                  <1>     pop rax
   259 0000197E 88C4                <1>     mov ah, al  ;Move function number into ah
   260 00001980 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   261 00001982 7507                <1>     jne .others
   262 00001984 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   263 00001987 7412                <1>     jz .bad ;Yes, exit
   264 00001989 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   265                              <1> .others:
   266 0000198B 3C01                <1>     cmp al, 01h
   267 0000198D 740F                <1>     je .callFunction
   268 0000198F 3C07                <1>     cmp al, 07h
   269 00001991 740B                <1>     je .callFunction
   270 00001993 3C08                <1>     cmp al, 08h
   271 00001995 7407                <1>     je .callFunction
   272 00001997 3C0A                <1>     cmp al, 0Ah
   273 00001999 7403                <1>     je .callFunction
   274                              <1> .bad:
   275 0000199B 30C0                <1>     xor al, al
   276                              <1>     return
    18                              <2> %%_ret:
    19 0000199D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   277                              <1> .callFunction:
   278 0000199E FA                  <1>     cli ;Prepare to swap stack pointer
   279                              <1>     ;The below address avoids "properly" reentering DOS
   280                              <1>     ;We simply reuse the function dispatch aspect. 
   281                              <1>     ;this means we dont trash the caller's register frame 
   282 0000199F E9041E0000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   283                              <1> ;------------------------
   284                              <1> ;  Primitive functions  :
   285                              <1> ;------------------------
   286                              <1> swapPrimaryHeader:
   287                              <1> ;Will swap the primary header to the backup or vice-versa, depending on
   288                              <1> ; CF. CF = NC, write to backup, CF=CY, read from backup
   289 000019A4 56                  <1>     push rsi
   290 000019A5 57                  <1>     push rdi
   291 000019A6 51                  <1>     push rcx
   292 000019A7 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   292 000019B0 00                  <1>
   293 000019B1 488D35(22C40300)    <1>     lea rsi, primReqHdr
   294 000019B8 488D3D(DED80300)    <1>     lea rdi, bkupReqHdr
   295 000019BF 7303                <1>     jnc .read
   296 000019C1 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   297                              <1> .read:
   298 000019C4 F3A4                <1>     rep movsb   ;Swap
   299 000019C6 59                  <1>     pop rcx
   300 000019C7 5F                  <1>     pop rdi
   301 000019C8 5E                  <1>     pop rsi
   302                              <1>     return
    18                              <2> %%_ret:
    19 000019C9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   303                              <1> outputOnStdout:
   304                              <1> ;Input: al = Char to output
   305                              <1> ;Output: CF=CY, all good
   306 000019CA 53                  <1>     push rbx
   307 000019CB BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   308 000019D0 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   309 000019D5 7217                <1>     jc .exit
   310 000019D7 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   311 000019DD 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   312 000019DF 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   313 000019E3 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   314 000019E9 7405                <1>     jz .notCharDevOrFast
   315 000019EB CD49                <1>     int 49h ;Fast output
   316                              <1> .exitOk:
   317 000019ED F8                  <1>     clc
   318                              <1> .exit:
   319 000019EE 5B                  <1>     pop rbx
   320                              <1>     return
    18                              <2> %%_ret:
    19 000019EF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   321                              <1> .notCharDevOrFast:
   322 000019F0 E809000000          <1>     call outputOnSFT
   323 000019F5 5B                  <1>     pop rbx
   324                              <1>     return
    18                              <2> %%_ret:
    19 000019F6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   325                              <1> 
   326                              <1> outputToHandle:
   327                              <1> ;Char to output must be in al
   328 000019F7 E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   329                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000019FC 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   330                              <1> outputOnSFT:
   331                              <1> ;Output char in al to SFT in rsi
   332                              <1> ;Waits until device is not busy to send char.
   333                              <1> ;Calls int 48h if device busy
   334 000019FE 50                  <1>     push rax
   335 000019FF B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   336 00001A01 E823FCFFFF          <1>     call mainCharIO
   337 00001A06 58                  <1>     pop rax
   338 00001A07 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   339 00001A09 B402                <1>     mov ah, 02h ;Output char in al
   340 00001A0B E819FCFFFF          <1>     call mainCharIO
   341 00001A10 F8                  <1>     clc
   342                              <1>     return
    18                              <2> %%_ret:
    19 00001A11 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   343                              <1> .signalLoop:
   344 00001A12 E802000000          <1>     call callInt48h
   345 00001A17 EBE5                <1>     jmp short outputOnSFT
   346                              <1> 
   347                              <1> callInt48h:
   348                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   349 00001A19 9C                  <1>     pushfq
   350 00001A1A F605(F6C30300)FF    <1>     test byte [int48Flag], -1
   351 00001A21 7417                <1>     jz .exit    ;If zero, not safe
   352 00001A23 F605(69C30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   353 00001A2A 750E                <1>     jnz .exit
   354                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   355 00001A2C FF35(F6C30300)      <1>     push qword [int48Flag] 
   356 00001A32 CD48                <1>     int 48h
   357 00001A34 8F05(F6C30300)      <1>     pop qword [int48Flag]    ;Return original value
   358                              <1> .exit:
   359 00001A3A 9D                  <1>     popfq
   360                              <1>     return
    18                              <2> %%_ret:
    19 00001A3B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   361                              <1> 
   362                              <1> 
   363                              <1> vConCtrlCheck:
   364                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   365                              <1> ; the processing. 
   366                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   367                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   368                              <1> ;
   369                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   370                              <1> ;^S will pause screen processing until another key is processed by vCon input
   371                              <1> ;^P will toggle the printer echo feature of the vConsole
   372                              <1> ;
   373                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   374                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   375                              <1> ;
   376                              <1> ;Output: 
   377                              <1> ;   CF=CY : Error
   378                              <1> ;   CF=NC : ...
   379                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   380                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   381 00001A3C E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   382 00001A41 53                  <1>     push rbx
   383 00001A42 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   384 00001A44 E8BA000000          <1>     call getCharDevSFT
   385 00001A49 5B                  <1>     pop rbx
   386                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001A4A 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   387 00001A4C B401                <1>     mov ah, 01  ;Non destructively read CON
   388 00001A4E E8D6FBFFFF          <1>     call mainCharIO
   389 00001A53 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   390                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   391 00001A55 3C13                <1>     cmp al, DC3 ;^S ?
   392 00001A57 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   393 00001A59 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   394 00001A5B E8C9FBFFFF          <1>     call mainCharIO
   395 00001A60 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   396                              <1> .checkPrintOrExit:
   397 00001A65 3C10                <1>     cmp al, DLE ;Do we have ^P?
   398 00001A67 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   399 00001A69 3C03                <1>     cmp al, ETX ;Do we have ^C?
   400 00001A6B 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   401                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   402                              <1>     return 
    18                              <2> %%_ret:
    19 00001A6D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   403                              <1> .printToggle:
   404 00001A6E F615(31C30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   405 00001A74 53                  <1>     push rbx
   406 00001A75 BB04000000          <1>     mov ebx, 4  ;PRN handle
   407 00001A7A E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   408 00001A7F 5B                  <1>     pop rbx
   409                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001A80 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   410 00001A82 57                  <1>     push rdi
   411 00001A83 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   412 00001A86 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   413 00001A8C 741D                <1>     jz .notNet
   414 00001A8E 50                  <1>     push rax
   415 00001A8F B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   416 00001A94 CD4F                <1>     int 4Fh
   417 00001A96 58                  <1>     pop rax
   418 00001A97 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   419                              <1>     ;If something went wrong, turn off echo
   420 00001A99 C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   421 00001AA0 50                  <1>     push rax
   422 00001AA1 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   423 00001AA6 CD4F                <1>     int 4Fh
   424 00001AA8 58                  <1>     pop rax
   425 00001AA9 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   426                              <1> .notNet:
   427                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   428                              <1> ; 0Dh or 0Eh
   429 00001AAB 803D(31C30300)00    <1>     cmp byte [printEcho], 00
   430 00001AB2 7507                <1>     jnz .echoOn
   431 00001AB4 E84EFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   432 00001AB9 EB05                <1>     jmp short .printExit
   433                              <1> .echoOn:
   434 00001ABB E83EFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   435                              <1> .printExit:
   436 00001AC0 5F                  <1>     pop rdi
   437                              <1>     return
    18                              <2> %%_ret:
    19 00001AC1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   438                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   439 00001AC2 E852FFFFFF          <1>     call callInt48h
   440                              <1> .waitNextChar:   ;Here get next char
   441 00001AC7 B401                <1>     mov ah, 01h ;ND read
   442 00001AC9 E85BFBFFFF          <1>     call mainCharIO
   443 00001ACE 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   444                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   445 00001AD0 53                  <1>     push rbx
   446 00001AD1 31DB                <1>     xor ebx, ebx
   447 00001AD3 E82B000000          <1>     call getCharDevSFT
   448 00001AD8 5B                  <1>     pop rbx
   449                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001AD9 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   450 00001ADB 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   451 00001ADD E847FBFFFF          <1>     call mainCharIO
   452 00001AE2 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   453 00001AE4 7514                <1>     jnz .checkBreak2
   454 00001AE6 803D(08D90300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   455 00001AED 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   456 00001AF3 C605(08D90300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   457                              <1> .checkBreak2:
   458 00001AFA 3C03                <1>     cmp al, ETX
   459                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001AFC 75C3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   460 00001AFE E9CF150000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   461                              <1> 
   462                              <1> 
   463                              <1> getCharDevSFT:
   464                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   465                              <1> ;Input: bx = zero extended handle number
   466                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   467                              <1> ;        CF=CY => al = Error code, abort operation
   468 00001B03 F605(F5C30300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   469 00001B0A 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   470                              <1> .getSFT:
   471 00001B0C 57                  <1>     push rdi
   472 00001B0D E8FC0C0000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   473 00001B12 4889FE              <1>     mov rsi, rdi
   474 00001B15 5F                  <1>     pop rdi
   475                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 00001B16 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   476                              <1> .swap:
   477                              <1> ;workingSFT is only set for CON calls
   478 00001B17 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   479 00001B1D 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   480 00001B1F 488B35(72C60300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   481 00001B26 F8                  <1>     clc
   482                              <1>     return
    18                              <2> %%_ret:
    19 00001B27 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   483                              <1> 
   484                              <1> ;------------------------
   485                              <1> ;   Utility functions   :
   486                              <1> ;------------------------
   487                              <1> printCaretASCII:
   488                              <1> ;Input: al = Char to print with a caret
   489                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   490                              <1> ;First check if the char should be careted, and then print normally if so
   491 00001B28 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   492 00001B2A 0F8364FCFFFF        <1>     jae charOut_B.in
   493 00001B30 3C09                <1>     cmp al, TAB
   494 00001B32 0F845CFCFFFF        <1>     je charOut_B.in
   495 00001B38 3C15                <1>     cmp al, NAK
   496 00001B3A 0F8454FCFFFF        <1>     je charOut_B.in
   497 00001B40 3C14                <1>     cmp al, DC4
   498 00001B42 0F844CFCFFFF        <1>     je charOut_B.in
   499 00001B48 50                  <1>     push rax
   500 00001B49 B05E                <1>     mov al, "^" ;Get caret in place
   501 00001B4B E844FCFFFF          <1>     call charOut_B.in
   502 00001B50 58                  <1>     pop rax
   503 00001B51 0440                <1>     add al, "@" ;Turn into an ASCII Char
   504 00001B53 E93CFCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   505                              <1> printCRLF:
   506 00001B58 B00D                <1>     mov al, CR
   507 00001B5A E835FCFFFF          <1>     call charOut_B.in
   508 00001B5F B00A                <1>     mov al, LF
   509 00001B61 E92EFCFFFF          <1>     jmp charOut_B.in
   510                              <1> 
   511                              <1> checkBreak:
   512                              <1> ;Reads bytes from CON if there are any bytes to read and 
   513                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   514 00001B66 803D(6AC30300)01    <1>     cmp byte [inDOS], 1
   515                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001B6D 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   516                              <1> ;Returns in al the keystroke that is available IF one is available
   517                              <1> ; or al=0 if no keystroke available
   518 00001B6F 53                  <1>     push rbx
   519 00001B70 56                  <1>     push rsi
   520 00001B71 488B35(4BC00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   521                              <1>     ;Place command code and a zero status word at the same time
   522 00001B78 C705(4EC40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   522 00001B80 0000                <1>
   523                              <1>     ;Place the packet size in the hdrlen field
   524 00001B82 C605(4CC40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   525 00001B89 488D1D(4CC40300)    <1>     lea rbx, critReqHdr
   526 00001B90 E8AA150000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   527                              <1>     ;Check if the busy bit is set (No keystroke available)
   528 00001B95 66F705(4FC40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   528 00001B9D 02                  <1>
   529 00001B9E 7405                <1>     jz .charFound
   530                              <1> .exit:
   531 00001BA0 30C0                <1>     xor al, al
   532 00001BA2 5E                  <1>     pop rsi
   533 00001BA3 5B                  <1>     pop rbx
   534                              <1>     return
    18                              <2> %%_ret:
    19 00001BA4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   535                              <1> .charFound:
   536                              <1> ;Keystroke available, proceed
   537 00001BA5 8A05(59C40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   538 00001BAB 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   539 00001BAD 75F1                <1>     jne .exit   ;If not equal exit
   540                              <1> ;Now we pull the char out of the buffer
   541 00001BAF C705(4EC40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   541 00001BB7 0000                <1>
   542 00001BB9 C605(4CC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   543                              <1>     ;Place pointers and number of chars
   544 00001BC0 C705(62C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   544 00001BC8 0000                <1>
   545                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   546 00001BCA 488D05(59C40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   547 00001BD1 488905(5AC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   548 00001BD8 E862150000          <1>     call goDriver   ;RSI and RBX as before
   549 00001BDD E9F0140000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   550                              <1> 
   551                              <1> vConSwapDriver:
   552                              <1> ;Sets up the vCon to use the alternative SFT pointer
   553 00001BE2 57                  <1>     push rdi
   554 00001BE3 C605(F5C30300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   555 00001BEA 488B3D(82C60300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   556 00001BF1 48893D(72C60300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   557 00001BF8 5F                  <1>     pop rdi
   558                              <1>     return
    18                              <2> %%_ret:
    19 00001BF9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   559                              <1> 
   560                              <1> vConRetDriver:
   561                              <1> ;Returns the original driver (sets flag down)
   562 00001BFA C605(F5C30300)00    <1>     mov byte [vConDrvSwp], 0
   563                              <1>     return
    18                              <2> %%_ret:
    19 00001C01 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   564                              <1> 
   565                              <1> ;--------------------------------------------------
   566                              <1> ;      Main Keyboard Buffered Input Function      :
   567                              <1> ;--------------------------------------------------
   568                              <1> buffCharInput_BE:  ;ah = 0Ah
   569                              <1> ;Buffer pointer in rdx
   570                              <1> ; byte [rdx + 0], buffer length
   571                              <1> ; byte [rdx + 1], number of chars in buffer
   572                              <1> ; byte [rdx + 2], buffer start
   573                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   574                              <1> ;Register use
   575                              <1> ; dh = Char offset in internal buffer
   576                              <1> ; dl = Buffer length
   577                              <1> ; bh = Char offset in user buffer
   578                              <1> ; bl = Number of chars already in the buffer
   579                              <1> ; rdi = Internal buffer
   580                              <1> ; rsi = User buffer
   581 00001C02 4889D6              <1>     mov rsi, rdx
   582 00001C05 66AD                <1>     lodsw   ;Get buffer metadata in ax
   583 00001C07 84C0                <1>     test al, al
   584                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001C09 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   585 00001C0B 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   586 00001C0E 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   587 00001C10 7606                <1>     jbe .avoidcheck
   588 00001C12 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   589 00001C16 7402                <1>     je .functionKeyOk
   590                              <1> .avoidcheck:
   591 00001C18 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   592                              <1> .functionKeyOk:
   593 00001C1A 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   594 00001C1D FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   595                              <1> .breakEP:
   596 00001C1F 8A05(2EC20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   597 00001C25 8805(2FC20300)      <1>     mov byte [vConCurCnt], al
   598 00001C2B 56                  <1>     push rsi    ;Push user buffer address
   599 00001C2C 488D3D(30C20300)    <1>     lea rdi, vConBuffer
   600 00001C33 C605(5EC60300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   601                              <1> .mainLoop:
   602 00001C3A E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   603 00001C3F 3C0A                <1>     cmp al, LF
   604 00001C41 7505                <1>     jne .checkControlChars
   605                              <1> .mainLoop2:
   606 00001C43 E8A8FCFFFF          <1>     call charIn_B
   607                              <1> .checkControlChars:
   608 00001C48 3C06                <1>     cmp al, ACK
   609 00001C4A 74F7                <1>     je .mainLoop2   ;Get another char
   610 00001C4C 3A050FE4FFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   611 00001C52 0F8426010000        <1>     je .escape
   612 00001C58 3C7F                <1>     cmp al, DEL
   613 00001C5A 0F8489000000        <1>     je .delete
   614 00001C60 3C08                <1>     cmp al, BSP
   615 00001C62 0F8481000000        <1>     je .delete
   616 00001C68 3C17                <1>     cmp al, ETB
   617                              <1>     ;Add space for patched jump instructions
   618 00001C6A 9090909090          <1>     db 5 dup (90h)  ;NOP
   619 00001C6F 3C15                <1>     cmp al, NAK
   620 00001C71 9090909090          <1>     db 5 dup (90h)
   621 00001C76 3C0D                <1>     cmp al, CR
   622 00001C78 744C                <1>     je .carriageReturn
   623 00001C7A 3C0A                <1>     cmp al, LF
   624 00001C7C 7461                <1>     je .lineFeed
   625 00001C7E 3A05DEE3FFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   626 00001C84 7429                <1>     je .break
   627                              <1> .checkIfCanInsert:
   628 00001C86 38D6                <1>     cmp dh, dl
   629 00001C88 731C                <1>     jae .bufOflw
   630 00001C8A AA                  <1>     stosb   ;Store the byte and increment rdi!
   631 00001C8B FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   632 00001C8D E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   633 00001C92 803D(5EC60300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   634 00001C99 75A8                <1>     jne .mainLoop2
   635                              <1>     ;IF not in insert mode, we fall here
   636                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   637                              <1>     ; or insert chars if needed.
   638 00001C9B 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   639 00001C9D 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   640 00001C9F 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   641 00001CA2 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   642 00001CA4 EB9D                <1>     jmp short .mainLoop2
   643                              <1> .bufOflw:
   644                              <1> ;Buffer overflow
   645 00001CA6 B007                <1>     mov al, BEL ;Sound the bell
   646 00001CA8 E8E7FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   647 00001CAD EB94                <1>     jmp short .mainLoop2
   648                              <1> .break:
   649                              <1> ;Break, Place a "\", and do a CRLF
   650 00001CAF B05C                <1>     mov al, "\"
   651 00001CB1 E8DEFAFFFF          <1>     call charOut_B.in
   652 00001CB6 5E                  <1>     pop rsi ;Realign stack
   653                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   654 00001CB7 E89CFEFFFF          <1>     call printCRLF
   655                              <1>     ;Align to next tabstop
   656 00001CBC E85AFBFFFF          <1>     call charOut_B.tab
   657 00001CC1 E959FFFFFF          <1>     jmp .breakEP
   658                              <1> .carriageReturn:
   659 00001CC6 AA                  <1>     stosb
   660 00001CC7 E8C8FAFFFF          <1>     call charOut_B.in
   661 00001CCC 5F                  <1>     pop rdi ;User buffer address was pushed 
   662 00001CCD 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   663 00001CD0 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   664                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   665 00001CD2 488D35(30C20300)    <1>     lea rsi, vConBuffer
   666 00001CD9 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   667 00001CDC F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   668                              <1>     return
    18                              <2> %%_ret:
    19 00001CDE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   669                              <1> .lineFeed:
   670 00001CDF E874FEFFFF          <1>     call printCRLF
   671 00001CE4 E95AFFFFFF          <1>     jmp .mainLoop2
   672                              <1> .delete:
   673 00001CE9 E805000000          <1>     call .removeChar
   674 00001CEE E950FFFFFF          <1>     jmp .mainLoop2
   675                              <1> .removeChar:
   676 00001CF3 84F6                <1>     test dh, dh ;Is char count 0?
   677 00001CF5 741C                <1>     jz .normalChar   ;If so, skip going back!
   678 00001CF7 E868000000          <1>     call .vConErase
   679 00001CFC 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   680 00001CFE 3C20                <1>     cmp al, SPC
   681 00001D00 7311                <1>     jae .normalChar
   682 00001D02 3C09                <1>     cmp al, TAB
   683 00001D04 7420                <1>     je .eraTab
   684 00001D06 3C15                <1>     cmp al, NAK
   685 00001D08 7409                <1>     je .normalChar
   686 00001D0A 3C14                <1>     cmp al, DC4
   687 00001D0C 7405                <1>     je .normalChar
   688 00001D0E E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   689                              <1> .normalChar:
   690 00001D13 803D(5EC60300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   691                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001D1A 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   692 00001D1C 84FF                <1>     test bh, bh ;Beginning of user buffer?
   693                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001D1E 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   694 00001D20 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   695 00001D23 FECF                <1>     dec bh
   696                              <1>     return
    18                              <2> %%_ret:
    19 00001D25 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   697                              <1> .eraTab:
   698                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   699                              <1> ; up to a tab stop worth of space chars printed
   700 00001D26 57                  <1>     push rdi
   701 00001D27 48FFCF              <1>     dec rdi
   702 00001D2A FD                  <1>     std ;Go backwards
   703 00001D2B 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   704 00001D2E B020                <1>     mov al, SPC
   705 00001D30 53                  <1>     push rbx
   706 00001D31 BB07000000          <1>     mov ebx, 7
   707 00001D36 67E30D              <1>     jecxz .onTabstop
   708                              <1> .scanString:
   709 00001D39 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   710 00001D3A 7608                <1>     jbe .notChar    ;No, skip handling
   711 00001D3C 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   712 00001D40 740A                <1>     je .tabChar
   713 00001D42 FECB                <1>     dec bl
   714                              <1> .notChar:
   715 00001D44 E2F3                <1>     loop .scanString
   716                              <1> .onTabstop:
   717 00001D46 2A1D(2FC20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   718                              <1> .tabChar:
   719 00001D4C 28F3                <1>     sub bl, dh  ;Same on tabstop
   720 00001D4E 00D9                <1>     add cl, bl
   721 00001D50 80E107              <1>     and cl, 7
   722 00001D53 5B                  <1>     pop rbx
   723 00001D54 5F                  <1>     pop rdi
   724 00001D55 FC                  <1>     cld
   725 00001D56 74BB                <1>     jz .normalChar
   726                              <1>     ;Now erase all the spaces placed on the vCon
   727                              <1> .vConDelTab:
   728 00001D58 E80C000000          <1>     call .vConEraseNoDec
   729 00001D5D E2F9                <1>     loop .vConDelTab
   730 00001D5F E9AFFFFFFF          <1>     jmp .normalChar
   731                              <1> .vConErase:
   732                              <1> ;Erase the char on the vCon
   733                              <1> ;Return through the output function
   734 00001D64 48FFCF              <1>     dec rdi ;Go back a space in the 
   735 00001D67 FECE                <1>     dec dh  ;Decrement char count in the buffer
   736                              <1> .vConEraseNoDec:
   737 00001D69 B008                <1>     mov al, BSP ;Move cursor back
   738 00001D6B E824FAFFFF          <1>     call charOut_B.in
   739 00001D70 B020                <1>     mov al, SPC ;Replace with a space
   740 00001D72 E81DFAFFFF          <1>     call charOut_B.in
   741 00001D77 B008                <1>     mov al, BSP ;Move cursor back again
   742 00001D79 E916FAFFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   743                              <1> .escape:
   744                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   745                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   746                              <1> ; including the function keys.
   747 00001D7E FF25D5E2FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   748                              <1> .f2:
   749 00001D84 E846000000          <1>     call .fCommon2
   750 00001D89 EB0C                <1>     jmp short .fCommon
   751                              <1> .f3:
   752 00001D8B 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   753 00001D8E 28F9                <1>     sub cl, bh  ;Sub our current position
   754 00001D90 EB05                <1>     jmp short .fCommon
   755                              <1> .f1:
   756 00001D92 B901000000          <1>     mov ecx, 1  ;Get one char
   757                              <1> .fCommon:
   758 00001D97 C605(5EC60300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   759 00001D9E 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   760 00001DA0 0F849DFEFFFF        <1>     je .mainLoop2
   761 00001DA6 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   762 00001DA8 0F8495FEFFFF        <1>     je .mainLoop2
   763                              <1>     ;Else, copy byte by byte, and retain char in al
   764 00001DAE AC                  <1>     lodsb
   765 00001DAF AA                  <1>     stosb
   766 00001DB0 E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   767 00001DB5 FEC7                <1>     inc bh
   768 00001DB7 FEC6                <1>     inc dh
   769 00001DB9 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   770 00001DBB E983FEFFFF          <1>     jmp .mainLoop2
   771                              <1> .f4:
   772 00001DC0 E80A000000          <1>     call .fCommon2
   773 00001DC5 4801CE              <1>     add rsi, rcx
   774 00001DC8 00CF                <1>     add bh, cl
   775 00001DCA E974FEFFFF          <1>     jmp .mainLoop2
   776                              <1> .fCommon2:
   777 00001DCF E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   778 00001DD4 3A0587E2FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   779 00001DDA 750B                <1>     jne .fnotEscape
   780                              <1>     ;Get another char if they typed escape and force it in the buffer
   781                              <1>     ; Do not return to caller
   782 00001DDC E80FFBFFFF          <1>     call charIn_B
   783                              <1> .fforceExit:
   784 00001DE1 59                  <1>     pop rcx ;Get original return address from stack
   785 00001DE2 E95CFEFFFF          <1>     jmp .mainLoop2
   786                              <1> .fnotEscape:
   787 00001DE7 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   788 00001DEA 28F9                <1>     sub cl, bh
   789 00001DEC 74F3                <1>     jz .fforceExit
   790 00001DEE FFC9                <1>     dec ecx
   791 00001DF0 74EF                <1>     jz .fforceExit
   792 00001DF2 57                  <1>     push rdi
   793 00001DF3 4889F7              <1>     mov rdi, rsi
   794 00001DF6 48FFC7              <1>     inc rdi
   795 00001DF9 F2AE                <1>     repne scasb ;Search for the char to start printing from
   796 00001DFB 5F                  <1>     pop rdi
   797 00001DFC 75E3                <1>     jne .fforceExit ;If char not found, return
   798 00001DFE F6D1                <1>     not cl
   799 00001E00 00D9                <1>     add cl, bl
   800 00001E02 28F9                <1>     sub cl, bh
   801                              <1>     return
    18                              <2> %%_ret:
    19 00001E04 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   802                              <1> .f5:
   803 00001E05 B040                <1>     mov al, "@"
   804 00001E07 E888F9FFFF          <1>     call charOut_B.in   ;Print the char
   805 00001E0C 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   806 00001E0D 57                  <1>     push rdi
   807 00001E0E E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   808 00001E13 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   809 00001E14 88F3                <1>     mov bl, dh
   810 00001E16 E99CFEFFFF          <1>     jmp .breakAlt
   811                              <1> .f6:
   812                              <1> ;If the user wants to insert a EOF, they can use F6
   813 00001E1B B01A                <1>     mov al, EOF
   814 00001E1D E964FEFFFF          <1>     jmp .checkIfCanInsert
   815                              <1> .f7:
   816                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   817 00001E22 8A0539E2FFFF        <1>     mov al, byte [extESC]
   818 00001E28 E959FEFFFF          <1>     jmp .checkIfCanInsert
   819                              <1> .toggleIns:
   820 00001E2D F615(5EC60300)      <1>     not byte [vConInsert]   ;Toggle
   821                              <1>     return
    18                              <2> %%_ret:
    19 00001E33 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   822                              <1> .eDel:
   823 00001E34 38DF                <1>     cmp bh, bl
   824 00001E36 0F8407FEFFFF        <1>     je .mainLoop2
   825 00001E3C FEC7                <1>     inc bh
   826 00001E3E 48FFC6              <1>     inc rsi
   827 00001E41 E9FDFDFFFF          <1>     jmp .mainLoop2
   828                              <1> 
   829                              <1> editKeys:
   830                              <1> ;Our Default Extended keys handler
   831 00001E46 E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   832 00001E4B B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   833 00001E50 57                  <1>     push rdi    ;Preserve rdi
   834 00001E51 488D3D0BE2FFFF      <1>     lea rdi, extKeyTbl
   835 00001E58 57                  <1>     push rdi
   836                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   837                              <1>     ; offset of function from extKeyTbl
   838                              <1> .lp:
   839 00001E59 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   840 00001E5A 7411                <1>     je .charFound
   841 00001E5C FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   842 00001E5E 0F84DFFDFFFF        <1>     jz buffCharInput_BE.mainLoop2
   843 00001E64 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   844 00001E6B EBEC                <1>     jmp short .lp
   845                              <1> .charFound:
   846 00001E6D 59                  <1>     pop rcx ;Pop back the effective address of the table
   847 00001E6E 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   848 00001E72 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   849 00001E75 5F                  <1>     pop rdi
   850 00001E76 FFE1                <1>     jmp rcx
    27                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    28                              <1> ;Major kernel date time functions and subroutines
    29                              <1> 
    30                              <1> getDate:           ;ah = 2Ah
    31 00001E78 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
    32 00001E7D E88C160000          <1>     call getUserRegs
    33 00001E82 668B15(EFC30300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
    34                              <1> ;    mov dh, byte [monthOfYear]
    35 00001E89 0FB60D(F1C30300)    <1>     movzx ecx, byte [years]
    36 00001E90 8A05(F4C30300)      <1>     mov al, byte [dayOfWeek]
    37 00001E96 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    38 00001E9A 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    39                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 00001E9E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    40                              <1> setDate:           ;ah = 2Bh
    41                              <1> ;	CX = year (1980-2099)
    42                              <1> ;   DH = month (1-12)
    43                              <1> ;	DL = day (1-31)
    44 00001E9F E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    45                              <1>     return
    18                              <2> %%_ret:
    19 00001EA4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> getTime:           ;ah = 2Ch
    47 00001EA5 E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    48 00001EAA E85F160000          <1>     call getUserRegs
    49 00001EAF 668B0D(7AC40300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.hours]
    50 00001EB6 668B15(7BC40300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    51 00001EBD 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    52 00001EC1 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    53                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 00001EC5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> setTime:           ;ah = 2Dh
    55                              <1> ;   CH = hour (0-23)
    56                              <1> ;	CL = minutes (0-59)
    57                              <1> ;	DH = seconds (0-59)
    58                              <1> ;	DL = hundredths (0-99)
    59 00001EC6 80FD17              <1>     cmp ch, 23
    60 00001EC9 7749                <1>     ja .exitBad
    61 00001ECB 80F93B              <1>     cmp cl, 59
    62 00001ECE 7744                <1>     ja .exitBad
    63 00001ED0 80FE3B              <1>     cmp dh, 59
    64 00001ED3 773F                <1>     ja .exitBad
    65 00001ED5 80FA63              <1>     cmp dl, 99
    66 00001ED8 773A                <1>     ja .exitBad
    67                              <1> ;Now we read date (updating internal count if necessary)
    68 00001EDA E817010000          <1>     call readDateTimeRecord
    69 00001EDF 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    70 00001EE6 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    71 00001EED 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    72 00001EF0 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    73 00001EF4 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    74 00001EF8 B906000000          <1>     mov ecx, 6
    75 00001EFD 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    76 00001F00 E8AB140000          <1>     call primReqWriteSetup   ;rbx now points to request header
    77 00001F05 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    78 00001F0C E82E120000          <1>     call goDriver
    79 00001F11 30C0                <1>     xor al, al
    80                              <1>     return
    18                              <2> %%_ret:
    19 00001F13 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    81                              <1> .exitBad:
    82 00001F14 B0FF                <1>     mov al, -1
    83                              <1>     return
    18                              <2> %%_ret:
    19 00001F16 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    84                              <1> ;------------------------
    85                              <1> ;   Utility functions   :
    86                              <1> ;------------------------
    87                              <1> writeDate:
    88 00001F17 6681F97800          <1>     cmp cx, 120
    89 00001F1C 0F83D1000000        <1>     jae .exitBad
    90 00001F22 80FE0C              <1>     cmp dh, 12
    91 00001F25 0F87C8000000        <1>     ja .exitBad
    92 00001F2B 80FA1F              <1>     cmp dl, 31
    93 00001F2E 0F87BF000000        <1>     ja .exitBad
    94 00001F34 668915(EFC30300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    95                              <1>     ;mov byte [monthOfYear], dh
    96 00001F3B 880D(F1C30300)      <1>     mov byte [years], cl    ;Save the years count
    97 00001F41 E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    98 00001F46 88CD                <1>     mov ch, cl ;Get years count in ch
    99 00001F48 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
   100 00001F4B 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
   101 00001F4E 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
   102 00001F51 BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
   103 00001F56 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
   104                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
   105 00001F58 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
   106 00001F5B 67E316              <1>     jecxz .addDay    ;Skip adding years
   107 00001F5E 056E010000          <1>     add eax, 366    ;First add for a leap year
   108                              <1> .addYears:
   109 00001F63 FFC9                <1>     dec ecx
   110 00001F65 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
   111 00001F68 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   112 00001F6D EBF4                <1>     jmp short .addYears
   113                              <1> .addLeap:
   114 00001F6F 056E010000          <1>     add eax, 366    ;Add the days in the leap year
   115                              <1> .addDay:
   116 00001F74 89C2                <1>     mov edx, eax    ;Save this number in edx
   117                              <1>     ;Now to add day offset
   118 00001F76 0FB60D(F0C30300)    <1>     movzx ecx, byte [monthOfYear]
   119 00001F7D 488D3500E1FFFF      <1>     lea rsi, monthsTbl
   120                              <1> .addDaysInMonth:
   121 00001F84 FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   122 00001F86 67E308              <1>     jecxz .addMonthOffset
   123 00001F89 AC                  <1>     lodsb   ;Get the number of days in the month in al
   124 00001F8A 0FB6C0              <1>     movzx eax, al
   125 00001F8D 01C2                <1>     add edx, eax
   126 00001F8F EBF3                <1>     jmp short .addDaysInMonth
   127                              <1> .addMonthOffset:
   128 00001F91 0FB60D(EFC30300)    <1>     movzx ecx, byte [dayOfMonth]
   129 00001F98 FFC9                <1>     dec ecx
   130 00001F9A 01CA                <1>     add edx, ecx    ;Add month offset
   131                              <1>     ;edx has the number of days since 01/01/1980
   132 00001F9C 668915(F2C30300)    <1>     mov word [daysOffset], dx   ;Store!
   133                              <1> ;Now read and then write CLOCKrecrd
   134 00001FA3 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   135 00001FAA B906000000          <1>     mov ecx, 6
   136 00001FAF 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   137 00001FB2 E804140000          <1>     call primReqReadSetup   ;rbx now points to request header
   138 00001FB7 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   139 00001FBE E87C110000          <1>     call goDriver
   140                              <1> ;Now we change daycount and write it back
   141 00001FC3 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   142 00001FCA 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   143 00001FD1 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   144 00001FD4 B906000000          <1>     mov ecx, 6
   145 00001FD9 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   146 00001FDC E8CF130000          <1>     call primReqWriteSetup   ;rbx now points to request header
   147 00001FE1 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   148 00001FE8 E852110000          <1>     call goDriver
   149 00001FED E8AE000000          <1>     call setDayofWeek
   150                              <1>     return
    18                              <2> %%_ret:
    19 00001FF2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   151                              <1> .exitBad:
   152 00001FF3 B0FF                <1>     mov al, -1
   153                              <1>     return
    18                              <2> %%_ret:
    19 00001FF5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   154                              <1> 
   155                              <1> readDateTimeRecord:
   156                              <1> ;Will read the clock using the primary request header
   157                              <1> ;Preserves all regs except eax and flags
   158 00001FF6 53                  <1>     push rbx
   159 00001FF7 51                  <1>     push rcx
   160 00001FF8 52                  <1>     push rdx
   161 00001FF9 56                  <1>     push rsi
   162 00001FFA 55                  <1>     push rbp
   163                              <1> 
   164 00001FFB 66C705(09D90300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   164 00002003 00                  <1>
   165 00002004 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   166 0000200B B906000000          <1>     mov ecx, 6
   167 00002010 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   168                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   169                              <1> ; rbx = Data storage buffer ptr
   170                              <1> ; ecx = Number of sectors to transfer
   171                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   172 00002013 E8A3130000          <1>     call primReqReadSetup   ;rbx now points to request header
   173 00002018 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   174 0000201F E81B110000          <1>     call goDriver
   175 00002024 0FB705(77C40300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   176                              <1> ;Here we have:  ax = Days since 1/1/1980
   177                              <1> ;Updates the internal date fields
   178                              <1> ;Internal time fields are in the clock record
   179                              <1> ;So now we check if the number of days since 1980 are the same.
   180                              <1> ;If so, we can skip updating.
   181 0000202B 663B05(F2C30300)    <1>     cmp ax, word [daysOffset]
   182 00002032 7466                <1>     je .exit    ;Return if equal
   183 00002034 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   184 00002039 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   185 0000203B 668905(F2C30300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   186                              <1>     ;Now want to update years, month and day fields
   187                              <1>     ;ax has the number of days since 01/01/1980
   188                              <1>     ;Get days in a 4 year period
   189 00002042 BBB5050000          <1>     mov ebx, 365*4 + 1
   190 00002047 31D2                <1>     xor edx, edx
   191 00002049 89D1                <1>     mov ecx, edx  ;Zero ecx
   192 0000204B F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   193                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   194                              <1>     ;edx has offset into current 4 year bunch
   195 0000204D BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   196 00002052 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   197 00002054 7210                <1>     jb .foundBunch
   198 00002056 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   199 00002058 FFC1                <1>     inc ecx
   200 0000205A FFCB                <1>     dec ebx ;Number of days in a normal year
   201                              <1> .findBunch:
   202 0000205C 39DA                <1>     cmp edx, ebx
   203 0000205E 7206                <1>     jb .foundBunch
   204 00002060 29DA                <1>     sub edx, ebx
   205 00002062 FFC1                <1>     inc ecx
   206 00002064 EBF6                <1>     jmp short .findBunch
   207                              <1> .foundBunch:
   208                              <1>     ;If ecx = 0, february has 29 days!
   209                              <1>     ;eax has number of four year bunches elapsed since 1980
   210 00002066 C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   211 00002069 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   212                              <1>     ;ecx now has the number of years since 1980
   213 0000206B E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   214                              <1> ;edx has number of days into the year we are in
   215                              <1> ;eax has number of days in Feb for this year
   216 00002070 488D350DE0FFFF      <1>     lea rsi, monthsTbl
   217 00002077 31C9                <1>     xor ecx, ecx    ;Use as month counter
   218                              <1> .monthSearch:
   219 00002079 FFC1                <1>     inc ecx ;Start from 1
   220 0000207B AC                  <1>     lodsb   ;Get value in al and inc rsi
   221 0000207C 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   222 0000207F 39C2                <1>     cmp edx, eax
   223 00002081 7204                <1>     jb .monthFound
   224 00002083 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   225 00002085 EBF2                <1>     jmp short .monthSearch
   226                              <1> .monthFound:
   227                              <1>     ;cl has the month (01h-0Ch)
   228                              <1>     ;dl has the day of the month - 1
   229 00002087 FFC2                <1>     inc edx
   230 00002089 880D(F0C30300)      <1>     mov byte [monthOfYear], cl
   231 0000208F 8815(EFC30300)      <1>     mov byte [dayOfMonth], dl
   232 00002095 E806000000          <1>     call setDayofWeek
   233                              <1> .exit:
   234 0000209A 5D                  <1>     pop rbp
   235 0000209B 5E                  <1>     pop rsi
   236 0000209C 5A                  <1>     pop rdx
   237 0000209D 59                  <1>     pop rcx
   238 0000209E 5B                  <1>     pop rbx
   239                              <1>     return  ;Return with ZF is date set, or same day
    18                              <2> %%_ret:
    19 0000209F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   240                              <1> 
   241                              <1> setDayofWeek:
   242                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   243 000020A0 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   244 000020A7 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   245                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   246 000020AC 31D2                <1>     xor edx, edx
   247 000020AE B907000000          <1>     mov ecx, 7   
   248 000020B3 F7F1                <1>     div ecx  ;Get remainder in dl
   249 000020B5 8815(F4C30300)      <1>     mov byte [dayOfWeek], dl
   250                              <1> ;Set ZF to indicate all ok
   251 000020BB 31C0                <1>     xor eax, eax
   252                              <1>     return
    18                              <2> %%_ret:
    19 000020BD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   253                              <1> 
   254                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   255                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   256                              <1> ;Input: cl = Year - 1980
   257                              <1> ;Output: al = Number of days in February
   258 000020BE 880D(F1C30300)      <1>     mov byte [years], cl    ;Save this figure
   259 000020C4 F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   260 000020C7 51                  <1>     push rcx
   261 000020C8 57                  <1>     push rdi
   262 000020C9 B81C000000          <1>     mov eax, 28  ;Usual days in february
   263 000020CE B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   264 000020D3 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   265 000020D6 488D3DA8DFFFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   266 000020DD AA                  <1>     stosb   ;Store the word in rdi
   267 000020DE 5F                  <1>     pop rdi
   268 000020DF 59                  <1>     pop rcx
   269                              <1>     return
    18                              <2> %%_ret:
    19 000020E0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   270                              <1> 
   271                              <1> getDirDTwords:
   272                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   273                              <1> ; High word of eax = Date
   274                              <1> ; Low word of eax = Time
   275                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   276                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   277                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   278                              <1> 
   279                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   280                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   281                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   282                              <1> ;Preserves all registers except eax
   283 000020E1 53                  <1>     push rbx
   284 000020E2 0FB61D(7CC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   285 000020E9 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   286 000020EB 89D8                <1>     mov eax, ebx
   287 000020ED 0FB61D(79C40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   288 000020F4 C1E305              <1>     shl ebx, 5
   289 000020F7 09D8                <1>     or eax, ebx
   290 000020F9 0FB61D(7AC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   291 00002100 C1E30B              <1>     shl ebx, 11
   292 00002103 09D8                <1>     or eax, ebx
   293 00002105 0FB61D(EFC30300)    <1>     movzx ebx, byte [dayOfMonth]
   294 0000210C C1E310              <1>     shl ebx, 16
   295 0000210F 09D8                <1>     or eax, ebx
   296 00002111 0FB61D(F0C30300)    <1>     movzx ebx, byte [monthOfYear]
   297 00002118 C1E315              <1>     shl ebx, 21
   298 0000211B 09D8                <1>     or eax, ebx
   299 0000211D 0FB61D(F1C30300)    <1>     movzx ebx, byte [years]
   300 00002124 C1E319              <1>     shl ebx, 25
   301 00002127 09D8                <1>     or eax, ebx
   302 00002129 5B                  <1>     pop rbx
   303                              <1>     return
    18                              <2> %%_ret:
    19 0000212A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    28                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    29                              <1> openFileFCB:       ;ah = 0Fh
    30                              <1> closeFileFCB:      ;ah = 10h
    31                              <1> findFirstFileFCB:  ;ah = 11h
    32                              <1> findNextFileFCB:   ;ah = 12h
    33                              <1> deleteFileFCB:     ;ah = 13h
    34                              <1> sequentialReadFCB: ;ah = 14h
    35                              <1> sequentialWriteFCB:;ah = 15h
    36                              <1> createFileFCB:     ;ah = 16h
    37                              <1> renameFileFCB:     ;ah = 17h
    38 0000212B C3                  <1>     ret
    39                              <1> setDTA:            ;ah = 1Ah
    40                              <1> ;Called with:
    41                              <1> ;   rdx = Pointer to the new default DTA
    42 0000212C 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
    43 00002133 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    44 00002137 488915(79C30300)    <1>     mov qword [currentDTA], rdx
    45 0000213E C3                  <1>     ret
    46                              <1> randomReadFCB:     ;ah = 21h
    47                              <1> randomWriteFCB:    ;ah = 22h
    48                              <1> getFileSizeFCB:    ;ah = 23h
    49                              <1> setRelRecordFCB:   ;ah = 24h
    50                              <1> randBlockReadFCB:  ;ah = 27h
    51                              <1> randBlockWriteFCB: ;ah = 28h
    52                              <1> parseFilenameFCB:  ;ah = 29h
    53 0000213F C3                  <1>     ret
    54                              <1> getDTA:            ;ah = 2Fh
    55 00002140 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
    56 00002147 488B1D(79C30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    57 0000214E 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    58 00002152 C3                  <1>     ret
    29                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    30                              <1> ;-----------------------------------:
    31                              <1> ;    File Handle Kernel routines    :
    32                              <1> ;-----------------------------------:
    33                              <1> 
    34                              <1> createFileHdl:     ;ah = 3Ch, handle function
    35                              <1>     return 
    18                              <2> %%_ret:
    19 00002153 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    36                              <1> openFileHdl:       ;ah = 3Dh, handle function
    37                              <1>     return 
    18                              <2> %%_ret:
    19 00002154 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    38                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    39                              <1> ;Input: bx = file handle to close
    40 00002155 E89A060000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
    41 0000215A 0F8286170000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
    42 00002160 E87E050000          <1>     call setCurrentSFT  ;Set this as the current SFT
    43                              <1>     ;Check count to see if we need to check share mode
    44 00002165 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared
    45 0000216A 7409                <1>     je .skipNetCheck
    46                              <1>     ;Now check sharing mode
    47 0000216C 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
    48 00002170 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
    49 00002172 3C70                <1>     cmp al, denyRWShare | denyWriteShare | denyReadShare | denyNoneShare
    50 00002174 9C                  <1>     pushfq  ;Save the result of this for after closing the file
    51                              <1> .skipNetCheck:
    52 00002175 E80A020000          <1>     call closeMain  ;Call close main!
    53 0000217A 0F8266170000        <1>     jc extErrExit   ;If an error, exit through error exit
    54 00002180 9D                  <1>     popfq
    55 00002181 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
    56 00002183 E84E060000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
    57 00002188 C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
    58                              <1> .exitOk:
    59 0000218B 31C0                <1>     xor eax, eax    ;Return value
    60 0000218D E946170000          <1>     jmp extGoodExit
    61                              <1> 
    62                              <1> readFileHdl:       ;ah = 3Fh, handle function
    63 00002192 488D356C020000      <1>     lea rsi, readBytes
    64                              <1> .common:
    65 00002199 E856060000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
    66 0000219E 0F8242170000        <1>     jc extErrExit   ;Error code in al and exit
    67 000021A4 E83A050000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
    68 000021A9 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
    69 000021AB FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
    70 000021B1 488915(79C30300)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
    71 000021B8 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
    72 000021BA 8F05(79C30300)      <1>     pop qword [currentDTA]
    73 000021C0 0F8220170000        <1>     jc extErrExit   ;Error code in al and exit
    74 000021C6 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
    75 000021C8 E902170000          <1>     jmp extGoodExit2    ;and exit!
    76                              <1> 
    77                              <1> writeFileHdl:      ;ah = 40h, handle function
    78 000021CD 488D35DB040000      <1>     lea rsi, writeBytes
    79 000021D4 E9C0FFFFFF          <1>     jmp readFileHdl.common
    80                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    81                              <1>     return 
    18                              <2> %%_ret:
    19 000021D9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    82                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
    83                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
    84 000021DA E815060000          <1>     call getSFTPtr
    85 000021DF 0F8201170000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
    86 000021E5 3C03                <1>     cmp al, 3
    87 000021E7 720A                <1>     jb .validFunction
    88 000021E9 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
    89 000021EE E9F3160000          <1>     jmp extErrExit
    90                              <1> .validFunction:
    91 000021F3 3C01                <1>     cmp al, 1
    92 000021F5 7713                <1>     ja .seekend
    93 000021F7 7203                <1>     jb .seekset
    94                              <1> ;Here we are at seekcur, seek from current (signed)
    95 000021F9 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
    96                              <1> .seekset:
    97                              <1> ;Seek from the start (unsigned)
    98 000021FC 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
    99 000021FF E80A130000          <1>     call getUserRegs    ;Get user regs in rsi
   100 00002204 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   101                              <1> .seekExit:
   102 00002207 30C0                <1>     xor al, al  ;Return OK!
   103                              <1>     return 
    18                              <2> %%_ret:
    19 00002209 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   104                              <1> .seekend:
   105                              <1> ;Here we are at seekend, seek from end (signed)
   106 0000220A 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   107 00002210 7505                <1>     jnz .netCheck
   108                              <1> .proceedDisk:
   109 00002212 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   110 00002215 EBE5                <1>     jmp short .seekset
   111                              <1> .netCheck:
   112 00002217 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   113 0000221D 75F3                <1>     jnz .proceedDisk
   114 0000221F 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   115                              <1>     ;Check it's share mode
   116 00002223 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   117 00002228 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   118 0000222D 7407                <1>     je .netSeek
   119 0000222F 3D30000000          <1>     cmp eax, denyReadShare
   120 00002234 75DC                <1>     jne .proceedDisk
   121                              <1> .netSeek:
   122 00002236 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   123 0000223B CD4F                <1>     int 4fh
   124 0000223D 73C8                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   125 0000223F E9A2160000          <1>     jmp extErrExit
   126                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   127                              <1> ioctrl:            ;ah = 44h, handle function
   128                              <1> duplicateHandle:   ;ah = 45h, handle function
   129                              <1> ;Input: bx = Handle to duplicate
   130                              <1> ;Output: If ok then ax = New handle
   131 00002244 E80C060000          <1>     call findFreeJFT    ;First find a free space in the JFT
   132 00002249 0F8297160000        <1>     jc extErrExit   ;Exit if no space
   133                              <1>     ;rsi points to the free space
   134                              <1> .duplicateCommon:
   135 0000224F E882050000          <1>     call getJFTPtr  ;Get a pointer to the JFT entry in rdi for bx
   136 00002254 4887F7              <1>     xchg rsi, rdi
   137 00002257 AC                  <1>     lodsb   ;Move over the SFT ndx from the old to the new position
   138 00002258 AA                  <1>     stosb
   139 00002259 48FFCE              <1>     dec rsi
   140 0000225C 48FFCF              <1>     dec rdi
   141                              <1>     ;rdi now points to new position
   142                              <1>     ;rsi points to old position
   143                              <1>     ;al has SFT ndx
   144 0000225F 4889FE              <1>     mov rsi, rdi    ;Move rsi to point to the new position jft position
   145 00002262 0FB6D8              <1>     movzx ebx, al   ;Move SFTndx into ebx
   146 00002265 E837050000          <1>     call getSFTPtrfromSFTNdx    ;Get the pointer to the SFT in rdi
   147 0000226A 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   148                              <1>     ;Now we must return in ax the entry in the JFT 
   149 0000226D 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
   150 00002274 488D7F2A            <1>     lea rdi, qword [rdi + psp.jobFileTbl]   ;Point to head of table
   151 00002278 4829FE              <1>     sub rsi, rdi    ;Get the difference of the two in si
   152 0000227B 89F0                <1>     mov eax, esi    ;Get the difference as the return code
   153 0000227D E956160000          <1>     jmp extGoodExit
   154                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   155                              <1> ;Input: bx = Handle to duplicate
   156                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   157                              <1>     ;First we close cx
   158 00002282 87D9                <1>     xchg ebx, ecx ;Swap cx and bx
   159 00002284 53                  <1>     push rbx
   160 00002285 51                  <1>     push rcx
   161 00002286 E8CAFEFFFF          <1>     call closeFileHdl   ;Close handle 
   162 0000228B 59                  <1>     pop rcx
   163 0000228C 5B                  <1>     pop rbx
   164                              <1>     retc    ;The error code is set by errExtExit and CF is set on callerFrame
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 0000228D 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 0000228F C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   165                              <1>     ;Else, close was ok, lets duplicate now
   166 00002290 E841050000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   167 00002295 0F824B160000        <1>     jc extErrExit   ;Return bad with error code in al
   168 0000229B 87D9                <1>     xchg ebx, ecx   ;Now get source to duplicate in ebx
   169 0000229D 4889FE              <1>     mov rsi, rdi    ;Put the free space ptr in rsi
   170 000022A0 EBAD                <1>     jmp short duplicateHandle.duplicateCommon
   171                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   172                              <1> ;Input: cx = Search Attributes, cl only used
   173                              <1> ;       rdx = Ptr to path to file to look for
   174                              <1> ;       al = Document as needing to be 0 for now
   175 000022A2 880D(57C60300)      <1>     mov byte [searchAttr], cl
   176 000022A8 4889D6              <1>     mov rsi, rdx    ;Get src path in rsi
   177 000022AB E8C6130000          <1>     call checkPathspecOK    ;This preserves rsi
   178 000022B0 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   179 000022B2 740A                <1>     jz .pathspecOk  ;If ZF=ZE AND CF=CY then we have path separators, still ok
   180                              <1> .badPath:
   181 000022B4 B803000000          <1>     mov eax, errPnf
   182 000022B9 E928160000          <1>     jmp extErrExit
   183                              <1> .pathspecOk:
   184 000022BE FF35(79C30300)      <1>     push qword [currentDTA]
   185 000022C4 488D3D(91C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   186 000022CB 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
   187 000022D2 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   188 000022D9 E838EFFFFF          <1>     call getFilePath
   189 000022DE 8F05(79C30300)      <1>     pop qword [currentDTA]
   190 000022E4 0F82FC150000        <1>     jc extErrExit
   191 000022EA 488D35(91C50300)    <1>     lea rsi, dosffblock ;Copy the block to the user's DTA
   192 000022F1 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
   193 000022F8 B92B000000          <1>     mov ecx, ffBlock_size
   194 000022FD F3A4                <1>     rep movsb   ;Copy the whole block. 
   195                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   196 000022FF 31C0                <1>     xor eax, eax    ;Return value
   197 00002301 E9D2150000          <1>     jmp extGoodExit ;Exit well
   198                              <1> 
   199                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   200                              <1> renameFile:        ;ah = 56h
   201                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   202                              <1> createNewFile:     ;ah = 5Bh
   203                              <1> 
   204                              <1> lockUnlockFile:    ;ah = 5Ch
   205 00002306 E9DB150000          <1>     jmp extErrExit
   206                              <1> setHandleCount:    ;ah = 67h
   207 0000230B E9D6150000          <1>     jmp extErrExit
   208                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   209                              <1>     ;Input: bx = File to flush
   210 00002310 E8DF040000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   211 00002315 0F82CB150000        <1>     jc extErrExit
   212 0000231B E8C3030000          <1>     call setCurrentSFT
   213                              <1>     ;Now we check if the device is a char, disk or net file
   214 00002320 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   215 00002324 66A90080            <1>     test ax, devRedirDev
   216 00002328 7512                <1>     jnz .notNet
   217                              <1>     ;Commit file net redir call and exit
   218 0000232A B807110000          <1>     mov eax, 1107h
   219 0000232F CD4F                <1>     int 4fh
   220 00002331 0F82AF150000        <1>     jc extErrExit
   221 00002337 E93D000000          <1>     jmp .exitOk
   222                              <1> .notNet:
   223 0000233C 66A98000            <1>     test ax, devCharDev
   224 00002340 7418                <1>     jz .blokDev
   225                              <1>     ;Here we simply update date/time fields in the SFT structure before exiting
   226 00002342 E8AFFCFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   227 00002347 0F8299150000        <1>     jc extErrExit  ;If we fail to get time/date, fail the request
   228                              <1>     ;Build date and time words
   229 0000234D E88FFDFFFF          <1>     call getDirDTwords  ;Get date time words packed in eax
   230 00002352 894713              <1>     mov dword [rdi + sft.wTime], eax    ;Store them at the same time
   231 00002355 E91F000000          <1>     jmp .exitOk
   232                              <1> .blokDev:
   233 0000235A 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   234 0000235E E838110000          <1>     call setWorkingDPB
   235 00002363 E83BF2FFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   236 00002368 0F8278150000        <1>     jc extErrExit
   237 0000236E E89FE7FFFF          <1>     call flushFile  ;Now the file gets flushed
   238 00002373 0F826D150000        <1>     jc extErrExit
   239                              <1> .exitOk:
   240 00002379 30C0                <1>     xor al, al
   241 0000237B E88E110000          <1>     call getUserRegs
   242 00002380 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   243                              <1>     return
    18                              <2> %%_ret:
    19 00002383 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   244                              <1> ;-----------------------------------:
   245                              <1> ;       Main File IO Routines       :
   246                              <1> ;-----------------------------------:
   247                              <1> closeMain: ;Int 4Fh AX=1201h
   248                              <1> ;Gets the directory entry for a file
   249                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
   250                              <1> ;If CF=CY on return: Error, return error with al = error code
   251                              <1> ;Preserve all regs except eax and rdi
   252                              <1> ; If CF=NC on return: eax = Unknown
   253                              <1> ;                     rdi = current SFT ptr
   254 00002384 488B3D(82C60300)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
   255 0000238B 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
   256 00002391 7508                <1>     jnz .physical
   257                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
   258 00002393 B806110000          <1>     mov eax, 1106h  ;Make request
   259 00002398 CD4F                <1>     int 4fh ;Beep!
   260                              <1>     return  ;Returns with CF set or clear as appropriate
    18                              <2> %%_ret:
    19 0000239A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   261                              <1> .physical:  
   262                              <1> ; We make a request to the dev dir to close the device
   263                              <1> ; If the device is disk, we then update the directory entry for the disk file
   264 0000239B E807150000          <1>     call dosCrit1Enter  ;Enter critical section 1
   265 000023A0 53                  <1>     push rbx
   266 000023A1 56                  <1>     push rsi
   267 000023A2 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
   268 000023A6 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   269 000023AC 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
   270                              <1>     ;rsi has DPB pointer here
   271                              <1>     ;rdi has the SFT pointer
   272 000023AE 55                  <1>     push rbp
   273 000023AF 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
   274 000023B2 E8E4100000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
   275 000023B7 E8E7F1FFFF          <1>     call updateDirectoryEntryForFile
   276 000023BC 5D                  <1>     pop rbp
   277                              <1>     ;If CF is set, Fail was requested and ax has an error code
   278 000023BD 722F                <1>     jc .exit
   279 000023BF E84EE7FFFF          <1>     call flushFile
   280 000023C4 7228                <1>     jc .exit    ;If something went wrong, exit
   281 000023C6 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
   282 000023CA 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
   283                              <1> .charClose:
   284                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
   285                              <1>     ;We now decrement handle count in SFT structure
   286 000023CE E823000000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
   287 000023D3 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
   288 000023D6 7503                <1>     jnz .driverClose
   289 000023D8 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
   290                              <1> .driverClose:
   291 000023DB 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
   292                              <1>     ;and if the device is a disk device, cl will have the unit number
   293                              <1>     ;We first check if the driver supports oper/close requests
   294 000023DC 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
   295 000023E2 750A                <1>     jnz .exit  ;If not, immediately jump to exit, all is well
   296                              <1>     ;rsi has device driver ptr for device, make request
   297 000023E4 E881100000          <1>     call primReqCloseSetup  ;rbx gets header ptr, rsi has driver ptr
   298 000023E9 E8510D0000          <1>     call goDriver   ;Make request
   299                              <1>     ;Don't check the status here, as we are simply informing the driver 
   300                              <1>     ; of an operation. Nothing should be able to go wrong. 
   301                              <1>     ;Functionally, an ignore if anything does go wrong.
   302                              <1> .exit:
   303 000023EE 5E                  <1>     pop rsi
   304 000023EF 5B                  <1>     pop rbx
   305 000023F0 E8BC140000          <1>     call dosCrit1Exit
   306                              <1>     return
    18                              <2> %%_ret:
    19 000023F5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   307                              <1> 
   308                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
   309                              <1> ;Input: rdi = SFT pointer
   310                              <1> ;Output: ax = Original wNumHandles count
   311 000023F6 9C                  <1>     pushfq
   312 000023F7 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
   313 000023FA FFC8                <1>     dec eax     ;Decrement count
   314 000023FC 7502                <1>     jnz .exit                           ;If the count is not zero, exit
   315 000023FE FFC8                <1>     dec eax    ;If it is zero, now we make it -1
   316                              <1> .exit:
   317 00002400 9D                  <1>     popfq
   318 00002401 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
   319                              <1>     return
    18                              <2> %%_ret:
    19 00002404 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   320                              <1> 
   321                              <1> 
   322                              <1> readBytes:
   323                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
   324                              <1> ;Input: ecx = Number of bytes to read
   325                              <1> ;Output: ecx = Number of bytes read
   326                              <1> ;Number of bytes read 
   327                              <1> ;If CF=CY, return with error code in ax
   328 00002405 E8E1020000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   329 0000240A 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   330 0000240E 240F                <1>     and al, 0Fh ;Eliminate except access mode
   331 00002410 3C01                <1>     cmp al, WriteAccess
   332 00002412 7509                <1>     jne .readable
   333 00002414 B805000000          <1>     mov eax, errAccDen
   334 00002419 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
   335 0000241B F9                  <1>     stc
   336                              <1>     return
    18                              <2> %%_ret:
    19 0000241C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   337                              <1> .readable:
   338 0000241D E80A030000          <1>     call setupVarsForTransfer
   339 00002422 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
   340 00002425 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   341 0000242B 740A                <1>     jz .notRedir
   342 0000242D B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
   343 00002432 CD4F                <1>     int 4fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
   344                              <1>     return 
    18                              <2> %%_ret:
    19 00002434 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   345                              <1> .exitOk:
   346 00002435 F8                  <1>     clc
   347                              <1>     return 
    18                              <2> %%_ret:
    19 00002436 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   348                              <1> .notRedir:
   349 00002437 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   350 0000243D 7510                <1>     jnz readCharDev
   351 0000243F E863140000          <1>     call dosCrit1Enter
   352 00002444 E898010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
   353 00002449 E863140000          <1>     call dosCrit1Exit
   354                              <1>     return 
    18                              <2> %%_ret:
    19 0000244E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   355                              <1> readCharDev:
   356                              <1> ;rdi points to sft for char dev to read
   357                              <1> ;ecx has the number of bytes to transfer
   358                              <1> ;Vars have been set up and DTA has the transfer address
   359                              <1> ;Returns in ecx, the actual bytes transferred
   360                              <1> ;If CF=CY, return with error code in ax
   361 0000244F C605(6CC30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
   362 00002456 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
   363 0000245A 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
   364 00002461 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
   365 00002464 0F8462020000        <1>     jz rwExitOk    ;If it does, jump to exit as if EOF has been hit
   366 0000246A F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
   367 0000246D 7407                <1>     jz .notNul
   368                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
   369                              <1>     ;NUL never transfers bytes 
   370 0000246F 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
   371 00002471 E956020000          <1>     jmp rwExitOk    ;Goto exit
   372                              <1> .notNul:
   373 00002476 F6C320              <1>     test bl, charDevBinary
   374 00002479 757F                <1>     jnz .binary
   375                              <1>     ;Here if the device is in ASCII mode
   376 0000247B F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
   377 0000247E 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
   378                              <1> .consoleInput:
   379                              <1>     ;Console input here
   380 00002484 E859F7FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
   381                              <1>     ;Get current offset into buffer (if one exists)
   382 00002489 488B35(23C00300)    <1>     mov rsi, qword [vConHdlOff]
   383 00002490 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
   384 00002493 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
   385 00002495 803D(B0C20300)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
   386 0000249C 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
   387                              <1>     ;Else, reset the buffer
   388 0000249E 66C705(B0C20300)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
   388 000024A6 FF                  <1>
   389                              <1> .oldBuf:
   390                              <1> ;Preserve the dta and number of chars to tfr
   391 000024A7 51                  <1>     push rcx
   392 000024A8 57                  <1>     push rdi
   393 000024A9 488D15(B0C20300)    <1>     lea rdx, vConInBuf
   394 000024B0 E84DF7FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
   395 000024B5 5F                  <1>     pop rdi
   396 000024B6 59                  <1>     pop rcx
   397 000024B7 488D35(B2C20300)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
   398 000024BE 803E1A              <1>     cmp byte [rsi], EOF
   399 000024C1 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
   400 000024C3 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
   401 000024C6 B00A                <1>     mov al, LF
   402 000024C8 E8C7F2FFFF          <1>     call charOut_B.in   ;Echo CRLF
   403 000024CD 31F6                <1>     xor esi, esi    ;Set ZF = ZE
   404 000024CF EB18                <1>     jmp short .exit
   405                              <1> .tfrBuf:
   406 000024D1 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
   407 000024D2 AA                  <1>     stosb
   408 000024D3 3C0D                <1>     cmp al, CR 
   409 000024D5 7503                <1>     jne .noCRLF
   410 000024D7 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
   411                              <1> .noCRLF:
   412 000024DA 3C0A                <1>     cmp al, LF  ;Compare if al is LF
   413 000024DC E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
   414 000024DE 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
   415                              <1>     ;This only applies if the reason for exiting the loop is al=LF
   416 000024E0 E8AFF2FFFF          <1>     call charOut_B.in   ;Echo CRLF
   417 000024E5 31F6                <1>     xor esi, esi
   418 000024E7 0C01                <1>     or al, 1    ;Set ZF = NZ
   419                              <1> .exit:
   420 000024E9 E80CF7FFFF          <1>     call vConRetDriver
   421 000024EE 488935(23C00300)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
   422 000024F5 E9D2010000          <1>     jmp rwExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
   423                              <1> 
   424                              <1> .binary:
   425                              <1>     ;Setup registers for transfer
   426 000024FA 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
   427 000024FD 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
   428                              <1>     ;ecx has the number of bytes to transfer directly
   429 00002500 E8B60E0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
   430 00002505 488B35(62C60300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
   431 0000250C E82E0C0000          <1>     call goDriver   ;Make the request
   432 00002511 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
   433 00002514 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   434 0000251B F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   435 00002521 7422                <1>     jz .binNoError
   436                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
   437 00002523 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
   438 00002525 E8E80A0000          <1>     call charDevErr   ;ah = has part of the error 
   439                              <1>     ;al now has the response
   440 0000252A 3C00                <1>     cmp al, critIgnore
   441 0000252C 7417                <1>     je .binNoError ;Simply proceed as normal
   442 0000252E 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
   443 00002531 3C03                <1>     cmp al, critFail
   444 00002533 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
   445                              <1>     ;Fallthrough here for fail!
   446                              <1> .failExit:
   447 00002535 488B3D(82C60300)    <1>     mov rdi, qword [currentSFT]
   448 0000253C 31C9                <1>     xor ecx, ecx
   449 0000253E B805000000          <1>     mov eax, errAccDen
   450 00002543 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
   451                              <1>     return
    18                              <2> %%_ret:
    19 00002544 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   452                              <1> .binNoError:
   453                              <1>     ;Get number of bytes transferred into 
   454 00002545 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
   455 0000254B F7D8                <1>     neg eax ;make it into -eax
   456 0000254D 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
   457                              <1>     ;ecx now has bytes left to transfer
   458 00002551 50                  <1>     push rax    ;Save value on stack
   459 00002552 31C0                <1>     xor eax, eax ;Set ZF
   460 00002554 FFC0                <1>     inc eax ;Clear ZF
   461 00002556 58                  <1>     pop rax ;Get back the original value
   462 00002557 E970010000          <1>     jmp rwExitOk    ;GoExit with ecx=Bytes left to read
   463                              <1> .generalASCII:
   464                              <1>     ;ecx has bytes to transfer here
   465                              <1>     ;Setup registers for transfer
   466 0000255C 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
   467 0000255F 51                  <1>     push rcx
   468 00002560 B901000000          <1>     mov ecx, 1  ;Get one char
   469 00002565 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
   470 00002568 E84E0E0000          <1>     call primReqReadSetup   ;Setup request
   471 0000256D 59                  <1>     pop rcx
   472                              <1>     ;rbx now has request header ptr
   473 0000256E 488B35(62C60300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
   474                              <1> .asciiReadChar:
   475 00002575 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
   476 00002578 E8E9F5FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
   477 0000257D E8BD0B0000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
   478 00002582 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   479 00002589 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   480 0000258F 741E                <1>     jz .asciiNoError
   481 00002591 E87C0A0000          <1>     call charDevErr    ;Call Int 44h
   482                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
   483 00002596 C705(38C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
   483 0000259E 0000                <1>
   484 000025A0 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   485 000025A3 3C03                <1>     cmp al, critFail
   486 000025A5 748E                <1>     je .failExit
   487 000025A7 3C01                <1>     cmp al, critRetry
   488 000025A9 74CA                <1>     je .asciiReadChar
   489                              <1>     ;Ignore here, pretend NULL CHAR was read
   490 000025AB 30C0                <1>     xor al, al
   491 000025AD EB15                <1>     jmp short .asciiIgnoreEP
   492                              <1> .asciiNoError:
   493                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
   494                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
   495                              <1> ;Preserve RBX, RSI
   496                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
   497 000025AF 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   498 000025B2 813D(38C40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
   498 000025BA 0000                <1>
   499 000025BC 0F850A010000        <1>     jne rwExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
   500 000025C2 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
   501                              <1> .asciiIgnoreEP:
   502 000025C4 48FF05(30C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
   503 000025CB 48FFC7              <1>     inc rdi ;Also advance register pointer
   504 000025CE 3C1A                <1>     cmp al, EOF ;Was this char EOF?
   505 000025D0 0F84F6000000        <1>     je rwExitOk
   506 000025D6 3C0D                <1>     cmp al, CR  ;Was this char CR?
   507 000025D8 E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
   508                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
   509 000025DA FEC0                <1>     inc al  ;make ZF=NZ
   510 000025DC E9EB000000          <1>     jmp rwExitOk    ;Called with ecx = Number of bytes LEFT to transfer
   511                              <1> 
   512                              <1> readDiskFile:
   513                              <1> ;rdi = Current SFT
   514                              <1> ;rbp = WorkingDPB
   515 000025E1 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
   516 000025E8 C605(5BC60300)00    <1>     mov byte [rwFlag], 0    ;Read operation
   517                              <1>     ;We have the following vars setup:
   518                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
   519                              <1>     ;currClustF
   520                              <1>     ;Now convert currSectC to disk sector by using currClustF
   521                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
   522 000025EF 8B15(9EC60300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
   523 000025F5 8B460F              <1>     mov eax, dword [rsi + sft.dStartClust]  ;Get starting cluster
   524 000025F8 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
   525 000025FA 8B0D(C5C60300)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
   526 00002600 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
   527 00002602 741E                <1>     jz .skipWalk
   528                              <1> .goToCurrentCluster:
   529 00002604 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
   530 00002609 0F84BD000000        <1>     je rwExitOk ;Exit with no bytes transferred
   531 0000260F 89C3                <1>     mov ebx, eax    ;Save eax as current cluster
   532 00002611 E827E8FFFF          <1>     call walkFAT    ;Get in eax the next cluster
   533 00002616 0F8284000000        <1>     jc .badExit   ;This can only return Fail
   534 0000261C FFCA                <1>     dec edx ;Decrement counter
   535 0000261E 75E4                <1>     jnz .goToCurrentCluster
   536                              <1> ;Now we fall out with ebx = Current cluster
   537 00002620 89D8                <1>     mov eax, ebx    ;Get the current cluster in eax
   538                              <1> .skipWalk:
   539 00002622 E8A6E5FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
   540                              <1>     ;Now we add the offset to this
   541 00002627 0FB61D(AAC60300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
   542 0000262E 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
   543 00002631 488905(ABC60300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
   544                              <1> ;Main
   545                              <1> .mainRead:
   546 00002638 E8B1E4FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
   547 0000263D 7261                <1>     jc .badExit
   548 0000263F 4889DE              <1>     mov rsi, rbx    ;Move the buffer pointer into rsi
   549 00002642 0FB71D(B3C60300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
   550 00002649 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
   551                              <1>     ;Now we read the smallest of the following from the sector buffer:
   552                              <1>     ; 1) Sector size, 2) Bytes left in File, 3) Bytes left to read from Request
   553 0000264C 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
   554 0000264F 2B4F1B              <1>     sub ecx, dword [rdi + sft.dCurntOff] ;Get bytes left to read in file in ecx
   555 00002652 8B1D(C9C60300)      <1>     mov ebx, dword [tfrCntr]
   556 00002658 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
   557 0000265A 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
   558 0000265D 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
   559 00002661 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
   560 00002663 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
   561 00002666 57                  <1>     push rdi
   562 00002667 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
   563 0000266E E8C5010000          <1>     call readWriteBytesBinary
   564 00002673 48893D(79C30300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
   565 0000267A 5F                  <1>     pop rdi
   566 0000267B 8B0D(C9C60300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
   567 00002681 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
   568 00002683 7447                <1>     jz rwExitOk ;Exit if so!
   569 00002685 E85DE7FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
   570 0000268A 7214                <1>     jc .badExit
   571 0000268C 743E                <1>     jz rwExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
   572                              <1>     ;Else repeat
   573                              <1>     ;currSectD has been updated, we now set currByteS = 0
   574 0000268E 66C705(B3C60300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
   574 00002696 00                  <1>
   575 00002697 488B05(ABC60300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
   576 0000269E EB98                <1>     jmp short .mainRead
   577                              <1> .badExit:
   578                              <1>     ;When a disk error occurs within the bit where vars have changed,
   579                              <1>     ; we need to update the SFT before returning
   580 000026A0 8B0D(C9C60300)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
   581 000026A6 30C0                <1>     xor al, al  ;Set ZF flag
   582 000026A8 E81F000000          <1>     call rwExitOk   ;We call this
   583 000026AD F9                  <1>     stc ;All calls which end up here return Fail!
   584 000026AE C3                  <1>     ret
   585                              <1> writeBytes:
   586                              <1> ;Writes the bytes from the user buffer
   587 000026AF E837000000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   588 000026B4 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   589 000026B8 240F                <1>     and al, 0Fh ;Eliminate except access mode
   590 000026BA 3C00                <1>     cmp al, ReadAccess
   591 000026BC 7509                <1>     jne .writeable
   592 000026BE B805000000          <1>     mov eax, errAccDen
   593 000026C3 31C9                <1>     xor ecx, ecx
   594 000026C5 F9                  <1>     stc
   595 000026C6 C3                  <1>     ret
   596                              <1> .writeable:
   597 000026C7 E860000000          <1>     call setupVarsForTransfer
   598                              <1> 
   599                              <1> rwExitOk:
   600                              <1> ;Input: ecx = Number of bytes left to transfer!
   601                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
   602 000026CC 890D(C9C60300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
   603 000026D2 7509                <1>     jnz .skipbitClear
   604 000026D4 E812000000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
   605                              <1>     ;The disk transfer must've flushed by now. 
   606 000026D9 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokFileToFlush|charDevNoEOF) ;OR
   607                              <1>     ;Next char dev read should give EOF.
   608                              <1> .skipbitClear:  ;Or skip that entirely
   609 000026DD E811000000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
   610                              <1>     return 
    18                              <2> %%_ret:
    19 000026E2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   611                              <1> ;-----------------------------------:
   612                              <1> ;        File Handle routines       :
   613                              <1> ;-----------------------------------:
   614                              <1> 
   615                              <1> setCurrentSFT:
   616                              <1> ;Set the pointer in rdi as current SFT 
   617 000026E3 48893D(82C60300)    <1>     mov qword [currentSFT], rdi
   618                              <1>     return 
    18                              <2> %%_ret:
    19 000026EA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   619                              <1> getCurrentSFT:
   620                              <1> ;Get the current SFT pointer in rdi
   621 000026EB 488B3D(82C60300)    <1>     mov rdi, qword [currentSFT]
   622                              <1>     return 
    18                              <2> %%_ret:
    19 000026F2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   623                              <1> updateCurrentSFT:
   624                              <1> ;Updates the Current SFT fields before returning from a file handle operation
   625                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
   626 000026F3 57                  <1>     push rdi
   627 000026F4 488B3D(82C60300)    <1>     mov rdi, qword [currentSFT]
   628 000026FB 8B0D(C5C60300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
   629 00002701 2B0D(C9C60300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
   630                              <1>     ;ecx has bytes transferred
   631 00002707 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
   632 0000270D 751A                <1>     jnz .exit
   633 0000270F 50                  <1>     push rax
   634 00002710 8B05(A2C60300)      <1>     mov eax, dword [currClustD]
   635 00002716 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
   636 00002719 8B05(9EC60300)      <1>     mov eax, dword [currClustF]
   637 0000271F 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
   638 00002722 58                  <1>     pop rax
   639 00002723 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
   640 00002726 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
   641                              <1> .exit:
   642 00002729 5F                  <1>     pop rdi
   643 0000272A F8                  <1>     clc
   644                              <1>     return 
    18                              <2> %%_ret:
    19 0000272B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   645                              <1> setupVarsForTransfer:
   646                              <1> ;Computes the actual bytes to be transferred and 
   647                              <1> ; sets up internal variables for the transfer. 
   648                              <1> ;Works for both reading and writing
   649                              <1> ;Input: ecx = User desired Bytes to transfer
   650                              <1> ;       rdi = SFT pointer for the file
   651                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   652                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
   653                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
   654                              <1> ;
   655                              <1> ;Note: Does not account for a FULL disk. When writing,
   656                              <1> ; if the disk will get full as a result of the write,
   657                              <1> ; stop at the last byte before the transfer. If the 
   658                              <1> ; file pointer is past the last free byte, write 0
   659 0000272C 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
   660 00002730 488935(62C60300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
   661 00002737 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
   662 0000273A 8905(B5C60300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
   663 00002740 890D(C5C60300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
   664 00002746 890D(C9C60300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
   665 0000274C 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev ;If not disk...
   666 00002752 7402                <1>     jz setupVarsForDiskTransfer
   667 00002754 F8                  <1>     clc
   668                              <1>     return ;Else just exit here
    18                              <2> %%_ret:
    19 00002755 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   669                              <1> setupVarsForDiskTransfer:
   670                              <1> ;Extension of the above, but for Disk files only
   671                              <1> ;Input: ecx = User desired Bytes to transfer
   672                              <1> ;       rdi = SFT pointer for the file
   673                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   674 00002756 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
   675 0000275A 48892D(62C60300)    <1>     mov qword [workingDPB], rbp
   676 00002761 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
   677 00002764 881D(61C60300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
   678 0000276A 8B05(B5C60300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
   679 00002770 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   680 00002774 31D2                <1>     xor edx, edx    ;Zero rdx
   681 00002776 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
   682                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
   683                              <1>     ;edx has the offset into that sector
   684 00002778 8905(A6C60300)      <1>     mov dword [currSectF], eax
   685 0000277E 668915(B3C60300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
   686 00002785 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
   687 00002787 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
   688 0000278A 8805(AAC60300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
   689 00002790 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
   690 00002792 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   691 00002795 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
   692 00002797 8915(9EC60300)      <1>     mov dword [currClustF], edx ;Save in var
   693 0000279D 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in eax
   694 0000279F F8                  <1>     clc
   695                              <1>     return 
    18                              <2> %%_ret:
    19 000027A0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   696                              <1> 
   697                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216
   698                              <1> ;Return a pointer to the SFT entry in rdi
   699                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
   700                              <1> ;Output: rdi = SFT pointer
   701 000027A1 488B3D(3BC00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
   702                              <1> .walk:
   703 000027A8 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
   704 000027AC 7212                <1>     jb .thisTable
   705 000027AE 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
   706 000027B2 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
   707 000027B5 4881FFFFFFFFFF      <1>     cmp rdi, -1
   708 000027BC 75EA                <1>     jne .walk
   709 000027BE F9                  <1>     stc
   710                              <1>     return
    18                              <2> %%_ret:
    19 000027BF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   711                              <1> .thisTable:
   712 000027C0 50                  <1>     push rax
   713 000027C1 52                  <1>     push rdx
   714 000027C2 B84F000000          <1>     mov eax, sft_size
   715 000027C7 F7E3                <1>     mul ebx
   716 000027C9 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
   717 000027CC 5A                  <1>     pop rdx
   718 000027CD 58                  <1>     pop rax
   719 000027CE 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
   720                              <1>     return
    18                              <2> %%_ret:
    19 000027D5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   721                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
   722                              <1> ;Return a zero extended value in rdi for the SFT entry
   723                              <1> ;Input: bx = JFT handle (we zero extend)
   724                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
   725                              <1> ;        CF=CY => al = Error code, Fail
   726 000027D6 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
   727 000027D9 663B1D(97C00300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
   728 000027E0 7204                <1>     jb .ok
   729 000027E2 B006                <1>     mov al, errBadHdl
   730 000027E4 F9                  <1>     stc
   731                              <1>     return
    18                              <2> %%_ret:
    19 000027E5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   732                              <1> .ok:
   733 000027E6 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
   734 000027ED 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
   735 000027F2 F8                  <1>     clc
   736                              <1>     return
    18                              <2> %%_ret:
    19 000027F3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   737                              <1> 
   738                              <1> getSFTPtr:
   739                              <1> ;This gets the SFT pointer and checks it was opened by this machine
   740                              <1> ;Input: bx = JFT handle
   741                              <1> ;Output: CF=NC: rdi = SFT pointer
   742                              <1> ;        CF=CY: Error, ax=Error code
   743 000027F4 E815000000          <1>     call derefSFTPtr
   744                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000027F9 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   745 000027FB 50                  <1>     push rax
   746 000027FC 0FB705(A5C30300)    <1>     movzx eax, word [machineNum]
   747 00002803 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
   748 00002807 58                  <1>     pop rax
   749                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002808 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   750 0000280A B006                <1>     mov al, errBadHdl   ;Error code
   751 0000280C F9                  <1>     stc         ;Reset CF
   752                              <1>     return
    18                              <2> %%_ret:
    19 0000280D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   753                              <1> 
   754                              <1> derefSFTPtr:
   755                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
   756                              <1> ;Input: bx = File handle (gets zero extended)
   757                              <1> ;Output: CF=NC: rdi = SFT pointer
   758                              <1> ;        CF=CY: Error, ax=Error code
   759 0000280E E8C3FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
   760 00002813 7205                <1>     jb .fail
   761 00002815 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
   762 00002818 7504                <1>     jne .ok
   763                              <1> .fail:
   764 0000281A B006                <1>     mov al, errBadHdl
   765 0000281C F9                  <1>     stc
   766                              <1>     return
    18                              <2> %%_ret:
    19 0000281D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   767                              <1> .ok:
   768 0000281E 53                  <1>     push rbx    ;Preserve the JFT handle
   769 0000281F 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
   770 00002822 E87AFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
   771 00002827 5B                  <1>     pop rbx 
   772                              <1>     return
    18                              <2> %%_ret:
    19 00002828 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   773                              <1> 
   774                              <1> getBytesTransferred:
   775 00002829 8B0D(C9C60300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
   776 0000282F F7D9                <1>     neg ecx ;Multiply by -1
   777 00002831 030D(C5C60300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
   778                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 00002837 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   779                              <1> 
   780                              <1> readWriteBytesBinary:
   781                              <1> ;Input: ecx = number of bytes to read in Binary mode
   782                              <1> ;       rdi = Points to where in caller buffer to place bytes
   783                              <1> ;       rsi = Points to where in DOS buffer to place pointer
   784                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
   785                              <1> ;Preserve rcx so we know how many bytes transferred
   786                              <1> ;Update the currByteA variable
   787                              <1> ;Returns (rsi and rdi) + (ecx on entry)
   788 00002838 51                  <1>     push rcx
   789 00002839 F605(5BC60300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
   790 00002840 7403                <1>     jz .noSwap
   791 00002842 4887FE              <1>     xchg rdi, rsi
   792                              <1> .noSwap:
   793 00002845 F3A4                <1>     rep movsb
   794 00002847 59                  <1>     pop rcx
   795 00002848 010D(B5C60300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
   796 0000284E 290D(C9C60300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
   797                              <1>     return
    18                              <2> %%_ret:
    19 00002854 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   798                              <1> 
   799                              <1> findFreeJFT:
   800                              <1> ;Input: [currentPSP] = Task whose PSP we will look through
   801                              <1> ;If there are no free spaces, then we return with al = errNhl and CF=CY
   802                              <1> ;Else, a pointer to the free space in rsi and al = -1
   803 00002855 51                  <1>     push rcx
   804 00002856 488B35(81C30300)    <1>     mov rsi, qword [currentPSP]
   805 0000285D 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]
   806 00002864 488D762A            <1>     lea rsi, qword [rsi + psp.jobFileTbl]   ;Point to start of table
   807                              <1> .search:
   808 00002868 AC                  <1>     lodsb
   809 00002869 3CFF                <1>     cmp al, -1
   810 0000286B 7407                <1>     je .exit
   811 0000286D FFC9                <1>     dec ecx
   812 0000286F 75F7                <1>     jnz .search
   813 00002871 B004                <1>     mov al, errNhl  ;No free handles buddy, sorry
   814 00002873 F9                  <1>     stc ;Set error bit
   815                              <1> .exit:
   816 00002874 59                  <1>     pop rcx
   817                              <1>     return
    18                              <2> %%_ret:
    19 00002875 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    30                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    31                              <1> ;Memory related functions
    32                              <1> 
    33                              <1> ;-----------------------------------:
    34                              <1> ;  Memory related Kernel routines   :
    35                              <1> ;-----------------------------------:
    36                              <1> allocateMemory:    ;ah = 48h
    37                              <1> ;Input: ebx = Number of paragraphs requested
    38                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    39                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    40 00002876 31D2                <1>     xor edx, edx
    41                              <1>     ;Clear the pointers
    42 00002878 488915(A7C30300)    <1>     mov qword [firstMCB], rdx
    43 0000287F 488915(AFC30300)    <1>     mov qword [bestMCB], rdx
    44 00002886 488915(B7C30300)    <1>     mov qword [lastMCB], rdx
    45 0000288D 31ED                <1>     xor ebp, ebp    
    46 0000288F FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    47 00002891 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    48                              <1> .walk:
    49 00002898 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    50 0000289B 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    51 0000289E 7409                <1>     je .walk1
    52 000028A0 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    53 000028A3 0F85D9040000        <1>     jne badMCBChain
    54                              <1> .walk1:
    55                              <1>     ;Here if valid but not the last block
    56 000028A9 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    57 000028B1 0F8582000000        <1>     jne .walk2
    58                              <1>     ;Here we consolidate adjacent free blocks if there are any
    59                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    60                              <1>     ;End consolidation at first non free block or at last block in chain
    61 000028B7 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    62 000028BA 744A                <1>     je .det0    ;Determine if this block is useful
    63 000028BC 31C9                <1>     xor ecx, ecx
    64 000028BE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    65 000028C1 4881C610000000      <1>     add rsi, mcb.program
    66                              <1> .cons0:
    67 000028C8 48C1E104            <1>     shl rcx, 4
    68 000028CC 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    69 000028CF 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    70 000028D2 7409                <1>     je .cons1
    71 000028D4 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    72 000028D7 0F85A5040000        <1>     jne badMCBChain 
    73                              <1> .cons1:
    74 000028DD 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    75 000028E5 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    76                              <1>     ;Here rsi, points to a free block, add it to rdi
    77 000028E7 31C9                <1>     xor ecx, ecx
    78 000028E9 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    79 000028EC 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    80 000028F2 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    81 000028F5 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    82 000028F7 31D2                <1>     xor edx, edx
    83 000028F9 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    84 000028FC 48895608            <1>     mov qword [rsi + 8], rdx
    85 00002900 3C5A                <1>     cmp al, mcbMarkEnd
    86 00002902 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    87                              <1>     ;Here we deal with if the block was the last one 
    88 00002904 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    89                              <1> .det0:  ;Now determine if pointer in rdi is useful
    90 00002906 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    91                              <1> ;ebx must be less than the arena size for the arena to be useful!
    92 00002909 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    93 0000290C 39D9                <1>     cmp ecx, ebx
    94 0000290E 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    95 00002910 488935(B7C30300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    96 00002917 488B05(A7C30300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    97 0000291E 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    98 00002921 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    99 00002923 488935(A7C30300)    <1>     mov qword [firstMCB], rsi
   100                              <1> .det1:
   101                              <1>     ;Now test for best fit.
   102 0000292A 29D9                <1>     sub ecx, ebx    ;Block - ebx
   103 0000292C 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   104 0000292E 7209                <1>     jb .walk2
   105 00002930 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   106 00002932 488935(AFC30300)    <1>     mov qword [bestMCB], rsi
   107                              <1> .walk2:
   108 00002939 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   109 0000293C 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   110 0000293E 31C9                <1>     xor ecx, ecx
   111 00002940 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   112 00002943 48C1E104            <1>     shl rcx, 4
   113 00002947 4881C610000000      <1>     add rsi, mcb.program
   114 0000294E 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   115 00002951 E942FFFFFF          <1>     jmp .walk
   116                              <1> .allocate:
   117                              <1>     ;Allocation fails IF the pointer is the null pointer
   118 00002956 803D(35C30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   119 0000295D 7261                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   120                              <1>     ;Fall thru if last fit
   121 0000295F 488B35(B7C30300)    <1>     mov rsi, qword [lastMCB]
   122 00002966 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   123 00002969 0F84CE000000        <1>     jz .allocFail
   124 0000296F 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   125 00002971 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   126 00002974 31C9                <1>     xor ecx, ecx
   127 00002976 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   128 00002979 29D9                <1>     sub ecx, ebx
   129 0000297B 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   130 00002981 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   131 00002984 48C1E104            <1>     shl rcx, 4
   132 00002988 4881C610000000      <1>     add rsi, mcb.program
   133 0000298F 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   134 00002992 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   135 00002994 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   136 00002997 488B15(81C30300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   137 0000299E 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   138 000029A2 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   139 000029A9 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   140 000029B0 4889F0              <1>     mov rax, rsi
   141 000029B3 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   142 000029B6 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   143 000029BA E896030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   144                              <1>     return
    18                              <2> %%_ret:
    19 000029BF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   145                              <1> .bfCommon:
   146 000029C0 488B35(A7C30300)    <1>     mov rsi, qword [firstMCB]
   147 000029C7 803D(35C30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   148 000029CE 480F4435(AFC30300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   149 000029D6 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   150 000029D9 7462                <1>     jz .allocFail
   151 000029DB 8A06                <1>     mov al, byte [rsi + mcb.marker]
   152 000029DD C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   153 000029E0 31C9                <1>     xor ecx, ecx
   154 000029E2 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   155 000029E5 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   156 000029E7 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   157 000029ED 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   158 000029F0 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   159 000029F7 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   160 000029FB 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   161 000029FE 4881C610000000      <1>     add rsi, mcb.program
   162 00002A05 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   163 00002A0B 48C1E304            <1>     shl rbx, 4
   164 00002A0F 4801DE              <1>     add rsi, rbx
   165 00002A12 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   166 00002A14 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   167 00002A1C 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   168 00002A1F 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   169 00002A26 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   170 00002A2D 4889F8              <1>     mov rax, rdi
   171 00002A30 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   172 00002A33 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   173 00002A37 E819030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   174                              <1>     return
    18                              <2> %%_ret:
    19 00002A3C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   175                              <1> .allocFail:
   176                              <1>     ;Walk the MCB chain to determine the biggest block size
   177 00002A3D 488B35(2BC00300)    <1>     mov rsi, [mcbChainPtr]
   178 00002A44 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   179                              <1> .af0:
   180 00002A46 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   181 00002A49 7409                <1>     je .af1
   182 00002A4B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   183 00002A4E 0F852E030000        <1>     jne badMCBChain
   184                              <1> .af1:
   185 00002A54 31C9                <1>     xor ecx, ecx
   186 00002A56 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   187 00002A59 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   188 00002A61 7505                <1>     jne .af2
   189 00002A63 39D9                <1>     cmp ecx, ebx
   190 00002A65 0F47D9              <1>     cmova ebx, ecx
   191                              <1> .af2:
   192 00002A68 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   193 00002A6B 7410                <1>     je .afExit
   194 00002A6D 48C1E104            <1>     shl rcx, 4
   195 00002A71 4881C610000000      <1>     add rsi, mcb.program
   196 00002A78 4801CE              <1>     add rsi, rcx
   197 00002A7B EBD7                <1>     jmp short .af1
   198                              <1> .afExit:
   199 00002A7D B808000000          <1>     mov eax, errNoMem
   200 00002A82 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   201 00002A89 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   202 00002A8C E9F3020000          <1>     jmp mcbErrHdlr
   203                              <1> freeMemory:        ;ah = 49h
   204                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   205                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   206                              <1> ;Always skip the first block as this is the anchor for DOS
   207 00002A91 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   208 00002A98 31C9                <1>     xor ecx, ecx
   209 00002A9A 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   210 00002AA1 4889F7              <1>     mov rdi, rsi
   211 00002AA4 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   212 00002AA7 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   213 00002AAB 4881C610000000      <1>     add rsi, mcb.program
   214 00002AB2 4801CE              <1>     add rsi, rcx    ;Go to next block
   215                              <1> .mainLoop:
   216 00002AB5 31C9                <1>     xor ecx, ecx
   217 00002AB7 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   218 00002ABA 7409                <1>     je .valid
   219 00002ABC 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   220 00002ABF 0F85BD020000        <1>     jne badMCBChain
   221                              <1> .valid:
   222 00002AC5 4939F0              <1>     cmp r8, rsi
   223 00002AC8 741C                <1>     je .blockFound
   224                              <1>     ;Not valid, check if last block in chain
   225 00002ACA 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   226 00002ACD 0F849C000000        <1>     je .blockError
   227 00002AD3 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   228 00002AD6 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   229 00002ADA 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   230 00002AE1 4801CE              <1>     add rsi, rcx    ;Go to next block
   231 00002AE4 EBCF                <1>     jmp short .mainLoop
   232                              <1> .blockFound:
   233                              <1>     ;If hole, error.
   234                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   235 00002AE6 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   236 00002AEE 747F                <1>     je .blockError
   237 00002AF0 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   238 00002AF8 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   239 00002B00 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   240                              <1>     ;It is, let it absorb this space
   241 00002B02 31C9                <1>     xor ecx, ecx
   242 00002B04 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   243 00002B07 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   244 00002B0D 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   245                              <1>     ;Replace block marker
   246 00002B10 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   247 00002B12 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   248 00002B14 31C9                <1>     xor ecx, ecx
   249 00002B16 48890E              <1>     mov qword [rsi], rcx
   250 00002B19 48894E08            <1>     mov qword [rsi + 8], rcx
   251 00002B1D 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   252                              <1> .blockFoundCheckFollowing:
   253                              <1>     ;First check if we are the last block in chain
   254 00002B20 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   255 00002B23 7439                <1>     je .blockFoundExit  ;If yes, exit!
   256 00002B25 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   257 00002B28 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   258 00002B2B 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   259 00002B2F 4881C110000000      <1>     add rcx, mcb.program
   260 00002B36 4801CE              <1>     add rsi, rcx    ;Go to next block
   261 00002B39 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   262 00002B41 751B                <1>     jne .blockFoundExit ;If not free, exit
   263                              <1>     ;If free, absorb into block pointed to by rdi
   264 00002B43 31C9                <1>     xor ecx, ecx
   265 00002B45 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   266 00002B48 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   267 00002B4E 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   268                              <1>     ;Replace block marker
   269 00002B51 8A06                <1>     mov al, byte [rsi + mcb.marker]
   270 00002B53 8807                <1>     mov byte [rdi + mcb.marker], al
   271 00002B55 31C9                <1>     xor ecx, ecx
   272 00002B57 48890E              <1>     mov qword [rsi], rcx
   273 00002B5A 48894E08            <1>     mov qword [rsi + 8], rcx
   274                              <1> .blockFoundExit:
   275 00002B5E E8F2010000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   276 00002B63 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   277 00002B6A 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   278                              <1>     return
    18                              <2> %%_ret:
    19 00002B6E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   279                              <1> .blockError:
   280 00002B6F C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   281 00002B76 B809000000          <1>     mov eax, errMemAddr
   282 00002B7B E8660D0000          <1>     call extErrExit ;Error thru the unified error handler
   283 00002B80 E8D0010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   284                              <1>     return
    18                              <2> %%_ret:
    19 00002B85 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   285                              <1> reallocMemory:     ;ah = 4Ah
   286                              <1> ;Input: r8 = address of the block to be realloc'ed
   287                              <1> ;       ebx = How many paras this block should contain after realloc. 
   288                              <1> ;               If ebx = 0, jump to free memory
   289 00002B86 85DB                <1>     test ebx, ebx
   290 00002B88 0F8403FFFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   291 00002B8E 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   292 00002B95 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   293 00002B98 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   294 00002B9B 7409                <1>     je .ctn
   295 00002B9D 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   296 00002BA0 0F855F010000        <1>     jne .badAddrGiven
   297                              <1> .ctn:
   298                              <1>     ;Provided block is valid and not a hole
   299                              <1>     ;Check if Growth or Shrink
   300 00002BA6 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   301 00002BAE 74BF                <1>     je freeMemory.blockError
   302 00002BB0 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   303 00002BB3 31C9                <1>     xor ecx, ecx
   304 00002BB5 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   305 00002BB8 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   306 00002BBA 0F8786000000        <1>     ja .growth
   307 00002BC0 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   308                              <1> ;We can always shrink
   309 00002BC6 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   310 00002BC8 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   311 00002BCE 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   312 00002BD1 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   313 00002BD7 48C1E304            <1>     shl rbx, 4
   314 00002BDB 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   315 00002BE2 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   316 00002BE5 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   317 00002BE7 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   318 00002BEA 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   319 00002BEC 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   320 00002BF4 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   321 00002BF7 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   322 00002BF9 0F84DB000000        <1>     je .exit
   323                              <1> ;Else, now see if the block following is also free and absorb it
   324 00002BFF 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   325 00002C02 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   326 00002C06 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   327 00002C0D 4801CE              <1>     add rsi, rcx    ;Goto next arena
   328 00002C10 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   329 00002C13 7409                <1>     je .shrinkAbsorb
   330 00002C15 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   331 00002C18 0F8564010000        <1>     jne badMCBChain
   332                              <1> .shrinkAbsorb:
   333 00002C1E 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   334 00002C26 0F85AE000000        <1>     jne .exit
   335                              <1>     ;It is free, absorb it
   336 00002C2C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   337 00002C2F 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   338 00002C35 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   339 00002C38 31C9                <1>     xor ecx, ecx
   340                              <1>     ;Clear absorbed MCB
   341 00002C3A 48890E              <1>     mov qword [rsi], rcx
   342 00002C3D 48894E08            <1>     mov qword [rsi + 8], rcx
   343 00002C41 E994000000          <1>     jmp .exit
   344                              <1> .growth:
   345                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   346 00002C46 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   347 00002C49 0F84A0000000        <1>     je .notEnuffMem
   348                              <1> ;Now check the following space is free. If not, not enuff mem err
   349 00002C4F 31C9                <1>     xor ecx, ecx
   350 00002C51 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   351 00002C54 48C1E104            <1>     shl rcx, 4
   352 00002C58 4889F7              <1>     mov rdi, rsi    
   353 00002C5B 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   354 00002C62 4801CE              <1>     add rsi, rcx
   355 00002C65 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   356 00002C68 7409                <1>     je .growthOK
   357 00002C6A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   358 00002C6D 0F850F010000        <1>     jne badMCBChain
   359                              <1> .growthOK:
   360                              <1>     ;rdi points to block we are growing
   361 00002C73 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   362 00002C7B 7572                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   363                              <1>     ;rsi must own all memory up to the next owned arena
   364 00002C7D 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   365 00002C7F 31C9                <1>     xor ecx, ecx
   366 00002C81 31D2                <1>     xor edx, edx
   367 00002C83 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   368 00002C86 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   369 00002C8C 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   370 00002C8F 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   371 00002C91 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   372 00002C93 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   373 00002C96 7759                <1>     ja .notEnuffMem1
   374 00002C98 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   375 00002C9A 81FA01000000        <1>     cmp edx, 1
   376 00002CA0 7449                <1>     je .notEnuffMem2
   377 00002CA2 31C9                <1>     xor ecx, ecx
   378 00002CA4 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   379 00002CA7 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   380 00002CAB 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   381 00002CAE 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   382 00002CB1 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   383 00002CB8 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   384 00002CBC 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   385 00002CBF 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   386 00002CC3 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   387                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   388                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   389 00002CC5 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   390 00002CC7 7411                <1>     jz .exit
   391 00002CC9 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   392 00002CCF 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   393 00002CD2 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   394                              <1> .exit:
   395 00002CDA E876000000          <1>     call verifyIntegrityOfMCBChain
   396 00002CDF 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   397 00002CE6 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   398                              <1>     return
    18                              <2> %%_ret:
    19 00002CEA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   399                              <1> .notEnuffMem2:
   400 00002CEB FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   401 00002CED EB02                <1>     jmp short .notEnuffMem1
   402                              <1> .notEnuffMem:
   403 00002CEF 31DB                <1>     xor ebx, ebx    ;No space to grow
   404                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   405 00002CF1 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   406 00002CF6 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   407 00002CFD 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   408 00002D00 E97F000000          <1>     jmp mcbErrHdlr
   409                              <1> .badAddrGiven:
   410 00002D05 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   411 00002D0A E975000000          <1>     jmp mcbErrHdlr
   412                              <1> getsetMallocStrat: ;ah = 58h
   413 00002D0F 84C0                <1>     test al, al
   414 00002D11 741F                <1>     jz .get
   415 00002D13 3C02                <1>     cmp al, 2
   416 00002D15 7337                <1>     jae .bad
   417                              <1> ;Set here
   418 00002D17 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   419 00002D1E 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   420 00002D22 8805(35C30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   421 00002D28 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   422 00002D2C E824000000          <1>     call verifyIntegrityOfMCBChain
   423                              <1>     return
    18                              <2> %%_ret:
    19 00002D31 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   424                              <1> .get:
   425 00002D32 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   426 00002D39 31C0                <1>     xor eax, eax
   427 00002D3B 8A05(35C30300)      <1>     mov al, byte [allocStrat]
   428 00002D41 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   429 00002D44 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   430 00002D48 E808000000          <1>     call verifyIntegrityOfMCBChain
   431                              <1>     return
    18                              <2> %%_ret:
    19 00002D4D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   432                              <1> .bad:
   433 00002D4E B801000000          <1>     mov eax, errInvFnc
   434 00002D53 EB2F                <1>     jmp short mcbErrHdlr
   435                              <1> ;-----------------------------------:
   436                              <1> ;      Memory related routines      :
   437                              <1> ;-----------------------------------:
   438                              <1> verifyIntegrityOfMCBChain:
   439 00002D55 50                  <1>     push rax
   440 00002D56 53                  <1>     push rbx
   441 00002D57 488B1D(2BC00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   442                              <1> .ok:
   443 00002D5E 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   444 00002D61 7408                <1>     je .ok1
   445 00002D63 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   446 00002D66 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   447                              <1> .exit:
   448 00002D68 5B                  <1>     pop rbx
   449 00002D69 58                  <1>     pop rax
   450                              <1>     return ;We have reached the end of the chain, return all good!
    18                              <2> %%_ret:
    19 00002D6A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   451                              <1> .ok1:
   452 00002D6B 31C0                <1>     xor eax, eax
   453 00002D6D 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   454 00002D70 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   455 00002D74 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   456 00002D7B 4801C3              <1>     add rbx, rax
   457 00002D7E EBDE                <1>     jmp short .ok
   458                              <1> .bmcbPrep:
   459 00002D80 5B                  <1>     pop rbx ;Pop off the stack first!
   460 00002D81 58                  <1>     pop rax
   461                              <1> badMCBChain:
   462 00002D82 B007                <1>     mov al, errMCBbad   ;Yikes!
   463                              <1> mcbErrHdlr:
   464                              <1>     ;Jumped to with eax = error code
   465 00002D84 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   466 00002D8B E8560B0000          <1>     call extErrExit ;Error thru the unified error handler
   467 00002D90 3C07                <1>     cmp al, errMCBbad
   468                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002D92 74D6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   469 00002D94 EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    31                                  %include "./Source/Kernel/MemExec/execTerm.asm"
    32                              <1> ;EXEC and all default terminates are here
    33                              <1> 
    34                              <1> ;========================
    35                              <1> ;   Interrupt handlers
    36                              <1> ;========================
    37                              <1> terminateProcess:   ;Int 40h
    38 00002D96 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
    39 00002D98 E982090000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
    40                              <1> terminateRes:       ;Int 47h
    41                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    42 00002D9D 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    43 00002DA3 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    44 00002DA6 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    45 00002DAB E96F090000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    46                              <1> ;========================
    47                              <1> ;    Int 21h functions
    48                              <1> ;========================
    49                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    50                              <1> ;Input:
    51                              <1> ;rdx = Pointer to new PSP in memory.
    52                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    53                              <1> ;   Officially document that this MUST be paragraph aligned.
    54                              <1> ;rsi = alloc size for new psp block
    55 00002DB0 C605(76C40300)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    56 00002DB7 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    57 00002DBE 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    58 00002DC0 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    59 00002DC1 EB0C                <1>     jmp short copyPSP.pspCommon
    60                              <1> copyPSP:      ;ah = 26h
    61                              <1> ;Input:
    62                              <1> ;rdx = Pointer to new PSP in memory.
    63                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    64                              <1> ;   Officially document that this MUST be paragraph aligned.
    65 00002DC3 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    66 00002DCA 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    67 00002DCE 53                  <1>     push rbx    ;Save this value for PSP allocsize
    68                              <1> .pspCommon:
    69 00002DCF 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    70 00002DD6 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    71 00002DDA 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    72                              <1> ;r8 is current PSP, now copy psp to rdx
    73                              <1> ;Preserve rdx and r8 until the end
    74 00002DDE 4C89C6              <1>     mov rsi, r8
    75 00002DE1 4889D7              <1>     mov rdi, rdx
    76 00002DE4 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    77 00002DE9 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    78 00002DEC F605(76C40300)FF    <1>     test byte [pspCopyFlg], -1
    79 00002DF3 7400                <1>     jz .copy
    80                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    81                              <1> .copy:
    82 00002DF5 C605(76C40300)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    83 00002DFC 58                  <1>     pop rax ;Pop the allocsize back into rax
    84 00002DFD 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    85                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    86 00002E00 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
    87 00002E04 B042                <1>     mov al, 42h
    88 00002E06 E8F5060000          <1>     call muxGetIntVector    ;Get vector in rbx
    89 00002E0B 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    90 00002E0E 48AB                <1>     stosq   ;Move rdi to next entry and store
    91 00002E10 B043                <1>     mov al, 43h
    92 00002E12 E8E9060000          <1>     call muxGetIntVector    ;Get vector in rbx
    93 00002E17 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    94 00002E1A 48AB                <1>     stosq   ;Move rdi to next entry and store
    95 00002E1C B044                <1>     mov al, 44h
    96 00002E1E E8DD060000          <1>     call muxGetIntVector    ;Get vector in rbx
    97 00002E23 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    98 00002E26 48AB                <1>     stosq   ;Move rdi to next entry and store
    99                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   100 00002E28 66C70240CD          <1>     mov word [rdx + psp.return], 0CD40h  ;Int 40h
   101 00002E2D C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Overlay next byte for prevPSP
   102 00002E34 48C74353FFFFFFFF    <1>     mov qword [rbx + psp.prevPSP], -1  
   103 00002E3C 4C894322            <1>     mov qword [rbx + psp.parentPtr], r8 ;The Current PSP is parent
   104                              <1>     return
    18                              <2> %%_ret:
    19 00002E40 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   105                              <1> 
   106                              <1> terminateStayRes:  ;ah = 31h
   107                              <1> ;Input: al  = Error code
   108                              <1> ;       edx = Number of paragraphs to keep resident
   109 00002E41 C605(60C60300)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   110                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   111 00002E48 81FA06000000        <1>     cmp edx, 6
   112 00002E4E 7305                <1>     jae .aboveMinimum
   113 00002E50 BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   114                              <1> .aboveMinimum:
   115                              <1> ;Now we setup a call to Realloc 
   116                              <1> ;Setup regs with: 
   117                              <1> ;   r8 = address of the block to be realloc'ed
   118                              <1> ;   ebx = How many paras this block should contain after realloc.
   119 00002E55 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   120 00002E5C 89D3                <1>     mov ebx, edx
   121 00002E5E 50                  <1>     push rax    ;Preserve errorlevel across call
   122 00002E5F 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   123 00002E60 E821FDFFFF          <1>     call reallocMemory
   124 00002E65 5B                  <1>     pop rbx
   125 00002E66 58                  <1>     pop rax
   126 00002E67 7220                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   127 00002E69 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   128                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   129 00002E6D EB1A                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   130                              <1> 
   131                              <1> simpleTerminate:   ;ah = 00h
   132 00002E6F 31C0                <1>     xor eax, eax    ;Just fall through as normal
   133                              <1> terminateClean:    ;ah = 4Ch, EXIT
   134                              <1> ;Here we must:
   135                              <1> ;0) Build errorlevel and adjust variables accordingly
   136                              <1> ;1) Check if the program is it's own parent. If so, return.
   137                              <1> ;2) Swap the console back to the original driver if it is swapped.
   138                              <1> ;2.5) If we are exiting due to TSR, jump to 5
   139                              <1> ;3) Free all file handles associated to the current process.
   140                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   141                              <1> ;4) Free all memory blocks that have the signature of current PSP
   142                              <1> ;5) Set current PSP to parent PSP
   143                              <1> ;6) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   144                              <1> ;7) Call Network Termination hook.
   145                              <1> ;8) Set old old rsp as old rsp
   146                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   147                              <1> ;10) Exit all critical sections.
   148                              <1> ;
   149                              <1> ; Step 0
   150                              <1> ;For now, just adjust error level in var
   151 00002E71 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   152 00002E73 8625(60C60300)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   153 00002E79 F605(EDC30300)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   154 00002E80 740D                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   155 00002E82 C605(60C60300)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   156                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   157 00002E89 8A25(60C60300)      <1>     mov ah, byte [exitType] ;Get the exitType
   158                              <1> .storeELvl:
   159 00002E8F 668905(91C30300)    <1>     mov word [errorLevel], ax   ;Store word
   160                              <1> ; Step 1
   161                              <1> .step1:
   162 00002E96 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   163 00002E9D 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   164 00002EA0 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   165 00002EA4 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   166                              <1>     rete            ;If it is, simply return (al has errorLevel)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002EA7 7497                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   167                              <1> ; Step 2
   168 00002EA9 E84CEDFFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   169                              <1> ; Step 2.5
   170 00002EAE 803D(60C60300)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   171 00002EB5 0F8488000000        <1>     je .step5   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   172                              <1> ; Step 3
   173 00002EBB 803D(60C60300)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   174 00002EC2 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   175 00002EC4 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   176 00002EC9 CD4F                <1>     int 4Fh
   177                              <1> .skipAbortNetClose:
   178 00002ECB 4881C72A000000      <1>     add rdi, psp.jobFileTbl ;Move rdi to point to the start of the JFT
   179 00002ED2 4889FE              <1>     mov rsi, rdi    ;Point rsi to jft too
   180 00002ED5 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls] ;Number of entries in JFT
   181                              <1> .s3lp:
   182 00002EDC AC                  <1>     lodsb   ;Inc rsi, get the SFT number in al
   183 00002EDD 3CFF                <1>     cmp al, -1  ;End of open JFT entries?
   184 00002EDF 7429                <1>     je .step4
   185 00002EE1 0FB6D8              <1>     movzx ebx, al   ;Move the file handle number into ebx
   186                              <1>     ;Replace with a call to close the handle eventually
   187 00002EE4 57                  <1>     push rdi
   188 00002EE5 E824F9FFFF          <1>     call derefSFTPtr    ;Ret in rdi the SFT pointer
   189 00002EEA 7216                <1>     jc .badHdl  ;If a bad handle, skip the decrementing of the handle count
   190 00002EEC FF35(82C60300)      <1>     push qword [currentSFT]
   191 00002EF2 E8ECF7FFFF          <1>     call setCurrentSFT  ;Set rdi to currentSFT
   192 00002EF7 E888F4FFFF          <1>     call closeMain  ;Close all files opened by this program. Decrement ref ONLY
   193                              <1>     ;closeMain also flushes all sectors associated to the file
   194                              <1>     ;Ignore errors, simply keep closing files
   195 00002EFC 8F05(82C60300)      <1>     pop qword [currentSFT]
   196                              <1> .badHdl:
   197 00002F02 5F                  <1>     pop rdi
   198 00002F03 B0FF                <1>     mov al, -1
   199 00002F05 AA                  <1>     stosb   ;Store a -1 in it's place (not strictly necessary)
   200 00002F06 FFC9                <1>     dec ecx ;Zoom Zoom \mu-op!
   201 00002F08 75D2                <1>     jnz .s3lp   ;Keep looping for all entries in the JFT 
   202                              <1> ;Step 4
   203                              <1> .step4:
   204 00002F0A 488B1D(81C30300)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   205                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   206                              <1>     ; with the currentPSP signature and free them.
   207 00002F11 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   208                              <1> .s4lp:  ;And walk the chain
   209                              <1> ;First verify the address in rsi is a valid mcb
   210 00002F18 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   211 00002F1A 80F94D              <1>     cmp cl, mcbMarkCtn
   212 00002F1D 7405                <1>     je .checkToFree
   213 00002F1F 80F95A              <1>     cmp cl, mcbMarkEnd
   214 00002F22 751F                <1>     jne .step5  ;Something wrong so stop freeing
   215                              <1> .checkToFree:
   216 00002F24 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   217 00002F28 7508                <1>     jne .noFree
   218 00002F2A 4989F0              <1>     mov r8, rsi ;Move pointer to r8
   219 00002F2D E85FFBFFFF          <1>     call freeMemory ;Free this memory block
   220                              <1>     ;If an error occured, the internal vars will be set.
   221                              <1> .noFree:
   222 00002F32 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   223 00002F35 740C                <1>     je .step5   ;Skip if we are
   224 00002F37 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   225 00002F3A 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   226 00002F3E 4801C6              <1>     add rsi, rax    ;Goto next mcb block
   227 00002F41 EBD5                <1>     jmp short .s4lp
   228                              <1> ;Step 5
   229                              <1> .step5:
   230 00002F43 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   231 00002F47 488905(81C30300)    <1>     mov qword [currentPSP], rax
   232                              <1> ;Step 6
   233                              <1>     ;rbx points to current PSP
   234                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   235 00002F4E 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   236 00002F52 B044                <1>     mov al, 44h
   237 00002F54 E8420B0000          <1>     call setIntVector
   238 00002F59 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   239 00002F5D B043                <1>     mov al, 43h
   240 00002F5F E8370B0000          <1>     call setIntVector
   241 00002F64 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   242 00002F68 B042                <1>     mov al, 42h
   243 00002F6A E82C0B0000          <1>     call setIntVector
   244                              <1> ;Step 7
   245 00002F6F B822110000          <1>     mov eax, 1122h  ;Network Termination Hook
   246 00002F74 CD4F                <1>     int 4fh ;Beep it out
   247                              <1> ;Step 8
   248 00002F76 488B05(CCC30300)    <1>     mov rax, qword [oldoldRSP]  ;Make the parent register frame the current one
   249 00002F7D 488905(DCC30300)    <1>     mov qword [oldRSP], rax
   250                              <1> ;Step 9
   251 00002F84 488B2D(DCC30300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to parent stack register frame in rbp
   252 00002F8B 48895548            <1>     mov qword [rbp + callerFrame.rip], rdx  ;Store return address vector here
   253                              <1> ;Step 10
   254 00002F8F B482                <1>     mov ah, 82h
   255 00002F91 CD4A                <1>     int 4ah
   256                              <1>     return
    18                              <2> %%_ret:
    19 00002F93 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> loadExecChild:     ;ah = 4Bh, EXEC
   259                              <1>     return
    18                              <2> %%_ret:
    19 00002F94 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    32                                  %include "./Source/Kernel/Local/Local.asm"
    33                              <1> ;Localisation based functions live here
    34                              <1> 
    35                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    36                              <1> ;al = 0 => Get the switch char
    37                              <1> ;al = 1 => Set the switch char to whats in DL
    38                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
    39                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
    40                              <1> ;       Always returns -1 => /DEV/ optional
    41                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    42                              <1> ;       Input value is ignored
    43 00002F95 3C01                <1>     cmp al, 01
    44 00002F97 7412                <1>     je .getSC
    45 00002F99 7209                <1>     jb .setSC
    46 00002F9B 3C03                <1>     cmp al, 03
    47 00002F9D 7214                <1>     jb .getDev
    48 00002F9F 741C                <1>     je .setDev
    49 00002FA1 B0FF                <1>     mov al, -1
    50                              <1>     return
    18                              <2> %%_ret:
    19 00002FA3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    51                              <1> .setSC:
    52 00002FA4 8815(33C30300)      <1>     mov byte [switchChar], dl
    53                              <1>     return
    18                              <2> %%_ret:
    19 00002FAA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> .getSC:
    55 00002FAB 8A15(33C30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    56 00002FB1 EB02                <1>     jmp short .getRet
    57                              <1> .getDev:
    58 00002FB3 B2FF                <1>     mov dl, -1
    59                              <1> .getRet:
    60 00002FB5 E854050000          <1>     call getUserRegs
    61 00002FBA 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    62                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    63                              <1>     return
    18                              <2> %%_ret:
    19 00002FBD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> 
    66                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    67                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    68                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    69 00002FBE C3                  <1>     ret
    33                                  %include "./Source/Kernel/ctrlc.asm"
    34                              <1> diskDevErr:
    35                              <1> ;Called, NOT Jumped to. 
    36                              <1> ;Input: rdi = Disk Buffer pointer
    37                              <1> ;       eax = Status word (Zero Extended)
    38                              <1> ;       rbp = Disk DPB pointer
    39                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    40                              <1> ;Output: al = Int 44h response (0-3)
    41                              <1> ; All other registers preserved
    42 00002FBF 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    43 00002FC6 89C7                <1>     mov edi, eax    ;Store status word in rdi
    44 00002FC8 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    45 00002FCB 8A25(C9C30300)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    46 00002FD1 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    47                              <1>     ;Test for correct buffer data type
    48 00002FD4 53                  <1>     push rbx    ;Save rbx temporarily
    49 00002FD5 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    50 00002FD8 F6C301              <1>     test bl, dosBuffer
    51 00002FDB 7505                <1>     jnz .df0
    52 00002FDD 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    53 00002FE0 EB17                <1>     jmp short .df3
    54                              <1> .df0:
    55 00002FE2 F6C302              <1>     test bl, fatBuffer
    56 00002FE5 7505                <1>     jnz .df1
    57 00002FE7 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    58 00002FEA EB0D                <1>     jmp short .df3
    59                              <1> .df1:
    60 00002FEC F6C304              <1>     test bl, dirBuffer
    61 00002FEF 7505                <1>     jnz .df2
    62 00002FF1 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    63 00002FF4 EB03                <1>     jmp short .df3
    64                              <1> .df2:
    65 00002FF6 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    66                              <1> .df3:
    67 00002FF9 5B                  <1>     pop rbx
    68 00002FFA 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    69 00002FFE E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    70 00003003 488B2D(D4C60300)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    71 0000300A 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    72                              <1>     return
    18                              <2> %%_ret:
    19 00003011 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    73                              <1> 
    74                              <1> charDevErr:
    75                              <1> ;Called with ah with additional bits
    76 00003012 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
    77                              <1> criticalErrorSetup:
    78 00003015 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    79 0000301B 48892D(D4C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    80 00003022 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    81                              <1>     ;For now, fall through, but need much work to change it later! 
    82                              <1> 
    83                              <1> 
    84                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    85                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    86                              <1> ; to the critical error handler.
    87                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    88                              <1> ; and with Int44Bitfield set
    89                              <1> ;               AH = Critical Error Bitfield
    90                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    91                              <1> ;               Bit 6 - Reserved
    92                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    93                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    94                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    95                              <1> ;               Bits [2-1] = Affected Disk Error
    96                              <1> ;                     0 0   DOS area
    97                              <1> ;                     0 1   FAT area
    98                              <1> ;                     1 0   Directory area
    99                              <1> ;                     1 1   Data area
   100                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   101                              <1> ;               AL  = Failing drive number if AH[7] = 0
   102                              <1> ;               DIL = Error code for errorMsg
   103                              <1> ;               RSI = EA of Device Header for which device the error occured
   104                              <1> ;Return:
   105                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   106                              <1> ;                  = 1 - Retry the Operation    (Retry)
   107                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   108                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   109                              <1> ; Return response from int 44h in al
   110                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   111                              <1> ; This function will terminate the program if an abort was requested!
   112                              <1> ; This function also destroys RBP
   113 00003028 803D(69C30300)01    <1>     cmp byte [critErrFlag], 1
   114 0000302F 7204                <1>     jb .noIntError  ;If not 0, enter
   115 00003031 B003                <1>     mov al, critFail    ;Else, return Fail always
   116 00003033 EB4F                <1>     jmp short .exit     ;Don't translate fail to abort
   117                              <1> .noIntError:
   118 00003035 FA                  <1>     cli ;Disable Interrupts
   119 00003036 FE05(69C30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   120 0000303C FE0D(6AC30300)      <1>     dec byte [inDOS]    ;Exiting DOS
   121 00003042 488925(C1C30300)    <1>     mov qword [xInt44hRSP], rsp
   122 00003049 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   123 00003050 31ED                <1>     xor ebp, ebp    ;Always zeroed
   124 00003052 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   125 00003054 488B25(C1C30300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   126 0000305B C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   127 00003062 FE05(6AC30300)      <1>     inc byte [inDOS]    ;Reenter DOS
   128 00003068 FB                  <1>     sti ;Reenable Interrupts
   129                              <1>     ;Now we check that the response given was allowed, and translate if needed
   130                              <1> .checkResponse:
   131 00003069 3C01                <1>     cmp al, critRetry
   132 0000306B 721F                <1>     jb .checkIgnore
   133 0000306D 7428                <1>     je .checkRetry
   134 0000306F 3C03                <1>     cmp al, critFail
   135 00003071 752F                <1>     jne .abort   ;Must be abort
   136                              <1> .setFail:   ;Here is for fail
   137 00003073 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   138 00003075 FE05(CBC30300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   139 0000307B F605(C9C30300)08    <1>     test byte [Int44bitfld], critFailOK
   140 00003082 751E                <1>     jnz .abort  ;If fail not permitted, abort
   141                              <1> .exit:
   142 00003084 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   143                              <1>     return
    18                              <2> %%_ret:
    19 0000308B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> .checkIgnore:
   145 0000308C F605(C9C30300)20    <1>     test byte [Int44bitfld], critIgnorOK
   146 00003093 75EF                <1>     jnz .exit
   147 00003095 EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   148                              <1> .checkRetry:
   149 00003097 F605(C9C30300)10    <1>     test byte [Int44bitfld], critRetryOK
   150 0000309E 75E4                <1>     jnz .exit   
   151 000030A0 EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   152                              <1> .abort:
   153                              <1> ;Prepare to abort. We abort from within!
   154                              <1>     ;First check if the process is it's own parent.
   155                              <1>     ;If it is, we exit fail and return to the process
   156 000030A2 488B05(81C30300)    <1>     mov rax, qword [currentPSP] ;Get the current psp
   157 000030A9 53                  <1>     push rbx
   158 000030AA 488B5822            <1>     mov rbx, qword [rax + psp.parentPtr]
   159 000030AE 4839C3              <1>     cmp rbx, rax    ;Check if the process is it's own parent
   160 000030B1 5B                  <1>     pop rbx
   161 000030B2 7509                <1>     jne .kill   ;If the process is not it's own parent, we kill the process
   162 000030B4 C605(F7C30300)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   163 000030BB EBB6                <1>     jmp short .setFail
   164                              <1> .kill:
   165 000030BD 66893D(6DC30300)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   166 000030C4 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   167 000030C6 C605(60C60300)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   168 000030CD E9B7FDFFFF          <1>     jmp terminateClean.altEP
   169                              <1> 
   170                              <1> ctrlBreakHdlr:
   171 000030D2 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   172 000030D4 E84FEAFFFF          <1>     call printCaretASCII
   173 000030D9 E87AEAFFFF          <1>     call printCRLF
   174                              <1>     ;Reset the console back to 0
   175 000030DE C605(F5C30300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   176                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   177 000030E5 FA                  <1> 	cli
   178 000030E6 488B25(DCC30300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   179 000030ED E887070000          <1> 	call dosPopRegs ;Get user state back
   180 000030F2 488925(89C30300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   181 000030F9 F8                  <1>     clc
   182 000030FA CD43                <1>     int 43h ;Call critical error handler
   183 000030FC FA                  <1>     cli ;Clear interrupts again
   184 000030FD 488905(95C30300)    <1>     mov qword [oldRAX], rax ;Save rax
   185 00003104 9C                  <1>     pushfq  ;Get flags in rax
   186 00003105 58                  <1>     pop rax 
   187 00003106 483B25(89C30300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   188 0000310D 750C                <1>     jne .checkCF
   189                              <1> .returnToDOS:
   190 0000310F 488B05(95C30300)    <1>     mov rax, qword [oldRAX]
   191 00003116 E904060000          <1>     jmp functionDispatch    ;Goto int 41h
   192                              <1> .checkCF:
   193 0000311B 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   194 00003122 A801                <1>     test al, 1  ;CF set?
   195 00003124 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   196 00003126 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   197 0000312B C605(EDC30300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   198 00003132 E9E8050000          <1>     jmp functionDispatch
   199                              <1> 
    34                                  %include "./Source/Kernel/dosPrim.asm"
    35                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    36                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    37                              <1> 
    38                              <1> dosDefCritErrHdlr:
    39                              <1> ;The DOS default critical error handler always returns FAIL
    40 00003137 B003                <1>     mov al, critFail
    41 00003139 48CF                <1>     iretq
    42                              <1> goDriverChar:
    43                              <1> ;Shortcut for Char requests, make a driver request
    44                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    45 0000313B 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    46                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    47                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    48                              <1> ;       rbx = Ptr to the request header for the driver call!
    49 0000313F E877070000          <1>     call dosCrit2Enter
    50 00003144 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    51 00003147 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    52 0000314A E876070000          <1>     call dosCrit2Exit
    53                              <1>     return
    18                              <2> %%_ret:
    19 0000314F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> 
    55                              <1> setupPhysicalDiskRequest:
    56                              <1> ;Ensure that al has valid disk number
    57                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    58                              <1> ;If CF=NC, rbp = DPB ptr.
    59                              <1> ;If CF=CY, exit error
    60 00003150 84C0                <1>     test al, al
    61 00003152 723F                <1>     jc .diskError
    62 00003154 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
    63 0000315A 7337                <1>     jae .diskError
    64 0000315C 50                  <1>     push rax
    65 0000315D FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    66 0000315F E837040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    67 00003164 58                  <1>     pop rax
    68 00003165 7235                <1>     jc .error
    69 00003167 8805(61C60300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    70 0000316D 488B2D(6AC60300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    71 00003174 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    72 0000317C 750A                <1>     jnz .netError
    73 0000317E 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    74 00003182 E814030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    75                              <1>     return
    18                              <2> %%_ret:
    19 00003187 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    76                              <1> .netError:
    77 00003188 66C705(6DC30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    77 00003190 00                  <1>
    78 00003191 EB09                <1>     jmp short .error
    79                              <1> .diskError:
    80 00003193 66C705(6DC30300)0F- <1>     mov word [errorExCde], errBadDrv
    80 0000319B 00                  <1>
    81                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    82 0000319C C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
    83 000031A3 C605(6FC30300)07    <1>     mov byte [errorAction], eActRetUsr
    84 000031AA C605(70C30300)09    <1>     mov byte [errorClass], eClsBadFmt
    85 000031B1 F9                  <1>     stc
    86                              <1>     return
    18                              <2> %%_ret:
    19 000031B2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    87                              <1> 
    88                              <1> setupAbsDiskEntry:
    89                              <1> ;Prepares to sets up the CDS and DPB for the request
    90 000031B3 FE05(6AC30300)      <1>     inc byte [inDOS]
    91 000031B9 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    92 000031BA FC                  <1>     cld ;Set string ops in the right direction
    93 000031BB E890FFFFFF          <1>     call setupPhysicalDiskRequest
    94 000031C0 7223                <1>     jc .exit    ;Error exit
    95 000031C2 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    96 000031C9 56                  <1>     push rsi
    97 000031CA 50                  <1>     push rax
    98 000031CB 488D35(7FC40300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    99 000031D2 8806                <1>     mov byte [rsi], al  ;Construct a path
   100 000031D4 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   101 000031D7 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   102 000031DB F8                  <1>     clc
   103                              <1> ;++++++++++++++++++++++++++++
   104                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   105                              <1> ;Entered with path in rsi (ah=03h)
   106 000031DC B800030000          <1>     mov eax, 0300h  
   107 000031E1 CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   108                              <1> ;++++++++++++++++++++++++++++
   109 000031E3 58                  <1>     pop rax
   110 000031E4 5E                  <1>     pop rsi
   111                              <1> .exit:
   112 000031E5 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   113                              <1>     return
    18                              <2> %%_ret:
    19 000031E7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> absDiskWrite:       ;Int 46h
   116                              <1> ;al = Drive number
   117                              <1> ;rbx = Memory Buffer address to read from
   118                              <1> ;ecx = Number of sectors to write
   119                              <1> ;rdx = Start LBA to write to
   120 000031E8 FA                  <1>     cli
   121 000031E9 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   122 000031F0 488D25(D4D80300)    <1>     lea rsp, DiskStakTop
   123 000031F7 55                  <1>     push rbp
   124 000031F8 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   125 000031F9 E8B5FFFFFF          <1>     call setupAbsDiskEntry
   126 000031FE 7252                <1>     jc absDiskExit
   127 00003200 E8AB010000          <1>     call primReqWriteSetup
   128 00003205 EB1D                <1>     jmp short absDiskReadWriteCommon
   129                              <1> absDiskRead:        ;Int 45h
   130                              <1> ;al = Drive number
   131                              <1> ;rbx = Memory Buffer address to write to
   132                              <1> ;ecx = Number of sectors to read
   133                              <1> ;rdx = Start LBA to read from
   134 00003207 FA                  <1>     cli 
   135 00003208 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   136 0000320F 488D25(D4D80300)    <1>     lea rsp, DiskStakTop
   137 00003216 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   138 00003217 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   139 00003218 E896FFFFFF          <1>     call setupAbsDiskEntry
   140 0000321D 7233                <1>     jc absDiskExit
   141 0000321F E897010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   142                              <1> absDiskReadWriteCommon:
   143                              <1> ;Entered with the appropriate function number in ah
   144                              <1> ; and primary request header in rbx
   145 00003224 E83B000000          <1>     call absDiskDriverCall
   146 00003229 7427                <1>     jz absDiskExit  ;Skip error code checking
   147 0000322B 8A05(25C40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   148                              <1>     ;DOS uses the following pairs in a table
   149                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   150 00003231 B480                <1>     mov ah, 80h ;Attachment failure
   151 00003233 3C0C                <1>     cmp al, 0Ch ;Gen error
   152 00003235 741A                <1>     je .absExit
   153 00003237 B440                <1>     mov ah, 40h ;Seek error
   154 00003239 3C06                <1>     cmp al, 06h
   155 0000323B 7414                <1>     je .absExit
   156 0000323D B408                <1>     mov ah, 08h ;Bad CRC
   157 0000323F 3C04                <1>     cmp al, 04h
   158 00003241 740E                <1>     je .absExit
   159 00003243 B404                <1>     mov ah, 04h ;Sector not found
   160 00003245 3C08                <1>     cmp al, 08h
   161 00003247 7408                <1>     je .absExit
   162 00003249 30E4                <1>     xor ah, ah  ;Write Protect Violation
   163 0000324B 84C0                <1>     test al, al
   164 0000324D 7402                <1>     je .absExit
   165 0000324F B402                <1>     mov ah, 02h ;Other Error
   166                              <1> .absExit:
   167 00003251 F9                  <1>     stc
   168                              <1> absDiskExit:
   169 00003252 5B                  <1>     pop rbx
   170 00003253 5D                  <1>     pop rbp
   171 00003254 FA                  <1>     cli
   172 00003255 FE0D(6AC30300)      <1>     dec byte [inDOS]
   173 0000325B 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]
   174 00003262 FB                  <1>     sti ;Reenable interrupts
   175                              <1>     return ;Return from interrupt without popping flags!
    18                              <2> %%_ret:
    19 00003263 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   176                              <1> absDiskDriverCall:
   177                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   178                              <1> ;       rbx = Request header address
   179                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   180                              <1> ;       eax = Status word from request
   181                              <1> ;       ecx = Number of sectors transferred
   182 00003264 56                  <1>     push rsi
   183                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   184 00003265 8B0D(38C40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   185                              <1>     ;Prepare for goDriver now
   186 0000326B 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   187 0000326F E8CBFEFFFF          <1>     call goDriver   ;Make request
   188 00003274 5E                  <1>     pop rsi
   189 00003275 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   190 0000327B 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   191 0000327D 0FB705(25C40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   192 00003284 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   193                              <1>     return
    18                              <2> %%_ret:
    19 00003288 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   194                              <1> 
   195                              <1> getDiskDPB:
   196                              <1> ;Gets the disk DPB if the Disk is physical
   197                              <1> ;Otherwise will return a pointer to the drive DPB
   198                              <1> ;Called with rdi pointing to the CDS
   199                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   200 00003289 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   201 0000328D 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   202 00003290 8805(61C60300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   203 00003296 E800020000          <1>     call setWorkingDPB
   204 0000329B 57                  <1>     push rdi    ;Save the CDS ptr
   205 0000329C E837000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   206 000032A1 5F                  <1>     pop rdi
   207 000032A2 7233                <1>     jc .exitBad ;Preserve CF
   208 000032A4 7530                <1>     jnz .exit
   209                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   210 000032A6 8A0D(70C00300)      <1>     mov cl, byte [lastdrvNum]
   211 000032AC 31C0                <1>     xor eax, eax
   212 000032AE 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   213 000032B1 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   214 000032B5 488B3D(5DC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   215                              <1> .checkCDS:
   216 000032BC 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   217 000032C0 7509                <1>     jne .next
   218 000032C2 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   219 000032C6 7403                <1>     jz .next    ;IF yes, skip it
   220 000032C8 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   221                              <1> .next:
   222 000032CB 4881C75B000000      <1>     add rdi, cds_size
   223 000032D2 FEC9                <1>     dec cl
   224 000032D4 75E6                <1>     jnz .checkCDS
   225                              <1> .exit:
   226 000032D6 F8                  <1>     clc
   227                              <1> .exitBad:
   228                              <1>     return
    18                              <2> %%_ret:
    19 000032D7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   229                              <1> 
   230                              <1> ensureDiskValid:
   231                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   232                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   233                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   234                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   235                              <1> .medChk:
   236 000032D8 E827010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   237                              <1> ;Return in rbx the req hdr address
   238 000032DD 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   239 000032E1 E859FEFFFF          <1>     call goDriver   ;Request!
   240 000032E6 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   241 000032EA F7C700800000        <1>     test edi, drvErrStatus
   242 000032F0 756A                <1>     jnz .diskDrvCritErrMedChk
   243                              <1> .medChkIgnore:
   244 000032F2 8A05(61C60300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   245 000032F8 30E4                <1>     xor ah, ah
   246 000032FA 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   247 000032FD 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   248 00003300 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   249 00003302 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   250 00003304 E836D6FFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   251 00003309 F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   252 0000330A 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   253                              <1>     ;ZF=NZ from test for dirty buffers
   254                              <1> .exit:
   255                              <1>     return
    18                              <2> %%_ret:
    19 0000330C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   256                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   257 0000330D C605(DCD80300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   258 00003314 E84AD6FFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   259                              <1>     ;Get a buffer to read BPB into in rdi
   260 00003319 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   261 0000331B E8BBD7FFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   262 00003320 72EA                <1>     jc .exit    ;Immediately exit with the carry flag set
   263 00003322 4889DF              <1>     mov rdi, rbx
   264                              <1> .repeatEP:
   265 00003325 E806010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   266 0000332A 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   267 0000332E E80CFEFFFF          <1>     call goDriver   ;Request!
   268 00003333 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   269 00003337 A900800000          <1>     test eax, drvErrStatus
   270 0000333C 755C                <1>     jnz .diskDrvCritErrBPB
   271                              <1>     ;Now rebuild the dpb fields for this drive
   272 0000333E 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   273 00003342 E882080000          <1>     call createDPB  
   274                              <1>     ;Adjust the buffer header information
   275 00003347 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   276 0000334A 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   277 0000334D 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   278 00003350 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   279 00003353 30E4                <1>     xor ah, ah
   280 00003355 8825(DCD80300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   281                              <1>     return
    18                              <2> %%_ret:
    19 0000335B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   282                              <1> .diskDrvCritErrMedChk:
   283                              <1> ;Critical Errors fall through here
   284                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   285 0000335C 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   286 00003363 48892D(D4C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   287 0000336A 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   288 0000336D B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   289 0000336F 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   290 00003375 E8AEFCFFFF          <1>     call criticalDOSError
   291 0000337A 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]
   292 00003381 488B2D(D4C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   293 00003388 3C01                <1>     cmp al, critRetry
   294 0000338A 0F8448FFFFFF        <1>     je .medChk
   295 00003390 3C00                <1>     cmp al, critIgnore
   296 00003392 0F845AFFFFFF        <1>     je .medChkIgnore
   297 00003398 F9                  <1>     stc ;Set error flag to indicate fail
   298                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00003399 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   299                              <1> 
   300                              <1> .diskDrvCritErrBPB:
   301                              <1>     ;eax has status word, rbp has dpb ptr
   302                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   303 0000339A C605(C9C30300)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   304 000033A1 E819FCFFFF          <1>     call diskDevErr
   305 000033A6 3C01                <1>     cmp al, critRetry
   306 000033A8 0F8477FFFFFF        <1>     je .repeatEP
   307                              <1>     ;Else we fail (Ignore=Fail here)
   308 000033AE F9                  <1>     stc ;Set error flag to indicate fail
   309                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 000033AF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   310                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   311                              <1> ;           Primitive Driver Requests
   312                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   313                              <1> ;First are Disk requests, then Char device requests
   314                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   315                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   316                              <1> 
   317                              <1> primReqWriteSetup:
   318 000033B0 50                  <1>     push rax
   319 000033B1 B408                <1>     mov ah, drvWRITE    ;Command code
   320 000033B3 0225(32C30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   321 000033B9 EB03                <1>     jmp short primReqRWCommon
   322                              <1> primReqReadSetup:
   323 000033BB 50                  <1>     push rax
   324 000033BC B404                <1>     mov ah, drvREAD
   325                              <1> primReqRWCommon:
   326                              <1> ;Sets up the IO request packet with:
   327                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   328                              <1> ; rbx = Data storage buffer ptr
   329                              <1> ; ecx = Number of sectors to transfer
   330                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   331                              <1> ; ~~~~ Set by entry function ~~~~ 
   332                              <1> ; ah = Command code
   333                              <1> ; All regs preserved EXCEPT rbx.
   334                              <1> ; Return: rbx = Transfer Address
   335 000033BE 48891D(30C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   336 000033C5 890D(38C40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   337 000033CB C605(22C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   338 000033D2 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   339 000033D7 8905(23C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   340 000033DD 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   341 000033E0 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   342                              <1>     ;Disk operations only here!
   343 000033E2 488915(3CC40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   344 000033E9 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   345 000033EC 8805(2FC40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   346 000033F2 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   347 000033F5 8805(23C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   348                              <1> primReqCommonExit:
   349                              <1> ;Returns in rbx the primary request header as these functions
   350                              <1> ; setup the request in the primary request header space
   351 000033FB 58                  <1>     pop rax
   352 000033FC 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   353                              <1>     return
    18                              <2> %%_ret:
    19 00003403 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   354                              <1> 
   355                              <1> primReqMedCheckSetup:
   356                              <1> ;Prepare the diskIO packet for mediacheck
   357                              <1> ;rbp has DPB pointer for device to check media on
   358 00003404 50                  <1>     push rax
   359 00003405 C605(22C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   360 0000340C 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   361 0000340F 8805(2FC40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   362 00003415 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   363 00003418 8805(23C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   364 0000341E C605(24C40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   365 00003425 66C705(25C40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   365 0000342D 00                  <1>
   366 0000342E EBCB                <1>     jmp short primReqCommonExit
   367                              <1> 
   368                              <1> primReqGetBPBSetup:
   369                              <1> ;rbp has DPB pointer for device
   370                              <1> ;rdi has sector buffer header pointer for transfer
   371 00003430 50                  <1>     push rax
   372 00003431 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   373 00003435 48893D(30C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   374 0000343C C605(22C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   375 00003443 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   376 00003446 8805(2FC40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   377 0000344C 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   378 0000344F 8805(23C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   379 00003455 C605(24C40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   380 0000345C 66C705(25C40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   380 00003464 00                  <1>
   381 00003465 EB94                <1>     jmp short primReqCommonExit
   382                              <1> 
   383                              <1> primReqOpenSetup:
   384                              <1> ;al = unit number if a disk device. Undefined otherwise
   385 00003467 50                  <1>     push rax
   386 00003468 B40D                <1>     mov ah, drvOPEN
   387                              <1> primReqCloseSetup:
   388                              <1> ;al = unit number if a disk device. Undefined otherwise
   389 0000346A 50                  <1>     push rax
   390 0000346B B40E                <1>     mov ah, drvCLOSE
   391                              <1> primReqOCcommon:
   392 0000346D C605(22C40300)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   393 00003474 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   394 00003475 8905(23C40300)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   395                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   396 0000347B E97BFFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   397                              <1> 
   398                              <1> secdReqCharIOReq:
   399                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   400                              <1> ;Input:
   401                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   402                              <1> ; ecx = Length of buffer
   403                              <1> ; rdi = Buffer pointer
   404                              <1> ;Output: 
   405                              <1> ; rbx = Transfer Address 
   406 00003480 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   407 00003487 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   408 0000348A 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   409 0000348D 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   410 00003493 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   411 00003497 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   412                              <1>     return
    18                              <2> %%_ret:
    19 0000349A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   413                              <1> ;If the device which will process this request is a disk device
   414                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   415                              <1> ;Then we will read the appropriate byte from that buffer to the 
   416                              <1> ; singleIOByt buffer.
   417                              <1> ;Such a request will require additional setup with the following fields:
   418                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    35                                  %include "./Source/Kernel/dosUtils.asm"
    36                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    37                              <1> 
    38                              <1> ;Basic Drive related Utilities
    39                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    40                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    41                              <1> ; that gets set up)
    42                              <1> 
    43                              <1> setWorkingDPB:
    44                              <1> ;Gets dpb in rbp and saves to workingDPB
    45 0000349B 48892D(62C60300)    <1>     mov qword [workingDPB], rbp
    46                              <1>     return
    18                              <2> %%_ret:
    19 000034A2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    47                              <1> 
    48                              <1> testCDSNet:
    49                              <1> ;Checks if the workingCDS is a redirector drive
    50                              <1> ;Return: rdi = workingCDS
    51                              <1> ;        CF=NC => Net
    52                              <1> ;        CF=CY => Not net or invalid CDS
    53 000034A3 488B3D(6AC60300)    <1>     mov rdi, qword [workingCDS]
    54 000034AA 4881FFFFFFFFFF      <1>     cmp rdi, -1
    55 000034B1 7409                <1>     je .notNet
    56 000034B3 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    57 000034B9 7501                <1>     jnz .notNet ;Carry flag will always be clear
    58                              <1>     return
    18                              <2> %%_ret:
    19 000034BB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    59                              <1> .notNet:
    60 000034BC F9                  <1>     stc
    61                              <1>     return
    18                              <2> %%_ret:
    19 000034BD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> getDiskData:
    64                              <1> ;This function returns:
    65                              <1> ;al = sectors per cluster
    66                              <1> ;ah = media ID byte
    67                              <1> ;ebx = total clusters
    68                              <1> ;cx = bytes per sector
    69                              <1> ;edx = number of available clusters
    70                              <1> ;
    71                              <1> ;If CF=CY on exit, al contains the error code
    72 000034BE E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    73 000034C3 7308                <1>     jnc .physical
    74                              <1>     ;Beep a redir request out
    75 000034C5 B80C110000          <1>     mov eax, 110Ch 
    76 000034CA CD4F                <1>     int 4Fh
    77                              <1>     return
    18                              <2> %%_ret:
    19 000034CC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    78                              <1> .physical:
    79                              <1> ;Now we must lock the structures
    80 000034CD C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
    81 000034D4 E8CE030000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    82 000034D9 E8ABFDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    83 000034DE E8CE030000          <1>     call dosCrit1Exit
    84 000034E3 721A                <1>     jc .exit
    85 000034E5 E8FCD6FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    86 000034EA 7213                <1>     jc .exit
    87 000034EC 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    88 000034EF FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    89 000034F1 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    90 000034F4 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    91 000034F7 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    92 000034FB 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    93 000034FE F8                  <1>     clc
    94                              <1> .exit:
    95                              <1>     return
    18                              <2> %%_ret:
    19 000034FF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    96                              <1> 
    97                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
    98                              <1> ;Input: al = Interrupt number
    99                              <1> ;Output: rbx = Interrupt Vector
   100 00003500 50                  <1>     push rax    ;Preserve rax, segment selector returned by call
   101 00003501 52                  <1>     push rdx    ;Preserve rdx, Attribute Word returned by call
   102 00003502 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   103 00003504 B807F00000          <1>     mov eax, 0F007h
   104 00003509 CD35                <1>     int 35h
   105 0000350B 5A                  <1>     pop rdx
   106 0000350C 58                  <1>     pop rax
   107                              <1>     return
    18                              <2> %%_ret:
    19 0000350D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> getUserRegs:   ;Int 4Fh AX=1218h
   110                              <1> ;Returns ptr to user regs in rsi
   111 0000350E 488B35(DCC30300)    <1>     mov rsi, qword [oldRSP]
   112                              <1>     return
    18                              <2> %%_ret:
    19 00003515 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> walkDPBchain:
   115                              <1> ;Called with al = 0 based drive number
   116                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
   117 00003516 488B35(3BC00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
   118                              <1> .walk:
   119 0000351D 4881FEFFFFFFFF      <1>     cmp rsi, -1
   120 00003524 740A                <1>     je .exitBad
   121 00003526 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   122 00003528 7407                <1>     je .exit    ;Drive found
   123 0000352A 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   124 0000352E EBED                <1>     jmp short .walk
   125                              <1> .exitBad:
   126 00003530 F9                  <1>     stc
   127                              <1> .exit:
   128                              <1>     return
    18                              <2> %%_ret:
    19 00003531 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   129                              <1> setDrive:   
   130                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
   131                              <1> ;Input: al = 1-based drive number
   132                              <1> ;Output: al = 0-based drive number
   133                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   134                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   135                              <1> ;            set.
   136 00003532 E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   137 00003537 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   138 00003539 56                  <1>     push rsi
   139 0000353A 488B35(6AC60300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   140 00003541 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   141 00003547 5E                  <1>     pop rsi
   142 00003548 7401                <1>     jz .exit
   143 0000354A F9                  <1>     stc
   144                              <1> .exit:
   145                              <1>     return
    18                              <2> %%_ret:
    19 0000354B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   146                              <1> 
   147                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   148                              <1> ;Allows a redirector or subst/join to build a CDS
   149                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   150                              <1> ; volumes, that are made at system boot.
   151                              <1> ;Input: al = Drive Letter for drive
   152                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   153                              <1> ;Output: rdi = newly filled in workingCDS
   154                              <1> ;CF=NC => CDS valid and has a DPB
   155                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   156 0000354C 50                  <1>     push rax
   157 0000354D 2C40                <1>     sub al, "A"-1
   158 0000354F 3A05(6FC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   159 00003555 488B3D(6AC60300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   160 0000355C 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   161 00003562 58                  <1>     pop rax
   162 00003563 7235                <1>     jb .exit    ;Exit with CF=CY
   163 00003565 50                  <1>     push rax
   164 00003566 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   165 0000356B 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   166 0000356D 58                  <1>     pop rax
   167 0000356E 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   168 00003574 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   169 0000357B 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   170 00003583 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   171                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   172 00003589 50                  <1>     push rax
   173 0000358A 56                  <1>     push rsi
   174 0000358B 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   175 0000358D E884FFFFFF          <1>     call walkDPBchain
   176 00003592 7204                <1>     jb .skipSettingDPB
   177 00003594 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   178                              <1> .skipSettingDPB:
   179 00003598 5E                  <1>     pop rsi
   180 00003599 58                  <1>     pop rax
   181                              <1> .exit:
   182                              <1>     return
    18                              <2> %%_ret:
    19 0000359A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   183                              <1> 
   184                              <1> getCDS:     ;Int 4Fh AX=1219h
   185                              <1> ;Gets the device DPB and saves it in the DOS variable
   186                              <1> ;This can be called to get CDS for network drives too!
   187                              <1> ;Input: al = 1 based drive number
   188                              <1> ;Sets workingCDS var with the CDS for the device. 
   189                              <1> ;   If device on a network, sets CF
   190                              <1> ;Returns al with 0-based drive number
   191 0000359B 84C0                <1>     test al, al
   192 0000359D 7508                <1>     jnz .skip
   193 0000359F 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   194 000035A5 FEC0                <1>     inc al
   195                              <1> .skip:
   196 000035A7 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   197 000035A9 56                  <1>     push rsi
   198 000035AA C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   199 000035B1 F605(5DC60300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   200 000035B8 7423                <1>     jz .physDrive
   201                              <1>     ;Invokation via 21/5D00, not yet fully supported
   202                              <1>     ;If returned with CF=CY, consider it an error for now
   203 000035BA 50                  <1>     push rax
   204 000035BB 57                  <1>     push rdi
   205 000035BC 488D3D(FCC50300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   206 000035C3 48893D(6AC60300)    <1>     mov qword [workingCDS], rdi ;Make it current
   207 000035CA 0441                <1>     add al, "A" ;Convert to a drive letter
   208 000035CC E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   209 000035D1 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   210 000035D7 5F                  <1>     pop rdi
   211 000035D8 58                  <1>     pop rax
   212 000035D9 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   213 000035DB EB17                <1>     jmp short .exitOk   ;All oki
   214                              <1> .physDrive:
   215 000035DD E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   216 000035E2 7208                <1>     jc .exitBad
   217 000035E4 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   218 000035EA 7508                <1>     jnz .exitOk ;Exit with flag cleared
   219                              <1>     ;Else Return to unknown error locus
   220                              <1> .exitBad:
   221 000035EC C605(6CC30300)01    <1>     mov byte [errorLocus], eLocUnk
   222                              <1> .exitBad1:
   223 000035F3 F9                  <1>     stc
   224                              <1> .exitOk:
   225 000035F4 5E                  <1>     pop rsi
   226                              <1>     return
    18                              <2> %%_ret:
    19 000035F5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   229                              <1>     ;Gets the CDS for the current drive in al
   230                              <1>     ;Input: al = Drive number, 0 = A ...
   231                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   232                              <1>     ;        CF=CY => al not valid
   233 000035F6 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
   234 000035FC 7202                <1>     jb .ctn
   235 000035FE F9                  <1>     stc 
   236                              <1>     return
    18                              <2> %%_ret:
    19 000035FF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   237                              <1> .ctn:
   238 00003600 50                  <1>     push rax
   239 00003601 52                  <1>     push rdx
   240 00003602 0FB6C0              <1>     movzx eax, al
   241 00003605 48BE5B000000000000- <1>     mov rsi, cds_size
   241 0000360E 00                  <1>
   242 0000360F 31D2                <1>     xor edx, edx
   243 00003611 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   244 00003613 488B35(5DC00300)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   245 0000361A 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   246 0000361D 488935(6AC60300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   247 00003624 5A                  <1>     pop rdx
   248 00003625 58                  <1>     pop rax
   249 00003626 F8                  <1>     clc
   250                              <1>     return
    18                              <2> %%_ret:
    19 00003627 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   251                              <1> 
   252                              <1> 
   253                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   254                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   255                              <1> ;Input: AL = Char to normalise.
   256                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   257                              <1> ;If path separator, set ZF=ZE
   258 00003628 3C5C                <1>     cmp al, "\"
   259 0000362A 7406                <1>     je .exit
   260 0000362C 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   261 0000362E 7502                <1>     jne .exit
   262 00003630 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   263                              <1> .exit:
   264                              <1>     return
    18                              <2> %%_ret:
    19 00003632 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   265                              <1> 
   266                              <1> memCpyCookZ:
   267                              <1> ;Copy a null terminated string from one buffer to another whilst processing
   268                              <1> ; a char (normalise path separators and capitalise). Store terminating null.
   269                              <1> ;Input: rsi = Source buffer
   270                              <1> ;       rdi = Destination buffer
   271 00003633 50                  <1>     push rax
   272                              <1> .lp:
   273 00003634 AC                  <1>     lodsb
   274 00003635 E815000000          <1>     call uppercaseChar
   275 0000363A E8E9FFFFFF          <1>     call swapPathSeparator
   276 0000363F AA                  <1>     stosb
   277 00003640 84C0                <1>     test al, al
   278 00003642 75F0                <1>     jnz .lp
   279 00003644 58                  <1>     pop rax
   280                              <1>     return
    18                              <2> %%_ret:
    19 00003645 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> memCpyRawZ:
   283                              <1> ;Copy a null terminated string from one buffer to another w/o processing. 
   284                              <1> ;   Store terminating null.
   285                              <1> ;Input: rsi = Source buffer
   286                              <1> ;       rdi = Destination buffer
   287 00003646 50                  <1>     push rax
   288                              <1> .lp:
   289 00003647 AC                  <1>     lodsb
   290 00003648 AA                  <1>     stosb
   291 00003649 84C0                <1>     test al, al
   292 0000364B 75FA                <1>     jnz .lp
   293 0000364D 58                  <1>     pop rax
   294                              <1>     return
    18                              <2> %%_ret:
    19 0000364E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   295                              <1> 
   296                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   297                              <1> ;Convert a lowercase char to uppercase
   298                              <1> ; Leave alone uppercase chars and invalid chars
   299                              <1> ;Input: al = Char to convert to uppercase
   300                              <1> ;Output: al = Processed char
   301 0000364F 53                  <1>     push rbx
   302 00003650 3C61                <1>     cmp al, "a"
   303 00003652 7214                <1>     jb .exit
   304 00003654 3C7A                <1>     cmp al, "z"
   305 00003656 7702                <1>     ja .checkExt
   306 00003658 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   307                              <1> .checkExt:
   308 0000365A 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   309 0000365C 720A                <1>     jb .exit
   310 0000365E 2C80                <1>     sub al, 80h ;Turn into table offset
   311 00003660 488D1D69CBFFFF      <1>     lea rbx, extAsciiTbl
   312 00003667 D7                  <1>     xlatb   ;Get converted extended byte into al
   313                              <1> .exit:
   314 00003668 50                  <1>     push rax    ;Save al temporarily
   315 00003669 488D1DE0CBFFFF      <1>     lea rbx, extAsciiSig
   316 00003670 D7                  <1>     xlatb   ;Get the signature in al
   317 00003671 A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   318 00003673 58                  <1>     pop rax
   319 00003674 5B                  <1>     pop rbx
   320                              <1>     return
    18                              <2> %%_ret:
    19 00003675 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   321                              <1> checkPathspecOK:
   322                              <1> ;Input:
   323                              <1> ;rdx -> points to a path to verify if it is ok.
   324                              <1> ;Output:
   325                              <1> ;CF=NC => The path is totally clean and ok to use.
   326                              <1> ;CF=CY => the path is malformed and may be used ONLY if ZF=ZE. 
   327                              <1> ; If ZF=ZE then the only malformed chars are path separators and may be used.
   328                              <1> ;Path separators are \, / and : for drive separation (not counted in ZF setting)
   329                              <1> 
   330                              <1> ;Full paths may start with \\<15-char machine name>\...
   331                              <1> ; or <Drive Letter>:\...
   332                              <1> ;CWD relative paths start with <Drive Letter>:...
   333                              <1> ;Current Drive Root Relative paths may start with \...
   334                              <1> ;Current Drive CWD relative paths start with any other char
   335                              <1> ;FOR NOW, we allow redir but no servers. Too much hassle for now
   336                              <1> 
   337                              <1> ;We accept lc and uc characters in this check function.
   338 00003676 50                  <1>     push rax
   339 00003677 51                  <1>     push rcx
   340 00003678 56                  <1>     push rsi
   341 00003679 57                  <1>     push rdi
   342 0000367A 9C                  <1>     pushfq
   343 0000367B 59                  <1>     pop rcx ;Get flags into ecx
   344 0000367C 81E1BEFFFFFF        <1>     and ecx, ~41h  ;Clear CF and ZF to begin
   345                              <1>     ;First we verify that the first two chars are ok (either X: or \\ or chars)
   346 00003682 668B02              <1>     mov ax, word [rdx]  ;Get the first two chars
   347 00003685 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   348 00003689 740D                <1>     je .okToScanNet
   349 0000368B 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   350 0000368F 7407                <1>     je .okToScanNet
   351 00003691 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   352 00003694 7418                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   353                              <1>     ;Is this a current drive CWD relative or current drive root relative path?
   354                              <1>     ;If so the pathspec is not different to normal, goto scanLoop
   355 00003696 EB2D                <1>     jmp short .scanLoop
   356                              <1> .okToScanNet:
   357 00003698 81C941000000        <1>     or ecx, 41h  ;Set ZF and CF to indicate "technically" a bad char
   358 0000369E EB1E                <1>     jmp short .okToScan
   359                              <1> .badExit:
   360 000036A0 81E1BFFFFFFF        <1>     and ecx, ~40h    ;Clear ZF if ZF was set
   361 000036A6 81C901000000        <1>     or ecx, 1   ;Set carry flag
   362 000036AC EB3C                <1>     jmp short .exit
   363                              <1> .diskPath:
   364                              <1> ;Disk Letter must be A-Z (or a-z)
   365 000036AE 3C41                <1>     cmp al, "A"
   366 000036B0 72EE                <1>     jb .badExit
   367 000036B2 3C7A                <1>     cmp al, "z"
   368 000036B4 77EA                <1>     ja .badExit
   369 000036B6 3C61                <1>     cmp al, "a"
   370 000036B8 7304                <1>     jae .okToScan
   371 000036BA 3C5A                <1>     cmp al, "Z"
   372 000036BC 77E2                <1>     ja .badExit
   373                              <1> .okToScan:
   374 000036BE 4881C602000000      <1>     add rsi, 2  ;Skip first two chars now
   375                              <1> .scanLoop:
   376 000036C5 AC                  <1>     lodsb   ;Get char, inc rsi
   377 000036C6 84C0                <1>     test al, al  ;Is al=0, i.e string terminator?
   378 000036C8 7420                <1>     je .exit
   379 000036CA E822000000          <1>     call checkCharValid ;Validity check
   380                              <1>     ;If ZF=ZE, check if it is a path separator
   381 000036CF 75F4                <1>     jnz .scanLoop   ;Char was ok if ZF=NZ, loop around
   382 000036D1 3C5C                <1>     cmp al, "\"
   383 000036D3 740D                <1>     je .pathSepFnd
   384 000036D5 3C2F                <1>     cmp al, "/"
   385 000036D7 7409                <1>     je .pathSepFnd
   386 000036D9 E826000000          <1>     call checkCharOk    ;Check if it is ok, i.e. a period or wildcard
   387 000036DE 75E5                <1>     jne .scanLoop    ;Pretend they are alright!
   388 000036E0 EBBE                <1>     jmp short .badExit
   389                              <1> .pathSepFnd:
   390 000036E2 81C941000000        <1>     or ecx, 41h  ;Set ZF and CF to indicate "technically" a bad char    
   391 000036E8 EBDB                <1>     jmp short .scanLoop
   392                              <1> .exit:
   393 000036EA 51                  <1>     push rcx    ;Push flags back on
   394 000036EB 9D                  <1>     popfq   ;And pop them into the flags register
   395 000036EC 5F                  <1>     pop rdi
   396 000036ED 5E                  <1>     pop rsi
   397 000036EE 59                  <1>     pop rcx
   398 000036EF 58                  <1>     pop rax
   399                              <1>     return
    18                              <2> %%_ret:
    19 000036F0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   400                              <1> 
   401                              <1> checkCharValid:
   402                              <1> ;If ZF=ZE => Invalid Char
   403                              <1> ;If ZF=NZ => Valid Char
   404 000036F1 51                  <1>     push rcx
   405 000036F2 57                  <1>     push rdi
   406 000036F3 B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   407 000036F8 488D3DA1CAFFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   408 000036FF F2AE                <1>     repne scasb ;Scan. Stop when equal
   409 00003701 5F                  <1>     pop rdi
   410 00003702 59                  <1>     pop rcx
   411                              <1>     return
    18                              <2> %%_ret:
    19 00003703 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   412                              <1> checkCharOk:
   413                              <1> ;Same as checkCharValid except DOES not return error on * ? \ / .
   414 00003704 3C2E                <1>     cmp al, "."
   415 00003706 7412                <1>     je .exitOk
   416 00003708 3C2A                <1>     cmp al, "*"
   417 0000370A 740E                <1>     je .exitOk
   418 0000370C 3C3F                <1>     cmp al, "?"
   419 0000370E 740A                <1>     je .exitOk
   420 00003710 3C5C                <1>     cmp al, "\"
   421 00003712 7406                <1>     je .exitOk
   422 00003714 3C2F                <1>     cmp al, "/"
   423 00003716 7402                <1>     je .exitOk
   424                              <1> .ok:
   425 00003718 EBD7                <1>     jmp short checkCharValid
   426                              <1> .exitOk:
   427 0000371A 50                  <1>     push rax
   428 0000371B 0C01                <1>     or al, 1    ;Always clears the ZF
   429 0000371D 58                  <1>     pop rax
   430                              <1>     return
    18                              <2> %%_ret:
    19 0000371E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    36                                  %include "./Source/Kernel/dosMain.asm"
    37                              <1> ;-----------------------------------:
    38                              <1> ;        Main Kernel dispatch       :
    39                              <1> ;            and routines           :
    40                              <1> ;-----------------------------------:
    41                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    42                              <1> ;ah = Function number, all other registers have various meanings
    43                              <1>  %if DEBUG
    44                              <1>     ;Entry function
    45                              <1>     debugEnterM
    46                              <1>     lea rbp, .l0000
    47                              <1>     call debPrintNullString
    48                              <1>     call debPrintFunctionName
    49                              <1>     jmp short .l0001
    50                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    51                              <1> .l0001:    
    52                              <1>     debugExitM
    53                              <1>     %endif
    54 0000371F FA                  <1>     cli ;Halt external interrupts
    55 00003720 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    56 00003721 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    57 00003724 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    58                              <1>     ;Cherry pick functions
    59 0000372A 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    60 0000372D 722C                <1>     jb .fsbegin   ;If below skip these checks
    61 0000372F 0F8470020000        <1>     je ctrlBreakCheck
    62 00003735 80FC64              <1>     cmp ah, 64h
    63 00003738 0F84B0020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    64 0000373E 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    65 00003740 80FC51              <1>     cmp ah, 51h
    66 00003743 0F8493020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    67 00003749 80FC62              <1>     cmp ah, 62h
    68 0000374C 0F8493020000        <1>     je getPSPaddr          ;Calls the above function
    69 00003752 80FC50              <1>     cmp ah, 50h
    70 00003755 0F8478020000        <1>     je setCurrProcessID
    71                              <1> .fsbegin:
    72 0000375B E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    73 00003760 48891D(E4C30300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    74 00003767 66C705(A5C30300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    74 0000376F 00                  <1>
    75 00003770 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
    76 00003777 488905(CCC30300)    <1>     mov qword [oldoldRSP], rax
    77 0000377E FE05(6AC30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    78 00003784 488925(DCC30300)    <1>     mov qword [oldRSP], rsp
    79                              <1> ;Network related variable resetting
    80 0000378B C605(5DC60300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    81                              <1> ;Here, we want to save oldRSP in the callers PSP
    82 00003792 803D(6AC30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    83 00003799 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    84 0000379B 488B05(81C30300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    85 000037A2 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    86                              <1> .fsb1:
    87 000037A6 58                  <1>     pop rax     ;Get old rax back
    88 000037A7 50                  <1>     push rax    ;and push it back onto the stack
    89                              <1> .abortEP:
    90                              <1> .charFun0CEP:
    91 000037A8 488D25(05CC0300)    <1>     lea rsp, critStakTop
    92 000037AF FB                  <1>     sti         ;Reenable interrupts
    93                              <1> 
    94 000037B0 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    95 000037B2 881D(F5C30300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    96 000037B8 C605(F6C30300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    97 000037BF 881D(CBC30300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
    98 000037C5 881D(ECC30300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    99                              <1> 
   100 000037CB 50                  <1>     push rax        ;Save rax to use temporarily as table base 
   101 000037CC 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   102 000037CE D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   103 000037D0 488D05F9CAFFFF      <1>     lea rax, kDispTbl
   104 000037D7 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   105 000037DA 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   106 000037DE 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   107 000037E1 58                  <1>     pop rax
   108                              <1> 
   109 000037E2 84E4                <1>     test ah, ah     ;Simple Terminate function?
   110 000037E4 741C                <1>     jz .fddiskOp
   111 000037E6 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   112 000037E9 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   113 000037EB 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   114 000037EE 7712                <1>     ja .fddiskOp
   115                              <1> ;Char operations here
   116 000037F0 F605(69C30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   117 000037F7 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   118 000037F9 488D25(94D20300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   119 00003800 EB40                <1>     jmp short .fdGoToFunction
   120                              <1> .fddiskOp:
   121                              <1>     ;Disk operations go here
   122                              <1>     ;Save rax on entry to a disk funciton
   123 00003802 488905(95C30300)    <1>     mov qword [oldRAX], rax
   124                              <1>     ;Clear up error info
   125 00003809 C605(6CC30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   126 00003810 C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   127 00003817 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   128                              <1> 
   129 0000381E 50                  <1>     push rax
   130 0000381F B482                <1>     mov ah, 82h ;Cancel all critical section!
   131 00003821 CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   132 00003823 58                  <1>     pop rax
   133                              <1> 
   134 00003824 C605(F6C30300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   135 0000382B 488D25(D4D80300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   136 00003832 F605(94C30300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   137 00003839 7407                <1>     jz .fdGoToFunction
   138                              <1> ; HANDLE CTRL+BREAK HERE!
   139 0000383B 50                  <1>     push rax
   140 0000383C E825E3FFFF          <1>     call checkBreak   ; Check for a ^C
   141 00003841 58                  <1>     pop rax
   142                              <1> .fdGoToFunction:
   143 00003842 48871D(E4C30300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   144                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   145                              <1>     ;
   146                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   147                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   148                              <1>     ;
   149                              <1>     %if DEBUG && REGS
   150                              <1>     ;Print stack if necessary function
   151                              <1>     debugEnterM
   152                              <1>     call debPrintDOSStack
   153                              <1>     debugExitM
   154                              <1>     %endif
   155 00003849 FF15(E4C30300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   156                              <1>     %if DEBUG
   157                              <1>     ;Entry function
   158                              <1>     debugEnterM
   159                              <1>     lea rbp, .l0002
   160                              <1>     call debPrintNullString
   161                              <1>     jmp short .l0003
   162                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   163                              <1> .l0003:    
   164                              <1>     debugExitM
   165                              <1>     %endif
   166                              <1>     %if DEBUG && REGS
   167                              <1>     ;Exit function
   168                              <1>     debugEnterM
   169                              <1>     call debPrintDOSStack
   170                              <1>     debugExitM
   171                              <1>     %endif
   172                              <1> .fdExit:
   173 0000384F FA                  <1>     cli     ;Redisable interrupts
   174 00003850 FE0D(6AC30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   175 00003856 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   176 0000385D 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   177 00003860 488B05(CCC30300)    <1>     mov rax, qword [oldoldRSP]
   178 00003867 488905(DCC30300)    <1>     mov qword [oldRSP], rax
   179 0000386E E806000000          <1>     call dosPopRegs  ;Pop the frame
   180 00003873 48CF                <1>     iretq
   181                              <1> .fdExitBad:
   182 00003875 30C0                <1>     xor al, al
   183                              <1> defaultIretq:
   184 00003877 48CF                <1>     iretq
   185                              <1> dosPopRegs:
   186 00003879 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   187 0000387F 58                  <1>     pop rax
   188 00003880 5B                  <1>     pop rbx
   189 00003881 59                  <1>     pop rcx
   190 00003882 5A                  <1>     pop rdx
   191 00003883 5E                  <1>     pop rsi
   192 00003884 5F                  <1>     pop rdi
   193 00003885 5D                  <1>     pop rbp
   194 00003886 4158                <1>     pop r8
   195 00003888 4159                <1>     pop r9
   196 0000388A FF25(D4C30300)      <1>     jmp qword [dosReturn]
   197                              <1> dosPushRegs:
   198 00003890 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   199 00003896 4151                <1>     push r9
   200 00003898 4150                <1>     push r8
   201 0000389A 55                  <1>     push rbp
   202 0000389B 57                  <1>     push rdi
   203 0000389C 56                  <1>     push rsi
   204 0000389D 52                  <1>     push rdx
   205 0000389E 51                  <1>     push rcx
   206 0000389F 53                  <1>     push rbx
   207 000038A0 50                  <1>     push rax
   208 000038A1 FF25(D4C30300)      <1>     jmp qword [dosReturn]
   209                              <1> dosCrit1Enter:
   210                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    18                              <2> %%_ret:
    19 000038A7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   211 000038A8 B801800000          <1>     mov eax, 8001h
   212 000038AD CD4A                <1>     int 4ah
   213 000038AF 58                  <1>     pop rax
   214                              <1>     return
    18                              <2> %%_ret:
    19 000038B0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   215                              <1> dosCrit1Exit:
   216                              <1>     return
    18                              <2> %%_ret:
    19 000038B1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   217 000038B2 B801810000          <1>     mov eax, 8101h
   218 000038B7 CD4A                <1>     int 4ah
   219 000038B9 58                  <1>     pop rax
   220                              <1>     return
    18                              <2> %%_ret:
    19 000038BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   221                              <1> dosCrit2Enter:
   222                              <1>     return
    18                              <2> %%_ret:
    19 000038BB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   223 000038BC B802800000          <1>     mov eax, 8002h
   224 000038C1 CD4A                <1>     int 4ah
   225 000038C3 58                  <1>     pop rax
   226                              <1>     return
    18                              <2> %%_ret:
    19 000038C4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   227                              <1> dosCrit2Exit:
   228                              <1>     return
    18                              <2> %%_ret:
    19 000038C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   229 000038C6 B802810000          <1>     mov eax, 8102h
   230 000038CB CD4A                <1>     int 4ah
   231 000038CD 58                  <1>     pop rax
   232                              <1>     return
    18                              <2> %%_ret:
    19 000038CE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> ;All good exits destroy AT LEAST ax 
   235                              <1> extGoodExit2:
   236                              <1> ;Good exit with an extended return code in eax
   237 000038CF E83AFCFFFF          <1>     call getUserRegs
   238 000038D4 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   239 000038D6 EB08                <1>     jmp short extGoodExit.extGoodCommon
   240                              <1> extGoodExit:
   241                              <1> ;Good exit
   242                              <1> ;Return code in ax
   243 000038D8 E831FCFFFF          <1>     call getUserRegs
   244 000038DD 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   245                              <1> .extGoodCommon:
   246 000038E0 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   247 000038E4 F8                  <1>     clc
   248                              <1>     return
    18                              <2> %%_ret:
    19 000038E5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   249                              <1> extErrExit:
   250                              <1> ;The extended error exit from DOS
   251                              <1> ;Jumped to with AL=Extended error code
   252                              <1> ;Can be called too.
   253                              <1> ;Input: al = Extended error code
   254                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   255                              <1> ;   Returns with: eax = xLat Error
   256                              <1> ;                 rsi = callerFrame
   257 000038E6 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   258 000038E9 E813000000          <1>     call xLatError
   259 000038EE E891000000          <1>     call checkFail
   260 000038F3 E816FCFFFF          <1>     call getUserRegs
   261 000038F8 668906              <1>     mov word [rsi + callerFrame.rax], ax
   262 000038FB 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   263 000038FF F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   264                              <1>     return
    18                              <2> %%_ret:
    19 00003900 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   265                              <1> xLatError:
   266                              <1> ;Translates the error code given in ax and sets error code in the var
   267                              <1> ; Input: ax = Extended Error Code
   268                              <1> ; Output: ax = Potentially translated Error Code
   269                              <1> ;         [errorExCde] = Original Error Code
   270                              <1> ;Preserves all registers except ax
   271                              <1> ;AH is always returned as 0
   272 00003901 53                  <1>     push rbx
   273 00003902 51                  <1>     push rcx
   274 00003903 56                  <1>     push rsi
   275 00003904 668905(6DC30300)    <1>     mov word [errorExCde], ax
   276 0000390B 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   277 0000390D 488D357CC7FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   278                              <1> .readEntry:
   279 00003914 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   280 00003916 3CFF                <1>     cmp al, -1
   281 00003918 741F                <1>     je .skipXlat
   282 0000391A 3A05(96C30300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   283 00003920 7408                <1>     je .found
   284                              <1>     ;Here, entry not found, goto next entry
   285 00003922 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   286 00003925 4801C6              <1>     add rsi, rax    ;Goto next entry
   287 00003928 EBEA                <1>     jmp short .readEntry
   288                              <1> .found:
   289                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   290 0000392A 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   291                              <1> .mainSearch:
   292 0000392D AC                  <1>     lodsb   ;Get one byte into al
   293 0000392E 38C3                <1>     cmp bl, al  ;Check against the error code
   294 00003930 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   295 00003932 FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   296 00003934 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   297                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   298 00003936 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   299                              <1> .skipXlat:
   300 00003939 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   301 0000393B 5E                  <1>     pop rsi
   302 0000393C 59                  <1>     pop rcx
   303 0000393D 5B                  <1>     pop rbx
   304                              <1>     return
    18                              <2> %%_ret:
    19 0000393E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   305                              <1> setErrorVars:
   306                              <1> ;Looks up the error code in the variable and sets the other error vars
   307                              <1> ;Called with the lookup table in rsi
   308                              <1> ;All regs preserved
   309 0000393F 50                  <1>     push rax
   310 00003940 53                  <1>     push rbx
   311 00003941 51                  <1>     push rcx
   312 00003942 56                  <1>     push rsi
   313 00003943 0FB71D(6DC30300)    <1>     movzx ebx, word [errorExCde]
   314 0000394A B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   315                              <1> .readEntry:
   316 0000394F AD                  <1>     lodsd   ;Read the dword table entry into eax
   317 00003950 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   318 00003955 7428                <1>     je .exit    
   319 00003957 38D8                <1>     cmp al, bl  ;Compare the error codes
   320 00003959 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   321 0000395B D3E8                <1>     shr eax, cl
   322 0000395D 3CFF                <1>     cmp al, -1
   323 0000395F 7406                <1>     je .skipClass
   324 00003961 8805(70C30300)      <1>     mov byte [errorClass], al
   325                              <1> .skipClass:
   326 00003967 D3E8                <1>     shr eax, cl
   327 00003969 3CFF                <1>     cmp al, -1
   328 0000396B 7406                <1>     je .skipAct
   329 0000396D 8805(6FC30300)      <1>     mov byte [errorAction], al
   330                              <1> .skipAct:
   331 00003973 D3E8                <1>     shr eax, cl
   332 00003975 3CFF                <1>     cmp al, -1
   333 00003977 7406                <1>     je .exit
   334 00003979 8805(6CC30300)      <1>     mov byte [errorLocus], al
   335                              <1> .exit:
   336 0000397F 5E                  <1>     pop rsi
   337 00003980 59                  <1>     pop rcx
   338 00003981 5B                  <1>     pop rbx
   339 00003982 58                  <1>     pop rax
   340                              <1>     return
    18                              <2> %%_ret:
    19 00003983 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   341                              <1> checkFail:
   342                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   343                              <1> ; and swaps the var error code if so
   344 00003984 803D(CBC30300)00    <1>     cmp byte [Int44Fail], 0
   345 0000398B 7509                <1>     jnz .skipFail
   346 0000398D 66C705(6DC30300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   346 00003995 00                  <1>
   347                              <1> .skipFail:
   348 00003996 56                  <1>     push rsi
   349 00003997 488D358EC7FFFF      <1>     lea rsi, extErrTbl
   350 0000399E E89CFFFFFF          <1>     call setErrorVars
   351 000039A3 5E                  <1>     pop rsi
   352                              <1>     return
    18                              <2> %%_ret:
    19 000039A4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   353                              <1> ;========================================:
   354                              <1> ;      Reentrant Kernel Functions        :
   355                              <1> ;========================================:
   356                              <1> ctrlBreakCheck:    ;ah = 33h
   357 000039A5 84C0                <1>     test al, al
   358 000039A7 7508                <1>     jnz .cbcget  ;Get the state or other functions
   359 000039A9 8A15(94C30300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   360 000039AF 48CF                <1>     iretq
   361                              <1> .cbcget:
   362 000039B1 3C02                <1>     cmp al, 02h
   363 000039B3 771A                <1>     ja .cbcBad
   364 000039B5 740D                <1>     jz .cbcxchg ;Function 2
   365 000039B7 52                  <1>     push rdx
   366 000039B8 80E201              <1>     and dl, 1   ;Get only the bottom bit
   367 000039BB 8815(94C30300)      <1>     mov byte [breakFlag], dl    ;Set the state
   368 000039C1 5A                  <1>     pop rdx
   369 000039C2 48CF                <1>     iretq
   370                              <1> .cbcxchg:
   371 000039C4 80E201              <1>     and dl, 1
   372 000039C7 8615(94C30300)      <1>     xchg byte [breakFlag], dl
   373 000039CD 48CF                <1>     iretq
   374                              <1> .cbcBad:
   375 000039CF B0FF                <1>     mov al, -1
   376 000039D1 48CF                <1>     iretq
   377                              <1> 
   378                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   379 000039D3 48891D(81C30300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   380 000039DA 48CF                <1>     iretq
   381                              <1> 
   382                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   383 000039DC 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   384 000039E3 48CF                <1>     iretq
   385                              <1> 
   386                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   387 000039E5 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   388 000039EC 48CF                <1>     iretq
   389                              <1> 
   390                              <1> setDriverLookahead:;ah = 64h, reserved
   391 000039EE 48CF                <1>     iretq
   392                              <1> 
   393                              <1> ;========================================:
   394                              <1> ;            Kernel Functions            :
   395                              <1> ;========================================:
   396                              <1> diskReset:         ;ah = 0Dh
   397                              <1> ;Flush all dirty buffers to disk
   398 000039F0 E8B2FEFFFF          <1>     call dosCrit1Enter
   399 000039F5 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   400                              <1> .drCheckBuffer:
   401 000039FC F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   402 00003A00 7407                <1>     jz .drGotoNextBuffer
   403                              <1> .drFlushBuffer:
   404 00003A02 E86DCEFFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   405 00003A07 720C                <1>     jc .drExit
   406                              <1> .drGotoNextBuffer:
   407 00003A09 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   408 00003A0C 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   409 00003A13 75E7                <1>     jne .drCheckBuffer
   410                              <1> .drExit:
   411 00003A15 E897FEFFFF          <1>     call dosCrit1Exit
   412 00003A1A B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   413 00003A1F CD4F                <1>     int 4fh
   414                              <1>     return
    18                              <2> %%_ret:
    19 00003A21 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   415                              <1> 
   416                              <1> selectDisk:        ;ah = 0Eh
   417                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   418 00003A22 88D0                <1>     mov al, dl
   419 00003A24 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   420 00003A26 E807FBFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   421 00003A2B 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   422 00003A2D 8805(93C30300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   423                              <1> .skipSettingCurrent:
   424 00003A33 0FB605(70C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   425                              <1>     return
    18                              <2> %%_ret:
    19 00003A3A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   426                              <1> 
   427                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   428 00003A3B 8A05(93C30300)      <1>     mov al, byte [currentDrv]
   429                              <1>     return
    18                              <2> %%_ret:
    19 00003A41 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   430                              <1> 
   431                              <1> FATinfoDefault:    ;ah = 1Bh
   432 00003A42 30D2                <1>     xor dl, dl
   433                              <1> FATinfoDevice:     ;ah = 1Ch
   434                              <1> ;Input: dl = 1 based drive number
   435                              <1> ;Output:
   436                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   437                              <1> ;cx = bytes per sector
   438                              <1> ;edx = total number of clusters
   439                              <1> ;rbx = Ptr to media ID byte
   440 00003A44 84D2                <1>     test dl, dl
   441 00003A46 7508                <1>     jnz .fidSkipdefault
   442 00003A48 8A15(93C30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   443 00003A4E FEC2                <1>     inc dl
   444                              <1> .fidSkipdefault:
   445 00003A50 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   446                              <1> ;Walk the dpb chain manually
   447 00003A52 88D0                <1>     mov al, dl  ;Move drive number into al
   448 00003A54 E842FBFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   449 00003A59 7307                <1>     jnc .fidCDSFound
   450 00003A5B B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   451 00003A60 EB2E                <1>     jmp short .error 
   452                              <1> .fidCDSFound:
   453 00003A62 E857FAFFFF          <1>     call getDiskData
   454 00003A67 7227                <1>     jc .error
   455                              <1> ;Now we have that:
   456                              <1> ;al = sectors per cluster
   457                              <1> ;ah = media ID byte
   458                              <1> ;ebx = total clusters
   459                              <1> ;cx = bytes per sector
   460                              <1> ;edx = number of available clusters
   461 00003A69 E8A0FAFFFF          <1>     call getUserRegs
   462 00003A6E 8825(DCC60300)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   463 00003A74 30E4                <1>     xor ah, ah
   464 00003A76 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   465 00003A79 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   466 00003A7D 488D1D(DCC60300)    <1>     lea rbx, mediaByte
   467 00003A84 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   468 00003A88 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   469                              <1> .badExit:
   470 00003A8C 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   471                              <1>     return
    18                              <2> %%_ret:
    19 00003A8F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   472                              <1> .error:
   473 00003A90 E851FEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   474 00003A95 66B8FFFF            <1>     mov ax, -1
   475 00003A99 EBF1                <1>     jmp short .badExit
   476                              <1> 
   477                              <1> setIntVector:      ;ah = 25h
   478                              <1> ;Called with:
   479                              <1> ;   rdx = Pointer to interrupt handler
   480                              <1> ;   al = Interrupt number
   481 00003A9B 50                  <1>     push rax    ;Preserve all registers in call
   482 00003A9C 51                  <1>     push rcx
   483 00003A9D 52                  <1>     push rdx
   484 00003A9E 56                  <1>     push rsi
   485 00003A9F 55                  <1>     push rbp
   486 00003AA0 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   487 00003AA2 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   488                              <1> ;First call to get default BIOS segement selector and attribute word
   489 00003AA8 88C3                <1>     mov bl, al  ;Set interrupt number 
   490 00003AAA B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   491 00003AAF CD35                <1>     int 35h
   492 00003AB1 E858FAFFFF          <1>     call getUserRegs
   493 00003AB6 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   494 00003ABA 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   495 00003ABC 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   496                              <1> ;dx preserves the attribute word
   497 00003ABE B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   498 00003AC3 CD35                <1>     int 35h
   499 00003AC5 5D                  <1>     pop rbp
   500 00003AC6 5E                  <1>     pop rsi
   501 00003AC7 5A                  <1>     pop rdx
   502 00003AC8 59                  <1>     pop rcx
   503 00003AC9 58                  <1>     pop rax
   504                              <1>     return
    18                              <2> %%_ret:
    19 00003ACA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   505                              <1> 
   506                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   507 00003ACB 8805(32C30300)      <1>     mov byte [verifyFlag], al
   508 00003AD1 8025(32C30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   509                              <1>     return
    18                              <2> %%_ret:
    19 00003AD8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   510                              <1> getDOSversion:     ;ah = 30h
   511 00003AD9 E830FAFFFF          <1>     call getUserRegs
   512 00003ADE 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   513 00003AE0 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   514 00003AE3 668B0516C5FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   515 00003AEA 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   516                              <1>     return
    18                              <2> %%_ret:
    19 00003AED C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   517                              <1> 
   518                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   519                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   520 00003AEE 30D2                <1>     xor dl, dl
   521                              <1> getDeviceDPBptr:   ;ah = 32h
   522                              <1> ;On entry: dl = Drive number
   523                              <1> ;On exit: rbx = DPB pointer
   524 00003AF0 84D2                <1>     test dl, dl
   525 00003AF2 7508                <1>     jnz .gddpskipdefault
   526 00003AF4 8A15(93C30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   527 00003AFA FEC2                <1>     inc dl
   528                              <1> .gddpskipdefault:
   529                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   530 00003AFC FECA                <1>     dec dl
   531 00003AFE 88D0                <1>     mov al, dl
   532 00003B00 E896FAFFFF          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   533 00003B05 722C                <1>     jc .bad
   534 00003B07 488B3D(6AC60300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   535 00003B0E 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   536 00003B14 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   537                              <1>     ;Here ONLY if accessing critical Disk data structures
   538 00003B16 E88CFDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   539 00003B1B E869F7FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   540 00003B20 E88CFDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   541 00003B25 720C                <1>     jc .bad
   542 00003B27 E8E2F9FFFF          <1>     call getUserRegs
   543 00003B2C 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   544 00003B30 30C0                <1>     xor al, al
   545                              <1>     return
    18                              <2> %%_ret:
    19 00003B32 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   546                              <1> .bad:
   547 00003B33 B0FF                <1>     mov al, -1
   548                              <1>     return
    18                              <2> %%_ret:
    19 00003B35 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   549                              <1> 
   550                              <1> getInDOSflagPtr:   ;ah = 34h
   551 00003B36 488D15(6AC30300)    <1>     lea rdx, inDOS
   552 00003B3D E8CCF9FFFF          <1>     call getUserRegs
   553 00003B42 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   554                              <1>     return
    18                              <2> %%_ret:
    19 00003B46 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   555                              <1> 
   556                              <1> getIntVector:      ;ah = 35h
   557                              <1> ;Called with:
   558                              <1> ;   al = Interrupt Number
   559                              <1> ;Returns:
   560                              <1> ;   rbx = Pointer to interrupt handler
   561 00003B47 E8B4F9FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   562 00003B4C E8BDF9FFFF          <1>     call getUserRegs
   563 00003B51 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   564 00003B55 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   565                              <1>     return
    18                              <2> %%_ret:
    19 00003B57 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   566                              <1> 
   567                              <1> getDiskFreeSpace:  ;ah = 36h
   568                              <1> ;Input: Drive number in dl (0 = Current)
   569                              <1> ;Output:    ax = sectors per cluster
   570                              <1> ;           ebx = number of free clusters
   571                              <1> ;           cx = bytes per sector
   572                              <1> ;           edx = total clusters on drive
   573 00003B58 84D2                <1>     test dl, dl
   574 00003B5A 7508                <1>     jnz .gdfsSkipdefault
   575 00003B5C 8A15(93C30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   576 00003B62 FEC2                <1>     inc dl
   577                              <1> .gdfsSkipdefault:
   578 00003B64 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   579 00003B66 88D0                <1>     mov al, dl
   580 00003B68 E82EFAFFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   581 00003B6D 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   582                              <1> ;Else, we at an error.
   583                              <1> ;Simply return with CY set and error code in al with extended error info
   584 00003B6F B80F000000          <1>     mov eax, errBadDrv
   585 00003B74 E86DFDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   586                              <1>     ;extErrExit sets rsi to caller regs
   587 00003B79 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   588                              <1>     return
    18                              <2> %%_ret:
    19 00003B7E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   589                              <1> .gdfsCDSFound:
   590 00003B7F E83AF9FFFF          <1>     call getDiskData
   591 00003B84 7219                <1>     jc .error
   592                              <1> ;Now we have that:
   593                              <1> ;al = sectors per cluster
   594                              <1> ;ah = media ID byte
   595                              <1> ;ebx = total clusters
   596                              <1> ;cx = bytes per sector
   597                              <1> ;edx = number of available clusters
   598 00003B86 E883F9FFFF          <1>     call getUserRegs
   599 00003B8B 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   600 00003B8D 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   601 00003B90 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   602 00003B94 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   603 00003B97 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   604                              <1> .badExit:
   605 00003B9B 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   606                              <1>     return
    18                              <2> %%_ret:
    19 00003B9E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   607                              <1> .error:
   608 00003B9F E842FDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   609 00003BA4 66B8FFFF            <1>     mov ax, -1
   610 00003BA8 EBF1                <1>     jmp short .badExit
   611                              <1> 
   612                              <1> 
   613                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   614 00003BAA 31C0                <1>     xor eax, eax
   615 00003BAC 668705(91C30300)    <1>     xchg ax, word [errorLevel]
   616 00003BB3 E920FDFFFF          <1>     jmp extGoodExit
   617                              <1> 
   618                              <1> getSysVarsPtr:     ;ah = 52h
   619 00003BB8 488D15(33C00300)    <1>     lea rdx, sysVarsPtr
   620 00003BBF E84AF9FFFF          <1>     call getUserRegs
   621 00003BC4 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   622                              <1>     return
    18                              <2> %%_ret:
    19 00003BC8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   623                              <1> 
   624                              <1> 
   625                              <1> ;AH = 53h - CREATE DPB
   626                              <1> createDPB:         ;generates a DPB from a given BPB
   627                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   628                              <1> ;This is done so that the other fields of the DPB can be recycled
   629                              <1> ;Input: rsi = ptr to the BPB
   630                              <1> ;       rbp = ptr to the DPB
   631                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   632                              <1> ;bMediaDescriptor
   633 00003BC9 8A4615              <1>     mov al, byte [rsi + bpb.media]
   634 00003BCC 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   635                              <1> ;dFirstFreeCluster
   636 00003BCF C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   637                              <1> ;dNumberOfFreeClusters
   638 00003BD6 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   639                              <1> ;wBytesPerSector
   640 00003BDD 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   641 00003BE1 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   642                              <1> ;bMaxSectorInCluster
   643 00003BE5 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   644 00003BE8 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   645 00003BEA 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   646                              <1> ;bSectorsPerClusterShift
   647 00003BED FEC0                <1>     inc al
   648 00003BEF 30C9                <1>     xor cl, cl
   649                              <1> .cd2:
   650 00003BF1 D0E8                <1>     shr al, 1
   651 00003BF3 7404                <1>     jz .cd3
   652 00003BF5 FEC1                <1>     inc cl
   653 00003BF7 EBF8                <1>     jmp short .cd2
   654                              <1> .cd3:
   655 00003BF9 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   656                              <1> ;wFAToffset, number of reserved sectors in partition
   657 00003BFC 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   658 00003C00 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   659                              <1> ;bNumberOfFATs
   660 00003C04 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   661 00003C07 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   662                              <1> ;wNumberRootDirSectors
   663 00003C0A 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   664 00003C0E C1E005              <1>     shl eax, 5  ;Multiply by 32
   665 00003C11 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   666 00003C15 FFC9                <1>     dec ecx
   667 00003C17 01C8                <1>     add eax, ecx
   668 00003C19 31D2                <1>     xor edx, edx    ;Clear for divide
   669 00003C1B F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   670 00003C1D 66894509            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   671                              <1> ;dFATlength, get the FAT length
   672 00003C21 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   673 00003C25 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   674 00003C28 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   675 00003C2A 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   676 00003C2D 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   677                              <1> ;Complex cases below...
   678                              <1> ;dClusterHeapOffset, start sector of the data area
   679 00003C30 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   680 00003C34 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   681 00003C37 85C0                <1>     test eax, eax
   682 00003C39 0F44C3              <1>     cmovz eax, ebx
   683                              <1> ;eax = FATsz
   684 00003C3C 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   685 00003C40 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   686 00003C43 85DB                <1>     test ebx, ebx
   687 00003C45 0F44D9              <1>     cmovz ebx, ecx 
   688                              <1> ;ebx = TotSec
   689 00003C48 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   690 00003C4B 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   691                              <1> .cd4:
   692 00003C4D 01C2                <1>     add edx, eax
   693 00003C4F FEC9                <1>     dec cl
   694 00003C51 75FA                <1>     jnz .cd4
   695 00003C53 89D0                <1>     mov eax, edx    ;Store product in eax
   696 00003C55 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   697 00003C59 01D0                <1>     add eax, edx
   698 00003C5B 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   699 00003C5F 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   700                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   701                              <1>     ;aka eax = Start sector of the data area in volume
   702 00003C61 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   703                              <1> ;dClusterCount
   704 00003C64 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   705 00003C66 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   706 00003C68 31D2                <1>     xor edx, edx
   707 00003C6A BB01000000          <1>     mov ebx, 1
   708 00003C6F 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   709 00003C72 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   710 00003C74 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   711 00003C76 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   712 00003C78 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   713                              <1> ;dFirstUnitOfRootDir
   714 00003C7B 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   715 00003C80 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   716 00003C83 7709                <1>     ja .cd5
   717                              <1>     ;Else, we need to find the first sector of the root directory
   718                              <1>     ;Get the start sector of data area in volume 
   719                              <1>     ; and sub the number of sectors in the root directory
   720 00003C85 8B450B              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   721 00003C88 0FB75D09            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   722 00003C8C 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   723                              <1> .cd5:
   724 00003C8E 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   725                              <1> ;Exit epilogue
   726 00003C91 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   727 00003C98 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   728                              <1>     %if DEBUG && DPBINFO
   729                              <1>     ;Print DPB 
   730                              <1>     debugEnterM
   731                              <1>     push rbp
   732                              <1>     lea rbp, .l0000
   733                              <1>     call debPrintNullString
   734                              <1>     pop rbp
   735                              <1>     call debDPBBPBptr
   736                              <1>     call debMakeDebuggerRespond
   737                              <1>     jmp short .l0001
   738                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   739                              <1> .l0001:
   740                              <1>     debugExitM
   741                              <1>     %endif
   742                              <1>     return
    18                              <2> %%_ret:
    19 00003C9A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   743                              <1> 
   744                              <1> getVerifySetting:  ;ah = 54h
   745 00003C9B 8A05(32C30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   746                              <1>     return
    18                              <2> %%_ret:
    19 00003CA1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   747                              <1> 
   748                              <1> getExtendedError:  ;ah = 59h
   749 00003CA2 E867F8FFFF          <1>     call getUserRegs
   750 00003CA7 668B05(6DC30300)    <1>     mov ax, word [errorExCde]
   751 00003CAE 8A2D(6CC30300)      <1>     mov ch, byte [errorLocus]
   752 00003CB4 8A3D(70C30300)      <1>     mov bh, byte [errorClass]
   753 00003CBA 8A1D(6FC30300)      <1>     mov bl, byte [errorAction]
   754 00003CC0 668906              <1>     mov word [rsi + callerFrame.rax], ax
   755 00003CC3 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   756 00003CC7 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   757                              <1>     return
    18                              <2> %%_ret:
    19 00003CCA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   758                              <1> dosServer:  ;ah = 5Dh
   759                              <1> netServices:   ;ah = 5Eh, do nothing
   760                              <1> netRedir:;ah = 5Fh, do nothing
   761                              <1>     return
    18                              <2> %%_ret:
    19 00003CCB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   762                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   763                              <1> noOp:
   764                              <1>     return
    18                              <2> %%_ret:
    19 00003CCC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    37                                  %include "./Source/Kernel/multiplx.asm"
    38                              <1> ;Default multiplexer. Current only installed function is ah=12h
    39                              <1> 
    40                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    41 00003CCD 80FC12              <1>     cmp ah, 12h
    42 00003CD0 751C                <1>     jne .exit       ;Exit if not for us
    43 00003CD2 3C01                <1>     cmp al, mDispTblL / 2
    44 00003CD4 7318                <1>     jae .exit   ;If above or equal, exit
    45 00003CD6 53                  <1>     push rbx
    46 00003CD7 51                  <1>     push rcx
    47 00003CD8 31C9                <1>     xor ecx, ecx
    48 00003CDA 488D1DC3C6FFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    49 00003CE1 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    50 00003CE3 D1E1                <1>     shl ecx, 1   ;multiply by 2
    51 00003CE5 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    52 00003CE8 FFD3                <1>     call rbx
    53 00003CEA 59                  <1>     pop rcx
    54 00003CEB 5B                  <1>     pop rbx
    55 00003CEC 48CF                <1>     iretq
    56                              <1> .exit:
    57 00003CEE 804C241001          <1>     or byte [rsp + 8h*2], 1
    58 00003CF3 48CF                <1>     iretq
    59                              <1> multiplexTest:
    60 00003CF5 B0FF                <1>     mov al, -1
    61 00003CF7 C3                  <1>     ret
    38                                  %include "./Source/Misc/int44h.asm"
    39                              <1> critErrorHandler:   ;Int 44h
    40                              <1> ;User Stack in usage here, must be swapped to before this is called
    41                              <1> ;Entered with:  
    42                              <1> ;               AH = Critical Error Bitfield
    43                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    44                              <1> ;               Bit 6 - Reserved
    45                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    46                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    47                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    48                              <1> ;               Bits [2-1] = Affected Disk Error
    49                              <1> ;                     0 0   DOS area
    50                              <1> ;                     0 1   FAT area
    51                              <1> ;                     1 0   Directory area
    52                              <1> ;                     1 1   Data area
    53                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    54                              <1> ;               AL  = Failing drive number if AH[7] = 0
    55                              <1> ;               DIL = Error code for errorMsg
    56                              <1> ;               RSI = EA of Device Header for which device the error occured
    57                              <1> ;Return:
    58                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    59                              <1> ;                  = 1 - Retry the Operation    (Retry)
    60                              <1> ;                  = 2 - Terminate the Program  (Abort)
    61                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    62 00003CF8 53                  <1>     push rbx
    63 00003CF9 51                  <1>     push rcx
    64 00003CFA 52                  <1>     push rdx
    65 00003CFB 57                  <1>     push rdi
    66 00003CFC 56                  <1>     push rsi
    67 00003CFD FC                  <1>     cld         ;Make String ops go forward
    68                              <1> 
    69 00003CFE 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    70 00003D01 488D155E020000      <1>     lea rdx, qword [.crlf]
    71 00003D08 B409                <1>     mov ah, 09h ;Print String
    72 00003D0A CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    73                              <1> 
    74 00003D0C 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    75 00003D12 B90C000000          <1>     mov ecx, 0Ch
    76 00003D17 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    77 00003D19 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    78 00003D1C 480FB7FF            <1>     movzx rdi, di
    79 00003D20 4889FA              <1>     mov rdx, rdi    ;Copy error code
    80 00003D23 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    81 00003D27 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    82 00003D2A 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    83 00003D2D 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    84 00003D34 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    85 00003D38 B409                <1>     mov ah, 09h ;Print String
    86 00003D3A CD41                <1>     int 41h     ;Call DOS to print first part of message
    87                              <1> 
    88 00003D3C 488D1505020000      <1>     lea rdx, qword [.readmsg]
    89 00003D43 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    90 00003D4A F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    91 00003D4D 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    92 00003D51 B409                <1>     mov ah, 09h ;Print String
    93 00003D53 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    94                              <1> 
    95 00003D55 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    96 00003D58 0F85DF000000        <1>     jnz .charError
    97                              <1> ;Disk error continues here
    98 00003D5E 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    99 00003D65 B409                <1>     mov ah, 09h
   100 00003D67 CD41                <1>     int 41h
   101 00003D69 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   102 00003D6B 80C241              <1>     add dl, "A" ;Add ASCII code
   103 00003D6E B402                <1>     mov ah, 02h ;Print char in dl
   104 00003D70 CD41                <1>     int 41h
   105                              <1> .userInput:
   106 00003D72 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   107 00003D79 B409                <1>     mov ah, 09h
   108 00003D7B CD41                <1>     int 41h
   109                              <1> ;Abort, Retry, Ignore, Fail is word order
   110                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   111                              <1> .userAbort:
   112                              <1> ;Abort is always an option
   113 00003D7D 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   114 00003D84 B409                <1>     mov ah, 09h
   115 00003D86 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   116                              <1> .userRetry:
   117 00003D88 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   118 00003D8B 7416                <1>     jz .userIgnore    ;If clear, dont print message
   119 00003D8D 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   120 00003D94 B409                <1>     mov ah, 09h
   121 00003D96 CD41                <1>     int 41h
   122 00003D98 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   123 00003D9F B409                <1>     mov ah, 09h
   124 00003DA1 CD41                <1>     int 41h
   125                              <1> .userIgnore:
   126 00003DA3 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   127 00003DA6 7416                <1>     jz .userFail
   128 00003DA8 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   129 00003DAF B409                <1>     mov ah, 09h
   130 00003DB1 CD41                <1>     int 41h
   131 00003DB3 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   132 00003DBA B409                <1>     mov ah, 09h
   133 00003DBC CD41                <1>     int 41h
   134                              <1> .userFail:
   135 00003DBE F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   136 00003DC1 7416                <1>     jz .userMsgEnd
   137 00003DC3 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   138 00003DCA B409                <1>     mov ah, 09h
   139 00003DCC CD41                <1>     int 41h
   140 00003DCE 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   141 00003DD5 B409                <1>     mov ah, 09h
   142 00003DD7 CD41                <1>     int 41h
   143                              <1> .userMsgEnd:
   144 00003DD9 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   145 00003DE0 B409                <1>     mov ah, 09h
   146 00003DE2 CD41                <1>     int 41h
   147                              <1> ;Get user input now 
   148 00003DE4 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   149 00003DE6 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   150 00003DED B401                <1>     mov ah, 01h ;STDIN without Console Echo
   151 00003DEF CD41                <1>     int 41h ;Get char in al
   152 00003DF1 3C61                <1>     cmp al, "a" ;Chack if lowercase
   153 00003DF3 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   154 00003DF5 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   155                              <1> .uip1:
   156 00003DF7 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   157 00003DF8 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   158 00003DFA FFC1                <1>     inc ecx
   159 00003DFC 81F904000000        <1>     cmp ecx, 4
   160 00003E02 75F3                <1>     jne .uip1
   161 00003E04 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   162                              <1> .validInput:
   163 00003E09 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   164                              <1> ;Now check if the input is permitted
   165 00003E0B 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   166 00003E0D 7427                <1>     je .cehExit
   167 00003E0F 84C0                <1>     test al, al ;Check if 0 => Ignore
   168 00003E11 740F                <1>     je .viIgnore
   169 00003E13 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   170 00003E15 7416                <1>     je .viRetry
   171                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   172 00003E17 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   173 00003E1A 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   174 00003E20 EB14                <1>     jmp short .cehExit
   175                              <1> .viIgnore:
   176 00003E22 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   177 00003E25 0F8447FFFFFF        <1>     jz .userInput
   178 00003E2B EB09                <1>     jmp short .cehExit
   179                              <1> .viRetry:
   180 00003E2D F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   181 00003E30 0F843CFFFFFF        <1>     jz .userInput
   182                              <1> .cehExit:
   183 00003E36 5E                  <1>     pop rsi
   184 00003E37 5F                  <1>     pop rdi
   185 00003E38 5A                  <1>     pop rdx
   186 00003E39 59                  <1>     pop rcx
   187 00003E3A 5B                  <1>     pop rbx
   188 00003E3B 48CF                <1>     iretq
   189                              <1> .charError:
   190 00003E3D B908000000          <1>     mov ecx, 8  ;8 chars in device name
   191 00003E42 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   192                              <1> .ce1:
   193 00003E49 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   194 00003E4A 88C2                <1>     mov dl, al  ;Move char into dl
   195 00003E4C B402                <1>     mov ah, 02h
   196 00003E4E CD41                <1>     int 41h ;Print char
   197 00003E50 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   198 00003E52 E91BFFFFFF          <1>     jmp .userInput
   199                              <1> 
   200                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   201 00003E57 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   201 00003E60 746563742024202020  <1>
   202 00003E69 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   202 00003E72 6E6974202420202020  <1>
   203 00003E7B 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   203 00003E84 202420202020202020  <1>
   204 00003E8D 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   204 00003E96 6F6D6D616E64202420  <1>
   205 00003E9F 446174612024202020- <1>             db "Data $            "       ;Error 4
   205 00003EA8 202020202020202020  <1>
   206 00003EB1 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   206 00003EBA 737420242020202020  <1>
   207 00003EC3 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   207 00003ECC 202020202020202020  <1>
   208 00003ED5 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   208 00003EDE 656469612024202020  <1>
   209 00003EE7 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   209 00003EF0 7420466F756E642024  <1>
   210 00003EF9 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   210 00003F02 706572202420202020  <1>
   211 00003F0B 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   211 00003F14 6C7420242020202020  <1>
   212 00003F1D 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   212 00003F26 742024202020202020  <1>
   213 00003F2F 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   213 00003F38 61696C757265202420  <1>
   214                              <1> 
   215 00003F41 64726976652024      <1> .drive      db "drive $"
   216 00003F48 6572726F7220726561- <1> .readmsg    db "error reading $"
   216 00003F51 64696E672024        <1>
   217 00003F57 6572726F7220777269- <1> .writemsg   db "error writing $"
   217 00003F60 74696E672024        <1>
   218 00003F66 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   219 00003F69 41626F727424        <1> .abortmsg   db "Abort$" 
   220 00003F6F 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   221 00003F76 526574727924        <1> .retrymsg   db "Retry$"
   222 00003F7C 4661696C24          <1> .failmsg    db "Fail$"
   223 00003F81 2C2024              <1> .betweenMsg db ", $"
   224 00003F84 3F2024              <1> .endMsg     db "? $"
   225 00003F87 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    39                                  %include "./Source/Drivers/drvData.asm"
    40                              <1> ;-----------------------------------:
    41                              <1> ;          Driver routines          :
    42                              <1> ;-----------------------------------:
    43                              <1> drivers:
    44                              <1> conHdr:
    45 00003F8B [AD3F000000000000]  <1>     dq auxHdr
    46 00003F93 1308                <1>     dw 0813h
    47 00003F95 [2B41000000000000]  <1>     dq commonStrat
    48 00003F9D [3A41000000000000]  <1>     dq conDriver
    49 00003FA5 434F4E2020202020    <1>     db "CON     "
    50                              <1> auxHdr:
    51 00003FAD [CF3F000000000000]  <1>     dq prnHdr
    52 00003FB5 0080                <1>     dw 08000h
    53 00003FB7 [2B41000000000000]  <1>     dq commonStrat
    54 00003FBF [EF43000000000000]  <1>     dq com1Intr
    55 00003FC7 4155582020202020    <1>     db "AUX     "
    56                              <1> prnHdr:
    57 00003FCF [F13F000000000000]  <1>     dq clkHdr
    58 00003FD7 40A0                <1>     dw 0A040h
    59 00003FD9 [3341000000000000]  <1>     dq nulStrat
    60 00003FE1 [3941000000000000]  <1>     dq nulIntr
    61 00003FE9 50524E2020202020    <1>     db "PRN     "
    62                              <1> clkHdr:
    63 00003FF1 [1340000000000000]  <1>     dq msdHdr
    64 00003FF9 0880                <1>     dw 08008h
    65 00003FFB [2B41000000000000]  <1>     dq commonStrat
    66 00004003 [8742000000000000]  <1>     dq clkDriver
    67 0000400B 434C4F434B242020    <1>     db "CLOCK$  "
    68                              <1> msdHdr:
    69 00004013 [3540000000000000]  <1>     dq com1Hdr
    70 0000401B 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    71 0000401D [2B41000000000000]  <1>     dq commonStrat
    72 00004025 [9445000000000000]  <1>     dq msdDriver
    73 0000402D 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    74                              <1> com1Hdr:
    75 00004035 [5740000000000000]  <1>     dq com2Hdr
    76 0000403D 0080                <1>     dw 08000h
    77 0000403F [2B41000000000000]  <1>     dq commonStrat
    78 00004047 [EF43000000000000]  <1>     dq com1Intr
    79 0000404F 434F4D3120202020    <1>     db "COM1    "
    80                              <1> com2Hdr:
    81 00004057 [7940000000000000]  <1>     dq com3Hdr
    82 0000405F 0080                <1>     dw 08000h
    83 00004061 [2B41000000000000]  <1>     dq commonStrat
    84 00004069 [F843000000000000]  <1>     dq com2Intr
    85 00004071 434F4D3220202020    <1>     db "COM2    "
    86                              <1> com3Hdr:
    87 00004079 [9B40000000000000]  <1>     dq com4Hdr
    88 00004081 0080                <1>     dw 08000h
    89 00004083 [2B41000000000000]  <1>     dq commonStrat
    90 0000408B [0144000000000000]  <1>     dq com3Intr
    91 00004093 434F4D3320202020    <1>     db "COM3    "
    92                              <1> com4Hdr:
    93 0000409B [BD40000000000000]  <1>     dq lpt1Hdr
    94 000040A3 0080                <1>     dw 08000h
    95 000040A5 [2B41000000000000]  <1>     dq commonStrat
    96 000040AD [0A44000000000000]  <1>     dq com4Intr
    97 000040B5 434F4D3420202020    <1>     db "COM4    "
    98                              <1> lpt1Hdr:
    99 000040BD [DF40000000000000]  <1>     dq lpt2Hdr
   100 000040C5 40A0                <1>     dw 0A040h
   101 000040C7 [3341000000000000]  <1>     dq nulStrat
   102 000040CF [3941000000000000]  <1>     dq nulIntr
   103 000040D7 4C50543120202020    <1>     db "LPT1    "
   104                              <1> lpt2Hdr:
   105 000040DF [0141000000000000]  <1>     dq lpt3Hdr
   106 000040E7 40A0                <1>     dw 0A040h
   107 000040E9 [3341000000000000]  <1>     dq nulStrat
   108 000040F1 [3941000000000000]  <1>     dq nulIntr
   109 000040F9 4C50543220202020    <1>     db "LPT2    "
   110                              <1> lpt3Hdr:
   111 00004101 FFFFFFFFFFFFFFFF    <1>     dq -1
   112 00004109 40A0                <1>     dw 0A040h
   113 0000410B [3341000000000000]  <1>     dq nulStrat
   114 00004113 [3941000000000000]  <1>     dq nulIntr
   115 0000411B 4C50543320202020    <1>     dq "LPT3    "
   116 00004123 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    40                                  %include "./Source/Drivers/charDrv.asm"
    41                              <1> commonStrat:
    42                              <1> ;DOS calls this function with rbx=Ptr to request header
    43 0000412B 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    44 00004132 C3                  <1>     ret
    45                              <1> nulStrat:
    46 00004133 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    47                              <1> nulIntr:
    48 00004139 C3                  <1>     ret
    49                              <1> conDriver:
    50 0000413A 50                  <1>     push rax
    51 0000413B 53                  <1>     push rbx
    52 0000413C 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    53 00004143 B003                <1>     mov al, 03h ;Unknown Command
    54 00004145 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    55 00004149 7739                <1>     ja .conWriteErrorCode ;If yes, error!
    56                              <1> 
    57 0000414B 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    58 0000414E 3C04                <1>     cmp al, 4
    59 00004150 7441                <1>     jz .conRead
    60 00004152 3C05                <1>     cmp al, 5
    61 00004154 0F847F000000        <1>     jz .conNondestructiveRead
    62 0000415A 3C06                <1>     cmp al, 6
    63 0000415C 0F84A8000000        <1>     jz .conInputStatus
    64 00004162 3C07                <1>     cmp al, 7
    65 00004164 0F84B0000000        <1>     jz .conFlushInputBuffers
    66 0000416A 3C08                <1>     cmp al, 8
    67 0000416C 0F84CA000000        <1>     jz .conWrite
    68 00004172 3C09                <1>     cmp al, 9
    69 00004174 0F84C2000000        <1>     jz .conWrite
    70 0000417A 3C0A                <1>     cmp al, 0Ah
    71 0000417C 0F84E3000000        <1>     jz .conOutputStatus
    72 00004182 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    73                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    74 00004184 B480                <1>     mov ah, 80h ;Set error bit
    75 00004186 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    76                              <1> .conExit:
    77 0000418A 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    78 00004190 5B                  <1>     pop rbx
    79 00004191 58                  <1>     pop rax
    80 00004192 C3                  <1>     ret
    81                              <1> .conRead:    ;Function 4
    82 00004193 B005                <1>     mov al, 05h ;Bad request structure length?
    83 00004195 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    84 00004198 75EA                <1>     jne .conWriteErrorCode
    85                              <1> 
    86 0000419A 57                  <1>     push rdi
    87 0000419B 51                  <1>     push rcx
    88 0000419C 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    89 000041A0 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    90                              <1> .cre1:
    91 000041A2 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    92 000041A5 741C                <1>     je .cre2
    93 000041A7 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    94 000041AE 751A                <1>     jnz .cre3   ;No, get the buffer value
    95 000041B0 31C0                <1>     xor eax, eax
    96 000041B2 CD36                <1>     int 36h
    97                              <1> .cre11:
    98 000041B4 AA                  <1>     stosb
    99 000041B5 84C0                <1>     test al, al ;Was the ascii code stored 0?
   100 000041B7 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   101 000041B9 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   102                              <1> .cre12:
   103 000041BF FFC1                <1>     inc ecx ;Inc chars stored in buffer
   104 000041C1 EBDF                <1>     jmp short .cre1
   105                              <1> .cre2:
   106 000041C3 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   107 000041C6 59                  <1>     pop rcx
   108 000041C7 5F                  <1>     pop rdi
   109 000041C8 EBC0                <1>     jmp short .conExit
   110                              <1> .cre3:
   111 000041CA 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   112 000041D0 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   113 000041D7 EBDB                <1>     jmp short .cre11
   114                              <1> 
   115                              <1> .conNondestructiveRead:  ;Function 5
   116 000041D9 B005                <1>     mov al, 05h ;Bad request structure length?
   117 000041DB 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   118 000041DE 75A4                <1>     jne .conWriteErrorCode
   119 000041E0 803D8E00000000      <1>     cmp byte [.conBuf], 0
   120 000041E7 7519                <1>     jnz .cnr2
   121 000041E9 B401                <1>     mov ah, 01h     ;Get key if exists
   122 000041EB CD36                <1>     int 36h
   123 000041ED 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   124                              <1>     ;Keystroke available
   125                              <1> .cnr0:
   126 000041EF 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   127 000041F2 E993FFFFFF          <1>     jmp .conExit
   128                              <1> .cnr1: ;No keystroke available
   129 000041F7 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   130 000041FD E988FFFFFF          <1>     jmp .conExit
   131                              <1> .cnr2:
   132 00004202 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   133 00004208 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   134                              <1> 
   135                              <1> .conInputStatus:         ;Function 6
   136 0000420A B005                <1>     mov al, 05h ;Bad request structure length?
   137 0000420C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   138 0000420F 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   139 00004215 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   140                              <1> 
   141                              <1> .conFlushInputBuffers:   ;Function 7
   142 0000421A B005                <1>     mov al, 05h ;Bad request structure length?
   143 0000421C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   144 0000421F 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   145 00004225 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   146                              <1> .cfib0:
   147 0000422C B401                <1>     mov ah, 01      ;Get buffer status
   148 0000422E CD36                <1>     int 36h
   149 00004230 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   150 00004236 30E4                <1>     xor ah, ah
   151 00004238 CD36                <1>     int 36h ;Read key to flush from buffer
   152 0000423A EBF0                <1>     jmp short .cfib0
   153                              <1> 
   154                              <1> .conWrite:   ;Function 8 and 9
   155 0000423C B005                <1>     mov al, 05h ;Bad request structure length?
   156 0000423E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   157 00004241 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   158                              <1> 
   159 00004247 56                  <1>     push rsi
   160 00004248 51                  <1>     push rcx
   161 00004249 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   162 0000424D 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   163                              <1> .cw1: 
   164 0000424F 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   165 00004252 7407                <1>     je .cw2
   166 00004254 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   167 00004255 CD49                <1>     int 49h ;Fast print char
   168 00004257 FFC1                <1>     inc ecx
   169 00004259 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   170                              <1> .cw2:
   171 0000425B 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   172 0000425E 59                  <1>     pop rcx
   173 0000425F 5E                  <1>     pop rsi
   174 00004260 E925FFFFFF          <1>     jmp .conExit
   175                              <1> .conOutputStatus:   ;Function 0Ah
   176 00004265 B005                <1>     mov al, 05h ;Bad request structure length?
   177 00004267 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   178 0000426A 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   179 00004270 E915FFFFFF          <1>     jmp .conExit
   180                              <1> 
   181 00004275 00                  <1> .conBuf db 0    ;Single byte buffer
   182                              <1> fastOutput:         ;This CON driver supports Int 49h
   183                              <1> ;Called with char to transfer in al
   184 00004276 50                  <1>     push rax
   185 00004277 B40E                <1>     mov ah, 0Eh
   186 00004279 CD30                <1>     int 30h
   187 0000427B 58                  <1>     pop rax
   188 0000427C 48CF                <1>     iretq
   189                              <1> ctrlBreak:
   190                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   191 0000427E C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   192 00004285 48CF                <1>     iretq
   193                              <1> 
   194                              <1> clkDriver:
   195 00004287 50                  <1>     push rax
   196 00004288 53                  <1>     push rbx
   197 00004289 51                  <1>     push rcx
   198 0000428A 52                  <1>     push rdx
   199 0000428B 56                  <1>     push rsi
   200 0000428C 55                  <1>     push rbp
   201 0000428D 488B1D8FFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   202 00004294 B003                <1>     mov al, 03h ;Unknown Command
   203 00004296 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   204 0000429A 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   205                              <1> 
   206 0000429C 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   207 0000429F 3C04                <1>     cmp al, 04h
   208 000042A1 7437                <1>     jz .clkRead
   209 000042A3 3C06                <1>     cmp al, 06h
   210 000042A5 0F8494000000        <1>     jz .clkInputStatus
   211 000042AB 3C07                <1>     cmp al, 07h
   212 000042AD 0F8498000000        <1>     jz .clkFlushInputBuffers
   213 000042B3 3C08                <1>     cmp al, 08h
   214 000042B5 0F84A0000000        <1>     jz .clkWrite
   215 000042BB 3C09                <1>     cmp al, 09h
   216 000042BD 0F8498000000        <1>     jz .clkWrite
   217 000042C3 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   218                              <1> .clkNotFunctioning:
   219 000042C5 B002                <1>     mov al, 02h ;Device not ready error
   220                              <1> .clkWriteErrorCode:
   221 000042C7 B480                <1>     mov ah, 80h ;Set error bit
   222 000042C9 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   223                              <1> .clkExit:
   224 000042CD 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   225 000042D3 5D                  <1>     pop rbp
   226 000042D4 5E                  <1>     pop rsi
   227 000042D5 5A                  <1>     pop rdx
   228 000042D6 59                  <1>     pop rcx
   229 000042D7 5B                  <1>     pop rbx
   230 000042D8 58                  <1>     pop rax
   231 000042D9 C3                  <1>     ret
   232                              <1> 
   233                              <1> .clkRead:           ;Function 4
   234 000042DA B005                <1>     mov al, 05h ;Bad request structure length?
   235 000042DC 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   236 000042DF 75E6                <1>     jne .clkWriteErrorCode
   237                              <1> 
   238 000042E1 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   239 000042E4 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   240 000042E8 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   241 000042EF 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   242 000042F3 30E4                <1>     xor ah, ah
   243 000042F5 CD3A                <1>     int 3Ah         ;Read the system timer
   244 000042F7 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   245 000042F9 740D                <1>     jz .clkr1       ;Nope, now just time 
   246 000042FB 30E4                <1>     xor ah, ah
   247                              <1>     ;This works as al should keep count of the # of days passed since last read
   248 000042FD 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   249 00004301 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   250                              <1> .clkr1:
   251 00004308 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   252 0000430B 0FB7D2              <1>     movzx edx, dx
   253 0000430E 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   254 00004310 89D0                <1>     mov eax, edx
   255 00004312 31D2                <1>     xor edx, edx
   256 00004314 89D8                <1>     mov eax, ebx
   257 00004316 B944040000          <1>     mov ecx, 1092   
   258 0000431B F7F1                <1>     div ecx
   259 0000431D 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   260 00004320 89D0                <1>     mov eax, edx    ;Get remainder in eax
   261 00004322 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   262 00004326 31D2                <1>     xor edx, edx
   263 00004328 B95B000000          <1>     mov ecx, 91 ;5*18.2
   264 0000432D F7F1                <1>     div ecx
   265 0000432F 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   266 00004332 89D0                <1>     mov eax, edx    ;Get remainder in eax
   267                              <1>     ;lea eax, dword [eax + 4*eax]
   268                              <1>     ;add eax, edx    ;Essentially multiply by 6
   269 00004334 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   270 00004337 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   271 0000433A E98EFFFFFF          <1>     jmp .clkExit
   272                              <1> 
   273                              <1> .clkInputStatus:    ;Function 6
   274                              <1> ;Always return ready
   275 0000433F B005                <1>     mov al, 05h ;Bad request structure length?
   276 00004341 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   277 00004344 7581                <1>     jne .clkWriteErrorCode
   278 00004346 E982FFFFFF          <1>     jmp .clkExit
   279                              <1> .clkFlushInputBuffers:  ;Function 7
   280                              <1> ;Always return done immediately
   281 0000434B B005                <1>     mov al, 05h ;Bad request structure length?
   282 0000434D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   283 00004350 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   284 00004356 E972FFFFFF          <1>     jmp .clkExit
   285                              <1> 
   286                              <1> .clkWrite:          ;Functions 8 and 9
   287 0000435B B005                <1>     mov al, 05h ;Bad request structure length?
   288 0000435D 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   289 00004360 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   290                              <1> 
   291 00004366 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   292 00004369 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   293 0000436D 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   294 00004371 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   295                              <1> 
   296 00004378 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   297 0000437A 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   298 0000437E B105                <1>     mov cl, 5
   299 00004380 F6F1                <1>     div cl          ;Divide al by 5
   300 00004382 30E4                <1>     xor ah, ah      ;Remove the remainder
   301 00004384 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   302                              <1> ;Using the decimal part of this formula for the low count
   303                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   304 00004386 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   305 00004389 B912000000          <1>     mov ecx, 18
   306 0000438E F7E1                <1>     mul ecx  
   307 00004390 01C3                <1>     add ebx, eax
   308                              <1> 
   309 00004392 31D2                <1>     xor edx, edx
   310 00004394 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   311 00004398 B944040000          <1>     mov ecx, 1092
   312 0000439D F7E1                <1>     mul ecx
   313 0000439F 01C3                <1>     add ebx, eax
   314 000043A1 89DA                <1>     mov edx, ebx    ;edx now has low count
   315 000043A3 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   316 000043A7 B401                <1>     mov ah, 01h     ;Set the system time
   317 000043A9 CD3A                <1>     int 3Ah
   318                              <1> 
   319 000043AB 4889F3              <1>     mov rbx, rsi
   320 000043AE E91AFFFFFF          <1>     jmp .clkExit
   321                              <1> 
   322                              <1> .clkBCDtoHex:
   323                              <1> ;Converts a BCD value to a Hex byte
   324                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   325 000043B3 51                  <1>     push rcx
   326 000043B4 0FB6C0              <1>     movzx eax, al   ;Zero extend
   327 000043B7 89C1                <1>     mov ecx, eax    ;Save al in ecx
   328 000043B9 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   329 000043BE 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   330 000043C4 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   331                              <1> .cbth0:
   332 000043C7 050A000000          <1>     add eax, 10
   333 000043CC E2F9                <1>     loop .cbth0
   334 000043CE 59                  <1>     pop rcx
   335 000043CF C3                  <1>     ret
   336                              <1> 
   337                              <1> .clkHexToBCD:
   338                              <1> ;Converts a Hex byte into two BCD digits
   339                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   340 000043D0 51                  <1>     push rcx
   341 000043D1 0FB6C0              <1>     movzx eax, al   ;Zero extend
   342 000043D4 31C9                <1>     xor ecx, ecx
   343                              <1> .chtb0:
   344 000043D6 3D0A000000          <1>     cmp eax, 10
   345 000043DB 7209                <1>     jb .chtb1
   346 000043DD 2D0A000000          <1>     sub eax, 10
   347 000043E2 FFC1                <1>     inc ecx
   348 000043E4 EBF0                <1>     jmp short .chtb0
   349                              <1> .chtb1:
   350 000043E6 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   351 000043E9 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   352 000043EB 59                  <1>     pop rcx
   353 000043EC C3                  <1>     ret
   354 000043ED 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   355                              <1> 
   356                              <1> ;COM Driver headers and main interrupt strat
   357                              <1> com1Intr:
   358 000043EF C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   359 000043F6 EB19                <1>     jmp short comIntr
   360                              <1> com2Intr:
   361 000043F8 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   362 000043FF EB10                <1>     jmp short comIntr
   363                              <1> com3Intr:
   364 00004401 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   365 00004408 EB07                <1>     jmp short comIntr
   366                              <1> com4Intr:
   367 0000440A C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   368                              <1> comIntr:
   369 00004411 50                  <1>     push rax
   370 00004412 53                  <1>     push rbx
   371 00004413 51                  <1>     push rcx
   372 00004414 52                  <1>     push rdx
   373 00004415 56                  <1>     push rsi
   374 00004416 57                  <1>     push rdi
   375 00004417 488B1D05FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   376 0000441E B003                <1>     mov al, 03h ;Unknown Command
   377 00004420 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   378 00004424 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   379                              <1> 
   380 00004426 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   381 00004429 3C04                <1>     cmp al, 4   ;Read Character(s)
   382 0000442B 7462                <1>     jz .comRead
   383 0000442D 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   384 0000442F 0F849B000000        <1>     jz .comNondestructiveRead   
   385 00004435 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   386 00004437 0F8484000000        <1>     jz .comReadInputStatus
   387 0000443D 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   388 0000443F 0F84B9000000        <1>     jz .comFlushInputBuffers
   389 00004445 3C08                <1>     cmp al, 8
   390 00004447 0F84DB000000        <1>     jz .comWrite
   391 0000444D 3C09                <1>     cmp al, 9
   392 0000444F 0F84D3000000        <1>     jz .comWrite
   393 00004455 3C0A                <1>     cmp al, 0Ah
   394 00004457 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   395 0000445D EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   396                              <1> .comErrorNoCount:
   397 0000445F B002                <1>     mov al, 02h ;Unknown device
   398 00004461 EB19                <1>     jmp short .comWriteErrorCode
   399                              <1> .comReadError:
   400 00004463 BA0B000000          <1>     mov edx, 0Bh
   401                              <1> .comWriteError:
   402 00004468 BA0A000000          <1>     mov edx, 0Ah
   403                              <1> .comError:
   404 0000446D 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   405 00004470 B902000000          <1>     mov ecx, 02h    ;Unknown device
   406 00004475 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   407 00004477 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   408 0000447A 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   409                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   410 0000447C B480                <1>     mov ah, 80h ;Set error bit
   411 0000447E 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   412                              <1> .comExit:
   413 00004482 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   414 00004488 5F                  <1>     pop rdi
   415 00004489 5E                  <1>     pop rsi
   416 0000448A 5A                  <1>     pop rdx
   417 0000448B 59                  <1>     pop rcx
   418 0000448C 5B                  <1>     pop rbx
   419 0000448D 58                  <1>     pop rax
   420 0000448E C3                  <1>     ret
   421                              <1> 
   422                              <1> .comRead:
   423 0000448F B005                <1>     mov al, 05h ;Bad request structure length?
   424 00004491 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   425 00004494 75E6                <1>     jne .comWriteErrorCode
   426                              <1> 
   427 00004496 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   428 0000449A 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   429                              <1> .cr1:
   430 0000449C 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   431 0000449F 741B                <1>     je .cre2
   432                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   433 000044A1 B802000000          <1>     mov eax, 02h    ;Recieve 
   434 000044A6 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   435 000044AC 6698                <1>     cbw     ;Zero extend to upper byte
   436 000044AE CD34                <1>     int 34h ;Recieve Char
   437 000044B0 72BB                <1>     jc .comError
   438 000044B2 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   439 000044B5 74EA                <1>     je .cr11
   440 000044B7 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   441 000044B8 FFC1                <1>     inc ecx
   442 000044BA EBE0                <1>     jmp short .cr1
   443                              <1> .cre2:
   444 000044BC 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   445 000044BF EBC1                <1>     jmp short .comExit
   446                              <1> 
   447                              <1> .comReadInputStatus:
   448 000044C1 B005                <1>     mov al, 05h ;Bad request structure length?
   449 000044C3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   450 000044C6 75B4                <1>     jne .comWriteErrorCode
   451 000044C8 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   452 000044CE EBB2                <1>     jmp short .comExit
   453                              <1> 
   454                              <1> .comNondestructiveRead:
   455                              <1> ;Acts like a "read one character if there is one" function
   456 000044D0 B005                <1>     mov al, 05h ;Bad request structure length?
   457 000044D2 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   458 000044D5 75A5                <1>     jne .comWriteErrorCode
   459                              <1> .cndr1:
   460 000044D7 B802000000          <1>     mov eax, 02h    ;Recieve 
   461 000044DC 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   462 000044E2 6698                <1>     cbw     ;Zero extend to upper byte
   463 000044E4 CD34                <1>     int 34h ;Recieve Char
   464 000044E6 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   465 000044EC 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   466 000044EF 7405                <1>     je .cndr2
   467 000044F1 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Get next char
   468 000044F4 EB8C                <1>     jmp short .comExit
   469                              <1> .cndr2:
   470 000044F6 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 200h ;Busy bit set
   471 000044FC EB84                <1>     jmp short .comExit
   472                              <1> 
   473                              <1> .comFlushInputBuffers:
   474 000044FE B005                <1>     mov al, 05h ;Bad request structure length?
   475 00004500 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   476 00004503 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   477                              <1> .cfib0:
   478 00004509 8A1584000000        <1>     mov dl, byte [.comDevice]
   479 0000450F 6698                <1>     cbw
   480 00004511 B802000000          <1>     mov eax, 02h    ;Recieve
   481 00004516 CD34                <1>     int 34h
   482 00004518 0F8241FFFFFF        <1>     jc .comErrorNoCount
   483 0000451E 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   484 00004521 75E6                <1>     jne .cfib0
   485 00004523 E95AFFFFFF          <1>     jmp .comExit
   486                              <1> 
   487                              <1> .comWrite:
   488 00004528 B005                <1>     mov al, 05h ;Bad request structure length?
   489 0000452A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   490 0000452D 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   491                              <1> 
   492 00004533 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   493 00004537 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   494                              <1> .cw1: 
   495 00004539 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   496 0000453C 7417                <1>     je .cw2
   497 0000453E AC                  <1>     lodsb   ;Get char into al, and inc rsi
   498 0000453F B401                <1>     mov ah, 01h ;Move function number into ah
   499 00004541 8A154C000000        <1>     mov dl, byte [.comDevice]
   500 00004547 6698                <1>     cbw     ;Zero extend to upper byte
   501 00004549 CD34                <1>     int 34h ;Transmit char
   502 0000454B 0F821CFFFFFF        <1>     jc .comError
   503 00004551 FFC1                <1>     inc ecx
   504 00004553 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   505                              <1> .cw2:
   506 00004555 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   507 00004558 E925FFFFFF          <1>     jmp .comExit
   508                              <1> 
   509                              <1> .comOutputStatus:
   510                              <1> ;Read MODEM status
   511 0000455D B005                <1>     mov al, 05h ;Bad request structure length?
   512 0000455F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   513 00004562 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   514                              <1> 
   515 00004568 8A1525000000        <1>     mov dl, byte [.comDevice]
   516 0000456E 6698                <1>     cbw     ;Zero extend to upper byte
   517 00004570 B403                <1>     mov ah, 03h     ;Get status
   518 00004572 CD34                <1>     int 34h
   519 00004574 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   520 0000457A 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   521 0000457F C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   522 00004582 F7D0                <1>     not eax      ;Bitwise inversion
   523 00004584 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   524 00004589 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   525 0000458E E9EFFEFFFF          <1>     jmp .comExit
   526 00004593 00                  <1> .comDevice   db 0
    41                                  %include "./Source/Drivers/diskDrv.asm"
    42                              <1> msdDriver:
    43 00004594 50                  <1>     push rax
    44 00004595 53                  <1>     push rbx
    45 00004596 51                  <1>     push rcx
    46 00004597 52                  <1>     push rdx
    47 00004598 56                  <1>     push rsi
    48 00004599 57                  <1>     push rdi
    49 0000459A 55                  <1>     push rbp
    50 0000459B 4150                <1>     push r8
    51 0000459D 488B1D7FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    52 000045A4 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    53 000045A8 B003                <1>     mov al, drvBadCmd
    54 000045AA 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    55 000045B0 B001                <1>     mov al, drvBadUnit 
    56 000045B2 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    57 000045B6 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    58 000045BC 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    59 000045C3 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    60 000045C7 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    61 000045CA 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    62 000045CE 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    63 000045D2 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    64 000045D4 488D0D9A000000      <1>     lea rcx, .msdTable
    65 000045DB 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    66 000045DF 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    67 000045E1 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    68 000045E3 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    69 000045E6 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    70                              <1> .msdDriverExit:
    71 000045E8 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    72 000045EE 4158                <1>     pop r8
    73 000045F0 5D                  <1>     pop rbp
    74 000045F1 5F                  <1>     pop rdi
    75 000045F2 5E                  <1>     pop rsi
    76 000045F3 5A                  <1>     pop rdx
    77 000045F4 59                  <1>     pop rcx
    78 000045F5 5B                  <1>     pop rbx
    79 000045F6 58                  <1>     pop rax
    80 000045F7 C3                  <1>     ret
    81                              <1> 
    82                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    83 000045F8 4889FB              <1>     mov rbx, rdi
    84 000045FB 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    85 000045FE 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    86 00004600 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    87                              <1> ;Now fall through to general error
    88                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    89 00004603 B401                <1>     mov ah, 01h
    90 00004605 CD33                <1>     int 33h ;Read status of last operation
    91 00004607 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    92 0000460A B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    93 0000460C 7460                <1>     je .msdWriteErrorCode 
    94 0000460E B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    95 00004610 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    96 00004613 7459                <1>     je .msdWriteErrorCode 
    97 00004615 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    98 00004618 7454                <1>     je .msdWriteErrorCode
    99                              <1> ;Device Not Ready
   100 0000461A B002                <1>     mov al, 02h  ;Device not ready code
   101 0000461C 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   102 0000461F 744D                <1>     je .msdWriteErrorCode
   103 00004621 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   104 00004625 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   105                              <1> ;Write Protected
   106 00004629 30C0                <1>     xor al, al
   107 0000462B 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   108 00004630 743C                <1>     je .msdWriteErrorCode
   109                              <1> ;CRC Error
   110 00004632 B004                <1>     mov al, 04h     ;CRC error code
   111 00004634 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   112 00004639 7433                <1>     je .msdWriteErrorCode
   113 0000463B 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   114 00004640 742C                <1>     je .msdWriteErrorCode
   115 00004642 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   116 00004647 7425                <1>     je .msdWriteErrorCode
   117                              <1> ;Seek Error
   118 00004649 B006                <1>     mov al, 06h     ;Seek error code
   119 0000464B 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   120 0000464E 741E                <1>     je .msdWriteErrorCode
   121                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   122                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   123 00004650 B007                <1>     mov al, 07h
   124 00004652 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   125 00004655 7417                <1>     je .msdWriteErrorCode
   126                              <1> ;Sector Not Found
   127 00004657 B008                <1>     mov al, 08h     ;Sector not found code
   128 00004659 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   129 0000465C 7410                <1>     je .msdWriteErrorCode
   130                              <1> ;Write faults
   131 0000465E B00A                <1>     mov al, 0Ah     ;Write fault
   132 00004660 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   133 00004663 7409                <1>     je .msdWriteErrorCode
   134                              <1> ;Read faults
   135 00004665 B00B                <1>     mov al, 0Bh     ;Read fault
   136 00004667 80F911              <1>     cmp cl, 11h     ;Read error
   137 0000466A 7402                <1>     je .msdWriteErrorCode
   138                              <1> ;General Errors
   139 0000466C B00C                <1>     mov al, 0Ch     ;Everything else is general error
   140                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   141 0000466E B480                <1>     mov ah, 80h ;Set error bit
   142 00004670 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   143 00004674 C3                  <1>     ret ;Return to set done bit
   144                              <1> .msdTable:
   145 00004675 0000                <1>     dw 0                            ;Function 0
   146 00004677 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   147 00004679 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   148 0000467B 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   149 0000467D 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   150 0000467F 0000                <1>     dw 0                            ;Function 5
   151 00004681 0000                <1>     dw 0                            ;Function 6
   152 00004683 0000                <1>     dw 0                            ;Function 7
   153 00004685 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   154 00004687 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   155 00004689 0000                <1>     dw 0                            ;Function 10
   156 0000468B 0000                <1>     dw 0                            ;Function 11
   157 0000468D C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   158 0000468F D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   159 00004691 ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   160 00004693 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   161 00004695 0000                <1>     dw 0                            ;Function 16
   162 00004697 0000                <1>     dw 0                            ;Function 17
   163 00004699 0000                <1>     dw 0                            ;Function 18
   164 0000469B 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   165 0000469D 0000                <1>     dw 0                            ;Function 20
   166 0000469F 0000                <1>     dw 0                            ;Function 21
   167 000046A1 0000                <1>     dw 0                            ;Function 22
   168 000046A3 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   169 000046A5 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   170                              <1> 
   171                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   172                              <1> .msdMedChk:          ;Function 1
   173 000046A7 B005                <1>     mov al, 05h ;Bad request structure length
   174 000046A9 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   175 000046AC 75C0                <1>     jne .msdWriteErrorCode
   176                              <1> 
   177 000046AE 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   178 000046B3 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   179 000046BA 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   180 000046BD F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   181 000046C0 753F                <1>     jnz .mmcNoChange
   182                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   183 000046C2 B416                <1>     mov ah, 16h 
   184 000046C4 CD33                <1>     int 33h
   185 000046C6 0F8237FFFFFF        <1>     jc .msdGenDiskError
   186 000046CC 80FC80              <1>     cmp ah, 80h
   187 000046CF 740E                <1>     je .mmcNoChangeLine
   188 000046D1 80FC86              <1>     cmp ah, 86h
   189 000046D4 7409                <1>     je .mmcNoChangeLine
   190 000046D6 84E4                <1>     test ah, ah ;No change?
   191 000046D8 7427                <1>     jz .mmcNoChange
   192 000046DA F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   193 000046DD 750D                <1>     jnz .mmcChange
   194                              <1> ;If nothing, fall through and test manually, should never happen though
   195                              <1> .mmcNoChangeLine:
   196                              <1> ;Now we test Media Descriptor
   197 000046DF 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   198 000046E4 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   199 000046E7 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   200 000046EA 7410                <1>     je .mmcUnsure
   201                              <1> .mmcChange:
   202 000046EC C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   203 000046F0 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   204 000046F7 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   205                              <1>     ;Check here if there were any open handles on the device when it was changed
   206 000046FB C3                  <1>     ret
   207                              <1> .mmcUnsure:
   208 000046FC C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   209 00004700 C3                  <1>     ret
   210                              <1> .mmcNoChange:
   211 00004701 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   212 00004705 C3                  <1>     ret
   213                              <1> 
   214                              <1> 
   215                              <1> .msdBuildBPB:        ;Function 2
   216 00004706 B005                <1>     mov al, 05h ;Bad request structure length
   217 00004708 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   218 0000470B 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   219                              <1> 
   220 00004711 4889DE              <1>     mov rsi, rbx
   221 00004714 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   222 00004719 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   223 00004720 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   224 00004723 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   225 00004727 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   226 00004729 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   227 0000472C B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   228 00004731 CD33                <1>     int 33h
   229 00004733 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   230                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   231 00004739 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   232 0000473D 7418                <1>     je .mbbpb0
   233 0000473F 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   234 00004743 7412                <1>     je .mbbpb0
   235 00004745 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   236 00004749 740C                <1>     je .mbbpb0
   237 0000474B 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   238 0000474F B007                <1>     mov al, 07h ;Unknown media error code
   239 00004751 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   240                              <1> .mbbpb0:
   241 00004757 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   242 0000475A 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   243 0000475F 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   244 00004766 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   245 0000476A 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   246 0000476D 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   247 00004771 B90F000000          <1>     mov ecx, bpbEx_size/8
   248 00004776 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   249 00004779 C3                  <1>     ret
   250                              <1> .msdIOCTLRead:       ;Function 3, returns done
   251 0000477A B005                <1>     mov al, drvBadDrvReq
   252 0000477C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   253 0000477F 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   254 00004785 C3                  <1>     ret
   255                              <1> .msdRead:            ;Function 4
   256                              <1> ;Will read one sector at a time.
   257 00004786 B005                <1>     mov al, 05h ;Bad request structure length
   258 00004788 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   259 0000478B 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   260                              <1> 
   261 00004791 4889DF              <1>     mov rdi, rbx
   262 00004794 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   263                              <1> .msdr0:
   264 00004796 B682                <1>     mov dh, 82h ;LBA Read Sectors
   265 00004798 E841010000          <1>     call .msdBlkIOCommon
   266 0000479D 0F8255FEFFFF        <1>     jc .msdIOError
   267 000047A3 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   268 000047AB 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   269 000047B3 FFC6                <1>     inc esi
   270 000047B5 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   271 000047B8 75DC                <1>     jne .msdr0
   272 000047BA 4889FB              <1>     mov rbx, rdi
   273 000047BD C3                  <1>     ret
   274                              <1> .msdWrite:           ;Function 8
   275                              <1> ;Will write one sector at a time.
   276 000047BE B005                <1>     mov al, 05h ;Bad request structure length
   277 000047C0 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   278 000047C3 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   279                              <1> 
   280 000047C9 4889DF              <1>     mov rdi, rbx
   281 000047CC 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   282                              <1> .msdw0:
   283 000047CE B683                <1>     mov dh, 83h ;LBA Write Sectors
   284 000047D0 E809010000          <1>     call .msdBlkIOCommon
   285 000047D5 0F821DFEFFFF        <1>     jc .msdIOError
   286 000047DB 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   287 000047E3 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   288 000047EB FFC6                <1>     inc esi
   289 000047ED 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   290 000047F0 75DC                <1>     jne .msdw0
   291 000047F2 4889FB              <1>     mov rbx, rdi
   292 000047F5 C3                  <1>     ret
   293                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   294                              <1> ;Will write one sector at a time and then verify it.
   295 000047F6 B005                <1>     mov al, 05h ;Bad request structure length
   296 000047F8 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   297 000047FB 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   298                              <1> 
   299 00004801 4889DF              <1>     mov rdi, rbx
   300 00004804 31F6                <1>     xor esi, esi  ;Set counter to zero
   301                              <1> .msdwv0:
   302 00004806 B683                <1>     mov dh, 83h ;LBA Write Sectors
   303 00004808 E8D1000000          <1>     call .msdBlkIOCommon
   304 0000480D 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   305 00004813 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   306 00004815 E8C4000000          <1>     call .msdBlkIOCommon
   307 0000481A 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   308 00004820 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   309 00004828 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   310 00004830 FFC6                <1>     inc esi
   311 00004832 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   312 00004835 75CF                <1>     jne .msdwv0
   313 00004837 4889FB              <1>     mov rbx, rdi
   314 0000483A C3                  <1>     ret
   315                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   316 0000483B B005                <1>     mov al, drvBadDrvReq
   317 0000483D 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   318 00004840 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   319                              <1> 
   320 00004846 C3                  <1>     ret
   321                              <1> .msdDevOpen:         ;Function 13
   322 00004847 B005                <1>     mov al, drvBadDrvReq
   323 00004849 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   324 0000484C 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   325                              <1> 
   326 00004852 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   327 00004857 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   328 0000485E FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   329 00004861 C3                  <1>     ret
   330                              <1> .msdDevClose:        ;Function 14
   331 00004862 B005                <1>     mov al, drvBadDrvReq
   332 00004864 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   333 00004867 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   334                              <1> 
   335 0000486D 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   336 00004872 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   337 00004879 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   338 0000487C C3                  <1>     ret
   339                              <1> .msdRemovableMedia:  ;Function 15
   340 0000487D B005                <1>     mov al, drvBadDrvReq
   341 0000487F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   342 00004882 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   343                              <1> 
   344 00004888 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   345 0000488D 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   346 00004894 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   347 00004897 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   348 0000489C 31D2                <1>     xor edx, edx    ;Busy bit clear
   349 0000489E A880                <1>     test al, 80h
   350 000048A0 0F44CA              <1>     cmovz ecx, edx
   351 000048A3 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   352 000048A7 C3                  <1>     ret
   353                              <1> .msdGenericIOCTL:    ;Function 19
   354 000048A8 B005                <1>     mov al, drvBadDrvReq
   355 000048AA 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   356 000048AD 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   357                              <1> 
   358 000048B3 C3                  <1>     ret
   359                              <1> .msdGetLogicalDev:   ;Function 23
   360 000048B4 B005                <1>     mov al, drvBadDrvReq
   361 000048B6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   362 000048B9 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   363                              <1> 
   364 000048BF 8A0541000000        <1>     mov al, byte [.msdCurDev]
   365 000048C5 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   366 000048C8 C3                  <1>     ret
   367                              <1> .msdSetLogicalDev:   ;Function 24
   368 000048C9 B005                <1>     mov al, drvBadDrvReq
   369 000048CB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   370 000048CE 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   371                              <1> 
   372 000048D4 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   373 000048D7 880529000000        <1>     mov byte [.msdCurDev], al
   374 000048DD C3                  <1>     ret
   375                              <1> 
   376                              <1> .msdBlkIOCommon:  ;Does block IO
   377                              <1> ;Called with rdi containing old rbx value and ah with function number
   378                              <1> ;rbp points to bpb
   379                              <1> ;Error handled by caller
   380                              <1> ;Sector count handled by caller
   381                              <1> ;Called with dh = BIOS function number
   382 000048DE 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   383 000048E3 8A90[07490000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   384 000048E9 31C9                <1>     xor ecx, ecx
   385 000048EB 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   386 000048EE 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   387 000048F2 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   388 000048F6 88F4                <1>     mov ah, dh
   389 000048F8 B001                <1>     mov al, 01h ;Do one sector at a time 
   390 000048FA CD33                <1>     int 33h
   391 000048FC C3                  <1>     ret
   392                              <1> 
   393 000048FD 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   394                              <1> ;LASTDRIVE default is 5
   395                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   396                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   397 00004906 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   398                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   399 00004907 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   400 0000490C 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   401 00004911 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   401 0000491A 000000000000000000- <1>
   401 00004923 000000000000000000- <1>
   401 0000492C 000000000000000000- <1>
   401 00004935 00000000            <1>
   402 00004939 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   402 00004942 000000000000000000- <1>
   402 0000494B 000000000000000000- <1>
   402 00004954 000000000000000000- <1>
   402 0000495D 000000000000000000- <1>
   402 00004966 000000000000000000- <1>
   402 0000496F 000000000000000000- <1>
   402 00004978 000000000000000000- <1>
   402 00004981 000000000000000000- <1>
   402 0000498A 000000000000000000- <1>
   402 00004993 000000000000000000- <1>
   402 0000499C 000000000000000000- <1>
   402 000049A5 000000000000000000- <1>
   402 000049AE 000000000000000000- <1>
   402 000049B7 000000000000000000- <1>
   402 000049C0 000000000000000000- <1>
   402 000049C9 000000000000000000- <1>
   402 000049D2 000000000000000000- <1>
   402 000049DB 000000000000000000- <1>
   402 000049E4 000000000000000000- <1>
   402 000049ED 000000000000000000- <1>
   402 000049F6 000000000000000000- <1>
   402 000049FF 000000000000000000- <1>
   402 00004A08 000000000000000000- <1>
   402 00004A11 000000000000000000- <1>
   402 00004A1A 000000000000000000- <1>
   402 00004A23 000000000000000000- <1>
   402 00004A2C 000000000000000000- <1>
   402 00004A35 000000000000000000- <1>
   402 00004A3E 000000000000000000- <1>
   402 00004A47 000000000000000000- <1>
   402 00004A50 000000000000000000- <1>
   402 00004A59 000000000000000000- <1>
   402 00004A62 000000000000000000- <1>
   402 00004A6B 000000000000000000- <1>
   402 00004A74 000000000000000000- <1>
   402 00004A7D 000000000000000000- <1>
   402 00004A86 000000000000000000- <1>
   402 00004A8F 000000000000000000- <1>
   402 00004A98 000000000000000000- <1>
   402 00004AA1 000000000000000000- <1>
   402 00004AAA 000000000000000000- <1>
   402 00004AB3 000000000000000000- <1>
   402 00004ABC 000000000000000000- <1>
   402 00004AC5 000000000000000000- <1>
   402 00004ACE 000000000000000000- <1>
   402 00004AD7 000000000000000000- <1>
   402 00004AE0 000000000000000000- <1>
   402 00004AE9 000000000000000000- <1>
   402 00004AF2 000000000000000000- <1>
   402 00004AFB 000000000000000000- <1>
   402 00004B04 000000000000000000- <1>
   402 00004B0D 000000000000000000- <1>
   402 00004B16 000000000000000000- <1>
   402 00004B1F 000000000000000000- <1>
   402 00004B28 000000000000000000- <1>
   402 00004B31 000000000000000000- <1>
   402 00004B3A 000000000000000000- <1>
   402 00004B43 000000000000000000- <1>
   402 00004B4C 000000000000000000- <1>
   402 00004B55 000000000000000000- <1>
   402 00004B5E 000000000000000000- <1>
   402 00004B67 000000000000000000- <1>
   402 00004B70 000000000000000000- <1>
   402 00004B79 000000000000000000- <1>
   402 00004B82 000000000000000000- <1>
   402 00004B8B 000000000000        <1>
   403                              <1> 
   404                              <1> endptr equ $
    42                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    43                                  ;Paragraph alignment
    44                                  %include "./Source/BSS/dosDynaDataArea.asm"
    45                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    46                              <1> ; the MCB chain!
    47                              <1> ddaStart:
    48 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    49                              <1> 
    50                              <1> ;Create DPB chain of first 5 available DPB slots
    51                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    52 00000010 <res 35h>           <1> firstDPB        resb dpb_size
    53 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    54                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    55                              <1> ;Always jettison this space
    56 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    57 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    58 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    59                              <1> 
    60 00000119 <res 30h>           <1> tmpBufHdr       resb bufferHdr_size
    61 00000149 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    62                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    63                              <1> dynamicDataAreaLength equ $ - ddaStart
    63          ------------------  <1>  info: assembly required 1+7+2 passes

