     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "./Source/Include/driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    23                              <1> 
    24                              <1>     .hdrlen resb 1  ;Length of the request header
    25                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    26                              <1>     .cmdcde resb 1  ;Command code
    27                              <1>     .status resw 1  ;Status word
    28                              <1>     .devptr resq 1  ;Device queue pointer field
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> ;Command Code equates
    32                              <1>     drvINIT         equ 0
    33                              <1>     drvMEDCHK       equ 1
    34                              <1>     drvBUILDBPB     equ 2
    35                              <1>     drvIOCTLREAD    equ 3
    36                              <1>     drvREAD         equ 4
    37                              <1>     drvNONDESTREAD  equ 5
    38                              <1>     drvINSTATUS     equ 6
    39                              <1>     drvFLUSHINBUF   equ 7
    40                              <1>     drvWRITE        equ 8
    41                              <1>     drvWRITEVERIFY  equ 9
    42                              <1>     drvOUTSTATUS    equ 10
    43                              <1>     drvFLUSHOUTBUF  equ 11
    44                              <1>     drvIOCTLWRITE   equ 12
    45                              <1>     drvOPEN         equ 13
    46                              <1>     drvCLOSE        equ 14
    47                              <1>     drvREMMEDCHECK  equ 15
    48                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    49                              <1>     drvIOCTL        equ 19
    50                              <1>     drvGETDRVMAP    equ 23
    51                              <1>     drvSETDRVMAP    equ 24
    52                              <1>     
    53                              <1> ;Driver Error equates 
    54                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    55                              <1>     drvBadUnit      equ 1   ;Unknown unit
    56                              <1>     drvNotReady     equ 2   ;Device not ready
    57                              <1>     drvBadCmd       equ 3   ;Unknown command
    58                              <1>     drvCRCErr       equ 4   ;CRC Error
    59                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    60                              <1>     drvBadSeek      equ 6   ;Seek error
    61                              <1>     drvBadMed       equ 7   ;Unknown media
    62                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    63                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    64                              <1>     drvWriteFault   equ 10  ;Write Fault
    65                              <1>     drvReadFault    equ 11  ;Read Fault
    66                              <1>     drvGenFault     equ 12  ;General Fault
    67                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    68                              <1> 
    69                              <1> ;Driver status word status bit meanings
    70                              <1>     drvErrStatus    equ 8000h  
    71                              <1>     drvDonStatus    equ 0100h
    72                              <1>     drvBsyStatus    equ 0200h
    73                              <1> ;Driver structures
    74                              <1> struc drvReqHdr
    75                              <1>     drvReqHdrM
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    76                              <1> endstruc
    77                              <1> 
    78                              <1> struc initReqPkt  ;Init Request Packet
    79                              <1> 
    80                              <1>     drvReqHdrM   ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    81 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    82 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    83 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    84 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    85                              <1> 
    86                              <1> endstruc
    87                              <1> 
    88                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    89                              <1> 
    90                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    91 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    92 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    93 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    94                              <1> 
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    98                              <1> 
    99                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   100 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   101 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   102 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   103                              <1> 
   104                              <1> endstruc
   105                              <1> 
   106                              <1> struc ioReqPkt   ;IO Request Packet
   107                              <1> 
   108                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   109 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   110 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   111 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   112 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   113 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
   118                              <1>     
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   120 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   121                              <1> 
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc statusReqPkt   ;Status Request Packet
   125                              <1> 
   126                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   127                              <1> 
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   131                              <1> 
   132                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   133                              <1>      
   134                              <1> endstruc
   135                              <1> 
   136                              <1> struc openReqPkt ;Open Device Request Packet
   137                              <1> 
   138                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   139                              <1>      
   140                              <1> endstruc
   141                              <1> 
   142                              <1> struc closeReqPkt ;Close Device Request Packet
   143                              <1> 
   144                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   145                              <1>      
   146                              <1> endstruc
   147                              <1> 
   148                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   149                              <1> 
   150                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   151                              <1>      
   152                              <1> endstruc
   153                              <1> 
   154                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   155                              <1> 
   156                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   157 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   158 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   159 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   160 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   161 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   162                              <1> 
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   166                              <1>     
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   168                              <1> 
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   172                              <1>     
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   174                              <1> 
   175                              <1> endstruc
     6                                  %include "./Source/Include/fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    17                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    18                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    19                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    20                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    21                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    22                              <1> ;-------------------------------------------------------;
    23                              <1> 
    24                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    25                              <1> 
    26 00000000 ??????              <1>     .jmpBoot    resb 3 
    27 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    28 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    29 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    30 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    31 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    32 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    33 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    34 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    35 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    36 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    37 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    38 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    39 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    40                              <1> 
    41 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    42 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    43 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    44 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    45 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    46 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    47                              <1> 
    48                              <1> endstruc
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    51                              <1> 
    52 00000000 ??????              <1>     .jmpBoot    resb 3
    53 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    54 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    55 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    56 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    57 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    58 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    59 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    60 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    61 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    62 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    63 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    64 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    65 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    66                              <1> 
    67 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    68 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    69 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    70 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    71 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    72 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    73 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    74                              <1> 
    75 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    76 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    77 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    78 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    79 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    80 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mbr
    85 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    86 000001B8 ????????            <1>     .diskID     resb 4
    87 000001BC ????                <1>     .reserved   resb 2
    88 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    89 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    90 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    91 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    92 000001FE ????                <1>     .mbrSig     resb 2
    93                              <1> endstruc
    94                              <1> 
    95                              <1> struc mbrEntry
    96 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    97 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    98 00000004 ??                  <1>     .ptnType    resb 1
    99 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   100 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   101 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc ebr
   105 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   106 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   107 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   108 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   109 000001FE ????                <1>     .mbrSig     resb 2
   110                              <1> endstruc
   111                              <1> 
   112                              <1> 
   113                              <1> struc fatDirEntry
   114                              <1> 
   115 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   116 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   121 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   122 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   127                              <1> 
   128                              <1> endstruc
   129                              <1> ;Directory attribute equates
   130                              <1>     dirReadOnly     equ 01h
   131                              <1>     dirHidden       equ 02h
   132                              <1>     dirSystem       equ 04h
   133                              <1>     dirVolumeID     equ 08h
   134                              <1>     dirDirectory    equ 10h
   135                              <1>     dirArchive      equ 20h
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1> 
   138                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   139                              <1> 
   140 00000000 ??????              <1>     .jmpBoot                resb 3 
   141 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   142 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   143 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   144 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   145 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   146 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   147 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   148 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   149 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   150 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   151 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   152 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   153 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   154 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   155 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   156 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   157 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   158 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   159                              <1> 
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc FSInfo
   163                              <1> 
   164 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   165 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   166 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   167 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   168 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   169 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   170 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   171                              <1> 
   172                              <1> endstruc
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    27 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000005 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000007 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000008 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000A ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000E ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000012 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000016 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001A ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000022 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000023 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000024 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002C ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000030 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsNetDrive     equ 8000h
    77                              <1> cdsPhysDrive    equ 4000h
    78                              <1> cdsJoinDrive    equ 2000h
    79                              <1> cdsSubstDrive   equ 1000h
    80                              <1> cdsRedirDrive   equ 0080h
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   144 0000002B ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   145 0000002C <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   146 00000037 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   147 0000003F ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   148                              <1> endstruc
   149                              <1> ;Open Mode equates
   150                              <1> ;Access modes   Bits[2:0]
   151                              <1> ReadAccess      equ 0h
   152                              <1> WriteAccess     equ 1h
   153                              <1> RWAccess        equ 2h
   154                              <1> ;Bit 3 reserved 0
   155                              <1> ;Sharing modes  Bits[6:4]
   156                              <1> CompatShare     equ 0h
   157                              <1> denyRWShare     equ 10h
   158                              <1> denyWriteShare  equ 20h
   159                              <1> denyReadShare   equ 30h
   160                              <1> denyNoneShare   equ 40h
   161                              <1> ;Bit 7 reserved 0
   162                              <1> ;Bits 8-12 reserved 0
   163                              <1> ;Critical Error handling
   164                              <1> critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   165                              <1> ;Buffering on writes
   166                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   167                              <1> ;FCB opened file?
   168                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   169                              <1> ;Attribute Byte
   170                              <1> readOnlyFile    equ 1h
   171                              <1> hiddenFile      equ 2h
   172                              <1> systemFile      equ 4h
   173                              <1> volumeLabel     equ 8h
   174                              <1> directoryFile   equ 10h ;Directory entry
   175                              <1> archiveFile     equ 20h
   176                              <1> ;Device Info equates
   177                              <1> ;For a block device, bits [5:0] contain the drive number
   178                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   179                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   180                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   181                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   182                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   183                              <1> devBinary       equ 20h ;If set, r/w device in Binary mode!!!
   184                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   185                              <1> blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   186                              <1> devCharDev      equ 80h ;If set, it is a char device!
   187                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   188                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   189                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   190                              <1> blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   191                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   215                              <1>     .dataarea:             ;Points to the start of the data area
   216                              <1> endstruc
   217                              <1> ;Buffer Flag equates
   218                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   219                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   220                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   221                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   222                              <1> refBuffer   equ 20h ;Data in buffer referenced by an application
   223                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   224                              <1> ;------------------------------------------------------------------------;
   225                              <1> ; Memory control block for each memory arena
   226                              <1> ;------------------------------------------------------------------------;
   227                              <1> struc mcb
   228 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   229 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   230 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   231 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   232                              <1>     .program:
   233                              <1> endstruc
   234                              <1> ;MCB equates
   235                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   236                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   237                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   238                              <1> mcbMarkCtn      equ "M"
   239                              <1> mcbMarkEnd      equ "Z"
   240                              <1> 
   241                              <1> memFirstFit     equ 0   ;First free block goes to application
   242                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   243                              <1> memLastFit      equ 2   ;Last free block goes to application
   244                              <1> 
   245                              <1> ;Owner = Para aligned address => Owning application PSP
   246                              <1> ;...To consider...
   247                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   248                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   249                              <1> ;------------------------------------------------------------------------;
   250                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   251                              <1> ; following order, thus allowing for return values to be placed in the 
   252                              <1> ; registers by accessing the caller register stack frame.
   253                              <1> ;------------------------------------------------------------------------;
   254                              <1> struc callerFrame
   255 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   256 00000008 ????????????????    <1>     .rbx    resq 1    
   257 00000010 ????????????????    <1>     .rcx    resq 1
   258 00000018 ????????????????    <1>     .rdx    resq 1
   259 00000020 ????????????????    <1>     .rsi    resq 1
   260 00000028 ????????????????    <1>     .rdi    resq 1
   261 00000030 ????????????????    <1>     .rbp    resq 1
   262 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   263 00000040 ????????????????    <1>     .r9     resq 1
   264                              <1> ;Pushed by Processor when invoked via Interrupt
   265 00000048 ????????????????    <1>     .rip    resq 1
   266 00000050 ????????????????    <1>     .cs     resq 1
   267 00000058 ????????????????    <1>     .flags  resq 1
   268                              <1> endstruc
   269                              <1> 
   270                              <1> struc fcb
   271                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   272 00000000 ??                  <1>     .driveNum   resb 1
   273 00000001 ????????????????    <1>     .filename   resb 8
   274 00000009 ??????              <1>     .fileext    resb 3
   275 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   276                              <1> ;One block consists of 128 records, of size denoted in the below
   277 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   278 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   279 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   280 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   281 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   282 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   283 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   284 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   285 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   286                              <1>     ;If record size > 64, high byte is ignored.
   287                              <1>     ;Used for random read and write operations to find the right record
   288                              <1> endstruc
   289                              <1> 
   290                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   291 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   292 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   293 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   294 0000000D ????????            <1>     .dirOffset  resd 1  ;Entry within dir (made a dword but will never be so)
   295 00000011 ????????            <1>     .parCluster resd 1  ;Parent cluster number
   296 00000015 ??                  <1>     .atrribFnd  resb 1  ;Attrib of file found
   297 00000016 ????                <1>     .fileTime   resw 1  ;File time
   298 00000018 ????                <1>     .fileDate   resw 1  ;File date
   299 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   300 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   301                              <1> endstruc
   302                              <1> 
   303                              <1> struc psp
   304 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   305 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   306 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   307 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   308 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   309 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   310 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   311 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   312 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   313 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   314 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   315 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   316 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   317                              <1> ;Extra handle arrays are grouped into a linked list
   318                              <1> ;The below are in the same place as in DOS
   319 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   320 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   321                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   322 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   323 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   324                              <1> endstruc
   325                              <1> 
   326                              <1> struc clkStruc
   327 00000000 ????                <1>     .dateWord   resw 1
   328 00000002 ??                  <1>     .minutes    resb 1
   329 00000003 ??                  <1>     .hours      resb 1
   330 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   331 00000005 ??                  <1>     .seconds    resb 1
   332                              <1> endstruc
   333                              <1> 
   334                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   335                              <1> ;for a space of 64Gb
   336                              <1> dosAPTsize  equ 60*4096
     8                                  %include "./Source/Debug/debSym.inc"
     9                              <1> ;This file will include the debuging symbols
    10                              <1> 
    11                              <1> %define true 1
    12                              <1> %define false 0
    13                              <1> 
    14                              <1> ;Switch the DEBUG to false in production!
    15                              <1> %define DEBUG false
    16                              <1> %define DPBINFO false
    17                              <1> %define REGS true
    18                              <1> %define ENDSTATUS true
    19                              <1> %define ALLOCTEST true
    20                              <1> 
    21                              <1> 
    22                              <1> ;Use this space as the debug stack
    23                              <1> %define debStackTop 80000h
     9                                  %include "./Source/Include/dosError.inc"
    10                              <1> ;DOS Error codes
    11                              <1> 
    12                              <1> ;Extended Error Codes
    13                              <1> errInvFnc   equ 1   ;Invalid function number
    14                              <1> errFnf      equ 2   ;File not found
    15                              <1> errPnf      equ 3   ;Path not found
    16                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    17                              <1> errAccDen   equ 5   ;Access denied (to resource)
    18                              <1> errBadHdl   equ 6   ;Invalid handle
    19                              <1> errMCBbad   equ 7   ;MCB's destroyed
    20                              <1> errNoMem    equ 8   ;Insufficient memory
    21                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    22                              <1> errBadEnv   equ 10  ;Invalid environment
    23                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    24                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    25                              <1> errInvDat   equ 13  ;Invalid data
    26                              <1> ;           equ 14  ;Reserved
    27                              <1> errBadDrv   equ 15  ;Invalid drive specified
    28                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    29                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    30                              <1> errNoFil    equ 18  ;No more files
    31                              <1> ;The following are Driver error codes + 19
    32                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    33                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    34                              <1> errUnkUnt   equ 20  ;Unknown Unit
    35                              <1> errDrvNR    equ 21  ;Drive not ready
    36                              <1> errUnkCmd   equ 22  ;Unknown Command
    37                              <1> errCRCerr   equ 23  ;Data (CRC) error
    38                              <1> errBadRLn   equ 24  ;Bad request structure length
    39                              <1> errSekErr   equ 25  ;Seek error
    40                              <1> errUnkMed   equ 26  ;Unknown media type
    41                              <1> errSecNF    equ 27  ;Sector not Found
    42                              <1> errNoPap    equ 28  ;Printer out of paper
    43                              <1> errWF       equ 29  ;Write fault
    44                              <1> errRF       equ 30  ;Read fault
    45                              <1> errGF       equ 31  ;General fault
    46                              <1> ;Number 32-33 reserved
    47                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    48                              <1> errNoFCB    equ 35  ;FCB unavailable
    49                              <1> ;Numbers 36-82 reserved
    50                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    51                              <1> errFI24     equ 83  ;Fail on INT 24h
    52                              <1> ;Numbers 84-88 reserved
    53                              <1> ;-----------------------------------------------------------------------------
    54                              <1> ;Error Loci
    55                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    56                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    57                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    58                              <1> eLocSer     equ 4   ;Serial Device error
    59                              <1> eLocMem     equ 5   ;Related to RAM
    60                              <1> ;-----------------------------------------------------------------------------
    61                              <1> ;Error Actions
    62                              <1> eActRet     equ 1   ;Retry
    63                              <1> eActDRet    equ 2   ;Delay then retry
    64                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    65                              <1> eActAbt     equ 4   ;Abort with cleanup
    66                              <1> eActKil     equ 5   ;Abort without cleanup
    67                              <1> eActIgn     equ 6   ;Ignore error
    68                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    69                              <1> ;-----------------------------------------------------------------------------
    70                              <1> ;Error classes
    71                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    72                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    73                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    74                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    75                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    76                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    77                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requestss etc...
    78                              <1> eClsNotFnd  equ 8   ;Resource not found
    79                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    80                              <1> eClsLocked  equ 10  ;Resource Locked
    81                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    82                              <1> eClsClash   equ 12  ;Resource already exists!
    83                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  Segment .text align=1   ;Init code
    11                                  %include "./Source/Sysinit/sysInit.asm"
    12                              <1> ; We arrive here with the following values in the registers.
    13                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    14                              <1> ; dx  = Int 33h boot device number
    15                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    16                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    17 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    18 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    18 0000000B 909090909090909090- <1>
    18 00000014 909090909090909090- <1>
    18 0000001D 909090909090909090- <1>
    18 00000026 909090909090909090- <1>
    18 0000002F 909090909090909090- <1>
    18 00000038 909090909090909090- <1>
    18 00000041 909090909090909090- <1>
    18 0000004A 909090909090909090- <1>
    18 00000053 909090909090909090- <1>
    18 0000005C 909090909090909090- <1>
    18 00000065 909090909090909090- <1>
    18 0000006E 909090909090909090- <1>
    18 00000077 909090909090909090- <1>
    18 00000080 909090909090909090- <1>
    18 00000089 909090909090909090- <1>
    18 00000092 909090909090909090- <1>
    18 0000009B 909090909090909090- <1>
    18 000000A4 909090909090909090- <1>
    18 000000AD 909090909090909090- <1>
    18 000000B6 909090909090909090- <1>
    18 000000BF 909090909090909090- <1>
    18 000000C8 909090909090909090- <1>
    18 000000D1 909090909090909090- <1>
    18 000000DA 909090909090909090- <1>
    18 000000E3 909090909090909090- <1>
    18 000000EC 909090909090909090- <1>
    18 000000F5 909090909090909090- <1>
    18 000000FE 9090                <1>
    19                              <1> ;First move the alignment of the DOSSEG to 4Kb
    20 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    21 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    22 00000106 0F32                <1>     rdmsr
    23 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    24 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    25 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    26 00000110 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    27 00000113 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    28 0000011A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    29 00000121 89F8                <1>     mov eax, edi
    30 00000123 4889FA              <1>     mov rdx, rdi
    31 00000126 48C1EA20            <1>     shr rdx, 20h
    32 0000012A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    33 0000012C 5A                  <1>     pop rdx
    34                              <1> ;------------------------------------------------;
    35                              <1> ;              Connect Debugger                  ;
    36                              <1> ;------------------------------------------------;
    37                              <1> %if DEBUG
    38                              <1> ;Only connect if in debug mode
    39                              <1>     mov eax, 0C501h ;Connect debugger
    40                              <1>     int 35h
    41                              <1> %endif
    42                              <1> ;------------------------------------------------;
    43                              <1> ;           Sanitise the data area               ;
    44                              <1> ;------------------------------------------------;
    45 0000012D B9[3CD50300]        <1>     mov ecx, dSegLen
    46 00000132 30C0                <1>     xor al, al
    47 00000134 57                  <1>     push rdi    ;Temp save rdi on the stack
    48 00000135 F3AA                <1>     rep stosb
    49 00000137 5F                  <1>     pop rdi
    50                              <1> ;------------------------------------------------;
    51                              <1> ;          Start saving Basic DOS data           ;
    52                              <1> ;------------------------------------------------;
    53 00000138 64881425[10C00300]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    54                              <1> ;Copy DOS to its final resting place
    55 00000140 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    55 00000145 [00C00300]          <1>
    56 00000149 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    56 0000014E [08C00300]          <1>
    57 00000152 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    58 00000155 4881C7[3CD50300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    59 0000015C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    60 00000163 B900100000          <1>     mov ecx, 1000h
    61 00000168 F348A5              <1>     rep movsq
    62                              <1> 
    63 0000016B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    64 0000016D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    65 00000171 664489C0            <1>     mov ax, r8w
    66 00000175 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
    67 0000017D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    68 00000185 64C60425[B2C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    68 0000018D 05                  <1>
    69 0000018E 64C60425[13C00300]- <1>     mov byte fs:[numLogDrv], 0     ;Number of logical drives
    69 00000196 00                  <1>
    70 00000197 6466C70425-         <1>     mov word fs:[numFiles], 5      ;Default 8 files, at start 5
    70 0000019C [B4C00300]0500      <1>
    71 000001A2 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
    71 000001A7 [B6C00300]1400      <1>
    72 000001AD 64C60425[B3C00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
    72 000001B5 01                  <1>
    73                              <1>     ;If no detected Int 33h devices, halt 
    74 000001B6 49C1E810            <1>     shr r8, 2*8
    75 000001BA 4584C0              <1>     test r8b, r8b
    76 000001BD 0F84F60A0000        <1>     jz errorInit
    77                              <1> ;------------------------------------------------;
    78                              <1> ;          Add additional page tables            ;
    79                              <1> ;------------------------------------------------;
    80                              <1> ;This will allow for up to 64Gb of addressible space
    81 000001C3 4889EF              <1>     mov rdi, rbp
    82                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    83 000001C6 B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
    84 000001CB 57                  <1>     push rdi
    85 000001CC 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    85 000001D5 00                  <1>
    86                              <1> pdtLoop:
    87 000001D6 48AB                <1>     stosq
    88 000001D8 480500002000        <1>     add rax, 200000h
    89 000001DE FFC9                <1>     dec ecx
    90 000001E0 75F4                <1>     jnz pdtLoop
    91 000001E2 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
    92                              <1> ;Now we add every 4kb page to the page directory pointer table
    93                              <1> ;15 4kb pages to consider
    94 000001E3 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
    95 000001E6 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
    96 000001E9 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
    97 000001F0 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
    98 000001F7 B93C000000          <1>     mov ecx, 60
    99 000001FC 480D03000000        <1>     or rax, 3h      ;present and r/w
   100                              <1> pdptLoop:
   101 00000202 48AB                <1>     stosq
   102 00000204 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   103 0000020A FFC9                <1>     dec ecx
   104 0000020C 75F4                <1>     jnz pdptLoop
   105 0000020E 0F20DF              <1>     mov rdi, cr3
   106 00000211 0F22DF              <1>     mov cr3, rdi
   107                              <1> 
   108                              <1> ;------------------------------------------------;
   109                              <1> ;                   MCB inits                    ;
   110                              <1> ;------------------------------------------------;
   111                              <1> mcbInit:
   112 00000214 B820E80000          <1>     mov eax, 0E820h
   113 00000219 CD35                <1>     int 35h
   114                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   115 0000021B E808010000          <1>     call .mcbFindAddress
   116 00000220 7349                <1>     jnc .mcbi1  ;If found, proceed
   117                              <1>     ;Here, we try use E801h
   118 00000222 B801E80000          <1>     mov eax, 0E801h
   119 00000227 CD35                <1>     int 35h
   120 00000229 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   121 0000022C 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   122 0000022F 85C0                <1>     test eax, eax
   123 00000231 741B                <1>     jz .worst
   124 00000233 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   125 00000236 C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   126 00000239 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax
   127 00000241 64891C25[18C00300]  <1>     mov dword fs:[hiProtMem], ebx
   128 00000249 E927010000          <1>     jmp mcbBuild
   129                              <1> .worst:
   130                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   131 0000024E B800002000          <1>     mov eax, 200000h
   132 00000253 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   132 00000258 [08C00300]          <1>
   133 0000025C 29D8                <1>     sub eax, ebx
   134 0000025E 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   135 00000266 E90A010000          <1>     jmp mcbBuild 
   136                              <1> .mcbi1:
   137 0000026B 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   138 0000026E 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   138 00000277 00                  <1>
   139 00000278 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   140 0000027C 0F85C6000000        <1>     jne .mcbFail
   141 00000282 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   142                              <1>     ;PCI hole always exists so this value will always be a dword
   143 00000286 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax
   144 0000028E 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   145 00000291 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   146 00000294 4881FB00000001      <1>     cmp rbx, 1000000h  
   147 0000029B 773C                <1>     ja .skipISA
   148                              <1> ;Here we deal with ISA hole issues
   149 0000029D B820E80000          <1>     mov eax, 0E820h
   150 000002A2 CD35                <1>     int 35h
   151 000002A4 48B800000001000000- <1>     mov rax, 1000000h
   151 000002AD 00                  <1>
   152 000002AE E875000000          <1>     call .mcbFindAddress
   153 000002B3 0F82BC000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   154 000002B9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   154 000002C2 00                  <1>
   155 000002C3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   156 000002C7 0F85A8000000        <1>     jne mcbBuild  
   157 000002CD 488B5808            <1>     mov rbx, qword [rax + 8]
   158 000002D1 64891C25[18C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   159                              <1> .skipISA:
   160 000002D9 B820E80000          <1>     mov eax, 0E820h
   161 000002DE CD35                <1>     int 35h
   162 000002E0 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   162 000002E9 00                  <1>
   163 000002EA E839000000          <1>     call .mcbFindAddress
   164 000002EF 0F8280000000        <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   165 000002F5 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   165 000002FE 00                  <1>
   166 000002FF 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   167 00000303 7570                <1>     jne mcbBuild   
   168 00000305 488B5808            <1>     mov rbx, qword [rax + 8]
   169                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   170 00000309 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   170 00000312 00                  <1>
   171 00000313 4839CB              <1>     cmp rbx, rcx
   172 00000316 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   173 0000031A 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   173 0000031F [1CC00300]          <1>
   174 00000323 E94D000000          <1>     jmp mcbBuild
   175                              <1> .mcbFindAddress:
   176                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   177                              <1> ;Entry: rax = Address of arena to search for
   178                              <1> ;       rsi = Pointer to memory map
   179                              <1> ;       ecx = Number of 24 byte entries
   180                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   181                              <1> ;       CF=CY : value in rax not found
   182 00000328 56                  <1>     push rsi
   183 00000329 51                  <1>     push rcx
   184 0000032A 50                  <1>     push rax
   185                              <1> .mfa0:
   186 0000032B 483B06              <1>     cmp rax, qword [rsi]
   187 0000032E 7410                <1>     je .mcbAddressFound
   188 00000330 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   189 00000337 FFC9                <1>     dec ecx
   190 00000339 79F0                <1>     jns .mfa0
   191                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   192 0000033B 58                  <1>     pop rax
   193 0000033C 59                  <1>     pop rcx
   194 0000033D 5E                  <1>     pop rsi
   195 0000033E F9                  <1>     stc
   196 0000033F C3                  <1>     ret
   197                              <1> .mcbAddressFound:
   198 00000340 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   199 00000343 59                  <1>     pop rcx ;Pop old rax value off
   200 00000344 59                  <1>     pop rcx
   201 00000345 5E                  <1>     pop rsi
   202 00000346 F8                  <1>     clc
   203 00000347 C3                  <1>     ret
   204                              <1> .mcbFail:
   205 00000348 488D2D0C000000      <1>     lea rbp, .mcbFailmsg
   206 0000034F B804130000          <1>     mov eax, 1304h
   207 00000354 CD30                <1>     int 30h
   208 00000356 E95E090000          <1>     jmp errorInit
   209 0000035B 4D656D6F727920416C- <1> .mcbFailmsg: db "Memory Allocation Error",0Ah,0Dh,0
   209 00000364 6C6F636174696F6E20- <1>
   209 0000036D 4572726F720A0D00    <1>
   210                              <1> mcbBuild:
   211                              <1> ;Actually build the MCB chain here
   212                              <1> ;Start by computing the difference between userbase and DOS area
   213                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   214 00000375 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   214 0000037A [08C00300]          <1>
   215 0000037E 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   216 00000385 56                  <1>     push rsi    ;Save ptr
   217 00000386 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   218 0000038D 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   219 00000390 64293425[14C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   220 00000398 5B                  <1>     pop rbx
   221 00000399 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   222 0000039C 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   223 000003A4 648B3425[14C00300]  <1>     mov esi, dword fs:[loProtMem]
   224 000003AC C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   225 000003AF 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   226 000003B2 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   226 000003B7 [78C00300]          <1>
   227                              <1> 
   228                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   229 000003BB 64813C25[18C00300]- <1>     cmp dword fs:[hiProtMem], 0
   229 000003C3 00000000            <1>
   230 000003C7 746E                <1>     jz .skipISA
   231                              <1>     ;Here if an ISA hole exists, place a MCB around it
   232 000003C9 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   233                              <1>     ;Remove one MCB worth of space from alloc
   234 000003D0 31C9                <1>     xor ecx, ecx
   235 000003D2 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   236 000003D5 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   237 000003DB C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   238 000003DE C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   239 000003E1 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   240 000003E4 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   241 000003E7 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   242 000003EF 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   242 000003F8 00                  <1>
   243 000003F9 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   244 000003FC 480510000000        <1>     add rax, mcb_size
   245 00000402 4829C1              <1>     sub rcx, rax    ;Take their difference
   246 00000405 C1E904              <1>     shr ecx, 4
   247 00000408 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   248 0000040B C1E104              <1>     shl ecx, 4  ;Get bytes again
   249 0000040E 4881C310000000      <1>     add rbx, mcb_size
   250 00000415 4801CB              <1>     add rbx, rcx
   251                              <1>     ;RBX should now be at 16Mb
   252 00000418 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   253 0000041B 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   254 00000423 648B0C25[18C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   255 0000042B C1E904              <1>     shr ecx, 4  ;Get paragraphs
   256 0000042E 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   257 00000434 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   258                              <1> .skipISA:
   259                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   260                              <1>     ;rbx points to a block with "Z" marker
   261 00000437 64813C25[1CC00300]- <1>     cmp dword fs:[longMem], 0
   261 0000043F 00000000            <1>
   262 00000443 7470                <1>     jz .exit
   263                              <1>     ;Add PCI hole MCB
   264 00000445 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   265                              <1>     ;Remove one MCB worth of space from alloc
   266 0000044C 31C9                <1>     xor ecx, ecx
   267 0000044E 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   268 00000451 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   269 00000457 C1E104              <1>     shl ecx, 4  ;Get bytes
   270 0000045A C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   271 0000045D 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   272 00000460 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   273 00000463 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   274 0000046B 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   274 00000474 00                  <1>
   275 00000475 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   276 00000478 480510000000        <1>     add rax, mcb_size
   277 0000047E 4829C1              <1>     sub rcx, rax    ;Take their difference
   278 00000481 C1E904              <1>     shr ecx, 4
   279 00000484 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   280 00000487 C1E104              <1>     shl ecx, 4  ;Get bytes again
   281 0000048A 4881C310000000      <1>     add rbx, mcb_size
   282 00000491 4801CB              <1>     add rbx, rcx
   283                              <1>     ;RBX should now be at 4Gb
   284 00000494 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   285 00000497 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   286 0000049F 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   286 000004A4 [1CC00300]          <1>
   287 000004A8 48C1E904            <1>     shr rcx, 4
   288 000004AC 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   289 000004B2 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   290                              <1> .exit:
   291                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   292 000004B5 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   293                              <1> ;------------------------------------------------;
   294                              <1> ;          Kernel inits and adjustments          ;
   295                              <1> ;------------------------------------------------;
   296                              <1> ;Adjust Interrupt Entries Int 40h-49h
   297                              <1> adjInts:
   298 000004BC B340                <1>     mov bl, 40h
   299 000004BE B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   300 000004C3 CD35                <1>     int 35h
   301 000004C5 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   302 000004CA 488D3D4C080000      <1>     lea rdi, intData
   303 000004D1 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   304                              <1> .ai0:
   305 000004D3 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   306 000004D8 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   307 000004DB 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   308                              <1> .ai1:
   309 000004DE CD35                <1>     int 35h
   310 000004E0 4881C708000000      <1>     add rdi, 8
   311 000004E7 FFC1                <1>     inc ecx
   312 000004E9 81F950000000        <1>     cmp ecx, 50h
   313 000004EF 75E2                <1>     jne .ai0
   314                              <1> 
   315                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   316                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   317                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   318                              <1>     %if DEBUG
   319                              <1> debugPopUpMsg:
   320                              <1>     push rbx
   321                              <1>     push rbp
   322                              <1>     push rcx
   323                              <1>     push rdx
   324                              <1>     mov ecx, 53 ;A large number of lines
   325                              <1>     xor edx, edx    ;COM 1
   326                              <1> .cls:
   327                              <1>     mov eax, 010Ah ;Transmit Line feed
   328                              <1>     int 34h
   329                              <1>     dec ecx
   330                              <1>     jnz .cls
   331                              <1>     lea rbx, qword [debPrintNullString + rbp]
   332                              <1>     lea rbp, .msg
   333                              <1>     call rbx
   334                              <1>     jmp short .exit
   335                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   336                              <1> .exit:
   337                              <1>     pop rdx
   338                              <1>     pop rcx
   339                              <1>     pop rbp
   340                              <1>     pop rbx
   341                              <1>     %endif
   342                              <1> 
   343                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   344 000004F1 488D15C1070000      <1>     lea rdx, errorInit ;Get segment start address
   345 000004F8 B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   346 000004FD CD41                <1>     int 41h
   347 000004FF 488D15B3070000      <1>     lea rdx, errorInit ;Get segment start address
   348 00000506 B844250000          <1>     mov eax, 2544h
   349 0000050B CD41                <1>     int 41h
   350                              <1> ;------------------------------------------------;
   351                              <1> ;          Driver Adjustments and inits          ;
   352                              <1> ;------------------------------------------------;
   353                              <1> ;Modify the pointers in nData before putting them in the data area
   354 0000050D 48012D89080000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   355 00000514 48012D8C080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   356 0000051B 48012D8D080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   357                              <1> ;Copy the Null driver to its location in Sysvars
   358 00000522 B922000000          <1>     mov ecx, drvHdr_size
   359 00000527 488D356F080000      <1>     lea rsi, qword [nData]
   360 0000052E 488DBD[C3C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   361 00000535 F3A4                <1>     rep movsb   
   362                              <1> 
   363                              <1> ;Adjust the addresses in the other driver headers 
   364 00000537 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   364 00000539 [F71E000000000000]  <1>
   365 00000541 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   366 00000546 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   367                              <1> adjDrivers:
   368 0000054A E857070000          <1>     call adjustDrvHdr
   369 0000054F E2F9                <1>     loop adjDrivers
   370                              <1> 
   371                              <1> ;Open NUL
   372 00000551 488D9D[24C00300]    <1>     lea rbx, qword [rbp + charReqHdr]
   373 00000558 C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
   374 0000055B C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
   375 0000055F FF95[CDC00300]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   376 00000565 FF95[D5C00300]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   377                              <1> ;Open CON
   378                              <1> conInit:    ;Rather than keeping this resident... do it here
   379                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   380 0000056B 488D95[DE210000]    <1>     lea rdx, qword [rbp + fastOutput]
   381 00000572 B849250000          <1>     mov eax, 2549h
   382 00000577 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   383 00000579 488D95[E6210000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   384 00000580 B83B250000          <1>     mov eax, 253Bh
   385 00000585 CD41                <1>     int 41h ;Hook int 3Bh
   386                              <1> .ci0:
   387 00000587 B401                <1>     mov ah, 01      ;Get buffer status
   388 00000589 CD36                <1>     int 36h
   389 0000058B 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   390 0000058D 30E4                <1>     xor ah, ah
   391 0000058F CD36                <1>     int 36h ;Read key to flush from buffer
   392 00000591 EBF4                <1>     jmp short .ci0
   393                              <1> .ci1:
   394 00000593 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   395 00000598 CD30                <1>     int 30h
   396 0000059A B402                <1>     mov ah, 02h
   397 0000059C 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   398 0000059E 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   399 000005A0 CD30                <1>     int 30h
   400 000005A2 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   401 000005A4 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   402 000005A9 CD30                <1>     int 30h
   403                              <1> 
   404                              <1>     ;Save ptr to ConHdr in Sysvars
   405 000005AB 488D85[F71E0000]    <1>     lea rax, qword [rbp + conHdr]
   406 000005B2 6448890425-         <1>     mov qword fs:[conPtr], rax
   406 000005B7 [98C00300]          <1>
   407                              <1> 
   408                              <1>     ;Save ptr to ClkHdr in Sysvars
   409 000005BB 488D85[5D1F0000]    <1>     lea rax, qword [rbp + clkHdr]
   410 000005C2 6448890425-         <1>     mov qword fs:[clockPtr], rax
   410 000005C7 [90C00300]          <1>
   411                              <1> 
   412                              <1> ;------------------------------------------------;
   413                              <1> ;         Link DOS to temporary Buffer           ;
   414                              <1> ;------------------------------------------------;
   415                              <1> tempBufferInit:
   416 000005CB 488DBD[C8020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   417 000005D2 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   417 000005D7 [A2C00300]          <1>
   418 000005DB 31C0                <1>     xor eax, eax
   419 000005DD 48FFC8              <1>     dec rax
   420 000005E0 48AB                <1>     stosq   ;.nextBufPtr, end of list
   421 000005E2 AA                  <1>     stosb   ;.driveNumber, Free entry
   422 000005E3 48FFC0              <1>     inc rax
   423 000005E6 AA                  <1>     stosb   ;.bufferFlags, No flags
   424                              <1> ;------------------------------------------------;
   425                              <1> ;         Init msd driver, create DPB            ;
   426                              <1> ;------------------------------------------------;
   427                              <1> storageInits:
   428                              <1> ;First save dpb pointer in sysvars
   429 000005E7 488D9D[69010000]    <1>     lea rbx, qword [rbp + firstDPB]
   430 000005EE 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   430 000005F3 [80C00300]          <1>
   431                              <1> ;Open Mass Storage
   432                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   433                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   434                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   435                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   436                              <1>     ;mov al, byte fs:[numLogDrv]
   437                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   438                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   439                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   440                              <1>     ;Check if it returned OK first!
   441                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   442                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   443                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   444                              <1>     ;mov byte fs:[numLogDrv], al
   445                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   446                              <1> 
   447                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   448 000005F7 E8C3070000          <1>     call diskInit
   449 000005FC 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   450 000005FF 648A0425[13C00300]  <1>     mov al, byte fs:[numLogDrv]
   451 00000607 488D95[9E280000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   452 0000060E 30C9                <1>     xor cl, cl  ;Clear counter
   453 00000610 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   453 00000615 [80C00300]          <1>
   454                              <1> .si0:   
   455 00000619 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   456 0000061C B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   457 0000061E CD41                <1>     int 41h
   458                              <1> ;Add other data to DPB
   459 00000620 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   460 00000623 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   461 00000626 50                  <1>     push rax
   462 00000627 488D87[7F1F0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   463 0000062E 4889451A            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   464 00000632 58                  <1>     pop rax
   465 00000633 FEC1                <1>     inc cl
   466 00000635 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   467 00000637 7416                <1>     je .si1
   468 00000639 50                  <1>     push rax
   469 0000063A 488D4534            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   470 0000063E 48894524            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   471 00000642 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   472 00000645 58                  <1>     pop rax
   473 00000646 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   474 0000064D EBCA                <1>     jmp short .si0
   475                              <1> .si1:
   476                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   477 0000064F 48C74524FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   478 00000657 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   479                              <1> ;------------------------------------------------;
   480                              <1> ;          Find largest sector size              ;
   481                              <1> ;------------------------------------------------;
   482                              <1> sectorSizeSearch:
   483                              <1> ;Done by reading BPB's for each drive
   484 0000065A 488D9D[9E280000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   485                              <1>     
   486                              <1>     ;Go thru each block individually
   487 00000661 31C0                <1>     xor eax, eax
   488 00000663 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   489                              <1> .findLargest:
   490 00000666 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   491 0000066A 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   492 0000066F 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   493 00000676 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   494 00000679 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   495 0000067C 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   496 0000067E 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   496 00000683 [A0C00300]          <1>
   497                              <1>     
   498                              <1> ;------------------------------------------------;
   499                              <1> ;                 Temp CDS inits                 ;
   500                              <1> ;------------------------------------------------;
   501                              <1> tempCDS:
   502                              <1> ;Build a temporary CDS for Drive A to use it for booting
   503 00000687 488DBD[6D020000]    <1>     lea rdi, qword [rbp + initCDS]
   504 0000068E 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   504 00000693 [AAC00300]          <1>
   505 00000697 B943000000          <1>     mov ecx, 67 ;Buffer length
   506 0000069C 31C0                <1>     xor eax, eax
   507 0000069E 4889FB              <1>     mov rbx, rdi    ;Save CDS pointer in rbx
   508 000006A1 F3AA                <1>     rep stosb   ;Zero out the path string
   509 000006A3 4889DF              <1>     mov rdi, rbx
   510 000006A6 B041                <1>     mov al, "A"
   511 000006A8 AA                  <1>     stosb
   512 000006A9 B03A                <1>     mov al, ":"
   513 000006AB AA                  <1>     stosb
   514 000006AC B05C                <1>     mov al, "\"
   515 000006AE AA                  <1>     stosb
   516 000006AF 4889DF              <1>     mov rdi, rbx
   517 000006B2 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   518 000006B8 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   518 000006BD [80C00300]          <1>
   519 000006C1 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   520 000006C5 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   521                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   522                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   523                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   524 000006CB 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax    ;eax was zeroed before
   525                              <1> ;------------------------------------------------;
   526                              <1> ;     Set up general PSP areas and DOS vars      ;
   527                              <1> ;------------------------------------------------;
   528                              <1>     ;Additional DOS Vars init
   529 000006CE 31C0                <1>     xor eax, eax
   530 000006D0 64880425[41C10300]  <1>     mov byte fs:[currentDrv], al ;Current Drive = Drive A
   531 000006D8 64880425[43C10300]  <1>     mov byte fs:[breakFlag], al  ;Break off
   532 000006E0 64880425[44C10300]  <1>     mov byte fs:[verifyFlag], al ;Write only
   533 000006E8 64880425[42C10300]  <1>     mov byte fs:[singleDrv], al  ;Only used on single drive systems
   534 000006F0 64880425[0EC10300]  <1>     mov byte fs:[critErrFlag], al   ;Not in critical error
   535 000006F8 64880425[0FC10300]  <1>     mov byte fs:[inDOS], al      ;Not in DOS
   536 00000700 64C60425[10C10300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   536 00000708 FF                  <1>
   537 00000709 6466890425-         <1>     mov word fs:[errorLevel], ax   ;Last return code is 0, no error
   537 0000070E [3EC10300]          <1>
   538 00000712 64880425[40C10300]  <1>     mov byte fs:[allocStrat], al    ;First Fit
   539                              <1> 
   540                              <1>     ;SYSVARS PSP Init
   541 0000071A 488D1DDFF8FFFF      <1>     lea rbx, qword [tempPSP]
   542 00000721 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   542 00000726 [26C10300]          <1>
   543 0000072A 53                  <1>     push rbx
   544 0000072B 4881C380000000      <1>     add rbx, psp.dta
   545 00000732 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   545 00000737 [1EC10300]          <1>
   546 0000073B 5B                  <1>     pop rbx
   547 0000073C 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   548 00000741 C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   549 00000748 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   550 0000074C 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   551 00000750 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   552 00000754 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   553 00000758 48B800000001020000- <1>     mov rax, 0000000201000000h  ;Store default handles in JFT
   553 00000761 00                  <1>
   554 00000762 48AB                <1>     stosq   ;8 bytes
   555 00000764 31C0                <1>     xor eax, eax
   556 00000766 48AB                <1>     stosq   ;16 bytes
   557 00000768 AB                  <1>     stosd   ;20 bytes
   558 00000769 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   559 00000771 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   560 00000775 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   561 00000779 4889DA              <1>     mov rdx, rbx
   562 0000077C B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   563 00000781 CD41                <1>     int 41h
   564 00000783 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   565 00000787 B843350000          <1>     mov eax, 3543h
   566 0000078C CD41                <1>     int 41h
   567 0000078E 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   568 00000792 B844350000          <1>     mov eax, 3544h
   569 00000797 CD41                <1>     int 41h
   570 00000799 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   571                              <1> 
   572 0000079D B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   573 000007A2 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   574 000007A6 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   575                              <1> ;------------------------------------------------;
   576                              <1> ;          Default File Handle Creation          ;
   577                              <1> ;------------------------------------------------;
   578                              <1> defaultFileHandles:
   579                              <1> ;Fill in the default file table entries
   580 000007A8 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstSftHeader]
   581 000007AF 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   582 000007B6 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   583 000007BC 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   583 000007C1 [88C00300]          <1>
   584                              <1> ;GOTO FIRST FILE 
   585 000007C5 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   586                              <1> ;Write CON
   587 000007CC 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   588 000007D1 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   589 000007D7 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   590 000007DB C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   591                              <1>     ;No EOF when reading from the device
   592 000007DF 64488B0425-         <1>     mov rax, qword fs:[conPtr]  ;Get pointer to CON device
   592 000007E4 [98C00300]          <1>
   593 000007E8 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   594                              <1>     ;Ignore disk related fields and Date/Time of open
   595 000007EC 488D7B2C            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   596 000007F0 488D3598000000      <1>     lea rsi, qword [.dfhCon]
   597                              <1>     ;11 chars in 8.3 name
   598 000007F7 48A5                <1>     movsq   ;8 chars
   599 000007F9 66A5                <1>     movsw   ;10 chars
   600 000007FB A4                  <1>     movsb   ;11 chars
   601 000007FC 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   601 00000801 [26C10300]          <1>
   602 00000805 48894337            <1>     mov qword [rbx + sft.qPSPOwner], rax
   603                              <1> ;GOTO NEXT ENTRY
   604 00000809 4881C343000000      <1>     add rbx, sft_size   ;Goto next SFT
   605                              <1> ;Write AUX
   606 00000810 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   607 00000815 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   608 0000081B C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   609 0000081F C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   610                              <1>     ;No EOF when reading from the device
   611 00000823 488B85[191F0000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   612 0000082A 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   613                              <1>     ;Ignore disk related fields and Date/Time of open
   614 0000082E 488D7B2C            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   615 00000832 488D3561000000      <1>     lea rsi, qword [.dfhAux]
   616                              <1>     ;11 chars in 8.3 name
   617 00000839 48A5                <1>     movsq   ;8 chars
   618 0000083B 66A5                <1>     movsw   ;10 chars
   619 0000083D A4                  <1>     movsb   ;11 chars
   620 0000083E 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   620 00000843 [26C10300]          <1>
   621 00000847 48894337            <1>     mov qword [rbx + sft.qPSPOwner], rax
   622                              <1> ;GOTO NEXT ENTRY
   623 0000084B 4881C343000000      <1>     add rbx, sft_size   ;Goto next SFT
   624                              <1> ;Write PRN
   625 00000852 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   626 00000857 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   627 0000085D C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   628 00000861 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   629                              <1>     ;Want EOF when reading from to the device
   630 00000865 488B85[3B1F0000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   631 0000086C 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   632                              <1>     ;Ignore disk related fields and Date/Time of open
   633 00000870 488D7B2C            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   634 00000874 488D352A000000      <1>     lea rsi, qword [.dfhPrn]
   635                              <1>     ;11 chars in 8.3 name
   636 0000087B 48A5                <1>     movsq   ;8 chars
   637 0000087D 66A5                <1>     movsw   ;10 chars
   638 0000087F A4                  <1>     movsb   ;11 chars
   639 00000880 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   639 00000885 [26C10300]          <1>
   640 00000889 48894337            <1>     mov qword [rbx + sft.qPSPOwner], rax
   641 0000088D EB21                <1>     jmp short .dfhExit
   642 0000088F 434F4E202020202020- <1> .dfhCon db "CON        "
   642 00000898 2020                <1>
   643 0000089A 415558202020202020- <1> .dfhAux db "AUX        "
   643 000008A3 2020                <1>
   644 000008A5 50524E202020202020- <1> .dfhPrn db "PRN        "
   644 000008AE 2020                <1>
   645                              <1> .dfhExit:
   646                              <1> ;------------------------------------------------;
   647                              <1> ;               Load CONFIG.SYS                  ;
   648                              <1> ;------------------------------------------------;
   649                              <1> ;------------------------------------------------;
   650                              <1> ;              Process CONFIG.SYS                ;
   651                              <1> ;------------------------------------------------;
   652                              <1> ;------------------------------------------------;
   653                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   654                              <1> ;------------------------------------------------;
   655                              <1> ;------------------------------------------------;
   656                              <1> ;   Setup Final Data Areas With Overrides from   ;
   657                              <1> ;                  CONFIG.SYS                    ;
   658                              <1> ;------------------------------------------------;
   659                              <1> ;------------------------------------------------;
   660                              <1> ;           Load Command interpreter             ;
   661                              <1> ;------------------------------------------------;
   662 000008B0 488D1513040000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   663 000008B7 B409                <1>     mov ah, 09h
   664 000008B9 CD41                <1>     int 41h
   665                              <1> ;Resize DOS allocation before loading COMMAND.COM
   666 000008BB 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   666 000008C0 [78C00300]          <1>
   667 000008C4 4981C010000000      <1>     add r8, mcb.program
   668 000008CB BBE8120000          <1>     mov ebx, dynamicDataAreaLength
   669 000008D0 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   670 000008D3 FFC3                <1>     inc ebx
   671 000008D5 B44A                <1>     mov ah, 4Ah
   672 000008D7 CD41                <1>     int 41h
   673                              <1>     
   674                              <1>     %if DEBUG && ALLOCTEST
   675                              <1> ;Test Allocation, Growth and Deallocation
   676                              <1>     mov r15, qword fs:[currentPSP]
   677                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   678                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   679                              <1>     mov ah, 48h ;Allocate
   680                              <1>     int 41h
   681                              <1> 
   682                              <1>     mov r8, rax ;Move the pointer to r8
   683                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   684                              <1>     mov ah, 4Ah
   685                              <1>     int 41h
   686                              <1> 
   687                              <1>     mov ah, 49h ;Free r8
   688                              <1>     int 41h
   689                              <1>     mov qword fs:[currentPSP], r15
   690                              <1>     %endif
   691                              <1> 
   692                              <1>     %if ENDSTATUS
   693                              <1> debugFinal:
   694                              <1>     ;Print system state
   695 000008D9 55                  <1>     push rbp    ;Only rbp really matters here
   696 000008DA 4989E8              <1>     mov r8, rbp
   697                              <1> 
   698 000008DD 488D2DD0020000      <1>     lea rbp, .msg2
   699 000008E4 4D8D88[C4010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   700 000008EB 41FFD1              <1>     call r9
   701                              <1> 
   702 000008EE 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   703 000008F5 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   703 000008FA [08C00300]          <1>
   704                              <1> 
   705 000008FE 4D8D88[FF040000]    <1>     lea r9, qword [r8 + overlayQword]
   706 00000905 41FFD1              <1>     call r9
   707                              <1> 
   708 00000908 4881C31B000000      <1>     add rbx, 19+8
   709 0000090F 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   709 00000914 [00C00300]          <1>
   710 00000918 41FFD1              <1>     call r9
   711                              <1> 
   712 0000091B 4881C31B000000      <1>     add rbx, 19+8
   713 00000922 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   713 00000927 [78C00300]          <1>
   714 0000092B 41FFD1              <1>     call r9
   715                              <1> 
   716 0000092E 4881C31C000000      <1>     add rbx, 20+8
   717 00000935 4D8D88[BC040000]    <1>     lea r9, qword [r8 + overlayDword]
   718 0000093C 648B0425[14C00300]  <1>     mov eax, dword fs:[loProtMem]
   719 00000944 41FFD1              <1>     call r9
   720                              <1> 
   721 00000947 4881C312000000      <1>     add rbx, 10+8
   722 0000094E 648B0425[18C00300]  <1>     mov eax, dword fs:[hiProtMem]
   723 00000956 41FFD1              <1>     call r9
   724                              <1> 
   725 00000959 4881C312000000      <1>     add rbx, 10+8
   726 00000960 64488B0425-         <1>     mov rax, qword fs:[longMem]
   726 00000965 [1CC00300]          <1>
   727 00000969 4D8D88[FF040000]    <1>     lea r9, qword [r8 + overlayQword]
   728 00000970 41FFD1              <1>     call r9
   729                              <1> 
   730 00000973 4881C31B000000      <1>     add rbx, 19+8
   731 0000097A 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   731 0000097F [80C00300]          <1>
   732 00000983 41FFD1              <1>     call r9
   733                              <1> 
   734 00000986 4881C31B000000      <1>     add rbx, 19+8
   735 0000098D 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   735 00000992 [88C00300]          <1>
   736 00000996 41FFD1              <1>     call r9
   737                              <1> 
   738 00000999 4881C31B000000      <1>     add rbx, 19+8
   739 000009A0 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   739 000009A5 [A2C00300]          <1>
   740 000009A9 41FFD1              <1>     call r9
   741                              <1> 
   742 000009AC 4881C31B000000      <1>     add rbx, 19+8
   743 000009B3 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   743 000009B8 [AAC00300]          <1>
   744 000009BC 41FFD1              <1>     call r9
   745                              <1> 
   746 000009BF 4D8D88[4A040000]    <1>     lea r9, qword [r8 + overlayByte]
   747                              <1> 
   748 000009C6 4881C32C000000      <1>     add rbx, 25+19
   749 000009CD 64480FB60425-       <1>     movzx rax, byte fs:[numLogDrv]
   749 000009D3 [13C00300]          <1>
   750 000009D7 41FFD1              <1>     call r9
   751                              <1> 
   752 000009DA 4881C31E000000      <1>     add rbx, 30
   753 000009E1 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   753 000009E7 [12C00300]          <1>
   754 000009EB 41FFD1              <1>     call r9
   755                              <1> 
   756 000009EE 4881C31E000000      <1>     add rbx, 30
   757 000009F5 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   757 000009FB [11C00300]          <1>
   758 000009FF 41FFD1              <1>     call r9
   759                              <1> 
   760 00000A02 4881C310000000      <1>     add rbx, 16
   761 00000A09 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   761 00000A0F [10C00300]          <1>
   762 00000A13 0441                <1>     add al, "A"
   763 00000A15 8803                <1>     mov byte [rbx], al
   764                              <1> 
   765 00000A17 488D2D10000000      <1>     lea rbp, .msg
   766 00000A1E 4D8D88[C4010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   767 00000A25 41FFD1              <1>     call r9
   768 00000A28 5D                  <1>     pop rbp
   769 00000A29 E99E010000          <1>     jmp l1
   770 00000A2E 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   770 00000A37 206261736520464646- <1>
   770 00000A40 464646464646464646- <1>
   770 00000A49 46464646680A0D      <1>
   771 00000A50 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   771 00000A59 464646464646464646- <1>
   771 00000A62 464646464646680A0D  <1>
   772 00000A6B 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   772 00000A74 464646464646464646- <1>
   772 00000A7D 46464646464668200A- <1>
   772 00000A86 0D                  <1>
   773 00000A87 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   773 00000A90 464646464646466820  <1>
   774 00000A99 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   774 00000AA2 464646464646466820  <1>
   775 00000AAB 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   775 00000AB4 464646464646464646- <1>
   775 00000ABD 464646464646680A0D  <1>
   776 00000AC6 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   776 00000ACF 464646464646464646- <1>
   776 00000AD8 464646464646680A0D  <1>
   777 00000AE1 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   777 00000AEA 464646464646464646- <1>
   777 00000AF3 464646464646680A0D  <1>
   778 00000AFC 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   778 00000B05 464646464646464646- <1>
   778 00000B0E 464646464646680A0D  <1>
   779 00000B17 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   779 00000B20 464646464646464646- <1>
   779 00000B29 464646464646680A0D  <1>
   780 00000B32 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   780 00000B3B 204C6F676963616C20- <1>
   780 00000B44 447269766573204646- <1>
   780 00000B4D 680A0D              <1>
   781 00000B50 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   781 00000B59 204669786564204472- <1>
   781 00000B62 697665732020204646- <1>
   781 00000B6B 680A0D              <1>
   782 00000B6E 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   782 00000B77 2052656D6F7661626C- <1>
   782 00000B80 652044727673204646- <1>
   782 00000B89 680A0D              <1>
   783 00000B8C 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   783 00000B95 65205A3A0A0D        <1>
   784 00000B9B 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   784 00000BA4 4F4D4D414E442E434F- <1>
   784 00000BAD 4D2E2E2E0A0D00      <1>
   785 00000BB4 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   785 00000BBD 626F6F742073756D6D- <1>
   785 00000BC6 6172790A0D00        <1>
   786                              <1>     %endif
   787                              <1> l1:
   788 00000BCC B401                <1>     mov ah, 01h  ;Write with echo
   789 00000BCE CD41                <1>     int 41h
   790 00000BD0 3C00                <1>     cmp al, 0
   791 00000BD2 7402                <1>     je l2
   792 00000BD4 EBF6                <1>     jmp short l1
   793                              <1> l2:
   794 00000BD6 B407                <1>     mov ah, 07h
   795 00000BD8 CD41                <1>     int 41h
   796 00000BDA 3C42                <1>     cmp al, 42h
   797 00000BDC 75EE                <1>     jne l1
   798                              <1> l3:
   799 00000BDE 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   799 00000BE3 [88C20300]0000      <1>
   800 00000BE9 488D9D[24C00300]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   801 00000BF0 488D85[88C20300]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   802 00000BF7 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   803 00000BFA C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   804 00000BFE 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   805 00000C04 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   806 00000C08 C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   807 00000C0F FF95[671F0000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   808 00000C15 FF95[6F1F0000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr] 
   809                              <1> 
   810 00000C1B B403                <1>     mov ah, 03h
   811 00000C1D 30FF                <1>     xor bh, bh
   812 00000C1F CD30                <1>     int 30h
   813 00000C21 30D2                <1>     xor dl, dl  ;0 column
   814 00000C23 B402                <1>     mov ah, 02h
   815 00000C25 CD30                <1>     int 30h
   816                              <1> 
   817 00000C27 488D9D[88C20300]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   818 00000C2E 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   819 00000C32 E832000000          <1>     call .clkHexToBCD
   820 00000C37 B40E                <1>     mov ah, 0Eh
   821 00000C39 B03A                <1>     mov al, ":"
   822 00000C3B CD30                <1>     int 30h
   823 00000C3D 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   824 00000C41 E823000000          <1>     call .clkHexToBCD
   825 00000C46 B40E                <1>     mov ah, 0Eh
   826 00000C48 B03A                <1>     mov al, ":"
   827 00000C4A CD30                <1>     int 30h
   828 00000C4C 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   829 00000C50 E814000000          <1>     call .clkHexToBCD
   830 00000C55 B40E                <1>     mov ah, 0Eh
   831 00000C57 B02E                <1>     mov al, "."
   832 00000C59 CD30                <1>     int 30h
   833 00000C5B 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   834 00000C5F E805000000          <1>     call .clkHexToBCD
   835 00000C64 E963FFFFFF          <1>     jmp l1
   836                              <1> .clkHexToBCD:
   837                              <1> ;Converts a Hex byte into two BCD digits
   838                              <1> ;Takes input in each nybble of al
   839 00000C69 53                  <1>     push rbx
   840 00000C6A 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   840 00000C73 00                  <1>
   841 00000C74 31D2                <1>     xor edx, edx
   842 00000C76 48F7F3              <1>     div rbx
   843 00000C79 80C230              <1>     add dl, '0'
   844 00000C7C 80FA39              <1>     cmp dl, '9'
   845 00000C7F 7603                <1>     jbe .chtb0
   846 00000C81 80C207              <1>     add dl, 'A'-'0'-10
   847                              <1> .chtb0:
   848 00000C84 88D1                <1>     mov cl, dl    ;Save remainder byte
   849 00000C86 31D2                <1>     xor edx, edx
   850 00000C88 48F7F3              <1>     div rbx
   851 00000C8B 80C230              <1>     add dl, '0'
   852 00000C8E 80FA39              <1>     cmp dl, '9'
   853 00000C91 7603                <1>     jbe .chtb1
   854 00000C93 80C207              <1>     add dl, 'A'-'0'-10
   855                              <1> .chtb1:
   856 00000C96 88D5                <1>     mov ch, dl    ;Save remainder byte
   857                              <1> 
   858 00000C98 88E8                <1>     mov al, ch    ;Get most sig digit into al
   859 00000C9A B40E                <1>     mov ah, 0Eh
   860 00000C9C CD30                <1>     int 30h
   861 00000C9E 88C8                <1>     mov al, cl    ;Get least sig digit into al
   862 00000CA0 B40E                <1>     mov ah, 0Eh
   863 00000CA2 CD30                <1>     int 30h
   864 00000CA4 5B                  <1>     pop rbx
   865 00000CA5 C3                  <1>     ret
   866                              <1> ;--------------------------------
   867                              <1> ;       PROCS FOR SYSINIT       :
   868                              <1> ;--------------------------------
   869                              <1> adjustDrvHdr:
   870                              <1> ;Input: rsi = Effective address of driver in DOS segment
   871                              <1> ;       rbp = Ptr to the start of the DOS segment
   872                              <1> ;Output: rsi = EA of next header in DOS segment
   873 00000CA6 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   874 00000CA9 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   875 00000CAD 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   876 00000CB1 4881C622000000      <1>     add rsi, drvHdr_size
   877 00000CB8 C3                  <1>     ret
   878                              <1> errorInit:
   879                              <1> ;If a critical error occurs during sysinit, fail through here
   880                              <1> ;Int 42h, 43h and 44h point here during sysinit
   881 00000CB9 488D2D20000000      <1>     lea rbp, hltmsg
   882 00000CC0 B804130000          <1>     mov eax, 1304h
   883 00000CC5 CD30                <1>     int 30h
   884                              <1>     ;cli ;Clear interrupts
   885                              <1>     ;mov al, -1
   886                              <1>     ;mov dx, 0A1h    ;PIC2 data
   887                              <1>     ;out dx, al      ;Mask all lines
   888                              <1>     ;mov dx, 21h     ;PIC1 data
   889                              <1>     ;out dx, al      ;Mask all lines
   890                              <1> .ei0:
   891 00000CC7 F4                  <1>     hlt
   892 00000CC8 EBFD                <1>     jmp short .ei0
   893                              <1> ;--------------------------------
   894                              <1> ;       DATA FOR SYSINIT        :
   895                              <1> ;--------------------------------
   896 00000CCA 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   896 00000CD3 5343502F444F532E2E- <1>
   896 00000CDC 2E0A0D24            <1>
   897 00000CE0 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   897 00000CE9 7469616C6973696E67- <1>
   897 00000CF2 20534350444F532E53- <1>
   897 00000CFB 59532E205379737465- <1>
   897 00000D04 6D2068616C74696E67- <1>
   897 00000D0D 2E2E2E00            <1>
   898 00000D11 434F4E00            <1> conName db "CON",0
   899 00000D15 41555800            <1> auxName db "AUX",0
   900 00000D19 50524E00            <1> prnName db "PRN",0
   901                              <1> intData:
   902 00000D1D [AC12000000000000]  <1>     dq terminateProcess ;Int 40h
   903 00000D25 [9B16000000000000]  <1>     dq functionDispatch ;Int 41h
   904 00000D2D [B90C000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   905 00000D35 [D717000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
   906 00000D3D [B90C000000000000]  <1>     dq errorInit        ;Int 44h, If critical error in sysinit, halt system
   907 00000D45 [F313000000000000]  <1>     dq absDiskRead      ;Int 45h
   908 00000D4D [D513000000000000]  <1>     dq absDiskWrite     ;Int 46h
   909 00000D55 [AE12000000000000]  <1>     dq terminateRes     ;Int 47h
   910 00000D5D [D717000000000000]  <1>     dq defaultIretq     ;Int 48h
   911 00000D65 [D717000000000000]  <1>     dq defaultIretq     ;Int 49h
   912 00000D6D [D717000000000000]  <1>     dq defaultIretq     ;Int 4Ah
   913 00000D75 [D717000000000000]  <1>     dq defaultIretq     ;Int 4Bh
   914 00000D7D [D717000000000000]  <1>     dq defaultIretq     ;Int 4Ch
   915 00000D85 [D717000000000000]  <1>     dq defaultIretq     ;Int 4Dh
   916 00000D8D [D717000000000000]  <1>     dq defaultIretq     ;Int 4Eh
   917 00000D95 [401C000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
   918                              <1> nData:
   919 00000D9D [F71E000000000000]  <1>     dq conHdr
   920 00000DA5 0480                <1>     dw 08004h
   921 00000DA7 [9F20000000000000]  <1>     dq nulStrat
   922 00000DAF [A520000000000000]  <1>     dq nulIntr
   923 00000DB7 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   924                              <1> 
   925                              <1> diskInit:
   926                              <1>     ;We create a function to deal with BPB parsing etc
   927                              <1>     ;Start with the first primary partition on each hard disk (until max)
   928                              <1>     ;   They dont have to be bootable
   929                              <1>     ;Then go back and look for other partitions partitions. 
   930                              <1>     ;   Add each other primary or logical ptn (until max)
   931                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   932                              <1>     ;Use r8 as device counter
   933 00000DBF 488DBD[C6280000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
   934 00000DC6 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
   934 00000DCE 00                  <1>
   935 00000DCF 0F84C6000000        <1>     jz .remInit ;No? Go to removables
   936 00000DD5 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   936 00000DDE 00                  <1>
   937 00000DDF B280                <1>     mov dl, 80h ;Start with HDD 0
   938                              <1> .primary:
   939 00000DE1 64803C25[13C00300]- <1>     cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
   939 00000DE9 03                  <1>
   940 00000DEA 0F84AB000000        <1>     je .remInit
   941 00000DF0 31C9                <1>     xor ecx, ecx    ;Sector 0
   942 00000DF2 E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   943 00000DF7 0F8289000000        <1>     jc .primaryEpilog
   944                              <1>     ;Here, check MBR or BPB
   945 00000DFD 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   946 00000E06 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   947                              <1>     ;Now check if BPB or MBR
   948 00000E08 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   949 00000E0A 8A6302              <1>     mov ah, byte [rbx + 2]
   950 00000E0D 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   951 00000E11 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   952                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   953                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   954 00000E13 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   955 00000E1A B104                <1>     mov cl, 4
   956                              <1> .checkPrimary:
   957 00000E1C 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   958 00000E1F 3C01                <1>     cmp al, 01
   959 00000E21 7421                <1>     je .primaryFound
   960 00000E23 3C04                <1>     cmp al, 04
   961 00000E25 741D                <1>     je .primaryFound
   962 00000E27 3C06                <1>     cmp al, 06
   963 00000E29 7419                <1>     je .primaryFound
   964 00000E2B 3C0B                <1>     cmp al, 0Bh
   965 00000E2D 7415                <1>     je .primaryFound
   966 00000E2F 3C0C                <1>     cmp al, 0Ch
   967 00000E31 7411                <1>     je .primaryFound
   968 00000E33 3C0E                <1>     cmp al, 0Eh
   969 00000E35 740D                <1>     je .primaryFound
   970 00000E37 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   971 00000E3E FEC9                <1>     dec cl
   972 00000E40 7444                <1>     jz .primaryEpilog
   973 00000E42 EBD8                <1>     jmp short .checkPrimary
   974                              <1> .primaryFound:
   975                              <1>     ;Copy the first sector of this partition into memory
   976 00000E44 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   977 00000E47 E8E9000000          <1>     call .initReadSector
   978 00000E4C 7238                <1>     jc .primaryEpilog
   979                              <1>     ;Now verify this is a BPB
   980 00000E4E 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   981 00000E50 8A6302              <1>     mov ah, byte [rbx + 2]
   982 00000E53 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   983 00000E57 752D                <1>     jne .primaryEpilog   ;If not, skip
   984                              <1>     ;Now copy data to internal tables
   985 00000E59 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   986 00000E5C B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   987 00000E61 57                  <1>     push rdi
   988 00000E62 F348A5              <1>     rep movsq   ;Copy the BPB
   989 00000E65 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
   990                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   991 00000E66 4A8D9C05[94280000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
   992                              <1>     ;Add device count to rbx to point to correct entry
   993 00000E6E 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   994 00000E70 4A8D9CC5[9E280000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
   995 00000E78 488933              <1>     mov qword [rbx], rsi
   996 00000E7B 49FFC0              <1>     inc r8  ;Goto next logical drive
   997 00000E7E 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have
   998                              <1> .primaryEpilog:
   999 00000E86 FEC2                <1>     inc dl  ;Goto next BIOS drive
  1000 00000E88 88D6                <1>     mov dh, dl
  1001 00000E8A 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1002 00000E8D 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1003 00000E95 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1004                              <1> .extended:
  1005                              <1> ;We have gone through all the devices once
  1006                              <1>     ;cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
  1007                              <1>     ;je .remInit ;If yes, get removable devices
  1008                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1009                              <1>     ;xor ecx, ecx    ;Get MBR back
  1010                              <1>     ;call .initReadSector
  1011                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1012                              <1> .remInit:
  1013                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1014 00000E9B 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1015 00000E9E 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1016 00000EA0 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1017                              <1>     ;rdi points to the space for the subsequent bpb's
  1018                              <1> .removables:
  1019 00000EA3 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1020 00000EA5 E88B000000          <1>     call .initReadSector
  1021 00000EAA 7238                <1>     jc .removableEpilogue   ;Goto next device
  1022                              <1>     ;Now verify this is a BPB
  1023 00000EAC 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1024 00000EAE 8A6302              <1>     mov ah, byte [rbx + 2]
  1025 00000EB1 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1026 00000EB5 752D                <1>     jne .removableEpilogue   ;If not, skip
  1027                              <1>     ;Now copy data to internal tables
  1028 00000EB7 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1029 00000EBA B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1030 00000EBF 57                  <1>     push rdi
  1031 00000EC0 F348A5              <1>     rep movsq   ;Copy the BPB
  1032 00000EC3 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1033                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1034 00000EC4 4A8D9C05[94280000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1035                              <1>     ;Add device count to rbx to point to correct entry
  1036 00000ECC 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1037 00000ECE 4A8D9CC5[9E280000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1038 00000ED6 488933              <1>     mov qword [rbx], rsi
  1039 00000ED9 49FFC0              <1>     inc r8  ;Goto next logical drive
  1040 00000EDC 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have    
  1041                              <1> .removableEpilogue:
  1042 00000EE4 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1043 00000EE6 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1044 00000EEE 7412                <1>     je .end
  1045 00000EF0 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1046 00000EF7 7403                <1>     je .re0
  1047 00000EF9 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1048                              <1> .re0:
  1049 00000EFC 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1050 00000F00 72A1                <1>     jb .removables
  1051                              <1> .end:
  1052 00000F02 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1052 00000F0A 01                  <1>
  1053 00000F0B 7401                <1>     je .singleRemDev
  1054 00000F0D C3                  <1>     ret
  1055                              <1> .singleRemDev:
  1056                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1057 00000F0E 488D9D[94280000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1058 00000F15 8A95[94280000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1059 00000F1B 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1060 00000F1E 488D9D[9E280000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1061 00000F25 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1062 00000F28 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1063 00000F2C 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Gotta register the phantom drive!
  1064 00000F34 C3                  <1>     ret
  1065                              <1> .initReadSector:
  1066                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1067 00000F35 B482                <1>     mov ah, 82h ;Read
  1068 00000F37 B001                <1>     mov al, 1   ;One sector
  1069 00000F39 488D9D[E8020000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1070 00000F40 CD33                <1>     int 33h
  1071 00000F42 C3                  <1>     ret
    12                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    13                                  %include "./Source/BSS/dosSeg.asm"
    14                              <1> ;This file contains the main DOS data segment
    15                              <1> dosAPT: ;Additional Page tables
    16 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    17                              <1> dosDataArea:
    18 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    19 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    20 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    21 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    22 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    23 0003C013 ??                  <1>     numLogDrv   resb 1    ;Number of logical drives in system x
    24 0003C014 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    25 0003C018 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    26 0003C01C ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    27 0003C024 <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    28 0003C04E <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    29                              <1>     ;The device driver header with space for the largest possible packet
    30 0003C078 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    31                              <1> sysVarsPtr:
    32 0003C080 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    33 0003C088 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    34 0003C090 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    35                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    36 0003C098 ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    37                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    38 0003C0A0 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    39 0003C0A2 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    40 0003C0AA ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    41 0003C0B2 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    42 0003C0B3 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    43 0003C0B4 ????                <1>     numFiles    resw 1    ;FILES=5 default
    44 0003C0B6 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    45 0003C0B8 ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    46 0003C0C0 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    47 0003C0C2 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    48 0003C0C3 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    49                              <1> 
    50 0003C0E5 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    51 0003C105 ??                  <1>                 resb 1  ;Alignment byte
    52                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    53 0003C106 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
    54 0003C10E ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    55 0003C10F ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    56 0003C110 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    57 0003C111 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    58 0003C112 ????                <1>     errorExCde  resw 1  ;Extended Error Code
    59 0003C114 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    60 0003C115 ??                  <1>     errorClass  resb 1  ;Error Class
    61                              <1> 
    62 0003C116 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
    63                              <1> 
    64 0003C11E ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    65 0003C126 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
    66 0003C12E ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this di)
    67 0003C136 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    68 0003C13E ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
    69 0003C140 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    70 0003C141 ??                  <1>     currentDrv  resb 1  ;Default drive x
    71                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    72 0003C142 ??                  <1>     singleDrv   resb 1  ;Set if last drive accessed was drive B x
    73                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    74 0003C143 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
    75 0003C144 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    76                              <1> ;SDA, needs to be replaced between processes
    77 0003C145 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
    78 0003C14D ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
    79 0003C155 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
    80 0003C15D ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    81 0003C165 ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    82 0003C166 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    83 0003C167 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    84 0003C168 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    85 0003C170 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    86 0003C178 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    87 0003C180 ??                  <1>     dosInvoke   resb 1  ;FIXED 0, any other value fails calls (-1 = server invoke)
    88 0003C181 ??                  <1>     critExit    resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
    89                              <1> ;The above flag tells DOS to print ^C in the termination function
    90                              <1> 
    91                              <1> ;Time stuff
    92 0003C182 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    93 0003C183 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    94 0003C184 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    95 0003C185 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    96 0003C187 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    97                              <1> 
    98                              <1> ;Buffers
    99 0003C188 <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   100 0003C208 <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   101 0003C288 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   102 0003C28E ??                  <1>     singleIObyt resb 1  ;For single IO byte buffers
   103                              <1> ;Misc bookkeeping flags and vars
   104                              <1>     ;secClusConv resb 1  ;For networking, do we convert sector to cluster?
   105 0003C28F ??                  <1>     rwFlag      resb 1  ;00h=Read, 01h=Write
   106 0003C290 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   107 0003C291 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   108 0003C292 ??                  <1>     typePSPcopy resb 1  ;00=Simple copy, -1=Make Child process
   109 0003C293 ??                  <1>     spliceFlag  resb 1  ;01 = file name and directory name together
   110                              <1> 
   111 0003C294 ??                  <1>     workingDrv  resb 1  ;Working drive number
   112 0003C295 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   113 0003C29D ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   114 0003C2A5 <res 5Bh>           <1>     curDrvCDS   resb cds_size   ;Working cp of CDS of drv being accessed
   115 0003C300 ????????????????    <1>     currentJFT  resq 1  ;Ptr to JFT num in caller PSP of file being accessed
   116 0003C308 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   117 0003C310 ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   118 0003C312 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   119                              <1> ;Needs to be set up before any file access  |
   120 0003C31A ????????            <1>     currClust   resd 1  ;Relative cluster in file being r/w to/from
   121 0003C31E ????????            <1>     currClustA  resd 1  ;Current Cluster (abs) on disk being r/w to/from
   122 0003C322 ??                  <1>     clustFact   resb 1  ;NUMBER of sectors per cluster
   123 0003C323 ??                  <1>     currSect    resb 1  ;Current Sector in Cluster being r/w to/from
   124 0003C324 ????????????????    <1>     currSectA   resq 1  ;Current absolute Sector number on Disk
   125 0003C32C ????                <1>     currByte    resw 1  ;Current Byte in sector being r/w to/from
   126 0003C32E ????????            <1>     currByteA   resd 1  ;Current Byte in file being r/w to/from
   127                              <1> ;*****************************************  |
   128 0003C332 ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   129 0003C336 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   130 0003C33A ????????            <1>     bytesAdded  resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   131                              <1> ;Directory stuff
   132 0003C33E ????????            <1>     dirClust    resd 1  ;Cluster number of current directory
   133 0003C342 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   134 0003C346 ??                  <1>     dirSect     resb 1  ;Sector of current directory
   135 0003C347 ??                  <1>     dirEntry    resb 1  ;32 byte offset in dir sect for file being searched for
   136                              <1> 
   137                              <1>     
   138                              <1> ;Stacks and scratch SFT
   139 0003C348 <res 528h>          <1>     critStack   resq 165
   140 0003C870 ????????????????    <1>     critStakTop resq 1
   141                              <1> 
   142 0003C878 <res 43h>           <1>     scratchSFT  resb sft_size
   143                              <1> 
   144 0003C8BB <res 638h>          <1>     IOStack     resq 199
   145 0003CEF3 ????????????????    <1>     IOStakTop   resq 1
   146 0003CEFB <res 638h>          <1>     DiskStack   resq 199
   147 0003D533 ????????????????    <1>     DiskStakTop resq 1
   148 0003D53B ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   149                              <1>     dSegLen     equ     $
    14                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    15                                  %include "./Source/Data/staticData.asm"
    16                              <1> 
    17                              <1> ;-----------------------------------:
    18                              <1> ;           Static Data             :
    19                              <1> ;-----------------------------------:
    20 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    21 00000001 01                  <1> dosMinor    db 01h      ;.01
    22 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    22 0000000B 535953              <1>
    23 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    23 00000017 535953              <1>
    24 0000001A 2F                  <1> switchchar  db "/" ;Editable by the Int 41h/ah=37h
    16                                  %include "./Source/Data/dispTbl.asm"
    17                              <1> ;Kernel Dispatch Function Table
    18                              <1> 
    19                              <1> kDispTbl:
    20 0000001B 9512                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    21 0000001D 5C09                <1>     dw stdinReadEcho - kDispTbl       ;AH = 01H, CHAR IO
    22 0000001F C909                <1>     dw stdoutWrite - kDispTbl         ;AH = 02H, CHAR IO
    23 00000021 020A                <1>     dw stdauxRead - kDispTbl          ;AH = 03H, CHAR IO
    24 00000023 020A                <1>     dw stdauxWrite - kDispTbl         ;AH = 04H, CHAR IO
    25 00000025 020A                <1>     dw stdprnWrite - kDispTbl         ;AH = 05H, CHAR IO
    26 00000027 020A                <1>     dw directCONIO - kDispTbl         ;AH = 06H, CHAR IO
    27 00000029 020A                <1>     dw waitDirectInNoEcho - kDispTbl  ;AH = 07H, CHAR IO
    28 0000002B 3B0A                <1>     dw waitStdinNoEcho - kDispTbl     ;AH = 08H, CHAR IO
    29 0000002D 3C0A                <1>     dw printString - kDispTbl         ;AH = 09H, CHAR IO
    30 0000002F 7E0A                <1>     dw buffStdinInput - kDispTbl      ;AH = 0AH, CHAR IO
    31 00000031 7E0A                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    32 00000033 7E0A                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    33 00000035 5F18                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    34 00000037 F518                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    35 00000039 F70A                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    36 0000003B F70A                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    37 0000003D F70A                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    38 0000003F F70A                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    39 00000041 F70A                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    40 00000043 F70A                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    41 00000045 F70A                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    42 00000047 F70A                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    43 00000049 F70A                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    44 0000004B 241C                <1>     dw return - kDispTbl              ;AH = 18H, RESERVED
    45 0000004D 4419                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    46 0000004F F80A                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    47 00000051 4B19                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    48 00000053 4D19                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    49 00000055 241C                <1>     dw return - kDispTbl              ;AH = 1DH, RESERVED
    50 00000057 241C                <1>     dw return - kDispTbl              ;AH = 1EH, RESERVED
    51 00000059 101A                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    52 0000005B 241C                <1>     dw return - kDispTbl              ;AH = 20H, RESERVED
    53 0000005D 0B0B                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    54 0000005F 0B0B                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    55 00000061 0B0B                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    56 00000063 0B0B                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    57 00000065 BF19                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    58 00000067 EC19                <1>     dw createNewPSP - kDispTbl        ;AH = 26H, PROCESS MANAGEMENT
    59 00000069 0B0B                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    60 0000006B 0B0B                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    61 0000006D 0B0B                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    62 0000006F F60A                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    63 00000071 F60A                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    64 00000073 F60A                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    65 00000075 F60A                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    66 00000077 ED19                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    67 00000079 0C0B                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    68 0000007B FB19                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    69 0000007D 9612                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    70 0000007F 121A                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    71 00000081 1418                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    72 00000083 591A                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    73 00000085 6A1A                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    74 00000087 7F1A                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    75 00000089 9912                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    76 0000008B 9912                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    77 0000008D 5F07                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    78 0000008F 5F07                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    79 00000091 5F07                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    80 00000093 1F0B                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    81 00000095 200B                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    82 00000097 210B                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    83 00000099 220B                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    84 0000009B 2B0B                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    85 0000009D 420B                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    86 0000009F 420B                <1>     dw movFileReadPtr - kDispTbl      ;AH = 42H, RECORD OPERATION     HANDLE
    87 000000A1 420B                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    88 000000A3 420B                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    89 000000A5 420B                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    90 000000A7 420B                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    91 000000A9 5F07                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    92 000000AB 8A0C                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    93 000000AD A70E                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    94 000000AF D00F                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    95 000000B1 9712                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    96 000000B3 9812                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    97 000000B5 F01A                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    98 000000B7 420B                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    99 000000B9 420B                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   100 000000BB 4218                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   101 000000BD 4B18                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   102 000000BF 021B                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   103 000000C1 131B                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   104 000000C3 F21B                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   105 000000C5 F91B                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   106 000000C7 420B                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   107 000000C9 5F07                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   108 000000CB 8111                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   109 000000CD FA1B                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   110 000000CF 420B                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   111 000000D1 420B                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   112 000000D3 420B                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   113 000000D5 231C                <1>     dw getCritErrorInfo - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   114 000000D7 231C                <1>     dw networkServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   115 000000D9 231C                <1>     dw networkRedirection - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   116 000000DB 5F07                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   117 000000DD 241C                <1>     dw return - kDispTbl              ;AH = 61H, RESERVED
   118 000000DF 5418                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   119 000000E1 241C                <1>     dw return - kDispTbl              ;AH = 63H, RESERVED
   120 000000E3 5D18                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   121 000000E5 9912                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   122 000000E7 9912                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   123 000000E9 420B                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   124 000000EB 420B                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   125 000000ED 241C                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   126                              <1> kDispTblL  equ $ - kDispTbl 
   127                              <1> 
   128                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   129 000000EF 721B                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   130                              <1> mDispTblL   equ     $ - mDispTbl
    17                                  %include "./Source/Debug/debug.asm"
    18                              <1> ;This file contains debugging macros, procs and strings
    19                              <1> ; that we can use to output to COM1 bypassing the operating system.
    20                              <1> ;A serial terminal must be connected for this to work.
    21                              <1> 
    22                              <1> ;Variables and equates
    23                              <1> 
    24 000000F1 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    25                              <1> 
    26 000000F9 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    26 00000102 39414243444546      <1>
    27                              <1> ;Common procedures
    28                              <1> debMakeDebuggerRespond:
    29 00000109 488D2D26000000      <1>     lea rbp, .msg
    30 00000110 E8AF000000          <1>     call debPrintNullString
    31 00000115 B900001000          <1>     mov ecx, 100000h
    32                              <1> .waiting:
    33 0000011A FFC9                <1>     dec ecx
    34 0000011C 740C                <1>     jz .timeout
    35 0000011E B402                <1>     mov ah, 02h ;Blocking recieve!
    36 00000120 31D2                <1>     xor edx, edx
    37 00000122 CD34                <1>     int 34h
    38 00000124 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    39 00000127 75F1                <1>     jnz .waiting
    40 00000129 C3                  <1>     ret
    41                              <1> .timeout:
    42 0000012A 488D2D47000000      <1>     lea rbp, .msg2
    43 00000131 E98E000000          <1>     jmp debPrintNullString
    44 00000136 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    44 0000013F 6B6579206174207468- <1>
    44 00000148 65207465726D696E61- <1>
    44 00000151 6C20746F20636F6E74- <1>
    44 0000015A 696E7565206F722077- <1>
    44 00000163 61697420666F722074- <1>
    44 0000016C 696D656F75742E2E2E- <1>
    44 00000175 0A0D00              <1>
    45 00000178 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    45 00000181 436F6E74696E75696E- <1>
    45 0000018A 672E2E2E0A0D00      <1>
    46                              <1> debPrintHexByte:
    47                              <1> ;Print the hex byte in al as a hex value
    48 00000191 52                  <1>     push rdx
    49 00000192 53                  <1>     push rbx
    50 00000193 50                  <1>     push rax
    51                              <1> 
    52 00000194 88C2                <1>     mov dl, al           ;save byte in dl
    53 00000196 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    54 0000019A 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    55 0000019F 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    56 000001A3 E80C000000          <1>     call .wrchar
    57 000001A8 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    58 000001AB E804000000          <1>     call .wrchar
    59                              <1> 
    60 000001B0 58                  <1>     pop rax
    61 000001B1 5B                  <1>     pop rbx
    62 000001B2 5A                  <1>     pop rdx
    63 000001B3 C3                  <1>     ret
    64                              <1> .wrchar:
    65 000001B4 6687DB              <1>     xchg bx, bx
    66 000001B7 488D1D3BFFFFFF      <1>     lea rbx, debascii
    67 000001BE D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    68 000001BF B401                <1>     mov ah, 01h
    69 000001C1 CD34                <1>     int 34h  ;print char
    70 000001C3 C3                  <1>     ret
    71                              <1> 
    72                              <1> debPrintNullString:
    73                              <1> ;Print a null terminated string pointed to by rbp
    74 000001C4 56                  <1>     push rsi
    75 000001C5 50                  <1>     push rax
    76 000001C6 52                  <1>     push rdx
    77 000001C7 31D2                <1>     xor edx, edx    ;Select COM1
    78 000001C9 4889EE              <1>     mov rsi, rbp
    79                              <1> .getChar:
    80 000001CC AC                  <1>     lodsb
    81 000001CD 84C0                <1>     test al, al
    82 000001CF 7406                <1>     jz .exit
    83 000001D1 B401                <1>     mov ah, 01h
    84 000001D3 CD34                <1>     int 34h
    85 000001D5 EBF5                <1>     jmp short .getChar
    86                              <1> .exit:
    87 000001D7 5A                  <1>     pop rdx
    88 000001D8 58                  <1>     pop rax
    89 000001D9 5E                  <1>     pop rsi
    90 000001DA C3                  <1>     ret
    91                              <1> 
    92                              <1> debPrintDOSStack:
    93                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    94                              <1> ;Shows me which function, and parameters passed and returned
    95 000001DB 488D2DA5010000      <1>     lea rbp, .a1
    96 000001E2 E8DDFFFFFF          <1>     call debPrintNullString
    97 000001E7 488B15(70C10300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
    98 000001EE 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
    99 000001F5 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   100 000001F8 E802030000          <1>     call overlayQword
   101 000001FD 4881C316000000      <1>     add rbx, 22
   102 00000204 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   103 00000208 E8F2020000          <1>     call overlayQword
   104 0000020D 4881C316000000      <1>     add rbx, 22
   105 00000214 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   106 00000218 E8E2020000          <1>     call overlayQword
   107 0000021D 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   108 00000224 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   109 00000228 E8D2020000          <1>     call overlayQword
   110 0000022D 4881C316000000      <1>     add rbx, 22 
   111 00000234 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   112 00000238 E8C2020000          <1>     call overlayQword
   113 0000023D 4881C316000000      <1>     add rbx, 22
   114 00000244 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   115 00000248 E8B2020000          <1>     call overlayQword
   116 0000024D 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   117 00000254 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   118 00000258 E8A2020000          <1>     call overlayQword
   119 0000025D 4881C316000000      <1>     add rbx, 22
   120 00000264 488B05(70C10300)    <1>     mov rax, qword [oldRSP]
   121 0000026B 480560000000        <1>     add rax, callerFrame_size
   122 00000271 E889020000          <1>     call overlayQword
   123 00000276 4881C316000000      <1>     add rbx, 22
   124 0000027D 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   125 00000281 E879020000          <1>     call overlayQword
   126 00000286 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   127 0000028D 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   128 00000291 E869020000          <1>     call overlayQword
   129 00000296 488D2D06000000      <1>     lea rbp, .a0
   130 0000029D E822FFFFFF          <1>     call debPrintNullString
   131 000002A2 C3                  <1>     ret
   132                              <1> 
   133 000002A3 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   133 000002AC 303030303030303030- <1>
   133 000002B5 30306820            <1>
   134 000002B9 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   134 000002C2 303030303030303030- <1>
   134 000002CB 30306820            <1>
   135 000002CF 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   135 000002D8 303030303030303030- <1>
   135 000002E1 30306820            <1>
   136 000002E5 0A0D                <1>     db  0Ah,0Dh
   137 000002E7 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   137 000002F0 303030303030303030- <1>
   137 000002F9 30306820            <1>
   138 000002FD 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   138 00000306 303030303030303030- <1>
   138 0000030F 30306820            <1>
   139 00000313 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   139 0000031C 303030303030303030- <1>
   139 00000325 30306820            <1>
   140 00000329 0A0D                <1>     db 0Ah, 0Dh
   141 0000032B 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   141 00000334 303030303030303030- <1>
   141 0000033D 30306820            <1>
   142 00000341 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   142 0000034A 303030303030303030- <1>
   142 00000353 30306820            <1>
   143 00000357 7269703D3030303030- <1>     db "rip=0000000000000000h"
   143 00000360 303030303030303030- <1>
   143 00000369 303068              <1>
   144 0000036C 0A0D                <1>     db 0Ah, 0Dh
   145 0000036E 666C673D3030303030- <1>     db "flg=0000000000000000h "
   145 00000377 303030303030303030- <1>
   145 00000380 30306820            <1>
   146 00000384 0A0D00              <1>     db 0Ah,0Dh,0
   147 00000387 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   147 00000390 206F6E20496E742034- <1>
   147 00000399 316820737461636B0A- <1>
   147 000003A2 0D00                <1>
   148                              <1> 
   149                              <1> debDPBptr:
   150                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   151 000003A4 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   152 000003AB 4889E8              <1>     mov rax, rbp
   153 000003AE E84C010000          <1>     call overlayQword
   154 000003B3 488D2D06000000      <1>     lea rbp, .dpb
   155 000003BA E805FEFFFF          <1>     call debPrintNullString
   156 000003BF C3                  <1>     ret
   157                              <1> .dpb: 
   158 000003C0 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   158 000003C9 203030303030303030- <1>
   158 000003D2 303030303030303068- <1>
   158 000003DB 200A0D00            <1>
   159                              <1> 
   160                              <1> debDPBBPBptr:
   161                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   162                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   163 000003DF 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   164 000003E6 4889E8              <1>     mov rax, rbp
   165 000003E9 E811010000          <1>     call overlayQword
   166 000003EE 4881C321000000      <1>     add rbx, 33
   167 000003F5 4889F0              <1>     mov rax, rsi
   168 000003F8 E802010000          <1>     call overlayQword
   169 000003FD 488D2D06000000      <1>     lea rbp, .dpb
   170 00000404 E8BBFDFFFF          <1>     call debPrintNullString
   171 00000409 C3                  <1>     ret
   172                              <1> .dpb: 
   173 0000040A 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   173 00000413 203030303030303030- <1>
   173 0000041C 303030303030303068- <1>
   173 00000425 2066726F6D20        <1>
   174 0000042B 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   174 00000434 203030303030303030- <1>
   174 0000043D 303030303030303068- <1>
   174 00000446 200A0D00            <1>
   175                              <1> overlayByte:
   176                              <1>     ;Called with number in rax
   177                              <1>     ;pointer to START of 16 byte space for number in rbx
   178 0000044A 53                  <1>     push rbx
   179 0000044B 51                  <1>     push rcx
   180 0000044C 52                  <1>     push rdx
   181 0000044D 55                  <1>     push rbp
   182 0000044E 4889DD              <1>     mov rbp, rbx
   183 00000451 4889C2              <1>     mov rdx, rax
   184 00000454 48FFC5              <1>     inc rbp ;Go to end of number
   185                              <1> 
   186 00000457 488D1D9BFCFFFF      <1>     lea rbx, debascii
   187 0000045E 88D0                <1>     mov al, dl  ;Go low nybble first
   188 00000460 240F                <1>     and al, 0Fh
   189 00000462 D7                  <1>     xlatb
   190 00000463 884500              <1>     mov byte [rbp], al
   191 00000466 48FFCD              <1>     dec rbp ;Go down one char pos
   192 00000469 88D0                <1>     mov al, dl
   193 0000046B 24F0                <1>     and al, 0F0h    ;Hi nybble next
   194 0000046D C0E804              <1>     shr al, 4   ;Shift hi nybble low
   195 00000470 D7                  <1>     xlatb
   196 00000471 884500              <1>     mov byte [rbp], al  ;Store char
   197                              <1> 
   198 00000474 5D                  <1>     pop rbp
   199 00000475 5A                  <1>     pop rdx
   200 00000476 59                  <1>     pop rcx
   201 00000477 5B                  <1>     pop rbx
   202 00000478 C3                  <1>     ret
   203                              <1> 
   204                              <1> overlayWord:
   205                              <1>     ;Called with number in rax
   206                              <1>     ;pointer to START of 16 byte space for number in rbx
   207 00000479 53                  <1>     push rbx
   208 0000047A 51                  <1>     push rcx
   209 0000047B 52                  <1>     push rdx
   210 0000047C 55                  <1>     push rbp
   211 0000047D 4889DD              <1>     mov rbp, rbx
   212 00000480 4889C2              <1>     mov rdx, rax
   213 00000483 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   214 0000048A B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   215 0000048F 488D1D63FCFFFF      <1>     lea rbx, debascii
   216                              <1> .ow0:
   217 00000496 88D0                <1>     mov al, dl  ;Go low nybble first
   218 00000498 240F                <1>     and al, 0Fh
   219 0000049A D7                  <1>     xlatb
   220 0000049B 884500              <1>     mov byte [rbp], al
   221 0000049E 48FFCD              <1>     dec rbp ;Go down one char pos
   222 000004A1 88D0                <1>     mov al, dl
   223 000004A3 24F0                <1>     and al, 0F0h    ;Hi nybble next
   224 000004A5 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   225 000004A8 D7                  <1>     xlatb
   226 000004A9 884500              <1>     mov byte [rbp], al  ;Store char
   227 000004AC 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   228 000004B0 48FFCD              <1>     dec rbp
   229 000004B3 FFC9                <1>     dec ecx
   230 000004B5 75DF                <1>     jnz .ow0
   231 000004B7 5D                  <1>     pop rbp
   232 000004B8 5A                  <1>     pop rdx
   233 000004B9 59                  <1>     pop rcx
   234 000004BA 5B                  <1>     pop rbx
   235 000004BB C3                  <1>     ret
   236                              <1> 
   237                              <1> overlayDword:
   238                              <1>     ;Called with number in rax
   239                              <1>     ;pointer to START of 16 byte space for number in rbx
   240 000004BC 53                  <1>     push rbx
   241 000004BD 51                  <1>     push rcx
   242 000004BE 52                  <1>     push rdx
   243 000004BF 55                  <1>     push rbp
   244 000004C0 4889DD              <1>     mov rbp, rbx
   245 000004C3 4889C2              <1>     mov rdx, rax
   246 000004C6 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   247 000004CD B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   248 000004D2 488D1D20FCFFFF      <1>     lea rbx, debascii
   249                              <1> .od0:
   250 000004D9 88D0                <1>     mov al, dl  ;Go low nybble first
   251 000004DB 240F                <1>     and al, 0Fh
   252 000004DD D7                  <1>     xlatb
   253 000004DE 884500              <1>     mov byte [rbp], al
   254 000004E1 48FFCD              <1>     dec rbp ;Go down one char pos
   255 000004E4 88D0                <1>     mov al, dl
   256 000004E6 24F0                <1>     and al, 0F0h    ;Hi nybble next
   257 000004E8 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   258 000004EB D7                  <1>     xlatb
   259 000004EC 884500              <1>     mov byte [rbp], al  ;Store char
   260 000004EF 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   261 000004F3 48FFCD              <1>     dec rbp
   262 000004F6 FFC9                <1>     dec ecx
   263 000004F8 75DF                <1>     jnz .od0
   264 000004FA 5D                  <1>     pop rbp
   265 000004FB 5A                  <1>     pop rdx
   266 000004FC 59                  <1>     pop rcx
   267 000004FD 5B                  <1>     pop rbx
   268 000004FE C3                  <1>     ret
   269                              <1> 
   270                              <1> overlayQword:
   271                              <1>     ;Called with number in rax
   272                              <1>     ;pointer to START of 16 byte space for number in rbx
   273 000004FF 53                  <1>     push rbx
   274 00000500 51                  <1>     push rcx
   275 00000501 52                  <1>     push rdx
   276 00000502 55                  <1>     push rbp
   277 00000503 4889DD              <1>     mov rbp, rbx
   278 00000506 4889C2              <1>     mov rdx, rax
   279 00000509 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   280 00000510 B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   281 00000515 488D1DDDFBFFFF      <1>     lea rbx, debascii
   282                              <1> .oq0:
   283 0000051C 88D0                <1>     mov al, dl  ;Go low nybble first
   284 0000051E 240F                <1>     and al, 0Fh
   285 00000520 D7                  <1>     xlatb
   286 00000521 884500              <1>     mov byte [rbp], al
   287 00000524 48FFCD              <1>     dec rbp ;Go down one char pos
   288 00000527 88D0                <1>     mov al, dl
   289 00000529 24F0                <1>     and al, 0F0h    ;Hi nybble next
   290 0000052B C0E804              <1>     shr al, 4   ;Shift hi nybble low
   291 0000052E D7                  <1>     xlatb
   292 0000052F 884500              <1>     mov byte [rbp], al  ;Store char
   293 00000532 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   294 00000536 48FFCD              <1>     dec rbp
   295 00000539 FFC9                <1>     dec ecx
   296 0000053B 75DF                <1>     jnz .oq0
   297 0000053D 5D                  <1>     pop rbp
   298 0000053E 5A                  <1>     pop rdx
   299 0000053F 59                  <1>     pop rcx
   300 00000540 5B                  <1>     pop rbx
   301 00000541 C3                  <1>     ret
   302                              <1> 
   303                              <1> debPrintFunctionName:
   304                              <1> ;Prints the DOS function that has been entered
   305                              <1> ;Entered with ah = Function number
   306 00000542 88E0                <1>     mov al, ah  ;Get dos function number
   307 00000544 488D1DAEFBFFFF      <1>     lea rbx, debascii
   308 0000054B 488D1535000000      <1>     lea rdx, .number
   309 00000552 24F0                <1>     and al, 0F0h    ;Get high nybble first
   310 00000554 C0E804              <1>     shr al, 4
   311 00000557 D7                  <1>     xlatb
   312 00000558 8802                <1>     mov byte [rdx], al
   313 0000055A 88E0                <1>     mov al, ah
   314 0000055C 240F                <1>     and al, 0Fh
   315 0000055E D7                  <1>     xlatb
   316 0000055F 884201              <1>     mov byte [rdx + 1], al
   317 00000562 488D2D06000000      <1>     lea rbp, .dosString
   318 00000569 E856FCFFFF          <1>     call debPrintNullString
   319 0000056E C3                  <1>     ret
   320 0000056F 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   320 00000578 696F6E20496E742034- <1>
   320 00000581 31682F41483D        <1>
   321 00000587 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   322                              <1> 
   323                              <1> ;----------------:
   324                              <1> ;!!!! MACROS !!!!:
   325                              <1> ;----------------:
   326                              <1> ;Insert macro when entering a debug block
   327                              <1> %macro debugEnterM 0
   328                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   329                              <1>     mov rsp, debStackTop
   330                              <1> ;Push all registers except rsp on stack
   331                              <1>     push rax
   332                              <1>     push rbx
   333                              <1>     push rcx
   334                              <1>     push rdx
   335                              <1>     push rsi
   336                              <1>     push rdi
   337                              <1>     push rbp
   338                              <1>     push r8
   339                              <1>     push r9
   340                              <1>     push r10
   341                              <1>     push r11
   342                              <1>     push r12
   343                              <1>     push r13
   344                              <1>     push r14
   345                              <1>     push r15
   346                              <1>     pushfq
   347                              <1> %endmacro
   348                              <1> ;Insert macro when exiting a debug block
   349                              <1> %macro debugExitM 0
   350                              <1>     popfq
   351                              <1>     pop r15
   352                              <1>     pop r14
   353                              <1>     pop r13
   354                              <1>     pop r12
   355                              <1>     pop r11
   356                              <1>     pop r10
   357                              <1>     pop r9
   358                              <1>     pop r8
   359                              <1>     pop rbp
   360                              <1>     pop rdi
   361                              <1>     pop rsi
   362                              <1>     pop rdx
   363                              <1>     pop rcx
   364                              <1>     pop rbx
   365                              <1>     pop rax
   366                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   367                              <1> %endmacro
    18                                  %include "./Source/Kernel/FAT/bufferFunctions.asm"
    19                              <1> ;This file contains FAT disk buffer related functions that
    20                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    21                              <1> ;----------------------------------------------------
    22                              <1> ;           Externally referenced functions         :
    23                              <1> ;----------------------------------------------------
    24                              <1> testDirtyBufferForDrive:    ;External linkage
    25                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
    26                              <1> ;Input: al = Drive number (0 based)
    27                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
    28                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
    29 0000058D 53                  <1>     push rbx
    30 0000058E 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
    31                              <1> .tdbfdCheckBuffer:
    32 00000595 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
    33 00000598 7509                <1>     jne .tdbfdGotoNextBuffer
    34 0000059A F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
    35 0000059E 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
    36 000005A0 F9                  <1>     stc ;Else dirty buffer found, set carry flag
    37                              <1> .tdbfdExit:
    38 000005A1 5B                  <1>     pop rbx
    39 000005A2 C3                  <1>     ret
    40                              <1> .tdbfdGotoNextBuffer:
    41 000005A3 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
    42 000005A6 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
    43 000005AD 74F2                <1>     je .tdbfdExit
    44 000005AF EBE4                <1>     jmp short .tdbfdCheckBuffer
    45                              <1> 
    46                              <1> freeBuffersForDPB:
    47                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
    48                              <1> ; to have a drive number of -1, thus freeing it
    49                              <1> ;Given DPB is in rbp
    50 000005B1 53                  <1>     push rbx
    51 000005B2 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
    52                              <1> .i0:
    53 000005B9 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
    54 000005BD 7506                <1>     jne .i1 ;If no, skip freeing
    55 000005BF 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
    56                              <1> .i1:
    57 000005C5 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
    58 000005C8 4881FBFFFFFFFF      <1>     cmp rbx, -1
    59 000005CF 75E8                <1>     jne .i0
    60                              <1> .exit:
    61 000005D1 5B                  <1>     pop rbx
    62 000005D2 C3                  <1>     ret
    63                              <1> 
    64                              <1> 
    65                              <1> freeBuffersForDrive:
    66                              <1> ;Walks the buffer chain and sets ALL buffers with the given drive number 
    67                              <1> ; to have a drive number of -1, thus freeing it
    68                              <1> ;Given drive number is in al
    69 000005D3 53                  <1>     push rbx
    70 000005D4 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
    71                              <1> .i0:
    72 000005DB 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al  ;Chosen drive?
    73 000005DE 7506                <1>     jne .i1 ;If no, skip freeing
    74 000005E0 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
    75                              <1> .i1:
    76 000005E6 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
    77 000005E9 4881FBFFFFFFFF      <1>     cmp rbx, -1
    78 000005F0 75E9                <1>     jne .i0
    79                              <1> .exit:
    80 000005F2 5B                  <1>     pop rbx
    81 000005F3 C3                  <1>     ret
    82                              <1> 
    83                              <1> 
    84                              <1> getBuffer: ;External Linkage (dosPrim.asm)
    85                              <1> ;
    86                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
    87                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
    88                              <1> ;Flushes if not in disk change mode. 
    89                              <1> ;If in disk change mode, will check to see if the selected buffer 
    90                              <1> ; has data referring a device using the same DPB as we are changing.
    91                              <1> ; If it is, skip flushing, if not, flush first!
    92                              <1> ;
    93                              <1> ;This function will return a pointer to the desired data sector OR 
    94                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
    95                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
    96                              <1> ;Entry: rax = Sector to read
    97                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
    98                              <1> ;       qword [workingDPB] = DPB to use for transaction
    99                              <1> ;Exit:  CF = NC : All ok!
   100                              <1> ;       rbx = Pointer to buffer header with valid data in buffer.
   101                              <1> ;       All other registers as before
   102                              <1> ;       CF = CY: Something went wrong, return error code or INT 44h
   103                              <1> ;       ch = 0 -> Data Not Flushed To Disk
   104                              <1> ;       ch = 1 -> Data Not Read From Disk
   105                              <1> ;       rbx = Pointer to buffer containing sector without valid data in buffer ;            (either unflushed or unread)
   106 000005F4 52                  <1>     push rdx
   107 000005F5 56                  <1>     push rsi
   108 000005F6 57                  <1>     push rdi
   109 000005F7 488B35(95C20300)    <1>     mov rsi, qword [workingDPB]  ;Get DPB of transacting device
   110 000005FE 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   111 00000600 E833010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   112 00000605 4881FBFFFFFFFF      <1>     cmp rbx, -1
   113 0000060C 7405                <1>     je .rbReadNewSector
   114                              <1> .rbExit:
   115 0000060E F8                  <1>     clc
   116                              <1> .rbExitNoFlag:
   117 0000060F 5F                  <1>     pop rdi
   118 00000610 5E                  <1>     pop rsi
   119 00000611 5A                  <1>     pop rdx
   120 00000612 C3                  <1>     ret
   121                              <1> .rbReadNewSector:
   122 00000613 E8D0000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rbx
   123 00000618 4889DF              <1>     mov rdi, rbx
   124 0000061B 30ED                <1>     xor ch, ch
   125 0000061D 803D(3BD50300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   126 00000624 7506                <1>     jne .flush  ;We are not, flush buffer
   127 00000626 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   128 0000062A 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used
   129                              <1> .flush:
   130 0000062C E862000000          <1>     call flushBuffer
   131 00000631 72DC                <1>     jc .rbExitNoFlag    ;Exit in error
   132                              <1> .skipFlush:
   133                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   134 00000633 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   135 00000636 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
   136 00000639 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   137 0000063D 80F902              <1>     cmp cl, fatBuffer
   138 00000640 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   139 00000642 7503                <1>     jne .rbNonFATbuffer
   140 00000644 8A5607              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   141                              <1> .rbNonFATbuffer:
   142 00000647 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   143 0000064A 8B5612              <1>     mov edx, dword [rsi + dpb.dFATlength]
   144 0000064D 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   145 00000650 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   146 00000654 C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   147 00000658 FEC5                <1>     inc ch  ;If an error occurs, have the signature in ch
   148 0000065A E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   149 0000065F EBAE                <1>     jmp short .rbExitNoFlag
   150                              <1> 
   151                              <1> ;----------------------------------------------------
   152                              <1> ;           Internally referenced functions         :
   153                              <1> ;----------------------------------------------------
   154                              <1> 
   155                              <1> readSectorBuffer:   ;Internal Linkage
   156                              <1> ;Reads a sector into a built sector buffer
   157                              <1> ;Entry: rdi = Pointer to buffer header
   158                              <1> ;Exit:  CF=NC : Success
   159                              <1> ;       CF=CY : Fail, terminate the request
   160                              <1> ;       rbx pointing to buffer header
   161                              <1> ;First make request to device driver
   162 00000661 50                  <1>     push rax
   163 00000662 53                  <1>     push rbx
   164 00000663 51                  <1>     push rcx
   165 00000664 52                  <1>     push rdx
   166 00000665 56                  <1>     push rsi
   167                              <1> .rsRequest0:
   168 00000666 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   169                              <1> .rsRequest1:
   170 0000066B 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   171 0000066E B901000000          <1>     mov ecx, 1  ;One sector to copy
   172 00000673 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   173 00000677 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   174 0000067B E8730D0000          <1>     call absDiskRead    ;Call INT 45h
   175 00000680 7207                <1>     jc .rsFail
   176                              <1> .rsExit:
   177 00000682 F8                  <1>     clc
   178                              <1> .rsExitBad:
   179 00000683 5E                  <1>     pop rsi
   180 00000684 5A                  <1>     pop rdx
   181 00000685 59                  <1>     pop rcx
   182 00000686 5B                  <1>     pop rbx
   183 00000687 58                  <1>     pop rax
   184 00000688 C3                  <1>     ret
   185                              <1> .rsFail:
   186                              <1> ;Enter here only if the request failed
   187 00000689 FFCE                <1>     dec esi
   188 0000068B 75DE                <1>     jnz .rsRequest1 ;Try the request again!
   189                              <1> ;Request failed thrice, critical error call
   190 0000068D F9                  <1>     stc
   191 0000068E E9F0FFFFFF          <1>     jmp .rsExitBad  ;Abort
   192                              <1> 
   193                              <1> flushBuffer:    ;Internal Linkage
   194                              <1> ;Flushes the data in a sector buffer to disk!
   195                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   196                              <1> ;Exit:  CF=NC : Success
   197                              <1> ;       CF=CY : Fail, terminate the request
   198                              <1> ;First make request to device driver
   199 00000693 50                  <1>     push rax
   200 00000694 53                  <1>     push rbx
   201 00000695 51                  <1>     push rcx
   202 00000696 52                  <1>     push rdx
   203 00000697 56                  <1>     push rsi
   204 00000698 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   205 0000069C 7433                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   206                              <1> .fbRequest0:
   207 0000069E BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   208                              <1> .fbRequest1:
   209 000006A3 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   210 000006A6 B901000000          <1>     mov ecx, 1  ;One sector to copy
   211 000006AB 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   212 000006AF 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   213 000006B3 E81D0D0000          <1>     call absDiskWrite    ;Call INT 46h
   214 000006B8 7224                <1>     jc .fbFail
   215                              <1> ;Now check if the buffer was a FAT, to write additional copies
   216 000006BA F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   217 000006BE 7411                <1>     jz .fbFreeExit  ;If not, exit
   218 000006C0 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   219 000006C3 740C                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   220 000006C5 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   221 000006C8 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   222 000006CC E9CDFFFFFF          <1>     jmp .fbRequest0 ;Make another request
   223                              <1> .fbFreeExit:
   224                              <1> ;Free the buffer if it was flushed successfully
   225 000006D1 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
   226 000006D7 F8                  <1>     clc
   227                              <1> .fbExitBad:
   228 000006D8 5E                  <1>     pop rsi
   229 000006D9 5A                  <1>     pop rdx
   230 000006DA 59                  <1>     pop rcx
   231 000006DB 5B                  <1>     pop rbx
   232 000006DC 58                  <1>     pop rax
   233 000006DD C3                  <1>     ret
   234                              <1> .fbFail:
   235                              <1> ;Enter here only if the request failed
   236 000006DE FFCE                <1>     dec esi
   237 000006E0 75C1                <1>     jnz .fbRequest1 ;Try the request again!
   238                              <1> ;Request failed thrice, critical error call
   239 000006E2 F9                  <1>     stc
   240 000006E3 E9F0FFFFFF          <1>     jmp .fbExitBad  ;Abort
   241                              <1>     
   242                              <1> findLRUBuffer: ;Internal Linkage
   243                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   244                              <1> ; in rbx
   245                              <1> ;Input: Nothing
   246                              <1> ;Output: rbx = Pointer to the buffer hdr to use
   247 000006E8 52                  <1>     push rdx
   248 000006E9 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   249 000006F0 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   250 000006F4 7436                <1>     je .flbExit 
   251 000006F6 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   252 000006FD 742D                <1>     je .flbExit
   253                              <1> .flbWalk:
   254 000006FF 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
   255 00000702 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   256 00000705 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1
   257 00000709 7423                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   258 0000070B 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   259 00000712 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   260 00000714 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   261                              <1> .flbHeadLink:
   262 0000071B 488B15(A2C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   263 00000722 48891D(A2C00300)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   264 00000729 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
   265                              <1> .flbExit:
   266 0000072C 5A                  <1>     pop rdx
   267 0000072D C3                  <1>     ret
   268                              <1> .flbFreeLink:
   269 0000072E 51                  <1>     push rcx
   270 0000072F 488B0B              <1>     mov rcx, qword [rbx + bufferHdr.nextBufPtr]
   271 00000732 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rbx
   272 00000735 59                  <1>     pop rcx
   273 00000736 EBE3                <1>     jmp short .flbHeadLink
   274                              <1> 
   275                              <1> findSectorInBuffer:     ;Internal linkage
   276                              <1> ;Finds the Buffer for a sector
   277                              <1> ;If the sector is not in a buffer, returns with a -1
   278                              <1> ;Input: rax = Sector number
   279                              <1> ;        dl = Drive number
   280                              <1> ;Output: rbx = Buffer hdr pointer or -1
   281 00000738 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   282                              <1> .fsiCheckBuffer:
   283 0000073F 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   284 00000742 7507                <1>     jne .fsiGotoNextBuffer
   285 00000744 4839430A            <1>     cmp qword [rbx + bufferHdr.bufferLBA], rax
   286 00000748 7501                <1>     jne .fsiGotoNextBuffer
   287                              <1> .fsiExit:
   288 0000074A C3                  <1>     ret
   289                              <1> .fsiGotoNextBuffer:
   290 0000074B 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   291 0000074E 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   292 00000755 74F3                <1>     je .fsiExit
   293 00000757 EBE6                <1>     jmp short .fsiCheckBuffer
   294                              <1> 
   295                              <1> 
   296                              <1> findDirtyBufferForDrive:    ;No Use
   297                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   298                              <1> ;Input: dl = Drive number
   299                              <1> ;Output: rbx = Pointer to dirty buffer for drive letter if exists or -1 if not
   300 00000759 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   301                              <1> .fdbfdCheckBuffer:
   302 00000760 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   303 00000763 7507                <1>     jne .fdbfdGotoNextBuffer
   304 00000765 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   305 00000769 7401                <1>     jz .fdbfdGotoNextBuffer ;Bit not set, goto next buffer
   306                              <1> .fdbfdExit:
   307 0000076B C3                  <1>     ret
   308                              <1> .fdbfdGotoNextBuffer:
   309 0000076C 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   310 0000076F 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   311 00000776 74F3                <1>     je .fdbfdExit
   312 00000778 EBE6                <1>     jmp short .fdbfdCheckBuffer
    19                                  %include "./Source/Kernel/FAT/fat.asm"
    20                              <1> ;---------------------------------------------------:
    21                              <1> ;                   KERNEL FUNCTIONS                :
    22                              <1> ;---------------------------------------------------:
    23                              <1> makeDIR:           ;ah = 39h
    24                              <1> removeDIR:         ;ah = 3Ah
    25                              <1> setCurrentDIR:     ;ah = 3Bh, set dir for current drive (or drive in path)
    26                              <1> getCurrentDIR:     ;ah = 47h
    27                              <1> getSetFileDateTime:;ah = 57h
    28                              <1> trueName:          ;ah = 60h, get fully qualified name
    29 0000077A C3                  <1>     ret
    30                              <1> 
    31                              <1> 
    32                              <1> ;-----------------------------------:
    33                              <1> ;       File System routines        :
    34                              <1> ;-----------------------------------:
    35                              <1> name2Clust:
    36                              <1> ;Converts a file name to a first cluster number
    37                              <1> ;Entry : rbx = Points to ASCIIZ string to parse for a Cluster number
    38                              <1> ;Exit : rax = Cluster number or -1 if file not found
    39                              <1> ;Three cases:
    40                              <1> ;1) Start with a letter and a : => Full path and Drive specified
    41                              <1> ;2) Start with \ or / => Current Drive and relative path from root
    42                              <1> ;3) Else => File name in Current Dir or a subdir from current dir
    43 0000077B 56                  <1>     push rsi
    44 0000077C 57                  <1>     push rdi
    45 0000077D 51                  <1>     push rcx
    46 0000077E 52                  <1>     push rdx
    47 0000077F 4889DF              <1>     mov rdi, rbx    ;Save string ptr in rdi
    48 00000782 807F013A            <1>     cmp byte [rdi + 1], ":" ;Check it is a colon for full path
    49 00000786 740A                <1>     je .fullPath
    50 00000788 803F5C              <1>     cmp byte [rdi], "\"
    51 0000078B 7405                <1>     je .relPath
    52 0000078D 803F2F              <1>     cmp byte [rdi], "/"
    53 00000790 7400                <1>     je .relPath ;Both CPM and UNIX are considered acceptible path separators
    54                              <1>     ;Else search the current dir for an entry
    55                              <1> 
    56                              <1> .localFileNoRoot:
    57                              <1> .relPath:
    58                              <1> .fullPath:
    59                              <1> .exit:
    60 00000792 5A                  <1>     pop rdx
    61 00000793 59                  <1>     pop rcx
    62 00000794 5F                  <1>     pop rdi
    63 00000795 5E                  <1>     pop rsi
    64 00000796 C3                  <1>     ret
    65                              <1> 
    66                              <1> searchDirectorySectorForEntry:
    67                              <1> ;Proc that searches the sector for the string 
    68                              <1> ; UP UNTIL the NULL char or the path separator
    69                              <1> ;If a . is found in file name, skip it
    70                              <1> ;If a sector entry is found to start with 0, return fail
    71                              <1> ;Entry: rdx = Path Section ptr (point to first A/N char)
    72                              <1> ;       rbx = Sector buffer pointer
    73                              <1> ;       rsi = DPB pointer
    74                              <1> ;Exit: CF=NC => Found, CF=CY => Not found
    75                              <1> ;       If CF=CY read char pointed to by rbx.
    76                              <1> ;       If this char is 0, then end of directory reached!
    77 00000797 50                  <1>     push rax
    78 00000798 51                  <1>     push rcx
    79                              <1>     ;cl has number of entries per sector
    80 00000799 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
    81 0000079C 80E905              <1>     sub cl, 5   ;5 is the number of bytes per dir entry shift
    82 0000079F B801000000          <1>     mov eax, 1
    83 000007A4 D3E0                <1>     shl eax, cl ;eax has number of directory entries in sector
    84                              <1>     ;Now search each entry for name
    85                              <1>     ;Use ecx as counter for each entry
    86 000007A6 89C1                <1>     mov ecx, eax
    87                              <1> .searchDir:
    88 000007A8 803B00              <1>     cmp byte [rbx], 0 ;Check if dir empty before proceeding
    89 000007AB 744E                <1>     jz .exitNotOK
    90                              <1>     ;Do string compare here, search for / or \ or 0 to exit
    91 000007AD 52                  <1>     push rdx    ;Push the name pointer 
    92 000007AE 53                  <1>     push rbx    ;Push sector pointer
    93                              <1> .searchLoop:
    94 000007AF 8A02                <1>     mov al, byte [rdx] ;Get char in ASCIIZ buffer
    95 000007B1 3C2E                <1>     cmp al, "." ;Verify if name separator or directory entry
    96 000007B3 742C                <1>     je .dotCase
    97 000007B5 3C05                <1>     cmp al, 05h ;Special Case
    98 000007B7 7424                <1>     je .specialCase
    99 000007B9 3C2F                <1>     cmp al, "/" ;Name Found
   100 000007BB 7442                <1>     je .nameFound
   101 000007BD 3C5C                <1>     cmp al, "\" ;Name Found
   102 000007BF 743E                <1>     je .nameFound
   103 000007C1 3C00                <1>     cmp al, 0   ;End of ASCIIZ string!
   104 000007C3 743A                <1>     je .nameFound
   105                              <1> .specRet:
   106 000007C5 3A03                <1>     cmp al, byte [rbx]  ;Compare to char in sector buffer
   107 000007C7 7520                <1>     jne .nameNotFound
   108 000007C9 48FFC3              <1>     inc rbx
   109                              <1> .skipChar:
   110 000007CC 48FFC2              <1>     inc rdx ;Go to Filename extension
   111 000007CF 5B                  <1>     pop rbx ;Get start of directory entry into rbx
   112 000007D0 53                  <1>     push rbx
   113 000007D1 4881C308000000      <1>     add rbx, 8  ;Go to the extension portion of the Filename
   114 000007D8 E9D2FFFFFF          <1>     jmp .searchLoop
   115                              <1> .specialCase:
   116 000007DD B0E5                <1>     mov al, 0E5h
   117 000007DF EBE4                <1>     jmp short .specRet
   118                              <1> .dotCase:
   119                              <1> ;Check if next char is geq than 'A'. If yes, path separator
   120 000007E1 807A0141            <1>     cmp byte [rdx + 1], 'A'
   121 000007E5 7CDE                <1>     jnge .specRet   ;Not Path Separator
   122 000007E7 EBE3                <1>     jmp short .skipChar
   123                              <1> .nameNotFound:
   124 000007E9 5B                  <1>     pop rbx
   125 000007EA 5A                  <1>     pop rdx
   126 000007EB 4881C320000000      <1>     add rbx, 20h    ;Goto next sector entry
   127 000007F2 803B00              <1>     cmp byte [rbx], 0   ;Are we at the end of the Directory?
   128 000007F5 7404                <1>     jz .exitNotOK   ;Exit early, end of directory
   129 000007F7 FFC9                <1>     dec ecx
   130 000007F9 75AD                <1>     jnz .searchDir
   131                              <1> .exitNotOK:
   132 000007FB F9                  <1>     stc
   133                              <1> .exitOk:
   134 000007FC 59                  <1>     pop rcx
   135 000007FD 58                  <1>     pop rax
   136 000007FE C3                  <1>     ret
   137                              <1> .nameFound:
   138 000007FF 5B                  <1>     pop rbx
   139 00000800 5A                  <1>     pop rdx
   140 00000801 F8                  <1>     clc
   141 00000802 EBF8                <1>     jmp short .exitOk
   142                              <1> 
   143                              <1> getFATtype:
   144                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
   145                              <1> ;Entry: rsi = DPB to ascertain FAT
   146                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
   147 00000804 53                  <1>     push rbx
   148 00000805 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
   149 00000808 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
   150 0000080D 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   151 00000813 730F                <1>     jae .exit
   152 00000815 FFC9                <1>     dec ecx     ;FAT 12 marker
   153 00000817 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   154 0000081D 7205                <1>     jb .exit
   155 0000081F B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
   156                              <1> .exit:
   157 00000824 5B                  <1>     pop rbx
   158 00000825 C3                  <1>     ret
   159                              <1> 
   160                              <1> clust2FATEntry:
   161                              <1> ;Converts a cluster number to a offset in the FAT
   162                              <1> ;Entry:  rbp points to the DPB for the transacting device
   163                              <1> ;        eax = Cluster number to look for
   164                              <1> ;Exit:   eax = Sector on disk of FAT 
   165                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
   166                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
   167 00000826 53                  <1>     push rbx
   168 00000827 8B5D0E              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
   169 0000082A 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   170 00000830 731E                <1>     jae .fat32
   171 00000832 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   172 00000838 7209                <1>     jb .fat12
   173                              <1> ;FAT16
   174 0000083A D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
   175 0000083C 6801000000          <1>     push qword 1
   176 00000841 EB15                <1>     jmp short .common
   177                              <1> .fat12:
   178 00000843 89C1                <1>     mov ecx, eax    ;ecx = eax
   179 00000845 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
   180 00000847 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
   181 00000849 6800000000          <1>     push qword 0
   182 0000084E EB08                <1>     jmp short .common
   183                              <1> .fat32:
   184 00000850 6802000000          <1>     push qword 2
   185 00000855 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
   186                              <1> .common:
   187                              <1> ;eax has the FAToffset
   188 00000858 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   189 0000085B BA01000000          <1>     mov edx, 1
   190 00000860 D3E2                <1>     shl edx, cl    ;Turn edx to number of bytes per sector
   191 00000862 89D1                <1>     mov ecx, edx
   192 00000864 31D2                <1>     xor edx, edx    ;edx = 0
   193 00000866 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
   194 00000868 0FB75D05            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
   195 0000086C 01D8                <1>     add eax, ebx
   196 0000086E 59                  <1>     pop rcx ;Pop the FAT type back into rcx
   197 0000086F 5B                  <1>     pop rbx
   198 00000870 C3                  <1>     ret
   199                              <1> 
   200                              <1> getStartSectorOfCluster:
   201                              <1> ;Input: eax = Cluster Number
   202                              <1> ;       rbp = dpb pointer
   203                              <1> ;Output: rax = Starting Sector number for cluster
   204                              <1> ;Gives the data sector we are at in the current cluster
   205                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
   206 00000871 51                  <1>     push rcx
   207 00000872 09C0                <1>     or eax, eax ;Zero upper dword
   208 00000874 482D02000000        <1>     sub rax, 2
   209 0000087A 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   210 0000087D 48D3E0              <1>     shl rax, cl
   211 00000880 31C9                <1>     xor ecx, ecx
   212 00000882 8B4D0A              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
   213 00000885 4801C8              <1>     add rax, rcx
   214                              <1>     ;rax now has the first sector of the current cluster
   215 00000888 59                  <1>     pop rcx
   216 00000889 C3                  <1>     ret
   217                              <1> 
   218                              <1> 
   219                              <1> getNextSectorOfFileBROKEN:
   220                              <1> ;This function will read the next sector for a file into a buffer.
   221                              <1> ;If the next sector to be read lives in the next cluster, it will update
   222                              <1> ; the file handle of the file being read/written to the new cluster
   223                              <1> ;
   224                              <1> ;Input: qword [currentSFT] = sft pointer
   225                              <1> ;Output:
   226                              <1> ;       rbx = Pointer to buffer data
   227                              <1> ;       CF = NC, buffer OK to read
   228                              <1> ;       CF = CY, buffer not ok, something went wrong
   229                              <1> ;           ZF = ZE(1), Data not flushed to disk
   230                              <1> ;           ZF = NZ(0), Data no read from disk
   231                              <1>     ;Read next sector. If at last sector in cluster, walk map, get
   232                              <1>     ; next cluster and read first sector 
   233 0000088A 50                  <1>     push rax
   234 0000088B 51                  <1>     push rcx
   235 0000088C 52                  <1>     push rdx
   236 0000088D 56                  <1>     push rsi
   237 0000088E 57                  <1>     push rdi
   238 0000088F 55                  <1>     push rbp
   239                              <1>     ;Check if we need to go to next cluster
   240 00000890 488B35(08C30300)    <1>     mov rsi, qword [currentSFT] ;Get the current SFT
   241 00000897 488B6E07            <1>     mov rbp, qword [rsi + sft.qPtr] ;Get DPB pointer for file
   242 0000089B 48892D(95C20300)    <1>     mov qword [workingDPB], rbp ;Make the DPB the working DPB
   243                              <1>     ;mov ax, word [rsi + sft.wRelSect]    ;Upper byte is ALWAYS 0
   244 000008A2 3A4503              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   245 000008A5 7452                <1>     je .gotoNextCluster
   246                              <1>     ;Goto next sector
   247                              <1>     ;inc word [rsi + sft.wRelSect]    ;Goto next sector in cluster
   248                              <1> .getSector:
   249 000008A7 8B463F              <1>     mov eax, dword [rsi + sft.dAbsClusr] ;Get cluster number
   250 000008AA E8C2FFFFFF          <1>     call getStartSectorOfCluster
   251                              <1>     ;movzx ebx, word [rsi + sft.wRelSect] ;Get relative sector number
   252                              <1>     ;eax now has the correct sector in the cluster
   253 000008AF 01D8                <1>     add eax, ebx    
   254                              <1>     ;Read the sector into a buffer
   255                              <1>     ;The sector read here is either DATA or DOS
   256 000008B1 488D762C            <1>     lea rsi, qword [rsi + sft.sFileName]
   257 000008B5 488D3D46F7FFFF      <1>     lea rdi, dosBIOSName    ;Check if the file being read is the BIOS
   258 000008BC B90B000000          <1>     mov ecx, 11             ;File name length
   259 000008C1 F3A6                <1>     repe cmpsb
   260 000008C3 742B                <1>     je .OSFile
   261 000008C5 488D762C            <1>     lea rsi, qword [rsi + sft.sFileName]
   262 000008C9 488D3D3EF7FFFF      <1>     lea rdi, dosKernName
   263 000008D0 B90B000000          <1>     mov ecx, 11             ;File name length
   264 000008D5 F3A6                <1>     repe cmpsb
   265 000008D7 7417                <1>     je .OSFile
   266                              <1>     ;Not an OS file, dataBuffer
   267 000008D9 B108                <1>     mov cl, dataBuffer
   268                              <1> .getSectorRead:
   269 000008DB E814FDFFFF          <1>     call getBuffer  ;Get ptr to buffer header in rbx
   270 000008E0 7212                <1>     jc .getSectorFailed
   271 000008E2 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   272                              <1> .getSectorExit:
   273 000008E9 5D                  <1>     pop rbp
   274 000008EA 5F                  <1>     pop rdi
   275 000008EB 5E                  <1>     pop rsi
   276 000008EC 5A                  <1>     pop rdx
   277 000008ED 59                  <1>     pop rcx
   278 000008EE 58                  <1>     pop rax
   279 000008EF C3                  <1>     ret
   280                              <1> .OSFile:
   281 000008F0 B101                <1>     mov cl, dosBuffer
   282 000008F2 EBE7                <1>     jmp short .getSectorRead
   283                              <1> .getSectorFailed:
   284                              <1>     ;CF = CY => Something went wrong!
   285                              <1>     ;   Set the Zero flag for data not flushed to disk
   286                              <1>     ;   Clear Zero flag for data not read from disk
   287 000008F4 84ED                <1>     test ch, ch ;This sets the zero flag correctly, but mangles CF
   288 000008F6 F9                  <1>     stc ;Set the carry flag!
   289 000008F7 EBF0                <1>     jmp short .getSectorExit
   290                              <1> .gotoNextCluster:
   291                              <1>     ;Read FAT, find next cluster in cluster map, update SFT entries
   292 000008F9 8B463F              <1>     mov eax, dword [rsi + sft.dAbsClusr] ;Get the current cluster
   293 000008FC E825FFFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   294 00000901 0FB75D05            <1>     movzx ebx, word [rbp + dpb.wFAToffset]
   295 00000905 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   296 00000907 B102                <1>     mov cl, fatBuffer
   297                              <1>     ;call readBuffer ;Buffer Header in ebx
   298 00000909 72E9                <1>     jc .getSectorFailed
   299                              <1>     ;Check if FAT 12, 16, 32
   300 0000090B 4885FF              <1>     test rdi, rdi
   301 0000090E 7421                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   302 00000910 48F7C701000000      <1>     test rdi, 1
   303 00000917 7407                <1>     jz .goToNextClusterCommonFat32
   304                              <1>     ;Here we handle FAT16
   305 00000919 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   306 0000091E EB09                <1>     jmp short .goToNextClusterCommon
   307                              <1> .goToNextClusterCommonFat32:
   308 00000920 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   309 00000924 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   310                              <1> .goToNextClusterCommon:
   311 00000929 89463F              <1>     mov dword [rsi + sft.dAbsClusr], eax ;Save new cluster number
   312                              <1>     ;mov word [rsi + sft.wRelSect], 0 ;First sector in next cluster
   313 0000092C E976FFFFFF          <1>     jmp .getSector
   314                              <1> .gotoNextClusterFat12:
   315                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   316                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   317 00000931 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   318 00000934 FFC0                <1>     inc eax ;Get next sector
   319                              <1>     ;call readBuffer ;Buffer Header in ebx
   320 00000936 72BC                <1>     jc .getSectorFailed
   321                              <1>     ;rdi has first buffer header, rbx has second buffer header
   322                              <1>     ;rdx has offset into first header for entry
   323 00000938 41F7403F01000000    <1>     test dword [r8 + sft.dAbsClusr], 1  ;Check if cluster is odd
   324 00000940 7429                <1>     jz .gotoNextClusterFat12Even
   325                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   326 00000942 B801000000          <1>     mov eax, 1
   327 00000947 418A4802            <1>     mov cl, byte [r8 + dpb.bBytesPerSectorShift]
   328 0000094B D3E0                <1>     shl eax, cl
   329 0000094D 29D0                <1>     sub eax, edx
   330 0000094F FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   331 00000951 750E                <1>     jnz .gotoNextClusterFat12NoCross
   332                              <1>     ;Boundary cross, build entry properly
   333 00000953 31C0                <1>     xor eax, eax
   334 00000955 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   335 00000959 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   336 0000095C C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   337 0000095F EBC8                <1>     jmp short .goToNextClusterCommon
   338                              <1> .gotoNextClusterFat12NoCross:
   339 00000961 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   340 00000966 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   341 00000969 EBBE                <1>     jmp short .goToNextClusterCommon
   342                              <1> .gotoNextClusterFat12Even:
   343                              <1>     ;Here the cluster is even and can't cross a sector boundary
   344 0000096B 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   345 00000970 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   346 00000975 EBB2                <1>     jmp short .goToNextClusterCommon
    20                                  %include "./Source/Kernel/CharDevs/charFunctions.asm"
    21                              <1> ;Dos default char functions live here
    22                              <1> 
    23                              <1> stdinReadEcho:     ;ah = 01h
    24                              <1> ;Return char that has been read and echoed in al
    25 00000977 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    26 0000097E 488D05(8EC20300)    <1>     lea rax, singleIObyt
    27 00000985 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    28 00000988 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    29 0000098C 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    30 00000992 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    31 00000996 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    32                              <1> 
    33 0000099D 488B35(98C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
    34 000009A4 E886090000          <1>     call goDriver
    35                              <1> 
    36 000009A9 803D(8EC20300)00    <1>     cmp byte [singleIObyt], 00h
    37 000009B0 742B                <1>     jz .stdireexit
    38 000009B2 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    39 000009B9 488D05(8EC20300)    <1>     lea rax, singleIObyt
    40 000009C0 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    41 000009C3 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    42 000009C7 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    43 000009CD 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    44 000009D1 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    45 000009D8 E852090000          <1>     call goDriver   ;rbx has reqheader ptr
    46                              <1> .stdireexit:
    47 000009DD 8A05(8EC20300)      <1>     mov al, byte [singleIObyt]
    48 000009E3 C3                  <1>     ret
    49                              <1> 
    50                              <1> stdoutWrite:       ;ah = 02h
    51                              <1> ;Bspace is regular cursor left, does not insert a blank
    52 000009E4 8815(8EC20300)      <1>     mov byte [singleIObyt], dl
    53 000009EA 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    54 000009F1 488D15(8EC20300)    <1>     lea rdx, singleIObyt
    55 000009F8 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    56 000009FB C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    57 000009FF 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    58 00000A05 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    59 00000A09 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    60                              <1> 
    61 00000A10 488B35(98C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
    62 00000A17 E813090000          <1>     call goDriver
    63 00000A1C C3                  <1>     ret
    64                              <1> stdauxRead:        ;ah = 03h
    65                              <1> stdauxWrite:       ;ah = 04h
    66                              <1> stdprnWrite:       ;ah = 05h
    67                              <1> directCONIO:       ;ah = 06h
    68                              <1> waitDirectInNoEcho:;ah = 07h
    69                              <1> ;Return char in al
    70 00000A1D 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    71 00000A24 488D05(8EC20300)    <1>     lea rax, singleIObyt
    72 00000A2B C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    73 00000A2E C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    74 00000A32 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    75 00000A38 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    76 00000A3C C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    77                              <1> 
    78 00000A43 488B35(98C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
    79 00000A4A E8E0080000          <1>     call goDriver
    80 00000A4F 8A05(8EC20300)      <1>     mov al, byte [singleIObyt]
    81 00000A55 C3                  <1>     ret
    82                              <1> waitStdinNoEcho:   ;ah = 08h
    83 00000A56 C3                  <1>     ret
    84                              <1> printString:       ;ah = 09h
    85 00000A57 31C9                <1>     xor ecx, ecx    ;Clear char counter
    86 00000A59 B824000000          <1>     mov eax, "$"    ;Terminating char
    87 00000A5E 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
    88                              <1> .ps0:   ;Search for $ to get count of chars
    89 00000A61 AE                  <1>     scasb
    90 00000A62 7404                <1>     je .ps1
    91 00000A64 FFC1                <1>     inc ecx
    92 00000A66 EBF9                <1>     jmp short .ps0
    93                              <1> .ps1:   ;Use handle 
    94 00000A68 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    95 00000A6F C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    96 00000A72 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    97 00000A76 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    98 00000A7C 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    99 00000A80 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   100                              <1>     
   101 00000A83 488B35(98C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
   102 00000A8A E8A0080000          <1>     call goDriver   ;Called with rbx pointing to the request header
   103                              <1> 
   104 00000A8F 488B1D(70C10300)    <1>     mov rbx, qword [oldRSP]
   105 00000A96 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   106 00000A98 C3                  <1>     ret
   107                              <1> buffStdinInput:    ;ah = 0Ah
   108                              <1> checkStdinStatus:  ;ah = 0Bh
   109                              <1> clearbuffDoFunc:   ;ah = 0Ch
   110                              <1> 
   111                              <1> ;Utility functions
   112                              <1> checkBreakOnCon:
   113                              <1> ;Reads bytes from CON if there are any bytes to read and 
   114                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   115 00000A99 803D(0FC10300)01    <1>     cmp byte [inDOS], 1
   116 00000AA0 7401                <1>     je checkBreak  ;Only check ^C on first entry to DOS
   117 00000AA2 C3                  <1>     ret
   118                              <1> checkBreak:
   119                              <1> ;Returns in al the keystroke that is available IF one is available
   120                              <1> ; or al=0 if no keystroke available
   121 00000AA3 53                  <1>     push rbx
   122 00000AA4 56                  <1>     push rsi
   123 00000AA5 488B35(98C00300)    <1>     mov rsi, qword [conPtr] ;Get pointer to Console device driver
   124 00000AAC 31C0                <1>     xor eax, eax
   125                              <1>     ;Place command code and a zero status word at the same time
   126 00000AAE B005                <1>     mov al, drvNONDESTREAD
   127 00000AB0 8905(26C00300)      <1>     mov dword [charReqHdr + nonDestInNoWaitReqPkt.cmdcde], eax
   128                              <1>     ;Place the packet size in the hdrlen field
   129 00000AB6 B00E                <1>     mov al, nonDestInNoWaitReqPkt_size
   130 00000AB8 8805(24C00300)      <1>     mov byte [charReqHdr + nonDestInNoWaitReqPkt.hdrlen], al
   131 00000ABE 488D1D(24C00300)    <1>     lea rbx, charReqHdr
   132 00000AC5 E865080000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   133                              <1>     ;Check if the busy bit is set (No keystroke available)
   134 00000ACA 66F705(27C00300)00- <1>     test word [charReqHdr + nonDestInNoWaitReqPkt.status], drvBsyStatus
   134 00000AD2 02                  <1>
   135 00000AD3 7403                <1>     jz .charFound
   136                              <1> .exit:
   137 00000AD5 5E                  <1>     pop rsi
   138 00000AD6 5B                  <1>     pop rbx
   139 00000AD7 C3                  <1>     ret
   140                              <1> .charFound:
   141                              <1> ;Keystroke available, proceed
   142 00000AD8 8A05(31C00300)      <1>     mov al, byte [charReqHdr + nonDestInNoWaitReqPkt.retbyt]    ;Get char
   143 00000ADE 3C03                <1>     cmp al, 03h ;BREAK/^C =ASCII 03h
   144 00000AE0 75F3                <1>     jne .exit   ;If not equal exit
   145                              <1> ;Now we pull the char out of the buffer
   146 00000AE2 31C0                <1>     xor eax, eax
   147 00000AE4 B004                <1>     mov al, drvREAD ;Read command
   148 00000AE6 8905(26C00300)      <1>     mov dword [charReqHdr + ioReqPkt.cmdcde], eax
   149                              <1>     ;Place packet size
   150 00000AEC C605(24C00300)2A    <1>     mov byte [charReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   151                              <1>     ;Place pointers and number of chars
   152 00000AF3 C705(3AC00300)0100- <1>     mov dword [charReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   152 00000AFB 0000                <1>
   153 00000AFD 488D05(8EC20300)    <1>     lea rax, singleIObyt    ;IO Byte buffer
   154 00000B04 488905(32C00300)    <1>     mov qword [charReqHdr + ioReqPkt.bufptr], rax
   155 00000B0B E81F080000          <1>     call goDriver   ;RSI and RBX as before
   156 00000B10 C3                  <1>     ret ;Stopgap right now, do nothing
   157                              <1> 
   158                              <1> 
   159                              <1>     
    21                                  %include "./Source/Kernel/CharDevs/dateTimeFunctions.asm"
    22                              <1> ;Major kernel date time functions and subroutines
    23                              <1> 
    24                              <1> getDate:           ;ah = 2Ah
    25                              <1> setDate:           ;ah = 2Bh
    26                              <1> getTime:           ;ah = 2Ch
    27                              <1> setTime:           ;ah = 2Dh
    28 00000B11 C3                  <1>     ret
    22                                  %include "./Source/Kernel/FileIO/fcbFunctions.asm"
    23                              <1> openFileFCB:       ;ah = 0Fh
    24                              <1> closeFileFCB:      ;ah = 10h
    25                              <1> findFirstFileFCB:  ;ah = 11h
    26                              <1> findNextFileFCB:   ;ah = 12h
    27                              <1> deleteFileFCB:     ;ah = 13h
    28                              <1> sequentialReadFCB: ;ah = 14h
    29                              <1> sequentialWriteFCB:;ah = 15h
    30                              <1> createFileFCB:     ;ah = 16h
    31                              <1> renameFileFCB:     ;ah = 17h
    32 00000B12 C3                  <1>     ret
    33                              <1> setDTA:            ;ah = 1Ah
    34                              <1> ;Called with:
    35                              <1> ;   rdx = Pointer to the new default DTA
    36 00000B13 488B1D(70C10300)    <1>     mov rbx, qword [oldRSP]
    37 00000B1A 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    38 00000B1E 488915(1EC10300)    <1>     mov qword [currentDTA], rdx
    39 00000B25 C3                  <1>     ret
    40                              <1> randomReadFCB:     ;ah = 21h
    41                              <1> randomWriteFCB:    ;ah = 22h
    42                              <1> getFileSizeFCB:    ;ah = 23h
    43                              <1> setRelRecordFCB:   ;ah = 24h
    44                              <1> randBlockReadFCB:  ;ah = 27h
    45                              <1> randBlockWriteFCB: ;ah = 28h
    46                              <1> parseFilenameFCB:  ;ah = 29h
    47 00000B26 C3                  <1>     ret
    48                              <1> getDTA:            ;ah = 2Fh
    49 00000B27 488B15(70C10300)    <1>     mov rdx, qword [oldRSP]
    50 00000B2E 488B1D(1EC10300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    51 00000B35 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    52 00000B39 C3                  <1>     ret
    23                                  %include "./Source/Kernel/FileIO/handleFunctions.asm"
    24                              <1> ;-----------------------------------:
    25                              <1> ;    File Handle Kernel routines    :
    26                              <1> ;-----------------------------------:
    27                              <1> 
    28                              <1> createFileHdl:     ;ah = 3Ch, handle function
    29 00000B3A C3                  <1>     ret
    30                              <1> openFileHdl:       ;ah = 3Dh, handle function
    31 00000B3B C3                  <1>     ret
    32                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    33 00000B3C C3                  <1>     ret
    34                              <1> readFileHdl:       ;ah = 3Fh, handle function
    35 00000B3D C605(8FC20300)00    <1>     mov byte [rwFlag], 0    ;Read
    36 00000B44 EB07                <1>     jmp short rwFileHndleCommon
    37                              <1> writeFileHdl:      ;ah = 40h, handle function
    38 00000B46 C605(8FC20300)01    <1>     mov byte [rwFlag], 1    ;Write
    39                              <1> rwFileHndleCommon:
    40                              <1> ;bx has file handle, ecx has number of bytes to read
    41 00000B4D 66891D(10C30300)    <1>     mov word [currentHdl], bx
    42 00000B54 E8AD000000          <1>     call getSFTPtr  ;Get SFT ptr in var
    43 00000B59 7301                <1>     jnc .rwfhc0
    44 00000B5B C3                  <1>     ret ;If carry is set and error code in al, exit!
    45                              <1> .rwfhc0:
    46                              <1> 
    47 00000B5C C3                  <1>     ret
    48                              <1> 
    49                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    50                              <1> movFileReadPtr:    ;ah = 42h, handle function, LSEEK
    51                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
    52                              <1> ioctrl:            ;ah = 44h, handle function
    53                              <1> duplicateHandle:   ;ah = 45h, handle function
    54                              <1> forceDuplicateHdl: ;ah = 46h, handle function
    55                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
    56                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
    57                              <1> renameFile:        ;ah = 56h
    58                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
    59                              <1> createNewFile:     ;ah = 5Bh
    60                              <1> lockUnlockFile:    ;ah = 5Ch
    61                              <1> setHandleCount:    ;ah = 67h
    62                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
    63 00000B5D C3                  <1>     ret
    64                              <1> ;-----------------------------------:
    65                              <1> ;        File Handle routines       :
    66                              <1> ;-----------------------------------:
    67                              <1> setFileAccessVariables:
    68                              <1> ;This will set up the file access variables and currentSFT 
    69                              <1> ; for the SFT pointer in rsi
    70                              <1> ;Only used if the SFT is pointing and reading/writing to/from a 
    71                              <1> ; hardfile (not device)
    72                              <1> ;Sets up the variables for the SFT AS IT IS WHEN THE FUNCTION IS INVOKED
    73                              <1> ;Input: rsi = SFT to setup for
    74                              <1> ;Output: Variables initialised:
    75                              <1> ;   currentSFT, workingDPB
    76                              <1> ;   currClust, currClustA, clustFact, currSect, currSectA, currByte
    77                              <1> ;   currByteA
    78 00000B5E 50                  <1>     push rax
    79 00000B5F 51                  <1>     push rcx
    80 00000B60 52                  <1>     push rdx
    81 00000B61 56                  <1>     push rsi
    82 00000B62 55                  <1>     push rbp
    83                              <1> ;Set current SFT
    84 00000B63 E88E000000          <1>     call setCurrentSFT  ;Set rsi the current SFT ptr
    85 00000B68 31C0                <1>     xor eax, eax
    86                              <1> ;Get Disk Relative (absolute) cluster
    87 00000B6A 8B463F              <1>     mov eax, dword [rsi + sft.dAbsClusr]
    88 00000B6D 8905(1EC30300)      <1>     mov dword [currClustA], eax 
    89                              <1> ;Get File Relative Cluster
    90 00000B73 8B461F              <1>     mov eax, dword [rsi + sft.dRelClust]
    91 00000B76 8905(1AC30300)      <1>     mov dword [currClust], eax
    92                              <1> ;Set working DPB
    93 00000B7C 488B6E07            <1>     mov rbp, qword [rsi + sft.qPtr] ;Get DPB ptr
    94 00000B80 E87E0A0000          <1>     call setWorkingDPB
    95                              <1> ;Get Number of Sectors per Cluster
    96 00000B85 31C0                <1>     xor eax, eax
    97 00000B87 FFC0                <1>     inc eax
    98 00000B89 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    99 00000B8C D3E0                <1>     shl eax, cl ;Get number of Sectors Per Cluster
   100 00000B8E 8805(22C30300)      <1>     mov byte [clustFact], al 
   101                              <1> ;Get Current Byte in File we are pointing to relative to the start of the file
   102 00000B94 8B4E1B              <1>     mov ecx, dword [rsi + sft.dCurntOff]
   103 00000B97 890D(2EC30300)      <1>     mov dword [currByteA], ecx
   104                              <1> ;___
   105                              <1> ; | DO THE FOLLOWING TOGETHER
   106                              <1> ; | Get Cluster Relative Sector being pointed to
   107                              <1> ; | Get Current Byte in File we are pointing to relative to the sector
   108                              <1> ;_|_
   109 00000B9D 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   110 00000BA0 024D04              <1>     add cl, byte [rbp + dpb.bSectorsPerClusterShift]
   111                              <1>     ;Get in cl bytes per Cluster shift
   112 00000BA3 8B05(1AC30300)      <1>     mov eax, dword [currClust]  ;Get current file cluster number
   113 00000BA9 D3E0                <1>     shl eax, cl ;Get number of bytes to the current File Relative cluster
   114 00000BAB 8B0D(2EC30300)      <1>     mov ecx, dword [currByteA]
   115 00000BB1 29C1                <1>     sub ecx, eax    ;Get the difference
   116                              <1>     ;ecx now has the offset in bytes into the current cluster
   117 00000BB3 480FB605(22C30300)  <1>     movzx rax, byte [clustFact] ;Get number of sectors per cluster into al
   118 00000BBB 0FB64D02            <1>     movzx ecx, byte [rbp + dpb.bBytesPerSectorShift]
   119 00000BBF D3E0                <1>     shl eax, cl ;Get bytes per cluster in eax
   120                              <1>     ;eax now has the number of bytes in a cluster
   121 00000BC1 91                  <1>     xchg eax, ecx   ;Swap em
   122 00000BC2 31D2                <1>     xor edx, edx
   123 00000BC4 F7F1                <1>     div ecx ;Offset into cluster (bytes)/bytes in sector (bytes)
   124                              <1>     ;edx has the offset into the current sector in bytes (remainder)
   125                              <1>     ;eax has the number of sectors into the cluster in sectors (quotient)
   126 00000BC6 668915(2CC30300)    <1>     mov word [currByte], dx ;Save sector offset
   127 00000BCD 8805(23C30300)      <1>     mov byte [currSect], al ;Save cluster relative sector number
   128                              <1> ;Get Disk Relative (absolute) Sector being pointed to
   129 00000BD3 8B05(1EC30300)      <1>     mov eax, [currClustA]   ;Get current absolute cluster
   130 00000BD9 E893FCFFFF          <1>     call getStartSectorOfCluster    ;rbp points to dpb and eax has cluster num
   131                              <1>     ;rax has starting disk sector of cluster
   132 00000BDE 480FB60D(23C30300)  <1>     movzx rcx, byte [currSect]  ;Get cluster relative sector offset
   133 00000BE6 4801C8              <1>     add rax, rcx    
   134 00000BE9 488905(24C30300)    <1>     mov qword [currSectA], rax  ;Save the current disk relative sector number
   135 00000BF0 5D                  <1>     pop rbp
   136 00000BF1 5E                  <1>     pop rsi
   137 00000BF2 5A                  <1>     pop rdx
   138 00000BF3 59                  <1>     pop rcx
   139 00000BF4 58                  <1>     pop rax
   140 00000BF5 C3                  <1>     ret
   141                              <1> 
   142                              <1> setCurrentSFT:
   143                              <1> ;Set the pointer in rsi as current SFT 
   144 00000BF6 488935(08C30300)    <1>     mov qword [currentSFT], rsi
   145 00000BFD C3                  <1>     ret
   146                              <1> getCurrentSFT:
   147                              <1> ;Get the current SFT pointer in rsi
   148 00000BFE 488B35(08C30300)    <1>     mov rsi, qword [currentSFT]
   149 00000C05 C3                  <1>     ret
   150                              <1> 
   151                              <1> getSFTPtr:
   152                              <1> ;Gets the SFT pointer for a given file handle from the calling application
   153                              <1> ;On entry:
   154                              <1> ;   bx = File handle from JFT for calling application
   155                              <1> ;On exit: CF=NC, SFT found and placed in var
   156                              <1> ;         CF=CY, SFT not found, abort!
   157 00000C06 50                  <1>     push rax
   158 00000C07 53                  <1>     push rbx
   159 00000C08 56                  <1>     push rsi
   160 00000C09 57                  <1>     push rdi
   161 00000C0A 663B1D(B6C00300)    <1>     cmp bx, word [maxHndls]  ;current max number of file handles
   162 00000C11 7365                <1>     jnb .gspFail
   163 00000C13 488B35(26C10300)    <1>     mov rsi, qword [currentPSP]
   164 00000C1A 480FB7DB            <1>     movzx rbx, bx
   165 00000C1E 488D5C1E2A          <1>     lea rbx, qword [rsi + psp.jobFileTbl + rbx] 
   166 00000C23 48891D(00C30300)    <1>     mov [currentJFT], rbx   ;Save a pointer to the JFT entry
   167 00000C2A 8A1B                <1>     mov bl, byte [rbx]   ;Use jft entry to get sft num
   168 00000C2C 80FBFF              <1>     cmp bl, -1  ;Non-existant SFT reference?
   169 00000C2F 7447                <1>     je .gspFail
   170 00000C31 31C0                <1>     xor eax, eax
   171 00000C33 488B3D(88C00300)    <1>     mov rdi, qword [sftHeadPtr]
   172                              <1> .gsp0:
   173 00000C3A 66034708            <1>     add ax, word [rdi + sfth.wNumFiles]
   174 00000C3E 38D8                <1>     cmp al, bl  ;Check if the file header block contains the entry
   175 00000C40 760E                <1>     jbe .gsp1   ;IF bl is below or equal to al then it does
   176 00000C42 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of list
   177 00000C49 742D                <1>     je .gspFail   ;If we have a number greater than the last entry, fail
   178 00000C4B 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Walk the chain
   179 00000C4E EBEA                <1>     jmp short .gsp0 ;Search again
   180                              <1> .gsp1: 
   181                              <1>     ;Now point to the right entry
   182 00000C50 28D8                <1>     sub al, bl  ;Subtract the number from the total so far to get offset
   183 00000C52 0FB6C0              <1>     movzx eax, al
   184 00000C55 4881C70A000000      <1>     add rdi, sfth_size  ;Point to first file in table
   185 00000C5C 84C0                <1>     test al, al ;Check if rdi points to the first file in this block
   186 00000C5E 740B                <1>     jz .gsp12   ;Skip walking down the sft blocks
   187                              <1> .gsp11:
   188 00000C60 4881C743000000      <1>     add rdi, sft_size
   189 00000C67 FEC8                <1>     dec al
   190 00000C69 75F5                <1>     jnz .gsp11  ;Keep adding one until al is zero
   191                              <1> .gsp12:
   192 00000C6B 48893D(08C30300)    <1>     mov qword [currentSFT], rdi ;Save pointer in variable
   193 00000C72 F8                  <1>     clc
   194                              <1> .gspExit:
   195 00000C73 5F                  <1>     pop rdi
   196 00000C74 5E                  <1>     pop rsi
   197 00000C75 5B                  <1>     pop rbx
   198 00000C76 58                  <1>     pop rax
   199 00000C77 C3                  <1>     ret
   200                              <1> .gspFail:
   201 00000C78 B006                <1>     mov al, errBadHdl
   202 00000C7A F9                  <1>     stc
   203 00000C7B EBF6                <1>     jmp short .gspExit
   204                              <1> 
   205                              <1> copySFTtoSDA:
   206                              <1> ;Called with rsi pointing to SFT structure
   207                              <1> ;Prepares the scratch SFT in SDA for use
   208 00000C7D 488D3D(78C80300)    <1>     lea rdi, scratchSFT
   209 00000C84 488B35(08C30300)    <1>     mov rsi, qword [currentSFT]   ;Get current SFT
   210 00000C8B EB0E                <1>     jmp short copySScommon
   211                              <1> copySDAtoSFT:
   212 00000C8D 488D35(78C80300)    <1>     lea rsi, scratchSFT
   213 00000C94 488B3D(08C30300)    <1>     mov rdi, qword [currentSFT]   ;Get current SFT
   214                              <1> copySScommon:
   215 00000C9B 51                  <1>     push rcx
   216 00000C9C B943000000          <1>     mov ecx, sft_size
   217 00000CA1 F3A4                <1>     rep movsb   ;Copy
   218 00000CA3 59                  <1>     pop rcx
   219 00000CA4 C3                  <1>     ret
   220                              <1> 
   221                              <1> getSectorInCluster:
   222                              <1> ;Gets the sector in cluster from
    24                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    25                              <1> ;Memory related functions
    26                              <1> 
    27                              <1> ;-----------------------------------:
    28                              <1> ;  Memory related Kernel routines   :
    29                              <1> ;-----------------------------------:
    30                              <1> allocateMemory:    ;ah = 48h
    31                              <1> ;Input: ebx = Number of paragraphs requested
    32                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    33                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    34 00000CA5 31D2                <1>     xor edx, edx
    35                              <1>     ;Clear the pointers
    36 00000CA7 488915(45C10300)    <1>     mov qword [firstMCB], rdx
    37 00000CAE 488915(4DC10300)    <1>     mov qword [bestMCB], rdx
    38 00000CB5 488915(55C10300)    <1>     mov qword [lastMCB], rdx
    39 00000CBC 31ED                <1>     xor ebp, ebp    
    40 00000CBE FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    41 00000CC0 488B35(78C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    42                              <1> .walk:
    43 00000CC7 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    44 00000CCA 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    45 00000CCD 7409                <1>     je .walk1
    46 00000CCF 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    47 00000CD2 0F8565050000        <1>     jne memSysHalt
    48                              <1> .walk1:
    49                              <1>     ;Here if valid but not the last block
    50 00000CD8 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    51 00000CE0 0F8582000000        <1>     jne .walk2
    52                              <1>     ;Here we consolidate adjacent free blocks if there are any
    53                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    54                              <1>     ;End consolidation at first non free block or at last block in chain
    55 00000CE6 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    56 00000CE9 744A                <1>     je .det0    ;Determine if this block is useful
    57 00000CEB 31C9                <1>     xor ecx, ecx
    58 00000CED 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    59 00000CF0 4881C610000000      <1>     add rsi, mcb.program
    60                              <1> .cons0:
    61 00000CF7 48C1E104            <1>     shl rcx, 4
    62 00000CFB 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    63 00000CFE 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    64 00000D01 7409                <1>     je .cons1
    65 00000D03 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    66 00000D06 0F8531050000        <1>     jne memSysHalt 
    67                              <1> .cons1:
    68 00000D0C 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    69 00000D14 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    70                              <1>     ;Here rsi, points to a free block, add it to rdi
    71 00000D16 31C9                <1>     xor ecx, ecx
    72 00000D18 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    73 00000D1B 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    74 00000D21 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    75 00000D24 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    76 00000D26 31D2                <1>     xor edx, edx
    77 00000D28 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    78 00000D2B 48895608            <1>     mov qword [rsi + 8], rdx
    79 00000D2F 3C5A                <1>     cmp al, mcbMarkEnd
    80 00000D31 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    81                              <1>     ;Here we deal with if the block was the last one 
    82 00000D33 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    83                              <1> .det0:  ;Now determine if pointer in rdi is useful
    84 00000D35 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    85                              <1> ;ebx must be less than the arena size for the arena to be useful!
    86 00000D38 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    87 00000D3B 39D9                <1>     cmp ecx, ebx
    88 00000D3D 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    89 00000D3F 488935(55C10300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    90 00000D46 488B05(45C10300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    91 00000D4D 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    92 00000D50 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    93 00000D52 488935(45C10300)    <1>     mov qword [firstMCB], rsi
    94                              <1> .det1:
    95                              <1>     ;Now test for best fit.
    96 00000D59 29D9                <1>     sub ecx, ebx    ;Block - ebx
    97 00000D5B 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    98 00000D5D 7209                <1>     jb .walk2
    99 00000D5F 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   100 00000D61 488935(4DC10300)    <1>     mov qword [bestMCB], rsi
   101                              <1> .walk2:
   102 00000D68 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   103 00000D6B 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   104 00000D6D 31C9                <1>     xor ecx, ecx
   105 00000D6F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   106 00000D72 48C1E104            <1>     shl rcx, 4
   107 00000D76 4881C610000000      <1>     add rsi, mcb.program
   108 00000D7D 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   109 00000D80 E942FFFFFF          <1>     jmp .walk
   110                              <1> .allocate:
   111                              <1>     ;Allocation fails IF the pointer is the null pointer
   112 00000D85 803D(40C10300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   113 00000D8C 7261                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   114                              <1>     ;Fall thru if last fit
   115 00000D8E 488B35(55C10300)    <1>     mov rsi, qword [lastMCB]
   116 00000D95 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   117 00000D98 0F84CE000000        <1>     jz .allocFail
   118 00000D9E 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   119 00000DA0 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   120 00000DA3 31C9                <1>     xor ecx, ecx
   121 00000DA5 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   122 00000DA8 29D9                <1>     sub ecx, ebx
   123 00000DAA 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   124 00000DB0 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   125 00000DB3 48C1E104            <1>     shl rcx, 4
   126 00000DB7 4881C610000000      <1>     add rsi, mcb.program
   127 00000DBE 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   128 00000DC1 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   129 00000DC3 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   130 00000DC6 488B15(26C10300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   131 00000DCD 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   132 00000DD1 488B15(70C10300)    <1>     mov rdx, qword [oldRSP]
   133 00000DD8 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   134 00000DDF 4889F0              <1>     mov rax, rsi
   135 00000DE2 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   136 00000DE5 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   137 00000DE9 E824040000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   138 00000DEE C3                  <1>     ret
   139                              <1> .bfCommon:
   140 00000DEF 488B35(45C10300)    <1>     mov rsi, qword [firstMCB]
   141 00000DF6 803D(40C10300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   142 00000DFD 480F4435(4DC10300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   143 00000E05 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   144 00000E08 7462                <1>     jz .allocFail
   145 00000E0A 8A06                <1>     mov al, byte [rsi + mcb.marker]
   146 00000E0C C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   147 00000E0F 31C9                <1>     xor ecx, ecx
   148 00000E11 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   149 00000E14 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   150 00000E16 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   151 00000E1C 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   152 00000E1F 488B15(26C10300)    <1>     mov rdx, qword [currentPSP]
   153 00000E26 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   154 00000E2A 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   155 00000E2D 4881C610000000      <1>     add rsi, mcb.program
   156 00000E34 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   157 00000E3A 48C1E304            <1>     shl rbx, 4
   158 00000E3E 4801DE              <1>     add rsi, rbx
   159 00000E41 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   160 00000E43 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   161 00000E4B 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   162 00000E4E 488B15(70C10300)    <1>     mov rdx, qword [oldRSP]
   163 00000E55 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   164 00000E5C 4889F8              <1>     mov rax, rdi
   165 00000E5F 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   166 00000E62 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   167 00000E66 E8A7030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   168 00000E6B C3                  <1>     ret
   169                              <1> .allocFail:
   170                              <1>     ;Walk the MCB chain to determine the biggest block size
   171 00000E6C 488B35(78C00300)    <1>     mov rsi, [mcbChainPtr]
   172 00000E73 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   173                              <1> .af0:
   174 00000E75 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   175 00000E78 7409                <1>     je .af1
   176 00000E7A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   177 00000E7D 0F85BA030000        <1>     jne memSysHalt
   178                              <1> .af1:
   179 00000E83 31C9                <1>     xor ecx, ecx
   180 00000E85 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   181 00000E88 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   182 00000E90 7505                <1>     jne .af2
   183 00000E92 39D9                <1>     cmp ecx, ebx
   184 00000E94 0F47D9              <1>     cmova ebx, ecx
   185                              <1> .af2:
   186 00000E97 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   187 00000E9A 7410                <1>     je .afExit
   188 00000E9C 48C1E104            <1>     shl rcx, 4
   189 00000EA0 4881C610000000      <1>     add rsi, mcb.program
   190 00000EA7 4801CE              <1>     add rsi, rcx
   191 00000EAA EBD7                <1>     jmp short .af1
   192                              <1> .afExit:
   193 00000EAC B808000000          <1>     mov eax, errNoMem
   194 00000EB1 488B15(70C10300)    <1>     mov rdx, qword [oldRSP]
   195 00000EB8 8802                <1>     mov byte [rdx + callerFrame.rax], al
   196 00000EBA 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx
   197 00000EBD 804A5801            <1>     or byte [rdx + callerFrame.flags], 1
   198 00000EC1 C3                  <1>     ret
   199                              <1> freeMemory:        ;ah = 49h
   200                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   201                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   202                              <1> ;Always skip the first block as this is the anchor for DOS
   203 00000EC2 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   204 00000EC9 31C9                <1>     xor ecx, ecx
   205 00000ECB 488B35(78C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   206 00000ED2 4889F7              <1>     mov rdi, rsi
   207 00000ED5 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   208 00000ED8 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   209 00000EDC 4881C610000000      <1>     add rsi, mcb.program
   210 00000EE3 4801CE              <1>     add rsi, rcx    ;Go to next block
   211                              <1> .mainLoop:
   212 00000EE6 31C9                <1>     xor ecx, ecx
   213 00000EE8 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   214 00000EEB 7409                <1>     je .valid
   215 00000EED 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   216 00000EF0 0F8547030000        <1>     jne memSysHalt
   217                              <1> .valid:
   218 00000EF6 4939F0              <1>     cmp r8, rsi
   219 00000EF9 741C                <1>     je .blockFound
   220                              <1>     ;Not valid, check if last block in chain
   221 00000EFB 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   222 00000EFE 0F84A0000000        <1>     je .blockNotFound
   223 00000F04 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   224 00000F07 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   225 00000F0B 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   226 00000F12 4801CE              <1>     add rsi, rcx    ;Go to next block
   227 00000F15 EBCF                <1>     jmp short .mainLoop
   228                              <1> .blockFound:
   229                              <1>     ;If hole, error.
   230                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   231 00000F17 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   232 00000F1F 0F8488000000        <1>     je .blockHole
   233 00000F25 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   234 00000F2D 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   235 00000F35 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   236                              <1>     ;It is, let it absorb this space
   237 00000F37 31C9                <1>     xor ecx, ecx
   238 00000F39 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   239 00000F3C 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   240 00000F42 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   241                              <1>     ;Replace block marker
   242 00000F45 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   243 00000F47 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   244 00000F49 31C9                <1>     xor ecx, ecx
   245 00000F4B 48890E              <1>     mov qword [rsi], rcx
   246 00000F4E 48894E08            <1>     mov qword [rsi + 8], rcx
   247 00000F52 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   248                              <1> .blockFoundCheckFollowing:
   249                              <1>     ;First check if we are the last block in chain
   250 00000F55 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   251 00000F58 7439                <1>     je .blockFoundExit  ;If yes, exit!
   252 00000F5A 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   253 00000F5D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   254 00000F60 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   255 00000F64 4881C110000000      <1>     add rcx, mcb.program
   256 00000F6B 4801CE              <1>     add rsi, rcx    ;Go to next block
   257 00000F6E 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   258 00000F76 751B                <1>     jne .blockFoundExit ;If not free, exit
   259                              <1>     ;If free, absorb into block pointed to by rdi
   260 00000F78 31C9                <1>     xor ecx, ecx
   261 00000F7A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   262 00000F7D 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   263 00000F83 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   264                              <1>     ;Replace block marker
   265 00000F86 8A06                <1>     mov al, byte [rsi + mcb.marker]
   266 00000F88 8807                <1>     mov byte [rdi + mcb.marker], al
   267 00000F8A 31C9                <1>     xor ecx, ecx
   268 00000F8C 48890E              <1>     mov qword [rsi], rcx
   269 00000F8F 48894E08            <1>     mov qword [rsi + 8], rcx
   270                              <1> .blockFoundExit:
   271 00000F93 E87A020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   272 00000F98 488B1D(70C10300)    <1>     mov rbx, qword [oldRSP]
   273 00000F9F 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   274 00000FA3 C3                  <1>     ret
   275                              <1> .blockNotFound:
   276                              <1>     ;Set CF and error code
   277 00000FA4 C605(15C10300)08    <1>     mov byte [errorClass], eClsNotFnd   ;Block not found 
   278 00000FAB EB07                <1>     jmp short .blockError
   279                              <1> .blockHole:
   280                              <1> ;Cannot free a hole! Fail!
   281 00000FAD C605(15C10300)0A    <1>     mov byte [errorClass], eClsLocked   ;Cant free a hole
   282                              <1> .blockError:
   283 00000FB4 C605(10C10300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   284 00000FBB C605(11C10300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   285 00000FC2 66C705(12C10300)09- <1>     mov word [errorExCde], errMemAddr   ;Invalid mem addr
   285 00000FCA 00                  <1>
   286 00000FCB C605(14C10300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   287 00000FD2 B809000000          <1>     mov eax, errMemAddr
   288 00000FD7 488B1D(70C10300)    <1>     mov rbx, qword [oldRSP]
   289 00000FDE 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   290 00000FE1 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   291 00000FE5 E828020000          <1>     call verifyIntegrityOfMCBChain
   292 00000FEA C3                  <1>     ret
   293                              <1> reallocMemory:     ;ah = 4Ah
   294                              <1> ;Input: r8 = address of the block to be realloc'ed
   295                              <1> ;       ebx = How many paras this block should contain after realloc. 
   296                              <1> ;               If ebx = 0, jump to free memory
   297 00000FEB 85DB                <1>     test ebx, ebx
   298 00000FED 0F84CFFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   299 00000FF3 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   300 00000FFA 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   301 00000FFD 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   302 00001000 7409                <1>     je .ctn
   303 00001002 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   304 00001005 0F855C010000        <1>     jne .badAddrGiven
   305                              <1> .ctn:
   306                              <1>     ;Provided block is valid and not a hole
   307                              <1>     ;Check if Growth or Shrink
   308 0000100B 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   309 00001013 7498                <1>     je freeMemory.blockHole
   310 00001015 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   311 00001018 31C9                <1>     xor ecx, ecx
   312 0000101A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   313 0000101D 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   314 0000101F 0F8786000000        <1>     ja .growth
   315 00001025 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   316                              <1> ;We can always shrink
   317 0000102B 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   318 0000102D 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   319 00001033 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   320 00001036 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   321 0000103C 48C1E304            <1>     shl rbx, 4
   322 00001040 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   323 00001047 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   324 0000104A 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   325 0000104C C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   326 0000104F 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   327 00001051 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   328 00001059 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   329 0000105C 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   330 0000105E 0F84DB000000        <1>     je .exit
   331                              <1> ;Else, now see if the block following is also free and absorb it
   332 00001064 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   333 00001067 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   334 0000106B 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   335 00001072 4801CE              <1>     add rsi, rcx    ;Goto next arena
   336 00001075 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   337 00001078 7409                <1>     je .shrinkAbsorb
   338 0000107A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   339 0000107D 0F85BA010000        <1>     jne memSysHalt
   340                              <1> .shrinkAbsorb:
   341 00001083 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   342 0000108B 0F85AE000000        <1>     jne .exit
   343                              <1>     ;It is free, absorb it
   344 00001091 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   345 00001094 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   346 0000109A 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   347 0000109D 31C9                <1>     xor ecx, ecx
   348                              <1>     ;Clear absorbed MCB
   349 0000109F 48890E              <1>     mov qword [rsi], rcx
   350 000010A2 48894E08            <1>     mov qword [rsi + 8], rcx
   351 000010A6 E994000000          <1>     jmp .exit
   352                              <1> .growth:
   353                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   354 000010AB 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   355 000010AE 0F84A0000000        <1>     je .notEnuffMem
   356                              <1> ;Now check the following space is free. If not, not enuff mem err
   357 000010B4 31C9                <1>     xor ecx, ecx
   358 000010B6 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   359 000010B9 48C1E104            <1>     shl rcx, 4
   360 000010BD 4889F7              <1>     mov rdi, rsi    
   361 000010C0 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   362 000010C7 4801CE              <1>     add rsi, rcx
   363 000010CA 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   364 000010CD 7409                <1>     je .growthOK
   365 000010CF 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   366 000010D2 0F8565010000        <1>     jne memSysHalt
   367                              <1> .growthOK:
   368                              <1>     ;rdi points to block we are growing
   369 000010D8 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   370 000010E0 7572                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   371                              <1>     ;rsi must own all memory up to the next owned arena
   372 000010E2 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   373 000010E4 31C9                <1>     xor ecx, ecx
   374 000010E6 31D2                <1>     xor edx, edx
   375 000010E8 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   376 000010EB 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   377 000010F1 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   378 000010F4 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   379 000010F6 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   380 000010F8 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   381 000010FB 7759                <1>     ja .notEnuffMem1
   382 000010FD 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   383 000010FF 81FA01000000        <1>     cmp edx, 1
   384 00001105 7449                <1>     je .notEnuffMem2
   385 00001107 31C9                <1>     xor ecx, ecx
   386 00001109 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   387 0000110C 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   388 00001110 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   389 00001113 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   390 00001116 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   391 0000111D 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   392 00001121 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   393 00001124 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   394 00001128 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   395                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   396                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   397 0000112A 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   398 0000112C 7411                <1>     jz .exit
   399 0000112E 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   400 00001134 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   401 00001137 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   402                              <1> .exit:
   403 0000113F E8CE000000          <1>     call verifyIntegrityOfMCBChain
   404 00001144 488B1D(70C10300)    <1>     mov rbx, qword [oldRSP]
   405 0000114B 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   406 0000114F C3                  <1>     ret
   407                              <1> .notEnuffMem2:
   408 00001150 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   409 00001152 EB02                <1>     jmp short .notEnuffMem1
   410                              <1> .notEnuffMem:
   411 00001154 31DB                <1>     xor ebx, ebx    ;No space to grow
   412                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   413 00001156 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   414 0000115B 488B15(70C10300)    <1>     mov rdx, qword [oldRSP]
   415 00001162 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   416 00001165 EB0C                <1>     jmp short .bad
   417                              <1> .badAddrGiven:
   418 00001167 488B15(70C10300)    <1>     mov rdx, qword [oldRSP]
   419 0000116E B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   420                              <1> .bad:
   421 00001173 C605(10C10300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   422 0000117A C605(11C10300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   423 00001181 668905(12C10300)    <1>     mov word [errorExCde], ax   ;Error code
   424 00001188 C605(14C10300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   425 0000118F 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save this word on stack
   426 00001192 804A5801            <1>     or byte [rdx + callerFrame.flags], 1    ;Set Carry flag on
   427 00001196 E877000000          <1>     call verifyIntegrityOfMCBChain
   428 0000119B C3                  <1>     ret
   429                              <1> getsetMallocStrat: ;ah = 58h
   430 0000119C 84C0                <1>     test al, al
   431 0000119E 741F                <1>     jz .get
   432 000011A0 3C02                <1>     cmp al, 2
   433 000011A2 7337                <1>     jae .bad
   434                              <1> ;Set here
   435 000011A4 488B1D(70C10300)    <1>     mov rbx, qword [oldRSP]
   436 000011AB 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   437 000011AF 8805(40C10300)      <1>     mov byte [allocStrat], al   ;Only save low word
   438 000011B5 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   439 000011B9 E854000000          <1>     call verifyIntegrityOfMCBChain
   440 000011BE C3                  <1>     ret
   441                              <1> .get:
   442 000011BF 488B1D(70C10300)    <1>     mov rbx, qword [oldRSP]
   443 000011C6 31C0                <1>     xor eax, eax
   444 000011C8 8A05(40C10300)      <1>     mov al, byte [allocStrat]
   445 000011CE 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   446 000011D1 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   447 000011D5 E838000000          <1>     call verifyIntegrityOfMCBChain
   448 000011DA C3                  <1>     ret
   449                              <1> .bad:
   450 000011DB C605(10C10300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   451 000011E2 C605(11C10300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   452 000011E9 66C705(12C10300)01- <1>     mov word [errorExCde], errInvFnc   ;Invalid function number addr
   452 000011F1 00                  <1>
   453 000011F2 C605(14C10300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   454 000011F9 B801000000          <1>     mov eax, errInvFnc
   455 000011FE 488B1D(70C10300)    <1>     mov rbx, qword [oldRSP]
   456 00001205 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   457 00001208 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   458 0000120C E801000000          <1>     call verifyIntegrityOfMCBChain
   459 00001211 C3                  <1>     ret
   460                              <1> ;-----------------------------------:
   461                              <1> ;      Memory related routines      :
   462                              <1> ;-----------------------------------:
   463                              <1> verifyIntegrityOfMCBChain:
   464 00001212 50                  <1>     push rax
   465 00001213 53                  <1>     push rbx
   466 00001214 488B1D(78C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   467                              <1> .ok:
   468 0000121B 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   469 0000121E 7408                <1>     je .ok1
   470 00001220 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   471 00001223 7518                <1>     jne memSysHalt    ;It was not M or Z, fail violently
   472                              <1> .exit:
   473 00001225 5B                  <1>     pop rbx
   474 00001226 58                  <1>     pop rax
   475 00001227 C3                  <1>     ret ;We have reached the end of the chain, return all good!
   476                              <1> .ok1:
   477 00001228 31C0                <1>     xor eax, eax
   478 0000122A 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   479 0000122D 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   480 00001231 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   481 00001238 4801C3              <1>     add rbx, rax
   482 0000123B EBDE                <1>     jmp short .ok
   483                              <1> memSysHalt:
   484                              <1> ;Only arrive here if the integrity of the system is not verified
   485                              <1> ;Lock the system
   486 0000123D C605(10C10300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   487 00001244 C605(11C10300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   488 0000124B 66C705(12C10300)07- <1>     mov word [errorExCde], errMCBbad   ;Destroyed MCB chain
   488 00001253 00                  <1>
   489 00001254 C605(14C10300)05    <1>     mov byte [errorAction], eActKil ;Abort the system
   490 0000125B 488D150E000000      <1>     lea rdx, .sysHltString
   491 00001262 B409                <1>     mov ah, 09h
   492 00001264 CD41                <1>     int 41h
   493                              <1>     ;Only halt IRQ's in production!
   494                              <1>     %if !DEBUG
   495 00001266 FA                  <1>     cli ;Halt interrupts
   496 00001267 B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
   497 00001269 E6A1                <1>     out 0A1h, al
   498 0000126B E621                <1>     out 021h, al
   499                              <1>     %endif
   500 0000126D F4                  <1>     hlt             ;Halt the system
   501 0000126E EBFD                <1>     jmp short $ - 1 ;Go back far enough to capture the hlt
   502 00001270 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
   502 00001279 6C6F636174696F6E20- <1>
   502 00001282 6572726F720D0A      <1>
   503 00001289 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
   503 00001292 616420434F4D4D414E- <1>
   503 0000129B 442C2073797374656D- <1>
   503 000012A4 2068616C74656424    <1>
    25                                  %include "./Source/Kernel/MemExec/execTerm.asm"
    26                              <1> ;EXEC and all default terminates are here
    27                              <1> 
    28                              <1> ;========================
    29                              <1> ;   Interrupt handlers
    30                              <1> ;========================
    31                              <1> terminateProcess:   ;Int 40h
    32 000012AC 48CF                <1>     iretq
    33                              <1> terminateRes:       ;Int 47h
    34 000012AE 48CF                <1>     iretq
    35                              <1> ;========================
    36                              <1> ;    Int 21h functions
    37                              <1> ;========================
    38                              <1> simpleTerminate:   ;ah = 00h
    39 000012B0 C3                  <1>     ret
    40                              <1> terminateStayRes:  ;ah = 31h
    41 000012B1 C3                  <1>     ret
    42                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    43 000012B2 C3                  <1>     ret
    44                              <1> terminateClean:    ;ah = 4Ch, EXIT
    45 000012B3 C3                  <1>     ret
    26                                  %include "./Source/Kernel/Local/Local.asm"
    27                              <1> ;Localisation based functions live here
    28                              <1> 
    29                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    30                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    31                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    32                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    33 000012B4 C3                  <1>     ret
    27                                  %include "./Source/Kernel/ctrlc.asm"
    28                              <1> criticalDOSError:
    29                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    30                              <1> ; to the critical error handler.
    31                              <1> ; Called with ax, di and rsi set as required by Int 44h (caller decides)
    32                              <1> ;               AH = Critical Error Bitfield
    33                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    34                              <1> ;               Bit 6 - Reserved
    35                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    36                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    37                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    38                              <1> ;               Bits [2-1] = Affected Disk Error
    39                              <1> ;                     0 0   DOS area
    40                              <1> ;                     0 1   FAT area
    41                              <1> ;                     1 0   Directory area
    42                              <1> ;                     1 1   Data area
    43                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    44                              <1> ;               AL  = Failing drive number if AH[7] = 0
    45                              <1> ;               DIL = Error code for errorMsg
    46                              <1> ;               RSI = EA of Device Header for which device the error occured
    47                              <1> ;Return:
    48                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    49                              <1> ;                  = 1 - Retry the Operation    (Retry)
    50                              <1> ;                  = 2 - Terminate the Program  (Abort)
    51                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    52                              <1> ; Return response from int 44h in al
    53 000012B5 FA                  <1>     cli ;Disable Interrupts
    54 000012B6 C605(0EC10300)01    <1>     mov byte [critErrFlag], 1   ;Set flag for critical error
    55 000012BD 488925(5DC10300)    <1>     mov qword [xInt44hRSP], rsp
    56 000012C4 488B25(70C10300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    57 000012CB CD44                <1>     int 44h ;Call critical error handler
    58 000012CD 488B25(5DC10300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    59 000012D4 C605(0EC10300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    60 000012DB FB                  <1>     sti ;Reenable Interrupts
    61 000012DC C3                  <1>     ret
    62                              <1> 
    63                              <1> ctrlBreakHdlr:
    64                              <1> ;Handles a control break, juggles stacks and enters int 41h 
    65 000012DD FA                  <1> 	cli
    66 000012DE 488B25(70C10300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
    67 000012E5 E8EF040000          <1> 	call dosPopRegs ;Get user state back
    68 000012EA 488925(36C10300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
    69 000012F1 F8                  <1>     clc
    70 000012F2 CD43                <1>     int 43h ;Call critical error handler
    71 000012F4 FA                  <1>     cli ;Clear interrupts again
    72 000012F5 488905(06C10300)    <1>     mov qword [oldRAX], rax ;Save rax
    73 000012FC 9C                  <1>     pushfq  ;Get flags in rax
    74 000012FD 58                  <1>     pop rax 
    75 000012FE 483B25(36C10300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
    76 00001305 750C                <1>     jne .checkCF
    77                              <1> .returnToDOS:
    78 00001307 488B05(06C10300)    <1>     mov rax, qword [oldRAX]
    79 0000130E E988030000          <1>     jmp functionDispatch    ;Goto int 41h
    80                              <1> .checkCF:
    81 00001313 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
    82 0000131A A801                <1>     test al, 1  ;CF set?
    83 0000131C 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
    84 0000131E B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
    85 00001323 C605(81C10300)FF    <1>     mov byte [critExit], -1  ;CTRL+BREAK termination
    86 0000132A E96C030000          <1>     jmp functionDispatch
    87                              <1> 
    28                                  %include "./Source/Kernel/dosPrim.asm"
    29                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    30                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    31                              <1> 
    32                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    33                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    34                              <1> ;       rbx = Ptr to the request header for the driver call!
    35 0000132F E8E7040000          <1>     call dosCrit2Enter
    36 00001334 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    37 00001337 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    38 0000133A E8E6040000          <1>     call dosCrit2Exit
    39 0000133F C3                  <1>     ret
    40                              <1> 
    41                              <1> setupPhysicalDiskRequest:
    42                              <1> ;Ensure that al has valid disk number
    43                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    44                              <1> ;If CF=NC, rbp = DPB ptr.
    45                              <1> ;If CF=CY, exit error
    46 00001340 84C0                <1>     test al, al
    47 00001342 723F                <1>     jc .diskError
    48 00001344 3A05(B2C00300)      <1>     cmp al, byte [lastdrvNum]
    49 0000134A 7337                <1>     jae .diskError
    50 0000134C 50                  <1>     push rax
    51 0000134D FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    52 0000134F E80D030000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    53 00001354 58                  <1>     pop rax
    54 00001355 7235                <1>     jc .error
    55 00001357 8805(94C20300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    56 0000135D 488B2D(9DC20300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    57 00001364 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsNetDrive   ;On a network?
    58 0000136C 750A                <1>     jnz .netError
    59 0000136E 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    60 00001372 E88C020000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    61 00001377 C3                  <1>     ret
    62                              <1> .netError:
    63 00001378 66C705(12C10300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    63 00001380 00                  <1>
    64 00001381 EB09                <1>     jmp short .error
    65                              <1> .diskError:
    66 00001383 66C705(12C10300)0F- <1>     mov word [errorExCde], errBadDrv
    66 0000138B 00                  <1>
    67                              <1> .error:
    68 0000138C C605(11C10300)02    <1>     mov byte [errorLocus], eLocDsk
    69 00001393 C605(14C10300)07    <1>     mov byte [errorAction], eActRetUsr
    70 0000139A C605(15C10300)09    <1>     mov byte [errorClass], eClsBadFmt
    71 000013A1 F9                  <1>     stc
    72 000013A2 C3                  <1>     ret
    73                              <1> 
    74                              <1> setupAbsDiskEntry:
    75                              <1> ;Prepares to sets up the CDS and DPB for the request
    76 000013A3 FE05(0FC10300)      <1>     inc byte [inDOS]
    77 000013A9 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    78 000013AA FC                  <1>     cld ;Set string ops in the right direction
    79 000013AB E890FFFFFF          <1>     call setupPhysicalDiskRequest
    80 000013B0 7220                <1>     jc .exit    ;Error exit
    81 000013B2 C64530FF            <1>     mov byte [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    82 000013B6 56                  <1>     push rsi
    83 000013B7 50                  <1>     push rax
    84 000013B8 488D35(88C10300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    85 000013BF 8806                <1>     mov byte [rsi], al  ;Construct a path
    86 000013C1 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    87 000013C4 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
    88 000013C8 F8                  <1>     clc
    89                              <1> ;++++++++++++++++++++++++++++
    90                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    91                              <1> ;Entered with path in rsi (ah=03h)
    92 000013C9 B800030000          <1>     mov eax, 0300h  
    93 000013CE CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
    94                              <1> ;++++++++++++++++++++++++++++
    95 000013D0 58                  <1>     pop rax
    96 000013D1 5E                  <1>     pop rsi
    97                              <1> .exit:
    98 000013D2 72A4                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
    99 000013D4 C3                  <1>     ret
   100                              <1> 
   101                              <1> absDiskWrite:       ;Int 46h
   102                              <1> ;al = Drive number
   103                              <1> ;rbx = Memory Buffer address to read from
   104                              <1> ;ecx = Number of sectors to write
   105                              <1> ;rdx = Start LBA to write to
   106 000013D5 FA                  <1>     cli
   107 000013D6 488925(70C10300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   108 000013DD 488D25(33D50300)    <1>     lea rsp, DiskStakTop
   109 000013E4 55                  <1>     push rbp
   110 000013E5 E8B9FFFFFF          <1>     call setupAbsDiskEntry
   111 000013EA 7277                <1>     jc absDiskExit
   112 000013EC E8CF010000          <1>     call diskWriteSetup
   113 000013F1 EB1C                <1>     jmp short absDiskReadWriteCommon
   114                              <1> absDiskRead:        ;Int 45h
   115                              <1> ;al = Drive number
   116                              <1> ;rbx = Memory Buffer address to write to
   117                              <1> ;ecx = Number of sectors to read
   118                              <1> ;rdx = Start LBA to read from
   119 000013F3 FA                  <1>     cli 
   120 000013F4 488925(70C10300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   121 000013FB 488D25(33D50300)    <1>     lea rsp, DiskStakTop
   122 00001402 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   123 00001403 E89BFFFFFF          <1>     call setupAbsDiskEntry
   124 00001408 7259                <1>     jc absDiskExit
   125 0000140A E8BC010000          <1>     call diskReadSetup
   126                              <1> absDiskReadWriteCommon:
   127                              <1> ;Entered with the appropriate function number in ah
   128 0000140F 53                  <1>     push rbx
   129 00001410 56                  <1>     push rsi
   130                              <1>     ;Prepare for goDriver now
   131 00001411 488B751A            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   132 00001415 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr
   133 0000141C E80EFFFFFF          <1>     call goDriver   ;Make request
   134 00001421 5E                  <1>     pop rsi
   135 00001422 5B                  <1>     pop rbx
   136 00001423 50                  <1>     push rax
   137 00001424 51                  <1>     push rcx
   138 00001425 8B05(64C00300)      <1>     mov eax, dword [diskReqHdr + ioReqPkt.tfrlen]   ;Get actual number transferred
   139 0000142B 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   140 0000142D 0FB705(51C00300)    <1>     movzx eax, word [diskReqHdr + ioReqPkt.status]
   141 00001434 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   142 00001438 59                  <1>     pop rcx
   143 00001439 58                  <1>     pop rax
   144 0000143A 7427                <1>     jz absDiskExit  ;Skip error code checking
   145 0000143C 8A05(51C00300)      <1>     mov al, byte [diskReqHdr + ioReqPkt.status] ;Get low byte into al
   146                              <1>     ;DOS uses the following pairs in a table
   147                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   148 00001442 B480                <1>     mov ah, 80h ;Attachment failure
   149 00001444 3C0C                <1>     cmp al, 0Ch ;Gen error
   150 00001446 741A                <1>     je .absExit
   151 00001448 B440                <1>     mov ah, 40h ;Seek error
   152 0000144A 3C06                <1>     cmp al, 06h
   153 0000144C 7414                <1>     je .absExit
   154 0000144E B408                <1>     mov ah, 08h ;Bad CRC
   155 00001450 3C04                <1>     cmp al, 04h
   156 00001452 740E                <1>     je .absExit
   157 00001454 B404                <1>     mov ah, 04h ;Sector not found
   158 00001456 3C08                <1>     cmp al, 08h
   159 00001458 7408                <1>     je .absExit
   160 0000145A 30E4                <1>     xor ah, ah  ;Write Protect Violation
   161 0000145C 84C0                <1>     test al, al
   162 0000145E 7402                <1>     je .absExit
   163 00001460 B402                <1>     mov ah, 02h ;Other Error
   164                              <1> .absExit:
   165 00001462 F9                  <1>     stc
   166                              <1> absDiskExit:
   167 00001463 5D                  <1>     pop rbp
   168 00001464 FA                  <1>     cli
   169 00001465 FE0D(0FC10300)      <1>     dec byte [inDOS]
   170 0000146B 488B25(70C10300)    <1>     mov rsp, qword [oldRSP]
   171 00001472 FB                  <1>     sti ;Reenable interrupts
   172 00001473 C3                  <1>     ret ;Return from interrupt without popping flags!
   173                              <1>     
   174                              <1> 
   175                              <1> getDiskDPB:
   176                              <1> ;Gets the disk DPB if the Disk is physical
   177                              <1> ;Otherwise will return a pointer to the drive DPB
   178                              <1> ;Called with rdi pointing to the CDS
   179                              <1> ;CF=NC => RBP=DPBptr, CF=CY => Error exit
   180 00001474 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   181 00001478 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   182 0000147B 8805(94C20300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   183 00001481 E87D010000          <1>     call setWorkingDPB
   184 00001486 57                  <1>     push rdi    ;Save the CDS ptr
   185 00001487 E838000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   186 0000148C 5F                  <1>     pop rdi
   187 0000148D 7234                <1>     jc .exitBad ;Preserve CF
   188 0000148F 7531                <1>     jnz .exit
   189                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   190 00001491 8A0D(B2C00300)      <1>     mov cl, byte [lastdrvNum]
   191 00001497 4831C0              <1>     xor rax, rax
   192 0000149A 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   193 0000149D 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   194 000014A1 488B3D(AAC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   195                              <1> .checkCDS:
   196 000014A8 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   197 000014AC 7509                <1>     jne .next
   198 000014AE 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   199 000014B2 7403                <1>     jz .next    ;IF yes, skip it
   200 000014B4 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   201                              <1> .next:
   202 000014B7 4881C75B000000      <1>     add rdi, cds_size
   203 000014BE FEC9                <1>     dec cl
   204 000014C0 75E6                <1>     jnz .checkCDS
   205                              <1> .exit:
   206 000014C2 F8                  <1>     clc
   207                              <1> .exitBad:
   208 000014C3 C3                  <1>     ret
   209                              <1> 
   210                              <1> ensureDiskValid:
   211                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   212                              <1> ;On entry: rbp = DPB
   213                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   214                              <1> ;         ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   215                              <1> .medChk:
   216 000014C4 E898000000          <1>     call diskDrvMedCheck    ;Prepare disk io packet for media check
   217 000014C9 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr
   218 000014D0 488B751A            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   219 000014D4 E856FEFFFF          <1>     call goDriver   ;Request!
   220 000014D9 480FB73D(51C00300)  <1>     movzx rdi, word [diskReqHdr + mediaCheckReqPkt.status]
   221 000014E1 F7C700800000        <1>     test edi, drvErrStatus
   222 000014E7 7576                <1>     jnz diskDrvCritErr
   223 000014E9 8A05(94C20300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   224 000014EF 30E4                <1>     xor ah, ah
   225 000014F1 866523              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   226 000014F4 84630E              <1>     test byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   227 000014F7 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   228 000014F9 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   229 000014FB E88DF0FFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   230 00001500 F5                  <1>     cmc ;Compliment the carry flag to ensure we return CF=NC if dirty buffer found
   231 00001501 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   232                              <1>     ;ZF=NZ from test for dirty buffers
   233                              <1> .exit:
   234 00001503 C3                  <1>     ret
   235                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   236 00001504 C605(3BD50300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   237 0000150B E8A1F0FFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   238                              <1>     ;Get a buffer to read BPB into in rdi
   239 00001510 B101                <1>     mov cl, dosBuffer
   240 00001512 E8DDF0FFFF          <1>     call getBuffer ;Get a disk buffer
   241 00001517 7246                <1>     jc diskDrvCritErr  ;Critical error if CF is set
   242 00001519 4889DF              <1>     mov rdi, rbx
   243 0000151C E86C000000          <1>     call diskDrvGetBPB  ;Prepare to get BPB
   244 00001521 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr
   245 00001528 488B751A            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   246 0000152C E8FEFDFFFF          <1>     call goDriver   ;Request!
   247 00001531 480FB73D(51C00300)  <1>     movzx rdi, word [diskReqHdr + bpbBuildReqPkt.status]
   248 00001539 F7C700800000        <1>     test edi, drvErrStatus
   249 0000153F 751E                <1>     jnz diskDrvCritErr
   250                              <1>     ;Now rebuild the dpb fields for this drive
   251 00001541 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   252 00001545 E8E4050000          <1>     call createDPB  
   253                              <1>     ;Adjust the buffer header information
   254 0000154A 8B4512              <1>     mov eax, dword [rbp + dpb.dFATlength]
   255 0000154D 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   256 00001550 8A4507              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   257 00001553 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   258 00001556 30E4                <1>     xor ah, ah
   259 00001558 8825(3BD50300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   260 0000155E C3                  <1>     ret
   261                              <1> 
   262                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   263                              <1> ;           Primitive Driver Requests
   264                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   265                              <1> ;First are Disk requests, then Char device requests
   266                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   267                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   268                              <1> 
   269                              <1> diskDrvCritErr:
   270                              <1> ;Critical Errors fall through here
   271 0000155F F9                  <1>     stc
   272 00001560 C3                  <1>     ret
   273                              <1> 
   274                              <1> diskDrvMedCheck:
   275                              <1> ;Prepare the diskIO packet for mediacheck
   276                              <1> ;rbp has DPB pointer for device to check media on
   277 00001561 50                  <1>     push rax
   278 00001562 C605(4EC00300)17    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   279 00001569 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   280 0000156C 8805(5BC00300)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.medesc], al
   281 00001572 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   282 00001575 8805(4FC00300)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.unitnm], al
   283 0000157B C605(50C00300)01    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   284 00001582 66C705(51C00300)00- <1>     mov word [diskReqHdr + mediaCheckReqPkt.status], 0
   284 0000158A 00                  <1>
   285                              <1> diskDrvCommonExit:
   286 0000158B 58                  <1>     pop rax
   287 0000158C C3                  <1>     ret
   288                              <1> 
   289                              <1> diskDrvGetBPB:
   290                              <1> ;rbp has DPB pointer for device
   291                              <1> ;rdi has sector buffer pointer for transfer
   292 0000158D 50                  <1>     push rax
   293 0000158E 48893D(5CC00300)    <1>     mov qword [diskReqHdr + bpbBuildReqPkt.bufptr], rdi
   294 00001595 C605(4EC00300)1E    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   295 0000159C 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   296 0000159F 8805(5BC00300)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.medesc], al
   297 000015A5 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   298 000015A8 8805(4FC00300)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.unitnm], al
   299 000015AE C605(50C00300)02    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   300 000015B5 66C705(51C00300)00- <1>     mov word [diskReqHdr + bpbBuildReqPkt.status], 0
   300 000015BD 00                  <1>
   301 000015BE EBCB                <1>     jmp short diskDrvCommonExit
   302                              <1> 
   303                              <1> diskWriteSetup:
   304 000015C0 50                  <1>     push rax
   305 000015C1 B408                <1>     mov ah, drvWRITE    ;Command code
   306 000015C3 0225(44C10300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   307 000015C9 EB02                <1>     jmp short diskRWCommon
   308                              <1> diskReadSetup:
   309 000015CB B404                <1>     mov ah, drvREAD
   310                              <1> diskRWCommon:
   311                              <1> ;Sets up the IO request packet with:
   312                              <1> ; rbp = DPB ptr
   313                              <1> ; rbx = Data storage buffer ptr
   314                              <1> ; ecx = Number of sectors to transfer
   315                              <1> ; rdx = Starting sector to read from
   316                              <1> ; All regs preserved
   317 000015CD B02A                <1>     mov al, ioReqPkt_size
   318 000015CF 48891D(5CC00300)    <1>     mov qword [diskReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   319 000015D6 890D(64C00300)      <1>     mov dword [diskReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors
   320 000015DC 488915(68C00300)    <1>     mov qword [diskReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   321 000015E3 C605(4EC00300)2A    <1>     mov byte [diskReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   322 000015EA 25FFFF0000          <1>     and eax, 0000FFFFh  ;Clear the upper word (status word)
   323 000015EF 8905(4FC00300)      <1>     mov dword [diskReqHdr + ioReqPkt.unitnm], eax
   324 000015F5 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   325 000015F8 8805(68C00300)      <1>     mov byte [diskReqHdr + ioReqPkt.strtsc], al ;Store medesc!
   326 000015FE E988FFFFFF          <1>     jmp diskDrvCommonExit   ;Jump popping rax
    29                                  %include "./Source/Kernel/dosUtils.asm"
    30                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    31                              <1> 
    32                              <1> ;Basic Drive related Utilities
    33                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    34                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    35                              <1> ; that gets set up)
    36                              <1> 
    37                              <1> setWorkingDPB:
    38                              <1> ;Gets dpb in rbp and saves to curDrvDPB (working dpb)
    39 00001603 48892D(95C20300)    <1>     mov qword [workingDPB], rbp
    40 0000160A C3                  <1>     ret
    41                              <1> 
    42                              <1> getUserRegs:   ;Int 4Fh AX=1218h
    43                              <1> ;Returns ptr to user regs in rsi
    44 0000160B 488B35(70C10300)    <1>     mov rsi, qword [oldRSP]
    45 00001612 C3                  <1>     ret
    46                              <1> 
    47                              <1> walkCDSarray:     ;Int 4Fh AX=1217h
    48                              <1>     ;Gets the CDS for the current drive in al
    49                              <1>     ;Input: al = Drive number, 0 = A ...
    50                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
    51                              <1>     ;        CF=CY => al not valid
    52 00001613 3A05(B2C00300)      <1>     cmp al, byte [lastdrvNum]
    53 00001619 7202                <1>     jb .ctn
    54 0000161B F9                  <1>     stc 
    55 0000161C C3                  <1>     ret
    56                              <1> .ctn:
    57 0000161D 50                  <1>     push rax
    58 0000161E 52                  <1>     push rdx
    59 0000161F 0FB6C0              <1>     movzx eax, al
    60 00001622 48BE5B000000000000- <1>     mov rsi, cds_size
    60 0000162B 00                  <1>
    61 0000162C 31D2                <1>     xor edx, edx
    62 0000162E F7E6                <1>     mul esi ;Get the multiples of CDS's to skip
    63 00001630 488D05(AAC00300)    <1>     lea rax, qword [cdsHeadPtr] ;Get the first CDS
    64 00001637 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
    65 0000163A 488935(9DC20300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
    66 00001641 5A                  <1>     pop rdx
    67 00001642 58                  <1>     pop rax
    68 00001643 F8                  <1>     clc
    69 00001644 C3                  <1>     ret
    70                              <1> 
    71                              <1> walkDPBchain:
    72                              <1> ;Called with al = 0 based drive number
    73                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    74 00001645 488B35(88C00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    75                              <1> .walk:
    76 0000164C 4881FEFFFFFFFF      <1>     cmp rsi, -1
    77 00001653 740A                <1>     je .exitBad
    78 00001655 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    79 00001657 7407                <1>     je .exit    ;Drive found
    80 00001659 488B7624            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    81 0000165D EBED                <1>     jmp short .walk
    82                              <1> .exitBad:
    83 0000165F F9                  <1>     stc
    84                              <1> .exit:
    85                              <1>     %if DEBUG
    86                              <1>     ;Print DPB 
    87                              <1>     debugEnterM
    88                              <1>     mov r8, rbp ;Save dpb pointer
    89                              <1>     lea rbp, .l0000
    90                              <1>     call debPrintNullString
    91                              <1>     mov rbp, r8
    92                              <1>     call debDPBptr
    93                              <1>     jmp short .l0001
    94                              <1> .l0000 db "Internal call to find DPB",0Ah,0Dh,0
    95                              <1> .l0001:
    96                              <1>     debugExitM
    97                              <1>     %endif
    98 00001660 C3                  <1>     ret
    99                              <1> 
   100                              <1> getCDS:
   101                              <1> ;Gets the device DPB and saves it in the DOS variable
   102                              <1> ;Input: al = 1 based drive number
   103                              <1> ;Sets workingCDS var with the CDS for the device. 
   104                              <1> ;   If device on a network, sets CF (currently error)
   105 00001661 84C0                <1>     test al, al
   106 00001663 7508                <1>     jnz .skip
   107 00001665 8A05(41C10300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   108 0000166B FEC0                <1>     inc al
   109                              <1> .skip:
   110 0000166D FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   111 0000166F 56                  <1>     push rsi
   112 00001670 C605(11C10300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   113 00001677 F605(80C10300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   114 0000167E 7402                <1>     jz .physDrive
   115                              <1>     ;Invalid invokation (21/5D00 invokation not yet supported)
   116                              <1>     ;If returned with CF=CY, consider it an error for now
   117                              <1>     ;Eventually, here we will build a fresh DPB for the network drive
   118 00001680 EB16                <1>     jmp short .exitBad1
   119                              <1> .physDrive:
   120 00001682 E88CFFFFFF          <1>     call walkCDSarray ;Get CDS pointer in RSI and in curCDSPtr
   121 00001687 7208                <1>     jc .exitBad
   122 00001689 66F746430040        <1>     test word [rsi + cds.wFlags], cdsPhysDrive
   123 0000168F 7508                <1>     jnz .exitOk ;Exit with flag cleared
   124                              <1>     ;Else Return to unknown error locus
   125                              <1> .exitBad:
   126 00001691 C605(11C10300)01    <1>     mov byte [errorLocus], eLocUnk
   127                              <1> .exitBad1:
   128 00001698 F9                  <1>     stc
   129                              <1> .exitOk:
   130 00001699 5E                  <1>     pop rsi
   131 0000169A C3                  <1>     ret
    30                                  %include "./Source/Kernel/dosMain.asm"
    31                              <1> ;-----------------------------------:
    32                              <1> ;        Main Kernel dispatch       :
    33                              <1> ;            and routines           :
    34                              <1> ;-----------------------------------:
    35                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    36                              <1> ;ah = Function number, all other registers have various meanings
    37                              <1>  %if DEBUG
    38                              <1>     ;Entry function
    39                              <1>     debugEnterM
    40                              <1>     lea rbp, .l0000
    41                              <1>     call debPrintNullString
    42                              <1>     call debPrintFunctionName
    43                              <1>     jmp short .l0001
    44                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    45                              <1> .l0001:    
    46                              <1>     debugExitM
    47                              <1>     %endif
    48 0000169B FA                  <1>     cli ;Halt external interrupts
    49 0000169C FC                  <1>     cld ;Ensure all string ops occur in the right direction
    50 0000169D 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    51 000016A0 0F832F010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    52                              <1>     ;Cherry pick functions
    53 000016A6 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    54 000016A9 722C                <1>     jb .fsbegin   ;If below skip these checks
    55 000016AB 0F847E010000        <1>     je ctrlBreakCheck
    56 000016B1 80FC64              <1>     cmp ah, 64h
    57 000016B4 0F84BE010000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    58 000016BA 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    59 000016BC 80FC51              <1>     cmp ah, 51h
    60 000016BF 0F84A1010000        <1>     je getCurrProcessID    ;This and below are exactly the same
    61 000016C5 80FC62              <1>     cmp ah, 62h
    62 000016C8 0F84A1010000        <1>     je getPSPaddr          ;Calls the above function
    63 000016CE 80FC50              <1>     cmp ah, 50h
    64 000016D1 0F8486010000        <1>     je setCurrProcessID
    65                              <1> .fsbegin:
    66 000016D7 E814010000          <1>     call dosPushRegs ;Push the usual prologue registers
    67 000016DC 488B05(70C10300)    <1>     mov rax, qword [oldRSP]
    68 000016E3 488905(68C10300)    <1>     mov qword [oldoldRSP], rax
    69 000016EA FE05(0FC10300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    70 000016F0 488925(70C10300)    <1>     mov qword [oldRSP], rsp
    71                              <1> ;Network related variable resetting
    72 000016F7 C605(80C10300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    73                              <1> ;Here, we want to save oldRSP in the callers PSP
    74 000016FE 803D(0FC10300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    75 00001705 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    76 00001707 488B05(26C10300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    77 0000170E 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    78                              <1> .fsb1:
    79 00001712 58                  <1>     pop rax     ;Get old rax back
    80 00001713 50                  <1>     push rax    ;and push it back onto the stack
    81 00001714 488D25(70C80300)    <1>     lea rsp, critStakTop
    82 0000171B FB                  <1>     sti         ;Reenable interrupts
    83                              <1> 
    84 0000171C C605(67C10300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    85 00001723 48891D(78C10300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    86 0000172A 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
    87 0000172D D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    88 0000172F 50                  <1>     push rax        ;Push rax onto the stack
    89 00001730 488D05E4E8FFFF      <1>     lea rax, kDispTbl
    90 00001737 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    91 0000173A 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    92 0000173E 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    93 00001741 58                  <1>     pop rax
    94                              <1> 
    95 00001742 84E4                <1>     test ah, ah     ;Simple Terminate function?
    96 00001744 741C                <1>     jz .fddiskOp
    97 00001746 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    98 00001749 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
    99 0000174B 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   100 0000174E 7712                <1>     ja .fddiskOp
   101                              <1> ;Char operations here
   102 00001750 F605(0EC10300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   103 00001757 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   104 00001759 488D25(F3CE0300)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   105 00001760 EB40                <1>     jmp short .fdGoToFunction
   106                              <1> .fddiskOp:
   107                              <1>     ;Disk operations go here
   108                              <1>     ;Save rax on entry to a disk funciton
   109 00001762 488905(06C10300)    <1>     mov qword [oldRAX], rax
   110                              <1>     ;Clear up error info
   111 00001769 C605(11C10300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   112 00001770 C605(0EC10300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   113 00001777 C605(10C10300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   114                              <1> 
   115 0000177E 50                  <1>     push rax
   116 0000177F B482                <1>     mov ah, 82h ;Cancel all critical section!
   117 00001781 CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   118 00001783 58                  <1>     pop rax
   119                              <1> 
   120 00001784 C605(67C10300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   121 0000178B 488D25(33D50300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   122 00001792 F605(43C10300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   123 00001799 7407                <1>     jz .fdGoToFunction
   124                              <1> ; HANDLE CTRL+BREAK HERE!
   125 0000179B 50                  <1>     push rax
   126 0000179C E8F8F2FFFF          <1>     call checkBreakOnCon    ; Check for a ^C in the CON buffer
   127 000017A1 58                  <1>     pop rax
   128                              <1> .fdGoToFunction:
   129 000017A2 48871D(78C10300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   130                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   131                              <1>     ;
   132                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   133                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   134                              <1>     ;
   135                              <1>     %if DEBUG && REGS
   136                              <1>     ;Print stack if necessary function
   137                              <1>     debugEnterM
   138                              <1>     call debPrintDOSStack
   139                              <1>     debugExitM
   140                              <1>     %endif
   141 000017A9 FF15(78C10300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   142                              <1>     %if DEBUG
   143                              <1>     ;Entry function
   144                              <1>     debugEnterM
   145                              <1>     lea rbp, .l0002
   146                              <1>     call debPrintNullString
   147                              <1>     jmp short .l0003
   148                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   149                              <1> .l0003:    
   150                              <1>     debugExitM
   151                              <1>     %endif
   152                              <1>     %if DEBUG && REGS
   153                              <1>     ;Exit function
   154                              <1>     debugEnterM
   155                              <1>     call debPrintDOSStack
   156                              <1>     debugExitM
   157                              <1>     %endif
   158                              <1> .fdExit:
   159 000017AF FA                  <1>     cli     ;Redisable interrupts
   160 000017B0 FE0D(0FC10300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   161 000017B6 488B25(70C10300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   162 000017BD 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   163 000017C0 488B05(68C10300)    <1>     mov rax, qword [oldoldRSP]
   164 000017C7 488905(70C10300)    <1>     mov qword [oldRSP], rax
   165 000017CE E806000000          <1>     call dosPopRegs  ;Pop the frame
   166 000017D3 48CF                <1>     iretq
   167                              <1> .fdExitBad:
   168 000017D5 30C0                <1>     xor al, al
   169                              <1> defaultIretq:
   170 000017D7 48CF                <1>     iretq
   171                              <1> dosPopRegs:
   172 000017D9 8F05(16C10300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   173 000017DF 58                  <1>     pop rax
   174 000017E0 5B                  <1>     pop rbx
   175 000017E1 59                  <1>     pop rcx
   176 000017E2 5A                  <1>     pop rdx
   177 000017E3 5E                  <1>     pop rsi
   178 000017E4 5F                  <1>     pop rdi
   179 000017E5 5D                  <1>     pop rbp
   180 000017E6 4158                <1>     pop r8
   181 000017E8 4159                <1>     pop r9
   182 000017EA FF25(16C10300)      <1>     jmp qword [dosReturn]
   183                              <1> dosPushRegs:
   184 000017F0 8F05(16C10300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   185 000017F6 4151                <1>     push r9
   186 000017F8 4150                <1>     push r8
   187 000017FA 55                  <1>     push rbp
   188 000017FB 57                  <1>     push rdi
   189 000017FC 56                  <1>     push rsi
   190 000017FD 52                  <1>     push rdx
   191 000017FE 51                  <1>     push rcx
   192 000017FF 53                  <1>     push rbx
   193 00001800 50                  <1>     push rax
   194 00001801 FF25(16C10300)      <1>     jmp qword [dosReturn]
   195                              <1> dosCrit1Enter:
   196 00001807 C3                  <1>     ret     ;Needs to be patched with 50h (PUSH RAX)
   197 00001808 B801800000          <1>     mov eax, 8001h
   198 0000180D CD4A                <1>     int 4ah
   199 0000180F 58                  <1>     pop rax
   200 00001810 C3                  <1>     ret
   201                              <1> dosCrit1Exit:
   202 00001811 C3                  <1>     ret
   203 00001812 B801810000          <1>     mov eax, 8101h
   204 00001817 CD4A                <1>     int 4ah
   205 00001819 58                  <1>     pop rax
   206 0000181A C3                  <1>     ret
   207                              <1> dosCrit2Enter:
   208 0000181B C3                  <1>     ret
   209 0000181C B802800000          <1>     mov eax, 8002h
   210 00001821 CD4A                <1>     int 4ah
   211 00001823 58                  <1>     pop rax
   212 00001824 C3                  <1>     ret
   213                              <1> dosCrit2Exit:
   214 00001825 C3                  <1>     ret
   215 00001826 B802810000          <1>     mov eax, 8102h
   216 0000182B CD4A                <1>     int 4ah
   217 0000182D 58                  <1>     pop rax
   218 0000182E C3                  <1>     ret
   219                              <1> ;========================================:
   220                              <1> ;      Reentrant Kernel Functions        :
   221                              <1> ;========================================:
   222                              <1> ctrlBreakCheck:    ;ah = 33h
   223 0000182F 84C0                <1>     test al, al
   224 00001831 7508                <1>     jnz .cbcget  ;Get the state or other functions
   225 00001833 8A15(43C10300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   226 00001839 48CF                <1>     iretq
   227                              <1> .cbcget:
   228 0000183B 3C02                <1>     cmp al, 02h
   229 0000183D 771A                <1>     ja .cbcBad
   230 0000183F 740D                <1>     jz .cbcxchg ;Function 2
   231 00001841 52                  <1>     push rdx
   232 00001842 80E201              <1>     and dl, 1   ;Get only the bottom bit
   233 00001845 8815(43C10300)      <1>     mov byte [breakFlag], dl    ;Set the state
   234 0000184B 5A                  <1>     pop rdx
   235 0000184C 48CF                <1>     iretq
   236                              <1> .cbcxchg:
   237 0000184E 80E201              <1>     and dl, 1
   238 00001851 8615(43C10300)      <1>     xchg byte [breakFlag], dl
   239 00001857 48CF                <1>     iretq
   240                              <1> .cbcBad:
   241 00001859 B0FF                <1>     mov al, -1
   242 0000185B 48CF                <1>     iretq
   243                              <1> 
   244                              <1> 
   245                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   246 0000185D 48891D(26C10300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   247 00001864 48CF                <1>     iretq
   248                              <1> 
   249                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   250 00001866 488B15(26C10300)    <1>     mov rdx, qword [currentPSP]
   251 0000186D 48CF                <1>     iretq
   252                              <1> 
   253                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   254 0000186F 488B15(26C10300)    <1>     mov rdx, qword [currentPSP]
   255 00001876 48CF                <1>     iretq
   256                              <1> 
   257                              <1> setDriverLookahead:;ah = 64h, reserved
   258 00001878 48CF                <1>     iretq
   259                              <1> 
   260                              <1> ;========================================:
   261                              <1> ;            Kernel Functions            :
   262                              <1> ;========================================:
   263                              <1> diskReset:         ;ah = 0Dh
   264                              <1> ;Flush all dirty buffers to disk
   265 0000187A 488B2D(A2C00300)    <1>     mov rbp, qword [bufHeadPtr]
   266                              <1> .drCheckBuffer:
   267 00001881 F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   268 00001885 7407                <1>     jz .drGotoNextBuffer
   269                              <1> .drFlushBuffer:
   270 00001887 E807EEFFFF          <1>     call flushBuffer    ;Called with rbp = buffer header
   271 0000188C 720E                <1>     jc .drError
   272                              <1> .drGotoNextBuffer:
   273 0000188E 488B6D00            <1>     mov rbp, qword [rbp + bufferHdr.nextBufPtr]
   274 00001892 4881FDFFFFFFFF      <1>     cmp rbp, -1     ;If rbp points to -1, exit
   275 00001899 75E6                <1>     jne .drCheckBuffer
   276 0000189B C3                  <1>     ret
   277                              <1> .drError:
   278                              <1> ;Abort/Retry/Ignore
   279                              <1> ;Abort returns to DOS, 
   280                              <1> ;Retry retries the write on the buffer, 
   281                              <1> ;Ignore marks the buffer as clean and proceeds as normal
   282 0000189C 8A4509              <1>     mov al, byte [rbp + bufferHdr.bufferFlags]
   283 0000189F 240F                <1>     and al, 0Fh ;Clear the upper nybble
   284 000018A1 B431                <1>     mov ah, 31h ;Disk Error, Ignore,Retry and Write operation
   285 000018A3 3C01                <1>     cmp al, dosBuffer
   286 000018A5 740F                <1>     je .drErrorMain
   287 000018A7 80C402              <1>     add ah, 2
   288 000018AA 3C02                <1>     cmp al, fatBuffer
   289 000018AC 7408                <1>     je .drErrorMain
   290 000018AE 80C402              <1>     add ah, 2
   291 000018B1 3C04                <1>     cmp al, dirBuffer
   292 000018B3 80C402              <1>     add ah, 2
   293                              <1> .drErrorMain:
   294 000018B6 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   295 000018B9 488B7517            <1>     mov rsi, qword [rbp + bufferHdr.driveDPBPtr]
   296 000018BD 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   297 000018C1 668B3D(51C00300)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]    ;Disk error occured!
   298 000018C8 6681E7FF00          <1>     and di, 0FFh    ;Only bottom byte
   299 000018CD 66893D(12C10300)    <1>     mov word [errorExCde], di     ;Save driver error code
   300 000018D4 668105(12C10300)13- <1>     add word [errorExCde], drvErrShft    ;Add offset to driver error codes
   300 000018DC 00                  <1>
   301 000018DD 8805(10C10300)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   302 000018E3 C605(11C10300)02    <1>     mov byte [errorLocus], eLocDsk   ;Error in Block Device Request code
   303 000018EA C605(15C10300)0B    <1>     mov byte [errorClass], eClsMedia ;Media error (bad BPB or other) code
   304 000018F1 C605(14C10300)01    <1>     mov byte [errorAction], eActRet   ;Retry request code
   305 000018F8 E8B8F9FFFF          <1>     call criticalDOSError       ;Critical error handler
   306 000018FD 84C0                <1>     test al, al ;Ignore the troublesome buffer and mark it as free
   307 000018FF 7406                <1>     jz .drIgnore
   308 00001901 3C01                <1>     cmp al, 1   ;Retry flushing the buffer
   309 00001903 7482                <1>     je .drFlushBuffer
   310 00001905 CD43                <1>     int 43h     ;Abort and fail both abort through int 43h
   311                              <1> .drIgnore:
   312 00001907 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1  ;Mark buffer as free
   313 0000190B E97EFFFFFF          <1>     jmp .drGotoNextBuffer
   314                              <1> 
   315                              <1> selectDisk:        ;ah = 0Eh
   316                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   317 00001910 8A05(13C00300)      <1>     mov al, byte [numLogDrv]        ;Value 1 based
   318 00001916 8A1D(B2C00300)      <1>     mov bl, byte [lastdrvNum]       ;Value 1 based
   319 0000191C FEC8                <1>     dec al
   320 0000191E FECB                <1>     dec bl
   321 00001920 38C3                <1>     cmp bl, al
   322 00001922 0F47C3              <1>     cmova eax, ebx    ;If bl > al, move bl to al
   323 00001925 38C2                <1>     cmp dl, al  ;If dl is bigger than al
   324 00001927 7707                <1>     ja .error
   325 00001929 8815(41C10300)      <1>     mov byte [currentDrv], dl   ;Only save dl if it is a valid number
   326 0000192F C3                  <1>     ret ;al = lastdrv as retcode
   327                              <1> .error:
   328 00001930 E8D6FCFFFF          <1>     call getUserRegs
   329 00001935 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set the CY flag
   330 0000193D B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   331 00001942 668905(12C10300)    <1>     mov word [errorExCde], ax     
   332 00001949 C605(11C10300)01    <1>     mov byte [errorLocus], eLocUnk    ;Not appropriate
   333 00001950 C605(15C10300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   334 00001957 C605(14C10300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   335 0000195E C3                  <1>     ret
   336                              <1> 
   337                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   338 0000195F 8A05(41C10300)      <1>     mov al, byte [currentDrv]
   339 00001965 C3                  <1>     ret
   340                              <1> 
   341                              <1> FATinfoDefault:    ;ah = 1Bh
   342 00001966 30D2                <1>     xor dl, dl
   343                              <1> FATinfoDevice:     ;ah = 1Ch
   344                              <1> ;Return in:
   345                              <1> ;   al = Number of sectors per cluster
   346                              <1> ;   edx = Number of clusters
   347                              <1> ;   cx =  Size of a clsuter
   348 00001968 84D2                <1>     test dl, dl
   349 0000196A 7508                <1>     jnz .fidSkipdefault
   350 0000196C 8A15(41C10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   351 00001972 FEC2                <1>     inc dl
   352                              <1> .fidSkipdefault:
   353 00001974 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   354                              <1> ;Walk the dpb chain manually
   355 00001976 88D0                <1>     mov al, dl  ;Move drive number into al
   356 00001978 E8C8FCFFFF          <1>     call walkDPBchain    ;Get in rsi the dpb pointer for drive in al
   357 0000197D 7331                <1>     jnc .fidDPBFound
   358                              <1> ;Else, we at an error.
   359                              <1> ;Simply return with CY set and error code in al with extended error info
   360 0000197F E887FCFFFF          <1>     call getUserRegs
   361 00001984 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set the CY flag
   362 0000198C B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   363 00001991 66C705(12C10300)0F- <1>     mov word [errorExCde], errBadDrv     
   363 00001999 00                  <1>
   364 0000199A C605(11C10300)01    <1>     mov byte [errorLocus], eLocUnk    ;Not appropriate
   365 000019A1 C605(15C10300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   366 000019A8 C605(14C10300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   367 000019AF C3                  <1>     ret
   368                              <1> .fidDPBFound:
   369 000019B0 8A4603              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   370 000019B3 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   371 000019B5 8B560E              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   372 000019B8 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
   373 000019BB BB01000000          <1>     mov ebx, 1
   374 000019C0 D3E3                <1>     shl ebx, cl
   375 000019C2 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   376 000019C4 488D5E22            <1>     lea rbx, qword [rsi + dpb.bMediaDescriptor]
   377 000019C8 E83EFCFFFF          <1>     call getUserRegs
   378 000019CD 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   379 000019D1 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   380 000019D5 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   381 000019D9 C3                  <1>     ret
   382                              <1> 
   383                              <1> setIntVector:      ;ah = 25h
   384                              <1> ;Called with:
   385                              <1> ;   rdx = Pointer to interrupt handler
   386                              <1> ;   al = Interrupt number
   387 000019DA 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   388 000019DC 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   389                              <1> ;First call to get default BIOS segement selector and attribute word
   390 000019E2 88C3                <1>     mov bl, al  ;Set interrupt number 
   391 000019E4 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   392 000019E9 CD35                <1>     int 35h
   393 000019EB E81BFCFFFF          <1>     call getUserRegs
   394 000019F0 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   395 000019F4 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   396 000019F6 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   397                              <1> ;dx preserves the attribute word
   398 000019F8 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   399 000019FD CD35                <1>     int 35h
   400 000019FF E807FCFFFF          <1>     call getUserRegs
   401 00001A04 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Preserve low byte of rax
   402 00001A06 C3                  <1>     ret
   403                              <1> createNewPSP:      ;ah = 26h
   404 00001A07 C3                  <1>     ret
   405                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   406 00001A08 8805(44C10300)      <1>     mov byte [verifyFlag], al
   407 00001A0E 8025(44C10300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   408 00001A15 C3                  <1>     ret
   409                              <1> getDOSversion:     ;ah = 30h
   410 00001A16 E8F0FBFFFF          <1>     call getUserRegs
   411 00001A1B 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   412 00001A1D 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   413 00001A20 668B05D9E5FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   414 00001A27 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   415 00001A2A C3                  <1>     ret
   416                              <1> 
   417                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   418                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   419 00001A2B 30D2                <1>     xor dl, dl
   420                              <1> getDeviceDPBptr:   ;ah = 32h
   421                              <1> ;On entry: dl = Drive number
   422                              <1> ;On exit: rbx = DPB pointer
   423 00001A2D 84D2                <1>     test dl, dl
   424 00001A2F 7508                <1>     jnz .gddpskipdefault
   425 00001A31 8A15(41C10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   426 00001A37 FEC2                <1>     inc dl
   427                              <1> .gddpskipdefault:
   428                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   429 00001A39 FECA                <1>     dec dl
   430 00001A3B 88D0                <1>     mov al, dl
   431 00001A3D E81FFCFFFF          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   432 00001A42 722D                <1>     jc .bad
   433 00001A44 488B3D(9DC20300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   434 00001A4B 48F7C700800000      <1>     test rdi, cdsNetDrive ;Is dev a network drv (since they have no DPB)?
   435 00001A52 751D                <1>     jnz .bad
   436 00001A54 E8AEFDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   437 00001A59 E816FAFFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   438 00001A5E E8AEFDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   439 00001A63 720C                <1>     jc .bad
   440 00001A65 E8A1FBFFFF          <1>     call getUserRegs
   441 00001A6A 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   442 00001A6E 30C0                <1>     xor al, al
   443 00001A70 C3                  <1>     ret
   444                              <1> .bad:
   445 00001A71 B0FF                <1>     mov al, -1
   446 00001A73 C3                  <1>     ret
   447                              <1> 
   448                              <1> getInDOSflagPtr:   ;ah = 34h
   449 00001A74 488D15(0FC10300)    <1>     lea rdx, inDOS
   450 00001A7B E88BFBFFFF          <1>     call getUserRegs
   451 00001A80 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   452 00001A84 C3                  <1>     ret
   453                              <1> getIntVector:      ;ah = 35h
   454                              <1> ;Called with:
   455                              <1> ;   al = Interrupt Number
   456                              <1> ;Returns:
   457                              <1> ;   rbx = Pointer to interrupt handler
   458 00001A85 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   459 00001A87 B807F00000          <1>     mov eax, 0F007h
   460 00001A8C CD35                <1>     int 35h
   461 00001A8E E878FBFFFF          <1>     call getUserRegs
   462 00001A93 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   463 00001A97 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   464 00001A99 C3                  <1>     ret
   465                              <1> 
   466                              <1> getDiskFreeSpace:  ;ah = 36h
   467 00001A9A 84D2                <1>     test dl, dl
   468 00001A9C 7508                <1>     jnz .gdfsSkipdefault
   469 00001A9E 8A15(41C10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   470 00001AA4 FEC2                <1>     inc dl
   471                              <1> .gdfsSkipdefault:
   472 00001AA6 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   473 00001AA8 88D0                <1>     mov al, dl
   474 00001AAA E896FBFFFF          <1>     call walkDPBchain ;Get in rsi the dpb pointer for drive al
   475 00001AAF 7331                <1>     jnc .gdfsDPBFound
   476                              <1> ;Else, we at an error.
   477                              <1> ;Simply return with CY set and error code in al with extended error info
   478 00001AB1 66C705(12C10300)0F- <1>     mov word [errorExCde], errBadDrv     ;Invalid drive error
   478 00001AB9 00                  <1>
   479 00001ABA C605(11C10300)02    <1>     mov byte [errorLocus], eLocDsk    ;Not appropriate
   480 00001AC1 C605(15C10300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   481 00001AC8 C605(14C10300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   482 00001ACF E837FBFFFF          <1>     call getUserRegs
   483 00001AD4 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   484 00001AD9 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set CF=CY
   485 00001AE1 C3                  <1>     ret
   486                              <1> .gdfsDPBFound:
   487 00001AE2 8A4603              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   488 00001AE5 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   489 00001AE7 8B560E              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   490 00001AEA 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
   491 00001AED BB01000000          <1>     mov ebx, 1
   492 00001AF2 D3E3                <1>     shl ebx, cl
   493 00001AF4 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   494 00001AF6 8B5E30              <1>     mov ebx, dword [rsi + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   495 00001AF9 E80DFBFFFF          <1>     call getUserRegs
   496 00001AFE 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   497 00001B02 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   498 00001B06 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   499 00001B0A C3                  <1>     ret
   500                              <1> 
   501                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   502 00001B0B 31C0                <1>     xor eax, eax
   503 00001B0D 668705(3EC10300)    <1>     xchg ax, word [errorLevel]
   504 00001B14 E8F2FAFFFF          <1>     call getUserRegs
   505 00001B19 668906              <1>     mov word [rsi + callerFrame.rax], ax
   506 00001B1C C3                  <1>     ret
   507                              <1> 
   508                              <1> getSysVarsPtr:     ;ah = 52h
   509 00001B1D 488D15(80C00300)    <1>     lea rdx, sysVarsPtr
   510 00001B24 E8E2FAFFFF          <1>     call getUserRegs
   511 00001B29 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   512 00001B2D C3                  <1>     ret
   513                              <1> 
   514                              <1> 
   515                              <1> ;AH = 53h - CREATE DPB
   516                              <1> createDPB:         ;generates a DPB from a given BPB
   517                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   518                              <1> ;This is done so that the other fields of the DPB can be recycled
   519                              <1> ;Input: rsi = ptr to the BPB
   520                              <1> ;       rbp = ptr to the DPB
   521                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   522                              <1> ;bMediaDescriptor
   523 00001B2E 8A4615              <1>     mov al, byte [rsi + bpb.media]
   524 00001B31 884522              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   525                              <1> ;dFirstFreeCluster
   526 00001B34 C7452C00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   527                              <1> ;dNumberOfFreeClusters
   528 00001B3B C74530FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   529                              <1> ;bBytesPerSectorShift
   530 00001B42 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   531 00001B46 B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   532 00001B48 66D3E8              <1>     shr ax, cl  ;Shift down
   533                              <1> .cd0:
   534 00001B4B 66D1E8              <1>     shr ax, 1
   535 00001B4E 7404                <1>     jz .cd1
   536 00001B50 FEC1                <1>     inc cl
   537 00001B52 EBF7                <1>     jmp short .cd0
   538                              <1> .cd1:
   539 00001B54 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   540                              <1> ;bMaxSectorInCluster
   541 00001B57 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   542 00001B5A FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   543 00001B5C 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   544                              <1> ;bSectorsPerClusterShift
   545 00001B5F FEC0                <1>     inc al
   546 00001B61 30C9                <1>     xor cl, cl
   547                              <1> .cd2:
   548 00001B63 D0E8                <1>     shr al, 1
   549 00001B65 7404                <1>     jz .cd3
   550 00001B67 FEC1                <1>     inc cl
   551 00001B69 EBF8                <1>     jmp short .cd2
   552                              <1> .cd3:
   553 00001B6B 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   554                              <1> ;wFAToffset, number of reserved sectors in partition
   555 00001B6E 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   556 00001B72 66894505            <1>     mov word [rbp + dpb.wFAToffset], ax
   557                              <1> ;bNumberOfFATs
   558 00001B76 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   559 00001B79 884507              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   560                              <1> ;wNumberRootDirSectors
   561 00001B7C 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   562 00001B80 C1E005              <1>     shl eax, 5  ;Multiply by 32
   563 00001B83 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   564 00001B87 FFC9                <1>     dec ecx
   565 00001B89 01C8                <1>     add eax, ecx
   566 00001B8B 31D2                <1>     xor edx, edx    ;Clear for divide
   567 00001B8D F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   568 00001B8F 66894508            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   569                              <1> ;dFATlength, get the FAT length
   570 00001B93 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   571 00001B97 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   572 00001B9A 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   573 00001B9C 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   574 00001B9F 894512              <1>     mov dword [rbp + dpb.dFATlength], eax
   575                              <1> ;Complex cases below...
   576                              <1> ;dClusterHeapOffset, start sector of the data area
   577 00001BA2 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   578 00001BA6 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   579 00001BA9 85C0                <1>     test eax, eax
   580 00001BAB 0F44C3              <1>     cmovz eax, ebx
   581                              <1> ;eax = FATsz
   582 00001BAE 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   583 00001BB2 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   584 00001BB5 85DB                <1>     test ebx, ebx
   585 00001BB7 0F44D9              <1>     cmovz ebx, ecx 
   586                              <1> ;ebx = TotSec
   587 00001BBA 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   588 00001BBD 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   589                              <1> .cd4:
   590 00001BBF 01C2                <1>     add edx, eax
   591 00001BC1 FEC9                <1>     dec cl
   592 00001BC3 75FA                <1>     jnz .cd4
   593 00001BC5 89D0                <1>     mov eax, edx    ;Store product in eax
   594 00001BC7 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   595 00001BCB 01D0                <1>     add eax, edx
   596 00001BCD 0FB75508            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   597 00001BD1 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   598                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   599                              <1>     ;aka eax = Start sector of the data area in volume
   600 00001BD3 89450A              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   601                              <1> ;dClusterCount
   602 00001BD6 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   603 00001BD8 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   604 00001BDA 31D2                <1>     xor edx, edx
   605 00001BDC BB01000000          <1>     mov ebx, 1
   606 00001BE1 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   607 00001BE4 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   608 00001BE6 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   609 00001BE8 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   610 00001BEA 89450E              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   611                              <1> ;dFirstUnitOfRootDir
   612 00001BED 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   613 00001BF2 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   614 00001BF5 7709                <1>     ja .cd5
   615                              <1>     ;Else, we need to find the first sector of the root directory
   616                              <1>     ;Get the start sector of data area in volume 
   617                              <1>     ; and sub the number of sectors in the root directory
   618 00001BF7 8B450A              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   619 00001BFA 0FB75D08            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   620 00001BFE 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   621                              <1> .cd5:
   622 00001C00 894516              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   623                              <1> ;Exit epilogue
   624 00001C03 488B1D(70C10300)    <1>     mov rbx, qword [oldRSP]
   625 00001C0A 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   626                              <1>     %if DEBUG && DPBINFO
   627                              <1>     ;Print DPB 
   628                              <1>     debugEnterM
   629                              <1>     push rbp
   630                              <1>     lea rbp, .l0000
   631                              <1>     call debPrintNullString
   632                              <1>     pop rbp
   633                              <1>     call debDPBBPBptr
   634                              <1>     call debMakeDebuggerRespond
   635                              <1>     jmp short .l0001
   636                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   637                              <1> .l0001:
   638                              <1>     debugExitM
   639                              <1>     %endif
   640 00001C0C C3                  <1>     ret
   641                              <1> 
   642                              <1> getVerifySetting:  ;ah = 54h
   643 00001C0D 8A05(44C10300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   644 00001C13 C3                  <1>     ret
   645                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   646 00001C14 C3                  <1>     ret
   647                              <1> getExtendedError:  ;ah = 59h
   648 00001C15 E8F1F9FFFF          <1>     call getUserRegs
   649 00001C1A 668B05(12C10300)    <1>     mov ax, word [errorExCde]
   650 00001C21 8A2D(11C10300)      <1>     mov ch, byte [errorLocus]
   651 00001C27 8A3D(15C10300)      <1>     mov bh, byte [errorClass]
   652 00001C2D 8A1D(14C10300)      <1>     mov bl, byte [errorAction]
   653 00001C33 668906              <1>     mov word [rsi + callerFrame.rax], ax
   654 00001C36 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   655 00001C3A 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   656 00001C3D C3                  <1>     ret
   657                              <1> getCritErrorInfo:  ;ah = 5Dh
   658                              <1> networkServices:   ;ah = 5Eh, do nothing
   659                              <1> networkRedirection:;ah = 5Fh, do nothing
   660 00001C3E C3                  <1>     ret
   661                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   662                              <1> return:
   663 00001C3F C3                  <1>     ret
    31                                  %include "./Source/Kernel/multiplx.asm"
    32                              <1> ;Default multiplexer. Current only installed function is ah=12h
    33                              <1> 
    34                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    35 00001C40 80FC12              <1>     cmp ah, 12h
    36 00001C43 751A                <1>     jne .exit       ;Exit if not for us
    37 00001C45 3C01                <1>     cmp al, mDispTblL / 2
    38 00001C47 7316                <1>     jae .exit   ;If above or equal, exit
    39 00001C49 53                  <1>     push rbx
    40 00001C4A 51                  <1>     push rcx
    41 00001C4B 31C9                <1>     xor ecx, ecx
    42 00001C4D 488D1D9BE4FFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    43 00001C54 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    44 00001C56 D1E1                <1>     shl ecx, 1   ;multiply by 2
    45 00001C58 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    46 00001C5B FFD3                <1>     call rbx
    47 00001C5D 59                  <1>     pop rcx
    48 00001C5E 5B                  <1>     pop rbx
    49                              <1> .exit:
    50 00001C5F 48CF                <1>     iretq
    51                              <1> multiplexTest:
    52 00001C61 B0FF                <1>     mov al, -1
    53 00001C63 C3                  <1>     ret
    32                                  %include "./Source/Misc/int44h.asm"
    33                              <1> critErrorHandler:   ;Int 44h
    34                              <1> ;User Stack in usage here, must be swapped to before this is called
    35                              <1> ;Entered with:  
    36                              <1> ;               AH = Critical Error Bitfield
    37                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    38                              <1> ;               Bit 6 - Reserved
    39                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    40                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    41                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    42                              <1> ;               Bits [2-1] = Affected Disk Error
    43                              <1> ;                     0 0   DOS area
    44                              <1> ;                     0 1   FAT area
    45                              <1> ;                     1 0   Directory area
    46                              <1> ;                     1 1   Data area
    47                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    48                              <1> ;               AL  = Failing drive number if AH[7] = 0
    49                              <1> ;               DIL = Error code for errorMsg
    50                              <1> ;               RSI = EA of Device Header for which device the error occured
    51                              <1> ;Return:
    52                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    53                              <1> ;                  = 1 - Retry the Operation    (Retry)
    54                              <1> ;                  = 2 - Terminate the Program  (Abort)
    55                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    56 00001C64 53                  <1>     push rbx
    57 00001C65 51                  <1>     push rcx
    58 00001C66 52                  <1>     push rdx
    59 00001C67 57                  <1>     push rdi
    60 00001C68 56                  <1>     push rsi
    61 00001C69 FC                  <1>     cld         ;Make String ops go forward
    62                              <1> 
    63 00001C6A 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    64 00001C6D 488D155E020000      <1>     lea rdx, qword [.crlf]
    65 00001C74 B409                <1>     mov ah, 09h ;Print String
    66 00001C76 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    67                              <1> 
    68 00001C78 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    69 00001C7E B90C000000          <1>     mov ecx, 0Ch
    70 00001C83 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    71 00001C85 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    72 00001C88 480FB7FF            <1>     movzx rdi, di
    73 00001C8C 4889FA              <1>     mov rdx, rdi    ;Copy error code
    74 00001C8F 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    75 00001C93 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    76 00001C96 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    77 00001C99 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    78 00001CA0 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    79 00001CA4 B409                <1>     mov ah, 09h ;Print String
    80 00001CA6 CD41                <1>     int 41h     ;Call DOS to print first part of message
    81                              <1> 
    82 00001CA8 488D1505020000      <1>     lea rdx, qword [.readmsg]
    83 00001CAF 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    84 00001CB6 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    85 00001CB9 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    86 00001CBD B409                <1>     mov ah, 09h ;Print String
    87 00001CBF CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    88                              <1> 
    89 00001CC1 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    90 00001CC4 0F85DF000000        <1>     jnz .charError
    91                              <1> ;Disk error continues here
    92 00001CCA 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    93 00001CD1 B409                <1>     mov ah, 09h
    94 00001CD3 CD41                <1>     int 41h
    95 00001CD5 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    96 00001CD7 80C241              <1>     add dl, "A" ;Add ASCII code
    97 00001CDA B402                <1>     mov ah, 02h ;Print char in dl
    98 00001CDC CD41                <1>     int 41h
    99                              <1> .userInput:
   100 00001CDE 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   101 00001CE5 B409                <1>     mov ah, 09h
   102 00001CE7 CD41                <1>     int 41h
   103                              <1> ;Abort, Retry, Ignore, Fail is word order
   104                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   105                              <1> .userAbort:
   106                              <1> ;Abort is always an option
   107 00001CE9 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   108 00001CF0 B409                <1>     mov ah, 09h
   109 00001CF2 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   110                              <1> .userRetry:
   111 00001CF4 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   112 00001CF7 7416                <1>     jz .userIgnore    ;If clear, dont print message
   113 00001CF9 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   114 00001D00 B409                <1>     mov ah, 09h
   115 00001D02 CD41                <1>     int 41h
   116 00001D04 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   117 00001D0B B409                <1>     mov ah, 09h
   118 00001D0D CD41                <1>     int 41h
   119                              <1> .userIgnore:
   120 00001D0F F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   121 00001D12 7416                <1>     jz .userFail
   122 00001D14 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   123 00001D1B B409                <1>     mov ah, 09h
   124 00001D1D CD41                <1>     int 41h
   125 00001D1F 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   126 00001D26 B409                <1>     mov ah, 09h
   127 00001D28 CD41                <1>     int 41h
   128                              <1> .userFail:
   129 00001D2A F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   130 00001D2D 7416                <1>     jz .userMsgEnd
   131 00001D2F 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   132 00001D36 B409                <1>     mov ah, 09h
   133 00001D38 CD41                <1>     int 41h
   134 00001D3A 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   135 00001D41 B409                <1>     mov ah, 09h
   136 00001D43 CD41                <1>     int 41h
   137                              <1> .userMsgEnd:
   138 00001D45 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   139 00001D4C B409                <1>     mov ah, 09h
   140 00001D4E CD41                <1>     int 41h
   141                              <1> ;Get user input now 
   142 00001D50 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   143 00001D52 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   144 00001D59 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   145 00001D5B CD41                <1>     int 41h ;Get char in al
   146 00001D5D 3C61                <1>     cmp al, "a" ;Chack if lowercase
   147 00001D5F 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   148 00001D61 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   149                              <1> .uip1:
   150 00001D63 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   151 00001D64 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   152 00001D66 FFC1                <1>     inc ecx
   153 00001D68 81F904000000        <1>     cmp ecx, 4
   154 00001D6E 75F3                <1>     jne .uip1
   155 00001D70 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   156                              <1> .validInput:
   157 00001D75 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   158                              <1> ;Now check if the input is permitted
   159 00001D77 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   160 00001D79 7427                <1>     je .cehExit
   161 00001D7B 84C0                <1>     test al, al ;Check if 0 => Ignore
   162 00001D7D 740F                <1>     je .viIgnore
   163 00001D7F 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   164 00001D81 7416                <1>     je .viRetry
   165                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   166 00001D83 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   167 00001D86 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   168 00001D8C EB14                <1>     jmp short .cehExit
   169                              <1> .viIgnore:
   170 00001D8E F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   171 00001D91 0F8447FFFFFF        <1>     jz .userInput
   172 00001D97 EB09                <1>     jmp short .cehExit
   173                              <1> .viRetry:
   174 00001D99 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   175 00001D9C 0F843CFFFFFF        <1>     jz .userInput
   176                              <1> .cehExit:
   177 00001DA2 5E                  <1>     pop rsi
   178 00001DA3 5F                  <1>     pop rdi
   179 00001DA4 5A                  <1>     pop rdx
   180 00001DA5 59                  <1>     pop rcx
   181 00001DA6 5B                  <1>     pop rbx
   182 00001DA7 48CF                <1>     iretq
   183                              <1> .charError:
   184 00001DA9 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   185 00001DAE 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   186                              <1> .ce1:
   187 00001DB5 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   188 00001DB6 88C2                <1>     mov dl, al  ;Move char into dl
   189 00001DB8 B402                <1>     mov ah, 02h
   190 00001DBA CD41                <1>     int 41h ;Print char
   191 00001DBC E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   192 00001DBE E91BFFFFFF          <1>     jmp .userInput
   193                              <1> 
   194                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   195 00001DC3 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   195 00001DCC 746563742024202020  <1>
   196 00001DD5 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   196 00001DDE 6E6974202420202020  <1>
   197 00001DE7 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   197 00001DF0 202420202020202020  <1>
   198 00001DF9 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   198 00001E02 6F6D6D616E64202420  <1>
   199 00001E0B 446174612024202020- <1>             db "Data $            "       ;Error 4
   199 00001E14 202020202020202020  <1>
   200 00001E1D 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   200 00001E26 737420242020202020  <1>
   201 00001E2F 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   201 00001E38 202020202020202020  <1>
   202 00001E41 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   202 00001E4A 656469612024202020  <1>
   203 00001E53 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   203 00001E5C 7420466F756E642024  <1>
   204 00001E65 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   204 00001E6E 706572202420202020  <1>
   205 00001E77 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   205 00001E80 6C7420242020202020  <1>
   206 00001E89 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   206 00001E92 742024202020202020  <1>
   207 00001E9B 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   207 00001EA4 61696C757265202420  <1>
   208                              <1> 
   209 00001EAD 64726976652024      <1> .drive      db "drive $"
   210 00001EB4 6572726F7220726561- <1> .readmsg    db "error reading $"
   210 00001EBD 64696E672024        <1>
   211 00001EC3 6572726F7220777269- <1> .writemsg   db "error writing $"
   211 00001ECC 74696E672024        <1>
   212 00001ED2 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   213 00001ED5 41626F727424        <1> .abortmsg   db "Abort$" 
   214 00001EDB 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   215 00001EE2 526574727924        <1> .retrymsg   db "Retry$"
   216 00001EE8 4661696C24          <1> .failmsg    db "Fail$"
   217 00001EED 2C2024              <1> .betweenMsg db ", $"
   218 00001EF0 3F2024              <1> .endMsg     db "? $"
   219 00001EF3 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    33                                  %include "./Source/Drivers/drvData.asm"
    34                              <1> ;-----------------------------------:
    35                              <1> ;          Driver routines          :
    36                              <1> ;-----------------------------------:
    37                              <1> drivers:
    38                              <1> conHdr:
    39 00001EF7 [191F000000000000]  <1>     dq auxHdr
    40 00001EFF 1308                <1>     dw 0813h
    41 00001F01 [9720000000000000]  <1>     dq commonStrat
    42 00001F09 [A620000000000000]  <1>     dq conDriver
    43 00001F11 434F4E2020202020    <1>     db "CON     "
    44                              <1> auxHdr:
    45 00001F19 [3B1F000000000000]  <1>     dq prnHdr
    46 00001F21 0080                <1>     dw 08000h
    47 00001F23 [9720000000000000]  <1>     dq commonStrat
    48 00001F2B [7C23000000000000]  <1>     dq com1Intr
    49 00001F33 4155582020202020    <1>     db "AUX     "
    50                              <1> prnHdr:
    51 00001F3B [5D1F000000000000]  <1>     dq clkHdr
    52 00001F43 40A0                <1>     dw 0A040h
    53 00001F45 [9F20000000000000]  <1>     dq nulStrat
    54 00001F4D [A520000000000000]  <1>     dq nulIntr
    55 00001F55 50524E2020202020    <1>     db "PRN     "
    56                              <1> clkHdr:
    57 00001F5D [7F1F000000000000]  <1>     dq msdHdr
    58 00001F65 0880                <1>     dw 08008h
    59 00001F67 [9720000000000000]  <1>     dq commonStrat
    60 00001F6F [EF21000000000000]  <1>     dq clkDriver
    61 00001F77 434C4F434B242020    <1>     db "CLOCK$  "
    62                              <1> msdHdr:
    63 00001F7F [A11F000000000000]  <1>     dq com1Hdr
    64 00001F87 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    65 00001F89 [9720000000000000]  <1>     dq commonStrat
    66 00001F91 [2125000000000000]  <1>     dq msdDriver
    67 00001F99 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    68                              <1> com1Hdr:
    69 00001FA1 [C31F000000000000]  <1>     dq com2Hdr
    70 00001FA9 0080                <1>     dw 08000h
    71 00001FAB [9720000000000000]  <1>     dq commonStrat
    72 00001FB3 [7C23000000000000]  <1>     dq com1Intr
    73 00001FBB 434F4D3120202020    <1>     db "COM1    "
    74                              <1> com2Hdr:
    75 00001FC3 [E51F000000000000]  <1>     dq com3Hdr
    76 00001FCB 0080                <1>     dw 08000h
    77 00001FCD [9720000000000000]  <1>     dq commonStrat
    78 00001FD5 [8523000000000000]  <1>     dq com2Intr
    79 00001FDD 434F4D3220202020    <1>     db "COM2    "
    80                              <1> com3Hdr:
    81 00001FE5 [0720000000000000]  <1>     dq com4Hdr
    82 00001FED 0080                <1>     dw 08000h
    83 00001FEF [9720000000000000]  <1>     dq commonStrat
    84 00001FF7 [8E23000000000000]  <1>     dq com3Intr
    85 00001FFF 434F4D3320202020    <1>     db "COM3    "
    86                              <1> com4Hdr:
    87 00002007 [2920000000000000]  <1>     dq lpt1Hdr
    88 0000200F 0080                <1>     dw 08000h
    89 00002011 [9720000000000000]  <1>     dq commonStrat
    90 00002019 [9723000000000000]  <1>     dq com4Intr
    91 00002021 434F4D3420202020    <1>     db "COM4    "
    92                              <1> lpt1Hdr:
    93 00002029 [4B20000000000000]  <1>     dq lpt2Hdr
    94 00002031 40A0                <1>     dw 0A040h
    95 00002033 [9F20000000000000]  <1>     dq nulStrat
    96 0000203B [A520000000000000]  <1>     dq nulIntr
    97 00002043 4C50543120202020    <1>     db "LPT1    "
    98                              <1> lpt2Hdr:
    99 0000204B [6D20000000000000]  <1>     dq lpt3Hdr
   100 00002053 40A0                <1>     dw 0A040h
   101 00002055 [9F20000000000000]  <1>     dq nulStrat
   102 0000205D [A520000000000000]  <1>     dq nulIntr
   103 00002065 4C50543220202020    <1>     db "LPT2    "
   104                              <1> lpt3Hdr:
   105 0000206D FFFFFFFFFFFFFFFF    <1>     dq -1
   106 00002075 40A0                <1>     dw 0A040h
   107 00002077 [9F20000000000000]  <1>     dq nulStrat
   108 0000207F [A520000000000000]  <1>     dq nulIntr
   109 00002087 4C50543320202020    <1>     dq "LPT3    "
   110 0000208F 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    34                                  %include "./Source/Drivers/charDrv.asm"
    35                              <1> commonStrat:
    36                              <1> ;DOS calls this function with rbx=Ptr to request header
    37 00002097 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    38 0000209E C3                  <1>     ret
    39                              <1> nulStrat:
    40 0000209F 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    41                              <1> nulIntr:
    42 000020A5 C3                  <1>     ret
    43                              <1> conDriver:
    44 000020A6 50                  <1>     push rax
    45 000020A7 53                  <1>     push rbx
    46 000020A8 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    47 000020AF B003                <1>     mov al, 03h ;Unknown Command
    48 000020B1 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    49 000020B5 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    50                              <1> 
    51 000020B7 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    52 000020BA 3C04                <1>     cmp al, 4
    53 000020BC 743D                <1>     jz .conRead
    54 000020BE 3C05                <1>     cmp al, 5
    55 000020C0 747F                <1>     jz .conNondestructiveRead
    56 000020C2 3C06                <1>     cmp al, 6
    57 000020C4 0F84A8000000        <1>     jz .conInputStatus
    58 000020CA 3C07                <1>     cmp al, 7
    59 000020CC 0F84B0000000        <1>     jz .conFlushInputBuffers
    60 000020D2 3C08                <1>     cmp al, 8
    61 000020D4 0F84CA000000        <1>     jz .conWrite
    62 000020DA 3C09                <1>     cmp al, 9
    63 000020DC 0F84C2000000        <1>     jz .conWrite
    64 000020E2 3C0A                <1>     cmp al, 0Ah
    65 000020E4 0F84E3000000        <1>     jz .conOutputStatus
    66 000020EA EB06                <1>     jmp short .conExit  ;All other valid functions return done
    67                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    68 000020EC B480                <1>     mov ah, 80h ;Set error bit
    69 000020EE 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    70                              <1> .conExit:
    71 000020F2 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    72 000020F8 5B                  <1>     pop rbx
    73 000020F9 58                  <1>     pop rax
    74 000020FA C3                  <1>     ret
    75                              <1> .conRead:    ;Function 4
    76 000020FB B005                <1>     mov al, 05h ;Bad request structure length?
    77 000020FD 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    78 00002100 75EA                <1>     jne .conWriteErrorCode
    79                              <1> 
    80 00002102 57                  <1>     push rdi
    81 00002103 51                  <1>     push rcx
    82 00002104 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    83 00002108 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    84                              <1> .cre1:
    85 0000210A 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    86 0000210D 741C                <1>     je .cre2
    87 0000210F 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    88 00002116 751A                <1>     jnz .cre3   ;No, get the buffer value
    89 00002118 31C0                <1>     xor eax, eax
    90 0000211A CD36                <1>     int 36h
    91                              <1> .cre11:
    92 0000211C AA                  <1>     stosb
    93 0000211D 84C0                <1>     test al, al ;Was the ascii code stored 0?
    94 0000211F 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    95 00002121 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    96                              <1> .cre12:
    97 00002127 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    98 00002129 EBDF                <1>     jmp short .cre1
    99                              <1> .cre2:
   100 0000212B 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   101 0000212E 59                  <1>     pop rcx
   102 0000212F 5F                  <1>     pop rdi
   103 00002130 EBC0                <1>     jmp short .conExit
   104                              <1> .cre3:
   105 00002132 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   106 00002138 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   107 0000213F EBDB                <1>     jmp short .cre11
   108                              <1> 
   109                              <1> .conNondestructiveRead:  ;Function 5
   110 00002141 B005                <1>     mov al, 05h ;Bad request structure length?
   111 00002143 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   112 00002146 75A4                <1>     jne .conWriteErrorCode
   113 00002148 803D8E00000000      <1>     cmp byte [.conBuf], 0
   114 0000214F 7519                <1>     jnz .cnr2
   115 00002151 B401                <1>     mov ah, 01h     ;Get key if exists
   116 00002153 CD36                <1>     int 36h
   117 00002155 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   118                              <1>     ;Keystroke available
   119                              <1> .cnr0:
   120 00002157 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   121 0000215A E993FFFFFF          <1>     jmp .conExit
   122                              <1> .cnr1: ;No keystroke available
   123 0000215F 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   124 00002165 E988FFFFFF          <1>     jmp .conExit
   125                              <1> .cnr2:
   126 0000216A 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   127 00002170 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   128                              <1> 
   129                              <1> .conInputStatus:         ;Function 6
   130 00002172 B005                <1>     mov al, 05h ;Bad request structure length?
   131 00002174 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   132 00002177 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   133 0000217D E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   134                              <1> 
   135                              <1> .conFlushInputBuffers:   ;Function 7
   136 00002182 B005                <1>     mov al, 05h ;Bad request structure length?
   137 00002184 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   138 00002187 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   139 0000218D C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   140                              <1> .cfib0:
   141 00002194 B401                <1>     mov ah, 01      ;Get buffer status
   142 00002196 CD36                <1>     int 36h
   143 00002198 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   144 0000219E 30E4                <1>     xor ah, ah
   145 000021A0 CD36                <1>     int 36h ;Read key to flush from buffer
   146 000021A2 EBF0                <1>     jmp short .cfib0
   147                              <1> 
   148                              <1> .conWrite:   ;Function 8 and 9
   149 000021A4 B005                <1>     mov al, 05h ;Bad request structure length?
   150 000021A6 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   151 000021A9 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   152                              <1> 
   153 000021AF 56                  <1>     push rsi
   154 000021B0 51                  <1>     push rcx
   155 000021B1 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   156 000021B5 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   157                              <1> .cw1: 
   158 000021B7 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   159 000021BA 7407                <1>     je .cw2
   160 000021BC AC                  <1>     lodsb   ;Get char into al, and inc rsi
   161 000021BD CD49                <1>     int 49h ;Fast print char
   162 000021BF FFC1                <1>     inc ecx
   163 000021C1 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   164                              <1> .cw2:
   165 000021C3 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   166 000021C6 59                  <1>     pop rcx
   167 000021C7 5E                  <1>     pop rsi
   168 000021C8 E925FFFFFF          <1>     jmp .conExit
   169                              <1> .conOutputStatus:   ;Function 0Ah
   170 000021CD B005                <1>     mov al, 05h ;Bad request structure length?
   171 000021CF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   172 000021D2 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   173 000021D8 E915FFFFFF          <1>     jmp .conExit
   174                              <1> 
   175 000021DD 00                  <1> .conBuf db 0    ;Single byte buffer
   176                              <1> fastOutput:         ;This CON driver supports Int 49h
   177                              <1> ;Called with char to transfer in al
   178 000021DE 50                  <1>     push rax
   179 000021DF B40E                <1>     mov ah, 0Eh
   180 000021E1 CD30                <1>     int 30h
   181 000021E3 58                  <1>     pop rax
   182 000021E4 48CF                <1>     iretq
   183                              <1> ctrlBreak:
   184                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   185 000021E6 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   186 000021ED 48CF                <1>     iretq
   187                              <1> 
   188                              <1> clkDriver:
   189 000021EF 50                  <1>     push rax
   190 000021F0 53                  <1>     push rbx
   191 000021F1 51                  <1>     push rcx
   192 000021F2 52                  <1>     push rdx
   193 000021F3 56                  <1>     push rsi
   194 000021F4 55                  <1>     push rbp
   195 000021F5 488B1D93FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   196 000021FC B003                <1>     mov al, 03h ;Unknown Command
   197 000021FE 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   198 00002202 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   199                              <1> 
   200 00002204 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   201 00002207 3C04                <1>     cmp al, 04h
   202 00002209 7437                <1>     jz .clkRead
   203 0000220B 3C06                <1>     cmp al, 06h
   204 0000220D 0F8494000000        <1>     jz .clkInputStatus
   205 00002213 3C07                <1>     cmp al, 07h
   206 00002215 0F8498000000        <1>     jz .clkFlushInputBuffers
   207 0000221B 3C08                <1>     cmp al, 08h
   208 0000221D 0F84A0000000        <1>     jz .clkWrite
   209 00002223 3C09                <1>     cmp al, 09h
   210 00002225 0F8498000000        <1>     jz .clkWrite
   211 0000222B EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   212                              <1> .clkNotFunctioning:
   213 0000222D B002                <1>     mov al, 02h ;Device not ready error
   214                              <1> .clkWriteErrorCode:
   215 0000222F B480                <1>     mov ah, 80h ;Set error bit
   216 00002231 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   217                              <1> .clkExit:
   218 00002235 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   219 0000223B 5D                  <1>     pop rbp
   220 0000223C 5E                  <1>     pop rsi
   221 0000223D 5A                  <1>     pop rdx
   222 0000223E 59                  <1>     pop rcx
   223 0000223F 5B                  <1>     pop rbx
   224 00002240 58                  <1>     pop rax
   225 00002241 C3                  <1>     ret
   226                              <1> 
   227                              <1> .clkRead:           ;Function 4
   228 00002242 B005                <1>     mov al, 05h ;Bad request structure length?
   229 00002244 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   230 00002247 75E6                <1>     jne .clkWriteErrorCode
   231                              <1> 
   232 00002249 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   233 0000224C 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   234 00002250 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   235 00002257 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   236 0000225B 30E4                <1>     xor ah, ah
   237 0000225D CD3A                <1>     int 3Ah         ;Read the system timer
   238 0000225F 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   239 00002261 740D                <1>     jz .clkr1       ;Nope, now just time 
   240 00002263 30E4                <1>     xor ah, ah
   241                              <1>     ;This works as al should keep count of the # of days passed since last read
   242 00002265 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   243 00002269 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   244                              <1> .clkr1:
   245 00002270 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   246 00002273 0FB7D2              <1>     movzx edx, dx
   247 00002276 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   248 00002278 89D0                <1>     mov eax, edx
   249 0000227A 31D2                <1>     xor edx, edx
   250 0000227C 89D8                <1>     mov eax, ebx
   251 0000227E B944040000          <1>     mov ecx, 1092   
   252 00002283 F7F1                <1>     div ecx
   253 00002285 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   254 00002288 89D0                <1>     mov eax, edx    ;Get remainder in eax
   255 0000228A 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   256 0000228E 31D2                <1>     xor edx, edx
   257 00002290 B95B000000          <1>     mov ecx, 91 ;5*18.2
   258 00002295 F7F1                <1>     div ecx
   259 00002297 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   260 0000229A 89D0                <1>     mov eax, edx    ;Get remainder in eax
   261                              <1>     ;lea eax, dword [eax + 4*eax]
   262                              <1>     ;add eax, edx    ;Essentially multiply by 6
   263 0000229C 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   264 0000229F 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   265 000022A2 E98EFFFFFF          <1>     jmp .clkExit
   266                              <1> 
   267                              <1> .clkInputStatus:    ;Function 6
   268                              <1> ;Always return ready
   269 000022A7 B005                <1>     mov al, 05h ;Bad request structure length?
   270 000022A9 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   271 000022AC 7581                <1>     jne .clkWriteErrorCode
   272 000022AE E982FFFFFF          <1>     jmp .clkExit
   273                              <1> .clkFlushInputBuffers:  ;Function 7
   274                              <1> ;Always return done immediately
   275 000022B3 B005                <1>     mov al, 05h ;Bad request structure length?
   276 000022B5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   277 000022B8 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   278 000022BE E972FFFFFF          <1>     jmp .clkExit
   279                              <1> 
   280                              <1> .clkWrite:          ;Functions 8 and 9
   281 000022C3 B005                <1>     mov al, 05h ;Bad request structure length?
   282 000022C5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   283 000022C8 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   284                              <1> 
   285 000022CE 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   286 000022D1 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   287 000022D5 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   288 000022D9 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   289                              <1> 
   290 000022E0 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   291 000022E2 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   292 000022E6 B105                <1>     mov cl, 5
   293 000022E8 F6F1                <1>     div cl          ;Divide al by 5
   294 000022EA 30E4                <1>     xor ah, ah      ;Remove the remainder
   295 000022EC 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   296                              <1> ;Using the decimal part of this formula for the low count
   297                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   298 000022EE 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   299 000022F1 B912000000          <1>     mov ecx, 18
   300 000022F6 F7E1                <1>     mul ecx  
   301 000022F8 01C3                <1>     add ebx, eax
   302                              <1> 
   303 000022FA 31D2                <1>     xor edx, edx
   304 000022FC 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   305 00002300 B944040000          <1>     mov ecx, 1092
   306 00002305 F7E1                <1>     mul ecx
   307 00002307 01C3                <1>     add ebx, eax
   308 00002309 89DA                <1>     mov edx, ebx    ;edx now has low count
   309 0000230B 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   310 0000230F B401                <1>     mov ah, 01h     ;Set the system time
   311 00002311 CD3A                <1>     int 3Ah
   312                              <1> 
   313 00002313 4889F3              <1>     mov rbx, rsi
   314 00002316 E91AFFFFFF          <1>     jmp .clkExit
   315                              <1> 
   316                              <1> .clkBCDtoHex:
   317                              <1> ;Converts a BCD value to a Hex byte
   318                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   319 0000231B 51                  <1>     push rcx
   320 0000231C 0FB6C0              <1>     movzx eax, al   ;Zero extend
   321 0000231F 89C1                <1>     mov ecx, eax    ;Save al in ecx
   322 00002321 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   323 00002326 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   324 0000232C C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   325                              <1> .cbth0:
   326 0000232F 050A000000          <1>     add eax, 10
   327 00002334 E2F9                <1>     loop .cbth0
   328 00002336 59                  <1>     pop rcx
   329 00002337 C3                  <1>     ret
   330                              <1> 
   331                              <1> .clkHexToBCD:
   332                              <1> ;Converts a Hex byte into two BCD digits
   333                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   334 00002338 51                  <1>     push rcx
   335 00002339 0FB6C0              <1>     movzx eax, al   ;Zero extend
   336 0000233C 31C9                <1>     xor ecx, ecx
   337                              <1> .chtb0:
   338 0000233E 3D0A000000          <1>     cmp eax, 10
   339 00002343 7209                <1>     jb .chtb1
   340 00002345 2D0A000000          <1>     sub eax, 10
   341 0000234A FFC1                <1>     inc ecx
   342 0000234C EBF0                <1>     jmp short .chtb0
   343                              <1> .chtb1:
   344 0000234E C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   345 00002351 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   346 00002353 59                  <1>     pop rcx
   347 00002354 C3                  <1>     ret
   348 00002355 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   349                              <1> ;When counting the number of days, first compute the number of years since
   350                              <1> ; 1980 and your year. 
   351                              <1> ;Then, using the table below, find the number of leap years between 1980
   352                              <1> ; and (YourYear - 1). 
   353                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   354                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   355                              <1> ;Use the months table to get the number of days in a normal month as leap 
   356                              <1> ; years are added using the previous comment.
   357                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   358                              <1> ; a leap year using the table. If it is, add an extra day.
   359                              <1> .clkLeapYears:
   360 00002357 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   360 00002360 24282C30            <1>
   361 00002364 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   361 0000236D 585C60              <1>
   362                              <1> .clkMonths:
   363 00002370 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   363 00002379 1F1E1F              <1>
   364                              <1> ;COM Driver headers and main interrupt strat
   365                              <1> com1Intr:
   366 0000237C C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   367 00002383 EB19                <1>     jmp short comIntr
   368                              <1> com2Intr:
   369 00002385 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   370 0000238C EB10                <1>     jmp short comIntr
   371                              <1> com3Intr:
   372 0000238E C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   373 00002395 EB07                <1>     jmp short comIntr
   374                              <1> com4Intr:
   375 00002397 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   376                              <1> comIntr:
   377 0000239E 50                  <1>     push rax
   378 0000239F 53                  <1>     push rbx
   379 000023A0 51                  <1>     push rcx
   380 000023A1 52                  <1>     push rdx
   381 000023A2 56                  <1>     push rsi
   382 000023A3 57                  <1>     push rdi
   383 000023A4 488B1DE4FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   384 000023AB B003                <1>     mov al, 03h ;Unknown Command
   385 000023AD 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   386 000023B1 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   387                              <1> 
   388 000023B3 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   389 000023B6 3C04                <1>     cmp al, 4   ;Read Character(s)
   390 000023B8 7462                <1>     jz .comRead
   391 000023BA 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   392 000023BC 0F849B000000        <1>     jz .comNondestructiveRead   
   393 000023C2 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   394 000023C4 0F8484000000        <1>     jz .comReadInputStatus
   395 000023CA 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   396 000023CC 0F84B9000000        <1>     jz .comFlushInputBuffers
   397 000023D2 3C08                <1>     cmp al, 8
   398 000023D4 0F84DB000000        <1>     jz .comWrite
   399 000023DA 3C09                <1>     cmp al, 9
   400 000023DC 0F84D3000000        <1>     jz .comWrite
   401 000023E2 3C0A                <1>     cmp al, 0Ah
   402 000023E4 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   403 000023EA EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   404                              <1> .comErrorNoCount:
   405 000023EC B002                <1>     mov al, 02h ;Unknown device
   406 000023EE EB19                <1>     jmp short .comWriteErrorCode
   407                              <1> .comReadError:
   408 000023F0 BA0B000000          <1>     mov edx, 0Bh
   409                              <1> .comWriteError:
   410 000023F5 BA0A000000          <1>     mov edx, 0Ah
   411                              <1> .comError:
   412 000023FA 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   413 000023FD B902000000          <1>     mov ecx, 02h    ;Unknown device
   414 00002402 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   415 00002404 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   416 00002407 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   417                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   418 00002409 B480                <1>     mov ah, 80h ;Set error bit
   419 0000240B 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   420                              <1> .comExit:
   421 0000240F 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   422 00002415 5F                  <1>     pop rdi
   423 00002416 5E                  <1>     pop rsi
   424 00002417 5A                  <1>     pop rdx
   425 00002418 59                  <1>     pop rcx
   426 00002419 5B                  <1>     pop rbx
   427 0000241A 58                  <1>     pop rax
   428 0000241B C3                  <1>     ret
   429                              <1> 
   430                              <1> .comRead:
   431 0000241C B005                <1>     mov al, 05h ;Bad request structure length?
   432 0000241E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   433 00002421 75E6                <1>     jne .comWriteErrorCode
   434                              <1> 
   435 00002423 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   436 00002427 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   437                              <1> .cr1:
   438 00002429 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   439 0000242C 741B                <1>     je .cre2
   440                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   441 0000242E B802000000          <1>     mov eax, 02h    ;Recieve 
   442 00002433 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   443 00002439 6698                <1>     cbw     ;Zero extend to upper byte
   444 0000243B CD34                <1>     int 34h ;Recieve Char
   445 0000243D 72BB                <1>     jc .comError
   446 0000243F 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   447 00002442 74EA                <1>     je .cr11
   448 00002444 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   449 00002445 FFC1                <1>     inc ecx
   450 00002447 EBE0                <1>     jmp short .cr1
   451                              <1> .cre2:
   452 00002449 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   453 0000244C EBC1                <1>     jmp short .comExit
   454                              <1> 
   455                              <1> .comReadInputStatus:
   456 0000244E B005                <1>     mov al, 05h ;Bad request structure length?
   457 00002450 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   458 00002453 75B4                <1>     jne .comWriteErrorCode
   459 00002455 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   460 0000245B EBB2                <1>     jmp short .comExit
   461                              <1> 
   462                              <1> .comNondestructiveRead:
   463                              <1> ;Acts like a "read one character if there is one" function
   464 0000245D B005                <1>     mov al, 05h ;Bad request structure length?
   465 0000245F 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   466 00002462 75A5                <1>     jne .comWriteErrorCode
   467                              <1> .cndr1:
   468 00002464 B802000000          <1>     mov eax, 02h    ;Recieve 
   469 00002469 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   470 0000246F 6698                <1>     cbw     ;Zero extend to upper byte
   471 00002471 CD34                <1>     int 34h ;Recieve Char
   472 00002473 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   473 00002479 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   474 0000247C 7405                <1>     je .cndr2
   475 0000247E 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   476 00002481 EB8C                <1>     jmp short .comExit
   477                              <1> .cndr2:
   478 00002483 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   479 00002489 EB84                <1>     jmp short .comExit
   480                              <1> 
   481                              <1> .comFlushInputBuffers:
   482 0000248B B005                <1>     mov al, 05h ;Bad request structure length?
   483 0000248D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   484 00002490 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   485                              <1> .cfib0:
   486 00002496 8A1584000000        <1>     mov dl, byte [.comDevice]
   487 0000249C 6698                <1>     cbw
   488 0000249E B802000000          <1>     mov eax, 02h    ;Recieve
   489 000024A3 CD34                <1>     int 34h
   490 000024A5 0F8241FFFFFF        <1>     jc .comErrorNoCount
   491 000024AB 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   492 000024AE 75E6                <1>     jne .cfib0
   493 000024B0 E95AFFFFFF          <1>     jmp .comExit
   494                              <1> 
   495                              <1> .comWrite:
   496 000024B5 B005                <1>     mov al, 05h ;Bad request structure length?
   497 000024B7 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   498 000024BA 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   499                              <1> 
   500 000024C0 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   501 000024C4 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   502                              <1> .cw1: 
   503 000024C6 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   504 000024C9 7417                <1>     je .cw2
   505 000024CB AC                  <1>     lodsb   ;Get char into al, and inc rsi
   506 000024CC B401                <1>     mov ah, 01h ;Move function number into ah
   507 000024CE 8A154C000000        <1>     mov dl, byte [.comDevice]
   508 000024D4 6698                <1>     cbw     ;Zero extend to upper byte
   509 000024D6 CD34                <1>     int 34h ;Transmit char
   510 000024D8 0F821CFFFFFF        <1>     jc .comError
   511 000024DE FFC1                <1>     inc ecx
   512 000024E0 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   513                              <1> .cw2:
   514 000024E2 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   515 000024E5 E925FFFFFF          <1>     jmp .comExit
   516                              <1> 
   517                              <1> .comOutputStatus:
   518                              <1> ;Read MODEM status
   519 000024EA B005                <1>     mov al, 05h ;Bad request structure length?
   520 000024EC 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   521 000024EF 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   522                              <1> 
   523 000024F5 8A1525000000        <1>     mov dl, byte [.comDevice]
   524 000024FB 6698                <1>     cbw     ;Zero extend to upper byte
   525 000024FD B403                <1>     mov ah, 03h     ;Get status
   526 000024FF CD34                <1>     int 34h
   527 00002501 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   528 00002507 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   529 0000250C C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   530 0000250F F7D0                <1>     not eax      ;Bitwise inversion
   531 00002511 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   532 00002516 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   533 0000251B E9EFFEFFFF          <1>     jmp .comExit
   534 00002520 00                  <1> .comDevice   db 0
    35                                  %include "./Source/Drivers/diskDrv.asm"
    36                              <1> msdDriver:
    37 00002521 50                  <1>     push rax
    38 00002522 53                  <1>     push rbx
    39 00002523 51                  <1>     push rcx
    40 00002524 52                  <1>     push rdx
    41 00002525 56                  <1>     push rsi
    42 00002526 57                  <1>     push rdi
    43 00002527 55                  <1>     push rbp
    44 00002528 4150                <1>     push r8
    45 0000252A 488B1D5EFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    46 00002531 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    47 00002535 B003                <1>     mov al, drvBadCmd
    48 00002537 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    49 0000253D B001                <1>     mov al, drvBadUnit 
    50 0000253F 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    51 00002543 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    52 00002549 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    53 00002550 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    54 00002554 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    55 00002557 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    56 0000255B 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    57 0000255F D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    58 00002561 488D0D9A000000      <1>     lea rcx, .msdTable
    59 00002568 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    60 0000256C 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    61 0000256E 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    62 00002570 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    63 00002573 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    64                              <1> .msdDriverExit:
    65 00002575 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    66 0000257B 4158                <1>     pop r8
    67 0000257D 5D                  <1>     pop rbp
    68 0000257E 5F                  <1>     pop rdi
    69 0000257F 5E                  <1>     pop rsi
    70 00002580 5A                  <1>     pop rdx
    71 00002581 59                  <1>     pop rcx
    72 00002582 5B                  <1>     pop rbx
    73 00002583 58                  <1>     pop rax
    74 00002584 C3                  <1>     ret
    75                              <1> 
    76                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    77 00002585 4889FB              <1>     mov rbx, rdi
    78 00002588 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    79 0000258B 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    80 0000258D 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    81                              <1> ;Now fall through to general error
    82                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    83 00002590 B401                <1>     mov ah, 01h
    84 00002592 CD33                <1>     int 33h ;Read status of last operation
    85 00002594 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    86 00002597 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    87 00002599 7460                <1>     je .msdWriteErrorCode 
    88 0000259B B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    89 0000259D 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    90 000025A0 7459                <1>     je .msdWriteErrorCode 
    91 000025A2 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    92 000025A5 7454                <1>     je .msdWriteErrorCode
    93                              <1> ;Device Not Ready
    94 000025A7 B002                <1>     mov al, 02h  ;Device not ready code
    95 000025A9 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    96 000025AC 744D                <1>     je .msdWriteErrorCode
    97 000025AE 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    98 000025B2 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    99                              <1> ;Write Protected
   100 000025B6 30C0                <1>     xor al, al
   101 000025B8 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   102 000025BD 743C                <1>     je .msdWriteErrorCode
   103                              <1> ;CRC Error
   104 000025BF B004                <1>     mov al, 04h     ;CRC error code
   105 000025C1 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   106 000025C6 7433                <1>     je .msdWriteErrorCode
   107 000025C8 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   108 000025CD 742C                <1>     je .msdWriteErrorCode
   109 000025CF 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   110 000025D4 7425                <1>     je .msdWriteErrorCode
   111                              <1> ;Seek Error
   112 000025D6 B006                <1>     mov al, 06h     ;Seek error code
   113 000025D8 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   114 000025DB 741E                <1>     je .msdWriteErrorCode
   115                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   116                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   117 000025DD B007                <1>     mov al, 07h
   118 000025DF 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   119 000025E2 7417                <1>     je .msdWriteErrorCode
   120                              <1> ;Sector Not Found
   121 000025E4 B008                <1>     mov al, 08h     ;Sector not found code
   122 000025E6 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   123 000025E9 7410                <1>     je .msdWriteErrorCode
   124                              <1> ;Write faults
   125 000025EB B00A                <1>     mov al, 0Ah     ;Write fault
   126 000025ED 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   127 000025F0 7409                <1>     je .msdWriteErrorCode
   128                              <1> ;Read faults
   129 000025F2 B00B                <1>     mov al, 0Bh     ;Read fault
   130 000025F4 80F911              <1>     cmp cl, 11h     ;Read error
   131 000025F7 7402                <1>     je .msdWriteErrorCode
   132                              <1> ;General Errors
   133 000025F9 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   134                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   135 000025FB B480                <1>     mov ah, 80h ;Set error bit
   136 000025FD 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   137 00002601 C3                  <1>     ret ;Return to set done bit
   138                              <1> .msdTable:
   139 00002602 0000                <1>     dw 0                            ;Function 0
   140 00002604 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   141 00002606 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   142 00002608 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   143 0000260A 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   144 0000260C 0000                <1>     dw 0                            ;Function 5
   145 0000260E 0000                <1>     dw 0                            ;Function 6
   146 00002610 0000                <1>     dw 0                            ;Function 7
   147 00002612 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   148 00002614 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   149 00002616 0000                <1>     dw 0                            ;Function 10
   150 00002618 0000                <1>     dw 0                            ;Function 11
   151 0000261A C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   152 0000261C D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   153 0000261E ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   154 00002620 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   155 00002622 0000                <1>     dw 0                            ;Function 16
   156 00002624 0000                <1>     dw 0                            ;Function 17
   157 00002626 0000                <1>     dw 0                            ;Function 18
   158 00002628 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   159 0000262A 0000                <1>     dw 0                            ;Function 20
   160 0000262C 0000                <1>     dw 0                            ;Function 21
   161 0000262E 0000                <1>     dw 0                            ;Function 22
   162 00002630 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   163 00002632 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   164                              <1> 
   165                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   166                              <1> .msdMedChk:          ;Function 1
   167 00002634 B005                <1>     mov al, 05h ;Bad request structure length
   168 00002636 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   169 00002639 75C0                <1>     jne .msdWriteErrorCode
   170                              <1> 
   171 0000263B 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   172 00002640 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   173 00002647 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   174 0000264A F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   175 0000264D 753F                <1>     jnz .mmcNoChange
   176                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   177 0000264F B416                <1>     mov ah, 16h 
   178 00002651 CD33                <1>     int 33h
   179 00002653 0F8237FFFFFF        <1>     jc .msdGenDiskError
   180 00002659 80FC80              <1>     cmp ah, 80h
   181 0000265C 740E                <1>     je .mmcNoChangeLine
   182 0000265E 80FC86              <1>     cmp ah, 86h
   183 00002661 7409                <1>     je .mmcNoChangeLine
   184 00002663 84E4                <1>     test ah, ah ;No change?
   185 00002665 7427                <1>     jz .mmcNoChange
   186 00002667 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   187 0000266A 750D                <1>     jnz .mmcChange
   188                              <1> ;If nothing, fall through and test manually, should never happen though
   189                              <1> .mmcNoChangeLine:
   190                              <1> ;Now we test Media Descriptor
   191 0000266C 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   192 00002671 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   193 00002674 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   194 00002677 7410                <1>     je .mmcUnsure
   195                              <1> .mmcChange:
   196 00002679 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   197 0000267D 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   198 00002684 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   199                              <1>     ;Check here if there were any open handles on the device when it was changed
   200 00002688 C3                  <1>     ret
   201                              <1> .mmcUnsure:
   202 00002689 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   203 0000268D C3                  <1>     ret
   204                              <1> .mmcNoChange:
   205 0000268E C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   206 00002692 C3                  <1>     ret
   207                              <1> 
   208                              <1> 
   209                              <1> .msdBuildBPB:        ;Function 2
   210 00002693 B005                <1>     mov al, 05h ;Bad request structure length
   211 00002695 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   212 00002698 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   213                              <1> 
   214 0000269E 4889DE              <1>     mov rsi, rbx
   215 000026A1 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   216 000026A6 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   217 000026AD 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   218 000026B0 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   219 000026B4 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   220 000026B6 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   221 000026B9 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   222 000026BE CD33                <1>     int 33h
   223 000026C0 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   224                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   225 000026C6 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   226 000026CA 7418                <1>     je .mbbpb0
   227 000026CC 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   228 000026D0 7412                <1>     je .mbbpb0
   229 000026D2 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   230 000026D6 740C                <1>     je .mbbpb0
   231 000026D8 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   232 000026DC B007                <1>     mov al, 07h ;Unknown media error code
   233 000026DE 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   234                              <1> .mbbpb0:
   235 000026E4 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   236 000026E7 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   237 000026EC 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   238 000026F3 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   239 000026F7 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   240 000026FA 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   241 000026FE B90F000000          <1>     mov ecx, bpbEx_size/8
   242 00002703 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   243 00002706 C3                  <1>     ret
   244                              <1> .msdIOCTLRead:       ;Function 3, returns done
   245 00002707 B005                <1>     mov al, drvBadDrvReq
   246 00002709 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   247 0000270C 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   248 00002712 C3                  <1>     ret
   249                              <1> .msdRead:            ;Function 4
   250                              <1> ;Will read one sector at a time.
   251 00002713 B005                <1>     mov al, 05h ;Bad request structure length
   252 00002715 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   253 00002718 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   254                              <1> 
   255 0000271E 4889DF              <1>     mov rdi, rbx
   256 00002721 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   257                              <1> .msdr0:
   258 00002723 B682                <1>     mov dh, 82h ;LBA Read Sectors
   259 00002725 E841010000          <1>     call .msdBlkIOCommon
   260 0000272A 0F8255FEFFFF        <1>     jc .msdIOError
   261 00002730 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   262 00002738 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   263 00002740 FFC6                <1>     inc esi
   264 00002742 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   265 00002745 75DC                <1>     jne .msdr0
   266 00002747 4889FB              <1>     mov rbx, rdi
   267 0000274A C3                  <1>     ret
   268                              <1> .msdWrite:           ;Function 8
   269                              <1> ;Will write one sector at a time.
   270 0000274B B005                <1>     mov al, 05h ;Bad request structure length
   271 0000274D 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   272 00002750 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   273                              <1> 
   274 00002756 4889DF              <1>     mov rdi, rbx
   275 00002759 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   276                              <1> .msdw0:
   277 0000275B B683                <1>     mov dh, 83h ;LBA Write Sectors
   278 0000275D E809010000          <1>     call .msdBlkIOCommon
   279 00002762 0F821DFEFFFF        <1>     jc .msdIOError
   280 00002768 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   281 00002770 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   282 00002778 FFC6                <1>     inc esi
   283 0000277A 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   284 0000277D 75DC                <1>     jne .msdw0
   285 0000277F 4889FB              <1>     mov rbx, rdi
   286 00002782 C3                  <1>     ret
   287                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   288                              <1> ;Will write one sector at a time and then verify it.
   289 00002783 B005                <1>     mov al, 05h ;Bad request structure length
   290 00002785 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   291 00002788 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   292                              <1> 
   293 0000278E 4889DF              <1>     mov rdi, rbx
   294 00002791 31F6                <1>     xor esi, esi  ;Set counter to zero
   295                              <1> .msdwv0:
   296 00002793 B683                <1>     mov dh, 83h ;LBA Write Sectors
   297 00002795 E8D1000000          <1>     call .msdBlkIOCommon
   298 0000279A 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   299 000027A0 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   300 000027A2 E8C4000000          <1>     call .msdBlkIOCommon
   301 000027A7 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   302 000027AD 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   303 000027B5 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   304 000027BD FFC6                <1>     inc esi
   305 000027BF 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   306 000027C2 75CF                <1>     jne .msdwv0
   307 000027C4 4889FB              <1>     mov rbx, rdi
   308 000027C7 C3                  <1>     ret
   309                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   310 000027C8 B005                <1>     mov al, drvBadDrvReq
   311 000027CA 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   312 000027CD 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   313                              <1> 
   314 000027D3 C3                  <1>     ret
   315                              <1> .msdDevOpen:         ;Function 13
   316 000027D4 B005                <1>     mov al, drvBadDrvReq
   317 000027D6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   318 000027D9 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   319                              <1> 
   320 000027DF 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   321 000027E4 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   322 000027EB FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   323 000027EE C3                  <1>     ret
   324                              <1> .msdDevClose:        ;Function 14
   325 000027EF B005                <1>     mov al, drvBadDrvReq
   326 000027F1 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   327 000027F4 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   328                              <1> 
   329 000027FA 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   330 000027FF 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   331 00002806 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   332 00002809 C3                  <1>     ret
   333                              <1> .msdRemovableMedia:  ;Function 15
   334 0000280A B005                <1>     mov al, drvBadDrvReq
   335 0000280C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   336 0000280F 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   337                              <1> 
   338 00002815 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   339 0000281A 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   340 00002821 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   341 00002824 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   342 00002829 31D2                <1>     xor edx, edx    ;Busy bit clear
   343 0000282B A880                <1>     test al, 80h
   344 0000282D 0F44CA              <1>     cmovz ecx, edx
   345 00002830 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   346 00002834 C3                  <1>     ret
   347                              <1> .msdGenericIOCTL:    ;Function 19
   348 00002835 B005                <1>     mov al, drvBadDrvReq
   349 00002837 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   350 0000283A 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   351                              <1> 
   352 00002840 C3                  <1>     ret
   353                              <1> .msdGetLogicalDev:   ;Function 23
   354 00002841 B005                <1>     mov al, drvBadDrvReq
   355 00002843 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   356 00002846 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   357                              <1> 
   358 0000284C 8A0541000000        <1>     mov al, byte [.msdCurDev]
   359 00002852 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   360 00002855 C3                  <1>     ret
   361                              <1> .msdSetLogicalDev:   ;Function 24
   362 00002856 B005                <1>     mov al, drvBadDrvReq
   363 00002858 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   364 0000285B 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   365                              <1> 
   366 00002861 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   367 00002864 880529000000        <1>     mov byte [.msdCurDev], al
   368 0000286A C3                  <1>     ret
   369                              <1> 
   370                              <1> .msdBlkIOCommon:  ;Does block IO
   371                              <1> ;Called with rdi containing old rbx value and ah with function number
   372                              <1> ;rbp points to bpb
   373                              <1> ;Error handled by caller
   374                              <1> ;Sector count handled by caller
   375                              <1> ;Called with dh = BIOS function number
   376 0000286B 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   377 00002870 8A90[94280000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   378 00002876 31C9                <1>     xor ecx, ecx
   379 00002878 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   380 0000287B 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   381 0000287F 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   382 00002883 88F4                <1>     mov ah, dh
   383 00002885 B001                <1>     mov al, 01h ;Do one sector at a time 
   384 00002887 CD33                <1>     int 33h
   385 00002889 C3                  <1>     ret
   386                              <1> 
   387 0000288A 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   388                              <1> ;LASTDRIVE default is 5
   389                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   390                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   391 00002893 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   392                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   393 00002894 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   394 00002899 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   395 0000289E 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   395 000028A7 000000000000000000- <1>
   395 000028B0 000000000000000000- <1>
   395 000028B9 000000000000000000- <1>
   395 000028C2 00000000            <1>
   396 000028C6 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   396 000028CF 000000000000000000- <1>
   396 000028D8 000000000000000000- <1>
   396 000028E1 000000000000000000- <1>
   396 000028EA 000000000000000000- <1>
   396 000028F3 000000000000000000- <1>
   396 000028FC 000000000000000000- <1>
   396 00002905 000000000000000000- <1>
   396 0000290E 000000000000000000- <1>
   396 00002917 000000000000000000- <1>
   396 00002920 000000000000000000- <1>
   396 00002929 000000000000000000- <1>
   396 00002932 000000000000000000- <1>
   396 0000293B 000000000000000000- <1>
   396 00002944 000000000000000000- <1>
   396 0000294D 000000000000000000- <1>
   396 00002956 000000000000000000- <1>
   396 0000295F 000000000000000000- <1>
   396 00002968 000000000000000000- <1>
   396 00002971 000000000000000000- <1>
   396 0000297A 000000000000000000- <1>
   396 00002983 000000000000000000- <1>
   396 0000298C 000000000000000000- <1>
   396 00002995 000000000000000000- <1>
   396 0000299E 000000000000000000- <1>
   396 000029A7 000000000000000000- <1>
   396 000029B0 000000000000000000- <1>
   396 000029B9 000000000000000000- <1>
   396 000029C2 000000000000000000- <1>
   396 000029CB 000000000000000000- <1>
   396 000029D4 000000000000000000- <1>
   396 000029DD 000000000000000000- <1>
   396 000029E6 000000000000000000- <1>
   396 000029EF 000000000000000000- <1>
   396 000029F8 000000000000000000- <1>
   396 00002A01 000000000000000000- <1>
   396 00002A0A 000000000000000000- <1>
   396 00002A13 000000000000000000- <1>
   396 00002A1C 000000000000000000- <1>
   396 00002A25 000000000000000000- <1>
   396 00002A2E 000000000000000000- <1>
   396 00002A37 000000000000000000- <1>
   396 00002A40 000000000000000000- <1>
   396 00002A49 000000000000000000- <1>
   396 00002A52 000000000000000000- <1>
   396 00002A5B 000000000000000000- <1>
   396 00002A64 000000000000000000- <1>
   396 00002A6D 000000000000000000- <1>
   396 00002A76 000000000000000000- <1>
   396 00002A7F 000000000000000000- <1>
   396 00002A88 000000000000000000- <1>
   396 00002A91 000000000000000000- <1>
   396 00002A9A 000000000000000000- <1>
   396 00002AA3 000000000000000000- <1>
   396 00002AAC 000000000000000000- <1>
   396 00002AB5 000000000000000000- <1>
   396 00002ABE 000000000000000000- <1>
   396 00002AC7 000000000000000000- <1>
   396 00002AD0 000000000000000000- <1>
   396 00002AD9 000000000000000000- <1>
   396 00002AE2 000000000000000000- <1>
   396 00002AEB 000000000000000000- <1>
   396 00002AF4 000000000000000000- <1>
   396 00002AFD 000000000000000000- <1>
   396 00002B06 000000000000000000- <1>
   396 00002B0F 000000000000000000- <1>
   396 00002B18 000000000000        <1>
   397                              <1> 
   398                              <1> endptr equ $
    36                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    37                                  ;Paragraph alignment
    38                                  %include "./Source/BSS/dosDynaDataArea.asm"
    39                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    40                              <1> ; the MCB chain!
    41                              <1> ddaStart:
    42 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    43                              <1> 
    44                              <1> ;Create SFT header and corresponding array of five default sft entries
    45 00000010 <res Ah>            <1> firstSftHeader  resb sfth_size
    46 0000001A <res 43h>           <1> firstSft        resb sft_size
    47 0000005D <res 43h>           <1> secondSft       resb sft_size
    48 000000A0 <res 43h>           <1> thirdSft        resb sft_size
    49 000000E3 <res 43h>           <1> fourthSft       resb sft_size
    50 00000126 <res 43h>           <1> fifthSft        resb sft_size
    51                              <1> 
    52                              <1> ;Create DPB chain of first 5 available DPB slots
    53                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    54 00000169 <res 34h>           <1> firstDPB        resb dpb_size
    55 0000019D <res 34h>           <1> secondDPB       resb dpb_size
    56                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    57                              <1> ;Always jettison this space
    58 000001D1 <res 34h>           <1> thirdDPB        resb dpb_size
    59 00000205 <res 34h>           <1> fourthDPB       resb dpb_size
    60 00000239 <res 34h>           <1> fifthDPB        resb dpb_size 
    61                              <1> 
    62                              <1> ;Create a one drive CDS to keep track of drive A's current dir
    63                              <1> ;Replace once CONFGI.SYS has been read
    64 0000026D <res 5Bh>           <1> initCDS         resb cds_size 
    65                              <1> 
    66                              <1> 
    67 000002C8 <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    68 000002E8 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    69                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    70                              <1> dynamicDataAreaLength equ $ - ddaStart
