     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvExtFun   equ 40h ;If set, functions 13, 17, 18 supported (must be)
    73                              <1>     devDrvIOCTL2   equ 80h ;If set, IOCTL function 19 supported
    74                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    75                              <1>     devDrvIOCTL    equ 4000h ;If set, Generic IOCTL supported
    76                              <1>     devDrvChar     equ 8000h ;If set, Char device
    77                              <1> ;Bit 0 1=console input
    78                              <1> ;    1 1=console output (character devices)
    79                              <1> ;    2 1=NUL device
    80                              <1> ;    3 1=CLOCK device
    81                              <1> ;    4 1=INT 49 output (CON)
    82                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    83                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    84                              <1> ;   11 1=open/close/removable media supported (3.0+)
    85                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    86                              <1> ;      1=media descriptor in FAT required (block devices)
    87                              <1> ;   14 1=IOCTL supported
    88                              <1> ;   15 0=block device
    89                              <1> ;      1=character device
    90                              <1> 
    91                              <1> ;Driver structures
    92                              <1> 
    93                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    94                              <1> 
    95                              <1>     .hdrlen resb 1  ;Length of the request header
    96                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    97                              <1>     .cmdcde resb 1  ;Command code
    98                              <1>     .status resw 1  ;Status word
    99                              <1>     .devptr resq 1  ;Device queue pointer field
   100                              <1> 
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> struc drvReqHdr
   104                              <1>     drvReqHdrM
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   105                              <1> endstruc
   106                              <1> 
   107                              <1> struc initReqPkt  ;Init Request Packet
   108                              <1> 
   109                              <1>     drvReqHdrM   ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   110 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   111 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   112 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   113 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   118                              <1> 
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   120 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   121 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   122 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   129 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   130 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   131 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   132                              <1> 
   133                              <1> endstruc
   134                              <1> 
   135                              <1> struc ioReqPkt   ;IO Request Packet
   136                              <1> 
   137                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   138 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   139 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   140 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   141 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   142 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   143                              <1> 
   144                              <1> endstruc
   145                              <1> 
   146                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   147                              <1>     
   148                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   149 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc statusReqPkt   ;Status Request Packet
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   156                              <1> 
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc openReqPkt ;Open Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc closeReqPkt ;Close Device Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   180                              <1>      
   181                              <1> endstruc
   182                              <1> 
   183                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   184                              <1> 
   185                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   186 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   187 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   188 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   189 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   190 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   201                              <1>     
   202                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   203                              <1> 
   204                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   138                              <1>     ;If any of the three bits are set, then ALL three bits are set
   139                              <1>     ; in addition to whatever the user passed to search for.
   140                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   141                              <1> 
   142                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   143                              <1> 
   144 00000000 ??????              <1>     .jmpBoot                resb 3 
   145 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   146 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   147 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   148 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   149 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   150 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   151 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   152 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   153 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   154 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   155 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   156 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   157 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   158 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   159 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   160 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   161 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   162 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   163                              <1> 
   164                              <1> endstruc
   165                              <1> 
   166                              <1> struc FSInfo
   167                              <1> 
   168 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   169 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   170 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   171 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   172 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   173 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   174 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   175                              <1> 
   176                              <1> endstruc
     8                                  %include "./Source/Include/dosStruc.inc"
     9                              <1> 
    10                              <1> ;-------------------------------------------------------;
    11                              <1> ; This include file contains miscellaneous internal     ;
    12                              <1> ; SCP/DOS structures.                                   ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> 
    15                              <1> ;------------------------------------------------------------------------;
    16                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    17                              <1> ; its file system structure. This is used to locate files and structures
    18                              <1> ; on the device itself and to translate file requests to cluster chains
    19                              <1> ; to LBAs to pass to the disk driver..
    20                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    21                              <1> ; drivers Initialise routine has been called.
    22                              <1> ;------------------------------------------------------------------------;
    23                              <1> struc dpb        ;Drive Parameter Block
    24                              <1> 
    25 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    26 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    27 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    28 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    29 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    30 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    31 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    32 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    33 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    34 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    35 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    36 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    37                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    38 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    39 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    40 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    41 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    42 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    43 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    44                              <1> 
    45                              <1> endstruc
    46                              <1> 
    47                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    48                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    49                              <1> ;------------------------------------------------------------------------;
    50                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    51                              <1> ; All disk pathing requests go via the CDS for that drive.
    52                              <1> ; The default drive is the last accessed drive, this number is stored
    53                              <1> ; in the DOS data area.
    54                              <1> ; The CDS is stored as an array with the offset into the array being 
    55                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    56                              <1> ;
    57                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> struc cds       ;Current Directory structure
    60 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    61 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    62 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    63 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    64 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    65 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    66                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    67                              <1> ; another, we save the number of chars to skip to that deep level).
    68                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    69                              <1> ; Only affects for SUBST drives, not JOIN
    70                              <1> ; Flags: Bit 15 set = Network drive
    71                              <1> ;        Bit 14 set = Physical drive
    72                              <1> ;        Bit 13 set = JOIN'ed drive
    73                              <1> ;        Bit 12 set = SUBST'ed drive
    74                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    75                              <1> endstruc
    76                              <1> ;CDS equates
    77                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    78                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    79                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    80                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    81                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    82                              <1> ;------------------------------------------------------------------------;
    83                              <1> ; The SFT is a way to allow applications to open file handles to files 
    84                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    85                              <1> ; under the first header, and then a second header will be linked to the 
    86                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    87                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    88                              <1> ; using the FCBS= command. Default FCBS=5.
    89                              <1> ;
    90                              <1> ; A file handle describes the file, and the location within the file that
    91                              <1> ; we are reading. The file handle can be manipulated without the file
    92                              <1> ; being in memory, thus allowing the user to access data without needing 
    93                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    94                              <1> ; accessing devices, by treating them as files with their drivers 
    95                              <1> ; responding and translating the manipulations of the file handle itself.
    96                              <1> ; Neither the driver nor the application should see or use the SFT for
    97                              <1> ; the handle, as it is subject to change (and will change when file 
    98                              <1> ; sharing provisions are included). The DOS will make requests to the 
    99                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   100                              <1> ; track of the information in the SFT entry for that handle. 
   101                              <1> ;
   102                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   103                              <1> ; can point to the same file. It all depends on what the applications 
   104                              <1> ; want to do with the File.
   105                              <1> ;
   106                              <1> ; !!!!IMPORTANT!!!!
   107                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   108                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   109                              <1> ;
   110                              <1> ;Each SFT may look like this:
   111                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   112                              <1> ;            |                |
   113                              <1> ;       wNumFiles*sft    wNumFiles*sft
   114                              <1> ;
   115                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   116                              <1> ; System FCBs.
   117                              <1> ;
   118                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   119                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   120                              <1> ;
   121                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   122                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   123                              <1> ;------------------------------------------------------------------------;
   124                              <1> struc sfth   ;System file table header
   125                              <1> ; This is the SFT header.
   126                              <1> ; This structure comes before the start of the first file in the array/table.
   127 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   128 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc sft
   132                              <1> ;This is the file struc itself
   133 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   134 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   135 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   136 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   137 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   138 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   139 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   140 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   141 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   142 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   143 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   144 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   145 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   146 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   147 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   148 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   149 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   150 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   151 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   152                              <1> ;                           0 means no record
   153                              <1> endstruc
   154                              <1> ;Open Mode equates
   155                              <1> ;Access modes   Bits[2:0]
   156                              <1> ReadAccess      equ 0h
   157                              <1> WriteAccess     equ 1h
   158                              <1> RWAccess        equ 2h
   159                              <1> ;Bit 3 reserved 0
   160                              <1> ;Sharing modes  Bits[6:4]
   161                              <1> CompatShare     equ 0h
   162                              <1> denyRWShare     equ 10h
   163                              <1> denyWriteShare  equ 20h
   164                              <1> denyReadShare   equ 30h
   165                              <1> denyNoneShare   equ 40h
   166                              <1> netFCBShare     equ 70h
   167                              <1> ;Bit 7 reserved 0
   168                              <1> ;Bits 8-12 reserved 0
   169                              <1> 
   170                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   171                              <1> ;Buffering on writes
   172                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   173                              <1> ;FCB opened file?
   174                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   175                              <1> ;Attribute Byte
   176                              <1> readOnlyFile    equ 1h
   177                              <1> hiddenFile      equ 2h
   178                              <1> systemFile      equ 4h
   179                              <1> volumeLabel     equ 8h
   180                              <1> directoryFile   equ 10h ;Directory entry
   181                              <1> archiveFile     equ 20h
   182                              <1> ;Device Info equates
   183                              <1> ;For a block device, bits [5:0] contain the drive number
   184                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   185                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   186                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   187                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   188                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   189                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   190                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   191                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   192                              <1> devCharDev      equ 80h ;If set, it is a char device!
   193                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   194                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   195                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   196                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   197                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   198                              <1> 
   199                              <1> ;openAddress   equ DOSSEG:367Ah   
   200                              <1> ;createAddress equ DOSSEG:35E3h   
   201                              <1> ;------------------------------------------------------------------------;
   202                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   203                              <1> ; to an internal buffer, and then copying it to the specified location
   204                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   205                              <1> ; another request for the same sector from the same device is made, so 
   206                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   207                              <1> ; size, selected according to the largest detected sector size during 
   208                              <1> ; the initial loadup.
   209                              <1> ;
   210                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   211                              <1> ;
   212                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   213                              <1> ;------------------------------------------------------------------------;
   214                              <1> 
   215                              <1> struc bufferHdr
   216 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   217 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   218 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   219 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   220 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   221 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   222 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   223 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   224 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   225                              <1>     .dataarea:             ;Points to the start of the data area
   226                              <1> endstruc
   227                              <1> ;Buffer Flag equates
   228                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   229                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   230                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   231                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   232                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   233                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   234                              <1> ;Note! A buffer is marked as referenced only when the application 
   235                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   236                              <1> ;------------------------------------------------------------------------;
   237                              <1> ; Memory control block for each memory arena
   238                              <1> ;------------------------------------------------------------------------;
   239                              <1> struc mcb
   240 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   241 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   242 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   243 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   244                              <1>     .program:
   245                              <1> endstruc
   246                              <1> ;MCB equates
   247                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   248                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   249                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   250                              <1> mcbMarkCtn      equ "M"
   251                              <1> mcbMarkEnd      equ "Z"
   252                              <1> 
   253                              <1> memFirstFit     equ 0   ;First free block goes to application
   254                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   255                              <1> memLastFit      equ 2   ;Last free block goes to application
   256                              <1> 
   257                              <1> ;Owner = Para aligned address => Owning application PSP
   258                              <1> ;...To consider...
   259                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   260                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   261                              <1> ;------------------------------------------------------------------------;
   262                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   263                              <1> ; following order, thus allowing for return values to be placed in the 
   264                              <1> ; registers by accessing the caller register stack frame.
   265                              <1> ;------------------------------------------------------------------------;
   266                              <1> struc callerFrame
   267 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   268 00000008 ????????????????    <1>     .rbx    resq 1    
   269 00000010 ????????????????    <1>     .rcx    resq 1
   270 00000018 ????????????????    <1>     .rdx    resq 1
   271 00000020 ????????????????    <1>     .rsi    resq 1
   272 00000028 ????????????????    <1>     .rdi    resq 1
   273 00000030 ????????????????    <1>     .rbp    resq 1
   274 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   275 00000040 ????????????????    <1>     .r9     resq 1
   276                              <1> ;Pushed by Processor when invoked via Interrupt
   277 00000048 ????????????????    <1>     .rip    resq 1
   278 00000050 ????????????????    <1>     .cs     resq 1
   279 00000058 ????????????????    <1>     .flags  resq 1
   280                              <1> endstruc
   281                              <1> 
   282                              <1> struc dpl
   283                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   284                              <1> ; server calls
   285 00000000 ????????????????    <1>     .rax    resq 1
   286 00000008 ????????????????    <1>     .rbx    resq 1
   287 00000010 ????????????????    <1>     .rcx    resq 1
   288 00000018 ????????????????    <1>     .rdx    resq 1
   289 00000020 ????????????????    <1>     .rsi    resq 1
   290 00000028 ????????????????    <1>     .rdi    resq 1
   291 00000030 ????????????????    <1>     .r8     resq 1
   292 00000038 ????????????????    <1>     .r9     resq 1
   293 00000040 ????????????????    <1>     .align  resq 1
   294 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   295 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   296                              <1> endstruc
   297                              <1> 
   298                              <1> struc fcb
   299                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   300 00000000 ??                  <1>     .driveNum   resb 1
   301 00000001 ????????????????    <1>     .filename   resb 8
   302 00000009 ??????              <1>     .fileext    resb 3
   303 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   304                              <1> ;One block consists of 128 records, of size denoted in the below
   305 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   306 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   307 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   308 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   309 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   310 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   311 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   312 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   313 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   314                              <1>     ;If record size > 64, high byte is ignored.
   315                              <1>     ;Used for random read and write operations to find the right record
   316                              <1> endstruc
   317                              <1> 
   318                              <1> struc filename
   319                              <1> ;8.3 File name struct
   320 00000000 ????????????????    <1>     .fName  resb 8
   321 00000008 ??????              <1>     .fExt   resb 3
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   325 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   326 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   327 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   328 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   329 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   330 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   331 00000016 ????                <1>     .fileTime   resw 1  ;File time
   332 00000018 ????                <1>     .fileDate   resw 1  ;File date
   333 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   334 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc psp
   338 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   339 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   340 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   341 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   342 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   343 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   344 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   345 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   346 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   347 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   348 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   349 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   350 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   351 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   352                              <1> ;Extra handle arrays are grouped into a linked list
   353                              <1> ;The below are in the same place as in DOS
   354 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   355 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   356                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   357 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   358 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   359                              <1> endstruc
   360                              <1> 
   361                              <1> struc clkStruc
   362 00000000 ????                <1>     .dateWord   resw 1
   363 00000002 ??                  <1>     .minutes    resb 1
   364 00000003 ??                  <1>     .hours      resb 1
   365 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   366 00000005 ??                  <1>     .seconds    resb 1
   367                              <1> endstruc
   368                              <1> 
   369                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   370                              <1> ;for a space of 64Gb
   371                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   372                              <1> 
   373                              <1> ;Critical Error AH bitfield equates
   374                              <1> critRead    equ 0h
   375                              <1> critWrite   equ 1h
   376                              <1> critDOS     equ 0h
   377                              <1> critFAT     equ 2h
   378                              <1> critDir     equ 4h
   379                              <1> critData    equ 6h
   380                              <1> critFailOK  equ 8h
   381                              <1> critRetryOK equ 10h
   382                              <1> critIgnorOK equ 20h
   383                              <1> critCharDev equ 80h
   384                              <1> 
   385                              <1> critIgnore  equ 0
   386                              <1> critRetry   equ 1
   387                              <1> critAbort   equ 2
   388                              <1> critFail    equ 3
   389                              <1> 
   390                              <1> ;MISC ASCII control chars
   391                              <1> NUL equ 00h ;^@         | ASCII Null
   392                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   393                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   394                              <1> BEL equ 07h ;^G         | ASCII Bell
   395                              <1> BSP equ 08h ;^H         | ASCII Backspace
   396                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   397                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   398                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   399                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   400                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   401                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   402                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   403                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   404                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   405                              <1> SPC equ 20h ;Printable  | ASCII Space
   406                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   407                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   408                              <1> 
   409                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   410                              <1> ;Extended Ascii Codes
   411                              <1> eF1     equ 3Bh ;F1 second byte
   412                              <1> eF2     equ 3Ch ;F2 second byte
   413                              <1> eF3     equ 3Dh ;F3 second byte
   414                              <1> eF4     equ 3Eh ;F4 second byte
   415                              <1> eF5     equ 3Fh ;F5 second byte
   416                              <1> eF6     equ 40h ;F6 second byte
   417                              <1> eF7     equ 41h ;F7 second byte
   418                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   419                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   420                              <1> eIns    equ 52h ;Insert second byte
   421                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
     9                                  %include "./Source/Debug/debSym.inc"
    10                              <1> ;This file will include the debuging symbols
    11                              <1> 
    12                              <1> %define true 1
    13                              <1> %define false 0
    14                              <1> 
    15                              <1> ;Switch the DEBUG to false in production!
    16                              <1> %define DEBUG false
    17                              <1> %define DPBINFO false
    18                              <1> %define REGS false
    19                              <1> %define ENDSTATUS true
    20                              <1> %define ALLOCTEST false
    21                              <1> 
    22                              <1> 
    23                              <1> ;Use this space as the debug stack
    24                              <1> %define debStackTop 80000h
    10                                  %include "./Source/Include/dosError.inc"
    11                              <1> ;DOS Error codes
    12                              <1> 
    13                              <1> ;Extended Error Codes
    14                              <1> errInvFnc   equ 1   ;Invalid function number
    15                              <1> errFnf      equ 2   ;File not found
    16                              <1> errPnf      equ 3   ;Path not found
    17                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    18                              <1> errAccDen   equ 5   ;Access denied (to resource)
    19                              <1> errBadHdl   equ 6   ;Invalid handle
    20                              <1> errMCBbad   equ 7   ;MCB's destroyed
    21                              <1> errNoMem    equ 8   ;Insufficient memory
    22                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    23                              <1> errBadEnv   equ 10  ;Invalid environment
    24                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    25                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    26                              <1> errInvDat   equ 13  ;Invalid data
    27                              <1> ;           equ 14  ;Reserved
    28                              <1> errBadDrv   equ 15  ;Invalid drive specified
    29                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    30                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    31                              <1> errNoFil    equ 18  ;No more files
    32                              <1> ;The following are Driver error codes + 19
    33                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    34                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    35                              <1> errUnkUnt   equ 20  ;Unknown Unit
    36                              <1> errDrvNR    equ 21  ;Drive not ready
    37                              <1> errUnkCmd   equ 22  ;Unknown Command
    38                              <1> errCRCerr   equ 23  ;Data (CRC) error
    39                              <1> errBadRLn   equ 24  ;Bad request structure length
    40                              <1> errSekErr   equ 25  ;Seek error
    41                              <1> errUnkMed   equ 26  ;Unknown media type
    42                              <1> errSecNF    equ 27  ;Sector not Found
    43                              <1> errNoPap    equ 28  ;Printer out of paper
    44                              <1> errWF       equ 29  ;Write fault
    45                              <1> errRF       equ 30  ;Read fault
    46                              <1> errGF       equ 31  ;General fault
    47                              <1> ;----------------------------------------------
    48                              <1> ;The following two go inbetween the Disk errors
    49                              <1> errShrVio   equ 32  ;Sharing violations
    50                              <1> errLokVio   equ 33  ;File Lock violation
    51                              <1> ;----------------------------------------------
    52                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    53                              <1> errNoFCB    equ 35  ;FCB unavailable
    54                              <1> errShrFul   equ 36  ;Sharing buffer full
    55                              <1> 
    56                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    57                              <1> 
    58                              <1> errFilExist equ 80  ;File already exists
    59                              <1> errDirExist equ 82  ;Directory already exists
    60                              <1> errFI44     equ 83  ;Fail on INT 44h
    61                              <1> errRedir    equ 84  ;Too many levels of redirection
    62                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    63                              <1> errBadPass  equ 86  ;Bad password
    64                              <1> errBadParam equ 87  ;Bad parameter passed to request
    65                              <1> errNetWrite equ 88  ;Network Write Fault
    66                              <1> ;-----------------------------------------------------------------------------
    67                              <1> ;Error Loci
    68                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    69                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    70                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    71                              <1> eLocChr     equ 4   ;Serial/Character Device error
    72                              <1> eLocMem     equ 5   ;Related to RAM
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error Actions
    75                              <1> eActRet     equ 1   ;Retry
    76                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    77                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    78                              <1> eActAbt     equ 4   ;Abort with cleanup
    79                              <1> eActKil     equ 5   ;Abort without cleanup
    80                              <1> eActIgn     equ 6   ;Ignore error
    81                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    82                              <1> ;-----------------------------------------------------------------------------
    83                              <1> ;Error classes
    84                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    85                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    86                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    87                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    88                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    89                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    90                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    91                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    92                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    93                              <1> eClsLocked  equ 10  ;Resource Locked
    94                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    95                              <1> eClsClash   equ 12  ;Resource already exists!
    96                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  Segment .text align=1   ;Init code
    12                                  %define currSegVBase 0
    13                                  %include "./Source/Sysinit/sysInit.asm"
    14                              <1> ; We arrive here with the following values in the registers.
    15                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    16                              <1> ; dx  = Int 33h boot device number
    17                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    18                              <1> 
    19 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    20 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
    21 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
    22 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    23 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    24 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    25 0000001A F348A5              <1>     rep movsq   ;Copy over
    26 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    27 00000022 50                  <1>     push rax
    28 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    29                              <1> sysInitldr:
    30                              <1> ;Now the tough part, load DOS to 800
    31 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    32                              <1> .read:
    33 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    34 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    34 00000035 00                  <1>
    35 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    36 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    37 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    38 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    39 0000003F CD33                <1>     int 33h
    40 00000041 0F83B9010000        <1>     jnc initBegin   ;No error? Yay, DOS loaded.
    41 00000047 FFCE                <1>     dec esi
    42 00000049 75DE                <1>     jnz .read
    43 0000004B 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    44 00000052 B804130000          <1>     mov eax, 1304h
    45 00000057 CD30                <1>     int 30h
    46 00000059 CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    47 0000005B 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    47 00000064 6F6164204572726F72- <1>
    47 0000006D 0A0D00              <1>
    48 00000070 000000000000000000- <1>     db 100h-($-$$) dup 00h ;Fill with nulls  
    48 00000079 000000000000000000- <1>
    48 00000082 000000000000000000- <1>
    48 0000008B 000000000000000000- <1>
    48 00000094 000000000000000000- <1>
    48 0000009D 000000000000000000- <1>
    48 000000A6 000000000000000000- <1>
    48 000000AF 000000000000000000- <1>
    48 000000B8 000000000000000000- <1>
    48 000000C1 000000000000000000- <1>
    48 000000CA 000000000000000000- <1>
    48 000000D3 000000000000000000- <1>
    48 000000DC 000000000000000000- <1>
    48 000000E5 000000000000000000- <1>
    48 000000EE 000000000000000000- <1>
    48 000000F7 000000000000000000  <1>
    49                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    50                              <1>     ;Store space for a static PSP
    51 00000100 000000000000000000- <1>     db 100h dup 00h
    51 00000109 000000000000000000- <1>
    51 00000112 000000000000000000- <1>
    51 0000011B 000000000000000000- <1>
    51 00000124 000000000000000000- <1>
    51 0000012D 000000000000000000- <1>
    51 00000136 000000000000000000- <1>
    51 0000013F 000000000000000000- <1>
    51 00000148 000000000000000000- <1>
    51 00000151 000000000000000000- <1>
    51 0000015A 000000000000000000- <1>
    51 00000163 000000000000000000- <1>
    51 0000016C 000000000000000000- <1>
    51 00000175 000000000000000000- <1>
    51 0000017E 000000000000000000- <1>
    51 00000187 000000000000000000- <1>
    51 00000190 000000000000000000- <1>
    51 00000199 000000000000000000- <1>
    51 000001A2 000000000000000000- <1>
    51 000001AB 000000000000000000- <1>
    51 000001B4 000000000000000000- <1>
    51 000001BD 000000000000000000- <1>
    51 000001C6 000000000000000000- <1>
    51 000001CF 000000000000000000- <1>
    51 000001D8 000000000000000000- <1>
    51 000001E1 000000000000000000- <1>
    51 000001EA 000000000000000000- <1>
    51 000001F3 000000000000000000- <1>
    51 000001FC 00000000            <1>
    52                              <1> ;END OF FIRST SECTOR!!
    53                              <1> ;DOS SYSINIT BEGINS HERE
    54                              <1> ;First move the alignment of the DOSSEG to 4Kb
    55                              <1> initBegin:
    56 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    57 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    58 00000206 0F32                <1>     rdmsr
    59 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    60 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    61 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    62 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    63 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    64 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    65 00000221 89F8                <1>     mov eax, edi
    66 00000223 4889FA              <1>     mov rdx, rdi
    67 00000226 48C1EA20            <1>     shr rdx, 20h
    68 0000022A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    69                              <1> ;------------------------------------------------;
    70                              <1> ;              Connect Debugger                  ;
    71                              <1> ;------------------------------------------------;
    72                              <1> %if DEBUG
    73                              <1> ;Only connect if in debug mode
    74                              <1>     mov eax, 0C501h ;Connect debugger
    75                              <1>     int 35h
    76                              <1> %endif
    77                              <1> ;------------------------------------------------;
    78                              <1> ;           Sanitise the data area               ;
    79                              <1> ;------------------------------------------------;
    80                              <1> ; This call initialises ALL fields in the DOS    ;
    81                              <1> ; data area with 0's. Thus any fields, which     ;
    82                              <1> ; need to be initialised with a 0 value, are     ;
    83                              <1> ; initialised for free.                          ;
    84                              <1> ;------------------------------------------------;
    85 0000022C B9[16D90300]        <1>     mov ecx, dSegLen
    86 00000231 30C0                <1>     xor al, al
    87 00000233 57                  <1>     push rdi    ;Temp save rdi on the stack
    88 00000234 F3AA                <1>     rep stosb
    89 00000236 5F                  <1>     pop rdi
    90                              <1> ;------------------------------------------------;
    91                              <1> ;          Start saving Basic DOS data           ;
    92                              <1> ;------------------------------------------------;
    93 00000237 6444883C25-         <1>     mov byte fs:[bootDrive], r15b ;Save the boot drive in memory
    93 0000023C [10C00300]          <1>
    94                              <1> ;Copy DOS to its final resting place
    95 00000240 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    95 00000245 [00C00300]          <1>
    96 00000249 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    96 0000024E [08C00300]          <1>
    97 00000252 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    98 00000255 4881C7[16D90300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    99 0000025C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
   100 00000263 B900100000          <1>     mov ecx, 1000h
   101 00000268 F348A5              <1>     rep movsq
   102                              <1> 
   103 0000026B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   104 0000026D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   105 00000271 664489C0            <1>     mov ax, r8w
   106 00000275 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
   107 0000027D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
   108 00000285 64C60425[70C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
   108 0000028D 05                  <1>
   109                              <1>     ;mov byte fs:[numPhysVol], 0    ;Number of logical drives
   110 0000028E 64C60425[96C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 8 files, at start 5
   110 00000296 05                  <1>
   111 00000297 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
   111 0000029C [97C00300]1400      <1>
   112 000002A2 64C60425[71C00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
   112 000002AA 01                  <1>
   113                              <1>     ;If no detected Int 33h devices, halt 
   114 000002AB 49C1E810            <1>     shr r8, 2*8
   115 000002AF 4584C0              <1>     test r8b, r8b
   116 000002B2 0F84D90A0000        <1>     jz errorInit
   117                              <1> ;------------------------------------------------;
   118                              <1> ;          Add additional page tables            ;
   119                              <1> ;------------------------------------------------;
   120                              <1> ;This will allow for up to 64Gb of addressible space
   121 000002B8 4889EF              <1>     mov rdi, rbp
   122                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
   123 000002BB B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
   124 000002C0 57                  <1>     push rdi
   125 000002C1 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
   125 000002CA 00                  <1>
   126                              <1> pdtLoop:
   127 000002CB 48AB                <1>     stosq
   128 000002CD 480500002000        <1>     add rax, 200000h
   129 000002D3 FFC9                <1>     dec ecx
   130 000002D5 75F4                <1>     jnz pdtLoop
   131 000002D7 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   132                              <1> ;Now we add every 4kb page to the page directory pointer table
   133                              <1> ;15 4kb pages to consider
   134 000002D8 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   135 000002DB 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   136 000002DE 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   137 000002E5 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   138 000002EC B93C000000          <1>     mov ecx, 60
   139 000002F1 480D03000000        <1>     or rax, 3h      ;present and r/w
   140                              <1> pdptLoop:
   141 000002F7 48AB                <1>     stosq
   142 000002F9 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   143 000002FF FFC9                <1>     dec ecx
   144 00000301 75F4                <1>     jnz pdptLoop
   145 00000303 0F20DF              <1>     mov rdi, cr3
   146 00000306 0F22DF              <1>     mov cr3, rdi
   147                              <1> 
   148                              <1> ;------------------------------------------------;
   149                              <1> ;                   MCB inits                    ;
   150                              <1> ;------------------------------------------------;
   151                              <1> mcbInit:
   152 00000309 B820E80000          <1>     mov eax, 0E820h
   153 0000030E CD35                <1>     int 35h
   154                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   155 00000310 E804010000          <1>     call .mcbFindAddress
   156 00000315 7349                <1>     jnc .mcbi1  ;If found, proceed
   157                              <1>     ;Here, we try use E801h
   158 00000317 B801E80000          <1>     mov eax, 0E801h
   159 0000031C CD35                <1>     int 35h
   160 0000031E 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   161 00000321 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   162 00000324 85C0                <1>     test eax, eax
   163 00000326 741B                <1>     jz .worst
   164 00000328 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   165 0000032B C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   166 0000032E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   167 00000336 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   168 0000033E E909010000          <1>     jmp mcbBuild
   169                              <1> .worst:
   170                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   171 00000343 B800002000          <1>     mov eax, 200000h
   172 00000348 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   172 0000034D [08C00300]          <1>
   173 00000351 29D8                <1>     sub eax, ebx
   174 00000353 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   175 0000035B E9EC000000          <1>     jmp mcbBuild 
   176                              <1> .mcbi1:
   177 00000360 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   178 00000363 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   178 0000036C 00                  <1>
   179 0000036D 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   180 00000371 0F85C2000000        <1>     jne .mcbFail
   181 00000377 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   182                              <1>     ;PCI hole always exists so this value will always be a dword
   183 0000037B 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   184 00000383 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   185 00000386 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   186 00000389 4881FB00000001      <1>     cmp rbx, 1000000h  
   187 00000390 773C                <1>     ja .skipISA
   188                              <1> ;Here we deal with ISA hole issues
   189 00000392 B820E80000          <1>     mov eax, 0E820h
   190 00000397 CD35                <1>     int 35h
   191 00000399 48B800000001000000- <1>     mov rax, 1000000h
   191 000003A2 00                  <1>
   192 000003A3 E871000000          <1>     call .mcbFindAddress
   193 000003A8 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   194 000003AE 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   194 000003B7 00                  <1>
   195 000003B8 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   196 000003BC 0F858A000000        <1>     jne mcbBuild  
   197 000003C2 488B5808            <1>     mov rbx, qword [rax + 8]
   198 000003C6 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   199                              <1> .skipISA:
   200 000003CE B820E80000          <1>     mov eax, 0E820h
   201 000003D3 CD35                <1>     int 35h
   202 000003D5 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   202 000003DE 00                  <1>
   203 000003DF E835000000          <1>     call .mcbFindAddress
   204 000003E4 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   205 000003E6 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   205 000003EF 00                  <1>
   206 000003F0 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   207 000003F4 7556                <1>     jne mcbBuild   
   208 000003F6 488B5808            <1>     mov rbx, qword [rax + 8]
   209                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   210 000003FA 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   210 00000403 00                  <1>
   211 00000404 4839CB              <1>     cmp rbx, rcx
   212 00000407 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   213 0000040B 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   213 00000410 [1BC00300]          <1>
   214 00000414 E933000000          <1>     jmp mcbBuild
   215                              <1> .mcbFindAddress:
   216                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   217                              <1> ;Entry: rax = Address of arena to search for
   218                              <1> ;       rsi = Pointer to memory map
   219                              <1> ;       ecx = Number of 24 byte entries
   220                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   221                              <1> ;       CF=CY : value in rax not found
   222 00000419 56                  <1>     push rsi
   223 0000041A 51                  <1>     push rcx
   224 0000041B 50                  <1>     push rax
   225                              <1> .mfa0:
   226 0000041C 483B06              <1>     cmp rax, qword [rsi]
   227 0000041F 7410                <1>     je .mcbAddressFound
   228 00000421 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   229 00000428 FFC9                <1>     dec ecx
   230 0000042A 79F0                <1>     jns .mfa0
   231                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   232 0000042C 58                  <1>     pop rax
   233 0000042D 59                  <1>     pop rcx
   234 0000042E 5E                  <1>     pop rsi
   235 0000042F F9                  <1>     stc
   236 00000430 C3                  <1>     ret
   237                              <1> .mcbAddressFound:
   238 00000431 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   239 00000434 59                  <1>     pop rcx ;Pop old rax value off
   240 00000435 59                  <1>     pop rcx
   241 00000436 5E                  <1>     pop rsi
   242 00000437 F8                  <1>     clc
   243 00000438 C3                  <1>     ret
   244                              <1> .mcbFail:
   245 00000439 488D2D78090000      <1>     lea rbp, mcbFailmsg
   246 00000440 B804130000          <1>     mov eax, 1304h
   247 00000445 CD30                <1>     int 30h
   248 00000447 E945090000          <1>     jmp errorInit
   249                              <1> 
   250                              <1> mcbBuild:
   251                              <1> ;Actually build the MCB chain here
   252                              <1> ;Start by computing the difference between userbase and DOS area
   253                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   254 0000044C 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   254 00000451 [08C00300]          <1>
   255 00000455 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   256 0000045C 56                  <1>     push rsi    ;Save ptr
   257 0000045D 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   258 00000464 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   259 00000467 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   260 0000046F 5B                  <1>     pop rbx
   261 00000470 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   262 00000473 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   263 0000047B 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   264 00000483 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   265 00000486 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   266 00000489 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   266 0000048E [2BC00300]          <1>
   267                              <1> 
   268                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   269 00000492 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   269 0000049A 00000000            <1>
   270 0000049E 746E                <1>     jz .skipISA
   271                              <1>     ;Here if an ISA hole exists, place a MCB around it
   272 000004A0 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   273                              <1>     ;Remove one MCB worth of space from alloc
   274 000004A7 31C9                <1>     xor ecx, ecx
   275 000004A9 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   276 000004AC 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   277 000004B2 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   278 000004B5 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   279 000004B8 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   280 000004BB C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   281 000004BE 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   282 000004C6 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   282 000004CF 00                  <1>
   283 000004D0 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   284 000004D3 480510000000        <1>     add rax, mcb_size
   285 000004D9 4829C1              <1>     sub rcx, rax    ;Take their difference
   286 000004DC C1E904              <1>     shr ecx, 4
   287 000004DF 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   288 000004E2 C1E104              <1>     shl ecx, 4  ;Get bytes again
   289 000004E5 4881C310000000      <1>     add rbx, mcb_size
   290 000004EC 4801CB              <1>     add rbx, rcx
   291                              <1>     ;RBX should now be at 16Mb
   292 000004EF C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   293 000004F2 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   294 000004FA 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   295 00000502 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   296 00000505 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   297 0000050B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   298                              <1> .skipISA:
   299                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   300                              <1>     ;rbx points to a block with "Z" marker
   301 0000050E 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   301 00000516 00000000            <1>
   302 0000051A 7470                <1>     jz .exit
   303                              <1>     ;Add PCI hole MCB
   304 0000051C 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   305                              <1>     ;Remove one MCB worth of space from alloc
   306 00000523 31C9                <1>     xor ecx, ecx
   307 00000525 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   308 00000528 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   309 0000052E C1E104              <1>     shl ecx, 4  ;Get bytes
   310 00000531 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   311 00000534 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   312 00000537 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   313 0000053A 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   314 00000542 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   314 0000054B 00                  <1>
   315 0000054C 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   316 0000054F 480510000000        <1>     add rax, mcb_size
   317 00000555 4829C1              <1>     sub rcx, rax    ;Take their difference
   318 00000558 C1E904              <1>     shr ecx, 4
   319 0000055B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   320 0000055E C1E104              <1>     shl ecx, 4  ;Get bytes again
   321 00000561 4881C310000000      <1>     add rbx, mcb_size
   322 00000568 4801CB              <1>     add rbx, rcx
   323                              <1>     ;RBX should now be at 4Gb
   324 0000056B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   325 0000056E 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   326 00000576 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   326 0000057B [1BC00300]          <1>
   327 0000057F 48C1E904            <1>     shr rcx, 4
   328 00000583 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   329 00000589 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   330                              <1> .exit:
   331                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   332 0000058C 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   333                              <1> ;------------------------------------------------;
   334                              <1> ;          Kernel inits and adjustments          ;
   335                              <1> ;------------------------------------------------;
   336                              <1> ;Adjust Interrupt Entries Int 40h-49h
   337                              <1> adjInts:
   338 00000593 B340                <1>     mov bl, 40h
   339 00000595 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   340 0000059A CD35                <1>     int 35h
   341 0000059C B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   342 000005A1 488D3D7F080000      <1>     lea rdi, intData
   343 000005A8 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   344                              <1> .ai0:
   345 000005AA B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   346 000005AF 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   347 000005B2 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   348                              <1> .ai1:
   349 000005B5 CD35                <1>     int 35h
   350 000005B7 4881C708000000      <1>     add rdi, 8
   351 000005BE FFC1                <1>     inc ecx
   352 000005C0 81F950000000        <1>     cmp ecx, 50h
   353 000005C6 75E2                <1>     jne .ai0
   354                              <1> 
   355                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   356                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   357                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   358                              <1>     %if DEBUG
   359                              <1> debugPopUpMsg:
   360                              <1>     push rbx
   361                              <1>     push rbp
   362                              <1>     push rcx
   363                              <1>     push rdx
   364                              <1>     mov ecx, 53 ;A large number of lines
   365                              <1>     xor edx, edx    ;COM 1
   366                              <1> .cls:
   367                              <1>     mov eax, 010Ah ;Transmit Line feed
   368                              <1>     int 34h
   369                              <1>     dec ecx
   370                              <1>     jnz .cls
   371                              <1>     lea rbx, qword [debPrintNullString + rbp]
   372                              <1>     lea rbp, .msg
   373                              <1>     call rbx
   374                              <1>     jmp short .exit
   375                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   376                              <1> .exit:
   377                              <1>     pop rdx
   378                              <1>     pop rcx
   379                              <1>     pop rbp
   380                              <1>     pop rbx
   381                              <1>     %endif
   382                              <1> 
   383                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   384 000005C8 488D15C2070000      <1>     lea rdx, errorInit ;Get segment start address
   385 000005CF B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   386 000005D4 CD41                <1>     int 41h
   387 000005D6 488D15B4070000      <1>     lea rdx, errorInit ;Get segment start address
   388 000005DD B844250000          <1>     mov eax, 2544h
   389 000005E2 CD41                <1>     int 41h
   390                              <1> ;------------------------------------------------;
   391                              <1> ;          Driver Adjustments and inits          ;
   392                              <1> ;------------------------------------------------;
   393                              <1> ;Modify the pointers in nData before putting them in the data area
   394 000005E4 48012DBC080000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   395 000005EB 48012DBF080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   396 000005F2 48012DC0080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   397                              <1> ;Copy the Null driver to its location in Sysvars
   398 000005F9 B922000000          <1>     mov ecx, drvHdr_size
   399 000005FE 488D35A2080000      <1>     lea rsi, qword [nData]
   400 00000605 488DBD[73C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   401 0000060C F3A4                <1>     rep movsb   
   402                              <1> 
   403                              <1> ;Adjust the addresses in the other driver headers 
   404 0000060E 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   404 00000610 [1F48000000000000]  <1>
   405 00000618 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   406 0000061D 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   407                              <1> adjDrivers:
   408 00000621 E84F070000          <1>     call adjustDrvHdr
   409 00000626 E2F9                <1>     loop adjDrivers
   410                              <1> 
   411                              <1> ;Open NUL
   412                              <1> ;NUL opened
   413                              <1> ;Open CON
   414                              <1> conInit:    ;Rather than keeping this resident... do it here
   415                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   416 00000628 488D95[0A4B0000]    <1>     lea rdx, qword [rbp + fastOutput]
   417 0000062F B849250000          <1>     mov eax, 2549h
   418 00000634 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   419 00000636 488D95[124B0000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   420 0000063D B83B250000          <1>     mov eax, 253Bh
   421 00000642 CD41                <1>     int 41h ;Hook int 3Bh
   422                              <1> .ci0:
   423 00000644 B401                <1>     mov ah, 01      ;Get buffer status
   424 00000646 CD36                <1>     int 36h
   425 00000648 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   426 0000064A 30E4                <1>     xor ah, ah
   427 0000064C CD36                <1>     int 36h ;Read key to flush from buffer
   428 0000064E EBF4                <1>     jmp short .ci0
   429                              <1> .ci1:
   430 00000650 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   431 00000655 CD30                <1>     int 30h
   432 00000657 B402                <1>     mov ah, 02h
   433 00000659 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   434 0000065B 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   435 0000065D CD30                <1>     int 30h
   436 0000065F B707                <1>     mov bh, 07h     ;Grey/Black attribs
   437 00000661 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   438 00000666 CD30                <1>     int 30h
   439                              <1> 
   440                              <1>     ;Save ptr to ConHdr in Sysvars
   441 00000668 488D85[1F480000]    <1>     lea rax, qword [rbp + conHdr]
   442 0000066F 6448890425-         <1>     mov qword fs:[vConPtr], rax
   442 00000674 [4BC00300]          <1>
   443                              <1> 
   444                              <1>     ;Fix the ext ESC function handler address
   445 00000678 488D85[E1220000]    <1>     lea rax, qword [rbp + editKeys]
   446 0000067F 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   446 00000684 [59000000]          <1>
   447                              <1> 
   448                              <1> ;CLOCK init prock
   449                              <1> ;Set the time and date using the RTC (if present)
   450                              <1> clkInit:
   451                              <1>    ;Save ptr to ClkHdr in Sysvars first
   452 00000688 488D85[85480000]    <1>     lea rax, qword [rbp + clkHdr]
   453 0000068F 6448890425-         <1>     mov qword fs:[clockPtr], rax
   453 00000694 [43C00300]          <1>
   454                              <1> ;CH - Hours, in BCD
   455                              <1> ;CL - Minutes, in BCD
   456                              <1> ;DH - Seconds, in BCD
   457 00000698 B402                <1>     mov ah, 02  ;Read RTC Time
   458 0000069A CD3A                <1>     int 3Ah
   459 0000069C 7271                <1>     jc .clkEnd  ;if error, just exit
   460                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   461 0000069E 0FB6C5              <1>     movzx eax, ch   ;Hours
   462 000006A1 E84D000000          <1>     call .bcd2Bin
   463 000006A6 88C5                <1>     mov ch, al
   464 000006A8 0FB6C1              <1>     movzx eax, cl     ;Mins
   465 000006AB E843000000          <1>     call .bcd2Bin
   466 000006B0 88C1                <1>     mov cl, al
   467 000006B2 0FB6C6              <1>     movzx eax, dh   ;Seconds
   468 000006B5 E839000000          <1>     call .bcd2Bin
   469 000006BA 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   470 000006BC 89C2                <1>     mov edx, eax
   471 000006BE B42D                <1>     mov ah, 2Dh ;DOS Set Time
   472 000006C0 CD41                <1>     int 41h
   473                              <1> ;Now get the date from RTC
   474                              <1> ;CL - Year, in BCD
   475                              <1> ;DH - Month, in BCD
   476                              <1> ;DL - Day, in BCD
   477 000006C2 B404                <1>     mov ah, 04  ;Read RTC Date
   478 000006C4 CD3A                <1>     int 3Ah
   479 000006C6 7247                <1>     jc .clkEnd
   480                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   481 000006C8 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   482 000006CB E823000000          <1>     call .bcd2Bin
   483 000006D0 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   484 000006D3 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   485 000006D9 0FB6C6              <1>     movzx eax, dh   ;Get Months
   486 000006DC E812000000          <1>     call .bcd2Bin
   487 000006E1 88C6                <1>     mov dh, al  
   488 000006E3 0FB6C2              <1>     movzx eax, dl   ;Get day
   489 000006E6 E808000000          <1>     call .bcd2Bin
   490 000006EB 88C2                <1>     mov dl, al
   491 000006ED B42B                <1>     mov ah, 2Bh ;DOS Set Date
   492 000006EF CD41                <1>     int 41h
   493 000006F1 EB1C                <1>     jmp short .clkEnd
   494                              <1> .bcd2Bin:
   495                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   496 000006F3 51                  <1>     push rcx
   497 000006F4 89C1                <1>     mov ecx, eax
   498 000006F6 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   499 000006FB 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   500 00000701 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   501 00000704 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   502                              <1> .b2blp:
   503 00000707 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   504 00000709 FFC9                <1>     dec ecx
   505 0000070B 75FA                <1>     jnz .b2blp
   506                              <1> .b2bexit:
   507 0000070D 59                  <1>     pop rcx
   508 0000070E C3                  <1>     ret
   509                              <1> .clkEnd:
   510                              <1> ;------------------------------------------------;
   511                              <1> ;         Link DOS to temporary Buffer           ;
   512                              <1> ;------------------------------------------------;
   513                              <1> tempBufferInit:
   514 0000070F 488DBD[19010000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   515 00000716 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   515 0000071B [55C00300]          <1>
   516 0000071F 31C0                <1>     xor eax, eax
   517 00000721 48FFC8              <1>     dec rax
   518 00000724 48AB                <1>     stosq   ;.nextBufPtr, end of list
   519 00000726 AA                  <1>     stosb   ;.driveNumber, Free entry
   520 00000727 48FFC0              <1>     inc rax
   521 0000072A AA                  <1>     stosb   ;.bufferFlags, No flags
   522                              <1> ;------------------------------------------------;
   523                              <1> ;         Init msd driver, create DPB            ;
   524                              <1> ;------------------------------------------------;
   525                              <1> storageInits:
   526                              <1> ;First save dpb pointer in sysvars
   527 0000072B 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   528 00000732 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   528 00000737 [33C00300]          <1>
   529                              <1> ;Open Mass Storage
   530                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   531                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   532                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   533                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   534                              <1>     ;mov al, byte fs:[numPhysVol]
   535                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   536                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   537                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   538                              <1>     ;Check if it returned OK first!
   539                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   540                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   541                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   542                              <1>     ;mov byte fs:[numPhysVol], al
   543                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   544                              <1> 
   545                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   546 0000073B E889070000          <1>     call diskInit
   547 00000740 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   548 00000743 648A0425[6FC00300]  <1>     mov al, byte fs:[numPhysVol]
   549 0000074B 488D95[A5510000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   550 00000752 30C9                <1>     xor cl, cl  ;Clear counter
   551 00000754 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   551 00000759 [33C00300]          <1>
   552                              <1> .si0:   
   553 0000075D 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   554 00000760 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   555 00000762 CD41                <1>     int 41h
   556                              <1> ;Add other data to DPB
   557 00000764 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   558 00000767 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   559 0000076A 50                  <1>     push rax
   560 0000076B 488D87[A7480000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   561 00000772 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   562 00000776 58                  <1>     pop rax
   563 00000777 FEC1                <1>     inc cl
   564 00000779 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   565 0000077B 7416                <1>     je .si1
   566 0000077D 50                  <1>     push rax
   567 0000077E 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   568 00000782 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   569 00000786 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   570 00000789 58                  <1>     pop rax
   571 0000078A 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   572 00000791 EBCA                <1>     jmp short .si0
   573                              <1> .si1:
   574                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   575 00000793 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   576 0000079B 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   577                              <1> ;------------------------------------------------;
   578                              <1> ;          Find largest sector size              ;
   579                              <1> ;------------------------------------------------;
   580                              <1> sectorSizeSearch:
   581                              <1> ;Done by reading BPB's for each drive
   582 0000079E 488D9D[A5510000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   583                              <1>     
   584                              <1>     ;Go thru each block individually
   585 000007A5 31C0                <1>     xor eax, eax
   586 000007A7 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   587                              <1> .findLargest:
   588 000007AA 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   589 000007AE 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   590 000007B3 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   591 000007BA 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   592 000007BD 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   593 000007C0 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   594 000007C2 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   594 000007C7 [53C00300]          <1>
   595                              <1>     
   596                              <1> ;------------------------------------------------;
   597                              <1> ;                 Temp CDS inits                 ;
   598                              <1> ;------------------------------------------------;
   599                              <1> tempCDS:
   600                              <1> ;Build a temporary CDS for Drive A to use it for booting
   601 000007CB 488DBD[FBC50300]    <1>     lea rdi, qword [rbp + tmpCDS]  ;Use Temp CDS in the SDA
   602 000007D2 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   602 000007D7 [5DC00300]          <1>
   603                              <1>     ;"A:\"+NULL char (in rev order because LITTLE ENDIAN!!)
   604 000007DB C707413A5C00        <1>     mov dword [rdi + cds.sCurrentPath], 005C3A41h  
   605 000007E1 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsValidDrive   ;Set the drive to be valid!
   606 000007E7 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   606 000007EC [33C00300]          <1>
   607 000007F0 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   608 000007F4 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   609                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   610                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   611                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   612                              <1>     ;cds.dStartCluster is 0 since we zero-ed the data area earlier
   613                              <1> ;------------------------------------------------;
   614                              <1> ;     Set up general PSP areas and DOS vars      ;
   615                              <1> ;------------------------------------------------;
   616                              <1> ;Additional DOS Vars init
   617                              <1>     ;xor eax, eax
   618                              <1>     ;mov byte fs:[currentDrv], al ;Current Drive = Drive A
   619                              <1>     ;mov byte fs:[breakFlag], al  ;Break off
   620                              <1>     ;mov byte fs:[verifyFlag], al ;Write only
   621                              <1>     ;mov byte fs:[singleDrv], al  ;Only used on single drive systems
   622                              <1>     ;mov byte fs:[critErrFlag], al   ;Not in critical error
   623                              <1>     ;mov byte fs:[inDOS], al      ;Not in DOS
   624 000007FA 64C60425[6BC30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   624 00000802 FF                  <1>
   625                              <1>     ;mov word fs:[errorLevel], ax   ;Last return code is 0, no error
   626                              <1>     ;mov byte fs:[allocStrat], al    ;First Fit
   627 00000803 64C60425[33C30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   627 0000080B 2F                  <1>
   628                              <1>     ;mov byte fs:[vConUnread], al   ;vCon has no unread data!
   629                              <1> 
   630                              <1> ;Set network machine name to... nothing!
   631 0000080C 488DBD[38C30300]    <1>     lea rdi, qword [rbp + machineName]
   632 00000813 B910000000          <1>     mov ecx, 10h    ;16 chars long
   633 00000818 B020                <1>     mov al, SPC ;Space char
   634 0000081A F3AA                <1>     rep stosb   ;Fill with space chars
   635                              <1>     ;xor al, al
   636                              <1>     ;mov byte fs:[serverCnt], al ;Set server call count to zero
   637                              <1>     ;mov word fs:[machineNum], ax   ;Clear machine number
   638                              <1> 
   639                              <1> ;Patch Data Table init
   640 0000081C 488DBD[48C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   641 00000823 488D85[E2400000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   642 0000082A 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   643 0000082C 488D85[EC400000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   644 00000833 48AB                <1>     stosq
   645 00000835 488D85[F6400000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   646 0000083C 48AB                <1>     stosq
   647 0000083E 488D85[00410000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   648 00000845 48AB                <1>     stosq
   649                              <1> 
   650                              <1> ;Initial PSP Init
   651 00000847 488D1DB2F8FFFF      <1>     lea rbx, qword [tempPSP]
   652 0000084E 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   652 00000853 [81C30300]          <1>
   653 00000857 53                  <1>     push rbx
   654 00000858 4881C380000000      <1>     add rbx, psp.dta
   655 0000085F 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   655 00000864 [79C30300]          <1>
   656 00000868 5B                  <1>     pop rbx
   657 00000869 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   658 0000086E C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   659 00000875 48C7430200000000    <1>     mov qword [rbx + psp.allocSize], 0    ;Size of allocation (dummy value)
   660 0000087D 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   661 00000881 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   662 00000885 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   663 00000889 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   663 00000892 FF                  <1>
   664 00000893 48AB                <1>     stosq   ;8 bytes
   665 00000895 31C0                <1>     xor eax, eax
   666 00000897 50                  <1>     push rax    ;Save 0 on the stack
   667 00000898 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   668 0000089B 48AB                <1>     stosq   ;16 bytes
   669 0000089D AB                  <1>     stosd   ;20 bytes
   670 0000089E 58                  <1>     pop rax ;Get 0 back
   671 0000089F 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   672 000008A7 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   673 000008AB C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   674 000008AF 4889DA              <1>     mov rdx, rbx
   675 000008B2 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   676 000008B7 CD41                <1>     int 41h
   677 000008B9 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   678 000008BD B843350000          <1>     mov eax, 3543h
   679 000008C2 CD41                <1>     int 41h
   680 000008C4 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   681 000008C8 B844350000          <1>     mov eax, 3544h
   682 000008CD CD41                <1>     int 41h
   683 000008CF 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   684                              <1> 
   685 000008D3 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   686 000008D8 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   687 000008DC F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   688                              <1> ;------------------------------------------------;
   689                              <1> ;          Default File Handle Creation          ;
   690                              <1> ;                                                ;
   691                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   692                              <1> ;------------------------------------------------;
   693                              <1> defaultFileHandles:
   694                              <1> ;Fill in the default file table entries
   695 000008DE 488D9D[99C00300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   696 000008E5 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   697 000008EC 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   698 000008F2 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   698 000008F7 [3BC00300]          <1>
   699 000008FB 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   699 00000904 20                  <1>
   700                              <1> ;GOTO FIRST FILE 
   701 00000905 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   702                              <1> ;Write AUX
   703 0000090C 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   704 00000911 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   705 00000917 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   706 0000091B C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   707                              <1>     ;No EOF when reading from the device
   708 0000091F 488B85[41480000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   709 00000926 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   710                              <1>     ;Ignore disk related fields and Date/Time of open
   711 0000092A 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   712                              <1>     ;11 chars in 8.3 name
   713 0000092E 488D35D2040000      <1>     lea rsi, auxName
   714 00000935 B903000000          <1>     mov ecx, 3
   715 0000093A F3A4                <1>     rep movsb   ;Move the three bytes
   716 0000093C 4889D0              <1>     mov rax, rdx
   717 0000093F 48AB                <1>     stosq   ;Eight spaces left to print
   718 00000941 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   718 00000946 [81C30300]          <1>
   719 0000094A 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   720                              <1> ;GOTO NEXT ENTRY
   721 0000094E 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   722                              <1>     ;Write CON
   723 00000955 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   724 0000095A 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   725 00000960 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   726 00000964 C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   727                              <1>     ;No EOF when reading from the device
   728 00000968 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   728 0000096D [4BC00300]          <1>
   729 00000971 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   730                              <1>     ;Ignore disk related fields and Date/Time of open
   731 00000975 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   732                              <1>     ;11 chars in 8.3 name
   733 00000979 488D3583040000      <1>     lea rsi, conName
   734 00000980 B903000000          <1>     mov ecx, 3
   735 00000985 F3A4                <1>     rep movsb   ;Move the three bytes
   736 00000987 4889D0              <1>     mov rax, rdx
   737 0000098A 48AB                <1>     stosq   ;Eight spaces left to print
   738 0000098C 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   738 00000991 [81C30300]          <1>
   739 00000995 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   740                              <1> ;GOTO NEXT ENTRY
   741 00000999 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   742                              <1> ;Write PRN
   743 000009A0 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   744 000009A5 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   745 000009AB C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   746 000009AF C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   747                              <1>     ;Want EOF when reading from to the device
   748 000009B3 488B85[63480000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   749 000009BA 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   750                              <1>     ;Ignore disk related fields and Date/Time of open
   751 000009BE 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   752                              <1>     ;11 chars in 8.3 name
   753 000009C2 488D3542040000      <1>     lea rsi, prnName
   754 000009C9 B903000000          <1>     mov ecx, 3
   755 000009CE F3A4                <1>     rep movsb   ;Move the three bytes
   756 000009D0 4889D0              <1>     mov rax, rdx
   757 000009D3 48AB                <1>     stosq   ;Eight spaces left to print
   758 000009D5 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   758 000009DA [81C30300]          <1>
   759 000009DE 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   760                              <1> ;Zero word 0 of entry 4 and 5
   761 000009E2 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   762 000009E9 31C0                <1>     xor eax, eax
   763                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   764                              <1>     ; which is ok as these are empty entries, ready to be used)
   765 000009EB 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   766 000009ED 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   767 000009F4 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   768                              <1> ;------------------------------------------------;
   769                              <1> ;               Load CONFIG.SYS                  ;
   770                              <1> ;------------------------------------------------;
   771                              <1> ;------------------------------------------------;
   772                              <1> ;              Process CONFIG.SYS                ;
   773                              <1> ;------------------------------------------------;
   774                              <1> ;------------------------------------------------;
   775                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   776                              <1> ;------------------------------------------------;
   777                              <1> ;------------------------------------------------;
   778                              <1> ;   Setup Final Data Areas With Overrides from   ;
   779                              <1> ;                  CONFIG.SYS                    ;
   780                              <1> ;------------------------------------------------;
   781                              <1> ;------------------------------------------------;
   782                              <1> ;           Load Command interpreter             ;
   783                              <1> ;------------------------------------------------;
   784 000009F6 488D15A5030000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   785 000009FD B409                <1>     mov ah, 09h
   786 000009FF CD41                <1>     int 41h
   787                              <1> ;Resize DOS allocation before loading COMMAND.COM
   788 00000A01 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   788 00000A06 [2BC00300]          <1>
   789 00000A0A 4981C010000000      <1>     add r8, mcb.program
   790 00000A11 BB49110000          <1>     mov ebx, dynamicDataAreaLength
   791 00000A16 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   792 00000A19 FFC3                <1>     inc ebx
   793 00000A1B B44A                <1>     mov ah, 4Ah
   794 00000A1D CD41                <1>     int 41h
   795                              <1>     
   796                              <1>     %if DEBUG && ALLOCTEST
   797                              <1> ;Test Allocation, Growth and Deallocation
   798                              <1>     mov r15, qword fs:[currentPSP]
   799                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   800                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   801                              <1>     mov ah, 48h ;Allocate
   802                              <1>     int 41h
   803                              <1> 
   804                              <1>     mov byte [rax - 10h], 0 ;Trash chain
   805                              <1>     mov r8, rax ;Move the pointer to r8
   806                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   807                              <1>     mov ah, 4Ah
   808                              <1>     int 41h
   809                              <1> 
   810                              <1>     mov ah, 49h ;Free r8
   811                              <1>     int 41h
   812                              <1>     mov qword fs:[currentPSP], r15
   813                              <1>     %endif
   814                              <1> 
   815                              <1>     %if ENDSTATUS
   816                              <1> debugFinal:
   817                              <1>     ;Print system state
   818 00000A1F 55                  <1>     push rbp    ;Only rbp really matters here
   819 00000A20 4989E8              <1>     mov r8, rbp
   820                              <1> 
   821 00000A23 488D2DD0020000      <1>     lea rbp, .msg2
   822 00000A2A 4D8D88[84040000]    <1>     lea r9, qword [r8 + debPrintNullString]
   823 00000A31 41FFD1              <1>     call r9
   824                              <1> 
   825 00000A34 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   826 00000A3B 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   826 00000A40 [08C00300]          <1>
   827                              <1> 
   828 00000A44 4D8D88[BF070000]    <1>     lea r9, qword [r8 + overlayQword]
   829 00000A4B 41FFD1              <1>     call r9
   830                              <1> 
   831 00000A4E 4881C31B000000      <1>     add rbx, 19+8
   832 00000A55 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   832 00000A5A [00C00300]          <1>
   833 00000A5E 41FFD1              <1>     call r9
   834                              <1> 
   835 00000A61 4881C31B000000      <1>     add rbx, 19+8
   836 00000A68 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   836 00000A6D [2BC00300]          <1>
   837 00000A71 41FFD1              <1>     call r9
   838                              <1> 
   839 00000A74 4881C31C000000      <1>     add rbx, 20+8
   840 00000A7B 4D8D88[7C070000]    <1>     lea r9, qword [r8 + overlayDword]
   841 00000A82 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   842 00000A8A 41FFD1              <1>     call r9
   843                              <1> 
   844 00000A8D 4881C312000000      <1>     add rbx, 10+8
   845 00000A94 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   846 00000A9C 41FFD1              <1>     call r9
   847                              <1> 
   848 00000A9F 4881C312000000      <1>     add rbx, 10+8
   849 00000AA6 64488B0425-         <1>     mov rax, qword fs:[longMem]
   849 00000AAB [1BC00300]          <1>
   850 00000AAF 4D8D88[BF070000]    <1>     lea r9, qword [r8 + overlayQword]
   851 00000AB6 41FFD1              <1>     call r9
   852                              <1> 
   853 00000AB9 4881C31B000000      <1>     add rbx, 19+8
   854 00000AC0 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   854 00000AC5 [33C00300]          <1>
   855 00000AC9 41FFD1              <1>     call r9
   856                              <1> 
   857 00000ACC 4881C31B000000      <1>     add rbx, 19+8
   858 00000AD3 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   858 00000AD8 [3BC00300]          <1>
   859 00000ADC 41FFD1              <1>     call r9
   860                              <1> 
   861 00000ADF 4881C31B000000      <1>     add rbx, 19+8
   862 00000AE6 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   862 00000AEB [55C00300]          <1>
   863 00000AEF 41FFD1              <1>     call r9
   864                              <1> 
   865 00000AF2 4881C31B000000      <1>     add rbx, 19+8
   866 00000AF9 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   866 00000AFE [5DC00300]          <1>
   867 00000B02 41FFD1              <1>     call r9
   868                              <1> 
   869 00000B05 4D8D88[0A070000]    <1>     lea r9, qword [r8 + overlayByte]
   870                              <1> 
   871 00000B0C 4881C32C000000      <1>     add rbx, 25+19
   872 00000B13 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
   872 00000B19 [6FC00300]          <1>
   873 00000B1D 41FFD1              <1>     call r9
   874                              <1> 
   875 00000B20 4881C31E000000      <1>     add rbx, 30
   876 00000B27 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   876 00000B2D [12C00300]          <1>
   877 00000B31 41FFD1              <1>     call r9
   878                              <1> 
   879 00000B34 4881C31E000000      <1>     add rbx, 30
   880 00000B3B 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   880 00000B41 [11C00300]          <1>
   881 00000B45 41FFD1              <1>     call r9
   882                              <1> 
   883 00000B48 4881C310000000      <1>     add rbx, 16
   884 00000B4F 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   884 00000B55 [10C00300]          <1>
   885 00000B59 0441                <1>     add al, "A"
   886 00000B5B 8803                <1>     mov byte [rbx], al
   887                              <1> 
   888 00000B5D 488D2D10000000      <1>     lea rbp, .msg
   889 00000B64 4D8D88[84040000]    <1>     lea r9, qword [r8 + debPrintNullString]
   890 00000B6B 41FFD1              <1>     call r9
   891 00000B6E 5D                  <1>     pop rbp
   892 00000B6F E99E010000          <1>     jmp l1
   893 00000B74 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   893 00000B7D 206261736520464646- <1>
   893 00000B86 464646464646464646- <1>
   893 00000B8F 46464646680A0D      <1>
   894 00000B96 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   894 00000B9F 464646464646464646- <1>
   894 00000BA8 464646464646680A0D  <1>
   895 00000BB1 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   895 00000BBA 464646464646464646- <1>
   895 00000BC3 46464646464668200A- <1>
   895 00000BCC 0D                  <1>
   896 00000BCD 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   896 00000BD6 464646464646466820  <1>
   897 00000BDF 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   897 00000BE8 464646464646466820  <1>
   898 00000BF1 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   898 00000BFA 464646464646464646- <1>
   898 00000C03 464646464646680A0D  <1>
   899 00000C0C 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   899 00000C15 464646464646464646- <1>
   899 00000C1E 464646464646680A0D  <1>
   900 00000C27 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   900 00000C30 464646464646464646- <1>
   900 00000C39 464646464646680A0D  <1>
   901 00000C42 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   901 00000C4B 464646464646464646- <1>
   901 00000C54 464646464646680A0D  <1>
   902 00000C5D 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   902 00000C66 464646464646464646- <1>
   902 00000C6F 464646464646680A0D  <1>
   903 00000C78 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   903 00000C81 204C6F676963616C20- <1>
   903 00000C8A 447269766573204646- <1>
   903 00000C93 680A0D              <1>
   904 00000C96 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   904 00000C9F 204669786564204472- <1>
   904 00000CA8 697665732020204646- <1>
   904 00000CB1 680A0D              <1>
   905 00000CB4 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   905 00000CBD 2052656D6F7661626C- <1>
   905 00000CC6 652044727673204646- <1>
   905 00000CCF 680A0D              <1>
   906 00000CD2 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   906 00000CDB 65205A3A0A0D        <1>
   907 00000CE1 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   907 00000CEA 4F4D4D414E442E434F- <1>
   907 00000CF3 4D2E2E2E0A0D00      <1>
   908 00000CFA 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   908 00000D03 626F6F742073756D6D- <1>
   908 00000D0C 6172790A0D00        <1>
   909                              <1>     %endif
   910                              <1> l1:
   911 00000D12 B436                <1>     mov ah, 36h
   912 00000D14 B200                <1>     mov dl, 0
   913 00000D16 CD41                <1>     int 41h
   914 00000D18 488D154F030000      <1>     lea rdx, tmpDTA
   915 00000D1F B41A                <1>     mov ah, 1Ah
   916 00000D21 CD41                <1>     int 41h ;Set tempDTA to current DTA
   917 00000D23 B44E                <1>     mov ah, 4Eh
   918 00000D25 488D1522030000      <1>     lea rdx, tmpName
   919 00000D2C 0FB60D1A030000      <1>     movzx ecx, byte [tmpAttr] ;Get the search attribute
   920 00000D33 CD41                <1>     int 41h
   921 00000D35 B44F                <1>     mov ah, 4Fh
   922 00000D37 CD41                <1>     int 41h
   923 00000D39 B460                <1>     mov ah, 60h
   924 00000D3B 488D3515030000      <1>     lea rsi, tmpName2
   925 00000D42 488D3D25040000      <1>     lea rdi, tmpBuf2
   926 00000D49 CD41                <1>     int 41h
   927                              <1> l11:
   928 00000D4B B402                <1>     mov ah, 02h
   929 00000D4D B20A                <1>     mov dl, 0Ah
   930 00000D4F CD41                <1>     int 41h
   931 00000D51 B409                <1>     mov ah, 09h
   932 00000D53 488D1516000000      <1>     lea rdx, .str
   933 00000D5A CD41                <1>     int 41h
   934                              <1>     ;lea rdx, tmpBuffer
   935                              <1>     ;mov ah, 0Ah  ;Buffered input
   936 00000D5C B980000000          <1>     mov ecx, 80h
   937 00000D61 488D1586030000      <1>     lea rdx, tmpBuffer
   938 00000D68 31DB                <1>     xor ebx, ebx
   939 00000D6A B43F                <1>     mov ah, 3fh
   940 00000D6C CD41                <1>     int 41h
   941 00000D6E EBDB                <1>     jmp short l11
   942 00000D70 433A5C3E24          <1> .str: db "C:\>$"
   943                              <1> ;--------------------------------
   944                              <1> ;       PROCS FOR SYSINIT       :
   945                              <1> ;--------------------------------
   946                              <1> adjustDrvHdr:
   947                              <1> ;Input: rsi = Effective address of driver in DOS segment
   948                              <1> ;       rbp = Ptr to the start of the DOS segment
   949                              <1> ;Output: rsi = EA of next header in DOS segment
   950 00000D75 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   951 00000D79 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   952 00000D7D 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
   953 00000D84 740A                <1>     je .exit
   954 00000D86 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   955 00000D89 4881C622000000      <1>     add rsi, drvHdr_size
   956                              <1> .exit:
   957 00000D90 C3                  <1>     ret
   958                              <1> errorInit:
   959                              <1> ;If a critical error occurs during sysinit, fail through here
   960                              <1> ;Int 42h, 43h and 44h point here during sysinit
   961 00000D91 488D2D3A000000      <1>     lea rbp, hltmsg
   962 00000D98 B804130000          <1>     mov eax, 1304h
   963 00000D9D CD30                <1>     int 30h
   964                              <1>     ;cli ;Clear interrupts
   965                              <1>     ;mov al, -1
   966                              <1>     ;mov dx, 0A1h    ;PIC2 data
   967                              <1>     ;out dx, al      ;Mask all lines
   968                              <1>     ;mov dx, 21h     ;PIC1 data
   969                              <1>     ;out dx, al      ;Mask all lines
   970                              <1> .ei0:
   971 00000D9F F4                  <1>     hlt
   972 00000DA0 EBFD                <1>     jmp short .ei0
   973                              <1> ;--------------------------------
   974                              <1> ;       DATA FOR SYSINIT        :
   975                              <1> ;--------------------------------
   976 00000DA2 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   976 00000DAB 5343502F444F532E2E- <1>
   976 00000DB4 2E0A0D24            <1>
   977 00000DB8 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   977 00000DC1 6C6F636174696F6E20- <1>
   977 00000DCA 4572726F720A0D00    <1>
   978 00000DD2 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   978 00000DDB 7469616C6973696E67- <1>
   978 00000DE4 20534350444F532E53- <1>
   978 00000DED 59532E205379737465- <1>
   978 00000DF6 6D2068616C74696E67- <1>
   978 00000DFF 2E2E2E00            <1>
   979 00000E03 434F4E00            <1> conName db "CON",0
   980 00000E07 41555800            <1> auxName db "AUX",0
   981 00000E0B 50524E00            <1> prnName db "PRN",0
   982                              <1> 
   983 00000E0F 4155544F455845432E- <1> aexec   db "AUTOEXEC.BAT",0 ;ASCIIZ for AUTOEXEC
   983 00000E18 42415400            <1>
   984 00000E1C 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
   984 00000E25 5300                <1>
   985                              <1> 
   986                              <1> intData:
   987 00000E27 [3835000000000000]  <1>     dq terminateProcess ;Int 40h
   988 00000E2F [5A3F000000000000]  <1>     dq functionDispatch ;Int 41h
   989 00000E37 [910D000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   990 00000E3F [B240000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
   991 00000E47 [1739000000000000]  <1>     dq dosDefCritErrHdlr 
   992 00000E4F [E739000000000000]  <1>     dq absDiskRead      ;Int 45h
   993 00000E57 [C839000000000000]  <1>     dq absDiskWrite     ;Int 46h
   994 00000E5F [3F35000000000000]  <1>     dq terminateRes     ;Int 47h
   995 00000E67 [B240000000000000]  <1>     dq defaultIretq     ;Int 48h
   996 00000E6F [B240000000000000]  <1>     dq defaultIretq     ;Int 49h
   997 00000E77 [B240000000000000]  <1>     dq defaultIretq     ;Int 4Ah
   998 00000E7F [B240000000000000]  <1>     dq defaultIretq     ;Int 4Bh
   999 00000E87 [B240000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1000 00000E8F [B240000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1001 00000E97 [B240000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1002 00000E9F [5945000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1003                              <1> nData:
  1004 00000EA7 [1F48000000000000]  <1>     dq conHdr
  1005 00000EAF 0480                <1>     dw 08004h
  1006 00000EB1 [C749000000000000]  <1>     dq nulStrat
  1007 00000EB9 [CD49000000000000]  <1>     dq nulIntr
  1008 00000EC1 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1009                              <1> 
  1010                              <1> diskInit:
  1011                              <1>     ;We create a function to deal with BPB parsing etc
  1012                              <1>     ;Start with the first primary partition on each hard disk (until max)
  1013                              <1>     ;   They dont have to be bootable
  1014                              <1>     ;Then go back and look for other partitions partitions. 
  1015                              <1>     ;   Add each other primary or logical ptn (until max)
  1016                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
  1017                              <1>     ;Use r8 as device counter
  1018 00000EC9 488DBD[CD510000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
  1019 00000ED0 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
  1019 00000ED8 00                  <1>
  1020 00000ED9 0F84C6000000        <1>     jz .remInit ;No? Go to removables
  1021 00000EDF 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
  1021 00000EE8 00                  <1>
  1022 00000EE9 B280                <1>     mov dl, 80h ;Start with HDD 0
  1023                              <1> .primary:
  1024 00000EEB 64803C25[6FC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1024 00000EF3 03                  <1>
  1025 00000EF4 0F84AB000000        <1>     je .remInit
  1026 00000EFA 31C9                <1>     xor ecx, ecx    ;Sector 0
  1027 00000EFC E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
  1028 00000F01 0F8289000000        <1>     jc .primaryEpilog
  1029                              <1>     ;Here, check MBR or BPB
  1030 00000F07 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
  1031 00000F10 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
  1032                              <1>     ;Now check if BPB or MBR
  1033 00000F12 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1034 00000F14 8A6302              <1>     mov ah, byte [rbx + 2]
  1035 00000F17 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1036 00000F1B 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
  1037                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
  1038                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
  1039 00000F1D 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
  1040 00000F24 B104                <1>     mov cl, 4
  1041                              <1> .checkPrimary:
  1042 00000F26 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
  1043 00000F29 3C01                <1>     cmp al, 01
  1044 00000F2B 7421                <1>     je .primaryFound
  1045 00000F2D 3C04                <1>     cmp al, 04
  1046 00000F2F 741D                <1>     je .primaryFound
  1047 00000F31 3C06                <1>     cmp al, 06
  1048 00000F33 7419                <1>     je .primaryFound
  1049 00000F35 3C0B                <1>     cmp al, 0Bh
  1050 00000F37 7415                <1>     je .primaryFound
  1051 00000F39 3C0C                <1>     cmp al, 0Ch
  1052 00000F3B 7411                <1>     je .primaryFound
  1053 00000F3D 3C0E                <1>     cmp al, 0Eh
  1054 00000F3F 740D                <1>     je .primaryFound
  1055 00000F41 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1056 00000F48 FEC9                <1>     dec cl
  1057 00000F4A 7444                <1>     jz .primaryEpilog
  1058 00000F4C EBD8                <1>     jmp short .checkPrimary
  1059                              <1> .primaryFound:
  1060                              <1>     ;Copy the first sector of this partition into memory
  1061 00000F4E 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1062 00000F51 E8E9000000          <1>     call .initReadSector
  1063 00000F56 7238                <1>     jc .primaryEpilog
  1064                              <1>     ;Now verify this is a BPB
  1065 00000F58 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1066 00000F5A 8A6302              <1>     mov ah, byte [rbx + 2]
  1067 00000F5D 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1068 00000F61 752D                <1>     jne .primaryEpilog   ;If not, skip
  1069                              <1>     ;Now copy data to internal tables
  1070 00000F63 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1071 00000F66 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1072 00000F6B 57                  <1>     push rdi
  1073 00000F6C F348A5              <1>     rep movsq   ;Copy the BPB
  1074 00000F6F 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1075                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1076 00000F70 4A8D9C05[9B510000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1077                              <1>     ;Add device count to rbx to point to correct entry
  1078 00000F78 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1079 00000F7A 4A8D9CC5[A5510000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1080 00000F82 488933              <1>     mov qword [rbx], rsi
  1081 00000F85 49FFC0              <1>     inc r8  ;Goto next logical drive
  1082 00000F88 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1083                              <1> .primaryEpilog:
  1084 00000F90 FEC2                <1>     inc dl  ;Goto next BIOS drive
  1085 00000F92 88D6                <1>     mov dh, dl
  1086 00000F94 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1087 00000F97 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1088 00000F9F 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1089                              <1> .extended:
  1090                              <1> ;We have gone through all the devices once
  1091                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1092                              <1>     ;je .remInit ;If yes, get removable devices
  1093                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1094                              <1>     ;xor ecx, ecx    ;Get MBR back
  1095                              <1>     ;call .initReadSector
  1096                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1097                              <1> .remInit:
  1098                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1099 00000FA5 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1100 00000FA8 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1101 00000FAA 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1102                              <1>     ;rdi points to the space for the subsequent bpb's
  1103                              <1> .removables:
  1104 00000FAD 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1105 00000FAF E88B000000          <1>     call .initReadSector
  1106 00000FB4 7238                <1>     jc .removableEpilogue   ;Goto next device
  1107                              <1>     ;Now verify this is a BPB
  1108 00000FB6 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1109 00000FB8 8A6302              <1>     mov ah, byte [rbx + 2]
  1110 00000FBB 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1111 00000FBF 752D                <1>     jne .removableEpilogue   ;If not, skip
  1112                              <1>     ;Now copy data to internal tables
  1113 00000FC1 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1114 00000FC4 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1115 00000FC9 57                  <1>     push rdi
  1116 00000FCA F348A5              <1>     rep movsq   ;Copy the BPB
  1117 00000FCD 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1118                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1119 00000FCE 4A8D9C05[9B510000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1120                              <1>     ;Add device count to rbx to point to correct entry
  1121 00000FD6 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1122 00000FD8 4A8D9CC5[A5510000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1123 00000FE0 488933              <1>     mov qword [rbx], rsi
  1124 00000FE3 49FFC0              <1>     inc r8  ;Goto next logical drive
  1125 00000FE6 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1126                              <1> .removableEpilogue:
  1127 00000FEE FEC2                <1>     inc dl  ;Goto next BIOS device now
  1128 00000FF0 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1129 00000FF8 7412                <1>     je .end
  1130 00000FFA 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1131 00001001 7403                <1>     je .re0
  1132 00001003 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1133                              <1> .re0:
  1134 00001006 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1135 0000100A 72A1                <1>     jb .removables
  1136                              <1> .end:
  1137 0000100C 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1137 00001014 01                  <1>
  1138 00001015 7401                <1>     je .singleRemDev
  1139 00001017 C3                  <1>     ret
  1140                              <1> .singleRemDev:
  1141                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1142 00001018 488D9D[9B510000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1143 0000101F 8A95[9B510000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1144 00001025 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1145 00001028 488D9D[A5510000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1146 0000102F 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1147 00001032 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1148 00001036 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1149 0000103E C3                  <1>     ret
  1150                              <1> .initReadSector:
  1151                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1152 0000103F B482                <1>     mov ah, 82h ;Read
  1153 00001041 B001                <1>     mov al, 1   ;One sector
  1154 00001043 488D9D[49010000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1155 0000104A CD33                <1>     int 33h
  1156 0000104C C3                  <1>     ret
  1157 0000104D 16                  <1> tmpAttr     db dirInclusive ;Search for all files
  1158 0000104E 7363702A2E73797300  <1> tmpName     db "scp*.sys",0
  1159 00001057 2F746573742F746573- <1> tmpName2    db "/test/test2/../another",0
  1159 00001060 74322F2E2E2F616E6F- <1>
  1159 00001069 7468657200          <1>
  1160 0000106E 000000000000000000- <1> tmpDTA      db 80h dup 00h
  1160 00001077 000000000000000000- <1>
  1160 00001080 000000000000000000- <1>
  1160 00001089 000000000000000000- <1>
  1160 00001092 000000000000000000- <1>
  1160 0000109B 000000000000000000- <1>
  1160 000010A4 000000000000000000- <1>
  1160 000010AD 000000000000000000- <1>
  1160 000010B6 000000000000000000- <1>
  1160 000010BF 000000000000000000- <1>
  1160 000010C8 000000000000000000- <1>
  1160 000010D1 000000000000000000- <1>
  1160 000010DA 000000000000000000- <1>
  1160 000010E3 000000000000000000- <1>
  1160 000010EC 0000                <1>
  1161 000010EE 500000000000000000- <1> tmpBuffer   db 80, 0, 126 dup 00h 
  1161 000010F7 000000000000000000- <1>
  1161 00001100 000000000000000000- <1>
  1161 00001109 000000000000000000- <1>
  1161 00001112 000000000000000000- <1>
  1161 0000111B 000000000000000000- <1>
  1161 00001124 000000000000000000- <1>
  1161 0000112D 000000000000000000- <1>
  1161 00001136 000000000000000000- <1>
  1161 0000113F 000000000000000000- <1>
  1161 00001148 000000000000000000- <1>
  1161 00001151 000000000000000000- <1>
  1161 0000115A 000000000000000000- <1>
  1161 00001163 000000000000000000- <1>
  1161 0000116C 0000                <1>
  1162 0000116E 000000000000000000- <1> tmpBuf2     db 80h dup 00h
  1162 00001177 000000000000000000- <1>
  1162 00001180 000000000000000000- <1>
  1162 00001189 000000000000000000- <1>
  1162 00001192 000000000000000000- <1>
  1162 0000119B 000000000000000000- <1>
  1162 000011A4 000000000000000000- <1>
  1162 000011AD 000000000000000000- <1>
  1162 000011B6 000000000000000000- <1>
  1162 000011BF 000000000000000000- <1>
  1162 000011C8 000000000000000000- <1>
  1162 000011D1 000000000000000000- <1>
  1162 000011DA 000000000000000000- <1>
  1162 000011E3 000000000000000000- <1>
  1162 000011EC 0000                <1>
    14                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    15                                  %include "./Source/BSS/dosSeg.asm"
    16                              <1> ;This file contains the main DOS data segment
    17                              <1> dosAPT: ;Additional Page tables
    18 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    19                              <1> dosDataArea:
    20 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    21 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    22 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    23 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    24 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    25 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    26 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    27 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    28                              <1> ;Above is the system stats
    29                              <1> ;Below is the DOS vars
    30 0003C023 ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    31                              <1>     ;   A value of 0 means no chars buffered.
    32 0003C02B ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    33                              <1> sysVarsPtr:
    34 0003C033 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    35 0003C03B ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    36 0003C043 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    37                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    38 0003C04B ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    39                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    40 0003C053 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    41 0003C055 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    42 0003C05D ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    43 0003C065 ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    44 0003C06D ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    45                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    46 0003C06F ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    47 0003C070 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    48 0003C071 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    49 0003C072 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    50 0003C073 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    51                              <1> ;Additional internal variables
    52                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    53 0003C095 ??                  <1>     singleDrv   resb 1    ;Set if last drive accessed was drive B x
    54 0003C096 ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    55 0003C097 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    56                              <1>     ;Share hook functions here
    57                              <1> ;Create SFT header and corresponding array of five default sft entries
    58 0003C099 <res Ah>            <1>     firstSftHeader  resb sfth_size
    59 0003C0A3 <res 4Fh>           <1>     firstSft    resb sft_size
    60 0003C0F2 <res 4Fh>           <1>     secondSft   resb sft_size
    61 0003C141 <res 4Fh>           <1>     thirdSft    resb sft_size
    62 0003C190 <res 4Fh>           <1>     fourthSft   resb sft_size
    63 0003C1DF <res 4Fh>           <1>     fifthSft    resb sft_size
    64                              <1> 
    65                              <1> ;Virtual CONsole Buffers
    66 0003C22E ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
    67                              <1>     ;Only incremented when CON device runs vCon
    68                              <1> vConBuf:    ;Proper buffer symbol
    69 0003C22F ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
    70 0003C230 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
    71                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
    72 0003C2B0 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
    73 0003C330 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
    74                              <1> 
    75 0003C331 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
    76 0003C332 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    77 0003C333 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
    78 0003C334 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
    79                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
    80                              <1> 
    81 0003C335 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    82                              <1> ;Server stuff. Default to all zeros (blank)
    83 0003C336 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
    84                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
    85 0003C337 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
    86 0003C338 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
    87                              <1> ;Swappable Data Area
    88 0003C348 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    89 0003C368 ??                  <1>                 resb 1  ;Alignment byte
    90                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    91 0003C369 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    92 0003C36A ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    93 0003C36B ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    94 0003C36C ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    95 0003C36D ????                <1>     errorExCde  resw 1  ;Extended Error Code
    96 0003C36F ??                  <1>     errorAction resb 1  ;Suggested action for error  
    97 0003C370 ??                  <1>     errorClass  resb 1  ;Error Class
    98 0003C371 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
    99 0003C379 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   100 0003C381 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   101                              <1> 
   102 0003C389 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   103 0003C391 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   104                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   105                              <1>     ;Lower byte: User Specified
   106 0003C393 ??                  <1>     currentDrv  resb 1  ;Default drive x
   107 0003C394 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   108                              <1> ;SDA, needs to be replaced between processes
   109                              <1> sdaMainSwap:
   110 0003C395 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   111 0003C39D ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   112 0003C3A5 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   113 0003C3A7 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   114 0003C3AF ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   115 0003C3B7 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   116 0003C3BF ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   117 0003C3C1 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   118 0003C3C9 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   119 0003C3CA ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   120 0003C3CB ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   121                              <1> 
   122 0003C3CC ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   123 0003C3D4 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   124 0003C3DC ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   125 0003C3E4 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   126 0003C3EC ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   127                              <1> ;The below flag tells DOS to print ^C in the termination function
   128 0003C3ED ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   129 0003C3EE ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   130                              <1> ;Time stuff
   131                              <1> ;Read the below two as a word
   132 0003C3EF ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   133 0003C3F0 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   134 0003C3F1 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   135 0003C3F2 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   136 0003C3F4 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   137                              <1> 
   138 0003C3F5 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   139 0003C3F6 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   140 0003C3F7 ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   141                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   142                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   143                              <1> ; without forcing to re-build the whole primary request block.
   144                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   145                              <1> ; with secondary char output going through the secondary header
   146                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   147                              <1> ; for output)
   148                              <1> ;ioReqPkt is the largest possible packet
   149 0003C3F8 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   150 0003C422 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   151 0003C44C <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   152 0003C476 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   153                              <1> ;Swappable Buffers
   154 0003C477 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   155                              <1>     ;We add an additional byte to save ah too
   156 0003C47D ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   157 0003C47F <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   158 0003C4FF <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   159 0003C57F ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   160 0003C587 ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   161 0003C58F ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   162                              <1> ;Misc bookkeeping flags and vars
   163 0003C590 <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal searching block
   164 0003C5BB <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   165 0003C5DB <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   166 0003C5E7 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards in fcbName
   167 0003C5F3 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   168 0003C5FB <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need tmp CDS
   169 0003C656 ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   170 0003C657 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   171 0003C658 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   172 0003C659 ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   173 0003C65A ??                  <1>     rwFlag      resb 1  ;00h=Read, 01h=Write
   174 0003C65B ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   175 0003C65C ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   176                              <1> 
   177 0003C65D ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   178 0003C65E ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   179 0003C65F ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   180 0003C660 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlelv
   181 0003C661 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   182 0003C662 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   183 0003C663 ??                  <1>     workingDrv  resb 1  ;Working drive number
   184                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   185                              <1> workingDD:  ;Create a symbol for the working device driver too
   186 0003C664 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   187 0003C66C ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   188                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   189                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   190 0003C674 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   191 0003C67C ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   192 0003C684 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   193 0003C68C ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   194 0003C68E ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   195 0003C690 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   196                              <1> ;Temp vars, used when walking FAT or changing sectors
   197 0003C698 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   198 0003C6A0 ????                <1>     entries     resw 1  ;FAT entries per FAT sector
   199                              <1> ;***************************************************|
   200                              <1> ; Needs to be set up before any file access         |
   201                              <1> ; These vars keep track of file access properties   |
   202                              <1> ;   and must be used only for such purposes.        |
   203                              <1> ;***************************************************|
   204 0003C6A2 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   205 0003C6A6 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   206                              <1> 
   207 0003C6AA ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   208 0003C6AE ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   209 0003C6AF ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   210                              <1> 
   211 0003C6B7 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   212 0003C6B9 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   213                              <1> ;***************************************************|
   214 0003C6BD ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   215 0003C6C1 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   216 0003C6C5 ????????            <1>     bytesAdded  resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   217 0003C6C9 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   218 0003C6CD ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   219                              <1> ;Directory stuff
   220 0003C6D1 ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   221 0003C6D5 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   222 0003C6D9 ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   223 0003C6DB ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   224                              <1> ;Error DPB 
   225 0003C6DF ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   226 0003C6E7 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   227                              <1> ;Stacks and scratch SFT
   228 0003C6E8 <res 528h>          <1>     critStack   resq 165
   229 0003CC10 ????????????????    <1>     critStakTop resq 1
   230                              <1> 
   231 0003CC18 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   232                              <1> 
   233 0003CC67 <res 638h>          <1>     AuxStack    resq 199
   234 0003D29F ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   235 0003D2A7 <res 638h>          <1>     DiskStack   resq 199
   236 0003D8DF ????????????????    <1>     DiskStakTop resq 1
   237                              <1> 
   238 0003D8E7 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   239 0003D8E8 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls!  
   240                              <1>     sdaLen      equ     $ - sda 
   241                              <1>     sdaMSLen    equ     $ - sda
   242                              <1> 
   243                              <1> ;Additional variables NOT in the SDA
   244 0003D8E9 <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   245                              <1>     ;for saving the current header when quickly doing a second request
   246                              <1> 
   247                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   248                              <1> inExtASCII:
   249 0003D913 ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   250 0003D914 ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   251                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   252                              <1>     ; copy of the date/time record
   253                              <1>     dSegLen     equ     $
    16                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    17                                  %define currSegVBase section.resSeg.vstart
    18                                  %include "./Source/Data/staticData.asm"
    19                              <1> 
    20                              <1> ;-----------------------------------:
    21                              <1> ;       Static Data Variables       :
    22                              <1> ;-----------------------------------:
    23 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    24 00000001 01                  <1> dosMinor    db 01h      ;.01
    25 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    25 0000000B 535953              <1>
    26 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    26 00000017 535953              <1>
    27                              <1> 
    28                              <1> ;-----------------------------------:
    29                              <1> ;        Static Data Tables         :
    30                              <1> ;-----------------------------------:
    31                              <1> ctryTbl:
    32                              <1> ;Country Table (defaulting to UK)
    33 0000001A 0100                <1> .dtfmt:     dw 1            ;Date time format (2 bytes)
    34                              <1>                             ;0 = month day year hh:mm:ss
    35                              <1>                             ;1 = day month year hh:mm:ss
    36                              <1>                             ;2 = year month day hh:mm:ss
    37 0000001C C2A300000000        <1> .curr:      db "£",0,0,0,0  ;ASCIIZ Currency symbol (5 chars)
    38 00000022 2C00                <1> .thouSep:   db ",",0        ;ASCIIZ Thousands separator
    39 00000024 2E00                <1> .dcmlSep:   db ".",0        ;ASCIIZ Decimal separator
    40 00000026 2D00                <1> .dateSep:   db "-",0        ;ASCIIZ Date separator
    41 00000028 3A00                <1> .timeSep:   db ":",0        ;ASCIIZ Time separator
    42 0000002A 00                  <1> .currFmt:   db 0            ;Currency Format
    43                              <1>                 ;0 = Symbol leads, without space
    44                              <1>                 ;1 = Symbol follows, without space
    45                              <1>                 ;2 = Symbol leads, one space
    46                              <1>                 ;3 = Symbol follows, one space
    47                              <1>                 ;4 = Symbol replace decimal separator
    48 0000002B 02                  <1> .digtdpt:   db 2 ;Number of digits after the decimal point
    49 0000002C 00                  <1> .timefmt:   db 0 ;Time format, Bit 0 = 0 => 12 hour clock, = 1 => 24 hour clock
    50 0000002D 0000000000000000    <1> .mapaddr:   dq 0 ;Case map address (0 is nulptr)
    51 00000035 2C00                <1> .dataSep:   db ",",0    ;Data list separator
    52 00000037 000000000000000000- <1> .resv:      db 0,0,0,0,0,0,0,0,0,0  ;Reserve 10 bytes
    52 00000040 00                  <1>
    53                              <1> 
    54                              <1> ;IO Char table
    55                              <1> ;This table has Request header length, command code and error flags
    56                              <1> ; as a packed DWORD entry
    57                              <1> ioRqCmdErrTbl:
    58                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    59                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    60 00000041 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    61 00000045 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    62 00000049 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    63 0000004D 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    64 00000051 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    65 00000055 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    66                              <1> 
    67                              <1> 
    68                              <1> 
    69                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    70                              <1> ; wish to install their own custom logic.
    71 00000059 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    72 00000061 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    73 00000062 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    74                              <1> ;Extended ASCII keys with special meanings
    75 00000063 3B                  <1> extKeyTbl   db eF1
    76 00000064 CA21                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    77 00000066 3C                  <1>             db eF2
    78 00000067 BC21                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    79 00000069 3D                  <1>             db eF3
    80 0000006A C321                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    81 0000006C 3E                  <1>             db eF4
    82 0000006D F821                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    83 0000006F 3F                  <1>             db eF5
    84 00000070 3D22                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    85 00000072 40                  <1>             db eF6
    86 00000073 5322                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    87 00000075 41                  <1>             db eF7
    88 00000076 5A22                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    89 00000078 4B                  <1>             db eCursL
    90 00000079 2121                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    91 0000007B 4D                  <1>             db eCursR
    92 0000007C CA21                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    93 0000007E 52                  <1>             db eIns
    94 0000007F 6522                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    95 00000081 53                  <1>             db eDel
    96 00000082 6C22                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    97                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    98                              <1> 
    99                              <1> ;When counting the number of days, first compute the number of years since
   100                              <1> ; 1980 and your year. 
   101                              <1> ;Then, using the table below, find the number of leap years between 1980
   102                              <1> ; and (YourYear - 1). 
   103                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   104                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   105                              <1> ;
   106                              <1> ;Use the months table to get the number of days in a normal month as leap 
   107                              <1> ; years are added using the previous comment.
   108                              <1> 
   109                              <1> ;This table is the number of days in the month
   110                              <1> ;The function which updates the days in Feb writes the number to this table
   111                              <1> monthsTbl:  
   112 00000084 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   112 0000008D 1F1E1F              <1>
   113                              <1> 
   114                              <1> ;Error tables
   115                              <1> errXlatTbl:
   116                              <1> ;Each entry is n bytes long, defined as
   117                              <1> ; Byte 0      : DOS function number for which translation will occur
   118                              <1> ; Byte 1      : Length of the table entry - 2
   119                              <1> ; Bytes n - 3 : Acceptable Error codes
   120                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   121                              <1> ;The table is terminated with a single -1 byte
   122                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   123                              <1> ; only on entry to a disk function
   124 00000090 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   125 00000094 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   126 00000099 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   127 0000009F 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   128 000000A3 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   129 000000A9 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   130 000000B0 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   131 000000B3 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   132 000000B7 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   133 000000BB 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   134 000000C0 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   135 000000C4 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   136 000000CA 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   137 000000D1 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   138 000000D5 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   139 000000D9 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   140 000000DC 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   141 000000E0 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   142 000000E4 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   143 000000E9 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   144 000000F1 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   145 000000F3 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   146 000000F8 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   147 000000FB 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   148 00000101 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   149 00000105 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   150 00000108 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   151 0000010E 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   152 00000115 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   153 0000011B 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   154 0000011F 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   155 00000123 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   156 00000126 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   157 0000012B FF                  <1>     db -1   ;End Of Table marker
   158                              <1> 
   159                              <1> 
   160                              <1> extErrTbl:
   161                              <1> ;This table contains the default values for how to respond
   162                              <1> ; to particular errors. Fields with -1 need to be filled in before
   163                              <1> ; setting variables using this table.
   164                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   165                              <1> ; Byte 0: Extended Error Code as a byte
   166                              <1> ; Byte 1: Error Class
   167                              <1> ; Byte 2: Error Suggested Action
   168                              <1> ; Byte 3: Error Locus
   169                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   170                              <1> ;
   171                              <1> ;Error 01: Invalid function number
   172 0000012C 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   173                              <1> ;Error 02: File not found
   174 00000130 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   175                              <1> ;Error 03: Path not found
   176 00000134 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   177                              <1> ;Error 04: Too many open handles, and no handles are left
   178 00000138 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   179                              <1> ;Error 05: Access being denied
   180 0000013C 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   181                              <1> ;Error 06: Invalid File handle being provided
   182 00000140 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   183                              <1> ;Error 07: MCB chain destroyed
   184 00000144 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   185                              <1> ;Error 08: No Memory remaining
   186 00000148 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   187                              <1> ;Error 09: Invalid MCB block Address
   188 0000014C 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   189                              <1> ;Error 0A: Bad Environment block
   190 00000150 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   191                              <1> ;Error 0B: Data provided in a bad format
   192 00000154 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   193                              <1> ;Error 0C: Access Code Invalid
   194 00000158 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   195                              <1> ;Error 0D: Error due to Invalid Data provided
   196 0000015C 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   197                              <1> ;Error 0F: Error due to a bad drive letter being provided
   198 00000160 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   199                              <1> ;Error 10: Error due to attempting to delete the CWD
   200 00000164 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   201                              <1> ;Error 11: Error due to a unknown device being used
   202 00000168 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   203                              <1> ;Error 12: No more file handles available
   204 0000016C 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   205                              <1> ;Error 50: Network request not supported
   206 00000170 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   207                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   208 00000174 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   209                              <1> ;Error 21: File Locking Violation
   210 00000178 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   211                              <1> ;Error 54: Too many levels of redirection error
   212 0000017C 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   213                              <1> ;Error 56: Bad resource password provided
   214 00000180 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   215                              <1> ;Error 52: Directory already exists
   216 00000184 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   217                              <1> ;Error 32: Network request not supported by DOS
   218 00000188 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   219                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   220 0000018C 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   221                              <1> ;Error 57: Bad parameter in request
   222 00000190 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   223                              <1> ;Error 53: Fail was returned from Int 44h
   224 00000194 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   225                              <1> ;Error 24: Sharing Buffer Full
   226 00000198 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   227 0000019C FFFFFFFF            <1>     dd -1   ;End of table signature
   228                              <1> 
   229                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   230 000001A0 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   230 000001A9 090A0B0C0D0E0F      <1>
   231 000001B0 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   231 000001B9 191A1B1C1D1E1F      <1>
   232 000001C0 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   232 000001C9 3D3E3F5B5C5D7C      <1>
   233                              <1> badDirNameCharL equ $ - badDirNameChar
   234                              <1> ;The chars * ? . \ / need to always be handled separately
   235                              <1> 
   236                              <1> extAsciiTbl:    ;This table needs to be replaced in other Codepages
   237 000001D0 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   237 000001D9 4545494949          <1>
   238 000001DE 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   238 000001E7 5559999A9B          <1>
   239 000001EC 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   239 000001F5 A5A6A7A8            <1>
   240 000001F9 A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   240 00000202 B2B3B4              <1>
   241 00000205 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   241 0000020E BEBFC0              <1>
   242 00000211 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   242 0000021A CACBCC              <1>
   243 0000021D CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   243 00000226 D6D7D8              <1>
   244 00000229 D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   244 00000232 E2E3E4              <1>
   245 00000235 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   245 0000023E EEEFF0              <1>
   246 00000241 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   246 0000024A FAFBFC              <1>
   247 0000024D FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   248                              <1> 
   249                              <1> extAsciiSig:   ;This table needs to replaces in other Codepages
   250 00000250 F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   250 00000259 F0F6F6              <1>
   251 0000025C F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   251 00000265 F6F6F6              <1>
   252 00000268 F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   252 00000271 FFF6FF              <1>
   253 00000274 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   253 0000027D FFFEF6              <1>
   254 00000280 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   254 00000289 FFF4F4              <1>
   255 0000028C F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   255 00000295 FFFFFF              <1>
   256 00000298 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   256 000002A1 FFFFFF              <1>
   257 000002A4 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   257 000002AD F6FFFF              <1>
   258 000002B0 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   258 000002B9 FFFFFF              <1>
   259 000002BC FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   259 000002C5 FFFFFF              <1>
   260 000002C8 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
    19                                  %include "./Source/Data/dispTbl.asm"
    20                              <1> ;Kernel Dispatch Function Table
    21                              <1> 
    22                              <1> kDispTbl:
    23 000002D0 8633                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    24 000002D2 5019                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    25 000002D4 5D19                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    26 000002D6 1A1A                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    27 000002D8 431A                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    28 000002DA 4B1A                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    29 000002DC 631A                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    30 000002DE 961A                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    31 000002E0 BB1A                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    32 000002E2 1A1B                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    33 000002E4 CD1D                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    34 000002E6 291B                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    35 000002E8 351B                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    36 000002EA 5B3F                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    37 000002EC 8D3F                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    38 000002EE 0923                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    39 000002F0 0923                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    40 000002F2 0923                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    41 000002F4 0923                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    42 000002F6 0923                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    43 000002F8 0923                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    44 000002FA 0923                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    45 000002FC 0923                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    46 000002FE 0923                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    47 00000300 1442                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    48 00000302 A63F                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    49 00000304 0A23                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    50 00000306 AD3F                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    51 00000308 AF3F                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    52 0000030A 1442                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    53 0000030C 1442                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    54 0000030E 4B40                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    55 00000310 1442                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    56 00000312 1D23                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    57 00000314 1D23                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    58 00000316 1D23                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    59 00000318 1D23                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    60 0000031A F83F                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    61 0000031C 9532                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    62 0000031E 1D23                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    63 00000320 1D23                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    64 00000322 1D23                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    65 00000324 4320                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    66 00000326 6A20                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    67 00000328 7020                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    68 0000032A 9120                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    69 0000032C 2840                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    70 0000032E 1E23                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    71 00000330 3640                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    72 00000332 5833                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    73 00000334 4D40                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    74 00000336 103F                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    75 00000338 8540                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    76 0000033A 9640                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    77 0000033C A740                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    78 0000033E A534                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    79 00000340 CE34                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    80 00000342 BB15                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    81 00000344 1416                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    82 00000346 1416                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    83 00000348 3123                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    84 0000034A 4223                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    85 0000034C 3F24                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    86 0000034E 7C24                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    87 00000350 B724                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    88 00000352 C324                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    89 00000354 C424                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    90 00000356 2E25                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    91 00000358 2E25                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    92 0000035A 2E25                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    93 0000035C 6C25                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    94 0000035E FD16                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    95 00000360 482D                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    96 00000362 632F                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    97 00000364 5830                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    98 00000366 A434                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    99 00000368 8833                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   100 0000036A EB40                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   101 0000036C 8C25                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   102 0000036E EE25                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   103 00000370 3E3F                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   104 00000372 473F                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   105 00000374 F940                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   106 00000376 0A41                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   107 00000378 E441                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   108 0000037A 8232                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   109 0000037C 1E26                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   110 0000037E 2C17                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   111 00000380 E131                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   112 00000382 EB41                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   113 00000384 1E26                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   114 00000386 1E26                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   115 00000388 1E26                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   116 0000038A 1542                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   117 0000038C 8842                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   118 0000038E 8842                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   119 00000390 2C17                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   120 00000392 1442                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   121 00000394 503F                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   122 00000396 1442                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   123 00000398 593F                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   124 0000039A CE34                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   125 0000039C CE34                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   126 0000039E 2326                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   127 000003A0 2826                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   128 000003A2 1442                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   129                              <1> kDispTblL  equ $ - kDispTbl 
   130                              <1> 
   131                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   132 000003A4 DD41                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   133 000003A6 CC26                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   134 000003A8 4339                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   135 000003AA E041                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   136 000003AC 6B3A                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   137                              <1> mDispTblL   equ     $ - mDispTbl
   138                              <1> 
   139                              <1> serverDispTbl:  ;Server Dispatch functions
   140 000003AE 01                  <1>     db 01h  ;Number of entries needs to be 0Bh, but for now, 01h
   141 000003AF 5841                <1>     dw serverDispatch - serverDispTbl
    20                                  %include "./Source/Debug/debug.asm"
    21                              <1> ;This file contains debugging macros, procs and strings
    22                              <1> ; that we can use to output to COM1 bypassing the operating system.
    23                              <1> ;A serial terminal must be connected for this to work.
    24                              <1> 
    25                              <1> ;Variables and equates
    26                              <1> 
    27 000003B1 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    28                              <1> 
    29 000003B9 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    29 000003C2 39414243444546      <1>
    30                              <1> ;Common procedures
    31                              <1> debMakeDebuggerRespond:
    32 000003C9 488D2D26000000      <1>     lea rbp, .msg
    33 000003D0 E8AF000000          <1>     call debPrintNullString
    34 000003D5 B900001000          <1>     mov ecx, 100000h
    35                              <1> .waiting:
    36 000003DA FFC9                <1>     dec ecx
    37 000003DC 740C                <1>     jz .timeout
    38 000003DE B402                <1>     mov ah, 02h ;Blocking recieve!
    39 000003E0 31D2                <1>     xor edx, edx
    40 000003E2 CD34                <1>     int 34h
    41 000003E4 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    42 000003E7 75F1                <1>     jnz .waiting
    43 000003E9 C3                  <1>     ret
    44                              <1> .timeout:
    45 000003EA 488D2D47000000      <1>     lea rbp, .msg2
    46 000003F1 E98E000000          <1>     jmp debPrintNullString
    47 000003F6 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    47 000003FF 6B6579206174207468- <1>
    47 00000408 65207465726D696E61- <1>
    47 00000411 6C20746F20636F6E74- <1>
    47 0000041A 696E7565206F722077- <1>
    47 00000423 61697420666F722074- <1>
    47 0000042C 696D656F75742E2E2E- <1>
    47 00000435 0A0D00              <1>
    48 00000438 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    48 00000441 436F6E74696E75696E- <1>
    48 0000044A 672E2E2E0A0D00      <1>
    49                              <1> debPrintHexByte:
    50                              <1> ;Print the hex byte in al as a hex value
    51 00000451 52                  <1>     push rdx
    52 00000452 53                  <1>     push rbx
    53 00000453 50                  <1>     push rax
    54                              <1> 
    55 00000454 88C2                <1>     mov dl, al           ;save byte in dl
    56 00000456 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    57 0000045A 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    58 0000045F 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    59 00000463 E80C000000          <1>     call .wrchar
    60 00000468 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    61 0000046B E804000000          <1>     call .wrchar
    62                              <1> 
    63 00000470 58                  <1>     pop rax
    64 00000471 5B                  <1>     pop rbx
    65 00000472 5A                  <1>     pop rdx
    66 00000473 C3                  <1>     ret
    67                              <1> .wrchar:
    68 00000474 6687DB              <1>     xchg bx, bx
    69 00000477 488D1D3BFFFFFF      <1>     lea rbx, debascii
    70 0000047E D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    71 0000047F B401                <1>     mov ah, 01h
    72 00000481 CD34                <1>     int 34h  ;print char
    73 00000483 C3                  <1>     ret
    74                              <1> 
    75                              <1> debPrintNullString:
    76                              <1> ;Print a null terminated string pointed to by rbp
    77 00000484 56                  <1>     push rsi
    78 00000485 50                  <1>     push rax
    79 00000486 52                  <1>     push rdx
    80 00000487 31D2                <1>     xor edx, edx    ;Select COM1
    81 00000489 4889EE              <1>     mov rsi, rbp
    82                              <1> .getChar:
    83 0000048C AC                  <1>     lodsb
    84 0000048D 84C0                <1>     test al, al
    85 0000048F 7406                <1>     jz .exit
    86 00000491 B401                <1>     mov ah, 01h
    87 00000493 CD34                <1>     int 34h
    88 00000495 EBF5                <1>     jmp short .getChar
    89                              <1> .exit:
    90 00000497 5A                  <1>     pop rdx
    91 00000498 58                  <1>     pop rax
    92 00000499 5E                  <1>     pop rsi
    93 0000049A C3                  <1>     ret
    94                              <1> 
    95                              <1> debPrintDOSStack:
    96                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    97                              <1> ;Shows me which function, and parameters passed and returned
    98 0000049B 488D2DA5010000      <1>     lea rbp, .a1
    99 000004A2 E8DDFFFFFF          <1>     call debPrintNullString
   100 000004A7 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   101 000004AE 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   102 000004B5 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   103 000004B8 E802030000          <1>     call overlayQword
   104 000004BD 4881C316000000      <1>     add rbx, 22
   105 000004C4 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   106 000004C8 E8F2020000          <1>     call overlayQword
   107 000004CD 4881C316000000      <1>     add rbx, 22
   108 000004D4 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   109 000004D8 E8E2020000          <1>     call overlayQword
   110 000004DD 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   111 000004E4 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   112 000004E8 E8D2020000          <1>     call overlayQword
   113 000004ED 4881C316000000      <1>     add rbx, 22 
   114 000004F4 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   115 000004F8 E8C2020000          <1>     call overlayQword
   116 000004FD 4881C316000000      <1>     add rbx, 22
   117 00000504 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   118 00000508 E8B2020000          <1>     call overlayQword
   119 0000050D 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   120 00000514 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   121 00000518 E8A2020000          <1>     call overlayQword
   122 0000051D 4881C316000000      <1>     add rbx, 22
   123 00000524 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
   124 0000052B 480560000000        <1>     add rax, callerFrame_size
   125 00000531 E889020000          <1>     call overlayQword
   126 00000536 4881C316000000      <1>     add rbx, 22
   127 0000053D 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   128 00000541 E879020000          <1>     call overlayQword
   129 00000546 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   130 0000054D 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   131 00000551 E869020000          <1>     call overlayQword
   132 00000556 488D2D06000000      <1>     lea rbp, .a0
   133 0000055D E822FFFFFF          <1>     call debPrintNullString
   134 00000562 C3                  <1>     ret
   135                              <1> 
   136 00000563 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   136 0000056C 303030303030303030- <1>
   136 00000575 30306820            <1>
   137 00000579 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   137 00000582 303030303030303030- <1>
   137 0000058B 30306820            <1>
   138 0000058F 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   138 00000598 303030303030303030- <1>
   138 000005A1 30306820            <1>
   139 000005A5 0A0D                <1>     db  0Ah,0Dh
   140 000005A7 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   140 000005B0 303030303030303030- <1>
   140 000005B9 30306820            <1>
   141 000005BD 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   141 000005C6 303030303030303030- <1>
   141 000005CF 30306820            <1>
   142 000005D3 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   142 000005DC 303030303030303030- <1>
   142 000005E5 30306820            <1>
   143 000005E9 0A0D                <1>     db 0Ah, 0Dh
   144 000005EB 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   144 000005F4 303030303030303030- <1>
   144 000005FD 30306820            <1>
   145 00000601 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   145 0000060A 303030303030303030- <1>
   145 00000613 30306820            <1>
   146 00000617 7269703D3030303030- <1>     db "rip=0000000000000000h"
   146 00000620 303030303030303030- <1>
   146 00000629 303068              <1>
   147 0000062C 0A0D                <1>     db 0Ah, 0Dh
   148 0000062E 666C673D3030303030- <1>     db "flg=0000000000000000h "
   148 00000637 303030303030303030- <1>
   148 00000640 30306820            <1>
   149 00000644 0A0D00              <1>     db 0Ah,0Dh,0
   150 00000647 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   150 00000650 206F6E20496E742034- <1>
   150 00000659 316820737461636B0A- <1>
   150 00000662 0D00                <1>
   151                              <1> 
   152                              <1> debDPBptr:
   153                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   154 00000664 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   155 0000066B 4889E8              <1>     mov rax, rbp
   156 0000066E E84C010000          <1>     call overlayQword
   157 00000673 488D2D06000000      <1>     lea rbp, .dpb
   158 0000067A E805FEFFFF          <1>     call debPrintNullString
   159 0000067F C3                  <1>     ret
   160                              <1> .dpb: 
   161 00000680 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   161 00000689 203030303030303030- <1>
   161 00000692 303030303030303068- <1>
   161 0000069B 200A0D00            <1>
   162                              <1> 
   163                              <1> debDPBBPBptr:
   164                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   165                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   166 0000069F 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   167 000006A6 4889E8              <1>     mov rax, rbp
   168 000006A9 E811010000          <1>     call overlayQword
   169 000006AE 4881C321000000      <1>     add rbx, 33
   170 000006B5 4889F0              <1>     mov rax, rsi
   171 000006B8 E802010000          <1>     call overlayQword
   172 000006BD 488D2D06000000      <1>     lea rbp, .dpb
   173 000006C4 E8BBFDFFFF          <1>     call debPrintNullString
   174 000006C9 C3                  <1>     ret
   175                              <1> .dpb: 
   176 000006CA 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   176 000006D3 203030303030303030- <1>
   176 000006DC 303030303030303068- <1>
   176 000006E5 2066726F6D20        <1>
   177 000006EB 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   177 000006F4 203030303030303030- <1>
   177 000006FD 303030303030303068- <1>
   177 00000706 200A0D00            <1>
   178                              <1> overlayByte:
   179                              <1>     ;Called with number in rax
   180                              <1>     ;pointer to START of 16 byte space for number in rbx
   181 0000070A 53                  <1>     push rbx
   182 0000070B 51                  <1>     push rcx
   183 0000070C 52                  <1>     push rdx
   184 0000070D 55                  <1>     push rbp
   185 0000070E 4889DD              <1>     mov rbp, rbx
   186 00000711 4889C2              <1>     mov rdx, rax
   187 00000714 48FFC5              <1>     inc rbp ;Go to end of number
   188                              <1> 
   189 00000717 488D1D9BFCFFFF      <1>     lea rbx, debascii
   190 0000071E 88D0                <1>     mov al, dl  ;Go low nybble first
   191 00000720 240F                <1>     and al, 0Fh
   192 00000722 D7                  <1>     xlatb
   193 00000723 884500              <1>     mov byte [rbp], al
   194 00000726 48FFCD              <1>     dec rbp ;Go down one char pos
   195 00000729 88D0                <1>     mov al, dl
   196 0000072B 24F0                <1>     and al, 0F0h    ;Hi nybble next
   197 0000072D C0E804              <1>     shr al, 4   ;Shift hi nybble low
   198 00000730 D7                  <1>     xlatb
   199 00000731 884500              <1>     mov byte [rbp], al  ;Store char
   200                              <1> 
   201 00000734 5D                  <1>     pop rbp
   202 00000735 5A                  <1>     pop rdx
   203 00000736 59                  <1>     pop rcx
   204 00000737 5B                  <1>     pop rbx
   205 00000738 C3                  <1>     ret
   206                              <1> 
   207                              <1> overlayWord:
   208                              <1>     ;Called with number in rax
   209                              <1>     ;pointer to START of 16 byte space for number in rbx
   210 00000739 53                  <1>     push rbx
   211 0000073A 51                  <1>     push rcx
   212 0000073B 52                  <1>     push rdx
   213 0000073C 55                  <1>     push rbp
   214 0000073D 4889DD              <1>     mov rbp, rbx
   215 00000740 4889C2              <1>     mov rdx, rax
   216 00000743 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   217 0000074A B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   218 0000074F 488D1D63FCFFFF      <1>     lea rbx, debascii
   219                              <1> .ow0:
   220 00000756 88D0                <1>     mov al, dl  ;Go low nybble first
   221 00000758 240F                <1>     and al, 0Fh
   222 0000075A D7                  <1>     xlatb
   223 0000075B 884500              <1>     mov byte [rbp], al
   224 0000075E 48FFCD              <1>     dec rbp ;Go down one char pos
   225 00000761 88D0                <1>     mov al, dl
   226 00000763 24F0                <1>     and al, 0F0h    ;Hi nybble next
   227 00000765 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   228 00000768 D7                  <1>     xlatb
   229 00000769 884500              <1>     mov byte [rbp], al  ;Store char
   230 0000076C 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   231 00000770 48FFCD              <1>     dec rbp
   232 00000773 FFC9                <1>     dec ecx
   233 00000775 75DF                <1>     jnz .ow0
   234 00000777 5D                  <1>     pop rbp
   235 00000778 5A                  <1>     pop rdx
   236 00000779 59                  <1>     pop rcx
   237 0000077A 5B                  <1>     pop rbx
   238 0000077B C3                  <1>     ret
   239                              <1> 
   240                              <1> overlayDword:
   241                              <1>     ;Called with number in rax
   242                              <1>     ;pointer to START of 16 byte space for number in rbx
   243 0000077C 53                  <1>     push rbx
   244 0000077D 51                  <1>     push rcx
   245 0000077E 52                  <1>     push rdx
   246 0000077F 55                  <1>     push rbp
   247 00000780 4889DD              <1>     mov rbp, rbx
   248 00000783 4889C2              <1>     mov rdx, rax
   249 00000786 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   250 0000078D B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   251 00000792 488D1D20FCFFFF      <1>     lea rbx, debascii
   252                              <1> .od0:
   253 00000799 88D0                <1>     mov al, dl  ;Go low nybble first
   254 0000079B 240F                <1>     and al, 0Fh
   255 0000079D D7                  <1>     xlatb
   256 0000079E 884500              <1>     mov byte [rbp], al
   257 000007A1 48FFCD              <1>     dec rbp ;Go down one char pos
   258 000007A4 88D0                <1>     mov al, dl
   259 000007A6 24F0                <1>     and al, 0F0h    ;Hi nybble next
   260 000007A8 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   261 000007AB D7                  <1>     xlatb
   262 000007AC 884500              <1>     mov byte [rbp], al  ;Store char
   263 000007AF 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   264 000007B3 48FFCD              <1>     dec rbp
   265 000007B6 FFC9                <1>     dec ecx
   266 000007B8 75DF                <1>     jnz .od0
   267 000007BA 5D                  <1>     pop rbp
   268 000007BB 5A                  <1>     pop rdx
   269 000007BC 59                  <1>     pop rcx
   270 000007BD 5B                  <1>     pop rbx
   271 000007BE C3                  <1>     ret
   272                              <1> 
   273                              <1> overlayQword:
   274                              <1>     ;Called with number in rax
   275                              <1>     ;pointer to START of 16 byte space for number in rbx
   276 000007BF 53                  <1>     push rbx
   277 000007C0 51                  <1>     push rcx
   278 000007C1 52                  <1>     push rdx
   279 000007C2 55                  <1>     push rbp
   280 000007C3 4889DD              <1>     mov rbp, rbx
   281 000007C6 4889C2              <1>     mov rdx, rax
   282 000007C9 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   283 000007D0 B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   284 000007D5 488D1DDDFBFFFF      <1>     lea rbx, debascii
   285                              <1> .oq0:
   286 000007DC 88D0                <1>     mov al, dl  ;Go low nybble first
   287 000007DE 240F                <1>     and al, 0Fh
   288 000007E0 D7                  <1>     xlatb
   289 000007E1 884500              <1>     mov byte [rbp], al
   290 000007E4 48FFCD              <1>     dec rbp ;Go down one char pos
   291 000007E7 88D0                <1>     mov al, dl
   292 000007E9 24F0                <1>     and al, 0F0h    ;Hi nybble next
   293 000007EB C0E804              <1>     shr al, 4   ;Shift hi nybble low
   294 000007EE D7                  <1>     xlatb
   295 000007EF 884500              <1>     mov byte [rbp], al  ;Store char
   296 000007F2 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   297 000007F6 48FFCD              <1>     dec rbp
   298 000007F9 FFC9                <1>     dec ecx
   299 000007FB 75DF                <1>     jnz .oq0
   300 000007FD 5D                  <1>     pop rbp
   301 000007FE 5A                  <1>     pop rdx
   302 000007FF 59                  <1>     pop rcx
   303 00000800 5B                  <1>     pop rbx
   304 00000801 C3                  <1>     ret
   305                              <1> 
   306                              <1> debPrintFunctionName:
   307                              <1> ;Prints the DOS function that has been entered
   308                              <1> ;Entered with ah = Function number
   309 00000802 88E0                <1>     mov al, ah  ;Get dos function number
   310 00000804 488D1DAEFBFFFF      <1>     lea rbx, debascii
   311 0000080B 488D1535000000      <1>     lea rdx, .number
   312 00000812 24F0                <1>     and al, 0F0h    ;Get high nybble first
   313 00000814 C0E804              <1>     shr al, 4
   314 00000817 D7                  <1>     xlatb
   315 00000818 8802                <1>     mov byte [rdx], al
   316 0000081A 88E0                <1>     mov al, ah
   317 0000081C 240F                <1>     and al, 0Fh
   318 0000081E D7                  <1>     xlatb
   319 0000081F 884201              <1>     mov byte [rdx + 1], al
   320 00000822 488D2D06000000      <1>     lea rbp, .dosString
   321 00000829 E856FCFFFF          <1>     call debPrintNullString
   322 0000082E C3                  <1>     ret
   323 0000082F 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   323 00000838 696F6E20496E742034- <1>
   323 00000841 31682F41483D        <1>
   324 00000847 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   325                              <1> 
   326                              <1> ;----------------:
   327                              <1> ;!!!! MACROS !!!!:
   328                              <1> ;----------------:
   329                              <1> ;Insert macro when entering a debug block
   330                              <1> %macro debugEnterM 0
   331                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   332                              <1>     mov rsp, debStackTop
   333                              <1> ;Push all registers except rsp on stack
   334                              <1>     push rax
   335                              <1>     push rbx
   336                              <1>     push rcx
   337                              <1>     push rdx
   338                              <1>     push rsi
   339                              <1>     push rdi
   340                              <1>     push rbp
   341                              <1>     push r8
   342                              <1>     push r9
   343                              <1>     push r10
   344                              <1>     push r11
   345                              <1>     push r12
   346                              <1>     push r13
   347                              <1>     push r14
   348                              <1>     push r15
   349                              <1>     pushfq
   350                              <1> %endmacro
   351                              <1> ;Insert macro when exiting a debug block
   352                              <1> %macro debugExitM 0
   353                              <1>     popfq
   354                              <1>     pop r15
   355                              <1>     pop r14
   356                              <1>     pop r13
   357                              <1>     pop r12
   358                              <1>     pop r11
   359                              <1>     pop r10
   360                              <1>     pop r9
   361                              <1>     pop r8
   362                              <1>     pop rbp
   363                              <1>     pop rdi
   364                              <1>     pop rsi
   365                              <1>     pop rdx
   366                              <1>     pop rcx
   367                              <1>     pop rbx
   368                              <1>     pop rax
   369                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   370                              <1> %endmacro
    21                                  %include "./Source/Kernel/FAT/buffun.asm"
    22                              <1> ;This file contains FAT disk buffer related functions that
    23                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    24                              <1> ;----------------------------------------------------
    25                              <1> ;           Externally referenced functions         :
    26                              <1> ;----------------------------------------------------
    27                              <1> 
    28                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    29                              <1> ;Sets the buffer in rdi to the head of the chain
    30                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    31                              <1> ;Output: Buffer header set to the head of the chain
    32 0000084D 48393D(55C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    33 00000854 7428                <1>     je .exit
    34 00000856 56                  <1>     push rsi
    35 00000857 488B35(55C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    36                              <1> .mainlp:
    37 0000085E 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    38 00000861 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    39 00000863 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    40 00000866 EBF6                <1>     jmp short .mainlp
    41                              <1> .fnd:
    42 00000868 57                  <1>     push rdi
    43 00000869 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    44 0000086C 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    45 0000086F 5F                  <1>     pop rdi ;Get original buf back
    46 00000870 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    47 00000873 488735(55C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    48 0000087A 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    49 0000087D 5E                  <1>     pop rsi
    50                              <1> .exit:
    51                              <1>     return
    18                              <2> %%_ret:
    19 0000087E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    52                              <1> 
    53                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    54                              <1> ;1 External reference
    55                              <1> ;Input: rdi = Buffer header to flush and free
    56 0000087F E844000000          <1>     call flushBuffer
    57 00000884 7306                <1>     jnc .exit
    58                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    59 00000886 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    60                              <1> .exit:
    61                              <1>     return
    18                              <2> %%_ret:
    19 0000088C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    64                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    65                              <1> ;Output: rdi = First disk buffer
    66 0000088D 488B3D(55C00300)    <1>     mov rdi, [bufHeadPtr]
    67 00000894 57                  <1>     push rdi
    68                              <1> .lp:
    69 00000895 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    70 00000899 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    71 0000089C 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    72 000008A3 75F0                <1>     jne .lp
    73 000008A5 5F                  <1>     pop rdi
    74                              <1>     return
    18                              <2> %%_ret:
    19 000008A6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    75                              <1> 
    76                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    77                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    78                              <1> ; second buffer in the chain in rdi
    79                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    80                              <1> ;Output: rdi = Second buffer in the chain
    81 000008A7 52                  <1>     push rdx
    82 000008A8 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    83 000008AB E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    84 000008B0 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    85 000008B3 5A                  <1>     pop rdx
    86                              <1>     return
    18                              <2> %%_ret:
    19 000008B4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    87                              <1> 
    88                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    89                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    90                              <1> ;Input: rdi = Buffer header to start searching at
    91                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    92                              <1> ;        ZF=ZE => No unreferenced buffer found
    93 000008B5 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    94 000008B9 750C                <1>     jnz .exit
    95 000008BB 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    96 000008BE 4881FFFFFFFFFF      <1>     cmp rdi, -1
    97 000008C5 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    98                              <1> .exit:
    99                              <1>     return
    18                              <2> %%_ret:
    19 000008C7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   100                              <1> 
   101                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
   102                              <1> ;Flushes the data in a sector buffer to disk!
   103                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   104                              <1> ;Exit:  CF=NC : Success
   105                              <1> ;       CF=CY : Fail, terminate the request
   106                              <1> ;First make request to device driver
   107 000008C8 50                  <1>     push rax
   108 000008C9 53                  <1>     push rbx
   109 000008CA 51                  <1>     push rcx
   110 000008CB 52                  <1>     push rdx
   111 000008CC 56                  <1>     push rsi
   112 000008CD 55                  <1>     push rbp
   113                              <1> ;If the buffer is freed, skip flushing to avoid issues
   114 000008CE 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
   115 000008D2 7454                <1>     je .fbFreeExit  ;If it is free exit
   116 000008D4 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   117 000008D8 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   118                              <1> .fbRequest0:
   119 000008DA BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   120 000008DF F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   121 000008E3 7406                <1>     jz .fbRequest1
   122 000008E5 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   123                              <1> .fbRequest1:
   124 000008EB 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   125 000008EE B901000000          <1>     mov ecx, 1  ;One sector to copy
   126 000008F3 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   127 000008F7 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   128 000008FB 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   129 000008FF E891320000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   130 00000904 E83B310000          <1>     call absDiskDriverCall    ;Make Driver Request
   131 00000909 7525                <1>     jnz .fbFail
   132                              <1> ;Now check if the buffer was a FAT, to write additional copies
   133 0000090B F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   134 0000090F 7417                <1>     jz .fbFreeExit  ;If not, exit
   135 00000911 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   136 00000914 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   137 00000916 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   138 00000919 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   139 0000091D E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   140                              <1> .fbFreeExit1:
   141 00000922 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   142 00000925 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   143                              <1> .fbFreeExit:
   144 00000928 F8                  <1>     clc
   145                              <1> .fbExitFail:
   146 00000929 5D                  <1>     pop rbp
   147 0000092A 5E                  <1>     pop rsi
   148 0000092B 5A                  <1>     pop rdx
   149 0000092C 59                  <1>     pop rcx
   150 0000092D 5B                  <1>     pop rbx
   151 0000092E 58                  <1>     pop rax
   152                              <1>     return
    18                              <2> %%_ret:
    19 0000092F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   153                              <1> .fbFail:
   154                              <1> ;Enter here only if the request failed
   155 00000930 FFCE                <1>     dec esi
   156 00000932 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   157                              <1> ;Request failed thrice, critical error call
   158 00000934 C605(C9C30300)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   159 0000093B E85F2E0000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   160 00000940 3C01                <1>     cmp al, critRetry
   161 00000942 7496                <1>     je .fbRequest0
   162                              <1>     ;Else we fail (Ignore=Fail here)
   163 00000944 F9                  <1>     stc ;Set error flag to indicate fail
   164 00000945 E9DFFFFFFF          <1>     jmp .fbExitFail
   165                              <1> 
   166                              <1> testDirtyBufferForDrive:    ;External linkage
   167                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   168                              <1> ;Input: al = Drive number (0 based)
   169                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   170                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   171 0000094A 53                  <1>     push rbx
   172 0000094B 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   173                              <1> .tdbfdCheckBuffer:
   174 00000952 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   175 00000955 7509                <1>     jne .tdbfdGotoNextBuffer
   176 00000957 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   177 0000095B 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   178 0000095D F9                  <1>     stc ;Else dirty buffer found, set carry flag
   179                              <1> .tdbfdExit:
   180 0000095E 5B                  <1>     pop rbx
   181                              <1>     return
    18                              <2> %%_ret:
    19 0000095F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   182                              <1> .tdbfdGotoNextBuffer:
   183 00000960 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   184 00000963 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   185 0000096A 74F2                <1>     je .tdbfdExit
   186 0000096C EBE4                <1>     jmp short .tdbfdCheckBuffer
   187                              <1> 
   188                              <1> freeBuffersForDPB:
   189                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   190                              <1> ; to have a drive number of -1, thus freeing it
   191                              <1> ;Given DPB is in rbp
   192 0000096E 53                  <1>     push rbx
   193 0000096F 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   194                              <1> .i0:
   195 00000976 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   196 0000097A 7506                <1>     jne .i1 ;If no, skip freeing
   197 0000097C 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   198                              <1> .i1:
   199 00000982 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   200 00000985 4881FBFFFFFFFF      <1>     cmp rbx, -1
   201 0000098C 75E8                <1>     jne .i0
   202                              <1> .exit:
   203 0000098E 5B                  <1>     pop rbx
   204                              <1>     return
    18                              <2> %%_ret:
    19 0000098F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   205                              <1> 
   206                              <1> setBufferReferenced:
   207                              <1> ;Sets the current buffer in the buffer variable as referenced.
   208                              <1> ; AKA DOS is done with it.
   209                              <1> ;Saves flag state too 
   210 00000990 55                  <1>     push rbp
   211 00000991 9C                  <1>     pushfq
   212 00000992 488B2D(90C60300)    <1>     mov rbp, qword [currBuff]
   213 00000999 804D0920            <1>     or byte [rbp + bufferHdr.bufferFlags], refBuffer
   214 0000099D EB0D                <1>     jmp short clearBufferReferenced.exit
   215                              <1> clearBufferReferenced:
   216                              <1> ;Clears the referenced bit, if the buffer becomes referenced again
   217                              <1> ; Called if DOS is not quite done with this buffer.
   218 0000099F 55                  <1>     push rbp
   219 000009A0 9C                  <1>     pushfq
   220 000009A1 488B2D(90C60300)    <1>     mov rbp, qword [currBuff]
   221 000009A8 806509DF            <1>     and byte [rbp + bufferHdr.bufferFlags], ~refBuffer
   222                              <1> .exit:
   223 000009AC 9D                  <1>     popfq
   224 000009AD 5D                  <1>     pop rbp
   225                              <1>     return
    18                              <2> %%_ret:
    19 000009AE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   226                              <1> 
   227                              <1> 
   228                              <1> getBuffer: ;Internal Linkage ONLY
   229                              <1> ;
   230                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   231                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   232                              <1> ;Flushes if not in disk change mode. 
   233                              <1> ;If in disk change mode, will check to see if the selected buffer 
   234                              <1> ; has data referring a device using the same DPB as we are changing.
   235                              <1> ; If it is, skip flushing, if not, flush first!
   236                              <1> ;
   237                              <1> ;This function will return a pointer to the desired data sector OR 
   238                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   239                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   240                              <1> ;Entry: rax = Sector to read
   241                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   242                              <1> ;       rsi = DPB to use for transaction
   243                              <1> ;Exit:  CF=NC => 
   244                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   245                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   246 000009AF 51                  <1>     push rcx
   247 000009B0 52                  <1>     push rdx
   248 000009B1 56                  <1>     push rsi
   249 000009B2 57                  <1>     push rdi
   250 000009B3 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   251 000009B5 E831010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   252 000009BA 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   253 000009C1 7419                <1>     je .rbReadNewSector
   254 000009C3 48893D(90C60300)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   255 000009CA E8D0FFFFFF          <1>     call clearBufferReferenced  ;Set buffer to unref again if it was referenced
   256                              <1> .rbExit:
   257 000009CF F8                  <1>     clc
   258                              <1> .rbExitNoFlag:
   259 000009D0 5F                  <1>     pop rdi
   260 000009D1 5E                  <1>     pop rsi
   261 000009D2 5A                  <1>     pop rdx
   262 000009D3 59                  <1>     pop rcx
   263 000009D4 488B1D(90C60300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   264                              <1>     return
    18                              <2> %%_ret:
    19 000009DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   265                              <1> .rbReadNewSector:
   266 000009DC E8B3000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   267 000009E1 803D(E7D80300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   268 000009E8 7506                <1>     jne .flush  ;We are not, flush buffer
   269 000009EA 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   270 000009EE 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   271                              <1> .flush:
   272 000009F0 E88AFEFFFF          <1>     call flushAndFreeBuffer
   273 000009F5 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   274                              <1> .skipFlush:
   275                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   276                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   277                              <1>     ; is no longer owned by that File so we mark the owner as none
   278 000009F7 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   279 000009FF 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   280 00000A02 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   281 00000A05 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   282 00000A09 80F902              <1>     cmp cl, fatBuffer
   283 00000A0C B201                <1>     mov dl, 1   ;Default values if not fat buffer
   284 00000A0E 7503                <1>     jne .rbNonFATbuffer
   285 00000A10 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   286                              <1> .rbNonFATbuffer:
   287 00000A13 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   288 00000A16 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   289 00000A19 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   290 00000A1C 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   291 00000A20 C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   292 00000A24 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   293 00000A29 EBA5                <1>     jmp short .rbExitNoFlag
   294                              <1> 
   295                              <1> readSectorBuffer:   ;Internal Linkage
   296                              <1> ;Reads a sector into a built sector buffer
   297                              <1> ;Entry: rdi = Pointer to buffer header
   298                              <1> ;Exit:  CF=NC : Success
   299                              <1> ;       CF=CY : Fail, terminate the request
   300                              <1> ;       rbx pointing to buffer header
   301                              <1> ;First make request to device driver
   302 00000A2B 50                  <1>     push rax
   303 00000A2C 53                  <1>     push rbx
   304 00000A2D 51                  <1>     push rcx
   305 00000A2E 52                  <1>     push rdx
   306 00000A2F 56                  <1>     push rsi
   307 00000A30 55                  <1>     push rbp
   308                              <1> .rsRequest0:
   309 00000A31 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   310 00000A36 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   311 00000A3A 7406                <1>     jz .rsRequest1
   312 00000A3C 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   313                              <1> .rsRequest1:
   314 00000A42 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   315 00000A45 B901000000          <1>     mov ecx, 1  ;One sector to copy
   316 00000A4A 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   317 00000A4E 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   318 00000A52 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   319 00000A56 E845310000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   320 00000A5B E8E42F0000          <1>     call absDiskDriverCall    ;Make Driver Request
   321 00000A60 7508                <1>     jnz .rsFail
   322                              <1> .rsExit:
   323 00000A62 F8                  <1>     clc
   324                              <1> .rsExitFail:
   325 00000A63 5D                  <1>     pop rbp
   326 00000A64 5E                  <1>     pop rsi
   327 00000A65 5A                  <1>     pop rdx
   328 00000A66 59                  <1>     pop rcx
   329 00000A67 5B                  <1>     pop rbx
   330 00000A68 58                  <1>     pop rax
   331                              <1>     return
    18                              <2> %%_ret:
    19 00000A69 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   332                              <1> .rsFail:
   333                              <1> ;Enter here only if the request failed
   334 00000A6A FFCE                <1>     dec esi
   335 00000A6C 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   336                              <1> ;Request failed thrice, critical error call
   337                              <1> ;First free the buffer if we failed to read data into it 
   338 00000A6E 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   339 00000A72 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   340 00000A78 C605(C9C30300)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   341 00000A7F E81B2D0000          <1>     call diskDevErr
   342 00000A84 3C01                <1>     cmp al, critRetry
   343 00000A86 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   344 00000A88 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   345 00000A8C EBA3                <1>     jmp short .rsRequest0
   346                              <1> .fail:
   347 00000A8E F9                  <1>     stc ;Set error flag to indicate fail
   348 00000A8F E9CFFFFFFF          <1>     jmp .rsExitFail
   349                              <1>     
   350                              <1> findLRUBuffer: ;Internal Linkage
   351                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   352                              <1> ; in rbx and the currBuff variable
   353                              <1> ;Input: Nothing
   354                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   355                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   356 00000A94 52                  <1>     push rdx
   357 00000A95 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   358 00000A9C 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   359 00000AA0 7436                <1>     je .flbExit 
   360 00000AA2 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   361 00000AA9 742D                <1>     je .flbExit
   362                              <1> .flbWalk:
   363 00000AAB 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   364 00000AAE 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   365 00000AB1 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   366 00000AB5 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   367 00000AB7 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   368 00000ABE 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   369 00000AC0 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   370                              <1> .flbHeadLink:
   371 00000AC7 488B15(55C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   372 00000ACE 48893D(55C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   373 00000AD5 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   374                              <1> .flbExit:
   375 00000AD8 5A                  <1>     pop rdx
   376 00000AD9 48893D(90C60300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   377                              <1>     return
    18                              <2> %%_ret:
    19 00000AE0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   378                              <1> .flbFreeLink:
   379 00000AE1 51                  <1>     push rcx
   380 00000AE2 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   381 00000AE5 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   382 00000AE8 59                  <1>     pop rcx
   383 00000AE9 EBDC                <1>     jmp short .flbHeadLink
   384                              <1> 
   385                              <1> findSectorInBuffer:     ;Internal linkage
   386                              <1> ;Finds the Buffer for a sector
   387                              <1> ;If the sector is not in a buffer, returns with a -1
   388                              <1> ;Input: rax = Sector number
   389                              <1> ;        dl = Drive number
   390                              <1> ;Output: rdi = Buffer hdr pointer or -1
   391 00000AEB 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   392                              <1> .fsiCheckBuffer:
   393 00000AF2 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   394 00000AF5 7507                <1>     jne .fsiGotoNextBuffer
   395 00000AF7 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   396 00000AFB 7501                <1>     jne .fsiGotoNextBuffer
   397                              <1> .fsiExit:
   398                              <1>     return
    18                              <2> %%_ret:
    19 00000AFD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   399                              <1> .fsiGotoNextBuffer:
   400 00000AFE 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   401 00000B01 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   402 00000B08 74F3                <1>     je .fsiExit
   403 00000B0A EBE6                <1>     jmp short .fsiCheckBuffer
   404                              <1> ;-----------------------------------------------------------------------------
   405                              <1> ;SPECIAL BUFFER FUNCTIONS
   406                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   407                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   408                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   409                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   410                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   411                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   412                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   413                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   414                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   415                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   416                              <1> ;-----------------------------------------------------------------------------
   417                              <1> getBufForFat:
   418                              <1> ;Returns a buffer to use for fat data in rbx
   419                              <1> ;Input: [workingDPB] = DPB to transact on
   420                              <1> ;       rax = Sector to transfer
   421                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   422 00000B0C 51                  <1>     push rcx
   423 00000B0D B102                <1>     mov cl, fatBuffer
   424 00000B0F EB03                <1>     jmp short getBufCommon2
   425                              <1> getBufForDOS:
   426                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   427                              <1> ;Input: [workingDPB] = DPB to transact on
   428                              <1> ;       rax = Sector to transfer
   429                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   430 00000B11 51                  <1>     push rcx
   431 00000B12 B101                <1>     mov cl, dosBuffer
   432                              <1> getBufCommon2:
   433 00000B14 56                  <1>     push rsi
   434 00000B15 57                  <1>     push rdi    ;Push rdi to preserve it
   435 00000B16 488B35(64C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   436 00000B1D EB15                <1>     jmp short getBufCommon.makeReq
   437                              <1> getBufForDir:
   438                              <1> ;Returns a buffer to use for disk directory data in rbx
   439                              <1> ;Input: [currentSFT] = File to manipulate
   440                              <1> ;       rax = Sector to transfer
   441                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   442 00000B1F 51                  <1>     push rcx
   443 00000B20 B104                <1>     mov cl, dirBuffer
   444 00000B22 EB03                <1>     jmp short getBufCommon
   445                              <1> getBufForData:
   446                              <1> ;Returns a buffer to use for disk data in rbx
   447                              <1> ;Requires a File Handle.
   448                              <1> ;Input: [currentSFT] = File to manipulate
   449                              <1> ;       rax = Sector to transfer
   450                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   451 00000B24 51                  <1>     push rcx
   452 00000B25 B108                <1>     mov cl, dataBuffer
   453                              <1> getBufCommon:
   454 00000B27 56                  <1>     push rsi
   455 00000B28 57                  <1>     push rdi
   456 00000B29 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   457 00000B30 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   458                              <1> .makeReq:
   459 00000B34 E876FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   460 00000B39 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   461                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   462                              <1>     ; flushed to the file!
   463                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   464                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   465                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   466 00000B3B F6C103              <1>     test cl, dosBuffer | fatBuffer
   467 00000B3E 7504                <1>     jnz .exit
   468 00000B40 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   469                              <1> .exit:
   470 00000B44 5F                  <1>     pop rdi
   471 00000B45 5E                  <1>     pop rsi
   472 00000B46 59                  <1>     pop rcx
   473                              <1>     return
    18                              <2> %%_ret:
    19 00000B47 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   474                              <1> 
   475                              <1> flushFile:
   476                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   477                              <1> ; FAT/DOS buffers to flush
   478                              <1> ; We flush and free, and set to head of chain before continuing to search
   479                              <1> ;Input: rdi = is the file (sft) we wish to flush
   480                              <1> ;Output: CF=NC => All ok
   481                              <1> ;        CF=CY => A sector failed, exit. 
   482 00000B48 57                  <1>     push rdi
   483 00000B49 56                  <1>     push rsi
   484                              <1>     ;First check if the file has been written to?
   485 00000B4A 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   486 00000B50 742A                <1>     jz .exitNoFlush ;Exit without flushing
   487 00000B52 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   488 00000B55 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   489                              <1> .ffLoop:
   490 00000B5C 4881FFFFFFFFFF      <1>     cmp rdi, -1
   491 00000B63 7411                <1>     je .exit
   492 00000B65 F6470903            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer
   493 00000B69 7514                <1>     jnz .found  ;Flush if either bit is set
   494 00000B6B 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   495 00000B6F 740E                <1>     je .found
   496 00000B71 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   497 00000B74 EBE6                <1>     jmp short .ffLoop
   498                              <1> .exit:
   499                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   500 00000B76 66816605BFFF        <1>     and word [rsi + sft.wDeviceInfo], ~blokFileToFlush  ;Clear that bit!
   501                              <1> .exitNoFlush:
   502 00000B7C 5E                  <1>     pop rsi
   503 00000B7D 5F                  <1>     pop rdi
   504                              <1>     return
    18                              <2> %%_ret:
    19 00000B7E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   505                              <1> .found:
   506                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   507                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   508 00000B7F E8FBFCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   509 00000B84 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   510                              <1>     ;If the sector has been successfully flushed, then it
   511                              <1>     ; is no longer owned by that File so we mark the owner as none
   512 00000B86 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   513 00000B8E E814FDFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   514 00000B93 EBC7                <1>     jmp short .ffLoop
    22                                  %include "./Source/Kernel/FAT/fat.asm"
    23                              <1> ;-----------------------------------:
    24                              <1> ;       File System routines        :
    25                              <1> ;-----------------------------------:
    26                              <1> getFATtype:
    27                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    28                              <1> ;Entry: rbp = DPB to ascertain FAT
    29                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    30 00000B95 53                  <1>     push rbx
    31 00000B96 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    32 00000B99 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    33 00000B9E 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    34 00000BA4 730F                <1>     jae .exit
    35 00000BA6 FFC9                <1>     dec ecx     ;FAT 12 marker
    36 00000BA8 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    37 00000BAE 7205                <1>     jb .exit
    38 00000BB0 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    39                              <1> .exit:
    40 00000BB5 5B                  <1>     pop rbx
    41                              <1>     return
    18                              <2> %%_ret:
    19 00000BB6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> clust2FATEntry:
    44                              <1> ;Converts a cluster number to a offset in the FAT
    45                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    46                              <1> ;        eax = Cluster number to look for
    47                              <1> ;Exit:   eax = Sector on disk of FAT 
    48                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    49                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    50 00000BB7 53                  <1>     push rbx
    51 00000BB8 55                  <1>     push rbp
    52 00000BB9 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    53 00000BC0 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    54 00000BC3 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    55 00000BC9 731E                <1>     jae .fat32
    56 00000BCB 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    57 00000BD1 7209                <1>     jb .fat12
    58                              <1> ;FAT16
    59 00000BD3 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    60 00000BD5 6801000000          <1>     push qword 1
    61 00000BDA EB15                <1>     jmp short .common
    62                              <1> .fat12:
    63 00000BDC 89C1                <1>     mov ecx, eax    ;ecx = eax
    64 00000BDE D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    65 00000BE0 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    66 00000BE2 6800000000          <1>     push qword 0
    67 00000BE7 EB08                <1>     jmp short .common
    68                              <1> .fat32:
    69 00000BE9 6802000000          <1>     push qword 2
    70 00000BEE C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    71                              <1> .common:
    72                              <1> ;eax has the FAToffset
    73 00000BF1 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    74 00000BF5 31D2                <1>     xor edx, edx    ;edx = 0
    75 00000BF7 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    76 00000BF9 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    77 00000BFD 01D8                <1>     add eax, ebx
    78 00000BFF 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    79 00000C00 5D                  <1>     pop rbp
    80 00000C01 5B                  <1>     pop rbx
    81                              <1>     return
    18                              <2> %%_ret:
    19 00000C02 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    82                              <1> 
    83                              <1> getStartSectorOfCluster:
    84                              <1> ;Input: eax = Cluster Number
    85                              <1> ;       rbp = dpb pointer
    86                              <1> ;Output: rax = Starting Sector number for cluster
    87                              <1> ;Gives the data sector we are at in the current cluster
    88                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    89 00000C03 51                  <1>     push rcx
    90 00000C04 09C0                <1>     or eax, eax ;Zero upper dword
    91 00000C06 482D02000000        <1>     sub rax, 2
    92 00000C0C 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    93 00000C0F 48D3E0              <1>     shl rax, cl
    94 00000C12 31C9                <1>     xor ecx, ecx
    95 00000C14 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    96 00000C17 4801C8              <1>     add rax, rcx
    97                              <1>     ;rax now has the first sector of the current cluster
    98 00000C1A 59                  <1>     pop rcx
    99                              <1>     return
    18                              <2> %%_ret:
    19 00000C1B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   100                              <1> 
   101                              <1> allocateClusters:
   102                              <1> ;Working dpb must be set. 
   103                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   104                              <1> ;       ebx = Cluster to link to the new cluster
   105                              <1> ;Output:    
   106                              <1> ;   CF=NC => Complete.
   107                              <1> ;   If eax = -1, then no more free clusters. 
   108                              <1> ;   CF=CY => Hard error, exit
   109                              <1> ; ecx always has number of allocated clusters
   110 00000C1C 53                  <1>     push rbx
   111 00000C1D 56                  <1>     push rsi
   112 00000C1E 51                  <1>     push rcx    ;Save tfr count on stack
   113 00000C1F 67E32B              <1>     jecxz .exit ;Allocating nothing? Exit
   114                              <1> .allocateLoop:
   115 00000C22 E860000000          <1>     call findFreeClusterData
   116 00000C27 7224                <1>     jc .exit
   117 00000C29 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   118 00000C2E 741D                <1>     je .exit    ;If the cluster number is -1, return immediately
   119                              <1>     ;eax has first free cluster value to use
   120                              <1>     ;First we link the previous cluster to this cluster
   121 00000C30 BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   122 00000C35 E8CE010000          <1>     call writeFAT   ;Allocate this cluster first
   123 00000C3A 7211                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   124                              <1>     ;eax points to this allocated cluster
   125                              <1>     ;ebx points to the previous last cluster
   126 00000C3C 89C6                <1>     mov esi, eax    ;New cluster as "value"
   127 00000C3E 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   128 00000C40 E8C3010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   129 00000C45 7206                <1>     jc .exit
   130 00000C47 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   131 00000C49 FFC9                <1>     dec ecx ;One less cluster allocated
   132 00000C4B 75D5                <1>     jnz .allocateLoop
   133                              <1> .exit:
   134 00000C4D 5E                  <1>     pop rsi ;Pop the tfr count into esi
   135 00000C4E F7D9                <1>     neg ecx
   136 00000C50 01F1                <1>     add ecx, esi
   137 00000C52 5E                  <1>     pop rsi
   138 00000C53 5B                  <1>     pop rbx
   139                              <1>     return
    18                              <2> %%_ret:
    19 00000C54 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   140                              <1> 
   141                              <1> findFreeCluster:
   142                              <1> ;Walks the FAT to find a free cluster and returns the 
   143                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   144                              <1> ;Works on the workingDPB
   145                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   146 00000C55 53                  <1>     push rbx
   147 00000C56 52                  <1>     push rdx
   148 00000C57 55                  <1>     push rbp
   149 00000C58 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   150 00000C5F 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   151                              <1>     ;Use WALKFAT
   152                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   153                              <1>     ;If WALKFAT returns 0 then its a free cluster
   154 00000C63 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   155 00000C68 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   156                              <1> .fatLoop:
   157 00000C6B 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   158 00000C6D E8ED000000          <1>     call walkFAT
   159 00000C72 720F                <1>     jc .exitFail    ;If something goes wrong, just return
   160 00000C74 85C0                <1>     test eax, eax   ;Is this cluster free?
   161 00000C76 7408                <1>     jz .exit    ;If yes, exit
   162 00000C78 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   163 00000C7C 39D0                <1>     cmp eax, edx
   164 00000C7E 76EB                <1>     jbe .fatLoop
   165                              <1> .exit:
   166 00000C80 89D8                <1>     mov eax, ebx
   167 00000C82 F8                  <1>     clc
   168                              <1> .exitFail:      ;Keep carry flag
   169 00000C83 5D                  <1>     pop rbp
   170 00000C84 5A                  <1>     pop rdx
   171 00000C85 5B                  <1>     pop rbx
   172                              <1>     return
    18                              <2> %%_ret:
    19 00000C86 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   173                              <1> 
   174                              <1> findFreeClusterData:
   175                              <1> ;Walks the FAT to find a free cluster and returns the 
   176                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   177                              <1> ;Also finds NumberOfFreeCLusters. Both fields get filled in the workingDPB
   178                              <1> ;Works on the workingDPB
   179                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   180 00000C87 53                  <1>     push rbx
   181 00000C88 52                  <1>     push rdx
   182 00000C89 55                  <1>     push rbp
   183 00000C8A 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   184 00000C91 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   185                              <1>     ;Mark dFirstFreeCluster as -1 and dNumberOfFreeClusters as 0
   186 00000C95 31D2                <1>     xor edx, edx
   187 00000C97 895531              <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], edx ;Zero this field
   188 00000C9A FFCA                <1>     dec edx
   189 00000C9C 89552D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], edx ;Set to -1, unknown (i.e. none)
   190                              <1>     ;Use WALKFAT
   191                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   192                              <1>     ;If WALKFAT returns 0 then its a free cluster
   193 00000C9F B802000000          <1>     mov eax, 2  ;Start with cluster 2
   194 00000CA4 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   195                              <1> .fatLoop:
   196 00000CA7 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   197 00000CA9 E8B1000000          <1>     call walkFAT
   198 00000CAE 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   199 00000CB0 85C0                <1>     test eax, eax   ;Is this cluster free?
   200 00000CB2 750C                <1>     jne .fatProceed
   201 00000CB4 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   202 00000CB7 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   203 00000CBE 7410                <1>     je .fatFirst
   204                              <1> .fatProceed:
   205 00000CC0 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   206 00000CC4 39D0                <1>     cmp eax, edx
   207 00000CC6 76DF                <1>     jbe .fatLoop
   208                              <1> .exit:
   209 00000CC8 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   210 00000CCB F8                  <1>     clc
   211                              <1> .exitFail:      ;Keep carry flag
   212 00000CCC 5D                  <1>     pop rbp
   213 00000CCD 5A                  <1>     pop rdx
   214 00000CCE 5B                  <1>     pop rbx
   215                              <1>     return
    18                              <2> %%_ret:
    19 00000CCF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   216                              <1> .fatFirst:
   217 00000CD0 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   218 00000CD3 EBEB                <1>     jmp short .fatProceed
   219                              <1> 
   220                              <1> getNextSectorOfFile:
   221                              <1> ;This function will read the next sector for a file into a buffer.
   222                              <1> ;If the next sector to be read lives in the next cluster, it will update
   223                              <1> ; the vars appropriately
   224                              <1> ;
   225                              <1> ;Input: rbp = dpb pointer
   226                              <1> ;Output:
   227                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   228                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   229                              <1> ;       CF=CY => Critical error occurred and was FAILed
   230                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   231                              <1> ; next cluster and read first sector 
   232                              <1>     ;Check if we need to go to next cluster
   233 00000CD5 8A05(AEC60300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   234 00000CDB 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   235 00000CDE 7416                <1>     je .gotoNextCluster
   236                              <1>     ;Goto next sector in same cluster
   237 00000CE0 FE05(AEC60300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   238 00000CE6 48FF05(AFC60300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   239 00000CED 488B05(AFC60300)    <1>     mov rax, qword [currSectD]
   240                              <1> .exitOK:
   241 00000CF4 F8                  <1>     clc
   242                              <1> .exitFail:
   243                              <1>     return
    18                              <2> %%_ret:
    19 00000CF5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   244                              <1> .gotoNextCluster:
   245 00000CF6 8B05(A6C60300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   246 00000CFC E85E000000          <1>     call walkFAT
   247 00000D01 72F2                <1>     jc .exitFail
   248                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   249 00000D03 3DFFFFFFFF          <1>     cmp eax, -1
   250 00000D08 74EA                <1>     je .exitOK
   251                              <1> ;Update the new cluster and sector information
   252 00000D0A 8905(A6C60300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   253 00000D10 FF05(A2C60300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   254 00000D16 E8E8FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   255 00000D1B 488905(AFC60300)    <1>     mov qword [currSectD], rax  ;Save it
   256 00000D22 C605(AEC60300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   257 00000D29 EBC9                <1>     jmp short .exitOK
   258                              <1> 
   259                              <1> unlinkFAT:
   260                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   261                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   262                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   263                              <1> ; cluster must be set to EOC before this proc is called.
   264                              <1> ;Stops at first invalid cluster number.
   265                              <1> ;
   266                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   267                              <1> ;       rbp = Current DPB to use for disk
   268                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   269                              <1> 
   270 00000D2B 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   271 00000D2C E80D000000          <1>     call truncateFAT
   272 00000D31 58                  <1>     pop rax ;Get back original cluster value
   273 00000D32 50                  <1>     push rax
   274 00000D33 56                  <1>     push rsi
   275 00000D34 31F6                <1>     xor esi, esi  ;Free cluster
   276 00000D36 E8CD000000          <1>     call writeFAT
   277 00000D3B 5E                  <1>     pop rsi
   278 00000D3C 58                  <1>     pop rax
   279                              <1>     return
    18                              <2> %%_ret:
    19 00000D3D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   280                              <1> 
   281                              <1> truncateFAT:
   282                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   283                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   284                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   285                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   286                              <1> ;Stops at first invalid cluster number.
   287                              <1> ;
   288                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   289                              <1> ;       rbp = Current DPB to use for disk
   290                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   291 00000D3E 53                  <1>     push rbx
   292 00000D3F 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   293                              <1> .lp:
   294 00000D41 E819000000          <1>     call walkFAT    ;Get the value of the cluster at this location in eax
   295 00000D46 7215                <1>     jc .exit    ;Error exit
   296 00000D48 3DFFFFFFFF          <1>     cmp eax, -1 ;End of chain?
   297 00000D4D 740E                <1>     je .exit
   298 00000D4F 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   299 00000D50 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   300 00000D52 E8B1000000          <1>     call writeFAT
   301 00000D57 7204                <1>     jc .exit    ;Error exit
   302 00000D59 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   303 00000D5B EBE4                <1>     jmp short .lp
   304                              <1> .exit:
   305 00000D5D 5B                  <1>     pop rbx
   306                              <1>     return
    18                              <2> %%_ret:
    19 00000D5E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   307                              <1> walkFAT:
   308                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   309                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   310                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   311                              <1> ;       rbp = DPB
   312                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   313                              <1> ;If carry set, getBuffer failed!
   314 00000D5F 53                  <1>     push rbx
   315 00000D60 51                  <1>     push rcx
   316 00000D61 52                  <1>     push rdx
   317 00000D62 57                  <1>     push rdi
   318 00000D63 55                  <1>     push rbp
   319 00000D64 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   320 00000D66 E84CFEFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   321                              <1>     ;and FAT type in ecx
   322 00000D6B E89CFDFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   323 00000D70 7237                <1>     jc .exitFail
   324                              <1>     ;Check if FAT 12, 16, 32
   325 00000D72 85C9                <1>     test ecx, ecx
   326 00000D74 743E                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   327 00000D76 F7C101000000        <1>     test ecx, 1
   328 00000D7C 7413                <1>     jz .goToNextClusterFat32
   329                              <1>     ;Here we handle FAT16
   330 00000D7E 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   331 00000D83 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   332 00000D88 721E                <1>     jb .exit
   333 00000D8A B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   334 00000D8F EB17                <1>     jmp short .exit
   335                              <1> .goToNextClusterFat32:
   336 00000D91 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   337 00000D95 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   338 00000D9A 7207                <1>     jb .validCluster32   
   339 00000D9C B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   340 00000DA1 EB05                <1>     jmp short .exit
   341                              <1> .validCluster32:
   342 00000DA3 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   343                              <1> .exit:
   344 00000DA8 F8                  <1>     clc
   345                              <1> .exitFail:
   346 00000DA9 E8E2FBFFFF          <1>     call setBufferReferenced    ;We are done with the disk buffer
   347 00000DAE 5D                  <1>     pop rbp
   348 00000DAF 5F                  <1>     pop rdi
   349 00000DB0 5A                  <1>     pop rdx
   350 00000DB1 59                  <1>     pop rcx
   351 00000DB2 5B                  <1>     pop rbx
   352                              <1>     return
    18                              <2> %%_ret:
    19 00000DB3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   353                              <1> .gotoNextClusterFat12:
   354                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   355                              <1> ;eax has the sector number of the FAT
   356                              <1> ;edx has byte offset into the sector
   357                              <1> ;edi has current cluster number
   358                              <1> ;rbx has ptr to buffer header
   359 00000DB4 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   360 00000DBA 7431                <1>     jz .gotoNextClusterFat12Even
   361                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   362 00000DBC 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   363 00000DC0 29D1                <1>     sub ecx, edx
   364 00000DC2 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   365 00000DC4 751D                <1>     jnz .gotoNextClusterFat12NoCross
   366                              <1>     ;Boundary cross, build entry properly
   367 00000DC6 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   368 00000DCB E8C0FBFFFF          <1>     call setBufferReferenced  ;We are done with the current buffer
   369 00000DD0 FFC0                <1>     inc eax ;Get next FAT sector
   370 00000DD2 53                  <1>     push rbx
   371 00000DD3 E834FDFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   372 00000DD8 72CF                <1>     jc .exitFail
   373 00000DDA 58                  <1>     pop rax ;Get bl in al, the last entry from the previous buffer
   374 00000DDB 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   375 00000DDE C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   376 00000DE1 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   377                              <1> .gotoNextClusterFat12NoCross:
   378 00000DE3 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   379 00000DE8 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   380 00000DEB EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   381                              <1> .gotoNextClusterFat12Even:
   382                              <1>     ;Here the cluster is even and can't cross a sector boundary
   383 00000DED 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   384 00000DF2 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   385                              <1> .checkIfLastFAT12Cluster:
   386 00000DF7 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   387 00000DFC 72AA                <1>     jb .exit         ;If so, exit with it in eax
   388 00000DFE B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   389 00000E03 E9A0FFFFFF          <1>     jmp .exit
   390                              <1> 
   391                              <1> writeFAT:
   392                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   393                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   394                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   395                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   396                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   397 00000E08 53                  <1>     push rbx
   398 00000E09 51                  <1>     push rcx
   399 00000E0A 52                  <1>     push rdx
   400 00000E0B 56                  <1>     push rsi
   401 00000E0C 57                  <1>     push rdi
   402 00000E0D 55                  <1>     push rbp
   403 00000E0E 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   404 00000E10 89DE                <1>     mov esi, ebx    ;Save the cluster value in esi
   405 00000E12 E8A0FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   406                              <1>     ;and FAT type in ecx
   407 00000E17 E8F0FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   408 00000E1C 721E                <1>     jc .exitFail
   409                              <1>     ;Check if FAT 12, 16, 32
   410 00000E1E 85C9                <1>     test ecx, ecx
   411 00000E20 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   412 00000E22 F7C101000000        <1>     test ecx, 1
   413 00000E28 7407                <1>     jz .goToNextClusterFat32
   414                              <1>     ;Here we handle FAT16
   415 00000E2A 66897C1330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], di ;Store the value
   416 00000E2F EB0A                <1>     jmp short .exit
   417                              <1> .goToNextClusterFat32:
   418 00000E31 81E7FFFFFF0F        <1>     and edi, 0FFFFFFFh  ;Zero upper nybble
   419 00000E37 897C1330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], edi
   420                              <1> .exit:
   421 00000E3B F8                  <1>     clc
   422                              <1> .exitFail:
   423 00000E3C E84FFBFFFF          <1>     call setBufferReferenced    ;We are done with the disk buffer
   424 00000E41 5D                  <1>     pop rbp
   425 00000E42 5F                  <1>     pop rdi
   426 00000E43 5E                  <1>     pop rsi
   427 00000E44 5A                  <1>     pop rdx
   428 00000E45 59                  <1>     pop rcx
   429 00000E46 5B                  <1>     pop rbx
   430                              <1>     return
    18                              <2> %%_ret:
    19 00000E47 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   431                              <1> .gotoNextClusterFat12:
   432                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   433                              <1> ;eax has the sector number of the FAT
   434                              <1> ;edx has byte offset into the sector
   435                              <1> ;edi has current cluster number
   436                              <1> ;rbx has ptr to buffer header
   437 00000E48 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   438 00000E4E F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   439 00000E54 7445                <1>     jz .gotoNextClusterFat12Even
   440                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   441 00000E56 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   442 00000E5A 29D1                <1>     sub ecx, edx
   443 00000E5C FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   444 00000E5E 752C                <1>     jnz .gotoNextClusterFat12NoCross
   445                              <1>     ;Boundary cross, build entry properly
   446                              <1>     ;Replace the high nybble of the low byte 
   447 00000E60 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   448 00000E65 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   449 00000E6B C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   450 00000E6E 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   451 00000E70 C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   452 00000E73 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   453 00000E77 E814FBFFFF          <1>     call setBufferReferenced  ;We are done with the current buffer
   454 00000E7C FFC0                <1>     inc eax ;Get next FAT sector
   455 00000E7E E889FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   456 00000E83 72B7                <1>     jc .exitFail
   457 00000E85 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   458 00000E87 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   459 00000E8A EBAF                <1>     jmp short .exit
   460                              <1> .gotoNextClusterFat12NoCross:
   461 00000E8C 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   462 00000E91 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   463 00000E96 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   464 00000E99 EB0A                <1>     jmp short .fat12common
   465                              <1> .gotoNextClusterFat12Even:
   466                              <1>     ;Here the cluster is even and can't cross a sector boundary
   467 00000E9B 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   468 00000EA0 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   469                              <1> .fat12common:
   470 00000EA5 09F0                <1>     or eax, esi     ;Add the new entry bits
   471 00000EA7 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   472 00000EAC E98AFFFFFF          <1>     jmp .exit
    23                                  %include "./Source/Kernel/FAT/findfile.asm"
    24                              <1> ;Generic Find First and Find Next functions here
    25                              <1> findNextMain:
    26 00000EB1 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
    27 00000EB8 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
    28 00000EBB 7408                <1>     jz .notNet
    29 00000EBD B81C110000          <1>     mov eax, 0111Ch ;Netowrk find next
    30 00000EC2 CD4F                <1>     int 4Fh
    31                              <1>     return  ;Return propagating the error code
    18                              <2> %%_ret:
    19 00000EC4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    32                              <1> .notNet:
    33 00000EC5 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    34 00000EC7 FEC0                <1>     inc al  ;Convert into 1 based number
    35 00000EC9 E814320000          <1>     call dosCrit1Enter
    36 00000ECE E8462E0000          <1>     call setDrive   ;Set CDS and current drive vars
    37 00000ED3 720C                <1>     jc .critError   ;Return error if this fails
    38 00000ED5 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] 
    39 00000EDC E8882B0000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    40                              <1> .critError:
    41 00000EE1 E806320000          <1>     call dosCrit1Exit
    42                              <1>     retc    ;Return error if this fails
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000EE6 72DC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    43 00000EE8 E801000000          <1>     call searchMoreDir
    44                              <1>     return
    18                              <2> %%_ret:
    19 00000EED C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    45                              <1> searchMoreDir:
    46                              <1> ;The three directory variables are set up from the ffblock. 
    47                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    48                              <1> ;Current DTA is also used to contain the ff block address
    49                              <1> ;All registers can be trashed
    50 00000EEE 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    51                              <1>     ;First setup dirClustA and dirSect vars
    52 00000EF5 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
    53 00000EFC 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    54 00000EFF 8905(D5C60300)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    55 00000F05 8905(D1C60300)      <1>     mov dword [dirClustPar], eax
    56                              <1>     ;Get number of 32 byte entries in a sector
    57 00000F0B 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    58                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    59 00000F0E C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    60                              <1>     ;Now get bytes per cluster
    61 00000F11 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    62 00000F13 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    63 00000F17 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    64 00000F1B D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    65 00000F1D 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    66 00000F1F 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    67 00000F21 31D2                <1>     xor edx, edx
    68 00000F23 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    69                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    70                              <1>     ;edx has byte offset into cluster (or Root dir)
    71 00000F25 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    72                              <1>     ;Now compute sector offset into cluster
    73 00000F27 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    74 00000F2B 89D0                <1>     mov eax, edx    ;Move offset into cluster
    75 00000F2D 31D2                <1>     xor edx, edx
    76 00000F2F F7F1                <1>     div ecx 
    77                              <1>     ;eax now has sector offset into cluster (or root dir)
    78                              <1>     ;edx has byte offset into sector 
    79 00000F31 668905(D9C60300)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    80 00000F38 C1EA05              <1>     shr edx, 5 ;Divide edx by 32 to get Dir Entry
    81 00000F3B 8915(DBC60300)      <1>     mov dword [dirEntry], edx
    82 00000F41 8B05(D5C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    83 00000F47 85C0                <1>     test eax, eax   ;If we at cluster 0, we are in old style root dir
    84 00000F49 7465                <1>     jz .oldFat
    85                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    86 00000F4B 89D9                <1>     mov ecx, ebx
    87 00000F4D 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    88                              <1> .fatlp:
    89 00000F50 E80AFEFFFF          <1>     call walkFAT
    90 00000F55 3DFFFFFFFF          <1>     cmp eax, -1
    91 00000F5A 7468                <1>     je .errorExit
    92 00000F5C FFC9                <1>     dec ecx
    93 00000F5E 75F0                <1>     jnz .fatlp
    94 00000F60 8905(D5C60300)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    95                              <1> .skipFatWalk:
    96 00000F66 488D059F000000      <1>     lea rax, searchDir.nextEp
    97 00000F6D 50                  <1>     push rax    ;Push the return address onto stack
    98 00000F6E 8B05(D5C60300)      <1>     mov eax, dword [dirClustA]
    99 00000F74 E88AFCFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   100 00000F79 0FB71D(D9C60300)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   101 00000F80 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   102                              <1> .common:
   103 00000F83 E889FBFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   104 00000F88 0F821C010000        <1>     jc searchDir.hardError
   105 00000F8E E81A010000          <1>     call searchDir.setupBuffer  ;rbx has the buffer ptr for this dir sector
   106 00000F93 8B05(DBC60300)      <1>     mov eax, dword [dirEntry]
   107 00000F99 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
   108 00000F9B C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
   109 00000F9E 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
   110                              <1>     ;We continue AS IF this entry was bad
   111                              <1>     ;Now setup al and rdi as upon normal entry 
   112 00000FA1 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get FFBlock buffer to use in rdi
   113 00000FA8 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib]  ;Get the search attrib
   114 00000FAB E940010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within findInBuffer
   115                              <1>     ;The return address on the stack will return to the ep's pushed
   116                              <1> .oldFat:
   117                              <1> ;Old FAT 12/16 root dirs fall thru here only
   118 00000FB0 488D05D4000000      <1>     lea rax, searchDir.oldNextEP
   119 00000FB7 50                  <1>     push rax    ;Push return address onto the stack
   120 00000FB8 0FB705(D9C60300)    <1>     movzx eax, word [dirSect]   ;Get the root directory sector offset
   121 00000FBF 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   122 00000FC2 EBBF                <1>     jmp short .common
   123                              <1> .errorExit:
   124 00000FC4 F9                  <1>     stc
   125                              <1>     return
    18                              <2> %%_ret:
    19 00000FC5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   126                              <1> searchDir:
   127                              <1> ;Called in a level 1 critical section. 
   128                              <1> ;The three directory variables are set and the ffblock is setup
   129                              <1> ; with template, drive number and attribute fields. 
   130                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   131                              <1> ;Current DTA is also used to contain the ff block address
   132                              <1> ;All registers can be trashed
   133                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   134                              <1> 
   135                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   136                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   137 00000FC6 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   138 00000FCD 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   139 00000FD3 7408                <1>     jz .notNet
   140 00000FD5 B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   141 00000FDA CD4F                <1>     int 4fh
   142                              <1>     return
    18                              <2> %%_ret:
    19 00000FDC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   143                              <1> .notNet:
   144 00000FDD 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   145 00000FE4 8B05(D5C60300)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   146 00000FEA 85C0                <1>     test eax, eax
   147 00000FEC 0F847E000000        <1>     jz .oldRoot
   148 00000FF2 E80CFCFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   149                              <1> .sectorLoop:
   150 00000FF7 E815FBFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   151 00000FFC 0F82A8000000        <1>     jc .hardError
   152 00001002 E8A6000000          <1>     call .setupBuffer       ;rbx has the buffer pointer for this dir sector
   153 00001007 E8B1000000          <1>     call findInBuffer
   154                              <1> .nextEp:
   155                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000100C 73CE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   156                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   157                              <1>     ;IF however, the next cluster is -1, then we return fail
   158 0000100E 8B05(D5C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   159 00001014 8905(A6C60300)      <1>     mov dword [currClustD], eax
   160 0000101A 668B05(D9C60300)    <1>     mov ax, word [dirSect]
   161 00001021 8805(AEC60300)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   162 00001027 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   163 0000102B 488905(AFC60300)    <1>     mov qword [currSectD], rax  
   164 00001032 C705(A2C60300)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   164 0000103A 0000                <1>
   165 0000103C E894FCFFFF          <1>     call getNextSectorOfFile
   166 00001041 7267                <1>     jc .hardError
   167 00001043 483DFFFFFFFF        <1>     cmp rax, -1
   168 00001049 745B                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   169 0000104B 66FF05(D9C60300)    <1>     inc word [dirSect]  ;Goto next sector
   170 00001052 8B05(D5C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   171 00001058 3B05(A6C60300)      <1>     cmp eax, dword [currClustD] ;Did it change?
   172 0000105E 7497                <1>     je .sectorLoop  ;If not, we advanced sectors only
   173 00001060 66C705(D9C60300)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   173 00001068 00                  <1>
   174 00001069 E822F9FFFF          <1>     call setBufferReferenced    ;We are done with the current buffer
   175 0000106E EB87                <1>     jmp short .sectorLoop 
   176                              <1> 
   177                              <1> .oldRoot:
   178                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   179                              <1> ; one large contiguous cluster.
   180                              <1> ;   ecx = Number of entries per sector
   181                              <1> .oldSectorLp:
   182 00001070 0FB705(D9C60300)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   183 00001077 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   184 0000107A E892FAFFFF          <1>     call getBufForDOS
   185 0000107F 7229                <1>     jc .hardError
   186 00001081 E827000000          <1>     call .setupBuffer       ;rbx has the buffer pointer for this dir sector
   187 00001086 E832000000          <1>     call findInBuffer
   188                              <1> .oldNextEP:
   189                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 0000108B 7201                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 0000108D C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   190 0000108E 66FF05(D9C60300)    <1>     inc word [dirSect]  ;Goto next sector in directory
   191 00001095 8B4509              <1>     mov eax, dword [rbp + dpb.wNumberRootDirEntries]
   192 00001098 663905(DBC60300)    <1>     cmp word [dirEntry], ax ;Have we reached the last dir entry?
   193 0000109F E8ECF8FFFF          <1>     call setBufferReferenced    ;We are done with this buffer
   194 000010A4 72CA                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   195                              <1> .fnfError:
   196 000010A6 B012                <1>     mov al, errNoFil
   197 000010A8 F9                  <1>     stc
   198                              <1>     return
    18                              <2> %%_ret:
    19 000010A9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   199                              <1> .hardError:
   200 000010AA B0FF                <1>     mov al, -1
   201                              <1>     return
    18                              <2> %%_ret:
    19 000010AC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   202                              <1> .setupBuffer:
   203 000010AD C6430904            <1>     mov byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   204 000010B1 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   205 000010B5 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   206 000010B9 C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   207                              <1>     return
    18                              <2> %%_ret:
    19 000010BC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   208                              <1> 
   209                              <1> findInBuffer:
   210                              <1> ;Input: ecx = Number of entries in sector buffer to look for
   211                              <1> ;       rsi = Sector buffer data area
   212                              <1> ;Output: CF=CY => No entries found
   213                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   214 000010BD 8A05(56C60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   215 000010C3 E8C9000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   216                              <1> .searchMainLp:
   217 000010C8 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   218 000010CB 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   219 000010CE 803D(CAC30300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   220 000010D5 742C                <1>     je .exclusiveDir
   221 000010D7 80FC08              <1>     cmp ah, dirVolumeID
   222 000010DA 742E                <1>     je .volFile
   223 000010DC 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   224 000010DE 7710                <1>     ja .nextEntry
   225                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   226                              <1>     ;rdi points to the ffBlock to use
   227                              <1> .scanName:
   228 000010E0 56                  <1>     push rsi
   229 000010E1 488D3D(DBC50300)    <1>     lea rdi, fcbName ;Goto name template to search for
   230 000010E8 E88C000000          <1>     call .nameCompare
   231 000010ED 5E                  <1>     pop rsi
   232 000010EE 7420                <1>     je .searchEntryFound
   233                              <1> .nextEntry:
   234                              <1> ;Go to next entry
   235 000010F0 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   236 000010F7 FF05(DBC60300)      <1>     inc dword [dirEntry] ;And denote that in variable
   237 000010FD FFC9                <1>     dec ecx
   238 000010FF 75C7                <1>     jnz .searchMainLp
   239 00001101 F9                  <1>     stc
   240                              <1>     return
    18                              <2> %%_ret:
    19 00001102 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   241                              <1> .exclusiveDir:
   242                              <1> ;Used when going down a path, dir bit simply need be set
   243 00001103 F6C410              <1>     test ah, dirDirectory
   244 00001106 75D8                <1>     jnz .scanName
   245 00001108 EBE6                <1>     jmp short .nextEntry
   246                              <1> 
   247                              <1> .volFile:
   248 0000110A 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   249 0000110C 74D2                <1>     je .scanName       ;If so, scan the name agrees
   250 0000110E EBE0                <1>     jmp short .nextEntry    ;Else, goto next entry
   251                              <1> 
   252                              <1> .searchEntryFound:
   253                              <1> ;Here a good entry was found!
   254 00001110 57                  <1>     push rdi
   255 00001111 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   256 00001113 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   257 0000111A B904000000          <1>     mov ecx, 32/8
   258 0000111F F348A5              <1>     rep movsq   ;Copy the directory to SDA
   259 00001122 5F                  <1>     pop rdi
   260                              <1>     ;Now fill in the rest of the ffBlock IF this is a file.
   261                              <1>     ;rdi points to ffblock start
   262 00001123 803D(CAC30300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   263 0000112A 744B                <1>     je .skipFF  ;If yes, skip filling in the rest of the FF block
   264 0000112C 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get FFBlock buffer to use in rdi
   265 00001133 88D8                <1>     mov al, bl  ;Get the search attributes into al
   266 00001135 E8F1000000          <1>     call setupFFBlock
   267 0000113A 8B05(DBC60300)      <1>     mov eax, dword [dirEntry]
   268 00001140 89470D              <1>     mov dword [rdi + ffBlock.dirOffset], eax
   269 00001143 8B05(D1C60300)      <1>     mov eax, dword [dirClustPar]
   270 00001149 894711              <1>     mov dword [rdi + ffBlock.parDirClus], eax
   271 0000114C 8A05(C6C50300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   272 00001152 884715              <1>     mov byte [rdi + ffBlock.attribFnd], al
   273 00001155 8B05(D1C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   274 0000115B 894716              <1>     mov dword [rdi + ffBlock.fileTime], eax
   275 0000115E 8B05(D7C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   276 00001164 89471A              <1>     mov dword [rdi + ffBlock.fileSize], eax
   277 00001167 488D7F1E            <1>     lea rdi, qword [rdi + ffBlock.asciizName]   ;Goto the name field
   278 0000116B 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   279 00001172 E874000000          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   280                              <1> .skipFF:
   281 00001177 F8                  <1>     clc
   282                              <1>     return
    18                              <2> %%_ret:
    19 00001178 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   283                              <1> .nameCompare:
   284                              <1> ;Input: rsi = source string
   285                              <1> ;       rdi = string template to compare against
   286                              <1> ;Output: ZF=ZE => Strings are ok
   287                              <1> ;        ZF=NZ => Strings not ok
   288                              <1> ;Accepts wildcards. Trashes al
   289 00001179 51                  <1>     push rcx
   290 0000117A 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   291                              <1> .ncLp:
   292 0000117C 81F90B000000        <1>     cmp ecx, 11
   293 00001182 740B                <1>     je .ncExit
   294 00001184 FFC1                <1>     inc ecx
   295 00001186 A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   296 00001187 74F3                <1>     je .ncLp    ;If equal, keep going
   297 00001189 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   298 0000118D 74ED                <1>     je .ncLp
   299                              <1> .ncExit:
   300 0000118F 59                  <1>     pop rcx
   301                              <1>     return
    18                              <2> %%_ret:
    19 00001190 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   302                              <1> 
   303                              <1> adjustSearchAttr:
   304                              <1> ;Converts the byte to a system only if the bit is set
   305                              <1> ;Input: eax = User selected search mask
   306                              <1> ;Output: eax = Modified search mask
   307 00001191 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   308 00001196 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   309                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000119B 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   310 0000119D B808000000          <1>     mov eax, dirVolumeID
   311                              <1>     return
    18                              <2> %%_ret:
    19 000011A2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   312                              <1> 
   313                              <1> asciiToFCB:
   314                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   315                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   316                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   317                              <1> ;Name is space padded.
   318                              <1> ;Input: rsi = ASCII string buffer
   319                              <1> ;       rdi = FCB name buffer
   320                              <1> ;Output: al = Char that terminated the source string 
   321 000011A3 53                  <1>     push rbx    
   322 000011A4 57                  <1>     push rdi
   323 000011A5 B90B000000          <1>     mov ecx, 11
   324 000011AA B020                <1>     mov al, " "
   325 000011AC F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   326 000011AE 5F                  <1>     pop rdi
   327 000011AF 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   328                              <1> .processName:
   329 000011B2 AC                  <1>     lodsb   ;Get the char in al
   330 000011B3 E8622C0000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   331 000011B8 84C0                <1>     test al, al
   332 000011BA 742D                <1>     jz .exit
   333                              <1>     ;Test if the char is valid
   334 000011BC E8552D0000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   335 000011C1 7426                <1>     jz .exit    ;If the char invalid, consider it a terminator
   336 000011C3 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   337 000011C5 7407                <1>     je .extSpace
   338 000011C7 3C2E                <1>     cmp al, "."
   339 000011C9 740C                <1>     je .ext
   340 000011CB AA                  <1>     stosb   ;Store the char
   341 000011CC EBE4                <1>     jmp short .processName
   342                              <1> .extSpace:
   343                              <1> ;Now we scan for a period in the name
   344 000011CE AC                  <1>     lodsb   ;Get a char and increase rsi
   345 000011CF 84C0                <1>     test al, al
   346 000011D1 7416                <1>     jz .exit
   347 000011D3 3C2E                <1>     cmp al, "."     ;If al is not a period...
   348 000011D5 75F7                <1>     jne .extSpace   ; keep searching
   349                              <1> .ext:
   350 000011D7 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   351                              <1> .processExt:
   352 000011DB AC                  <1>     lodsb
   353 000011DC 84C0                <1>     test al, al
   354 000011DE 7409                <1>     jz .exit
   355 000011E0 3C20                <1>     cmp al, " "
   356 000011E2 7405                <1>     je .exit
   357 000011E4 AA                  <1>     stosb
   358 000011E5 EBF4                <1>     jmp short .processExt
   359                              <1> .exitBadChar:
   360 000011E7 30C0                <1>     xor al, al  ;Return a null terminator
   361                              <1> .exit:
   362 000011E9 5B                  <1>     pop rbx
   363                              <1>     return
    18                              <2> %%_ret:
    19 000011EA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> FCBToAsciiz:
   366                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   367                              <1> ;Name is space padded too
   368                              <1> ;Input: rsi = FCB name buffer
   369                              <1> ;       rdi = ASCIIZ string buffer
   370 000011EB B908000000          <1>     mov ecx, 8
   371 000011F0 F3A4                <1>     rep movsb   ;Move the name over
   372                              <1> .scanNameSpace:
   373 000011F2 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   374 000011F6 750D                <1>     jne .ext
   375 000011F8 48FFCF              <1>     dec rdi
   376 000011FB FFC1                <1>     inc ecx
   377 000011FD 81F908000000        <1>     cmp ecx, 8
   378 00001203 72ED                <1>     jb .scanNameSpace
   379                              <1> .ext:
   380 00001205 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   381 0000120A 7506                <1>     jne .validExt
   382 0000120C 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   383 00001210 7415                <1>     je .exit
   384                              <1> .validExt:
   385 00001212 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   386 00001214 AA                  <1>     stosb
   387 00001215 B903000000          <1>     mov ecx, 3
   388 0000121A F3A4                <1>     rep movsb   ;Move the three extension chars over
   389                              <1> .scanExtSpace:
   390 0000121C 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   391 00001220 7505                <1>     jne .exit
   392 00001222 48FFCF              <1>     dec rdi
   393 00001225 EBF5                <1>     jmp short .scanExtSpace
   394                              <1> .exit:
   395 00001227 31C0                <1>     xor eax, eax
   396 00001229 AA                  <1>     stosb   ;Store a null at the end
   397                              <1>     return
    18                              <2> %%_ret:
    19 0000122A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> setupFFBlock:
   400                              <1> ;Sets up the find first block for the search
   401                              <1> ;Uses workingDrv and fcbName
   402                              <1> ;Input: al = Search attributes
   403 0000122B 50                  <1>     push rax
   404 0000122C 53                  <1>     push rbx
   405 0000122D 56                  <1>     push rsi
   406 0000122E 57                  <1>     push rdi
   407 0000122F 488B1D(79C30300)    <1>     mov rbx, qword [currentDTA]
   408 00001236 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   409 00001239 0FB605(63C60300)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   410 00001240 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   411 00001242 488D35(DBC50300)    <1>     lea rsi, fcbName
   412 00001249 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   413 0000124D 48A5                <1>     movsq   ;Move 8 chars
   414 0000124F 66A5                <1>     movsw   ;Move 2 chars
   415 00001251 A4                  <1>     movsb   ;Move the final char
   416 00001252 5F                  <1>     pop rdi
   417 00001253 5E                  <1>     pop rsi
   418 00001254 5B                  <1>     pop rbx
   419 00001255 58                  <1>     pop rax
   420                              <1>     return
    18                              <2> %%_ret:
    19 00001256 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   421                              <1> 
   422                              <1> getDrvLetterFromPath:
   423                              <1> ;Gets the drive letter for the path in al
   424                              <1> ;Input: rsi = Buffer to process
   425                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   426                              <1> ;       ZF=ZE and al = 0 => Null path
   427                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   428                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   429                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   430 00001257 30C0                <1>     xor al, al
   431 00001259 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   432                              <1>     retz    ;Return if a null path
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000125C 74F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   433 0000125E 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   434                              <1>     retne   ;If not equal, Relative path or network path
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001262 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   435 00001264 66AD                <1>     lodsw   ;Get first word, rsi += 2
   436                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   437 00001266 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   438 00001268 2C60                <1>     sub al, 60h
   439                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000126A 75EA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   440 0000126C B0FF                <1>     mov al, -1  ;Else not a valid drive number
   441                              <1>     return
    18                              <2> %%_ret:
    19 0000126E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   442                              <1> canonicaliseFileName:
   443                              <1> ;Always trying to build and qualify a full pathname
   444                              <1> ;Does getPath without hitting the disk
   445 0000126F B0FF                <1>     mov al, -1
   446 00001271 8805(CAC30300)      <1>     mov byte [fileDirFlag], al  
   447 00001277 8805(5BC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   448 0000127D 48893D(7FC50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   449 00001284 FEC0                <1>     inc al  ;make al = 0
   450 00001286 8805(8FC50300)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   451 0000128C EB21                <1>     jmp short getPath.epAlt
   452                              <1> getDirPath:
   453 0000128E 30C0                <1>     xor al, al   ;Set to Directory
   454 00001290 EB02                <1>     jmp short getPath
   455                              <1> getFilePath:
   456 00001292 B0FF                <1>     mov al, -1  ;Set to File
   457                              <1> getPath:
   458                              <1> ;Determines whether the path is spliced or not and transfers the chars
   459                              <1> ; from the user buffer into an internal buffer, normalising them.
   460                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   461                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   462                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   463                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   464                              <1> ; we let it do its thing and return.
   465                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   466                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   467                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   468                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   469                              <1> ; (converted from using machine name by the net client program).
   470                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   471                              <1> ; was good.
   472                              <1> ;Called with:
   473                              <1> ; rdi = SDA Buffer for filename
   474                              <1> ; rsi = Potentially unqualified filename
   475                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   476 00001294 8805(CAC30300)      <1>     mov byte [fileDirFlag], al  
   477 0000129A B0FF                <1>     mov al, -1
   478 0000129C 8805(5BC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   479 000012A2 48893D(7FC50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   480 000012A9 8805(8FC50300)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   481                              <1> .epAlt:
   482 000012AF C605(5FC60300)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   483 000012B6 C605(5EC60300)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   484 000012BD F605(5CC60300)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   485 000012C4 7423                <1>     jz .notServer
   486                              <1>     ;In this case, the client network program will have correctly
   487                              <1>     ; substituted the drive letter for the path before making the request.
   488                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   489 000012C6 E88CFFFFFF          <1>     call getDrvLetterFromPath
   490 000012CB E8B22A0000          <1>     call getCDS ;Get the cds for the drive letter on the path
   491                              <1>     ;Do nothing for now
   492 000012D0 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   493 000012D7 E8062E0000          <1>     call dosCrit1Enter
   494 000012DC E8D7270000          <1>     call ensureDiskValid
   495 000012E1 E8062E0000          <1>     call dosCrit1Exit
   496                              <1> .serverExit:
   497 000012E6 B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   498                              <1>     return
    18                              <2> %%_ret:
    19 000012E8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   499                              <1> .notServer:
   500                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   501 000012E9 48C705(6CC60300)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   501 000012F1 FFFFFF              <1>
   502 000012F4 B823110000          <1>     mov eax, 1123h
   503 000012F9 CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   504                              <1>     retnc  ;Return if resolved
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000012FB 73EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   505 000012FD E855FFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   506 00001302 9C                  <1>     pushfq  ;Save the flag state on stack
   507 00001303 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   508 00001304 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   509 00001307 E8032B0000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   510 0000130C 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   511 0000130E E8FC2A0000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   512 00001313 755B                <1>     jnz .notNet
   513 00001315 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   514 00001317 7557                <1>     jne .notNet
   515 00001319 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   516 0000131A 9D                  <1>     popfq
   517 0000131B 66AD                <1>     lodsw
   518 0000131D 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   519 00001321 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   520                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   521                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   522                              <1> ; redirector Find First Without CDS
   523                              <1> 
   524 00001323 8A1D(8FC50300)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   525 00001329 C605(8FC50300)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   526 00001330 53                  <1>     push rbx
   527                              <1> .moveNetChars:
   528 00001331 AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   529 00001332 E8E32A0000          <1>     call uppercaseChar  ;Make char in al uppercase
   530 00001337 84C0                <1>     test al, al
   531 00001339 740F                <1>     jz .netEnd
   532 0000133B E8CF2A0000          <1>     call swapPathSeparator  ;If path sep, swap it
   533 00001340 AA                  <1>     stosb
   534 00001341 75EE                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   535 00001343 E882000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   536 00001348 EBE7                <1>     jmp short .moveNetChars
   537                              <1> .netEnd:
   538 0000134A 6687DB              <1>     xchg bx, bx
   539 0000134D 5B                  <1>     pop rbx
   540 0000134E AA                  <1>     stosb
   541 0000134F 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   542                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001351 7495                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   543 00001353 56                  <1>     push rsi
   544 00001354 488D35(7FC40300)    <1>     lea rsi, buffer1
   545 0000135B E88B2B0000          <1>     call scanPathWC ;Net paths may not have any wildcards!
   546 00001360 5E                  <1>     pop rsi
   547 00001361 B803000000          <1>     mov eax, errPnf ;Bad Path
   548                              <1>     retc 
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001366 7280                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   549 00001368 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   550 0000136D CD4F                <1>     int 4Fh
   551                              <1>     return
    18                              <2> %%_ret:
    19 0000136F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   552                              <1> .notNet:
   553                              <1> ;This is the normal case; paths can be relative, or absolute.
   554 00001370 58                  <1>     pop rax ;Get the drive letter back
   555 00001371 9D                  <1>     popfq   ;Get the flag state back
   556 00001372 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   557                              <1> .pnfErr:
   558 00001374 B003                <1>     mov al, errPnf  ;Null path error
   559 00001376 F9                  <1>     stc
   560                              <1>     return
    18                              <2> %%_ret:
    19 00001377 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   561                              <1> .notNull:
   562 00001378 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   563 0000137A 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   564 0000137C B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   565 0000137E F9                  <1>     stc
   566                              <1>     return
    18                              <2> %%_ret:
    19 0000137F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   567                              <1> .driveOk:
   568 00001380 84C0                <1>     test al, al
   569 00001382 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   570                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   571 00001384 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   572 00001387 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   573 00001389 50                  <1>     push rax    ;Save the drive letter
   574 0000138A AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   575 0000138B 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   576 0000138E E87C2A0000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   577                              <1>     ;If al is a path separator, then this path is absolute.
   578 00001393 58                  <1>     pop rax ;Get back the drive letter
   579 00001394 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   580                              <1> .absoPath:
   581                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   582 00001396 48FFC6              <1>     inc rsi
   583 00001399 EB1A                <1>     jmp short .commonDir
   584                              <1> .curPath:
   585                              <1> ;This is only jumped to if we are relative the current drive
   586                              <1> ;rsi points to first char in path
   587                              <1> ;If this char is \ or /, then it is an absolute path.
   588 0000139B 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   589 000013A1 FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   590 000013A3 50                  <1>     push rax    ;Save the current drive number
   591 000013A4 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   592 000013A6 E8642A0000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   593 000013AB 58                  <1>     pop rax ;Get back the current drive number
   594 000013AC 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   595                              <1> .relMain:
   596 000013AE C605(5BC60300)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   597                              <1> .commonDir:
   598                              <1> ;rsi points to the start of the string we will be appending
   599 000013B5 E809000000          <1>     call pathWalk
   600 000013BA 7201                <1>     jc .badDriveExit
   601                              <1>     return
    18                              <2> %%_ret:
    19 000013BC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   602                              <1> .badDriveExit:
   603 000013BD B812000000          <1>     mov eax, errNoFil ;No file for that spec found
   604                              <1>     return
    18                              <2> %%_ret:
    19 000013C2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   605                              <1> 
   606                              <1> pathWalk:
   607                              <1> ;Input: rsi must point to source buffer for path to expand
   608                              <1> ;       rdi must point to a destination buffer
   609                              <1> ;       al must contain the drive 1 based number
   610 000013C3 E8A2000000          <1>     call prepareDir    ;Prepare the dir if the drive is subst/join drive
   611 000013C8 7265                <1>     jc .badDriveExit
   612                              <1>     ;If the user requests to .. to a point before rbx, we fail if a disk
   613                              <1>     ; resolution
   614                              <1> .netEp: ;For net path resolution (resolution ONLY) ptrs must point past "\\"
   615 000013CA 4889FB              <1>     mov rbx, rdi
   616                              <1> .mainlp:
   617 000013CD E86C010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   618 000013D2 84C0                <1>     test al, al
   619 000013D4 7507                <1>     jnz .notFile
   620 000013D6 C605(5FC60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   621                              <1> .notFile:
   622 000013DD 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   623 000013DE E8E9030000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   624 000013E3 58                  <1>     pop rax
   625 000013E4 736F                <1>     jnc .deviceFound
   626 000013E6 E828020000          <1>     call searchForPathspec  ;and search the directory
   627 000013EB 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   628 000013ED E877020000          <1>     call addPathspecToBuffer
   629 000013F2 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   630 000013F4 84C0                <1>     test al, al ;Exit if this pathspec was a file
   631 000013F6 743D                <1>     jz .exitGood
   632                              <1>     ;Here I have to take the cluster data from the found directory entry
   633                              <1>     ; and setup the search for the next pathspec portion
   634                              <1>     ;Copy necessary data from the current directory copy
   635 000013F8 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   636 000013FF 74CC                <1>     jz .mainlp
   637 00001401 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   638 00001408 C1E010              <1>     shl eax, 10h    ;Shift it high
   639 0000140B 668B05(D5C50300)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   640                              <1>     ;eax now has the cluster number of the search
   641 00001412 8905(D5C60300)      <1>     mov dword [dirClustA], eax
   642 00001418 8905(D1C60300)      <1>     mov dword [dirClustPar], eax
   643 0000141E 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   644 00001420 8905(DBC60300)      <1>     mov dword [dirEntry], eax
   645 00001426 668905(D9C60300)    <1>     mov word [dirSect], ax
   646 0000142D EB9E                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   647                              <1> .badDriveExit:
   648 0000142F B812000000          <1>     mov eax, errNoFil ;No file for that spec found
   649                              <1>     return
    18                              <2> %%_ret:
    19 00001434 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   650                              <1> .exitGood:
   651 00001435 C605(5EC60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   652                              <1> .exit:
   653                              <1>     return
    18                              <2> %%_ret:
    19 0000143C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   654                              <1> .checkDev:
   655                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   656                              <1> ; we are in \DEV pseudo dir
   657 0000143D F605(CBC30300)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   658 00001444 7521                <1>     jnz .nodev  ;If any bits set, ignore this check
   659 00001446 3C12                <1>     cmp al, errNoFil   ;Only make this check if the file was not found
   660 00001448 751D                <1>     jne .nodev
   661                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   662 0000144A 56                  <1>     push rsi
   663 0000144B 57                  <1>     push rdi
   664 0000144C E886020000          <1>     call checkDevPath
   665 00001451 5F                  <1>     pop rdi
   666 00001452 5E                  <1>     pop rsi
   667 00001453 72E7                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   668                              <1> .deviceFound:
   669 00001455 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   670 00001457 C605(5FC60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   671 0000145E C605(5EC60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   672 00001465 EBD5                <1>     jmp short .exit   
   673                              <1> .nodev:
   674 00001467 F9                  <1>     stc
   675 00001468 EBD2                <1>     jmp short .exit
   676                              <1> 
   677                              <1> prepareDir:
   678                              <1> ;Used to transfer the current directory if it is necessary.
   679                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   680                              <1> ; relative
   681                              <1> ;Input: al = 1-based drive letter
   682                              <1> ;Output: rdi = Pointing at where to place chars from source string
   683                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   684 0000146A 56                  <1>     push rsi
   685 0000146B E8722C0000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   686 00001470 E8A4280000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   687 00001475 720D                <1>     jc .critExit    ;If the drive number in al is too great or drive invalid
   688 00001477 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] 
   689 0000147E 57                  <1>     push rdi    ;Push CDS pointer on stack...
   690 0000147F E8E5250000          <1>     call getDiskDPB  ;Update working DPB and drv before searching, dpbptr in rbp
   691                              <1> .critExit:
   692 00001484 E8632C0000          <1>     call dosCrit1Exit
   693 00001489 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   694 0000148A 724A                <1>     jc .badDriveExit 
   695 0000148C 488B3D(7FC50300)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   696                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   697                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   698                              <1>     ;   terminating char (\, / or Null)
   699                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   700                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   701 00001493 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   702 00001499 753D                <1>     jnz .prepDirJoin
   703 0000149B 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   704 000014A1 7556                <1>     jnz .prepDirSubst
   705                              <1> .prepMain:
   706                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   707 000014A3 F605(5BC60300)FF    <1>     test byte [spliceFlag], -1
   708 000014AA 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   709                              <1>     ;Else we copy the first two chars only (X:)
   710 000014AC 66A5                <1>     movsw  
   711 000014AE B05C                <1>     mov al, "\"
   712 000014B0 AA                  <1>     stosb   ;Store the path separator and increment rdi
   713 000014B1 31C0                <1>     xor eax, eax    ;Get cluster 0
   714 000014B3 EB1B                <1>     jmp short .prepDirExitSkip
   715                              <1> .prepLoop:
   716 000014B5 AC                  <1>     lodsb
   717 000014B6 84C0                <1>     test al, al ;If al was null, then we stop
   718 000014B8 7403                <1>     jz .prepDirExit
   719 000014BA AA                  <1>     stosb
   720 000014BB EBF8                <1>     jmp short .prepLoop
   721                              <1> .prepDirExit:
   722 000014BD 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   723 000014C1 7403                <1>     je .prepDirExitSkipPathsep
   724 000014C3 B05C                <1>     mov al, "\"
   725 000014C5 AA                  <1>     stosb   ;Store the path separator and increment rdi
   726                              <1> .prepDirExitSkipPathsep:
   727 000014C6 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   728 000014CD 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   729                              <1> .prepDirExitSkip:
   730 000014D0 E837000000          <1>     call .prepSetupDirSearchVars
   731 000014D5 F8                  <1>     clc ;Clear carry before exiting
   732                              <1> .badDriveExit:
   733 000014D6 5E                  <1>     pop rsi
   734                              <1>     return
    18                              <2> %%_ret:
    19 000014D7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   735                              <1> .prepDirJoin:
   736 000014D8 51                  <1>     push rcx
   737 000014D9 56                  <1>     push rsi
   738 000014DA 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   739 000014E1 B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   740                              <1> .prepDirJoin1:
   741 000014E6 AC                  <1>     lodsb   ;Get the char
   742 000014E7 84C0                <1>     test al, al ;Null char?
   743 000014E9 740B                <1>     jz .prepDirJoin2
   744 000014EB E81F290000          <1>     call swapPathSeparator
   745 000014F0 7404                <1>     jz .prepDirJoin2
   746 000014F2 FFC1                <1>     inc ecx ;Accrue length to copy
   747 000014F4 EBF0                <1>     jmp short .prepDirJoin1
   748                              <1> .prepDirJoin2:
   749 000014F6 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   750 000014F7 EB05                <1>     jmp short .prepDirCopy1
   751                              <1> .prepDirSubst:
   752 000014F9 51                  <1>     push rcx
   753 000014FA 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   754                              <1> .prepDirCopy1:
   755 000014FE F3A4                <1>     rep movsb   ;Copy the string over
   756 00001500 59                  <1>     pop rcx
   757 00001501 F605(5BC60300)FF    <1>     test byte [spliceFlag], -1
   758 00001508 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   759 0000150A EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   760                              <1> .prepSetupDirSearchVars:
   761                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   762                              <1> ;       rbp = DPB pointer for the device which will do transaction
   763 0000150C 51                  <1>     push rcx
   764 0000150D 31C9                <1>     xor ecx, ecx
   765 0000150F 66890D(D9C60300)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   766 00001516 890D(DBC60300)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   767 0000151C E874F6FFFF          <1>     call getFATtype ;Get type of fat
   768 00001521 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   769 00001527 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   770                              <1>     ;FAT 32 here
   771 00001529 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   772 0000152B 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   773 0000152D 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   774                              <1> .psdsvExit:
   775 00001530 8905(D5C60300)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   776 00001536 8905(D1C60300)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   777 0000153C 59                  <1>     pop rcx
   778                              <1>     return 
    18                              <2> %%_ret:
    19 0000153D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   779                              <1> 
   780                              <1> copyPathspec:
   781                              <1> ;1) Copies a path portion from the source buffer to the destination
   782                              <1> ;2) Advances rsi to the next null, \ or /
   783                              <1> ;3) Expands all * to ?'s
   784                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   785                              <1> ;    next path separator
   786                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   787                              <1> ;    with rsi moving to path separator
   788                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   789                              <1> ;
   790                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   791                              <1> ;           rdi = Points to where to store it
   792                              <1> ;
   793                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   794                              <1> ;           rdi = First char of next space to store next pathspec
   795                              <1> ;           al = Last char stored (either \ or NULL)
   796                              <1> ;           CF=NC = OK path
   797                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   798                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   799 0000153E 57                  <1>     push rdi    ;Save the pointer into the user buffer
   800 0000153F C605(EEC30300)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   801 00001546 488D3D(DBC50300)    <1>     lea rdi, fcbName
   802 0000154D 57                  <1>     push rdi
   803 0000154E B903000000          <1>     mov ecx, 3
   804 00001553 B820202020          <1>     mov eax, "    " ;Four spaces
   805 00001558 F3AB                <1>     rep stosd   ;Store 12 spaces
   806 0000155A 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   807                              <1> 
   808 0000155B B908000000          <1>     mov ecx, 8 ;8 chars to move over, when ecx = 0, the char must be . or term
   809 00001560 B501                <1>     mov ch, 1   ;Set that we are in name field
   810 00001562 AC                  <1>     lodsb   ;Get first char from user path in al
   811 00001563 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   812 00001565 7459                <1>     je .cpsDots
   813 00001567 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   814                              <1> ;First char is not a dot, so now check if starts with E5h? 
   815                              <1> ;If so, store 05h in its place
   816 0000156A 3CE5                <1>     cmp al, 0E5h
   817 0000156C 7508                <1>     jne .cpsMainLoop
   818 0000156E 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   819 00001571 B005                <1>     mov al, 05h
   820 00001573 AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   821 00001574 FEC9                <1>     dec cl  ;One less char to tfr
   822                              <1> .cpsMainLoop:
   823 00001576 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   824 00001577 84C0                <1>     test al, al ;Is it the null char?
   825 00001579 0F848A000000        <1>     jz .cpsProcessName  ;If so, terminate immediately
   826 0000157F E88B280000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   827 00001584 7449                <1>     jz .cpsCharSkip2 ; and then exit with the final converted pathsep in al
   828 00001586 3C2E                <1>     cmp al, "." ;Filename extension separator
   829 00001588 7428                <1>     je .cpsExtension
   830 0000158A 81F900010000        <1>     cmp ecx, 0100h  ;If ch = 1 and cl = 0, then look for either . or terminator
   831 00001590 74E4                <1>     je .cpsMainLoop
   832 00001592 67E333              <1>     jecxz .cpsCharSkip ;If ch = 0 and cl = 0, scan for next terminator
   833                              <1>     ;If we have space in the filename, we check to see if the next char is *
   834 00001595 3C2A                <1>     cmp al, "*" ;Wildcard?
   835 00001597 743D                <1>     je .cpsWildcard
   836 00001599 3C3F                <1>     cmp al, "?" ;Good wildcard?
   837 0000159B 740C                <1>     je .store
   838 0000159D E878280000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   839 000015A2 E86F290000          <1>     call checkCharValid ; and check it is a valid char
   840 000015A7 7405                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   841                              <1> .store:
   842 000015A9 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   843 000015AA FEC9                <1>     dec cl  ;One less char left to tfr
   844 000015AC EBC8                <1>     jmp short .cpsMainLoop
   845                              <1> .cpsInvalidChar:
   846 000015AE 30C0                <1>     xor al, al
   847 000015B0 EB57                <1>     jmp short .cpsProcessName
   848                              <1> .cpsExtension:
   849                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   850 000015B2 B903000000          <1>     mov ecx, 3  ;Set to 3 chars left, in extension (ch = 0)
   851 000015B7 488D3D(E3C50300)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   852 000015BE EBB6                <1>     jmp short .cpsMainLoop
   853                              <1> .cpsDots:
   854 000015C0 AA                  <1>     stosb   ;Store the first dot
   855 000015C1 8A06                <1>     mov al, byte [rsi]
   856 000015C3 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   857 000015C5 7501                <1>     jne .cpsCharSkip
   858 000015C7 A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   859                              <1> .cpsCharSkip:
   860 000015C8 E819000000          <1>     call .cpsPtrSkip    ;Now we are skipping any chars that arent terminators
   861 000015CD EB3A                <1>     jmp short .cpsProcessName
   862                              <1> .cpsCharSkip2:
   863 000015CF E81F000000          <1>     call .cpsPtrSkip2
   864 000015D4 EB33                <1>     jmp short .cpsProcessName
   865                              <1> .cpsWildcard:
   866                              <1>     ;cl has the number of chars of ? to store 
   867 000015D6 B03F                <1>     mov al, "?"
   868 000015D8 51                  <1>     push rcx
   869 000015D9 0FB6C9              <1>     movzx ecx, cl   ;Temporarily extend cl to ecx
   870 000015DC F3AA                <1>     rep stosb   ;Store that many ? in buffer and return cl to 0
   871 000015DE 59                  <1>     pop rcx
   872 000015DF F6C501              <1>     test ch, 1  ;Is this bit set? If so, we jump to .cpsExtension
   873 000015E2 75CE                <1>     jnz .cpsExtension   ;Now fill the extension field
   874                              <1>     ;Else, we process filename
   875 000015E4 EBE2                <1>     jmp short .cpsCharSkip
   876                              <1> .cpsPtrSkip:
   877                              <1> ;Now advance rsi past the next pathsep or null char
   878                              <1> ;If an invalid char is detected, it is considered to be a terminator
   879                              <1> ;Output: al = Terminator char (either \ or null)
   880                              <1> ;        rsi -> First char of next pathspec (if al = \)
   881 000015E6 AC                  <1>     lodsb
   882 000015E7 E812290000          <1>     call checkCharOk
   883 000015EC 7418                <1>     je .cpsBadChar
   884 000015EE 84C0                <1>     test al, al ;Is this null?
   885                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 000015F0 7501                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 000015F2 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   886                              <1> ;If the next char that will be read is a pathsep, inc rsi to it
   887                              <1> ;This is to avoid multiple successive pathseps
   888                              <1> .cpsPtrSkip2:
   889 000015F3 803E5C              <1>     cmp byte [rsi], "\"
   890 000015F6 74EE                <1>     je .cpsPtrSkip 
   891 000015F8 803E2F              <1>     cmp byte [rsi], "/"
   892 000015FB 74E9                <1>     je .cpsPtrSkip 
   893                              <1>     ;If the current char is the final pathsep, exit
   894 000015FD E80D280000          <1>     call swapPathSeparator
   895                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001602 74EE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   896 00001604 EBE0                <1>     jmp short .cpsPtrSkip
   897                              <1> 
   898                              <1> .cpsBadChar:
   899 00001606 30C0                <1>     xor al, al  ;Convert the char to a terminator
   900                              <1>     return
    18                              <2> %%_ret:
    19 00001608 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   901                              <1> .cpsProcessName:
   902                              <1> ;Store the final char in the 12 space in the FCB name field
   903 00001609 488D3D(E6C50300)    <1>     lea rdi, fcbName+11
   904 00001610 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   905 00001611 5F                  <1>     pop rdi
   906                              <1>     return
    18                              <2> %%_ret:
    19 00001612 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   907                              <1> 
   908                              <1> searchForPathspec:
   909                              <1>     ;Now search the current directory for this filename
   910                              <1>     ;Find first using SDA ffBlock
   911                              <1>     ;If al = 0, we have final file name or directory name
   912                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   913                              <1>     ;Output: CF=CY => Error occured
   914                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   915                              <1>     ;                 FF block somewhat setup
   916                              <1>     ;Preserves rax, rbx, rsi,  rdi
   917 00001613 50                  <1>     push rax
   918 00001614 53                  <1>     push rbx
   919 00001615 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   920 00001616 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   921 00001617 0FB61D(CAC30300)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
   922 0000161E 53                  <1>     push rbx    ;and push it onto the stack
   923                              <1> ;Evaluate whether we are searching for a file for a directory
   924 0000161F 84C0                <1>     test al, al
   925 00001621 741D                <1>     jz .sfpPNfile
   926                              <1>     ;Fall if subdir
   927 00001623 488D3D(DBC50300)    <1>     lea rdi, fcbName
   928 0000162A B03F                <1>     mov al, "?" ;Search for wildcard
   929 0000162C B90C000000          <1>     mov ecx, 12
   930 00001631 F2AE                <1>     repne scasb
   931 00001633 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
   932 00001635 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
   933 00001637 C605(CAC30300)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
   934 0000163E EB07                <1>     jmp short .sfpPNMain
   935                              <1> .sfpPNfile:
   936                              <1>     ;Here if we are searching for a file or directory as setup by search init
   937 00001640 0FB605(56C60300)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
   938                              <1> .sfpPNMain:
   939 00001647 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
   940 0000164E 7405                <1>     je .sfpPNNoDisk
   941 00001650 E871F9FFFF          <1>     call searchDir
   942                              <1> .sfpPNNoDisk:
   943 00001655 5B                  <1>     pop rbx
   944 00001656 881D(CAC30300)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
   945 0000165C 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
   946 0000165D 5E                  <1>     pop rsi
   947 0000165E 5B                  <1>     pop rbx
   948 0000165F 58                  <1>     pop rax
   949                              <1>     return
    18                              <2> %%_ret:
    19 00001660 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   950                              <1> .sfpPnf:
   951 00001661 B803000000          <1>     mov eax, errPnf
   952                              <1> .sfpErrExit:
   953 00001666 F9                  <1>     stc ;Set carry
   954 00001667 EBEC                <1>     jmp short .sfpPNNoDisk
   955                              <1> 
   956                              <1> addPathspecToBuffer:
   957                              <1> ;Input: fcbName = Qualified pathname portion
   958                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
   959                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
   960                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
   961                              <1> ;rbx points to the "head of the path"
   962 00001669 803D(DBC50300)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
   963 00001670 741F                <1>     je .aptbPNDots
   964                              <1>     ;Copy filename over to internal buffer
   965 00001672 56                  <1>     push rsi    ;Save source pointer position
   966 00001673 488D35(DBC50300)    <1>     lea rsi, fcbName
   967 0000167A E86CFBFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   968 0000167F 48FFCF              <1>     dec rdi ;Go back to the copied Null char
   969 00001682 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
   970                              <1> .aptbOkExit:
   971 00001683 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
   972 00001686 E884270000          <1>     call swapPathSeparator
   973 0000168B 7402                <1>     jz .aptbPNexit
   974 0000168D 30C0                <1>     xor al, al  ;Set al to 0 else (all other chars are terminators)
   975                              <1> .aptbPNexit:
   976 0000168F AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
   977                              <1>     return
    18                              <2> %%_ret:
    19 00001690 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   978                              <1> .aptbPNDots:
   979                              <1> ;For one dot, we leave rdi where it is
   980                              <1> ;For two dots, we search backwards for the previous "\"
   981 00001691 803D(DCC50300)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
   982 00001698 F8                  <1>     clc ;Ensure we clear CF if we return via here
   983 00001699 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the previous char in al if we return
   984                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000169C 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   985                              <1>     ;Here we have two dots
   986                              <1>     ;Walk rdi backwards until a \ is found
   987 0000169E 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
   988 000016A1 66817FFF3A5C        <1>     cmp word [rdi - 1], ":\" ;IF the char preceeding \ is :, then error out
   989 000016A7 7427                <1>     je .aptbPnf
   990 000016A9 66817FFF5C5C        <1>     cmp word [rdi - 1], "\\" ;Similar net name check
   991 000016AF 741F                <1>     je .aptbPnf
   992                              <1> .aptbPNDotsLp:
   993 000016B1 48FFCF              <1>     dec rdi
   994 000016B4 803F5C              <1>     cmp byte [rdi], "\"
   995 000016B7 75F8                <1>     jne .aptbPNDotsLp  ;Keep looping around until it is a "\"
   996                              <1>     ;Don't go past the pathsep, since we may need to replace it with a null
   997 000016B9 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;Are we in name resolution mode?
   998 000016C0 74C1                <1>     je .aptbOkExit    ;If clear, we are, so just return
   999 000016C2 4839DF              <1>     cmp rdi, rbx    ;Are we before the start of the path? (i.e in subst?)
  1000 000016C5 7209                <1>     jb .aptbPnf
  1001 000016C7 EBBA                <1>     jmp short .aptbOkExit
  1002                              <1> .aptbSearchError:
  1003 000016C9 B812000000          <1>     mov eax, errNoFil
  1004 000016CE EB05                <1>     jmp short .aptbErrExit
  1005                              <1> .aptbPnf:
  1006 000016D0 B803000000          <1>     mov eax, errPnf
  1007                              <1> .aptbErrExit:
  1008 000016D5 F9                  <1>     stc ;Set carry
  1009                              <1>     return
    18                              <2> %%_ret:
    19 000016D6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1010                              <1> 
  1011                              <1> checkDevPath:
  1012                              <1> ;Called only if the file/directory was not found on disk.
  1013                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1014                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1015                              <1> ; and check to see if it is a char device. If it is, build an ffblock.
  1016                              <1> ; If it is not, proceed with the request fail.
  1017                              <1> ;
  1018                              <1> ;Input: rsi = Pointer to the next path spec
  1019                              <1> ;Output: CF=NC => Char device found, directory and ffblocks built
  1020                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1021 000016D7 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1022                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000016DE 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1023 000016E0 803D(E6C50300)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1024 000016E7 0F84D8000000        <1>     je .notOk                      
  1025                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1026 000016ED 50                  <1>     push rax
  1027 000016EE 48B844455620202020- <1>     mov rax, "DEV     "
  1027 000016F7 20                  <1>
  1028 000016F8 483905(DBC50300)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1029 000016FF 58                  <1>     pop rax
  1030 00001700 0F85BF000000        <1>     jne .notOk
  1031 00001706 813D(E3C50300)2020- <1>     cmp dword [fcbName + 8], "   \"
  1031 0000170E 205C                <1>
  1032 00001710 0F85AF000000        <1>     jne .notOk
  1033                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1034                              <1>     ; looking for a device driver
  1035                              <1>     ;First append it to rdi 
  1036 00001716 B84445565C          <1>     mov eax, "DEV\" 
  1037 0000171B AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1038 0000171C 57                  <1>     push rdi
  1039 0000171D 488D3D(DBC50300)    <1>     lea rdi, fcbName
  1040 00001724 E87AFAFFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1041                              <1>     ;Returns in al the terminating char of the source string
  1042 00001729 5F                  <1>     pop rdi
  1043                              <1>     ;If al is a pathsep, fail
  1044 0000172A E8E0260000          <1>     call swapPathSeparator
  1045 0000172F 0F8490000000        <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1046 00001735 30C0                <1>     xor al, al
  1047 00001737 8805(E6C50300)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1048 0000173D 53                  <1>     push rbx
  1049 0000173E E8BB000000          <1>     call checkIfCharDevice
  1050 00001743 5B                  <1>     pop rbx ;Don't need bh yet
  1051 00001744 727F                <1>     jc .notOk
  1052 00001746 E8E4000000          <1>     call buildCharDir
  1053                              <1>     ;Here the device was determined to be a char device.
  1054                              <1>     ;A dummy directory entry was built for it.
  1055                              <1>     ;Now copy the dummy dir into the ffblock and return all OK!
  1056                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1057                              <1>     ; Do not Find Next!
  1058                              <1> .buildDeviceFFblock:
  1059 0000174B 50                  <1>     push rax
  1060 0000174C 56                  <1>     push rsi
  1061 0000174D 57                  <1>     push rdi
  1062                              <1> 
  1063 0000174E 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
  1064 00001755 48B820202020202020- <1>     mov rax, "        "
  1064 0000175E 20                  <1>
  1065 0000175F 48894701            <1>     mov qword [rdi + ffBlock.template], rax
  1066 00001763 894709              <1>     mov dword [rdi + ffBlock.template + filename.fExt], eax
  1067 00001766 31C0                <1>     xor eax, eax
  1068 00001768 FFC8                <1>     dec eax
  1069 0000176A 894711              <1>     mov dword [rdi + ffBlock.parDirClus], eax   ;Set parent cluster to -1
  1070 0000176D 0FB605(56C60300)    <1>     movzx eax, byte [searchAttr]
  1071 00001774 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
  1072 00001779 88470C              <1>     mov byte [rdi + ffBlock.attrib], al    ;Place user attribs here
  1073 0000177C 8A05(C6C50300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
  1074 00001782 884715              <1>     mov byte [rdi + ffBlock.attribFnd], al
  1075 00001785 8B05(D1C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
  1076 0000178B 894716              <1>     mov dword [rdi + ffBlock.fileTime], eax
  1077 0000178E 8B05(D7C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
  1078 00001794 89471A              <1>     mov dword [rdi + ffBlock.fileSize], eax
  1079 00001797 488B05(BBC50300)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the Device name
  1080 0000179E 48894701            <1>     mov qword [rdi + ffBlock.template], rax  ;Replace "DEV        " with devName
  1081                              <1> 
  1082 000017A2 57                  <1>     push rdi
  1083 000017A3 488D35(DBC50300)    <1>     lea rsi, fcbName
  1084 000017AA 488D7F1E            <1>     lea rdi, qword [rdi + ffBlock.asciizName]   ;Goto the name field
  1085 000017AE E838FAFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1086 000017B3 5F                  <1>     pop rdi
  1087 000017B4 488D771E            <1>     lea rsi, qword [rdi + ffBlock.asciizName]   ;Source the name field
  1088 000017B8 5F                  <1>     pop rdi ;Get rdi pointing back to the internal pathbuffer position
  1089                              <1> .copyName:
  1090 000017B9 AC                  <1>     lodsb
  1091 000017BA 84C0                <1>     test al, al
  1092 000017BC 7403                <1>     jz .nameCopied
  1093 000017BE AA                  <1>     stosb
  1094 000017BF EBF8                <1>     jmp short .copyName
  1095                              <1> .nameCopied:
  1096 000017C1 5E                  <1>     pop rsi
  1097 000017C2 58                  <1>     pop rax
  1098 000017C3 F8                  <1>     clc
  1099                              <1>     return
    18                              <2> %%_ret:
    19 000017C4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1100                              <1> .notOk:
  1101 000017C5 B812000000          <1>     mov eax, errNoFil
  1102 000017CA F9                  <1>     stc
  1103                              <1>     return
    18                              <2> %%_ret:
    19 000017CB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1104                              <1> .charDevSearch:
  1105 000017CC 53                  <1>     push rbx
  1106 000017CD E82C000000          <1>     call checkIfCharDevice
  1107 000017D2 5B                  <1>     pop rbx ;Dont need bh yet
  1108 000017D3 72F0                <1>     jc .notOk
  1109 000017D5 E855000000          <1>     call buildCharDir
  1110 000017DA 803D(E6C50300)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1111 000017E1 750C                <1>     jne .cds2
  1112 000017E3 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1113 000017E7 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1114 000017E9 48FFCF              <1>     dec rdi
  1115 000017EC B02F                <1>     mov al, "/" ;Replace \ with "/"
  1116 000017EE AA                  <1>     stosb   ;Store that and let the ffblock write the filename
  1117                              <1> .cds2:
  1118 000017EF 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1119 000017F6 0F854FFFFFFF        <1>     jne .buildDeviceFFblock    ;Now jump if in disk search
  1120 000017FC F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1121                              <1>     return
    18                              <2> %%_ret:
    19 000017FD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1122                              <1> 
  1123                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1124                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1125                              <1> ; device driver chain. 
  1126                              <1> ;Output: CF=CY if not found
  1127                              <1> ;        CF=NC if found
  1128                              <1> ;           BH = Low byte of the device attribute word
  1129 000017FE 50                  <1>     push rax
  1130 000017FF 57                  <1>     push rdi
  1131 00001800 488B05(DBC50300)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1132 00001807 488D3D(73C00300)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1133                              <1> .checkName:
  1134 0000180E 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1135 00001812 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1136 00001814 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1137 00001817 7406                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1138 00001819 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1139 0000181D 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1140                              <1> .walkList:
  1141 0000181F 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1142 00001822 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1143 00001829 75E3                <1>     jne .checkName  ;If no, rdi points to char device
  1144 0000182B F9                  <1>     stc
  1145                              <1> .exit:
  1146 0000182C 5F                  <1>     pop rdi
  1147 0000182D 58                  <1>     pop rax
  1148                              <1>     return
    18                              <2> %%_ret:
    19 0000182E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1149                              <1> 
  1150                              <1> buildCharDir:
  1151                              <1> ;Build a dummy directory entry for the char device in FCBName
  1152                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1153 0000182F 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1154                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001836 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1155 00001838 50                  <1>     push rax
  1156 00001839 57                  <1>     push rdi
  1157 0000183A C605(E6C50300)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1158 00001841 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
  1159                              <1>     ;Zero the directory copy (32 bytes)
  1160 00001848 50                  <1>     push rax
  1161 00001849 51                  <1>     push rcx
  1162 0000184A 57                  <1>     push rdi
  1163 0000184B 31C0                <1>     xor eax, eax    ;Zero rax
  1164 0000184D B904000000          <1>     mov ecx, 4
  1165 00001852 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1166 00001855 5F                  <1>     pop rdi
  1167 00001856 59                  <1>     pop rcx
  1168 00001857 58                  <1>     pop rax
  1169 00001858 488B05(DBC50300)    <1>     mov rax, qword [fcbName]
  1170 0000185F 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1171 00001862 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1172 00001867 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1173 0000186A C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], 40h ;Mimic DOS, set attr to 40h
  1174                              <1>     ;Get date and time and set the write time in the directory entry
  1175 0000186E E81E0C0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1176 00001873 E8040D0000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1177 00001878 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1178 0000187B 31C0                <1>     xor eax, eax
  1179 0000187D 5F                  <1>     pop rdi
  1180 0000187E 58                  <1>     pop rax
  1181                              <1>     return
    18                              <2> %%_ret:
    19 0000187F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1182                              <1> 
  1183                              <1> checkFailingComp:
  1184                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1185                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1186                              <1> ;Returns: ZF=ZE => Last path componant
  1187                              <1> ;         ZF=NZ => Not last path componant
  1188 00001880 50                  <1>     push rax
  1189 00001881 8A05(E6C50300)      <1>     mov al, byte [fcbName + 11]
  1190 00001887 84C0                <1>     test al, al
  1191 00001889 58                  <1>     pop rax
  1192                              <1>     return
    18                              <2> %%_ret:
    19 0000188A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    24                                  %include "./Source/Kernel/FAT/dirfun.asm"
    25                              <1> ;---------------------------------------------------:
    26                              <1> ;                   KERNEL FUNCTIONS                :
    27                              <1> ;---------------------------------------------------:
    28                              <1> makeDIR:           ;ah = 39h
    29                              <1> ;For make, the path must exist but the final componant must not exist.
    30                              <1> ;Input: rdx = Pointer to ASCIIZ string
    31 0000188B 4889D7              <1>     mov rdi, rdx
    32                              <1> .okLength:
    33 0000188E 4889D6              <1>     mov rsi, rdx
    34 00001891 E80F260000          <1>     call checkPathspecOK
    35 00001896 7307                <1>     jnc .pathOk  ;Don't allow any malformed chars
    36                              <1> .badPath:
    37 00001898 B003                <1>     mov al, errPnf
    38 0000189A E982280000          <1>     jmp extErrExit
    39                              <1> .pathOk:
    40 0000189F E847260000          <1>     call scanPathWC
    41 000018A4 72F2                <1>     jc .badPath ;Dont allow wildcards
    42 000018A6 E882260000          <1>     call checkPathNet
    43 000018AB 74EB                <1>     jz .badPath ;or network paths
    44                              <1>     ;Path is ok, now proceed
    45 000018AD FF35(79C30300)      <1>     push qword [currentDTA]
    46 000018B3 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
    47 000018BA 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
    48 000018C1 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    49 000018C8 E8C1F9FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
    50 000018CD 8F05(79C30300)      <1>     pop qword [currentDTA]
    51                              <1>     ;If the path exists, exit error
    52 000018D3 0F8348280000        <1>     jnc extErrExit
    53                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    54 000018D9 E8A2FFFFFF          <1>     call checkFailingComp
    55 000018DE 0F853D280000        <1>     jnz extErrExit
    56                              <1>     ;So all is well, the new subdirectories name is in fcbName
    57                              <1>     ;The parent dir's directory entry is in the curDirCopy
    58                              <1> 
    59                              <1> removeDIR:         ;ah = 3Ah
    60                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
    61                              <1> ;Input: rdx = Pointer to ASCIIZ string
    62 000018E4 4889D7              <1>     mov rdi, rdx
    63 000018E7 E855250000          <1>     call strlen
    64 000018EC 81F940000000        <1>     cmp ecx, 64
    65 000018F2 7607                <1>     jbe .okLength
    66                              <1> .badPath:
    67 000018F4 B003                <1>     mov al, errPnf
    68 000018F6 E926280000          <1>     jmp extErrExit
    69                              <1> .okLength:
    70 000018FB 4889D6              <1>     mov rsi, rdx
    71 000018FE E8A2250000          <1>     call checkPathspecOK
    72 00001903 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    73 00001905 E8E1250000          <1>     call scanPathWC
    74 0000190A 72E8                <1>     jc .badPath ;Or wildcards
    75 0000190C E81C260000          <1>     call checkPathNet
    76 00001911 74E1                <1>     jz .badPath ;Or Net paths
    77                              <1>     ;Path is ok, now proceed
    78 00001913 FF35(79C30300)      <1>     push qword [currentDTA]
    79 00001919 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
    80 00001920 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
    81 00001927 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    82 0000192E E85BF9FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
    83 00001933 8F05(79C30300)      <1>     pop qword [currentDTA]
    84 00001939 0F82E2270000        <1>     jc extErrExit   ;Exit with error code in eax
    85                              <1>     ;The path must've been ok, so now copy the path into the CDS
    86                              <1>     ;The copy of the directory entry has the start cluster of this dir file
    87 0000193F 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Copy the CDS to the tmpCDS
    88 00001946 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
    89 0000194C 756D                <1>     jnz .net    ;This is done by the redirector for redirector drives
    90 0000194E 488D3D(FBC50300)    <1>     lea rdi, tmpCDS
    91 00001955 B95B000000          <1>     mov ecx, cds_size
    92 0000195A F3A4                <1>     rep movsb
    93                              <1>     ;If the path is longer than 67, call it an invalid path
    94 0000195C 488D3D(7FC40300)    <1>     lea rdi, buffer1
    95 00001963 E8D9240000          <1>     call strlen ;Get the length of this path
    96 00001968 81F943000000        <1>     cmp ecx, 67
    97 0000196E 7784                <1>     ja .badPath
    98 00001970 4889FE              <1>     mov rsi, rdi    ;Move buffer source to rsi
    99 00001973 488D3D(FBC50300)    <1>     lea rdi, tmpCDS
   100 0000197A F3A4                <1>     rep movsb   ;Copy the path over
   101                              <1>     ;Now get the start cluster from the directory copy
   102 0000197C 0FB715(D5C50300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   103 00001983 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   104 0000198A C1E010              <1>     shl eax, 10h
   105 0000198D 09D0                <1>     or eax, edx ;Add low bits to eax
   106 0000198F 8905(48C60300)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   107 00001995 488D35(FBC50300)    <1>     lea rsi, tmpCDS
   108 0000199C 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   109 000019A3 B95B000000          <1>     mov ecx, cds_size
   110 000019A8 E835270000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   111 000019AD F3A4                <1>     rep movsb
   112 000019AF E838270000          <1>     call dosCrit1Exit
   113 000019B4 31C0                <1>     xor eax, eax
   114 000019B6 E958270000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   115                              <1> .net:
   116                              <1> ;SDA Vars are setup for this request
   117 000019BB B805110000          <1>     mov eax, 1105h
   118 000019C0 CD4F                <1>     int 4fh
   119 000019C2 0F8259270000        <1>     jc extErrExit
   120 000019C8 E946270000          <1>     jmp extGoodExit
   121                              <1> getCurrentDIR:     ;ah = 47h
   122                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   123                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   124 000019CD 88D0                <1>     mov al, dl  ;Move drive number into al
   125 000019CF E8AE230000          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   126 000019D4 0F8247270000        <1>     jc extErrExit
   127                              <1> .okDrive:
   128 000019DA 4889F7              <1>     mov rdi, rsi    ;Save destination in rdi
   129 000019DD 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]  ;Get pointer to current CDS in rsi
   130 000019E4 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   131 000019E8 FFC0                <1>     inc eax ;Go past the backslash
   132 000019EA 4801C6              <1>     add rsi, rax ;Add this many chars to rsi to point to first char to copy
   133 000019ED E85F240000          <1>     call strcpy
   134 000019F2 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   135 000019F7 E917270000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   136                              <1> 
   137                              <1> 
   138                              <1> getSetFileDateTime:;ah = 57h
   139                              <1> trueName:          ;ah = 60h, get fully qualified name. Int 4Fh, AX=1221h
   140                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   141 000019FC E8A4240000          <1>     call checkPathspecOK    ;This preserves rsi
   142 00001A01 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   143 00001A03 740A                <1>     jz .pathspecOk  ;If the last char in the path is malformed allow it here
   144                              <1> .badPath:
   145 00001A05 B803000000          <1>     mov eax, errPnf
   146 00001A0A E912270000          <1>     jmp extErrExit
   147                              <1> .pathspecOk:
   148 00001A0F 57                  <1>     push rdi    ;Save the destination
   149 00001A10 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   150 00001A17 E853F8FFFF          <1>     call canonicaliseFileName
   151 00001A1C C60700              <1>     mov byte [rdi], 0   ;Store a terminating zero if necessary
   152 00001A1F 5F                  <1>     pop rdi
   153 00001A20 0F82FB260000        <1>     jc extErrExit
   154 00001A26 488D35(7FC40300)    <1>     lea rsi, buffer1
   155 00001A2D E81F240000          <1>     call strcpy
   156 00001A32 31C0                <1>     xor eax, eax
   157 00001A34 E9DA260000          <1>     jmp extGoodExit
   158                              <1> 
   159                              <1> ;-----------------------------------
   160                              <1> ;    General Directory Routines    :
   161                              <1> ;-----------------------------------
   162                              <1> 
   163                              <1> updateDirectoryEntryForFile:    
   164                              <1> ;Updates the directory entry for disk files
   165                              <1> ;Called with:
   166                              <1> ;   [workingDPB] = DPB pointer for the disk device
   167                              <1> ;   [currentSFT] = Current SFT pointer
   168 00001A39 50                  <1>     push rax
   169 00001A3A 53                  <1>     push rbx
   170 00001A3B 57                  <1>     push rdi
   171 00001A3C 55                  <1>     push rbp
   172                              <1> 
   173 00001A3D 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   174 00001A44 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   175 00001A4B 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   176 00001A51 751D                <1>     jnz .skipDT
   177                              <1>     ;Get date and time words and add them to the directory entry
   178 00001A53 E8390A0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   179 00001A58 7265                <1>     jc .exit  ;If we fail to get time/date, fail the request
   180                              <1>     ;Build date and time words
   181 00001A5A E81D0B0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   182                              <1>     ;Update SFT fields
   183 00001A5F 66894713            <1>     mov word [rdi + sft.wTime], ax
   184 00001A63 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   185 00001A66 66894715            <1>     mov word [rdi + sft.wDate], ax
   186 00001A6A 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush  ;We update DT, so flush
   187                              <1> .skipDT:
   188                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   189                              <1> ; we skip all of this
   190 00001A70 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   191 00001A76 7447                <1>     jz .exit ;If the file was never written to, don't bother updating DIR data
   192 00001A78 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   193 00001A7C E89EF0FFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   194 00001A81 723C                <1>     jc .exit    ;If an error is to be returned from, we skip the rest of this
   195                              <1>     ;Now we write the changes to the sector
   196 00001A83 4889DD              <1>     mov rbp, rbx    ;Move disk buffer header into rbp
   197                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   198 00001A86 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer 
   199 00001A8A 488D6D30            <1>     lea rbp, qword [rbp + bufferHdr.dataarea]   ;Goto data area
   200 00001A8E 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   201 00001A92 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   202 00001A95 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   203 00001A98 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   204 00001A9B 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   205 00001A9E 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   206 00001AA2 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   207 00001AA6 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   208 00001AAA 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   209 00001AAE 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   210                              <1>     ;Directory sector updated and marked to be flushed to disk!
   211                              <1>     ;Now mark that the file has sectors not yet flushed to disk
   212 00001AB2 E8D9EEFFFF          <1>     call setBufferReferenced
   213 00001AB7 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   214 00001AB8 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush
   215 00001ABE 9D                  <1>     popfq
   216                              <1> .exit:
   217 00001ABF 5D                  <1>     pop rbp
   218 00001AC0 5F                  <1>     pop rdi
   219 00001AC1 5B                  <1>     pop rbx
   220 00001AC2 58                  <1>     pop rax
   221                              <1>     return
    18                              <2> %%_ret:
    19 00001AC3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    25                                  %include "./Source/Kernel/FileIO/devio.asm"
    26                              <1> ;This file contains the primitive dev io function, which will be called 
    27                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    28                              <1> ; make requests for device IO.
    29                              <1> 
    30                              <1> mainCharIO:
    31                              <1> ;This is the main IO clearing function for Char IO.
    32                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    33                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    34                              <1> ;
    35                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    36                              <1> ;       ah = {0,..., 5}, a subfunction number
    37                              <1> ;       Function 0: Read Char (drvREAD)
    38                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    39                              <1> ;       Function 2: Write Char (drvWrite)
    40                              <1> ; In the case the below functions are called for Disk/Net files
    41                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    42                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    43                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    44                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    45                              <1> ;
    46                              <1> ; If and only if ah = 02h, al = Char to write to device
    47                              <1> ;
    48                              <1> ;
    49                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    50                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    51                              <1> ;                                           ZF = NZ => Device ready (not busy)
    52                              <1> ;                                               If ND read, AL = Next Char
    53                              <1> ; For Files/Net:
    54                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    55                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    56                              <1> ;           For Read and ND Read:
    57                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    58                              <1> ;               Read returns ^Z on EOF.
    59                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    60                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    61                              <1> ;
    62                              <1> ;All registers preserved EXCEPT for ax and flags
    63                              <1> 
    64                              <1> ;Reference Request Header
    65                              <1> ;Common Section:
    66                              <1> ;    .hdrlen resb 1  ;Length of the request header
    67                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    68                              <1> ;    .cmdcde resb 1  ;Command code
    69                              <1> ;    .status resw 1  ;Status word
    70                              <1> ;    .devptr resq 1  ;Reserved. Unused
    71                              <1> ;Below used by calls 0,1,2,5
    72                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    73                              <1> ;Below used by calls 0,2
    74                              <1> ;    .bufptr resq 1
    75                              <1> ;    .tfrlen resd 1
    76                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    77                              <1> ;    .strtsc resq 1
    78                              <1> ;    .desptr resq 1
    79                              <1> 
    80                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    81 00001AC4 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    82 00001AC5 488D1D(7DC40300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    83 00001ACC 48891D(06C40300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    84 00001AD3 5B                  <1>     pop rbx
    85 00001AD4 C705(0EC40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    85 00001ADC 0000                <1>
    86 00001ADE 668905(7DC40300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    87 00001AE5 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    88 00001AEB 0F85A1000000        <1>     jnz .notChar
    89 00001AF1 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    90 00001AF7 0F8495000000        <1>     jz .notChar
    91                              <1> ;Char devices only here
    92 00001AFD E8C9250000          <1>     call dosPushRegs    ;Save context here
    93 00001B02 488D1D38E5FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    94 00001B09 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    95 00001B0C C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    96 00001B0F 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    97 00001B12 890D(F8C30300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    98                              <1>     ;Now set up cx for status word
    99 00001B18 31C9                <1>     xor ecx, ecx
   100 00001B1A 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   101 00001B1D 7506                <1>     jne .skipBsySet
   102 00001B1F 81C900020000        <1>     or ecx, drvBsyStatus
   103                              <1> .skipBsySet:
   104 00001B25 66870D(FBC30300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   105                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   106 00001B2C 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   107 00001B33 E8E31D0000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   108 00001B38 668B3D(FBC30300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   109 00001B3F F7C700800000        <1>     test edi, drvErrStatus
   110 00001B45 752D                <1>     jnz .error
   111                              <1> .ignoreRet:
   112 00001B47 803D(FAC30300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   113 00001B4E 750C                <1>     jne .notNDRead
   114 00001B50 8A05(05C40300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   115 00001B56 8805(7DC40300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   116                              <1> .notNDRead:
   117 00001B5C 8A25(FCC30300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   118 00001B62 F6D4                <1>     not ah
   119 00001B64 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   120 00001B67 E848250000          <1>     call dosPopRegs ;Get back the context
   121 00001B6C 668B05(7DC40300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   122                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 00001B73 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   123                              <1> .error:
   124                              <1>     ;cl has flags
   125 00001B74 88CC                <1>     mov ah, cl
   126 00001B76 E8771C0000          <1>     call charDevErr
   127 00001B7B 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   128 00001B7D 750A                <1>     jne .errorIgnore
   129                              <1>     ;Fallthrough => Retry
   130 00001B7F E830250000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   131 00001B84 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   132                              <1> .errorIgnore:
   133                              <1>     ;Clear the busy bit in the status word
   134 00001B89 8025(FCC30300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   135 00001B90 EBB5                <1>     jmp short .ignoreRet
   136                              <1> .notChar:
   137                              <1> ;Just return with ZF=NZ for now
   138 00001B92 50                  <1>     push rax
   139 00001B93 31C0                <1>     xor eax, eax
   140 00001B95 FEC0                <1>     inc al
   141 00001B97 58                  <1>     pop rax
   142                              <1>     return
    18                              <2> %%_ret:
    19 00001B98 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   143                              <1> 
   144                              <1> openSFT:
   145                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   146                              <1> ;Input: rdi = SFT pointer
   147 00001B99 E82D250000          <1>     call dosPushRegs
   148 00001B9E B00D                <1>     mov al, drvOPEN
   149 00001BA0 EB07                <1>     jmp short openCloseCommon
   150                              <1> closeSFT:
   151                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   152 00001BA2 E824250000          <1>     call dosPushRegs
   153 00001BA7 B00E                <1>     mov al, drvCLOSE
   154                              <1> openCloseCommon:
   155                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   156 00001BA9 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   157 00001BAF 7469                <1>     jz .exit    ;Exit if so
   158 00001BB1 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   159 00001BB5 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   160 00001BB9 7512                <1>     jnz .charDev
   161                              <1>     ;Here a disk drive, rdi is a DPB ptr
   162 00001BBB 803D(36C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   163 00001BC2 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   164 00001BC4 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   165 00001BC7 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   166 00001BC9 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   167                              <1> .charDev:
   168 00001BCD 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   169 00001BD3 7445                <1>     jz .exit    ;No, exit!
   170 00001BD5 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   171 00001BD8 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   172 00001BDF 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   173                              <1> .retryEP:
   174 00001BE2 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   175 00001BE5 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   176 00001BE8 50                  <1>     push rax    ;Save the dword
   177 00001BE9 E8311D0000          <1>     call goDriver
   178 00001BEE 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   179 00001BF5 F7C700800000        <1>     test edi, drvErrStatus
   180 00001BFB 741C                <1>     jz .exitPop
   181                              <1>     ;Error here, check if char or block drive
   182 00001BFD 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   183 00001C03 7404                <1>     jz .blockError
   184                              <1>     ;Char error here
   185 00001C05 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   186 00001C07 EB04                <1>     jmp short .errorCmn
   187                              <1> .blockError:
   188 00001C09 88C8                <1>     mov al, cl  ;Move drive number into al
   189 00001C0B B406                <1>     mov ah, critData    ;Data on block dev error
   190                              <1> .errorCmn:
   191                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   192 00001C0D E8E01B0000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   193 00001C12 B001                <1>     mov al, critRetry   ;al returns user response
   194 00001C14 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   195 00001C16 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   196 00001C17 EBC9                <1>     jmp short .retryEP  ;Reset
   197                              <1> .exitPop:
   198 00001C19 58                  <1>     pop rax    
   199                              <1> .exit:
   200 00001C1A E895240000          <1>     call dosPopRegs
   201                              <1>     return
    18                              <2> %%_ret:
    19 00001C1F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    26                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    27                              <1> ;-----------------------------------------------------------------------:
    28                              <1> ;                  DOS default char functions live here                 :
    29                              <1> ;                                                                       :
    30                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    31                              <1> ;                                                                       :
    32                              <1> ;Rules for the naming of the DOS functions                              :
    33                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    34                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    35                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    36                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    37                              <1> ;                                                                       :
    38                              <1> ;-----------------------------------------------------------------------:
    39                              <1> 
    40                              <1> charIn_BE:     ;ah = 01h
    41                              <1> ;Return char that has been read and echoed in al
    42 00001C20 E866010000          <1>     call charIn_B
    43 00001C25 50                  <1>     push rax
    44 00001C26 E804000000          <1>     call charOut_B.in    ;Output it to screen
    45 00001C2B 58                  <1>     pop rax
    46                              <1>     return
    18                              <2> %%_ret:
    19 00001C2C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    47                              <1> 
    48                              <1> charOut_B:       ;ah = 02h
    49                              <1> ;Bspace is regular cursor left, does not insert a blank
    50 00001C2D 88D0                <1>     mov al, dl
    51                              <1> .in:  ;Internal function Entry Point, with char in al
    52 00001C2F 3C20                <1>     cmp al, asciiCaret
    53 00001C31 7277                <1>     jb .control
    54 00001C33 3C7F                <1>     cmp al, DEL ;DEL char?
    55 00001C35 7406                <1>     je .skipCurs
    56 00001C37 FE05(2EC20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    57                              <1> .skipCurs:
    58 00001C3D FE05(34C30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    59 00001C43 8025(34C30300)03    <1>     and byte [vConErr], 3
    60 00001C4A 56                  <1>     push rsi
    61 00001C4B 7507                <1>     jnz .skipErrorCheck
    62 00001C4D 50                  <1>     push rax
    63 00001C4E E884020000          <1>     call vConCtrlCheck
    64 00001C53 58                  <1>     pop rax
    65                              <1> .skipErrorCheck:
    66 00001C54 E80C020000          <1>     call outputOnStdout
    67 00001C59 5E                  <1>     pop rsi
    68 00001C5A F605(31C30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    69                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001C61 74C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    70 00001C63 53                  <1>     push rbx
    71 00001C64 56                  <1>     push rsi
    72 00001C65 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    73 00001C6A E82F030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    74 00001C6F 7236                <1>     jc .exitPrintEcho
    75                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    76 00001C71 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    77 00001C75 F7C300800000        <1>     test ebx, devRedirDev
    78 00001C7B 752A                <1>     jnz .exitPrintEcho  ;Exit if STDOUT is redir
    79 00001C7D F7C380000000        <1>     test ebx, devCharDev
    80 00001C83 7422                <1>     jz .exitPrintEcho
    81 00001C85 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    82 00001C8A E80F030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    83 00001C8F 7216                <1>     jc .exitPrintEcho   ;Exit if handle closed
    84 00001C91 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    85 00001C97 7407                <1>     jz .netSpool
    86 00001C99 E8FB010000          <1>     call outputOnSFT
    87 00001C9E EB07                <1>     jmp short .exitPrintEcho
    88                              <1> .netSpool:
    89 00001CA0 C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    90                              <1> .exitPrintEcho:
    91 00001CA7 5E                  <1>     pop rsi
    92 00001CA8 5B                  <1>     pop rbx
    93                              <1>     return
    18                              <2> %%_ret:
    19 00001CA9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    94                              <1> .control:
    95 00001CAA 3C0D                <1>     cmp al, CR
    96 00001CAC 7425                <1>     je .newline
    97 00001CAE 3C08                <1>     cmp al, BSP
    98 00001CB0 742D                <1>     je .back
    99 00001CB2 3C09                <1>     cmp al, TAB
   100 00001CB4 7587                <1>     jne .skipCurs   ;Treat as normal
   101                              <1>     ;TAB key here
   102                              <1> .tab:
   103 00001CB6 51                  <1>     push rcx
   104 00001CB7 0FB60D(2EC20300)    <1>     movzx ecx, byte [vConCursPos]
   105 00001CBE 80C9F8              <1>     or cl, ~7
   106 00001CC1 F6D9                <1>     neg cl
   107 00001CC3 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   108                              <1> .tabloop:
   109 00001CC6 B020                <1>     mov al, SPC
   110 00001CC8 E862FFFFFF          <1>     call charOut_B.in   ;Output the char
   111 00001CCD FEC9                <1>     dec cl
   112 00001CCF 75F5                <1>     jnz .tabloop
   113                              <1> .stopTab:
   114 00001CD1 59                  <1>     pop rcx
   115                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 00001CD2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   116                              <1> .newline:
   117 00001CD3 C605(2EC20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   118 00001CDA E95EFFFFFF          <1>     jmp .skipCurs   ;And echo 
   119                              <1> .back:
   120 00001CDF FE0D(2EC20300)      <1>     dec byte [vConCursPos]
   121 00001CE5 E953FFFFFF          <1>     jmp .skipCurs   ;And echo
   122                              <1> 
   123                              <1> auxIn_B:        ;ah = 03h
   124 00001CEA E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   125 00001CEF BB03000000          <1>     mov ebx, 3
   126 00001CF4 E8A5020000          <1>     call getCharDevSFT
   127                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001CF9 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   128                              <1> .auxloop:
   129 00001CFB B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   130 00001CFD E8C2FDFFFF          <1>     call mainCharIO
   131 00001D02 7408                <1>     jz .signalLoop
   132 00001D04 30E4                <1>     xor ah, ah  ;Read the char in
   133 00001D06 E8B9FDFFFF          <1>     call mainCharIO
   134                              <1>     return
    18                              <2> %%_ret:
    19 00001D0B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   135                              <1> .signalLoop:
   136 00001D0C E8A3010000          <1>     call callInt48h
   137 00001D11 EBE8                <1>     jmp short .auxloop
   138                              <1> 
   139                              <1> auxOut_B:       ;ah = 04h
   140 00001D13 53                  <1>     push rbx
   141 00001D14 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   142 00001D19 EB06                <1>     jmp short auxOutCmn
   143                              <1> prnOut_B:       ;ah = 05h
   144 00001D1B 53                  <1>     push rbx
   145 00001D1C BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   146                              <1> auxOutCmn: ;Auxilliary output device common 
   147 00001D21 88D0                <1>     mov al, dl  ;Get the char into al
   148 00001D23 50                  <1>     push rax
   149 00001D24 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   150 00001D29 58                  <1>     pop rax
   151 00001D2A 56                  <1>     push rsi
   152 00001D2B E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   153 00001D30 5E                  <1>     pop rsi
   154 00001D31 5B                  <1>     pop rbx
   155                              <1>     return
    18                              <2> %%_ret:
    19 00001D32 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   156                              <1> 
   157                              <1> directConIO:    ;ah = 06h
   158 00001D33 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   159 00001D35 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   160 00001D37 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   161                              <1> ;Here is the read char direct function
   162 00001D3D 31DB                <1>     xor ebx, ebx    
   163 00001D3F E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   164                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001D44 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   165 00001D46 488B2D(DCC30300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   166 00001D4D B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   167 00001D4F E870FDFFFF          <1>     call mainCharIO
   168 00001D54 E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   169 00001D59 7507                <1>     jnz .readChar
   170 00001D5B 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   171 00001D5F 30C0                <1>     xor al, al  ;Set caller return code to 0
   172                              <1>     return
    18                              <2> %%_ret:
    19 00001D61 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   173                              <1> .readChar:
   174 00001D62 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   175                              <1>     ;Fallthrough here to get the char at STDIN
   176                              <1> charIn:         ;ah = 07h
   177                              <1> ;Return char in al from STDIN without waiting
   178 00001D66 31DB                <1>     xor ebx, ebx
   179 00001D68 E831020000          <1>     call getCharDevSFT
   180                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001D6D 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   181 00001D6F B401                <1>     mov ah, 01  ;ND read for char
   182 00001D71 E84EFDFFFF          <1>     call mainCharIO
   183 00001D76 750B                <1>     jnz .getChar
   184 00001D78 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   185 00001D7A CD4A                <1>     int 4Ah
   186 00001D7C E833010000          <1>     call callInt48h
   187 00001D81 EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   188                              <1> .getChar:
   189                              <1>     ;Get the char in al and exit
   190 00001D83 30E4                <1>     xor ah, ah
   191 00001D85 E83AFDFFFF          <1>     call mainCharIO
   192                              <1>     return
    18                              <2> %%_ret:
    19 00001D8A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   193                              <1> charIn_B:       ;ah = 08h
   194                              <1> ;Return char in al from STDIN
   195 00001D8B 56                  <1>     push rsi
   196                              <1> .readAgain:
   197 00001D8C E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   198                              <1>     ;Also sets rsi to point to the device SFT for 
   199 00001D91 7543                <1>     jnz .pullChar
   200 00001D93 803D(E8D80300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   201 00001D9A 7507                <1>     jne .skiplookahead
   202 00001D9C B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   203 00001D9E E821FDFFFF          <1>     call mainCharIO
   204                              <1> .skiplookahead:
   205 00001DA3 B484                <1>     mov ah, 84h
   206 00001DA5 CD4A                <1>     int 4ah ;Multitasking keyboard loop
   207 00001DA7 66813D(14D90300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   207 00001DAF FF                  <1>
   208 00001DB0 751B                <1>     jne .skipClockRead
   209 00001DB2 E814230000          <1>     call dosPushRegs
   210 00001DB7 F8                  <1>     clc ;Clear CF, write primary header to backup
   211 00001DB8 E882000000          <1>     call swapPrimaryHeader
   212 00001DBD E8CF060000          <1>     call readDateTimeRecord
   213 00001DC2 F9                  <1>     stc ;Set CF, write backup to primary header
   214 00001DC3 E877000000          <1>     call swapPrimaryHeader
   215 00001DC8 E8E7220000          <1>     call dosPopRegs
   216                              <1> .skipClockRead:
   217 00001DCD 66FF05(14D90300)    <1>     inc word [keybTicks]
   218 00001DD4 EBB6                <1>     jmp short .readAgain
   219                              <1> .pullChar:
   220 00001DD6 30E4                <1>     xor ah, ah
   221 00001DD8 E8E7FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   222 00001DDD 5E                  <1>     pop rsi
   223 00001DDE 3C00                <1>     cmp al, NUL ;Is this the null char?
   224 00001DE0 7507                <1>     jne .exit
   225                              <1>     ;We are mid extended ascii, prevent printer toggling
   226 00001DE2 C605(13D90300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   227                              <1> .exit:
   228                              <1>     return
    18                              <2> %%_ret:
    19 00001DE9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   229                              <1> 
   230                              <1> printString_B:      ;ah = 09h
   231 00001DEA 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   232                              <1> .ps0:
   233 00001DED AC                  <1>     lodsb   ;Get char in al and inc rsi
   234 00001DEE 3C24                <1>     cmp al, "$" ;End of string char?
   235                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001DF0 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   236 00001DF2 E838FEFFFF          <1>     call charOut_B.in
   237 00001DF7 EBF4                <1>     jmp short .ps0
   238                              <1> 
   239                              <1> checkStdinStatus:  ;ah = 0Bh
   240                              <1> ;Returns the status of the driver controlling vCon
   241 00001DF9 E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   242 00001DFE B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   243                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001E00 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   244 00001E02 FEC8                <1>     dec al  ;Set al to -1 if char available
   245                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 00001E04 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   246                              <1> clearbuffDoFunc:   ;ah = 0Ch
   247                              <1> ;Clears any buffers and issues a console read command (the command in al)
   248                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   249 00001E05 50                  <1>     push rax
   250 00001E06 52                  <1>     push rdx
   251 00001E07 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   252 00001E09 E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   253 00001E0E 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   254 00001E10 B404                <1>     mov ah, 04h ;Flush input buffers
   255 00001E12 E8ADFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   256                              <1> .skipFlush:
   257 00001E17 5A                  <1>     pop rdx
   258 00001E18 58                  <1>     pop rax
   259 00001E19 88C4                <1>     mov ah, al  ;Move function number into ah
   260 00001E1B 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   261 00001E1D 7507                <1>     jne .others
   262 00001E1F 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   263 00001E22 7412                <1>     jz .bad ;Yes, exit
   264 00001E24 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   265                              <1> .others:
   266 00001E26 3C01                <1>     cmp al, 01h
   267 00001E28 740F                <1>     je .callFunction
   268 00001E2A 3C07                <1>     cmp al, 07h
   269 00001E2C 740B                <1>     je .callFunction
   270 00001E2E 3C08                <1>     cmp al, 08h
   271 00001E30 7407                <1>     je .callFunction
   272 00001E32 3C0A                <1>     cmp al, 0Ah
   273 00001E34 7403                <1>     je .callFunction
   274                              <1> .bad:
   275 00001E36 30C0                <1>     xor al, al
   276                              <1>     return
    18                              <2> %%_ret:
    19 00001E38 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   277                              <1> .callFunction:
   278 00001E39 FA                  <1>     cli ;Prepare to swap stack pointer
   279                              <1>     ;The below address avoids "properly" reentering DOS
   280                              <1>     ;We simply reuse the function dispatch aspect. 
   281                              <1>     ;this means we dont trash the caller's register frame 
   282 00001E3A E9A4210000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   283                              <1> ;------------------------
   284                              <1> ;  Primitive functions  :
   285                              <1> ;------------------------
   286                              <1> swapPrimaryHeader:
   287                              <1> ;Will swap the primary header to the backup or vice-versa, depending on
   288                              <1> ; CF. CF = NC, write to backup, CF=CY, read from backup
   289 00001E3F 56                  <1>     push rsi
   290 00001E40 57                  <1>     push rdi
   291 00001E41 51                  <1>     push rcx
   292 00001E42 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   292 00001E4B 00                  <1>
   293 00001E4C 488D35(22C40300)    <1>     lea rsi, primReqHdr
   294 00001E53 488D3D(E9D80300)    <1>     lea rdi, bkupReqHdr
   295 00001E5A 7303                <1>     jnc .read
   296 00001E5C 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   297                              <1> .read:
   298 00001E5F F3A4                <1>     rep movsb   ;Swap
   299 00001E61 59                  <1>     pop rcx
   300 00001E62 5F                  <1>     pop rdi
   301 00001E63 5E                  <1>     pop rsi
   302                              <1>     return
    18                              <2> %%_ret:
    19 00001E64 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   303                              <1> outputOnStdout:
   304                              <1> ;Input: al = Char to output
   305                              <1> ;Output: CF=CY, all good
   306 00001E65 53                  <1>     push rbx
   307 00001E66 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   308 00001E6B E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   309 00001E70 7217                <1>     jc .exit
   310 00001E72 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   311 00001E78 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   312 00001E7A 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   313 00001E7E 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   314 00001E84 7405                <1>     jz .notCharDevOrFast
   315 00001E86 CD49                <1>     int 49h ;Fast output
   316                              <1> .exitOk:
   317 00001E88 F8                  <1>     clc
   318                              <1> .exit:
   319 00001E89 5B                  <1>     pop rbx
   320                              <1>     return
    18                              <2> %%_ret:
    19 00001E8A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   321                              <1> .notCharDevOrFast:
   322 00001E8B E809000000          <1>     call outputOnSFT
   323 00001E90 5B                  <1>     pop rbx
   324                              <1>     return
    18                              <2> %%_ret:
    19 00001E91 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   325                              <1> 
   326                              <1> outputToHandle:
   327                              <1> ;Char to output must be in al
   328 00001E92 E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   329                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001E97 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   330                              <1> outputOnSFT:
   331                              <1> ;Output char in al to SFT in rsi
   332                              <1> ;Waits until device is not busy to send char.
   333                              <1> ;Calls int 48h if device busy
   334 00001E99 50                  <1>     push rax
   335 00001E9A B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   336 00001E9C E823FCFFFF          <1>     call mainCharIO
   337 00001EA1 58                  <1>     pop rax
   338 00001EA2 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   339 00001EA4 B402                <1>     mov ah, 02h ;Output char in al
   340 00001EA6 E819FCFFFF          <1>     call mainCharIO
   341 00001EAB F8                  <1>     clc
   342                              <1>     return
    18                              <2> %%_ret:
    19 00001EAC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   343                              <1> .signalLoop:
   344 00001EAD E802000000          <1>     call callInt48h
   345 00001EB2 EBE5                <1>     jmp short outputOnSFT
   346                              <1> 
   347                              <1> callInt48h:
   348                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   349 00001EB4 9C                  <1>     pushfq
   350 00001EB5 F605(F6C30300)FF    <1>     test byte [int48Flag], -1
   351 00001EBC 7417                <1>     jz .exit    ;If zero, not safe
   352 00001EBE F605(69C30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   353 00001EC5 750E                <1>     jnz .exit
   354                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   355 00001EC7 FF35(F6C30300)      <1>     push qword [int48Flag] 
   356 00001ECD CD48                <1>     int 48h
   357 00001ECF 8F05(F6C30300)      <1>     pop qword [int48Flag]    ;Return original value
   358                              <1> .exit:
   359 00001ED5 9D                  <1>     popfq
   360                              <1>     return
    18                              <2> %%_ret:
    19 00001ED6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   361                              <1> 
   362                              <1> 
   363                              <1> vConCtrlCheck:
   364                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   365                              <1> ; the processing. 
   366                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   367                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   368                              <1> ;
   369                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   370                              <1> ;^S will pause screen processing until another key is processed by vCon input
   371                              <1> ;^P will toggle the printer echo feature of the vConsole
   372                              <1> ;
   373                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   374                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   375                              <1> ;
   376                              <1> ;Output: 
   377                              <1> ;   CF=CY : Error
   378                              <1> ;   CF=NC : ...
   379                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   380                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   381 00001ED7 E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   382 00001EDC 53                  <1>     push rbx
   383 00001EDD 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   384 00001EDF E8BA000000          <1>     call getCharDevSFT
   385 00001EE4 5B                  <1>     pop rbx
   386                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001EE5 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   387 00001EE7 B401                <1>     mov ah, 01  ;Non destructively read CON
   388 00001EE9 E8D6FBFFFF          <1>     call mainCharIO
   389 00001EEE 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   390                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   391 00001EF0 3C13                <1>     cmp al, DC3 ;^S ?
   392 00001EF2 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   393 00001EF4 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   394 00001EF6 E8C9FBFFFF          <1>     call mainCharIO
   395 00001EFB E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   396                              <1> .checkPrintOrExit:
   397 00001F00 3C10                <1>     cmp al, DLE ;Do we have ^P?
   398 00001F02 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   399 00001F04 3C03                <1>     cmp al, ETX ;Do we have ^C?
   400 00001F06 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   401                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   402                              <1>     return 
    18                              <2> %%_ret:
    19 00001F08 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   403                              <1> .printToggle:
   404 00001F09 F615(31C30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   405 00001F0F 53                  <1>     push rbx
   406 00001F10 BB04000000          <1>     mov ebx, 4  ;PRN handle
   407 00001F15 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   408 00001F1A 5B                  <1>     pop rbx
   409                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001F1B 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   410 00001F1D 57                  <1>     push rdi
   411 00001F1E 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   412 00001F21 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   413 00001F27 741D                <1>     jz .notNet
   414 00001F29 50                  <1>     push rax
   415 00001F2A B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   416 00001F2F CD4F                <1>     int 4Fh
   417 00001F31 58                  <1>     pop rax
   418 00001F32 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   419                              <1>     ;If something went wrong, turn off echo
   420 00001F34 C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   421 00001F3B 50                  <1>     push rax
   422 00001F3C B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   423 00001F41 CD4F                <1>     int 4Fh
   424 00001F43 58                  <1>     pop rax
   425 00001F44 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   426                              <1> .notNet:
   427                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   428                              <1> ; 0Dh or 0Eh
   429 00001F46 803D(31C30300)00    <1>     cmp byte [printEcho], 00
   430 00001F4D 7507                <1>     jnz .echoOn
   431 00001F4F E84EFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   432 00001F54 EB05                <1>     jmp short .printExit
   433                              <1> .echoOn:
   434 00001F56 E83EFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   435                              <1> .printExit:
   436 00001F5B 5F                  <1>     pop rdi
   437                              <1>     return
    18                              <2> %%_ret:
    19 00001F5C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   438                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   439 00001F5D E852FFFFFF          <1>     call callInt48h
   440                              <1> .waitNextChar:   ;Here get next char
   441 00001F62 B401                <1>     mov ah, 01h ;ND read
   442 00001F64 E85BFBFFFF          <1>     call mainCharIO
   443 00001F69 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   444                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   445 00001F6B 53                  <1>     push rbx
   446 00001F6C 31DB                <1>     xor ebx, ebx
   447 00001F6E E82B000000          <1>     call getCharDevSFT
   448 00001F73 5B                  <1>     pop rbx
   449                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001F74 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   450 00001F76 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   451 00001F78 E847FBFFFF          <1>     call mainCharIO
   452 00001F7D 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   453 00001F7F 7514                <1>     jnz .checkBreak2
   454 00001F81 803D(13D90300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   455 00001F88 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   456 00001F8E C605(13D90300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   457                              <1> .checkBreak2:
   458 00001F95 3C03                <1>     cmp al, ETX
   459                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001F97 75C3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   460 00001F99 E914190000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   461                              <1> 
   462                              <1> 
   463                              <1> getCharDevSFT:
   464                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   465                              <1> ;Input: bx = zero extended handle number
   466                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   467                              <1> ;        CF=CY => al = Error code, abort operation
   468 00001F9E F605(F5C30300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   469 00001FA5 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   470                              <1> .getSFT:
   471 00001FA7 57                  <1>     push rdi
   472 00001FA8 E8D00F0000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   473 00001FAD 4889FE              <1>     mov rsi, rdi
   474 00001FB0 5F                  <1>     pop rdi
   475                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 00001FB1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   476                              <1> .swap:
   477                              <1> ;workingSFT is only set for CON calls
   478 00001FB2 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   479 00001FB8 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   480 00001FBA 488B35(74C60300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   481 00001FC1 F8                  <1>     clc
   482                              <1>     return
    18                              <2> %%_ret:
    19 00001FC2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   483                              <1> 
   484                              <1> ;------------------------
   485                              <1> ;   Utility functions   :
   486                              <1> ;------------------------
   487                              <1> printCaretASCII:
   488                              <1> ;Input: al = Char to print with a caret
   489                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   490                              <1> ;First check if the char should be careted, and then print normally if so
   491 00001FC3 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   492 00001FC5 0F8364FCFFFF        <1>     jae charOut_B.in
   493 00001FCB 3C09                <1>     cmp al, TAB
   494 00001FCD 0F845CFCFFFF        <1>     je charOut_B.in
   495 00001FD3 3C15                <1>     cmp al, NAK
   496 00001FD5 0F8454FCFFFF        <1>     je charOut_B.in
   497 00001FDB 3C14                <1>     cmp al, DC4
   498 00001FDD 0F844CFCFFFF        <1>     je charOut_B.in
   499 00001FE3 50                  <1>     push rax
   500 00001FE4 B05E                <1>     mov al, "^" ;Get caret in place
   501 00001FE6 E844FCFFFF          <1>     call charOut_B.in
   502 00001FEB 58                  <1>     pop rax
   503 00001FEC 0440                <1>     add al, "@" ;Turn into an ASCII Char
   504 00001FEE E93CFCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   505                              <1> printCRLF:
   506 00001FF3 B00D                <1>     mov al, CR
   507 00001FF5 E835FCFFFF          <1>     call charOut_B.in
   508 00001FFA B00A                <1>     mov al, LF
   509 00001FFC E92EFCFFFF          <1>     jmp charOut_B.in
   510                              <1> 
   511                              <1> checkBreak:
   512                              <1> ;Reads bytes from CON if there are any bytes to read and 
   513                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   514 00002001 803D(6AC30300)01    <1>     cmp byte [inDOS], 1
   515                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002008 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   516                              <1> ;Returns in al the keystroke that is available IF one is available
   517                              <1> ; or al=0 if no keystroke available
   518 0000200A 53                  <1>     push rbx
   519 0000200B 56                  <1>     push rsi
   520 0000200C 488B35(4BC00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   521                              <1>     ;Place command code and a zero status word at the same time
   522 00002013 C705(4EC40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   522 0000201B 0000                <1>
   523                              <1>     ;Place the packet size in the hdrlen field
   524 0000201D C605(4CC40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   525 00002024 488D1D(4CC40300)    <1>     lea rbx, critReqHdr
   526 0000202B E8EF180000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   527                              <1>     ;Check if the busy bit is set (No keystroke available)
   528 00002030 66F705(4FC40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   528 00002038 02                  <1>
   529 00002039 7405                <1>     jz .charFound
   530                              <1> .exit:
   531 0000203B 30C0                <1>     xor al, al
   532 0000203D 5E                  <1>     pop rsi
   533 0000203E 5B                  <1>     pop rbx
   534                              <1>     return
    18                              <2> %%_ret:
    19 0000203F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   535                              <1> .charFound:
   536                              <1> ;Keystroke available, proceed
   537 00002040 8A05(59C40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   538 00002046 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   539 00002048 75F1                <1>     jne .exit   ;If not equal exit
   540                              <1> ;Now we pull the char out of the buffer
   541 0000204A C705(4EC40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   541 00002052 0000                <1>
   542 00002054 C605(4CC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   543                              <1>     ;Place pointers and number of chars
   544 0000205B C705(62C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   544 00002063 0000                <1>
   545                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   546 00002065 488D05(59C40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   547 0000206C 488905(5AC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   548 00002073 E8A7180000          <1>     call goDriver   ;RSI and RBX as before
   549 00002078 E935180000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   550                              <1> 
   551                              <1> vConSwapDriver:
   552                              <1> ;Sets up the vCon to use the alternative SFT pointer
   553 0000207D 57                  <1>     push rdi
   554 0000207E C605(F5C30300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   555 00002085 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   556 0000208C 48893D(74C60300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   557 00002093 5F                  <1>     pop rdi
   558                              <1>     return
    18                              <2> %%_ret:
    19 00002094 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   559                              <1> 
   560                              <1> vConRetDriver:
   561                              <1> ;Returns the original driver (sets flag down)
   562 00002095 C605(F5C30300)00    <1>     mov byte [vConDrvSwp], 0
   563                              <1>     return
    18                              <2> %%_ret:
    19 0000209C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   564                              <1> 
   565                              <1> ;--------------------------------------------------
   566                              <1> ;      Main Keyboard Buffered Input Function      :
   567                              <1> ;--------------------------------------------------
   568                              <1> buffCharInput_BE:  ;ah = 0Ah
   569                              <1> ;Buffer pointer in rdx
   570                              <1> ; byte [rdx + 0], buffer length
   571                              <1> ; byte [rdx + 1], number of chars in buffer
   572                              <1> ; byte [rdx + 2], buffer start
   573                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   574                              <1> ;Register use
   575                              <1> ; dh = Char offset in internal buffer
   576                              <1> ; dl = Buffer length
   577                              <1> ; bh = Char offset in user buffer
   578                              <1> ; bl = Number of chars already in the buffer
   579                              <1> ; rdi = Internal buffer
   580                              <1> ; rsi = User buffer
   581 0000209D 4889D6              <1>     mov rsi, rdx
   582 000020A0 66AD                <1>     lodsw   ;Get buffer metadata in ax
   583 000020A2 84C0                <1>     test al, al
   584                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000020A4 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   585 000020A6 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   586 000020A9 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   587 000020AB 7606                <1>     jbe .avoidcheck
   588 000020AD 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   589 000020B1 7402                <1>     je .functionKeyOk
   590                              <1> .avoidcheck:
   591 000020B3 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   592                              <1> .functionKeyOk:
   593 000020B5 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   594 000020B8 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   595                              <1> .breakEP:
   596 000020BA 8A05(2EC20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   597 000020C0 8805(2FC20300)      <1>     mov byte [vConCurCnt], al
   598 000020C6 56                  <1>     push rsi    ;Push user buffer address
   599 000020C7 488D3D(30C20300)    <1>     lea rdi, vConBuffer
   600 000020CE C605(5DC60300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   601                              <1> .mainLoop:
   602 000020D5 E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   603 000020DA 3C0A                <1>     cmp al, LF
   604 000020DC 7505                <1>     jne .checkControlChars
   605                              <1> .mainLoop2:
   606 000020DE E8A8FCFFFF          <1>     call charIn_B
   607                              <1> .checkControlChars:
   608 000020E3 3C06                <1>     cmp al, ACK
   609 000020E5 74F7                <1>     je .mainLoop2   ;Get another char
   610 000020E7 3A0574DFFFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   611 000020ED 0F8426010000        <1>     je .escape
   612 000020F3 3C7F                <1>     cmp al, DEL
   613 000020F5 0F8489000000        <1>     je .delete
   614 000020FB 3C08                <1>     cmp al, BSP
   615 000020FD 0F8481000000        <1>     je .delete
   616 00002103 3C17                <1>     cmp al, ETB
   617                              <1>     ;Add space for patched jump instructions
   618 00002105 9090909090          <1>     db 5 dup (90h)  ;NOP
   619 0000210A 3C15                <1>     cmp al, NAK
   620 0000210C 9090909090          <1>     db 5 dup (90h)
   621 00002111 3C0D                <1>     cmp al, CR
   622 00002113 744C                <1>     je .carriageReturn
   623 00002115 3C0A                <1>     cmp al, LF
   624 00002117 7461                <1>     je .lineFeed
   625 00002119 3A0543DFFFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   626 0000211F 7429                <1>     je .break
   627                              <1> .checkIfCanInsert:
   628 00002121 38D6                <1>     cmp dh, dl
   629 00002123 731C                <1>     jae .bufOflw
   630 00002125 AA                  <1>     stosb   ;Store the byte and increment rdi!
   631 00002126 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   632 00002128 E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   633 0000212D 803D(5DC60300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   634 00002134 75A8                <1>     jne .mainLoop2
   635                              <1>     ;IF not in insert mode, we fall here
   636                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   637                              <1>     ; or insert chars if needed.
   638 00002136 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   639 00002138 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   640 0000213A 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   641 0000213D FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   642 0000213F EB9D                <1>     jmp short .mainLoop2
   643                              <1> .bufOflw:
   644                              <1> ;Buffer overflow
   645 00002141 B007                <1>     mov al, BEL ;Sound the bell
   646 00002143 E8E7FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   647 00002148 EB94                <1>     jmp short .mainLoop2
   648                              <1> .break:
   649                              <1> ;Break, Place a "\", and do a CRLF
   650 0000214A B05C                <1>     mov al, "\"
   651 0000214C E8DEFAFFFF          <1>     call charOut_B.in
   652 00002151 5E                  <1>     pop rsi ;Realign stack
   653                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   654 00002152 E89CFEFFFF          <1>     call printCRLF
   655                              <1>     ;Align to next tabstop
   656 00002157 E85AFBFFFF          <1>     call charOut_B.tab
   657 0000215C E959FFFFFF          <1>     jmp .breakEP
   658                              <1> .carriageReturn:
   659 00002161 AA                  <1>     stosb
   660 00002162 E8C8FAFFFF          <1>     call charOut_B.in
   661 00002167 5F                  <1>     pop rdi ;User buffer address was pushed 
   662 00002168 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   663 0000216B FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   664                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   665 0000216D 488D35(30C20300)    <1>     lea rsi, vConBuffer
   666 00002174 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   667 00002177 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   668                              <1>     return
    18                              <2> %%_ret:
    19 00002179 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   669                              <1> .lineFeed:
   670 0000217A E874FEFFFF          <1>     call printCRLF
   671 0000217F E95AFFFFFF          <1>     jmp .mainLoop2
   672                              <1> .delete:
   673 00002184 E805000000          <1>     call .removeChar
   674 00002189 E950FFFFFF          <1>     jmp .mainLoop2
   675                              <1> .removeChar:
   676 0000218E 84F6                <1>     test dh, dh ;Is char count 0?
   677 00002190 741C                <1>     jz .normalChar   ;If so, skip going back!
   678 00002192 E868000000          <1>     call .vConErase
   679 00002197 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   680 00002199 3C20                <1>     cmp al, SPC
   681 0000219B 7311                <1>     jae .normalChar
   682 0000219D 3C09                <1>     cmp al, TAB
   683 0000219F 7420                <1>     je .eraTab
   684 000021A1 3C15                <1>     cmp al, NAK
   685 000021A3 7409                <1>     je .normalChar
   686 000021A5 3C14                <1>     cmp al, DC4
   687 000021A7 7405                <1>     je .normalChar
   688 000021A9 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   689                              <1> .normalChar:
   690 000021AE 803D(5DC60300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   691                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000021B5 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   692 000021B7 84FF                <1>     test bh, bh ;Beginning of user buffer?
   693                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000021B9 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   694 000021BB 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   695 000021BE FECF                <1>     dec bh
   696                              <1>     return
    18                              <2> %%_ret:
    19 000021C0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   697                              <1> .eraTab:
   698                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   699                              <1> ; up to a tab stop worth of space chars printed
   700 000021C1 57                  <1>     push rdi
   701 000021C2 48FFCF              <1>     dec rdi
   702 000021C5 FD                  <1>     std ;Go backwards
   703 000021C6 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   704 000021C9 B020                <1>     mov al, SPC
   705 000021CB 53                  <1>     push rbx
   706 000021CC BB07000000          <1>     mov ebx, 7
   707 000021D1 67E30D              <1>     jecxz .onTabstop
   708                              <1> .scanString:
   709 000021D4 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   710 000021D5 7608                <1>     jbe .notChar    ;No, skip handling
   711 000021D7 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   712 000021DB 740A                <1>     je .tabChar
   713 000021DD FECB                <1>     dec bl
   714                              <1> .notChar:
   715 000021DF E2F3                <1>     loop .scanString
   716                              <1> .onTabstop:
   717 000021E1 2A1D(2FC20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   718                              <1> .tabChar:
   719 000021E7 28F3                <1>     sub bl, dh  ;Same on tabstop
   720 000021E9 00D9                <1>     add cl, bl
   721 000021EB 80E107              <1>     and cl, 7
   722 000021EE 5B                  <1>     pop rbx
   723 000021EF 5F                  <1>     pop rdi
   724 000021F0 FC                  <1>     cld
   725 000021F1 74BB                <1>     jz .normalChar
   726                              <1>     ;Now erase all the spaces placed on the vCon
   727                              <1> .vConDelTab:
   728 000021F3 E80C000000          <1>     call .vConEraseNoDec
   729 000021F8 E2F9                <1>     loop .vConDelTab
   730 000021FA E9AFFFFFFF          <1>     jmp .normalChar
   731                              <1> .vConErase:
   732                              <1> ;Erase the char on the vCon
   733                              <1> ;Return through the output function
   734 000021FF 48FFCF              <1>     dec rdi ;Go back a space in the 
   735 00002202 FECE                <1>     dec dh  ;Decrement char count in the buffer
   736                              <1> .vConEraseNoDec:
   737 00002204 B008                <1>     mov al, BSP ;Move cursor back
   738 00002206 E824FAFFFF          <1>     call charOut_B.in
   739 0000220B B020                <1>     mov al, SPC ;Replace with a space
   740 0000220D E81DFAFFFF          <1>     call charOut_B.in
   741 00002212 B008                <1>     mov al, BSP ;Move cursor back again
   742 00002214 E916FAFFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   743                              <1> .escape:
   744                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   745                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   746                              <1> ; including the function keys.
   747 00002219 FF253ADEFFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   748                              <1> .f2:
   749 0000221F E846000000          <1>     call .fCommon2
   750 00002224 EB0C                <1>     jmp short .fCommon
   751                              <1> .f3:
   752 00002226 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   753 00002229 28F9                <1>     sub cl, bh  ;Sub our current position
   754 0000222B EB05                <1>     jmp short .fCommon
   755                              <1> .f1:
   756 0000222D B901000000          <1>     mov ecx, 1  ;Get one char
   757                              <1> .fCommon:
   758 00002232 C605(5DC60300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   759 00002239 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   760 0000223B 0F849DFEFFFF        <1>     je .mainLoop2
   761 00002241 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   762 00002243 0F8495FEFFFF        <1>     je .mainLoop2
   763                              <1>     ;Else, copy byte by byte, and retain char in al
   764 00002249 AC                  <1>     lodsb
   765 0000224A AA                  <1>     stosb
   766 0000224B E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   767 00002250 FEC7                <1>     inc bh
   768 00002252 FEC6                <1>     inc dh
   769 00002254 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   770 00002256 E983FEFFFF          <1>     jmp .mainLoop2
   771                              <1> .f4:
   772 0000225B E80A000000          <1>     call .fCommon2
   773 00002260 4801CE              <1>     add rsi, rcx
   774 00002263 00CF                <1>     add bh, cl
   775 00002265 E974FEFFFF          <1>     jmp .mainLoop2
   776                              <1> .fCommon2:
   777 0000226A E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   778 0000226F 3A05ECDDFFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   779 00002275 750B                <1>     jne .fnotEscape
   780                              <1>     ;Get another char if they typed escape and force it in the buffer
   781                              <1>     ; Do not return to caller
   782 00002277 E80FFBFFFF          <1>     call charIn_B
   783                              <1> .fforceExit:
   784 0000227C 59                  <1>     pop rcx ;Get original return address from stack
   785 0000227D E95CFEFFFF          <1>     jmp .mainLoop2
   786                              <1> .fnotEscape:
   787 00002282 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   788 00002285 28F9                <1>     sub cl, bh
   789 00002287 74F3                <1>     jz .fforceExit
   790 00002289 FFC9                <1>     dec ecx
   791 0000228B 74EF                <1>     jz .fforceExit
   792 0000228D 57                  <1>     push rdi
   793 0000228E 4889F7              <1>     mov rdi, rsi
   794 00002291 48FFC7              <1>     inc rdi
   795 00002294 F2AE                <1>     repne scasb ;Search for the char to start printing from
   796 00002296 5F                  <1>     pop rdi
   797 00002297 75E3                <1>     jne .fforceExit ;If char not found, return
   798 00002299 F6D1                <1>     not cl
   799 0000229B 00D9                <1>     add cl, bl
   800 0000229D 28F9                <1>     sub cl, bh
   801                              <1>     return
    18                              <2> %%_ret:
    19 0000229F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   802                              <1> .f5:
   803 000022A0 B040                <1>     mov al, "@"
   804 000022A2 E888F9FFFF          <1>     call charOut_B.in   ;Print the char
   805 000022A7 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   806 000022A8 57                  <1>     push rdi
   807 000022A9 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   808 000022AE 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   809 000022AF 88F3                <1>     mov bl, dh
   810 000022B1 E99CFEFFFF          <1>     jmp .breakAlt
   811                              <1> .f6:
   812                              <1> ;If the user wants to insert a EOF, they can use F6
   813 000022B6 B01A                <1>     mov al, EOF
   814 000022B8 E964FEFFFF          <1>     jmp .checkIfCanInsert
   815                              <1> .f7:
   816                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   817 000022BD 8A059EDDFFFF        <1>     mov al, byte [extESC]
   818 000022C3 E959FEFFFF          <1>     jmp .checkIfCanInsert
   819                              <1> .toggleIns:
   820 000022C8 F615(5DC60300)      <1>     not byte [vConInsert]   ;Toggle
   821                              <1>     return
    18                              <2> %%_ret:
    19 000022CE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   822                              <1> .eDel:
   823 000022CF 38DF                <1>     cmp bh, bl
   824 000022D1 0F8407FEFFFF        <1>     je .mainLoop2
   825 000022D7 FEC7                <1>     inc bh
   826 000022D9 48FFC6              <1>     inc rsi
   827 000022DC E9FDFDFFFF          <1>     jmp .mainLoop2
   828                              <1> 
   829                              <1> editKeys:
   830                              <1> ;Our Default Extended keys handler
   831 000022E1 E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   832 000022E6 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   833 000022EB 57                  <1>     push rdi    ;Preserve rdi
   834 000022EC 488D3D70DDFFFF      <1>     lea rdi, extKeyTbl
   835 000022F3 57                  <1>     push rdi
   836                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   837                              <1>     ; offset of function from extKeyTbl
   838                              <1> .lp:
   839 000022F4 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   840 000022F5 7411                <1>     je .charFound
   841 000022F7 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   842 000022F9 0F84DFFDFFFF        <1>     jz buffCharInput_BE.mainLoop2
   843 000022FF 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   844 00002306 EBEC                <1>     jmp short .lp
   845                              <1> .charFound:
   846 00002308 59                  <1>     pop rcx ;Pop back the effective address of the table
   847 00002309 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   848 0000230D 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   849 00002310 5F                  <1>     pop rdi
   850 00002311 FFE1                <1>     jmp rcx
    27                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    28                              <1> ;Major kernel date time functions and subroutines
    29                              <1> 
    30                              <1> getDate:           ;ah = 2Ah
    31 00002313 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
    32 00002318 E8D8190000          <1>     call getUserRegs
    33 0000231D 668B15(EFC30300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
    34                              <1> ;    mov dh, byte [monthOfYear]
    35 00002324 0FB60D(F1C30300)    <1>     movzx ecx, byte [years]
    36 0000232B 8A05(F4C30300)      <1>     mov al, byte [dayOfWeek]
    37 00002331 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    38 00002335 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    39                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 00002339 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    40                              <1> setDate:           ;ah = 2Bh
    41                              <1> ;	CX = year (1980-2099)
    42                              <1> ;   DH = month (1-12)
    43                              <1> ;	DL = day (1-31)
    44 0000233A E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    45                              <1>     return
    18                              <2> %%_ret:
    19 0000233F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> getTime:           ;ah = 2Ch
    47 00002340 E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    48 00002345 E8AB190000          <1>     call getUserRegs
    49 0000234A 668B0D(7AC40300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.hours]
    50 00002351 668B15(7BC40300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    51 00002358 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    52 0000235C 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    53                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 00002360 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> setTime:           ;ah = 2Dh
    55                              <1> ;   CH = hour (0-23)
    56                              <1> ;	CL = minutes (0-59)
    57                              <1> ;	DH = seconds (0-59)
    58                              <1> ;	DL = hundredths (0-99)
    59 00002361 80FD17              <1>     cmp ch, 23
    60 00002364 7749                <1>     ja .exitBad
    61 00002366 80F93B              <1>     cmp cl, 59
    62 00002369 7744                <1>     ja .exitBad
    63 0000236B 80FE3B              <1>     cmp dh, 59
    64 0000236E 773F                <1>     ja .exitBad
    65 00002370 80FA63              <1>     cmp dl, 99
    66 00002373 773A                <1>     ja .exitBad
    67                              <1> ;Now we read date (updating internal count if necessary)
    68 00002375 E817010000          <1>     call readDateTimeRecord
    69 0000237A 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    70 00002381 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    71 00002388 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    72 0000238B 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    73 0000238F 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    74 00002393 B906000000          <1>     mov ecx, 6
    75 00002398 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    76 0000239B E8F5170000          <1>     call primReqWriteSetup   ;rbx now points to request header
    77 000023A0 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    78 000023A7 E873150000          <1>     call goDriver
    79 000023AC 30C0                <1>     xor al, al
    80                              <1>     return
    18                              <2> %%_ret:
    19 000023AE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    81                              <1> .exitBad:
    82 000023AF B0FF                <1>     mov al, -1
    83                              <1>     return
    18                              <2> %%_ret:
    19 000023B1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    84                              <1> ;------------------------
    85                              <1> ;   Utility functions   :
    86                              <1> ;------------------------
    87                              <1> writeDate:
    88 000023B2 6681F97800          <1>     cmp cx, 120
    89 000023B7 0F83D1000000        <1>     jae .exitBad
    90 000023BD 80FE0C              <1>     cmp dh, 12
    91 000023C0 0F87C8000000        <1>     ja .exitBad
    92 000023C6 80FA1F              <1>     cmp dl, 31
    93 000023C9 0F87BF000000        <1>     ja .exitBad
    94 000023CF 668915(EFC30300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    95                              <1>     ;mov byte [monthOfYear], dh
    96 000023D6 880D(F1C30300)      <1>     mov byte [years], cl    ;Save the years count
    97 000023DC E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    98 000023E1 88CD                <1>     mov ch, cl ;Get years count in ch
    99 000023E3 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
   100 000023E6 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
   101 000023E9 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
   102 000023EC BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
   103 000023F1 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
   104                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
   105 000023F3 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
   106 000023F6 67E316              <1>     jecxz .addDay    ;Skip adding years
   107 000023F9 056E010000          <1>     add eax, 366    ;First add for a leap year
   108                              <1> .addYears:
   109 000023FE FFC9                <1>     dec ecx
   110 00002400 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
   111 00002403 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   112 00002408 EBF4                <1>     jmp short .addYears
   113                              <1> .addLeap:
   114 0000240A 056E010000          <1>     add eax, 366    ;Add the days in the leap year
   115                              <1> .addDay:
   116 0000240F 89C2                <1>     mov edx, eax    ;Save this number in edx
   117                              <1>     ;Now to add day offset
   118 00002411 0FB60D(F0C30300)    <1>     movzx ecx, byte [monthOfYear]
   119 00002418 488D3565DCFFFF      <1>     lea rsi, monthsTbl
   120                              <1> .addDaysInMonth:
   121 0000241F FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   122 00002421 67E308              <1>     jecxz .addMonthOffset
   123 00002424 AC                  <1>     lodsb   ;Get the number of days in the month in al
   124 00002425 0FB6C0              <1>     movzx eax, al
   125 00002428 01C2                <1>     add edx, eax
   126 0000242A EBF3                <1>     jmp short .addDaysInMonth
   127                              <1> .addMonthOffset:
   128 0000242C 0FB60D(EFC30300)    <1>     movzx ecx, byte [dayOfMonth]
   129 00002433 FFC9                <1>     dec ecx
   130 00002435 01CA                <1>     add edx, ecx    ;Add month offset
   131                              <1>     ;edx has the number of days since 01/01/1980
   132 00002437 668915(F2C30300)    <1>     mov word [daysOffset], dx   ;Store!
   133                              <1> ;Now read and then write CLOCKrecrd
   134 0000243E 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   135 00002445 B906000000          <1>     mov ecx, 6
   136 0000244A 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   137 0000244D E84E170000          <1>     call primReqReadSetup   ;rbx now points to request header
   138 00002452 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   139 00002459 E8C1140000          <1>     call goDriver
   140                              <1> ;Now we change daycount and write it back
   141 0000245E 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   142 00002465 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   143 0000246C 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   144 0000246F B906000000          <1>     mov ecx, 6
   145 00002474 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   146 00002477 E819170000          <1>     call primReqWriteSetup   ;rbx now points to request header
   147 0000247C 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   148 00002483 E897140000          <1>     call goDriver
   149 00002488 E8AE000000          <1>     call setDayofWeek
   150                              <1>     return
    18                              <2> %%_ret:
    19 0000248D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   151                              <1> .exitBad:
   152 0000248E B0FF                <1>     mov al, -1
   153                              <1>     return
    18                              <2> %%_ret:
    19 00002490 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   154                              <1> 
   155                              <1> readDateTimeRecord:
   156                              <1> ;Will read the clock using the primary request header
   157                              <1> ;Preserves all regs except eax and flags
   158 00002491 53                  <1>     push rbx
   159 00002492 51                  <1>     push rcx
   160 00002493 52                  <1>     push rdx
   161 00002494 56                  <1>     push rsi
   162 00002495 55                  <1>     push rbp
   163                              <1> 
   164 00002496 66C705(14D90300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   164 0000249E 00                  <1>
   165 0000249F 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   166 000024A6 B906000000          <1>     mov ecx, 6
   167 000024AB 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   168                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   169                              <1> ; rbx = Data storage buffer ptr
   170                              <1> ; ecx = Number of sectors to transfer
   171                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   172 000024AE E8ED160000          <1>     call primReqReadSetup   ;rbx now points to request header
   173 000024B3 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   174 000024BA E860140000          <1>     call goDriver
   175 000024BF 0FB705(77C40300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   176                              <1> ;Here we have:  ax = Days since 1/1/1980
   177                              <1> ;Updates the internal date fields
   178                              <1> ;Internal time fields are in the clock record
   179                              <1> ;So now we check if the number of days since 1980 are the same.
   180                              <1> ;If so, we can skip updating.
   181 000024C6 663B05(F2C30300)    <1>     cmp ax, word [daysOffset]
   182 000024CD 7466                <1>     je .exit    ;Return if equal
   183 000024CF 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   184 000024D4 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   185 000024D6 668905(F2C30300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   186                              <1>     ;Now want to update years, month and day fields
   187                              <1>     ;ax has the number of days since 01/01/1980
   188                              <1>     ;Get days in a 4 year period
   189 000024DD BBB5050000          <1>     mov ebx, 365*4 + 1
   190 000024E2 31D2                <1>     xor edx, edx
   191 000024E4 89D1                <1>     mov ecx, edx  ;Zero ecx
   192 000024E6 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   193                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   194                              <1>     ;edx has offset into current 4 year bunch
   195 000024E8 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   196 000024ED 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   197 000024EF 7210                <1>     jb .foundBunch
   198 000024F1 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   199 000024F3 FFC1                <1>     inc ecx
   200 000024F5 FFCB                <1>     dec ebx ;Number of days in a normal year
   201                              <1> .findBunch:
   202 000024F7 39DA                <1>     cmp edx, ebx
   203 000024F9 7206                <1>     jb .foundBunch
   204 000024FB 29DA                <1>     sub edx, ebx
   205 000024FD FFC1                <1>     inc ecx
   206 000024FF EBF6                <1>     jmp short .findBunch
   207                              <1> .foundBunch:
   208                              <1>     ;If ecx = 0, february has 29 days!
   209                              <1>     ;eax has number of four year bunches elapsed since 1980
   210 00002501 C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   211 00002504 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   212                              <1>     ;ecx now has the number of years since 1980
   213 00002506 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   214                              <1> ;edx has number of days into the year we are in
   215                              <1> ;eax has number of days in Feb for this year
   216 0000250B 488D3572DBFFFF      <1>     lea rsi, monthsTbl
   217 00002512 31C9                <1>     xor ecx, ecx    ;Use as month counter
   218                              <1> .monthSearch:
   219 00002514 FFC1                <1>     inc ecx ;Start from 1
   220 00002516 AC                  <1>     lodsb   ;Get value in al and inc rsi
   221 00002517 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   222 0000251A 39C2                <1>     cmp edx, eax
   223 0000251C 7204                <1>     jb .monthFound
   224 0000251E 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   225 00002520 EBF2                <1>     jmp short .monthSearch
   226                              <1> .monthFound:
   227                              <1>     ;cl has the month (01h-0Ch)
   228                              <1>     ;dl has the day of the month - 1
   229 00002522 FFC2                <1>     inc edx
   230 00002524 880D(F0C30300)      <1>     mov byte [monthOfYear], cl
   231 0000252A 8815(EFC30300)      <1>     mov byte [dayOfMonth], dl
   232 00002530 E806000000          <1>     call setDayofWeek
   233                              <1> .exit:
   234 00002535 5D                  <1>     pop rbp
   235 00002536 5E                  <1>     pop rsi
   236 00002537 5A                  <1>     pop rdx
   237 00002538 59                  <1>     pop rcx
   238 00002539 5B                  <1>     pop rbx
   239                              <1>     return  ;Return with ZF is date set, or same day
    18                              <2> %%_ret:
    19 0000253A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   240                              <1> 
   241                              <1> setDayofWeek:
   242                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   243 0000253B 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   244 00002542 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   245                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   246 00002547 31D2                <1>     xor edx, edx
   247 00002549 B907000000          <1>     mov ecx, 7   
   248 0000254E F7F1                <1>     div ecx  ;Get remainder in dl
   249 00002550 8815(F4C30300)      <1>     mov byte [dayOfWeek], dl
   250                              <1> ;Set ZF to indicate all ok
   251 00002556 31C0                <1>     xor eax, eax
   252                              <1>     return
    18                              <2> %%_ret:
    19 00002558 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   253                              <1> 
   254                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   255                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   256                              <1> ;Input: cl = Year - 1980
   257                              <1> ;Output: al = Number of days in February
   258 00002559 880D(F1C30300)      <1>     mov byte [years], cl    ;Save this figure
   259 0000255F F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   260 00002562 51                  <1>     push rcx
   261 00002563 57                  <1>     push rdi
   262 00002564 B81C000000          <1>     mov eax, 28  ;Usual days in february
   263 00002569 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   264 0000256E 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   265 00002571 488D3D0DDBFFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   266 00002578 AA                  <1>     stosb   ;Store the word in rdi
   267 00002579 5F                  <1>     pop rdi
   268 0000257A 59                  <1>     pop rcx
   269                              <1>     return
    18                              <2> %%_ret:
    19 0000257B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   270                              <1> 
   271                              <1> getDirDTwords:
   272                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   273                              <1> ; High word of eax = Date
   274                              <1> ; Low word of eax = Time
   275                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   276                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   277                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   278                              <1> 
   279                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   280                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   281                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   282                              <1> ;Preserves all registers except eax
   283 0000257C 53                  <1>     push rbx
   284 0000257D 0FB61D(7CC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   285 00002584 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   286 00002586 89D8                <1>     mov eax, ebx
   287 00002588 0FB61D(79C40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   288 0000258F C1E305              <1>     shl ebx, 5
   289 00002592 09D8                <1>     or eax, ebx
   290 00002594 0FB61D(7AC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   291 0000259B C1E30B              <1>     shl ebx, 11
   292 0000259E 09D8                <1>     or eax, ebx
   293 000025A0 0FB61D(EFC30300)    <1>     movzx ebx, byte [dayOfMonth]
   294 000025A7 C1E310              <1>     shl ebx, 16
   295 000025AA 09D8                <1>     or eax, ebx
   296 000025AC 0FB61D(F0C30300)    <1>     movzx ebx, byte [monthOfYear]
   297 000025B3 C1E315              <1>     shl ebx, 21
   298 000025B6 09D8                <1>     or eax, ebx
   299 000025B8 0FB61D(F1C30300)    <1>     movzx ebx, byte [years]
   300 000025BF C1E319              <1>     shl ebx, 25
   301 000025C2 09D8                <1>     or eax, ebx
   302 000025C4 5B                  <1>     pop rbx
   303                              <1>     return
    18                              <2> %%_ret:
    19 000025C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   304                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   305                              <1> ;Returns edx = time
   306                              <1> ;        eax = date
   307                              <1> ; Formally ax and dx but we clear the upper words
   308 000025C6 E8C6FEFFFF          <1>     call readDateTimeRecord
   309 000025CB E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   310 000025D0 31D2                <1>     xor edx, edx
   311 000025D2 6689C2              <1>     mov dx, ax  ;Save time
   312 000025D5 C1E810              <1>     shr eax, 10h    ;Get date into rax
   313                              <1>     return
    18                              <2> %%_ret:
    19 000025D8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    28                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    29                              <1> openFileFCB:       ;ah = 0Fh
    30                              <1> closeFileFCB:      ;ah = 10h
    31                              <1> findFirstFileFCB:  ;ah = 11h
    32                              <1> findNextFileFCB:   ;ah = 12h
    33                              <1> deleteFileFCB:     ;ah = 13h
    34                              <1> sequentialReadFCB: ;ah = 14h
    35                              <1> sequentialWriteFCB:;ah = 15h
    36                              <1> createFileFCB:     ;ah = 16h
    37                              <1> renameFileFCB:     ;ah = 17h
    38 000025D9 C3                  <1>     ret
    39                              <1> setDTA:            ;ah = 1Ah
    40                              <1> ;Called with:
    41                              <1> ;   rdx = Pointer to the new default DTA
    42 000025DA 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
    43 000025E1 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    44 000025E5 488915(79C30300)    <1>     mov qword [currentDTA], rdx
    45 000025EC C3                  <1>     ret
    46                              <1> randomReadFCB:     ;ah = 21h
    47                              <1> randomWriteFCB:    ;ah = 22h
    48                              <1> getFileSizeFCB:    ;ah = 23h
    49                              <1> setRelRecordFCB:   ;ah = 24h
    50                              <1> randBlockReadFCB:  ;ah = 27h
    51                              <1> randBlockWriteFCB: ;ah = 28h
    52                              <1> parseFilenameFCB:  ;ah = 29h
    53 000025ED C3                  <1>     ret
    54                              <1> getDTA:            ;ah = 2Fh
    55 000025EE 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
    56 000025F5 488B1D(79C30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    57 000025FC 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    58 00002600 C3                  <1>     ret
    29                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    30                              <1> ;-----------------------------------:
    31                              <1> ;    File Handle Kernel routines    :
    32                              <1> ;-----------------------------------:
    33                              <1> 
    34                              <1> createFileHdl:     ;ah = 3Ch, handle function
    35                              <1> ;Input: cx = File attributes (same as search attributes for find first)
    36                              <1> ;       rdx = Ptr to ASCIZ filename to create
    37                              <1> ;Output: CF=CY => ax = File handle
    38                              <1> ;        CF=NC => al = Error code
    39 00002601 51                  <1>     push rcx    ;Save file attributes on stack
    40 00002602 488D0D64030000      <1>     lea rcx, createMain
    41 00002609 C605(56C60300)06    <1>     mov byte [searchAttr], dirHidden | dirSystem ;Inclusive w/o directory
    42 00002610 EB20                <1>     jmp short openFileHdl.openCommon
    43                              <1> openFileHdl:       ;ah = 3Dh, handle function
    44                              <1> ;Input: al = Open mode, to open file with
    45                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    46                              <1> ;If called from 5D00h, cl = File attributes too
    47                              <1> ;Output: CF=CY => ax = File handle
    48                              <1> ;        CF=NC => al = Error code
    49 00002612 BB16000000          <1>     mov ebx, dirInclusive
    50 00002617 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
    51 0000261E 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    52 00002621 880D(56C60300)      <1>     mov byte [searchAttr], cl
    53 00002627 48B9-               <1>     mov rcx, openMain  
    53 00002629 [6C29000000000000]  <1>
    54 00002631 50                  <1>     push rax    ;Save open mode on stack
    55                              <1> .openCommon:
    56 00002632 E8AB1A0000          <1>     call dosCrit1Enter
    57 00002637 E85F080000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    58 0000263C E8AB1A0000          <1>     call dosCrit1Exit
    59 00002641 0F82DA1A0000        <1>     jc extErrExit
    60                              <1>     ;Now save variables
    61 00002647 E885070000          <1>     call setCurrentSFT
    62 0000264C 66891D(8CC60300)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    63 00002653 E8F5080000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    64 00002658 0F82C31A0000        <1>     jc extErrExit
    65 0000265E 66891D(8EC60300)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    66 00002665 48893D(7CC60300)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    67 0000266C 0FB71D(8CC60300)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    68 00002673 881F                <1>     mov byte [rdi], bl  ;And open the file
    69                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    70                              <1>     ;We will be searching on disk so swap to internal find first block
    71 00002675 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    72 00002678 FF35(79C30300)      <1>     push qword [currentDTA]
    73 0000267E 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
    74 00002685 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
    75 0000268C 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    76 00002693 51                  <1>     push rcx    ;Save the procedure to call on stack
    77 00002694 E8F9EBFFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    78 00002699 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    79 0000269A 8F05(79C30300)      <1>     pop qword [currentDTA]
    80 000026A0 488D05C5020000      <1>     lea rax, openMain   ;Get EA for open procedure
    81 000026A7 488B35(84C60300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    82 000026AE 7318                <1>     jnc .proceedCall
    83                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good.
    84                              <1> ;If CF=CY => Path doesnt all exist:
    85                              <1> ;      If parDirExists = -1 => For Open, Bad.  For Create, Good. 
    86                              <1> ;Now we check if we are creating or opening.
    87 000026B0 4839C3              <1>     cmp rbx, rax
    88 000026B3 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    89 000026B5 F605(5FC60300)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    90 000026BC 750A                <1>     jnz .proceedCall    ;If so, proceed.
    91                              <1> .badPathspec:
    92 000026BE B802000000          <1>     mov eax, errFnf
    93 000026C3 E941000000          <1>     jmp .exitBad    ;Need to deallocate the SFT before returning
    94                              <1> .proceedCall:
    95                              <1> ;If the pathspec exists, recall that for create, we truncate.
    96 000026C8 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    97 000026CA 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    98 000026CD 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    99 000026CE 750B                <1>     jne .callProc   ;Jump if we are creating
   100                              <1>     ;al means openmode here
   101 000026D0 A880                <1>     test al, 80h    ;No Inherit bit set?
   102 000026D2 7407                <1>     jz .callProc
   103 000026D4 247F                <1>     and al, 7Fh     ;Clear this bit
   104 000026D6 B900100000          <1>     mov ecx, devNoInherit
   105                              <1> .callProc:
   106 000026DB 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
   107 000026E1 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
   108 000026E7 51                  <1>     push rcx    ;Save the device word 
   109 000026E8 FFD3                <1>     call rbx
   110 000026EA 59                  <1>     pop rcx
   111 000026EB 488B35(84C60300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
   112 000026F2 7215                <1>     jc .exitBad
   113 000026F4 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
   114 000026F9 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   115 000026FD 0FB705(8EC60300)    <1>     movzx eax, word [currentHdl]
   116                              <1>     ;SHARE HOOK, DOS DS:[008Ch]
   117 00002704 E90A1A0000          <1>     jmp extGoodExit ;Save ax and return OK
   118                              <1> .exitBad:
   119 00002709 5B                  <1>     pop rbx ;Pop the word from the stack
   120 0000270A E9121A0000          <1>     jmp extErrExit 
   121                              <1> 
   122                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   123                              <1> ;Input: bx = file handle to close
   124 0000270F E84F080000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   125 00002714 0F82071A0000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   126 0000271A E8B2060000          <1>     call setCurrentSFT  ;Set this as the current SFT
   127                              <1>     ;Check count to see if we need to check share mode
   128 0000271F 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared
   129 00002724 7409                <1>     je .skipNetCheck
   130                              <1>     ;Now check sharing mode
   131 00002726 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   132 0000272A 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   133 0000272C 3C70                <1>     cmp al, netFCBShare
   134 0000272E 9C                  <1>     pushfq  ;Save the result of this for after closing the file
   135                              <1> .skipNetCheck:
   136 0000272F E83C030000          <1>     call closeMain  ;Call close main!
   137 00002734 0F82E7190000        <1>     jc extErrExit   ;If an error, exit through error exit
   138 0000273A 9D                  <1>     popfq
   139 0000273B 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   140 0000273D E8ED070000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   141 00002742 C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   142                              <1> .exitOk:
   143 00002745 31C0                <1>     xor eax, eax    ;Return value
   144 00002747 E9C7190000          <1>     jmp extGoodExit
   145                              <1> 
   146                              <1> readFileHdl:       ;ah = 3Fh, handle function
   147 0000274C 488D358F030000      <1>     lea rsi, readBytes
   148                              <1> .common:
   149 00002753 E80B080000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   150 00002758 0F82C3190000        <1>     jc extErrExit   ;Error code in al and exit
   151 0000275E E86E060000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   152 00002763 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   153 00002765 FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   154 0000276B 488915(79C30300)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   155 00002772 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   156 00002774 8F05(79C30300)      <1>     pop qword [currentDTA]
   157 0000277A 0F82A1190000        <1>     jc extErrExit   ;Error code in al and exit
   158 00002780 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   159 00002782 E983190000          <1>     jmp extGoodExit2    ;and exit!
   160                              <1> 
   161                              <1> writeFileHdl:      ;ah = 40h, handle function
   162 00002787 488D350F060000      <1>     lea rsi, writeBytes
   163 0000278E E9C0FFFFFF          <1>     jmp readFileHdl.common
   164                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   165                              <1>     return 
    18                              <2> %%_ret:
    19 00002793 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   166                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   167                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   168 00002794 E8CA070000          <1>     call getSFTPtr
   169 00002799 0F8282190000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   170 0000279F 3C03                <1>     cmp al, 3
   171 000027A1 720A                <1>     jb .validFunction
   172 000027A3 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   173 000027A8 E974190000          <1>     jmp extErrExit
   174                              <1> .validFunction:
   175 000027AD 3C01                <1>     cmp al, 1
   176 000027AF 7713                <1>     ja .seekend
   177 000027B1 7203                <1>     jb .seekset
   178                              <1> ;Here we are at seekcur, seek from current (signed)
   179 000027B3 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   180                              <1> .seekset:
   181                              <1> ;Seek from the start (unsigned)
   182 000027B6 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   183 000027B9 E837150000          <1>     call getUserRegs    ;Get user regs in rsi
   184 000027BE 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   185                              <1> .seekExit:
   186 000027C1 30C0                <1>     xor al, al  ;Return OK!
   187                              <1>     return 
    18                              <2> %%_ret:
    19 000027C3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   188                              <1> .seekend:
   189                              <1> ;Here we are at seekend, seek from end (signed)
   190 000027C4 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   191 000027CA 7505                <1>     jnz .netCheck
   192                              <1> .proceedDisk:
   193 000027CC 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   194 000027CF EBE5                <1>     jmp short .seekset
   195                              <1> .netCheck:
   196 000027D1 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   197 000027D7 75F3                <1>     jnz .proceedDisk
   198 000027D9 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   199                              <1>     ;Check it's share mode
   200 000027DD 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   201 000027E2 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   202 000027E7 7407                <1>     je .netSeek
   203 000027E9 3D30000000          <1>     cmp eax, denyReadShare
   204 000027EE 75DC                <1>     jne .proceedDisk
   205                              <1> .netSeek:
   206 000027F0 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   207 000027F5 CD4F                <1>     int 4Fh
   208 000027F7 73C8                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   209 000027F9 E923190000          <1>     jmp extErrExit
   210                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   211                              <1> ioctrl:            ;ah = 44h, handle function
   212                              <1> duplicateHandle:   ;ah = 45h, handle function
   213                              <1> ;Input: bx = Handle to duplicate
   214                              <1> ;Output: If ok then ax = New handle
   215 000027FE E8C1070000          <1>     call findFreeJFTSpace    ;First find a free space in the JFT
   216 00002803 0F8218190000        <1>     jc extErrExit   ;Exit if no space
   217                              <1>     ;rsi points to the free space
   218                              <1> .duplicateCommon:
   219 00002809 E821070000          <1>     call getJFTPtr  ;Get a pointer to the JFT entry in rdi for bx
   220 0000280E 4887F7              <1>     xchg rsi, rdi
   221 00002811 AC                  <1>     lodsb   ;Move over the SFT ndx from the old to the new position
   222 00002812 AA                  <1>     stosb
   223 00002813 48FFCE              <1>     dec rsi
   224 00002816 48FFCF              <1>     dec rdi
   225                              <1>     ;rdi now points to new position
   226                              <1>     ;rsi points to old position
   227                              <1>     ;al has SFT ndx
   228 00002819 4889FE              <1>     mov rsi, rdi    ;Move rsi to point to the new position jft position
   229 0000281C 0FB6D8              <1>     movzx ebx, al   ;Move SFTndx into ebx
   230 0000281F E8D6060000          <1>     call getSFTPtrfromSFTNdx    ;Get the pointer to the SFT in rdi
   231 00002824 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   232                              <1>     ;Now we must return in ax the entry in the JFT 
   233 00002827 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
   234 0000282E 488D7F2A            <1>     lea rdi, qword [rdi + psp.jobFileTbl]   ;Point to head of table
   235 00002832 4829FE              <1>     sub rsi, rdi    ;Get the difference of the two in si
   236 00002835 89F0                <1>     mov eax, esi    ;Get the difference as the return code
   237 00002837 E9D7180000          <1>     jmp extGoodExit
   238                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   239                              <1> ;Input: bx = Handle to duplicate
   240                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   241                              <1>     ;First we close cx
   242 0000283C 87D9                <1>     xchg ebx, ecx ;Swap cx and bx
   243 0000283E 53                  <1>     push rbx
   244 0000283F 51                  <1>     push rcx
   245 00002840 E8CAFEFFFF          <1>     call closeFileHdl   ;Close handle 
   246 00002845 59                  <1>     pop rcx
   247 00002846 5B                  <1>     pop rbx
   248                              <1>     retc    ;The error code is set by errExtExit and CF is set on callerFrame
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00002847 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00002849 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   249                              <1>     ;Else, close was ok, lets duplicate now
   250 0000284A E8E0060000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   251 0000284F 0F82CC180000        <1>     jc extErrExit   ;Return bad with error code in al
   252 00002855 87D9                <1>     xchg ebx, ecx   ;Now get source to duplicate in ebx
   253 00002857 4889FE              <1>     mov rsi, rdi    ;Put the free space ptr in rsi
   254 0000285A EBAD                <1>     jmp short duplicateHandle.duplicateCommon
   255                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   256                              <1> ;Input: cx = Search Attributes, cl only used
   257                              <1> ;       rdx = Ptr to path to file to look for
   258                              <1> ;       al = Document as needing to be 0 for now
   259                              <1> ;Return:
   260                              <1> ;Data in the DTA or error through AX with CF=CY
   261                              <1> ;CAVEATS!
   262                              <1> ;DTA:attribFnd = 40h => Char dev
   263                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   264 0000285C 880D(56C60300)      <1>     mov byte [searchAttr], cl
   265 00002862 4889D6              <1>     mov rsi, rdx
   266 00002865 E83B160000          <1>     call checkPathspecOK    ;This uses rsi and preserves it
   267 0000286A 730A                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   268                              <1>     ;Dont allow paths which end in a malformed char for ASCIIZ
   269                              <1>     ;ONLY ALLOW TRUENAME TO RESOLVE SUCH PATHS 
   270                              <1> .badPath:
   271 0000286C B803000000          <1>     mov eax, errPnf
   272 00002871 E9AB180000          <1>     jmp extErrExit
   273                              <1> .pathspecOk:
   274 00002876 FF35(79C30300)      <1>     push qword [currentDTA]
   275 0000287C 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   276 00002883 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
   277 0000288A 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   278 00002891 E8FCE9FFFF          <1>     call getFilePath
   279                              <1> .findfileExit:
   280 00002896 8F05(79C30300)      <1>     pop qword [currentDTA]
   281 0000289C 0F827F180000        <1>     jc extErrExit
   282 000028A2 488D35(90C50300)    <1>     lea rsi, dosffblock ;Copy the block to the user's DTA
   283 000028A9 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
   284 000028B0 B92B000000          <1>     mov ecx, ffBlock_size
   285 000028B5 F3A4                <1>     rep movsb   ;Copy the whole block. 
   286                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   287 000028B7 31C0                <1>     xor eax, eax    ;Return value
   288 000028B9 E955180000          <1>     jmp extGoodExit ;Exit well
   289                              <1> 
   290                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   291                              <1> ;Input: DTA has the find first block from the previous search
   292 000028BE 488B35(79C30300)    <1>     mov rsi, qword [currentDTA]
   293 000028C5 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   294 000028CC B92B000000          <1>     mov ecx, ffBlock_size
   295 000028D1 F3A4                <1>     rep movsb
   296 000028D3 FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current DTA address
   297 000028D9 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   298 000028E0 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
   299 000028E7 E8C5E5FFFF          <1>     call findNextMain
   300 000028EC EBA8                <1>     jmp short findFirstFileHdl.findfileExit
   301                              <1> renameFile:        ;ah = 56h
   302                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   303                              <1> createNewFile:     ;ah = 5Bh
   304                              <1> 
   305                              <1> lockUnlockFile:    ;ah = 5Ch
   306 000028EE E92E180000          <1>     jmp extErrExit
   307                              <1> setHandleCount:    ;ah = 67h
   308 000028F3 E929180000          <1>     jmp extErrExit
   309                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   310                              <1>     ;Input: bx = File to flush
   311 000028F8 E866060000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   312 000028FD 0F821E180000        <1>     jc extErrExit
   313 00002903 E8C9040000          <1>     call setCurrentSFT
   314                              <1>     ;Now we check if the device is a char, disk or net file
   315 00002908 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   316 0000290C 66A90080            <1>     test ax, devRedirDev
   317 00002910 7512                <1>     jnz .notNet
   318                              <1>     ;Commit file net redir call and exit
   319 00002912 B807110000          <1>     mov eax, 1107h
   320 00002917 CD4F                <1>     int 4Fh
   321 00002919 0F8202180000        <1>     jc extErrExit
   322 0000291F E93D000000          <1>     jmp .exitOk
   323                              <1> .notNet:
   324 00002924 66A98000            <1>     test ax, devCharDev
   325 00002928 7418                <1>     jz .blokDev
   326                              <1>     ;Here we simply update date/time fields in the SFT structure before exiting
   327 0000292A E862FBFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   328 0000292F 0F82EC170000        <1>     jc extErrExit  ;If we fail to get time/date, fail the request
   329                              <1>     ;Build date and time words
   330 00002935 E842FCFFFF          <1>     call getDirDTwords  ;Get date time words packed in eax
   331 0000293A 894713              <1>     mov dword [rdi + sft.wTime], eax    ;Store them at the same time
   332 0000293D E91F000000          <1>     jmp .exitOk
   333                              <1> .blokDev:
   334 00002942 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   335 00002946 E835130000          <1>     call setWorkingDPB
   336 0000294B E8E9F0FFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   337 00002950 0F82CB170000        <1>     jc extErrExit
   338 00002956 E8EDE1FFFF          <1>     call flushFile  ;Now the file gets flushed
   339 0000295B 0F82C0170000        <1>     jc extErrExit
   340                              <1> .exitOk:
   341 00002961 30C0                <1>     xor al, al
   342 00002963 E88D130000          <1>     call getUserRegs
   343 00002968 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   344                              <1>     return
    18                              <2> %%_ret:
    19 0000296B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   345                              <1> ;-----------------------------------:
   346                              <1> ;       Main File IO Routines       :
   347                              <1> ;-----------------------------------:
   348                              <1> openMain:
   349                              <1>     return
    18                              <2> %%_ret:
    19 0000296C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   350                              <1> createMain:
   351                              <1> ;Input: ax (formally al) = File attributes
   352                              <1> ;       [currentSFT] = SFT we are building
   353                              <1> ;       [workingCDS] = CDS of drive to access
   354                              <1> ;       [workingDPB] = DPB of drive to access
   355 0000296D 0FB6C0              <1>     movzx eax, al
   356 00002970 A8C0                <1>     test al, 80h | 40h   ;Invalid bits?
   357 00002972 750C                <1>     jnz .invalidAttrib
   358 00002974 A808                <1>     test al, dirVolumeID
   359 00002976 7402                <1>     jz .skipVol
   360 00002978 B008                <1>     mov al, dirVolumeID ;Make this exclusively a volume ID
   361                              <1> .skipVol:
   362 0000297A 0C20                <1>     or al, dirArchive   ;Set archive bit
   363 0000297C A810                <1>     test al, dirDirectory   ;Dir cannot be set either here
   364 0000297E 7400                <1>     jz .validAttr
   365                              <1> .invalidAttrib:
   366                              <1> .validAttr:
   367 00002980 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   368 00002987 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]
   369 0000298E 4881FEFFFFFFFF      <1>     cmp rsi, -1
   370 00002995 750A                <1>     jne .diskFile
   371 00002997 50                  <1>     push rax    ;Save the new attributes
   372 00002998 B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
   373 0000299D CD4F                <1>     int 4Fh
   374 0000299F 5B                  <1>     pop rbx
   375                              <1>     return
    18                              <2> %%_ret:
    19 000029A0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   376                              <1> .diskFile:
   377 000029A1 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
   378 000029A7 740A                <1>     jz .hardFile
   379 000029A9 50                  <1>     push rax    ;Save the new attributes
   380 000029AA B817110000          <1>     mov eax, 1117h  ;Create file with CDS
   381 000029AF CD4F                <1>     int 4Fh
   382 000029B1 5B                  <1>     pop rbx
   383                              <1>     return
    18                              <2> %%_ret:
    19 000029B2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   384                              <1> .hardFile:
   385 000029B3 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
   386 000029B9 C605(61C60300)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
   387 000029C0 C605(62C60300)E5    <1>     mov byte [delChar], 0E5h
   388 000029C7 E816170000          <1>     call dosCrit1Enter
   389 000029CC 50                  <1>     push rax    ;Save the file attributes on stack
   390 000029CD B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
   391 000029D2 E807000000          <1>     call buildSFTEntry
   392 000029D7 5B                  <1>     pop rbx
   393 000029D8 E80F170000          <1>     call dosCrit1Exit
   394                              <1>     return
    18                              <2> %%_ret:
    19 000029DD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   395                              <1> buildSFTEntry:
   396                              <1> ;Called in a critical section.
   397                              <1> ;Input: al = Open mode
   398                              <1> ;       [currentSFT] = SFT we are building
   399                              <1> ;       [workingCDS] = CDS of drive to access
   400                              <1> ;       [workingDPB] = DPB of drive to access
   401                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
   402                              <1> ;
   403                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
   404                              <1> ;                  - wDeviceInfo is set except for inherit bit
   405                              <1> ;        If CF=CY: - Return fail
   406                              <1> ;
   407                              <1> ;
   408                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
   409                              <1> ;   If not, create disk entry.
   410                              <1> ;Check if the device was a char device by checking ffBlock.
   411                              <1> ;If disk, get dpb. We check if the parent dir was found.
   412                              <1> 
   413                              <1> ;First set the open mode, time and date, name, ownerPSP and file pointer
   414                              <1> ; to start of file fields of the SFT
   415 000029DE 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
   416                              <1> ;Set the open mode
   417 000029E5 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
   418                              <1> ;Get current time
   419 000029E9 E8A3FAFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   420 000029EE E889FBFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
   421 000029F3 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
   422                              <1> ;Now save the name
   423 000029F6 56                  <1>     push rsi    ;Save the sft ptr
   424 000029F7 488D7E30            <1>     lea rdi, qword [rsi + sft.sFileName]    ;Store in file name field
   425 000029FB 488D35(BBC50300)    <1>     lea rsi, qword [curDirCopy + fatDirEntry.name]  ;Copy from dir 
   426 00002A02 48A5                <1>     movsq   ;Copy over the space padded name to the sft
   427 00002A04 66A5                <1>     movsw
   428 00002A06 A4                  <1>     movsb
   429 00002A07 5E                  <1>     pop rsi
   430                              <1> ;Set current Owner
   431 00002A08 488B05(81C30300)    <1>     mov rax, qword [currentPSP]
   432 00002A0F 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
   433                              <1> ;Set file pointer to first byte
   434 00002A13 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
   435                              <1> ;Common fields set
   436 00002A1A F605(61C60300)FF    <1>     test byte [openCreate], -1  ;Create = -1
   437 00002A21 7414                <1>     jz .openProc
   438                              <1>     ;Here if Creating a file.
   439 00002A23 F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
   440 00002A2A 7514                <1>     jnz .charDev
   441 00002A2C F605(5EC60300)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
   442 00002A33 7400                <1>     jz .createFile
   443                              <1>     ;Here file exists, so delete the file before recreating it.
   444                              <1> .createFile:
   445                              <1>     ;Create a new file entry
   446 00002A35 EB09                <1>     jmp short .open
   447                              <1> .openProc:
   448                              <1>     ;Here if Opening a file.
   449 00002A37 F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
   450 00002A3E 7500                <1>     jnz .charDev
   451                              <1> .open:
   452                              <1> .charDev:
   453 00002A40 488B05(BBC50300)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
   454 00002A47 E8F3140000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
   455 00002A4C 7306                <1>     jnc .notBadCharDevName
   456 00002A4E B805000000          <1>     mov eax, errAccDen
   457                              <1>     return
    18                              <2> %%_ret:
    19 00002A53 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   458                              <1> .notBadCharDevName:
   459 00002A54 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
   460 00002A58 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
   461 00002A5C 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
   462 00002A5F 80CB60              <1>     or bl, charDevBinary | charDevNoEOF ;Set binary mode and noEOF on read
   463 00002A62 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
   464 00002A66 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
   465                              <1>     return
    18                              <2> %%_ret:
    19 00002A6D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   466                              <1> 
   467                              <1> .bad:
   468 00002A6E F9                  <1>     stc
   469                              <1>     return
    18                              <2> %%_ret:
    19 00002A6F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   470                              <1> closeMain: ;Int 4Fh AX=1201h
   471                              <1> ;Gets the directory entry for a file
   472                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
   473                              <1> ;If CF=CY on return: Error, return error with al = error code
   474                              <1> ;Preserve all regs except eax and rdi
   475                              <1> ; If CF=NC on return: eax = Unknown
   476                              <1> ;                     rdi = current SFT ptr
   477 00002A70 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
   478 00002A77 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
   479 00002A7D 7508                <1>     jnz .physical
   480                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
   481 00002A7F B806110000          <1>     mov eax, 1106h  ;Make request
   482 00002A84 CD4F                <1>     int 4Fh ;Beep!
   483                              <1>     return  ;Returns with CF set or clear as appropriate
    18                              <2> %%_ret:
    19 00002A86 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   484                              <1> .physical:  
   485                              <1> ; We make a request to the dev dir to close the device
   486                              <1> ; If the device is disk, we then update the directory entry for the disk file
   487 00002A87 E856160000          <1>     call dosCrit1Enter  ;Enter critical section 1
   488 00002A8C 53                  <1>     push rbx
   489 00002A8D 56                  <1>     push rsi
   490 00002A8E 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
   491 00002A92 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   492 00002A98 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
   493                              <1>     ;rsi has DPB pointer here
   494                              <1>     ;rdi has the SFT pointer
   495 00002A9A 55                  <1>     push rbp
   496 00002A9B 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
   497 00002A9E E8DD110000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
   498 00002AA3 E891EFFFFF          <1>     call updateDirectoryEntryForFile
   499 00002AA8 5D                  <1>     pop rbp
   500                              <1>     ;If CF is set, Fail was requested and ax has an error code
   501 00002AA9 722F                <1>     jc .exit
   502 00002AAB E898E0FFFF          <1>     call flushFile
   503 00002AB0 7228                <1>     jc .exit    ;If something went wrong, exit
   504 00002AB2 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
   505 00002AB6 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
   506                              <1> .charClose:
   507                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
   508                              <1>     ;We now decrement handle count in SFT structure
   509 00002ABA E84A050000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
   510 00002ABF 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
   511 00002AC2 7503                <1>     jnz .driverClose
   512 00002AC4 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
   513                              <1> .driverClose:
   514 00002AC7 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
   515                              <1>     ;and if the device is a disk device, cl will have the unit number
   516                              <1>     ;We first check if the driver supports oper/close requests
   517 00002AC8 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
   518 00002ACE 750A                <1>     jnz .exit  ;If not, immediately jump to exit, all is well
   519                              <1>     ;rsi has device driver ptr for device, make request
   520 00002AD0 E87A110000          <1>     call primReqCloseSetup  ;rbx gets header ptr, rsi has driver ptr
   521 00002AD5 E8450E0000          <1>     call goDriver   ;Make request
   522                              <1>     ;Don't check the status here, as we are simply informing the driver 
   523                              <1>     ; of an operation. Nothing should be able to go wrong. 
   524                              <1>     ;Functionally, an ignore if anything does go wrong.
   525                              <1> .exit:
   526 00002ADA 5E                  <1>     pop rsi
   527 00002ADB 5B                  <1>     pop rbx
   528 00002ADC E80B160000          <1>     call dosCrit1Exit
   529                              <1>     return
    18                              <2> %%_ret:
    19 00002AE1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> readBytes:
   532                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
   533                              <1> ;Input: ecx = Number of bytes to read
   534                              <1> ;Output: ecx = Number of bytes read
   535                              <1> ;Number of bytes read 
   536                              <1> ;If CF=CY, return with error code in ax
   537 00002AE2 E8F2020000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   538 00002AE7 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   539 00002AEB 240F                <1>     and al, 0Fh ;Eliminate except access mode
   540 00002AED 3C01                <1>     cmp al, WriteAccess
   541 00002AEF 7509                <1>     jne .readable
   542 00002AF1 B805000000          <1>     mov eax, errAccDen
   543 00002AF6 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
   544 00002AF8 F9                  <1>     stc
   545                              <1>     return
    18                              <2> %%_ret:
    19 00002AF9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   546                              <1> .readable:
   547 00002AFA E81B030000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
   548 00002AFF 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
   549 00002B02 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   550 00002B08 740A                <1>     jz .notRedir
   551 00002B0A B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
   552 00002B0F CD4F                <1>     int 4Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
   553                              <1>     return 
    18                              <2> %%_ret:
    19 00002B11 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   554                              <1> .exitOk:
   555 00002B12 F8                  <1>     clc
   556                              <1>     return 
    18                              <2> %%_ret:
    19 00002B13 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   557                              <1> .notRedir:
   558 00002B14 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   559 00002B1A 7510                <1>     jnz readCharDev
   560 00002B1C E8C1150000          <1>     call dosCrit1Enter
   561 00002B21 E898010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
   562 00002B26 E8C1150000          <1>     call dosCrit1Exit
   563                              <1>     return 
    18                              <2> %%_ret:
    19 00002B2B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   564                              <1> readCharDev:
   565                              <1> ;rdi points to sft for char dev to read
   566                              <1> ;ecx has the number of bytes to transfer
   567                              <1> ;Vars have been set up and DTA has the transfer address
   568                              <1> ;Returns in ecx, the actual bytes transferred
   569                              <1> ;If CF=CY, return with error code in ax
   570 00002B2C C605(6CC30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
   571 00002B33 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
   572 00002B37 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
   573 00002B3E F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
   574 00002B41 0F8473020000        <1>     jz rwExitOk    ;If it does, jump to exit as if EOF has been hit
   575 00002B47 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
   576 00002B4A 7407                <1>     jz .notNul
   577                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
   578                              <1>     ;NUL never transfers bytes 
   579 00002B4C 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
   580 00002B4E E967020000          <1>     jmp rwExitOk    ;Goto exit
   581                              <1> .notNul:
   582 00002B53 F6C320              <1>     test bl, charDevBinary
   583 00002B56 757F                <1>     jnz .binary
   584                              <1>     ;Here if the device is in ASCII mode
   585 00002B58 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
   586 00002B5B 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
   587                              <1> .consoleInput:
   588                              <1>     ;Console input here
   589 00002B61 E817F5FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
   590                              <1>     ;Get current offset into buffer (if one exists)
   591 00002B66 488B35(23C00300)    <1>     mov rsi, qword [vConHdlOff]
   592 00002B6D 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
   593 00002B70 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
   594 00002B72 803D(B0C20300)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
   595 00002B79 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
   596                              <1>     ;Else, reset the buffer
   597 00002B7B 66C705(B0C20300)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
   597 00002B83 FF                  <1>
   598                              <1> .oldBuf:
   599                              <1> ;Preserve the dta and number of chars to tfr
   600 00002B84 51                  <1>     push rcx
   601 00002B85 57                  <1>     push rdi
   602 00002B86 488D15(B0C20300)    <1>     lea rdx, vConInBuf
   603 00002B8D E80BF5FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
   604 00002B92 5F                  <1>     pop rdi
   605 00002B93 59                  <1>     pop rcx
   606 00002B94 488D35(B2C20300)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
   607 00002B9B 803E1A              <1>     cmp byte [rsi], EOF
   608 00002B9E 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
   609 00002BA0 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
   610 00002BA3 B00A                <1>     mov al, LF
   611 00002BA5 E885F0FFFF          <1>     call charOut_B.in   ;Echo CRLF
   612 00002BAA 31F6                <1>     xor esi, esi    ;Set ZF = ZE
   613 00002BAC EB18                <1>     jmp short .exit
   614                              <1> .tfrBuf:
   615 00002BAE AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
   616 00002BAF AA                  <1>     stosb
   617 00002BB0 3C0D                <1>     cmp al, CR 
   618 00002BB2 7503                <1>     jne .noCRLF
   619 00002BB4 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
   620                              <1> .noCRLF:
   621 00002BB7 3C0A                <1>     cmp al, LF  ;Compare if al is LF
   622 00002BB9 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
   623 00002BBB 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
   624                              <1>     ;This only applies if the reason for exiting the loop is al=LF
   625 00002BBD E86DF0FFFF          <1>     call charOut_B.in   ;Echo CRLF
   626 00002BC2 31F6                <1>     xor esi, esi
   627 00002BC4 0C01                <1>     or al, 1    ;Set ZF = NZ
   628                              <1> .exit:
   629 00002BC6 E8CAF4FFFF          <1>     call vConRetDriver
   630 00002BCB 488935(23C00300)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
   631 00002BD2 E9E3010000          <1>     jmp rwExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
   632                              <1> 
   633                              <1> .binary:
   634                              <1>     ;Setup registers for transfer
   635 00002BD7 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
   636 00002BDA 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
   637                              <1>     ;ecx has the number of bytes to transfer directly
   638 00002BDD E8BE0F0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
   639 00002BE2 488B35(64C60300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
   640 00002BE9 E8310D0000          <1>     call goDriver   ;Make the request
   641 00002BEE 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
   642 00002BF1 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   643 00002BF8 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   644 00002BFE 7422                <1>     jz .binNoError
   645                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
   646 00002C00 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
   647 00002C02 E8EB0B0000          <1>     call charDevErr   ;ah = has part of the error 
   648                              <1>     ;al now has the response
   649 00002C07 3C00                <1>     cmp al, critIgnore
   650 00002C09 7417                <1>     je .binNoError ;Simply proceed as normal
   651 00002C0B 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
   652 00002C0E 3C03                <1>     cmp al, critFail
   653 00002C10 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
   654                              <1>     ;Fallthrough here for fail!
   655                              <1> .failExit:
   656 00002C12 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   657 00002C19 31C9                <1>     xor ecx, ecx
   658 00002C1B B805000000          <1>     mov eax, errAccDen
   659 00002C20 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
   660                              <1>     return
    18                              <2> %%_ret:
    19 00002C21 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   661                              <1> .binNoError:
   662                              <1>     ;Get number of bytes transferred into 
   663 00002C22 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
   664 00002C28 F7D8                <1>     neg eax ;make it into -eax
   665 00002C2A 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
   666                              <1>     ;ecx now has bytes left to transfer
   667 00002C2E 50                  <1>     push rax    ;Save value on stack
   668 00002C2F 31C0                <1>     xor eax, eax ;Set ZF
   669 00002C31 FFC0                <1>     inc eax ;Clear ZF
   670 00002C33 58                  <1>     pop rax ;Get back the original value
   671 00002C34 E981010000          <1>     jmp rwExitOk    ;GoExit with ecx=Bytes left to read
   672                              <1> .generalASCII:
   673                              <1>     ;ecx has bytes to transfer here
   674                              <1>     ;Setup registers for transfer
   675 00002C39 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
   676 00002C3C 51                  <1>     push rcx
   677 00002C3D B901000000          <1>     mov ecx, 1  ;Get one char
   678 00002C42 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
   679 00002C45 E8560F0000          <1>     call primReqReadSetup   ;Setup request
   680 00002C4A 59                  <1>     pop rcx
   681                              <1>     ;rbx now has request header ptr
   682 00002C4B 488B35(64C60300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
   683                              <1> .asciiReadChar:
   684 00002C52 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
   685 00002C55 E8A7F3FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
   686 00002C5A E8C00C0000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
   687 00002C5F 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   688 00002C66 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   689 00002C6C 741E                <1>     jz .asciiNoError
   690 00002C6E E87F0B0000          <1>     call charDevErr    ;Call Int 44h
   691                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
   692 00002C73 C705(38C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
   692 00002C7B 0000                <1>
   693 00002C7D 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   694 00002C80 3C03                <1>     cmp al, critFail
   695 00002C82 748E                <1>     je .failExit
   696 00002C84 3C01                <1>     cmp al, critRetry
   697 00002C86 74CA                <1>     je .asciiReadChar
   698                              <1>     ;Ignore here, pretend NULL CHAR was read
   699 00002C88 30C0                <1>     xor al, al
   700 00002C8A EB15                <1>     jmp short .asciiIgnoreEP
   701                              <1> .asciiNoError:
   702                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
   703                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
   704                              <1> ;Preserve RBX, RSI
   705                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
   706 00002C8C 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   707 00002C8F 813D(38C40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
   707 00002C97 0000                <1>
   708 00002C99 0F851B010000        <1>     jne rwExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
   709 00002C9F 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
   710                              <1> .asciiIgnoreEP:
   711 00002CA1 48FF05(30C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
   712 00002CA8 48FFC7              <1>     inc rdi ;Also advance register pointer
   713 00002CAB 3C1A                <1>     cmp al, EOF ;Was this char EOF?
   714 00002CAD 0F8407010000        <1>     je rwExitOk
   715 00002CB3 3C0D                <1>     cmp al, CR  ;Was this char CR?
   716 00002CB5 E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
   717                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
   718 00002CB7 FEC0                <1>     inc al  ;make ZF=NZ
   719 00002CB9 E9FC000000          <1>     jmp rwExitOk    ;Called with ecx = Number of bytes LEFT to transfer
   720                              <1> 
   721                              <1> readDiskFile:
   722                              <1> ;rdi = Current SFT
   723                              <1> ;rbp = WorkingDPB
   724 00002CBE C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
   725 00002CC5 C605(5AC60300)00    <1>     mov byte [rwFlag], 0    ;Read operation
   726 00002CCC E86B010000          <1>     call setupVarsForDiskTransfer   ;Now setup disk vars too
   727 00002CD1 85C9                <1>     test ecx, ecx   ;If the number of chars to tfr are zero, exit ecx = 0
   728                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00002CD3 7501                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00002CD5 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   729                              <1>     ;We have the following vars setup:
   730                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
   731                              <1>     ;currClustF
   732                              <1>     ;Now convert currSectC to disk sector by using currClustF
   733                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
   734 00002CD6 8B15(A2C60300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
   735 00002CDC 8B460F              <1>     mov eax, dword [rsi + sft.dStartClust]  ;Get starting cluster
   736 00002CDF 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
   737 00002CE1 8B0D(C9C60300)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
   738 00002CE7 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
   739 00002CE9 741E                <1>     jz .skipWalk
   740                              <1> .goToCurrentCluster:
   741 00002CEB 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
   742 00002CF0 0F84C4000000        <1>     je rwExitOk ;Exit with no bytes transferred
   743 00002CF6 89C3                <1>     mov ebx, eax    ;Save eax as current cluster
   744 00002CF8 E862E0FFFF          <1>     call walkFAT    ;Get in eax the next cluster
   745 00002CFD 0F828B000000        <1>     jc .badExit   ;This can only return Fail
   746 00002D03 FFCA                <1>     dec edx ;Decrement counter
   747 00002D05 75E4                <1>     jnz .goToCurrentCluster
   748                              <1> ;Now we fall out with ebx = Current cluster
   749 00002D07 89D8                <1>     mov eax, ebx    ;Get the current cluster in eax
   750                              <1> .skipWalk:
   751 00002D09 E8F5DEFFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
   752                              <1>     ;Now we add the offset to this
   753 00002D0E 0FB61D(AEC60300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
   754 00002D15 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
   755 00002D18 488905(AFC60300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
   756                              <1> ;Main
   757 00002D1F EB05                <1>     jmp short .mainSkipBufferSet
   758                              <1> .mainRead:
   759 00002D21 E86ADCFFFF          <1>     call setBufferReferenced
   760                              <1> .mainSkipBufferSet:
   761 00002D26 E8F9DDFFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
   762 00002D2B 7261                <1>     jc .badExit
   763 00002D2D 4889DE              <1>     mov rsi, rbx    ;Move the buffer pointer into rsi
   764 00002D30 0FB71D(B7C60300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
   765 00002D37 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
   766                              <1>     ;Now we read the smallest of the following from the sector buffer:
   767                              <1>     ; 1) Sector size, 2) Bytes left in File, 3) Bytes left to read from Request
   768 00002D3A 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
   769 00002D3D 2B4F1B              <1>     sub ecx, dword [rdi + sft.dCurntOff] ;Get bytes left to read in file in ecx
   770 00002D40 8B1D(CDC60300)      <1>     mov ebx, dword [tfrCntr]
   771 00002D46 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
   772 00002D48 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
   773 00002D4B 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
   774 00002D4F 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
   775 00002D51 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
   776 00002D54 57                  <1>     push rdi
   777 00002D55 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
   778 00002D5C E846020000          <1>     call readWriteBytesBinary
   779 00002D61 48893D(79C30300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
   780 00002D68 5F                  <1>     pop rdi
   781 00002D69 8B0D(CDC60300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
   782 00002D6F 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
   783 00002D71 7447                <1>     jz rwExitOk ;Exit if so!
   784 00002D73 E85DDFFFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
   785 00002D78 7214                <1>     jc .badExit
   786 00002D7A 743E                <1>     jz rwExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
   787                              <1>     ;Else repeat
   788                              <1>     ;currSectD has been updated, we now set currByteS = 0
   789 00002D7C 66C705(B7C60300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
   789 00002D84 00                  <1>
   790 00002D85 488B05(AFC60300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
   791 00002D8C EB93                <1>     jmp short .mainRead
   792                              <1> .badExit:
   793                              <1>     ;When a disk error occurs within the bit where vars have changed,
   794                              <1>     ; we need to update the SFT before returning
   795 00002D8E 8B0D(CDC60300)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
   796 00002D94 30C0                <1>     xor al, al  ;Set ZF flag
   797 00002D96 E81F000000          <1>     call rwExitOk   ;We call this
   798 00002D9B F9                  <1>     stc ;All calls which end up here return Fail!
   799 00002D9C C3                  <1>     ret
   800                              <1> writeBytes:
   801                              <1> ;Writes the bytes from the user buffer
   802 00002D9D E837000000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   803 00002DA2 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   804 00002DA6 240F                <1>     and al, 0Fh ;Eliminate except access mode
   805 00002DA8 3C00                <1>     cmp al, ReadAccess
   806 00002DAA 7509                <1>     jne .writeable
   807 00002DAC B805000000          <1>     mov eax, errAccDen
   808 00002DB1 31C9                <1>     xor ecx, ecx
   809 00002DB3 F9                  <1>     stc
   810 00002DB4 C3                  <1>     ret
   811                              <1> .writeable:
   812 00002DB5 E860000000          <1>     call setupVarsForTransfer
   813                              <1> 
   814                              <1> rwExitOk:
   815                              <1> ;Input: ecx = Number of bytes left to transfer!
   816                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
   817 00002DBA 890D(CDC60300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
   818 00002DC0 7509                <1>     jnz .skipbitClear
   819 00002DC2 E812000000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
   820                              <1>     ;The disk transfer must've flushed by now. 
   821 00002DC7 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokFileToFlush|charDevNoEOF) ;OR
   822                              <1>     ;Next char dev read should give EOF.
   823                              <1> .skipbitClear:  ;Or skip that entirely
   824 00002DCB E811000000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
   825                              <1>     return 
    18                              <2> %%_ret:
    19 00002DD0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   826                              <1> ;-----------------------------------:
   827                              <1> ;        File Handle routines       :
   828                              <1> ;-----------------------------------:
   829                              <1> 
   830                              <1> setCurrentSFT:
   831                              <1> ;Set the pointer in rdi as current SFT 
   832 00002DD1 48893D(84C60300)    <1>     mov qword [currentSFT], rdi
   833                              <1>     return 
    18                              <2> %%_ret:
    19 00002DD8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   834                              <1> getCurrentSFT:
   835                              <1> ;Get the current SFT pointer in rdi
   836 00002DD9 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   837                              <1>     return 
    18                              <2> %%_ret:
    19 00002DE0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   838                              <1> updateCurrentSFT:
   839                              <1> ;Updates the Current SFT fields before returning from a file handle operation
   840                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
   841 00002DE1 57                  <1>     push rdi
   842 00002DE2 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   843 00002DE9 8B0D(C9C60300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
   844 00002DEF 2B0D(CDC60300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
   845                              <1>     ;ecx has bytes transferred
   846 00002DF5 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
   847 00002DFB 751A                <1>     jnz .exit
   848 00002DFD 50                  <1>     push rax
   849 00002DFE 8B05(A6C60300)      <1>     mov eax, dword [currClustD]
   850 00002E04 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
   851 00002E07 8B05(A2C60300)      <1>     mov eax, dword [currClustF]
   852 00002E0D 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
   853 00002E10 58                  <1>     pop rax
   854 00002E11 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
   855 00002E14 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
   856                              <1> .exit:
   857 00002E17 5F                  <1>     pop rdi
   858 00002E18 F8                  <1>     clc
   859                              <1>     return 
    18                              <2> %%_ret:
    19 00002E19 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   860                              <1> setupVarsForTransfer:
   861                              <1> ;Computes the actual bytes to be transferred and 
   862                              <1> ; sets up internal variables for the transfer. 
   863                              <1> ;Works for both reading and writing
   864                              <1> ;Input: ecx = User desired Bytes to transfer
   865                              <1> ;       rdi = SFT pointer for the file
   866                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   867                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
   868                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
   869                              <1> ;
   870                              <1> ;Note: Does not account for a FULL disk. When writing,
   871                              <1> ; if the disk will get full as a result of the write,
   872                              <1> ; stop at the last byte before the transfer. If the 
   873                              <1> ; file pointer is past the last free byte, write 0
   874 00002E1A 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
   875 00002E1E 488935(64C60300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
   876 00002E25 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
   877 00002E28 8905(B9C60300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
   878 00002E2E 890D(C9C60300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
   879 00002E34 890D(CDC60300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
   880 00002E3A F8                  <1>     clc
   881                              <1>     return
    18                              <2> %%_ret:
    19 00002E3B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   882                              <1> 
   883                              <1> setupVarsForDiskTransfer:
   884                              <1> ;Extension of the above, but for Disk files only
   885                              <1> ;Input: ecx = User desired Bytes to transfer
   886                              <1> ;       rdi = SFT pointer for the file
   887                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   888 00002E3C 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
   889 00002E3F 8905(B9C60300)      <1>     mov dword [currByteF], eax
   890 00002E45 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
   891 00002E48 85D2                <1>     test edx, edx
   892 00002E4A 0F44CA              <1>     cmovz ecx, edx  ;If the file size is zero, exit
   893 00002E4D 67E349              <1>     jecxz .exit
   894 00002E50 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
   895 00002E54 48892D(64C60300)    <1>     mov qword [workingDPB], rbp
   896 00002E5B 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
   897 00002E5E 881D(63C60300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
   898 00002E64 8B05(B9C60300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
   899 00002E6A 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   900 00002E6E 31D2                <1>     xor edx, edx    ;Zero rdx
   901 00002E70 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
   902                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
   903                              <1>     ;edx has the offset into that sector
   904 00002E72 8905(AAC60300)      <1>     mov dword [currSectF], eax
   905 00002E78 668915(B7C60300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
   906 00002E7F 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
   907 00002E81 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
   908 00002E84 8805(AEC60300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
   909 00002E8A 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
   910 00002E8C 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   911 00002E8F D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
   912 00002E91 8915(A2C60300)      <1>     mov dword [currClustF], edx ;Save in var
   913 00002E97 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in eax
   914                              <1> .exit:
   915 00002E99 F8                  <1>     clc
   916                              <1>     return 
    18                              <2> %%_ret:
    19 00002E9A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   917                              <1> findFreeSFT:
   918                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
   919                              <1> ;Modifies an SFT entry. Must be called in a critical section.
   920                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
   921                              <1> ;        CF=CY => eax = errNhl, error exit
   922 00002E9B 31DB                <1>     xor ebx, ebx
   923                              <1> .mainLp:
   924 00002E9D 53                  <1>     push rbx    ;Save the sft ndx
   925 00002E9E E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
   926 00002EA3 5B                  <1>     pop rbx
   927 00002EA4 7307                <1>     jnc .sftExists
   928 00002EA6 B804000000          <1>     mov eax, errNhl
   929 00002EAB F9                  <1>     stc
   930                              <1>     return
    18                              <2> %%_ret:
    19 00002EAC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   931                              <1> .sftExists:
   932 00002EAD 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
   933 00002EB2 7427                <1>     je .sftFound
   934 00002EB4 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
   935 00002EB9 751C                <1>     jne .gotoNextNdx
   936                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
   937 00002EBB 53                  <1>     push rbx
   938 00002EBC 488B1D(9DC30300)    <1>     mov rbx, qword [serverPSP]
   939 00002EC3 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
   940 00002EC7 750B                <1>     jne .netGoToNextNdx
   941 00002EC9 0FB71D(A5C30300)    <1>     movzx ebx, word [machineNum]
   942 00002ED0 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
   943                              <1> .netGoToNextNdx:
   944 00002ED4 5B                  <1>     pop rbx
   945 00002ED5 7404                <1>     je .sftFound
   946                              <1> .gotoNextNdx:
   947 00002ED7 FFC3                <1>     inc ebx
   948 00002ED9 EBC2                <1>     jmp short .mainLp
   949                              <1> .sftFound:
   950 00002EDB 53                  <1>     push rbx
   951 00002EDC 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
   952 00002EE1 488B1D(9DC30300)    <1>     mov rbx, qword [serverPSP]
   953 00002EE8 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
   954 00002EEC 0FB71D(A5C30300)    <1>     movzx ebx, word [machineNum]
   955 00002EF3 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
   956 00002EF7 5B                  <1>     pop rbx
   957 00002EF8 F8                  <1>     clc
   958                              <1>     return
    18                              <2> %%_ret:
    19 00002EF9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   959                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216
   960                              <1> ;Return a pointer to the SFT entry in rdi
   961                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
   962                              <1> ;Output: rdi = SFT pointer
   963 00002EFA 488B3D(3BC00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
   964                              <1> .walk:
   965 00002F01 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
   966 00002F05 7212                <1>     jb .thisTable
   967 00002F07 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
   968 00002F0B 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
   969 00002F0E 4881FFFFFFFFFF      <1>     cmp rdi, -1
   970 00002F15 75EA                <1>     jne .walk
   971 00002F17 F9                  <1>     stc
   972                              <1>     return
    18                              <2> %%_ret:
    19 00002F18 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   973                              <1> .thisTable:
   974 00002F19 50                  <1>     push rax
   975 00002F1A 52                  <1>     push rdx
   976 00002F1B B84F000000          <1>     mov eax, sft_size
   977 00002F20 F7E3                <1>     mul ebx
   978 00002F22 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
   979 00002F25 5A                  <1>     pop rdx
   980 00002F26 58                  <1>     pop rax
   981 00002F27 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
   982                              <1>     return
    18                              <2> %%_ret:
    19 00002F2E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   983                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
   984                              <1> ;Return a zero extended value in rdi for the SFT entry
   985                              <1> ;Input: bx = JFT handle (we zero extend)
   986                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
   987                              <1> ;        CF=CY => al = Error code, Fail
   988 00002F2F 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
   989 00002F32 663B1D(97C00300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
   990 00002F39 7204                <1>     jb .ok
   991 00002F3B B006                <1>     mov al, errBadHdl
   992 00002F3D F9                  <1>     stc
   993                              <1>     return
    18                              <2> %%_ret:
    19 00002F3E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   994                              <1> .ok:
   995 00002F3F 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
   996 00002F46 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
   997 00002F4B F8                  <1>     clc
   998                              <1>     return
    18                              <2> %%_ret:
    19 00002F4C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   999                              <1> findFreeJFTEntry:
  1000                              <1> ;Finds a free JFT entry in the currentPSP.
  1001                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  1002                              <1> ;        CF=CY => al=errNhl
  1003 00002F4D 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  1004                              <1> .searchLp:
  1005 00002F4F E8DBFFFFFF          <1>     call getJFTPtr
  1006 00002F54 7209                <1>     jc .badExit
  1007 00002F56 803FFF              <1>     cmp byte [rdi], -1
  1008                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002F59 74F1                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1009 00002F5B FFC3                <1>     inc ebx
  1010 00002F5D EBF0                <1>     jmp short .searchLp
  1011                              <1> .badExit:
  1012 00002F5F B004                <1>     mov al, errNhl
  1013 00002F61 F9                  <1>     stc
  1014                              <1>     return
    18                              <2> %%_ret:
    19 00002F62 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1015                              <1> getSFTPtr:
  1016                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  1017                              <1> ;Input: bx = JFT handle
  1018                              <1> ;Output: CF=NC: rdi = SFT pointer
  1019                              <1> ;        CF=CY: Error, ax=Error code
  1020 00002F63 E815000000          <1>     call derefSFTPtr
  1021                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002F68 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1022 00002F6A 50                  <1>     push rax
  1023 00002F6B 0FB705(A5C30300)    <1>     movzx eax, word [machineNum]
  1024 00002F72 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  1025 00002F76 58                  <1>     pop rax
  1026                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002F77 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1027 00002F79 B006                <1>     mov al, errBadHdl   ;Error code
  1028 00002F7B F9                  <1>     stc         ;Reset CF
  1029                              <1>     return
    18                              <2> %%_ret:
    19 00002F7C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1030                              <1> 
  1031                              <1> derefSFTPtr:
  1032                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  1033                              <1> ;Input: bx = File handle (gets zero extended)
  1034                              <1> ;Output: CF=NC: rdi = SFT pointer
  1035                              <1> ;        CF=CY: Error, ax=Error code
  1036 00002F7D E8ADFFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  1037 00002F82 7205                <1>     jb .fail
  1038 00002F84 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  1039 00002F87 7504                <1>     jne .ok
  1040                              <1> .fail:
  1041 00002F89 B006                <1>     mov al, errBadHdl
  1042 00002F8B F9                  <1>     stc
  1043                              <1>     return
    18                              <2> %%_ret:
    19 00002F8C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1044                              <1> .ok:
  1045 00002F8D 53                  <1>     push rbx    ;Preserve the JFT handle
  1046 00002F8E 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  1047 00002F91 E864FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  1048 00002F96 5B                  <1>     pop rbx 
  1049                              <1>     return
    18                              <2> %%_ret:
    19 00002F97 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1050                              <1> 
  1051                              <1> getBytesTransferred:
  1052 00002F98 8B0D(CDC60300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  1053 00002F9E F7D9                <1>     neg ecx ;Multiply by -1
  1054 00002FA0 030D(C9C60300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  1055                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 00002FA6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1056                              <1> 
  1057                              <1> readWriteBytesBinary:
  1058                              <1> ;Input: ecx = number of bytes to read in Binary mode
  1059                              <1> ;       rdi = Points to where in caller buffer to place bytes
  1060                              <1> ;       rsi = Points to where in DOS buffer to place pointer
  1061                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
  1062                              <1> ;Preserve rcx so we know how many bytes transferred
  1063                              <1> ;Update the currByteA variable
  1064                              <1> ;Returns (rsi and rdi) + (ecx on entry)
  1065 00002FA7 51                  <1>     push rcx
  1066 00002FA8 F605(5AC60300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
  1067 00002FAF 7403                <1>     jz .noSwap
  1068 00002FB1 4887FE              <1>     xchg rdi, rsi
  1069                              <1> .noSwap:
  1070 00002FB4 F3A4                <1>     rep movsb
  1071 00002FB6 59                  <1>     pop rcx
  1072 00002FB7 010D(B9C60300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  1073 00002FBD 290D(CDC60300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  1074                              <1>     return
    18                              <2> %%_ret:
    19 00002FC3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1075                              <1> 
  1076                              <1> findFreeJFTSpace:
  1077                              <1> ;Input: [currentPSP] = Task whose PSP we will look through
  1078                              <1> ;If there are no free spaces, then we return with al = errNhl and CF=CY
  1079                              <1> ;Else, a pointer to the free space in rsi and al = -1
  1080 00002FC4 51                  <1>     push rcx
  1081 00002FC5 488B35(81C30300)    <1>     mov rsi, qword [currentPSP]
  1082 00002FCC 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]
  1083 00002FD3 488D762A            <1>     lea rsi, qword [rsi + psp.jobFileTbl]   ;Point to start of table
  1084                              <1> .search:
  1085 00002FD7 AC                  <1>     lodsb
  1086 00002FD8 3CFF                <1>     cmp al, -1
  1087 00002FDA 7407                <1>     je .exit
  1088 00002FDC FFC9                <1>     dec ecx
  1089 00002FDE 75F7                <1>     jnz .search
  1090 00002FE0 B004                <1>     mov al, errNhl  ;No free handles buddy, sorry
  1091 00002FE2 F9                  <1>     stc ;Set error bit
  1092                              <1> .exit:
  1093 00002FE3 59                  <1>     pop rcx
  1094                              <1>     return
    18                              <2> %%_ret:
    19 00002FE4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1095                              <1> 
  1096                              <1> getSFTndxInheritable:
  1097                              <1> ;Given a SFTndx this function will verify if it is inheritable
  1098                              <1> ;Input: ebx = SFTndx (word)
  1099                              <1> ;Output: 
  1100                              <1> ;   ZF=ZE => Inheritable
  1101                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  1102 00002FE5 57                  <1>     push rdi
  1103 00002FE6 E80FFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  1104 00002FEB 7208                <1>     jc .badNdx
  1105 00002FED 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  1106 00002FF3 5F                  <1>     pop rdi
  1107                              <1>     return
    18                              <2> %%_ret:
    19 00002FF4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1108                              <1> .badNdx:
  1109 00002FF5 31FF                <1>     xor edi, edi
  1110 00002FF7 FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  1111 00002FF9 F8                  <1>     clc
  1112 00002FFA 5F                  <1>     pop rdi
  1113                              <1>     return
    18                              <2> %%_ret:
    19 00002FFB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1114                              <1> 
  1115                              <1> incrementOpenCount:
  1116                              <1> ;Given a SFTndx, this function will increment it's open count
  1117                              <1> ;Output:
  1118                              <1> ;   CF=NC => sftndx ok, count incremented
  1119                              <1> ;   CF=CY => Bad ndx
  1120 00002FFC 57                  <1>     push rdi
  1121 00002FFD E8F8FEFFFF          <1>     call getSFTPtrfromSFTNdx
  1122 00003002 7203                <1>     jc .exit
  1123 00003004 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  1124                              <1> .exit:
  1125 00003007 5F                  <1>     pop rdi
  1126                              <1>     return
    18                              <2> %%_ret:
    19 00003008 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1127                              <1> 
  1128                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
  1129                              <1> ;Input: rdi = SFT pointer
  1130                              <1> ;Output: ax = Original wNumHandles count
  1131 00003009 9C                  <1>     pushfq
  1132 0000300A 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  1133 0000300D FFC8                <1>     dec eax     ;Decrement count
  1134 0000300F 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  1135 00003011 FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  1136                              <1> .exit:
  1137 00003013 9D                  <1>     popfq
  1138 00003014 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  1139                              <1>     return
    18                              <2> %%_ret:
    19 00003017 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    30                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    31                              <1> ;Memory related functions
    32                              <1> 
    33                              <1> ;-----------------------------------:
    34                              <1> ;  Memory related Kernel routines   :
    35                              <1> ;-----------------------------------:
    36                              <1> allocateMemory:    ;ah = 48h
    37                              <1> ;Input: ebx = Number of paragraphs requested
    38                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    39                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    40 00003018 31D2                <1>     xor edx, edx
    41                              <1>     ;Clear the pointers
    42 0000301A 488915(A7C30300)    <1>     mov qword [firstMCB], rdx
    43 00003021 488915(AFC30300)    <1>     mov qword [bestMCB], rdx
    44 00003028 488915(B7C30300)    <1>     mov qword [lastMCB], rdx
    45 0000302F 31ED                <1>     xor ebp, ebp    
    46 00003031 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    47 00003033 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    48                              <1> .walk:
    49 0000303A 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    50 0000303D 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    51 00003040 7409                <1>     je .walk1
    52 00003042 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    53 00003045 0F85D9040000        <1>     jne badMCBChain
    54                              <1> .walk1:
    55                              <1>     ;Here if valid but not the last block
    56 0000304B 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    57 00003053 0F8582000000        <1>     jne .walk2
    58                              <1>     ;Here we consolidate adjacent free blocks if there are any
    59                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    60                              <1>     ;End consolidation at first non free block or at last block in chain
    61 00003059 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    62 0000305C 744A                <1>     je .det0    ;Determine if this block is useful
    63 0000305E 31C9                <1>     xor ecx, ecx
    64 00003060 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    65 00003063 4881C610000000      <1>     add rsi, mcb.program
    66                              <1> .cons0:
    67 0000306A 48C1E104            <1>     shl rcx, 4
    68 0000306E 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    69 00003071 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    70 00003074 7409                <1>     je .cons1
    71 00003076 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    72 00003079 0F85A5040000        <1>     jne badMCBChain 
    73                              <1> .cons1:
    74 0000307F 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    75 00003087 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    76                              <1>     ;Here rsi, points to a free block, add it to rdi
    77 00003089 31C9                <1>     xor ecx, ecx
    78 0000308B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    79 0000308E 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    80 00003094 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    81 00003097 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    82 00003099 31D2                <1>     xor edx, edx
    83 0000309B 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    84 0000309E 48895608            <1>     mov qword [rsi + 8], rdx
    85 000030A2 3C5A                <1>     cmp al, mcbMarkEnd
    86 000030A4 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    87                              <1>     ;Here we deal with if the block was the last one 
    88 000030A6 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    89                              <1> .det0:  ;Now determine if pointer in rdi is useful
    90 000030A8 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    91                              <1> ;ebx must be less than the arena size for the arena to be useful!
    92 000030AB 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    93 000030AE 39D9                <1>     cmp ecx, ebx
    94 000030B0 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    95 000030B2 488935(B7C30300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    96 000030B9 488B05(A7C30300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    97 000030C0 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    98 000030C3 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    99 000030C5 488935(A7C30300)    <1>     mov qword [firstMCB], rsi
   100                              <1> .det1:
   101                              <1>     ;Now test for best fit.
   102 000030CC 29D9                <1>     sub ecx, ebx    ;Block - ebx
   103 000030CE 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   104 000030D0 7209                <1>     jb .walk2
   105 000030D2 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   106 000030D4 488935(AFC30300)    <1>     mov qword [bestMCB], rsi
   107                              <1> .walk2:
   108 000030DB 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   109 000030DE 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   110 000030E0 31C9                <1>     xor ecx, ecx
   111 000030E2 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   112 000030E5 48C1E104            <1>     shl rcx, 4
   113 000030E9 4881C610000000      <1>     add rsi, mcb.program
   114 000030F0 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   115 000030F3 E942FFFFFF          <1>     jmp .walk
   116                              <1> .allocate:
   117                              <1>     ;Allocation fails IF the pointer is the null pointer
   118 000030F8 803D(35C30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   119 000030FF 7261                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   120                              <1>     ;Fall thru if last fit
   121 00003101 488B35(B7C30300)    <1>     mov rsi, qword [lastMCB]
   122 00003108 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   123 0000310B 0F84CE000000        <1>     jz .allocFail
   124 00003111 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   125 00003113 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   126 00003116 31C9                <1>     xor ecx, ecx
   127 00003118 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   128 0000311B 29D9                <1>     sub ecx, ebx
   129 0000311D 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   130 00003123 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   131 00003126 48C1E104            <1>     shl rcx, 4
   132 0000312A 4881C610000000      <1>     add rsi, mcb.program
   133 00003131 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   134 00003134 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   135 00003136 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   136 00003139 488B15(81C30300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   137 00003140 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   138 00003144 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   139 0000314B 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   140 00003152 4889F0              <1>     mov rax, rsi
   141 00003155 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   142 00003158 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   143 0000315C E896030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   144                              <1>     return
    18                              <2> %%_ret:
    19 00003161 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   145                              <1> .bfCommon:
   146 00003162 488B35(A7C30300)    <1>     mov rsi, qword [firstMCB]
   147 00003169 803D(35C30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   148 00003170 480F4435(AFC30300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   149 00003178 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   150 0000317B 7462                <1>     jz .allocFail
   151 0000317D 8A06                <1>     mov al, byte [rsi + mcb.marker]
   152 0000317F C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   153 00003182 31C9                <1>     xor ecx, ecx
   154 00003184 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   155 00003187 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   156 00003189 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   157 0000318F 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   158 00003192 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   159 00003199 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   160 0000319D 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   161 000031A0 4881C610000000      <1>     add rsi, mcb.program
   162 000031A7 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   163 000031AD 48C1E304            <1>     shl rbx, 4
   164 000031B1 4801DE              <1>     add rsi, rbx
   165 000031B4 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   166 000031B6 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   167 000031BE 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   168 000031C1 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   169 000031C8 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   170 000031CF 4889F8              <1>     mov rax, rdi
   171 000031D2 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   172 000031D5 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   173 000031D9 E819030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   174                              <1>     return
    18                              <2> %%_ret:
    19 000031DE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   175                              <1> .allocFail:
   176                              <1>     ;Walk the MCB chain to determine the biggest block size
   177 000031DF 488B35(2BC00300)    <1>     mov rsi, [mcbChainPtr]
   178 000031E6 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   179                              <1> .af0:
   180 000031E8 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   181 000031EB 7409                <1>     je .af1
   182 000031ED 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   183 000031F0 0F852E030000        <1>     jne badMCBChain
   184                              <1> .af1:
   185 000031F6 31C9                <1>     xor ecx, ecx
   186 000031F8 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   187 000031FB 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   188 00003203 7505                <1>     jne .af2
   189 00003205 39D9                <1>     cmp ecx, ebx
   190 00003207 0F47D9              <1>     cmova ebx, ecx
   191                              <1> .af2:
   192 0000320A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   193 0000320D 7410                <1>     je .afExit
   194 0000320F 48C1E104            <1>     shl rcx, 4
   195 00003213 4881C610000000      <1>     add rsi, mcb.program
   196 0000321A 4801CE              <1>     add rsi, rcx
   197 0000321D EBD7                <1>     jmp short .af1
   198                              <1> .afExit:
   199 0000321F B808000000          <1>     mov eax, errNoMem
   200 00003224 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   201 0000322B 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   202 0000322E E9F3020000          <1>     jmp mcbErrHdlr
   203                              <1> freeMemory:        ;ah = 49h
   204                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   205                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   206                              <1> ;Always skip the first block as this is the anchor for DOS
   207 00003233 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   208 0000323A 31C9                <1>     xor ecx, ecx
   209 0000323C 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   210 00003243 4889F7              <1>     mov rdi, rsi
   211 00003246 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   212 00003249 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   213 0000324D 4881C610000000      <1>     add rsi, mcb.program
   214 00003254 4801CE              <1>     add rsi, rcx    ;Go to next block
   215                              <1> .mainLoop:
   216 00003257 31C9                <1>     xor ecx, ecx
   217 00003259 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   218 0000325C 7409                <1>     je .valid
   219 0000325E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   220 00003261 0F85BD020000        <1>     jne badMCBChain
   221                              <1> .valid:
   222 00003267 4939F0              <1>     cmp r8, rsi
   223 0000326A 741C                <1>     je .blockFound
   224                              <1>     ;Not valid, check if last block in chain
   225 0000326C 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   226 0000326F 0F849C000000        <1>     je .blockError
   227 00003275 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   228 00003278 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   229 0000327C 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   230 00003283 4801CE              <1>     add rsi, rcx    ;Go to next block
   231 00003286 EBCF                <1>     jmp short .mainLoop
   232                              <1> .blockFound:
   233                              <1>     ;If hole, error.
   234                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   235 00003288 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   236 00003290 747F                <1>     je .blockError
   237 00003292 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   238 0000329A 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   239 000032A2 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   240                              <1>     ;It is, let it absorb this space
   241 000032A4 31C9                <1>     xor ecx, ecx
   242 000032A6 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   243 000032A9 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   244 000032AF 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   245                              <1>     ;Replace block marker
   246 000032B2 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   247 000032B4 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   248 000032B6 31C9                <1>     xor ecx, ecx
   249 000032B8 48890E              <1>     mov qword [rsi], rcx
   250 000032BB 48894E08            <1>     mov qword [rsi + 8], rcx
   251 000032BF 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   252                              <1> .blockFoundCheckFollowing:
   253                              <1>     ;First check if we are the last block in chain
   254 000032C2 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   255 000032C5 7439                <1>     je .blockFoundExit  ;If yes, exit!
   256 000032C7 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   257 000032CA 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   258 000032CD 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   259 000032D1 4881C110000000      <1>     add rcx, mcb.program
   260 000032D8 4801CE              <1>     add rsi, rcx    ;Go to next block
   261 000032DB 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   262 000032E3 751B                <1>     jne .blockFoundExit ;If not free, exit
   263                              <1>     ;If free, absorb into block pointed to by rdi
   264 000032E5 31C9                <1>     xor ecx, ecx
   265 000032E7 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   266 000032EA 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   267 000032F0 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   268                              <1>     ;Replace block marker
   269 000032F3 8A06                <1>     mov al, byte [rsi + mcb.marker]
   270 000032F5 8807                <1>     mov byte [rdi + mcb.marker], al
   271 000032F7 31C9                <1>     xor ecx, ecx
   272 000032F9 48890E              <1>     mov qword [rsi], rcx
   273 000032FC 48894E08            <1>     mov qword [rsi + 8], rcx
   274                              <1> .blockFoundExit:
   275 00003300 E8F2010000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   276 00003305 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   277 0000330C 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   278                              <1>     return
    18                              <2> %%_ret:
    19 00003310 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   279                              <1> .blockError:
   280 00003311 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   281 00003318 B809000000          <1>     mov eax, errMemAddr
   282 0000331D E8FF0D0000          <1>     call extErrExit ;Error thru the unified error handler
   283 00003322 E8D0010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   284                              <1>     return
    18                              <2> %%_ret:
    19 00003327 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   285                              <1> reallocMemory:     ;ah = 4Ah
   286                              <1> ;Input: r8 = address of the block to be realloc'ed
   287                              <1> ;       ebx = How many paras this block should contain after realloc. 
   288                              <1> ;               If ebx = 0, jump to free memory
   289 00003328 85DB                <1>     test ebx, ebx
   290 0000332A 0F8403FFFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   291 00003330 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   292 00003337 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   293 0000333A 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   294 0000333D 7409                <1>     je .ctn
   295 0000333F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   296 00003342 0F855F010000        <1>     jne .badAddrGiven
   297                              <1> .ctn:
   298                              <1>     ;Provided block is valid and not a hole
   299                              <1>     ;Check if Growth or Shrink
   300 00003348 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   301 00003350 74BF                <1>     je freeMemory.blockError
   302 00003352 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   303 00003355 31C9                <1>     xor ecx, ecx
   304 00003357 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   305 0000335A 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   306 0000335C 0F8786000000        <1>     ja .growth
   307 00003362 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   308                              <1> ;We can always shrink
   309 00003368 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   310 0000336A 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   311 00003370 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   312 00003373 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   313 00003379 48C1E304            <1>     shl rbx, 4
   314 0000337D 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   315 00003384 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   316 00003387 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   317 00003389 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   318 0000338C 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   319 0000338E 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   320 00003396 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   321 00003399 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   322 0000339B 0F84DB000000        <1>     je .exit
   323                              <1> ;Else, now see if the block following is also free and absorb it
   324 000033A1 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   325 000033A4 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   326 000033A8 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   327 000033AF 4801CE              <1>     add rsi, rcx    ;Goto next arena
   328 000033B2 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   329 000033B5 7409                <1>     je .shrinkAbsorb
   330 000033B7 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   331 000033BA 0F8564010000        <1>     jne badMCBChain
   332                              <1> .shrinkAbsorb:
   333 000033C0 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   334 000033C8 0F85AE000000        <1>     jne .exit
   335                              <1>     ;It is free, absorb it
   336 000033CE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   337 000033D1 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   338 000033D7 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   339 000033DA 31C9                <1>     xor ecx, ecx
   340                              <1>     ;Clear absorbed MCB
   341 000033DC 48890E              <1>     mov qword [rsi], rcx
   342 000033DF 48894E08            <1>     mov qword [rsi + 8], rcx
   343 000033E3 E994000000          <1>     jmp .exit
   344                              <1> .growth:
   345                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   346 000033E8 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   347 000033EB 0F84A0000000        <1>     je .notEnuffMem
   348                              <1> ;Now check the following space is free. If not, not enuff mem err
   349 000033F1 31C9                <1>     xor ecx, ecx
   350 000033F3 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   351 000033F6 48C1E104            <1>     shl rcx, 4
   352 000033FA 4889F7              <1>     mov rdi, rsi    
   353 000033FD 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   354 00003404 4801CE              <1>     add rsi, rcx
   355 00003407 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   356 0000340A 7409                <1>     je .growthOK
   357 0000340C 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   358 0000340F 0F850F010000        <1>     jne badMCBChain
   359                              <1> .growthOK:
   360                              <1>     ;rdi points to block we are growing
   361 00003415 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   362 0000341D 7572                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   363                              <1>     ;rsi must own all memory up to the next owned arena
   364 0000341F 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   365 00003421 31C9                <1>     xor ecx, ecx
   366 00003423 31D2                <1>     xor edx, edx
   367 00003425 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   368 00003428 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   369 0000342E 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   370 00003431 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   371 00003433 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   372 00003435 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   373 00003438 7759                <1>     ja .notEnuffMem1
   374 0000343A 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   375 0000343C 81FA01000000        <1>     cmp edx, 1
   376 00003442 7449                <1>     je .notEnuffMem2
   377 00003444 31C9                <1>     xor ecx, ecx
   378 00003446 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   379 00003449 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   380 0000344D 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   381 00003450 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   382 00003453 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   383 0000345A 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   384 0000345E 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   385 00003461 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   386 00003465 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   387                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   388                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   389 00003467 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   390 00003469 7411                <1>     jz .exit
   391 0000346B 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   392 00003471 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   393 00003474 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   394                              <1> .exit:
   395 0000347C E876000000          <1>     call verifyIntegrityOfMCBChain
   396 00003481 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   397 00003488 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   398                              <1>     return
    18                              <2> %%_ret:
    19 0000348C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   399                              <1> .notEnuffMem2:
   400 0000348D FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   401 0000348F EB02                <1>     jmp short .notEnuffMem1
   402                              <1> .notEnuffMem:
   403 00003491 31DB                <1>     xor ebx, ebx    ;No space to grow
   404                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   405 00003493 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   406 00003498 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   407 0000349F 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   408 000034A2 E97F000000          <1>     jmp mcbErrHdlr
   409                              <1> .badAddrGiven:
   410 000034A7 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   411 000034AC E975000000          <1>     jmp mcbErrHdlr
   412                              <1> getsetMallocStrat: ;ah = 58h
   413 000034B1 84C0                <1>     test al, al
   414 000034B3 741F                <1>     jz .get
   415 000034B5 3C02                <1>     cmp al, 2
   416 000034B7 7337                <1>     jae .bad
   417                              <1> ;Set here
   418 000034B9 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   419 000034C0 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   420 000034C4 8805(35C30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   421 000034CA 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   422 000034CE E824000000          <1>     call verifyIntegrityOfMCBChain
   423                              <1>     return
    18                              <2> %%_ret:
    19 000034D3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   424                              <1> .get:
   425 000034D4 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   426 000034DB 31C0                <1>     xor eax, eax
   427 000034DD 8A05(35C30300)      <1>     mov al, byte [allocStrat]
   428 000034E3 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   429 000034E6 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   430 000034EA E808000000          <1>     call verifyIntegrityOfMCBChain
   431                              <1>     return
    18                              <2> %%_ret:
    19 000034EF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   432                              <1> .bad:
   433 000034F0 B801000000          <1>     mov eax, errInvFnc
   434 000034F5 EB2F                <1>     jmp short mcbErrHdlr
   435                              <1> ;-----------------------------------:
   436                              <1> ;      Memory related routines      :
   437                              <1> ;-----------------------------------:
   438                              <1> verifyIntegrityOfMCBChain:
   439 000034F7 50                  <1>     push rax
   440 000034F8 53                  <1>     push rbx
   441 000034F9 488B1D(2BC00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   442                              <1> .ok:
   443 00003500 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   444 00003503 7408                <1>     je .ok1
   445 00003505 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   446 00003508 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   447                              <1> .exit:
   448 0000350A 5B                  <1>     pop rbx
   449 0000350B 58                  <1>     pop rax
   450                              <1>     return ;We have reached the end of the chain, return all good!
    18                              <2> %%_ret:
    19 0000350C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   451                              <1> .ok1:
   452 0000350D 31C0                <1>     xor eax, eax
   453 0000350F 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   454 00003512 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   455 00003516 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   456 0000351D 4801C3              <1>     add rbx, rax
   457 00003520 EBDE                <1>     jmp short .ok
   458                              <1> .bmcbPrep:
   459 00003522 5B                  <1>     pop rbx ;Pop off the stack first!
   460 00003523 58                  <1>     pop rax
   461                              <1> badMCBChain:
   462 00003524 B007                <1>     mov al, errMCBbad   ;Yikes!
   463                              <1> mcbErrHdlr:
   464                              <1>     ;Jumped to with eax = error code
   465 00003526 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   466 0000352D E8EF0B0000          <1>     call extErrExit ;Error thru the unified error handler
   467 00003532 3C07                <1>     cmp al, errMCBbad
   468                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003534 74D6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   469 00003536 EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    31                                  %include "./Source/Kernel/MemExec/execTerm.asm"
    32                              <1> ;EXEC and all default terminates are here
    33                              <1> 
    34                              <1> ;========================
    35                              <1> ;   Interrupt handlers
    36                              <1> ;========================
    37                              <1> terminateProcess:   ;Int 40h
    38 00003538 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
    39 0000353A E91B0A0000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
    40                              <1> terminateRes:       ;Int 47h
    41                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    42 0000353F 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    43 00003545 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    44 00003548 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    45 0000354D E9080A0000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    46                              <1> ;========================
    47                              <1> ;    Int 21h functions
    48                              <1> ;========================
    49                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    50                              <1> ;Input:
    51                              <1> ;rdx = Pointer to new PSP in memory.
    52                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    53                              <1> ;   Officially document that this MUST be paragraph aligned.
    54                              <1> ;rsi = alloc size for new psp block
    55 00003552 C605(76C40300)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    56 00003559 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    57 00003560 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    58 00003562 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    59 00003563 EB0C                <1>     jmp short copyPSP.pspCommon
    60                              <1> copyPSP:      ;ah = 26h
    61                              <1> ;Input:
    62                              <1> ;rdx = Pointer to new PSP in memory.
    63                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    64                              <1> ;   Officially document that this MUST be paragraph aligned.
    65 00003565 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    66 0000356C 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    67 00003570 53                  <1>     push rbx    ;Save this value for PSP allocsize
    68                              <1> .pspCommon:
    69 00003571 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    70 00003578 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    71 0000357C 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    72                              <1> ;r8 is current PSP, now copy psp to rdx
    73                              <1> ;Preserve rdx and r8 until the end
    74 00003580 4C89C6              <1>     mov rsi, r8
    75 00003583 4889D7              <1>     mov rdi, rdx
    76 00003586 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    77 0000358B F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    78 0000358E 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    79 00003596 F605(76C40300)FF    <1>     test byte [pspCopyFlg], -1
    80 0000359D 7449                <1>     jz .copy
    81                              <1>     ;Now reset the parent psp data
    82 0000359F 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    83 000035A7 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    84                              <1>     ;Now reset the copied jobFileTable
    85 000035AB 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    86 000035AF 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    87 000035B6 B0FF                <1>     mov al, -1
    88 000035B8 F3AA                <1>     rep stosb   ;Store maxHndls many -1's 
    89                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    90 000035BA 498D702A            <1>     lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    91 000035BE 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    92 000035C2 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    93                              <1> .xfrJFT:
    94 000035C9 67E31C              <1>     jecxz .copy
    95 000035CC FFC9                <1>     dec ecx
    96 000035CE AC                  <1>     lodsb   ;Get the SFTndx in al
    97 000035CF 0FB6D8              <1>     movzx ebx, al
    98 000035D2 53                  <1>     push rbx
    99 000035D3 E80DFAFFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
   100 000035D8 58                  <1>     pop rax
   101 000035D9 7508                <1>     jnz .badJFT
   102 000035DB AA                  <1>     stosb   ;Else store the SFTndx at that position... 
   103 000035DC E81BFAFFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
   104 000035E1 EBE6                <1>     jmp short .xfrJFT
   105                              <1> .badJFT:
   106 000035E3 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
   107 000035E6 EBE1                <1>     jmp short .xfrJFT 
   108                              <1> .copy:
   109 000035E8 C605(76C40300)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
   110 000035EF 58                  <1>     pop rax ;Pop the allocsize back into rax
   111 000035F0 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
   112                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
   113 000035F3 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
   114 000035F7 B042                <1>     mov al, 42h
   115 000035F9 E8E9060000          <1>     call muxGetIntVector    ;Get vector in rbx
   116 000035FE 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   117 00003601 48AB                <1>     stosq   ;Move rdi to next entry and store
   118 00003603 B043                <1>     mov al, 43h
   119 00003605 E8DD060000          <1>     call muxGetIntVector    ;Get vector in rbx
   120 0000360A 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   121 0000360D 48AB                <1>     stosq   ;Move rdi to next entry and store
   122 0000360F B044                <1>     mov al, 44h
   123 00003611 E8D1060000          <1>     call muxGetIntVector    ;Get vector in rbx
   124 00003616 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   125 00003619 48AB                <1>     stosq   ;Move rdi to next entry and store
   126                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   127 0000361B 66C70240CD          <1>     mov word [rdx + psp.return], 0CD40h  ;Int 40h
   128 00003620 C7425000CB40CD      <1>     mov dword [rdx + psp.unixEntry], 0CD40CB00h  ;Overlay next byte for prevPSP
   129                              <1>     return
    18                              <2> %%_ret:
    19 00003627 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   130                              <1> 
   131                              <1> terminateStayRes:  ;ah = 31h
   132                              <1> ;Input: al  = Error code
   133                              <1> ;       edx = Number of paragraphs to keep resident
   134 00003628 C605(60C60300)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   135                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   136 0000362F 81FA06000000        <1>     cmp edx, 6
   137 00003635 7305                <1>     jae .aboveMinimum
   138 00003637 BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   139                              <1> .aboveMinimum:
   140                              <1> ;Now we setup a call to Realloc 
   141                              <1> ;Setup regs with: 
   142                              <1> ;   r8 = address of the block to be realloc'ed
   143                              <1> ;   ebx = How many paras this block should contain after realloc.
   144 0000363C 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   145 00003643 89D3                <1>     mov ebx, edx
   146 00003645 50                  <1>     push rax    ;Preserve errorlevel across call
   147 00003646 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   148 00003647 E8DCFCFFFF          <1>     call reallocMemory
   149 0000364C 5B                  <1>     pop rbx
   150 0000364D 58                  <1>     pop rax
   151 0000364E 7220                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   152 00003650 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   153                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   154 00003654 EB1A                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   155                              <1> 
   156                              <1> simpleTerminate:   ;ah = 00h
   157 00003656 31C0                <1>     xor eax, eax    ;Just fall through as normal
   158                              <1> terminateClean:    ;ah = 4Ch, EXIT
   159                              <1> ;Here we must:
   160                              <1> ;0) Build errorlevel and adjust variables accordingly
   161                              <1> ;1) Call Network Termination hook.
   162                              <1> ;2) Check if the program is it's own parent. If so, return.
   163                              <1> ;3) Swap the console back to the original driver if it is swapped.
   164                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   165                              <1> ;4) Free all file handles associated to the current process.
   166                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   167                              <1> ;5) Free all memory blocks that have the signature of current PSP
   168                              <1> ;6) Set current PSP to parent PSP
   169                              <1> ;7) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   170                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   171                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   172                              <1> ;10) Exit all critical sections.
   173                              <1> ;
   174                              <1> ; Step 0
   175                              <1> ;For now, just adjust error level in var
   176 00003658 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   177 0000365A 8625(60C60300)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   178 00003660 F605(EDC30300)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   179 00003667 740D                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   180 00003669 C605(60C60300)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   181                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   182 00003670 8A25(60C60300)      <1>     mov ah, byte [exitType] ;Get the exitType
   183                              <1> .storeELvl:
   184 00003676 668905(91C30300)    <1>     mov word [errorLevel], ax   ;Store word
   185                              <1>     
   186                              <1> ; Step 1 Tell network a process is terminating
   187 0000367D B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   188 00003682 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   189 00003689 CD4F                <1>     int 4Fh
   190                              <1> 
   191                              <1> ; Step 2
   192                              <1> .step1:
   193 0000368B 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   194 00003692 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   195 00003695 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   196 00003699 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   197                              <1>     rete            ;If it is, simply return (al has errorLevel)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000369C 7489                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   198                              <1> ; Step 3
   199 0000369E E8F2E9FFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   200                              <1> ; Step 3.5
   201 000036A3 803D(60C60300)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   202 000036AA 0F8488000000        <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   203                              <1> ; Step 4
   204 000036B0 803D(60C60300)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   205 000036B7 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   206 000036B9 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   207 000036BE CD4F                <1>     int 4Fh
   208                              <1> .skipAbortNetClose:
   209 000036C0 4881C72A000000      <1>     add rdi, psp.jobFileTbl ;Move rdi to point to the start of the JFT
   210 000036C7 4889FE              <1>     mov rsi, rdi    ;Point rsi to jft too
   211 000036CA 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls] ;Number of entries in JFT
   212                              <1> .s4lp:
   213 000036D1 AC                  <1>     lodsb   ;Inc rsi, get the SFT number in al
   214 000036D2 3CFF                <1>     cmp al, -1  ;End of open JFT entries?
   215 000036D4 7429                <1>     je .step5
   216 000036D6 0FB6D8              <1>     movzx ebx, al   ;Move the file handle number into ebx
   217                              <1>     ;Replace with a call to close the handle eventually
   218 000036D9 57                  <1>     push rdi
   219 000036DA E89EF8FFFF          <1>     call derefSFTPtr    ;Ret in rdi the SFT pointer
   220 000036DF 7216                <1>     jc .badHdl  ;If a bad handle, skip the decrementing of the handle count
   221 000036E1 FF35(84C60300)      <1>     push qword [currentSFT]
   222 000036E7 E8E5F6FFFF          <1>     call setCurrentSFT  ;Set rdi to currentSFT
   223 000036EC E87FF3FFFF          <1>     call closeMain  ;Close all files opened by this program. Decrement ref ONLY
   224                              <1>     ;closeMain also flushes all sectors associated to the file
   225                              <1>     ;Ignore errors, simply keep closing files
   226 000036F1 8F05(84C60300)      <1>     pop qword [currentSFT]
   227                              <1> .badHdl:
   228 000036F7 5F                  <1>     pop rdi
   229 000036F8 B0FF                <1>     mov al, -1
   230 000036FA AA                  <1>     stosb   ;Store a -1 in it's place (not strictly necessary)
   231 000036FB FFC9                <1>     dec ecx ;Zoom Zoom \mu-op!
   232 000036FD 75D2                <1>     jnz .s4lp   ;Keep looping for all entries in the JFT 
   233                              <1> ;Step 5
   234                              <1> .step5:
   235 000036FF 488B1D(81C30300)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   236                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   237                              <1>     ; with the currentPSP signature and free them.
   238 00003706 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   239                              <1> .s5lp:  ;And walk the chain
   240                              <1> ;First verify the address in rsi is a valid mcb
   241 0000370D 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   242 0000370F 80F94D              <1>     cmp cl, mcbMarkCtn
   243 00003712 7405                <1>     je .checkToFree
   244 00003714 80F95A              <1>     cmp cl, mcbMarkEnd
   245 00003717 751F                <1>     jne .step6  ;Something wrong so stop freeing
   246                              <1> .checkToFree:
   247 00003719 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   248 0000371D 7508                <1>     jne .noFree
   249 0000371F 4989F0              <1>     mov r8, rsi ;Move pointer to r8
   250 00003722 E80CFBFFFF          <1>     call freeMemory ;Free this memory block
   251                              <1>     ;If an error occured, the internal vars will be set.
   252                              <1> .noFree:
   253 00003727 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   254 0000372A 740C                <1>     je .step6   ;Skip if we are
   255 0000372C 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   256 0000372F 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   257 00003733 4801C6              <1>     add rsi, rax    ;Goto next mcb block
   258 00003736 EBD5                <1>     jmp short .s5lp
   259                              <1> ;Step 6
   260                              <1> .step6:
   261 00003738 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   262 0000373C 488905(81C30300)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   263                              <1> ;Step 7
   264                              <1>     ;rbx points to current PSP, the old parent task
   265                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   266 00003743 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   267 00003747 B044                <1>     mov al, 44h
   268 00003749 E87A0B0000          <1>     call setIntVector
   269 0000374E 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   270 00003752 B043                <1>     mov al, 43h
   271 00003754 E86F0B0000          <1>     call setIntVector
   272 00003759 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   273 0000375D B042                <1>     mov al, 42h
   274 0000375F E8640B0000          <1>     call setIntVector
   275                              <1> 
   276                              <1> ;Step 8
   277                              <1>     ;Make the parent register frame the current one
   278 00003764 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   279                              <1> ;Step 9
   280 00003768 4889E5              <1>     mov rbp, rsp ;Get pointer to parent stack register frame in rbp
   281 0000376B 48895548            <1>     mov qword [rbp + callerFrame.rip], rdx  ;Store return address vector here
   282                              <1> ;Step 10
   283 0000376F B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   284 00003771 CD4A                <1>     int 4ah
   285                              <1>     return
    18                              <2> %%_ret:
    19 00003773 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   286                              <1> 
   287                              <1> loadExecChild:     ;ah = 4Bh, EXEC
   288                              <1>     return
    18                              <2> %%_ret:
    19 00003774 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    32                                  %include "./Source/Kernel/Local/Local.asm"
    33                              <1> ;Localisation based functions live here
    34                              <1> 
    35                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    36                              <1> ;al = 0 => Get the switch char
    37                              <1> ;al = 1 => Set the switch char to whats in DL
    38                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
    39                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
    40                              <1> ;       Always returns -1 => /DEV/ optional
    41                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    42                              <1> ;       Input value is ignored
    43 00003775 3C01                <1>     cmp al, 01
    44 00003777 7412                <1>     je .getSC
    45 00003779 7209                <1>     jb .setSC
    46 0000377B 3C03                <1>     cmp al, 03
    47 0000377D 7214                <1>     jb .getDev
    48 0000377F 741C                <1>     je .setDev
    49 00003781 B0FF                <1>     mov al, -1
    50                              <1>     return
    18                              <2> %%_ret:
    19 00003783 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    51                              <1> .setSC:
    52 00003784 8815(33C30300)      <1>     mov byte [switchChar], dl
    53                              <1>     return
    18                              <2> %%_ret:
    19 0000378A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> .getSC:
    55 0000378B 8A15(33C30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    56 00003791 EB02                <1>     jmp short .getRet
    57                              <1> .getDev:
    58 00003793 B2FF                <1>     mov dl, -1
    59                              <1> .getRet:
    60 00003795 E85B050000          <1>     call getUserRegs
    61 0000379A 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    62                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    63                              <1>     return
    18                              <2> %%_ret:
    19 0000379D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> 
    66                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    67                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    68                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    69 0000379E C3                  <1>     ret
    33                                  %include "./Source/Kernel/ctrlc.asm"
    34                              <1> diskDevErr:
    35                              <1> ;Called, NOT Jumped to. 
    36                              <1> ;Input: rdi = Disk Buffer pointer
    37                              <1> ;       eax = Status word (Zero Extended)
    38                              <1> ;       rbp = Disk DPB pointer
    39                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    40                              <1> ;Output: al = Int 44h response (0-3)
    41                              <1> ; All other registers preserved
    42 0000379F 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    43 000037A6 89C7                <1>     mov edi, eax    ;Store status word in rdi
    44 000037A8 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    45 000037AB 8A25(C9C30300)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    46 000037B1 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    47                              <1>     ;Test for correct buffer data type
    48 000037B4 53                  <1>     push rbx    ;Save rbx temporarily
    49 000037B5 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    50 000037B8 F6C301              <1>     test bl, dosBuffer
    51 000037BB 7505                <1>     jnz .df0
    52 000037BD 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    53 000037C0 EB17                <1>     jmp short .df3
    54                              <1> .df0:
    55 000037C2 F6C302              <1>     test bl, fatBuffer
    56 000037C5 7505                <1>     jnz .df1
    57 000037C7 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    58 000037CA EB0D                <1>     jmp short .df3
    59                              <1> .df1:
    60 000037CC F6C304              <1>     test bl, dirBuffer
    61 000037CF 7505                <1>     jnz .df2
    62 000037D1 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    63 000037D4 EB03                <1>     jmp short .df3
    64                              <1> .df2:
    65 000037D6 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    66                              <1> .df3:
    67 000037D9 5B                  <1>     pop rbx
    68 000037DA 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    69 000037DE E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    70 000037E3 488B2D(DFC60300)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    71 000037EA 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    72                              <1>     return
    18                              <2> %%_ret:
    19 000037F1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    73                              <1> 
    74                              <1> charDevErr:
    75                              <1> ;Called with ah with additional bits
    76 000037F2 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
    77                              <1> criticalErrorSetup:
    78 000037F5 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    79 000037FB 48892D(DFC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    80 00003802 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    81                              <1>     ;For now, fall through, but need much work to change it later! 
    82                              <1> 
    83                              <1> 
    84                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    85                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    86                              <1> ; to the critical error handler.
    87                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    88                              <1> ; and with Int44Bitfield set
    89                              <1> ;               AH = Critical Error Bitfield
    90                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    91                              <1> ;               Bit 6 - Reserved
    92                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    93                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    94                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    95                              <1> ;               Bits [2-1] = Affected Disk Error
    96                              <1> ;                     0 0   DOS area
    97                              <1> ;                     0 1   FAT area
    98                              <1> ;                     1 0   Directory area
    99                              <1> ;                     1 1   Data area
   100                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   101                              <1> ;               AL  = Failing drive number if AH[7] = 0
   102                              <1> ;               DIL = Error code for errorMsg
   103                              <1> ;               RSI = EA of Device Header for which device the error occured
   104                              <1> ;Return:
   105                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   106                              <1> ;                  = 1 - Retry the Operation    (Retry)
   107                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   108                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   109                              <1> ; Return response from int 44h in al
   110                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   111                              <1> ; This function will terminate the program if an abort was requested!
   112                              <1> ; This function also destroys RBP
   113 00003808 803D(69C30300)01    <1>     cmp byte [critErrFlag], 1
   114 0000380F 7204                <1>     jb .noIntError  ;If not 0, enter
   115 00003811 B003                <1>     mov al, critFail    ;Else, return Fail always
   116 00003813 EB4F                <1>     jmp short .exit     ;Don't translate fail to abort
   117                              <1> .noIntError:
   118 00003815 FA                  <1>     cli ;Disable Interrupts
   119 00003816 FE05(69C30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   120 0000381C FE0D(6AC30300)      <1>     dec byte [inDOS]    ;Exiting DOS
   121 00003822 488925(C1C30300)    <1>     mov qword [xInt44hRSP], rsp
   122 00003829 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   123 00003830 31ED                <1>     xor ebp, ebp    ;Always zeroed
   124 00003832 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   125 00003834 488B25(C1C30300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   126 0000383B C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   127 00003842 FE05(6AC30300)      <1>     inc byte [inDOS]    ;Reenter DOS
   128 00003848 FB                  <1>     sti ;Reenable Interrupts
   129                              <1>     ;Now we check that the response given was allowed, and translate if needed
   130                              <1> .checkResponse:
   131 00003849 3C01                <1>     cmp al, critRetry
   132 0000384B 721F                <1>     jb .checkIgnore
   133 0000384D 7428                <1>     je .checkRetry
   134 0000384F 3C03                <1>     cmp al, critFail
   135 00003851 752F                <1>     jne .abort   ;Must be abort
   136                              <1> .setFail:   ;Here is for fail
   137 00003853 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   138 00003855 FE05(CBC30300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   139 0000385B F605(C9C30300)08    <1>     test byte [Int44bitfld], critFailOK
   140 00003862 751E                <1>     jnz .abort  ;If fail not permitted, abort
   141                              <1> .exit:
   142 00003864 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   143                              <1>     return
    18                              <2> %%_ret:
    19 0000386B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> .checkIgnore:
   145 0000386C F605(C9C30300)20    <1>     test byte [Int44bitfld], critIgnorOK
   146 00003873 75EF                <1>     jnz .exit
   147 00003875 EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   148                              <1> .checkRetry:
   149 00003877 F605(C9C30300)10    <1>     test byte [Int44bitfld], critRetryOK
   150 0000387E 75E4                <1>     jnz .exit   
   151 00003880 EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   152                              <1> .abort:
   153                              <1> ;Prepare to abort. We abort from within!
   154                              <1>     ;First check if the process is it's own parent.
   155                              <1>     ;If it is, we exit fail and return to the process
   156 00003882 488B05(81C30300)    <1>     mov rax, qword [currentPSP] ;Get the current psp
   157 00003889 53                  <1>     push rbx
   158 0000388A 488B5822            <1>     mov rbx, qword [rax + psp.parentPtr]
   159 0000388E 4839C3              <1>     cmp rbx, rax    ;Check if the process is it's own parent
   160 00003891 5B                  <1>     pop rbx
   161 00003892 7509                <1>     jne .kill   ;If the process is not it's own parent, we kill the process
   162 00003894 C605(F7C30300)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   163 0000389B EBB6                <1>     jmp short .setFail
   164                              <1> .kill:
   165 0000389D 66893D(6DC30300)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   166 000038A4 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   167 000038A6 C605(60C60300)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   168 000038AD E9BEFDFFFF          <1>     jmp terminateClean.altEP
   169                              <1> 
   170                              <1> ctrlBreakHdlr:
   171 000038B2 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   172 000038B4 E80AE7FFFF          <1>     call printCaretASCII
   173 000038B9 E835E7FFFF          <1>     call printCRLF
   174                              <1>     ;Reset the console back to 0
   175 000038BE C605(F5C30300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   176                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   177 000038C5 FA                  <1> 	cli
   178 000038C6 488B25(DCC30300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   179 000038CD E8E2070000          <1> 	call dosPopRegs ;Get user state back
   180 000038D2 488925(89C30300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   181 000038D9 F8                  <1>     clc
   182 000038DA CD43                <1>     int 43h ;Call critical error handler
   183 000038DC FA                  <1>     cli ;Clear interrupts again
   184 000038DD 488905(95C30300)    <1>     mov qword [oldRAX], rax ;Save rax
   185 000038E4 9C                  <1>     pushfq  ;Get flags in rax
   186 000038E5 58                  <1>     pop rax 
   187 000038E6 483B25(89C30300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   188 000038ED 750C                <1>     jne .checkCF
   189                              <1> .returnToDOS:
   190 000038EF 488B05(95C30300)    <1>     mov rax, qword [oldRAX]
   191 000038F6 E95F060000          <1>     jmp functionDispatch    ;Goto int 41h
   192                              <1> .checkCF:
   193 000038FB 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   194 00003902 A801                <1>     test al, 1  ;CF set?
   195 00003904 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   196 00003906 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   197 0000390B C605(EDC30300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   198 00003912 E943060000          <1>     jmp functionDispatch
   199                              <1> 
    34                                  %include "./Source/Kernel/dosPrim.asm"
    35                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    36                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    37                              <1> 
    38                              <1> dosDefCritErrHdlr:
    39                              <1> ;The DOS default critical error handler always returns FAIL
    40 00003917 B003                <1>     mov al, critFail
    41 00003919 48CF                <1>     iretq
    42                              <1> goDriverChar:
    43                              <1> ;Shortcut for Char requests, make a driver request
    44                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    45 0000391B 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    46                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    47                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    48                              <1> ;       rbx = Ptr to the request header for the driver call!
    49 0000391F E8D2070000          <1>     call dosCrit2Enter
    50 00003924 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    51 00003927 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    52 0000392A E8D1070000          <1>     call dosCrit2Exit
    53                              <1>     return
    18                              <2> %%_ret:
    19 0000392F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> 
    55                              <1> setupPhysicalDiskRequest:
    56                              <1> ;Ensure that al has valid disk number
    57                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    58                              <1> ;If CF=NC, rbp = DPB ptr.
    59                              <1> ;If CF=CY, exit error
    60 00003930 84C0                <1>     test al, al
    61 00003932 723F                <1>     jc .diskError
    62 00003934 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
    63 0000393A 7337                <1>     jae .diskError
    64 0000393C 50                  <1>     push rax
    65 0000393D FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    66 0000393F E83E040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    67 00003944 58                  <1>     pop rax
    68 00003945 7235                <1>     jc .error
    69 00003947 8805(63C60300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    70 0000394D 488B2D(6CC60300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    71 00003954 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    72 0000395C 750A                <1>     jnz .netError
    73 0000395E 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    74 00003962 E819030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    75                              <1>     return
    18                              <2> %%_ret:
    19 00003967 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    76                              <1> .netError:
    77 00003968 66C705(6DC30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    77 00003970 00                  <1>
    78 00003971 EB09                <1>     jmp short .error
    79                              <1> .diskError:
    80 00003973 66C705(6DC30300)0F- <1>     mov word [errorExCde], errBadDrv
    80 0000397B 00                  <1>
    81                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    82 0000397C C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
    83 00003983 C605(6FC30300)07    <1>     mov byte [errorAction], eActRetUsr
    84 0000398A C605(70C30300)09    <1>     mov byte [errorClass], eClsBadFmt
    85 00003991 F9                  <1>     stc
    86                              <1>     return
    18                              <2> %%_ret:
    19 00003992 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    87                              <1> 
    88                              <1> setupAbsDiskEntry:
    89                              <1> ;Prepares to sets up the CDS and DPB for the request
    90 00003993 FE05(6AC30300)      <1>     inc byte [inDOS]
    91 00003999 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    92 0000399A FC                  <1>     cld ;Set string ops in the right direction
    93 0000399B E890FFFFFF          <1>     call setupPhysicalDiskRequest
    94 000039A0 7223                <1>     jc .exit    ;Error exit
    95 000039A2 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    96 000039A9 56                  <1>     push rsi
    97 000039AA 50                  <1>     push rax
    98 000039AB 488D35(7FC40300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    99 000039B2 8806                <1>     mov byte [rsi], al  ;Construct a path
   100 000039B4 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   101 000039B7 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   102 000039BB F8                  <1>     clc
   103                              <1> ;++++++++++++++++++++++++++++
   104                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   105                              <1> ;Entered with path in rsi (ah=03h)
   106 000039BC B800030000          <1>     mov eax, 0300h  
   107 000039C1 CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   108                              <1> ;++++++++++++++++++++++++++++
   109 000039C3 58                  <1>     pop rax
   110 000039C4 5E                  <1>     pop rsi
   111                              <1> .exit:
   112 000039C5 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   113                              <1>     return
    18                              <2> %%_ret:
    19 000039C7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> absDiskWrite:       ;Int 46h
   116                              <1> ;al = Drive number
   117                              <1> ;rbx = Memory Buffer address to read from
   118                              <1> ;ecx = Number of sectors to write
   119                              <1> ;rdx = Start LBA to write to
   120 000039C8 FA                  <1>     cli
   121 000039C9 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   122 000039D0 488D25(DFD80300)    <1>     lea rsp, DiskStakTop
   123 000039D7 55                  <1>     push rbp
   124 000039D8 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   125 000039D9 E8B5FFFFFF          <1>     call setupAbsDiskEntry
   126 000039DE 7252                <1>     jc absDiskExit
   127 000039E0 E8B0010000          <1>     call primReqWriteSetup
   128 000039E5 EB1D                <1>     jmp short absDiskReadWriteCommon
   129                              <1> absDiskRead:        ;Int 45h
   130                              <1> ;al = Drive number
   131                              <1> ;rbx = Memory Buffer address to write to
   132                              <1> ;ecx = Number of sectors to read
   133                              <1> ;rdx = Start LBA to read from
   134 000039E7 FA                  <1>     cli 
   135 000039E8 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   136 000039EF 488D25(DFD80300)    <1>     lea rsp, DiskStakTop
   137 000039F6 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   138 000039F7 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   139 000039F8 E896FFFFFF          <1>     call setupAbsDiskEntry
   140 000039FD 7233                <1>     jc absDiskExit
   141 000039FF E89C010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   142                              <1> absDiskReadWriteCommon:
   143                              <1> ;Entered with the appropriate function number in ah
   144                              <1> ; and primary request header in rbx
   145 00003A04 E83B000000          <1>     call absDiskDriverCall
   146 00003A09 7427                <1>     jz absDiskExit  ;Skip error code checking
   147 00003A0B 8A05(25C40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   148                              <1>     ;DOS uses the following pairs in a table
   149                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   150 00003A11 B480                <1>     mov ah, 80h ;Attachment failure
   151 00003A13 3C0C                <1>     cmp al, 0Ch ;Gen error
   152 00003A15 741A                <1>     je .absExit
   153 00003A17 B440                <1>     mov ah, 40h ;Seek error
   154 00003A19 3C06                <1>     cmp al, 06h
   155 00003A1B 7414                <1>     je .absExit
   156 00003A1D B408                <1>     mov ah, 08h ;Bad CRC
   157 00003A1F 3C04                <1>     cmp al, 04h
   158 00003A21 740E                <1>     je .absExit
   159 00003A23 B404                <1>     mov ah, 04h ;Sector not found
   160 00003A25 3C08                <1>     cmp al, 08h
   161 00003A27 7408                <1>     je .absExit
   162 00003A29 30E4                <1>     xor ah, ah  ;Write Protect Violation
   163 00003A2B 84C0                <1>     test al, al
   164 00003A2D 7402                <1>     je .absExit
   165 00003A2F B402                <1>     mov ah, 02h ;Other Error
   166                              <1> .absExit:
   167 00003A31 F9                  <1>     stc
   168                              <1> absDiskExit:
   169 00003A32 5B                  <1>     pop rbx
   170 00003A33 5D                  <1>     pop rbp
   171 00003A34 FA                  <1>     cli
   172 00003A35 FE0D(6AC30300)      <1>     dec byte [inDOS]
   173 00003A3B 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]
   174 00003A42 FB                  <1>     sti ;Reenable interrupts
   175                              <1>     return ;Return from interrupt without popping flags!
    18                              <2> %%_ret:
    19 00003A43 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   176                              <1> absDiskDriverCall:
   177                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   178                              <1> ;       rbx = Request header address
   179                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   180                              <1> ;       eax = Status word from request
   181                              <1> ;       ecx = Number of sectors transferred
   182 00003A44 56                  <1>     push rsi
   183                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   184 00003A45 8B0D(38C40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   185                              <1>     ;Prepare for goDriver now
   186 00003A4B 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   187 00003A4F E8CBFEFFFF          <1>     call goDriver   ;Make request
   188 00003A54 5E                  <1>     pop rsi
   189 00003A55 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   190 00003A5B 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   191 00003A5D 0FB705(25C40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   192 00003A64 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   193                              <1>     return
    18                              <2> %%_ret:
    19 00003A68 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   194                              <1> 
   195                              <1> getDiskDPB:
   196                              <1> ;Gets the disk DPB if the Disk is valid
   197                              <1> ;Otherwise will return a pointer to the drive DPB
   198                              <1> ;Called with rdi pointing to the CDS
   199                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   200 00003A69 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   201 00003A6D 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   202 00003A70 8805(63C60300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   203 00003A76 E805020000          <1>     call setWorkingDPB
   204 00003A7B 57                  <1>     push rdi    ;Save the CDS ptr
   205 00003A7C E837000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   206 00003A81 5F                  <1>     pop rdi
   207 00003A82 7233                <1>     jc .exitBad ;Preserve CF
   208 00003A84 7530                <1>     jnz .exit
   209                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   210 00003A86 8A0D(70C00300)      <1>     mov cl, byte [lastdrvNum]
   211 00003A8C 31C0                <1>     xor eax, eax
   212 00003A8E 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   213 00003A91 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   214 00003A95 488B3D(5DC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   215                              <1> .checkCDS:
   216 00003A9C 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   217 00003AA0 7509                <1>     jne .next
   218 00003AA2 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   219 00003AA6 7403                <1>     jz .next    ;IF yes, skip it
   220 00003AA8 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   221                              <1> .next:
   222 00003AAB 4881C75B000000      <1>     add rdi, cds_size
   223 00003AB2 FEC9                <1>     dec cl
   224 00003AB4 75E6                <1>     jnz .checkCDS
   225                              <1> .exit:
   226 00003AB6 F8                  <1>     clc
   227                              <1> .exitBad:
   228                              <1>     return
    18                              <2> %%_ret:
    19 00003AB7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   229                              <1> 
   230                              <1> ensureDiskValid:
   231                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   232                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   233                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   234                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   235                              <1> .medChk:
   236 00003AB8 E82C010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   237                              <1> ;Return in rbx the req hdr address
   238 00003ABD 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   239 00003AC1 E859FEFFFF          <1>     call goDriver   ;Request!
   240 00003AC6 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   241 00003ACA F7C700800000        <1>     test edi, drvErrStatus
   242 00003AD0 756F                <1>     jnz .diskDrvCritErrMedChk
   243                              <1> .medChkIgnore:
   244 00003AD2 8A05(63C60300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   245 00003AD8 30E4                <1>     xor ah, ah
   246 00003ADA 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   247 00003ADD 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   248 00003AE0 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   249 00003AE2 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   250 00003AE4 E861CEFFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   251 00003AE9 F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   252 00003AEA 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   253                              <1>     ;ZF=NZ from test for dirty buffers
   254                              <1> .exit:
   255                              <1>     return
    18                              <2> %%_ret:
    19 00003AEC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   256                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   257 00003AED C605(E7D80300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   258 00003AF4 E875CEFFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   259                              <1>     ;Get a buffer to read BPB into in rdi
   260 00003AF9 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   261 00003AFB E811D0FFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   262 00003B00 72EA                <1>     jc .exit    ;Immediately exit with the carry flag set
   263 00003B02 4889DF              <1>     mov rdi, rbx
   264                              <1> .repeatEP:
   265 00003B05 E80B010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   266 00003B0A 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   267 00003B0E E80CFEFFFF          <1>     call goDriver   ;Request!
   268 00003B13 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   269 00003B17 A900800000          <1>     test eax, drvErrStatus
   270 00003B1C 7561                <1>     jnz .diskDrvCritErrBPB
   271                              <1>     ;Now rebuild the dpb fields for this drive
   272 00003B1E 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   273 00003B22 E8B3080000          <1>     call createDPB  
   274 00003B27 E864CEFFFF          <1>     call setBufferReferenced    ;We are now done with the buffer
   275                              <1>     ;Adjust the buffer header information
   276 00003B2C 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   277 00003B2F 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   278 00003B32 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   279 00003B35 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   280 00003B38 30E4                <1>     xor ah, ah
   281 00003B3A 8825(E7D80300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   282                              <1>     return
    18                              <2> %%_ret:
    19 00003B40 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   283                              <1> .diskDrvCritErrMedChk:
   284                              <1> ;Critical Errors fall through here
   285                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   286 00003B41 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   287 00003B48 48892D(DFC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   288 00003B4F 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   289 00003B52 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   290 00003B54 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   291 00003B5A E8A9FCFFFF          <1>     call criticalDOSError
   292 00003B5F 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]
   293 00003B66 488B2D(DFC60300)    <1>     mov rbp, qword [tmpDPBPtr]
   294 00003B6D 3C01                <1>     cmp al, critRetry
   295 00003B6F 0F8443FFFFFF        <1>     je .medChk
   296 00003B75 3C00                <1>     cmp al, critIgnore
   297 00003B77 0F8455FFFFFF        <1>     je .medChkIgnore
   298 00003B7D F9                  <1>     stc ;Set error flag to indicate fail
   299                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00003B7E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   300                              <1> 
   301                              <1> .diskDrvCritErrBPB:
   302                              <1>     ;eax has status word, rbp has dpb ptr
   303                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   304 00003B7F C605(C9C30300)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   305 00003B86 E814FCFFFF          <1>     call diskDevErr
   306 00003B8B 3C01                <1>     cmp al, critRetry
   307 00003B8D 0F8472FFFFFF        <1>     je .repeatEP
   308                              <1>     ;Else we fail (Ignore=Fail here)
   309 00003B93 F9                  <1>     stc ;Set error flag to indicate fail
   310                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00003B94 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   311                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   312                              <1> ;           Primitive Driver Requests
   313                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   314                              <1> ;First are Disk requests, then Char device requests
   315                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   316                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   317                              <1> 
   318                              <1> primReqWriteSetup:
   319 00003B95 50                  <1>     push rax
   320 00003B96 B408                <1>     mov ah, drvWRITE    ;Command code
   321 00003B98 0225(32C30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   322 00003B9E EB03                <1>     jmp short primReqRWCommon
   323                              <1> primReqReadSetup:
   324 00003BA0 50                  <1>     push rax
   325 00003BA1 B404                <1>     mov ah, drvREAD
   326                              <1> primReqRWCommon:
   327                              <1> ;Sets up the IO request packet with:
   328                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   329                              <1> ; rbx = Data storage buffer ptr
   330                              <1> ; ecx = Number of sectors to transfer
   331                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   332                              <1> ; ~~~~ Set by entry function ~~~~ 
   333                              <1> ; ah = Command code
   334                              <1> ; All regs preserved EXCEPT rbx.
   335                              <1> ; Return: rbx = Transfer Address
   336 00003BA3 48891D(30C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   337 00003BAA 890D(38C40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   338 00003BB0 C605(22C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   339 00003BB7 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   340 00003BBC 8905(23C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   341 00003BC2 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   342 00003BC5 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   343                              <1>     ;Disk operations only here!
   344 00003BC7 488915(3CC40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   345 00003BCE 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   346 00003BD1 8805(2FC40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   347 00003BD7 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   348 00003BDA 8805(23C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   349                              <1> primReqCommonExit:
   350                              <1> ;Returns in rbx the primary request header as these functions
   351                              <1> ; setup the request in the primary request header space
   352 00003BE0 58                  <1>     pop rax
   353 00003BE1 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   354                              <1>     return
    18                              <2> %%_ret:
    19 00003BE8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   355                              <1> 
   356                              <1> primReqMedCheckSetup:
   357                              <1> ;Prepare the diskIO packet for mediacheck
   358                              <1> ;rbp has DPB pointer for device to check media on
   359 00003BE9 50                  <1>     push rax
   360 00003BEA C605(22C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   361 00003BF1 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   362 00003BF4 8805(2FC40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   363 00003BFA 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   364 00003BFD 8805(23C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   365 00003C03 C605(24C40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   366 00003C0A 66C705(25C40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   366 00003C12 00                  <1>
   367 00003C13 EBCB                <1>     jmp short primReqCommonExit
   368                              <1> 
   369                              <1> primReqGetBPBSetup:
   370                              <1> ;rbp has DPB pointer for device
   371                              <1> ;rdi has sector buffer header pointer for transfer
   372 00003C15 50                  <1>     push rax
   373 00003C16 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   374 00003C1A 48893D(30C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   375 00003C21 C605(22C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   376 00003C28 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   377 00003C2B 8805(2FC40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   378 00003C31 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   379 00003C34 8805(23C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   380 00003C3A C605(24C40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   381 00003C41 66C705(25C40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   381 00003C49 00                  <1>
   382 00003C4A EB94                <1>     jmp short primReqCommonExit
   383                              <1> 
   384                              <1> primReqOpenSetup:
   385                              <1> ;al = unit number if a disk device. Undefined otherwise
   386 00003C4C 50                  <1>     push rax
   387 00003C4D B40D                <1>     mov ah, drvOPEN
   388                              <1> primReqCloseSetup:
   389                              <1> ;al = unit number if a disk device. Undefined otherwise
   390 00003C4F 50                  <1>     push rax
   391 00003C50 B40E                <1>     mov ah, drvCLOSE
   392                              <1> primReqOCcommon:
   393 00003C52 C605(22C40300)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   394 00003C59 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   395 00003C5A 8905(23C40300)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   396                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   397 00003C60 E97BFFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   398                              <1> 
   399                              <1> secdReqCharIOReq:
   400                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   401                              <1> ;Input:
   402                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   403                              <1> ; ecx = Length of buffer
   404                              <1> ; rdi = Buffer pointer
   405                              <1> ;Output: 
   406                              <1> ; rbx = Transfer Address 
   407 00003C65 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   408 00003C6C C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   409 00003C6F 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   410 00003C72 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   411 00003C78 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   412 00003C7C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   413                              <1>     return
    18                              <2> %%_ret:
    19 00003C7F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   414                              <1> ;If the device which will process this request is a disk device
   415                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   416                              <1> ;Then we will read the appropriate byte from that buffer to the 
   417                              <1> ; singleIOByt buffer.
   418                              <1> ;Such a request will require additional setup with the following fields:
   419                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    35                                  %include "./Source/Kernel/dosUtils.asm"
    36                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    37                              <1> 
    38                              <1> ;Basic Drive related Utilities
    39                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    40                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    41                              <1> ; that gets set up)
    42                              <1> 
    43                              <1> setWorkingDPB:
    44                              <1> ;Gets dpb in rbp and saves to workingDPB
    45 00003C80 48892D(64C60300)    <1>     mov qword [workingDPB], rbp
    46                              <1>     return
    18                              <2> %%_ret:
    19 00003C87 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    47                              <1> 
    48                              <1> testCDSNet:
    49                              <1> ;Checks if the workingCDS is a redirector drive
    50                              <1> ;Return: rdi = workingCDS
    51                              <1> ;        CF=NC => Net
    52                              <1> ;        CF=CY => Not net or invalid CDS
    53 00003C88 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
    54 00003C8F 4881FFFFFFFFFF      <1>     cmp rdi, -1
    55 00003C96 7409                <1>     je .notNet
    56 00003C98 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    57 00003C9E 7501                <1>     jnz .notNet ;Carry flag will always be clear
    58                              <1>     return
    18                              <2> %%_ret:
    19 00003CA0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    59                              <1> .notNet:
    60 00003CA1 F9                  <1>     stc
    61                              <1>     return
    18                              <2> %%_ret:
    19 00003CA2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> getDiskData:
    64                              <1> ;This function returns:
    65                              <1> ;al = sectors per cluster
    66                              <1> ;ah = media ID byte
    67                              <1> ;ebx = total clusters
    68                              <1> ;cx = bytes per sector
    69                              <1> ;edx = number of available clusters
    70                              <1> ;
    71                              <1> ;If CF=CY on exit, al contains the error code
    72 00003CA3 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    73 00003CA8 7308                <1>     jnc .physical
    74                              <1>     ;Beep a redir request out
    75 00003CAA B80C110000          <1>     mov eax, 110Ch 
    76 00003CAF CD4F                <1>     int 4Fh
    77                              <1>     return
    18                              <2> %%_ret:
    19 00003CB1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    78                              <1> .physical:
    79                              <1> ;Now we must lock the structures
    80 00003CB2 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
    81 00003CB9 E824040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    82 00003CBE E8A6FDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    83 00003CC3 721C                <1>     jc .exit
    84 00003CC5 E8BDCFFFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    85 00003CCA 7215                <1>     jc .exit
    86 00003CCC 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    87 00003CCF FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    88 00003CD1 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    89 00003CD4 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    90 00003CD7 FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
    91 00003CD9 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    92 00003CDD 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    93 00003CE0 F8                  <1>     clc
    94                              <1> .exit:
    95 00003CE1 E806040000          <1>     call dosCrit1Exit
    96                              <1>     return
    18                              <2> %%_ret:
    19 00003CE6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    97                              <1> 
    98                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
    99                              <1> ;Input: al = Interrupt number
   100                              <1> ;Output: rbx = Interrupt Vector
   101 00003CE7 50                  <1>     push rax    ;Preserve rax, segment selector returned by call
   102 00003CE8 52                  <1>     push rdx    ;Preserve rdx, Attribute Word returned by call
   103 00003CE9 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   104 00003CEB B807F00000          <1>     mov eax, 0F007h
   105 00003CF0 CD35                <1>     int 35h
   106 00003CF2 5A                  <1>     pop rdx
   107 00003CF3 58                  <1>     pop rax
   108                              <1>     return
    18                              <2> %%_ret:
    19 00003CF4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   109                              <1> 
   110                              <1> getUserRegs:   ;Int 4Fh AX=1218h
   111                              <1> ;Returns ptr to user regs in rsi
   112 00003CF5 488B35(DCC30300)    <1>     mov rsi, qword [oldRSP]
   113                              <1>     return
    18                              <2> %%_ret:
    19 00003CFC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> walkDPBchain:
   116                              <1> ;Called with al = 0 based drive number
   117                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
   118 00003CFD 488B35(3BC00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
   119                              <1> .walk:
   120 00003D04 4881FEFFFFFFFF      <1>     cmp rsi, -1
   121 00003D0B 740A                <1>     je .exitBad
   122 00003D0D 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   123 00003D0F 7407                <1>     je .exit    ;Drive found
   124 00003D11 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   125 00003D15 EBED                <1>     jmp short .walk
   126                              <1> .exitBad:
   127 00003D17 F9                  <1>     stc
   128                              <1> .exit:
   129                              <1>     return
    18                              <2> %%_ret:
    19 00003D18 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   130                              <1> setDrive:   
   131                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
   132                              <1> ;Input: al = 1-based drive number
   133                              <1> ;Output: al = 0-based drive number
   134                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   135                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   136                              <1> ;            set.
   137 00003D19 E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   138 00003D1E 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   139 00003D20 56                  <1>     push rsi
   140 00003D21 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   141 00003D28 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   142 00003D2E 5E                  <1>     pop rsi
   143 00003D2F 7401                <1>     jz .exit
   144 00003D31 F9                  <1>     stc
   145                              <1> .exit:
   146                              <1>     return
    18                              <2> %%_ret:
    19 00003D32 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   147                              <1> 
   148                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   149                              <1> ;Allows a redirector or subst/join to build a CDS
   150                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   151                              <1> ; volumes, that are made at system boot.
   152                              <1> ;Input: al = Drive Letter for drive
   153                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   154                              <1> ;Output: rdi = newly filled in workingCDS
   155                              <1> ;CF=NC => CDS valid and has a DPB
   156                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   157 00003D33 50                  <1>     push rax
   158 00003D34 2C40                <1>     sub al, "A"-1
   159 00003D36 3A05(6FC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   160 00003D3C 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   161 00003D43 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   162 00003D49 58                  <1>     pop rax
   163 00003D4A 7235                <1>     jb .exit    ;Exit with CF=CY
   164 00003D4C 50                  <1>     push rax
   165 00003D4D 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   166 00003D52 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   167 00003D54 58                  <1>     pop rax
   168 00003D55 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   169 00003D5B C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   170 00003D62 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   171 00003D6A 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   172                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   173 00003D70 50                  <1>     push rax
   174 00003D71 56                  <1>     push rsi
   175 00003D72 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   176 00003D74 E884FFFFFF          <1>     call walkDPBchain
   177 00003D79 7204                <1>     jb .skipSettingDPB
   178 00003D7B 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   179                              <1> .skipSettingDPB:
   180 00003D7F 5E                  <1>     pop rsi
   181 00003D80 58                  <1>     pop rax
   182                              <1> .exit:
   183                              <1>     return
    18                              <2> %%_ret:
    19 00003D81 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   184                              <1> 
   185                              <1> getCDS:     ;Int 4Fh AX=1219h
   186                              <1> ;Gets the device DPB and saves it in the DOS variable
   187                              <1> ;This can be called to get CDS for network drives too!
   188                              <1> ;Input: al = 1 based drive number
   189                              <1> ;Sets workingCDS var with the CDS for the device. 
   190                              <1> ;   If device on a network, sets CF
   191                              <1> ;Returns al with 0-based drive number
   192 00003D82 84C0                <1>     test al, al
   193 00003D84 7508                <1>     jnz .skip
   194 00003D86 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   195 00003D8C FEC0                <1>     inc al
   196                              <1> .skip:
   197 00003D8E FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   198 00003D90 56                  <1>     push rsi
   199 00003D91 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   200 00003D98 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   201 00003D9F 7423                <1>     jz .physDrive
   202                              <1>     ;Invokation via 21/5D00
   203 00003DA1 50                  <1>     push rax
   204 00003DA2 57                  <1>     push rdi
   205 00003DA3 488D3D(FBC50300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   206 00003DAA 48893D(6CC60300)    <1>     mov qword [workingCDS], rdi ;Make it current
   207 00003DB1 0441                <1>     add al, "A" ;Convert to a drive letter
   208 00003DB3 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   209 00003DB8 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   210 00003DBE 5F                  <1>     pop rdi
   211 00003DBF 58                  <1>     pop rax
   212 00003DC0 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   213 00003DC2 EB17                <1>     jmp short .exitOk   ;All oki
   214                              <1> .physDrive:
   215 00003DC4 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   216 00003DC9 7208                <1>     jc .exitBad
   217 00003DCB 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   218 00003DD1 7508                <1>     jnz .exitOk ;Exit with flag cleared
   219                              <1>     ;Else Return to unknown error locus
   220                              <1> .exitBad:
   221 00003DD3 C605(6CC30300)01    <1>     mov byte [errorLocus], eLocUnk
   222                              <1> .exitBad1:
   223 00003DDA F9                  <1>     stc
   224                              <1> .exitOk:
   225 00003DDB 5E                  <1>     pop rsi
   226                              <1>     return
    18                              <2> %%_ret:
    19 00003DDC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   229                              <1>     ;Gets the CDS for the current drive in al
   230                              <1>     ;Input: al = Drive number, 0 = A ...
   231                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   232                              <1>     ;        CF=CY => al not valid
   233 00003DDD 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
   234 00003DE3 7202                <1>     jb .ctn
   235 00003DE5 F9                  <1>     stc 
   236                              <1>     return
    18                              <2> %%_ret:
    19 00003DE6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   237                              <1> .ctn:
   238 00003DE7 50                  <1>     push rax
   239 00003DE8 52                  <1>     push rdx
   240 00003DE9 0FB6C0              <1>     movzx eax, al
   241 00003DEC 48BE5B000000000000- <1>     mov rsi, cds_size
   241 00003DF5 00                  <1>
   242 00003DF6 31D2                <1>     xor edx, edx
   243 00003DF8 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   244 00003DFA 488B35(5DC00300)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   245 00003E01 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   246 00003E04 488935(6CC60300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   247 00003E0B 5A                  <1>     pop rdx
   248 00003E0C 58                  <1>     pop rax
   249 00003E0D F8                  <1>     clc
   250                              <1>     return
    18                              <2> %%_ret:
    19 00003E0E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   251                              <1> 
   252                              <1> 
   253                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   254                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   255                              <1> ;Input: AL = Char to normalise.
   256                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   257                              <1> ;If path separator, set ZF=ZE
   258 00003E0F 3C5C                <1>     cmp al, "\"
   259 00003E11 7406                <1>     je .exit
   260 00003E13 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   261 00003E15 7502                <1>     jne .exit
   262 00003E17 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   263                              <1> .exit:
   264                              <1>     return
    18                              <2> %%_ret:
    19 00003E19 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   265                              <1> 
   266                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   267                              <1> ;Convert a lowercase char to uppercase
   268                              <1> ; Leave alone uppercase chars and invalid chars
   269                              <1> ;Input: al = Char to convert to uppercase
   270                              <1> ;Output: al = Processed char
   271 00003E1A 53                  <1>     push rbx
   272 00003E1B 3C61                <1>     cmp al, "a"
   273 00003E1D 7214                <1>     jb .exit
   274 00003E1F 3C7A                <1>     cmp al, "z"
   275 00003E21 7702                <1>     ja .checkExt
   276 00003E23 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   277                              <1> .checkExt:
   278 00003E25 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   279 00003E27 720A                <1>     jb .exit
   280 00003E29 2C80                <1>     sub al, 80h ;Turn into table offset
   281 00003E2B 488D1D9EC3FFFF      <1>     lea rbx, extAsciiTbl
   282 00003E32 D7                  <1>     xlatb   ;Get converted extended byte into al
   283                              <1> .exit:
   284 00003E33 50                  <1>     push rax    ;Save al temporarily
   285 00003E34 488D1D15C4FFFF      <1>     lea rbx, extAsciiSig
   286 00003E3B D7                  <1>     xlatb   ;Get the signature in al
   287 00003E3C A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   288 00003E3E 58                  <1>     pop rax
   289 00003E3F 5B                  <1>     pop rbx
   290                              <1>     return
    18                              <2> %%_ret:
    19 00003E40 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   291                              <1> 
   292                              <1> strlen: ;Int 4Fh, AX=1212h
   293                              <1> ;Gets the length of a ASCIIZ string
   294                              <1> ;Input: rdi = Source buffer
   295                              <1> ;Output: ecx = Length of string
   296 00003E41 50                  <1>     push rax
   297 00003E42 57                  <1>     push rdi
   298 00003E43 30C0                <1>     xor al, al
   299 00003E45 31C9                <1>     xor ecx, ecx
   300                              <1> .scan:
   301 00003E47 AE                  <1>     scasb   ;Scan the string at rdi
   302 00003E48 7404                <1>     je .exit
   303 00003E4A FFC1                <1>     inc ecx
   304 00003E4C EBF9                <1>     jmp short .scan
   305                              <1> .exit:
   306 00003E4E 5F                  <1>     pop rdi
   307 00003E4F 58                  <1>     pop rax
   308                              <1>     return
    18                              <2> %%_ret:
    19 00003E50 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   309                              <1> 
   310                              <1> strcpy:
   311                              <1> ;Copies a null terminated string from rsi to rdi
   312 00003E51 AC                  <1>     lodsb
   313 00003E52 AA                  <1>     stosb
   314 00003E53 84C0                <1>     test al, al
   315                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003E55 74F9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   316 00003E57 EBF8                <1>     jmp short strcpy
   317                              <1> 
   318                              <1> 
   319                              <1> normaliseFileName:  ;Int 4Fh, AX=1211h
   320                              <1> ;Converts lowercase to uppercase and / to "\"
   321                              <1> ;Input: rsi = Source buffer
   322                              <1> ;       rdi = Buffer to place normalised path
   323 00003E59 50                  <1>     push rax
   324 00003E5A 56                  <1>     push rsi
   325 00003E5B 57                  <1>     push rdi
   326                              <1> .scan:
   327 00003E5C AC                  <1>     lodsb
   328 00003E5D 84C0                <1>     test al, al
   329 00003E5F 740D                <1>     jz .exit
   330 00003E61 E8A9FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   331 00003E66 E8AFFFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   332 00003E6B AA                  <1>     stosb
   333 00003E6C EBEE                <1>     jmp short .scan
   334                              <1> .exit:
   335 00003E6E 5F                  <1>     pop rdi
   336 00003E6F 5E                  <1>     pop rsi
   337 00003E70 58                  <1>     pop rax
   338                              <1>     return
    18                              <2> %%_ret:
    19 00003E71 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   339                              <1> 
   340                              <1> compareFileNames:   ;Int 4Fh, AX=121Eh
   341                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   342                              <1> ;Input: rsi = One ASCIIZ pathname
   343                              <1> ;       rdi = Second ASCIIZ pathname
   344                              <1> ;Return:
   345                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   346 00003E72 50                  <1>     push rax
   347 00003E73 56                  <1>     push rsi
   348 00003E74 57                  <1>     push rdi
   349                              <1> .scan:
   350 00003E75 8A06                <1>     mov al, byte [rsi]
   351 00003E77 84C0                <1>     test al, al
   352 00003E79 7424                <1>     jz .endOfString
   353 00003E7B 8A27                <1>     mov ah, byte [rdi]
   354 00003E7D E88DFFFFFF          <1>     call swapPathSeparator  ;Convert al to \ if pathsep
   355 00003E82 7410                <1>     jz .pathseps
   356 00003E84 660D2020            <1>     or ax, 2020h    ;Convert both chars to lower case
   357 00003E88 38E0                <1>     cmp al, ah
   358 00003E8A 7515                <1>     jnz .exit
   359                              <1> .nextChar:
   360 00003E8C 48FFC6              <1>     inc rsi
   361 00003E8F 48FFC7              <1>     inc rdi
   362 00003E92 EBE1                <1>     jmp short .scan
   363                              <1> .pathseps:
   364 00003E94 86E0                <1>     xchg ah, al
   365 00003E96 E874FFFFFF          <1>     call swapPathSeparator  ;If ah is not a pathsep, then exit ZF=NZ
   366 00003E9B 7504                <1>     jnz .exit
   367 00003E9D EBED                <1>     jmp short .nextChar ;Else get the next chars
   368                              <1> .endOfString:
   369 00003E9F 84E4                <1>     test ah, ah ;If ah is also the end of the path, then ZF=ZE else ZF=NZ
   370                              <1> .exit:
   371 00003EA1 5F                  <1>     pop rdi
   372 00003EA2 5E                  <1>     pop rsi
   373 00003EA3 58                  <1>     pop rax
   374                              <1>     return
    18                              <2> %%_ret:
    19 00003EA4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   375                              <1> checkPathspecOK:
   376                              <1> ;Input:
   377                              <1> ;rsi -> points to a path to verify if it is ok.
   378                              <1> ;Output:
   379                              <1> ;CF=NC => The path is totally clean and ok to use.
   380                              <1> ;CF=CY => the path is malformed and may be used ONLY if ZF=ZE. 
   381                              <1> ; If ZF=ZE then the only bad char in the path is followed by a ASCII null
   382                              <1> ;Here we check for OK chars only. Hence \ / ? * and . are considered acceptable
   383                              <1> 
   384                              <1> ;Full paths may start with \\<15-char machine name>\...
   385                              <1> ; or <Drive Letter>:\...
   386                              <1> ;CWD relative paths start with <Drive Letter>:...
   387                              <1> ;Current Drive Root Relative paths may start with \...
   388                              <1> ;Current Drive CWD relative paths start with any other char
   389                              <1> ;FOR NOW, we allow redir but no servers. Too much hassle for now
   390                              <1> 
   391                              <1> ;We accept lc and uc characters in this check function.
   392 00003EA5 50                  <1>     push rax
   393 00003EA6 51                  <1>     push rcx
   394 00003EA7 56                  <1>     push rsi
   395 00003EA8 57                  <1>     push rdi
   396                              <1>     ;First we verify that the first two chars are ok (either X: or \\ or chars)
   397 00003EA9 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   398 00003EAC 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   399 00003EB0 741D                <1>     je .okToScan
   400 00003EB2 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   401 00003EB6 7417                <1>     je .okToScan
   402 00003EB8 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   403 00003EBB 7402                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   404                              <1>     ;Is this a current drive CWD relative or current drive root relative path?
   405                              <1>     ;If so the pathspec is not different to normal, goto scanLoop
   406 00003EBD EB17                <1>     jmp short .scanLoop
   407                              <1> .diskPath:
   408                              <1> ;Disk Letter must be A-Z (or a-z)
   409 00003EBF 3C41                <1>     cmp al, "A"
   410 00003EC1 721F                <1>     jb .badExit
   411 00003EC3 3C7A                <1>     cmp al, "z"
   412 00003EC5 771B                <1>     ja .badExit
   413 00003EC7 3C61                <1>     cmp al, "a"
   414 00003EC9 7304                <1>     jae .okToScan
   415 00003ECB 3C5A                <1>     cmp al, "Z"
   416 00003ECD 7713                <1>     ja .badExit
   417                              <1> .okToScan:
   418 00003ECF 4881C602000000      <1>     add rsi, 2  ;Skip first two chars now
   419                              <1> .scanLoop:
   420 00003ED6 AC                  <1>     lodsb   ;Get char, inc rsi
   421 00003ED7 84C0                <1>     test al, al  ;Is al=0, i.e string terminator?
   422 00003ED9 740B                <1>     je .exit    ;Clear CF if al = 0
   423 00003EDB E81E000000          <1>     call checkCharOk    ;Check if char ok
   424 00003EE0 75F4                <1>     jnz .scanLoop    ;If it is not, fall thru
   425                              <1> .badExit:
   426                              <1> ;Before we bad exit, we check if the next char is ascii null.
   427                              <1> ;If it is we set ZF
   428 00003EE2 AC                  <1>     lodsb
   429 00003EE3 84C0                <1>     test al, al ;Set ZF if only last char is malformed, else clear ZF
   430 00003EE5 F9                  <1>     stc ;And set CF to indicate bad path
   431                              <1> .exit:
   432 00003EE6 5F                  <1>     pop rdi
   433 00003EE7 5E                  <1>     pop rsi
   434 00003EE8 59                  <1>     pop rcx
   435 00003EE9 58                  <1>     pop rax
   436                              <1>     return
    18                              <2> %%_ret:
    19 00003EEA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   437                              <1> 
   438                              <1> scanPathWC:
   439                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   440                              <1> ; even in the final path componant.
   441                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   442                              <1> ;Output: CF=NC => No wildcards present
   443                              <1> ;        CF=CY => Wildcards found
   444 00003EEB 50                  <1>     push rax
   445 00003EEC 56                  <1>     push rsi
   446                              <1> .scan:
   447 00003EED AC                  <1>     lodsb
   448 00003EEE 84C0                <1>     test al, al
   449 00003EF0 7409                <1>     jz .exit
   450 00003EF2 3C3F                <1>     cmp al, "?"
   451 00003EF4 7404                <1>     je .wcFnd
   452 00003EF6 3C2A                <1>     cmp al, "*"
   453 00003EF8 75F3                <1>     jne .scan
   454                              <1> .wcFnd:
   455 00003EFA F9                  <1>     stc
   456                              <1> .exit:
   457 00003EFB 5E                  <1>     pop rsi
   458 00003EFC 58                  <1>     pop rax
   459                              <1>     return
    18                              <2> %%_ret:
    19 00003EFD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   460                              <1> 
   461                              <1> 
   462                              <1> checkCharOk:
   463                              <1> ;Same as checkCharValid except DOES not return error on * ? \ / .
   464                              <1> ;If ZF=ZE => Invalid Char
   465                              <1> ;If ZF=NZ => Ok Char
   466 00003EFE 3C2E                <1>     cmp al, "."
   467 00003F00 740F                <1>     je .exitOk
   468 00003F02 3C2A                <1>     cmp al, "*"
   469 00003F04 740B                <1>     je .exitOk
   470 00003F06 3C3F                <1>     cmp al, "?"
   471 00003F08 7407                <1>     je .exitOk
   472 00003F0A E800FFFFFF          <1>     call swapPathSeparator  ;check if al is a path separator
   473 00003F0F 7505                <1>     jnz checkCharValid
   474                              <1> .exitOk:
   475 00003F11 50                  <1>     push rax
   476 00003F12 0C01                <1>     or al, 1    ;Always clears the ZF
   477 00003F14 58                  <1>     pop rax
   478                              <1>     return
    18                              <2> %%_ret:
    19 00003F15 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   479                              <1> checkCharValid:
   480                              <1> ;If ZF=ZE => Invalid Char
   481                              <1> ;If ZF=NZ => Valid Char
   482 00003F16 51                  <1>     push rcx
   483 00003F17 57                  <1>     push rdi
   484 00003F18 B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   485 00003F1D 488D3D7CC2FFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   486 00003F24 F2AE                <1>     repne scasb ;Scan. Stop when equal
   487 00003F26 5F                  <1>     pop rdi
   488 00003F27 59                  <1>     pop rcx
   489                              <1>     return
    18                              <2> %%_ret:
    19 00003F28 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   490                              <1> 
   491                              <1> compareFarPointers: ;Int 4Fh, AX = 1214h
   492                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   493                              <1> ;Input: rsi = One pointer
   494                              <1> ;       rdi = Second pointer
   495                              <1> ;Output: ZF=ZE if equal
   496                              <1> ;        ZF=NZ if not
   497 00003F29 4839FE              <1>     cmp rsi, rdi
   498                              <1>     return
    18                              <2> %%_ret:
    19 00003F2C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   499                              <1> 
   500                              <1> checkPathNet:
   501                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   502                              <1> ;Output: ZF=ZE => Path is a net path
   503                              <1> ;        ZF=NZ => Path is not a net path
   504 00003F2D 50                  <1>     push rax
   505 00003F2E 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   506 00003F31 E8D9FEFFFF          <1>     call swapPathSeparator
   507 00003F36 7505                <1>     jnz .exit
   508 00003F38 E8D2FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   509                              <1> .exit:
   510 00003F3D 58                  <1>     pop rax
   511                              <1>     return
    18                              <2> %%_ret:
    19 00003F3E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   512                              <1> 
   513                              <1> getCharDevDriverPtr:
   514                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   515                              <1> ;Input: rax = Device Driver name (space padded)
   516                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   517 00003F3F 488D3D(73C00300)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   518                              <1> .lp:
   519 00003F46 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   520                              <1>     rete    ;Exit if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003F4A 74F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   521 00003F4C 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   522 00003F4F 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   523 00003F56 75EE                <1>     jne .lp ;If not loop
   524 00003F58 F9                  <1>     stc ;Else bad exit
   525                              <1>     return
    18                              <2> %%_ret:
    19 00003F59 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    36                                  %include "./Source/Kernel/dosMain.asm"
    37                              <1> ;-----------------------------------:
    38                              <1> ;        Main Kernel dispatch       :
    39                              <1> ;            and routines           :
    40                              <1> ;-----------------------------------:
    41                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    42                              <1> ;ah = Function number, all other registers have various meanings
    43                              <1>  %if DEBUG
    44                              <1>     ;Entry function
    45                              <1>     debugEnterM
    46                              <1>     lea rbp, .l0000
    47                              <1>     call debPrintNullString
    48                              <1>     call debPrintFunctionName
    49                              <1>     jmp short .l0001
    50                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    51                              <1> .l0001:    
    52                              <1>     debugExitM
    53                              <1>     %endif
    54 00003F5A FA                  <1>     cli ;Halt external interrupts
    55 00003F5B FC                  <1>     cld ;Ensure all string ops occur in the right direction
    56 00003F5C 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    57 00003F5F 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    58                              <1>     ;Cherry pick functions
    59 00003F65 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    60 00003F68 722C                <1>     jb .fsbegin   ;If below skip these checks
    61 00003F6A 0F8470020000        <1>     je ctrlBreakCheck
    62 00003F70 80FC64              <1>     cmp ah, 64h
    63 00003F73 0F84B0020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    64 00003F79 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    65 00003F7B 80FC51              <1>     cmp ah, 51h
    66 00003F7E 0F8493020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    67 00003F84 80FC62              <1>     cmp ah, 62h
    68 00003F87 0F8493020000        <1>     je getPSPaddr          ;Calls the above function
    69 00003F8D 80FC50              <1>     cmp ah, 50h
    70 00003F90 0F8478020000        <1>     je setCurrProcessID
    71                              <1> .fsbegin:
    72 00003F96 E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    73 00003F9B 48891D(E4C30300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    74 00003FA2 66C705(A5C30300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    74 00003FAA 00                  <1>
    75 00003FAB 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
    76 00003FB2 488905(CCC30300)    <1>     mov qword [oldoldRSP], rax
    77 00003FB9 FE05(6AC30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    78 00003FBF 488925(DCC30300)    <1>     mov qword [oldRSP], rsp
    79                              <1> ;Network related variable resetting
    80 00003FC6 C605(5CC60300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    81                              <1> ;Here, we want to save oldRSP in the callers PSP
    82 00003FCD 803D(6AC30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    83 00003FD4 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    84 00003FD6 488B05(81C30300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    85 00003FDD 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    86                              <1> .fsb1:
    87 00003FE1 58                  <1>     pop rax     ;Get old rax back
    88 00003FE2 50                  <1>     push rax    ;and push it back onto the stack
    89                              <1> .abortEP:
    90                              <1> .charFun0CEP:
    91                              <1> .serverEP:
    92 00003FE3 488D25(10CC0300)    <1>     lea rsp, critStakTop
    93 00003FEA FB                  <1>     sti         ;Reenable interrupts
    94                              <1> 
    95 00003FEB 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    96 00003FED 881D(F5C30300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    97 00003FF3 C605(F6C30300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    98 00003FFA 881D(CBC30300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
    99 00004000 881D(ECC30300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
   100                              <1> 
   101 00004006 50                  <1>     push rax        ;Save rax to use temporarily as table base 
   102 00004007 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   103 00004009 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   104 0000400B 488D05BEC2FFFF      <1>     lea rax, kDispTbl
   105 00004012 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   106 00004015 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   107 00004019 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   108 0000401C 58                  <1>     pop rax
   109                              <1> 
   110 0000401D 84E4                <1>     test ah, ah     ;Simple Terminate function?
   111 0000401F 741C                <1>     jz .fddiskOp
   112 00004021 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   113 00004024 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   114 00004026 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   115 00004029 7712                <1>     ja .fddiskOp
   116                              <1> ;Char operations here
   117 0000402B F605(69C30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   118 00004032 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   119 00004034 488D25(9FD20300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   120 0000403B EB40                <1>     jmp short .fdGoToFunction
   121                              <1> .fddiskOp:
   122                              <1>     ;Disk operations go here
   123                              <1>     ;Save rax on entry to a disk funciton
   124 0000403D 488905(95C30300)    <1>     mov qword [oldRAX], rax
   125                              <1>     ;Clear up error info
   126 00004044 C605(6CC30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   127 0000404B C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   128 00004052 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   129                              <1> 
   130 00004059 50                  <1>     push rax
   131 0000405A B482                <1>     mov ah, 82h ;Cancel all critical section!
   132 0000405C CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   133 0000405E 58                  <1>     pop rax
   134                              <1> 
   135 0000405F C605(F6C30300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   136 00004066 488D25(DFD80300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   137 0000406D F605(94C30300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   138 00004074 7407                <1>     jz .fdGoToFunction
   139                              <1> ; HANDLE CTRL+BREAK HERE!
   140 00004076 50                  <1>     push rax
   141 00004077 E885DFFFFF          <1>     call checkBreak   ; Check for a ^C
   142 0000407C 58                  <1>     pop rax
   143                              <1> .fdGoToFunction:
   144 0000407D 48871D(E4C30300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   145                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   146                              <1>     ;
   147                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   148                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   149                              <1>     ;
   150                              <1>     %if DEBUG && REGS
   151                              <1>     ;Print stack if necessary function
   152                              <1>     debugEnterM
   153                              <1>     call debPrintDOSStack
   154                              <1>     debugExitM
   155                              <1>     %endif
   156 00004084 FF15(E4C30300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   157                              <1>     %if DEBUG
   158                              <1>     ;Entry function
   159                              <1>     debugEnterM
   160                              <1>     lea rbp, .l0002
   161                              <1>     call debPrintNullString
   162                              <1>     jmp short .l0003
   163                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   164                              <1> .l0003:    
   165                              <1>     debugExitM
   166                              <1>     %endif
   167                              <1>     %if DEBUG && REGS
   168                              <1>     ;Exit function
   169                              <1>     debugEnterM
   170                              <1>     call debPrintDOSStack
   171                              <1>     debugExitM
   172                              <1>     %endif
   173                              <1> .fdExit:
   174 0000408A FA                  <1>     cli     ;Redisable interrupts
   175 0000408B FE0D(6AC30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   176 00004091 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   177 00004098 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   178 0000409B 488B05(CCC30300)    <1>     mov rax, qword [oldoldRSP]
   179 000040A2 488905(DCC30300)    <1>     mov qword [oldRSP], rax
   180 000040A9 E806000000          <1>     call dosPopRegs  ;Pop the frame
   181 000040AE 48CF                <1>     iretq
   182                              <1> .fdExitBad:
   183 000040B0 30C0                <1>     xor al, al
   184                              <1> defaultIretq:
   185 000040B2 48CF                <1>     iretq
   186                              <1> dosPopRegs:
   187 000040B4 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   188 000040BA 58                  <1>     pop rax
   189 000040BB 5B                  <1>     pop rbx
   190 000040BC 59                  <1>     pop rcx
   191 000040BD 5A                  <1>     pop rdx
   192 000040BE 5E                  <1>     pop rsi
   193 000040BF 5F                  <1>     pop rdi
   194 000040C0 5D                  <1>     pop rbp
   195 000040C1 4158                <1>     pop r8
   196 000040C3 4159                <1>     pop r9
   197 000040C5 FF25(D4C30300)      <1>     jmp qword [dosReturn]
   198                              <1> dosPushRegs:
   199 000040CB 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   200 000040D1 4151                <1>     push r9
   201 000040D3 4150                <1>     push r8
   202 000040D5 55                  <1>     push rbp
   203 000040D6 57                  <1>     push rdi
   204 000040D7 56                  <1>     push rsi
   205 000040D8 52                  <1>     push rdx
   206 000040D9 51                  <1>     push rcx
   207 000040DA 53                  <1>     push rbx
   208 000040DB 50                  <1>     push rax
   209 000040DC FF25(D4C30300)      <1>     jmp qword [dosReturn]
   210                              <1> dosCrit1Enter:
   211                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    18                              <2> %%_ret:
    19 000040E2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   212 000040E3 B801800000          <1>     mov eax, 8001h
   213 000040E8 CD4A                <1>     int 4ah
   214 000040EA 58                  <1>     pop rax
   215                              <1>     return
    18                              <2> %%_ret:
    19 000040EB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   216                              <1> dosCrit1Exit:
   217                              <1>     return
    18                              <2> %%_ret:
    19 000040EC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   218 000040ED B801810000          <1>     mov eax, 8101h
   219 000040F2 CD4A                <1>     int 4ah
   220 000040F4 58                  <1>     pop rax
   221                              <1>     return
    18                              <2> %%_ret:
    19 000040F5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   222                              <1> dosCrit2Enter:
   223                              <1>     return
    18                              <2> %%_ret:
    19 000040F6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   224 000040F7 B802800000          <1>     mov eax, 8002h
   225 000040FC CD4A                <1>     int 4ah
   226 000040FE 58                  <1>     pop rax
   227                              <1>     return
    18                              <2> %%_ret:
    19 000040FF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   228                              <1> dosCrit2Exit:
   229                              <1>     return
    18                              <2> %%_ret:
    19 00004100 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   230 00004101 B802810000          <1>     mov eax, 8102h
   231 00004106 CD4A                <1>     int 4ah
   232 00004108 58                  <1>     pop rax
   233                              <1>     return
    18                              <2> %%_ret:
    19 00004109 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   234                              <1> 
   235                              <1> ;All good exits destroy AT LEAST ax 
   236                              <1> extGoodExit2:
   237                              <1> ;Good exit with an extended return code in eax
   238 0000410A E8E6FBFFFF          <1>     call getUserRegs
   239 0000410F 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   240 00004111 EB08                <1>     jmp short extGoodExit.extGoodCommon
   241                              <1> extGoodExit:
   242                              <1> ;Good exit
   243                              <1> ;Return code in ax
   244 00004113 E8DDFBFFFF          <1>     call getUserRegs
   245 00004118 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   246                              <1> .extGoodCommon:
   247 0000411B 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   248 0000411F F8                  <1>     clc
   249                              <1>     return
    18                              <2> %%_ret:
    19 00004120 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   250                              <1> extErrExit:
   251                              <1> ;The extended error exit from DOS
   252                              <1> ;Jumped to with AL=Extended error code
   253                              <1> ;Can be called too.
   254                              <1> ;Input: al = Extended error code
   255                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   256                              <1> ;   Returns with: eax = xLat Error
   257                              <1> ;                 rsi = callerFrame
   258 00004121 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   259 00004124 E813000000          <1>     call xLatError
   260 00004129 E891000000          <1>     call checkFail
   261 0000412E E8C2FBFFFF          <1>     call getUserRegs
   262 00004133 668906              <1>     mov word [rsi + callerFrame.rax], ax
   263 00004136 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   264 0000413A F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   265                              <1>     return
    18                              <2> %%_ret:
    19 0000413B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   266                              <1> xLatError:
   267                              <1> ;Translates the error code given in ax and sets error code in the var
   268                              <1> ; Input: ax = Extended Error Code
   269                              <1> ; Output: ax = Potentially translated Error Code
   270                              <1> ;         [errorExCde] = Original Error Code
   271                              <1> ;Preserves all registers except ax
   272                              <1> ;AH is always returned as 0
   273 0000413C 53                  <1>     push rbx
   274 0000413D 51                  <1>     push rcx
   275 0000413E 56                  <1>     push rsi
   276 0000413F 668905(6DC30300)    <1>     mov word [errorExCde], ax
   277 00004146 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   278 00004148 488D3541BFFFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   279                              <1> .readEntry:
   280 0000414F 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   281 00004151 3CFF                <1>     cmp al, -1
   282 00004153 741F                <1>     je .skipXlat
   283 00004155 3A05(96C30300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   284 0000415B 7408                <1>     je .found
   285                              <1>     ;Here, entry not found, goto next entry
   286 0000415D 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   287 00004160 4801C6              <1>     add rsi, rax    ;Goto next entry
   288 00004163 EBEA                <1>     jmp short .readEntry
   289                              <1> .found:
   290                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   291 00004165 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   292                              <1> .mainSearch:
   293 00004168 AC                  <1>     lodsb   ;Get one byte into al
   294 00004169 38C3                <1>     cmp bl, al  ;Check against the error code
   295 0000416B 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   296 0000416D FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   297 0000416F 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   298                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   299 00004171 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   300                              <1> .skipXlat:
   301 00004174 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   302 00004176 5E                  <1>     pop rsi
   303 00004177 59                  <1>     pop rcx
   304 00004178 5B                  <1>     pop rbx
   305                              <1>     return
    18                              <2> %%_ret:
    19 00004179 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   306                              <1> setErrorVars:
   307                              <1> ;Looks up the error code in the variable and sets the other error vars
   308                              <1> ;Called with the lookup table in rsi
   309                              <1> ;All regs preserved
   310 0000417A 50                  <1>     push rax
   311 0000417B 53                  <1>     push rbx
   312 0000417C 51                  <1>     push rcx
   313 0000417D 56                  <1>     push rsi
   314 0000417E 0FB71D(6DC30300)    <1>     movzx ebx, word [errorExCde]
   315 00004185 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   316                              <1> .readEntry:
   317 0000418A AD                  <1>     lodsd   ;Read the dword table entry into eax
   318 0000418B 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   319 00004190 7428                <1>     je .exit    
   320 00004192 38D8                <1>     cmp al, bl  ;Compare the error codes
   321 00004194 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   322 00004196 D3E8                <1>     shr eax, cl
   323 00004198 3CFF                <1>     cmp al, -1
   324 0000419A 7406                <1>     je .skipClass
   325 0000419C 8805(70C30300)      <1>     mov byte [errorClass], al
   326                              <1> .skipClass:
   327 000041A2 D3E8                <1>     shr eax, cl
   328 000041A4 3CFF                <1>     cmp al, -1
   329 000041A6 7406                <1>     je .skipAct
   330 000041A8 8805(6FC30300)      <1>     mov byte [errorAction], al
   331                              <1> .skipAct:
   332 000041AE D3E8                <1>     shr eax, cl
   333 000041B0 3CFF                <1>     cmp al, -1
   334 000041B2 7406                <1>     je .exit
   335 000041B4 8805(6CC30300)      <1>     mov byte [errorLocus], al
   336                              <1> .exit:
   337 000041BA 5E                  <1>     pop rsi
   338 000041BB 59                  <1>     pop rcx
   339 000041BC 5B                  <1>     pop rbx
   340 000041BD 58                  <1>     pop rax
   341                              <1>     return
    18                              <2> %%_ret:
    19 000041BE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   342                              <1> checkFail:
   343                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   344                              <1> ; and swaps the var error code if so
   345 000041BF 803D(CBC30300)00    <1>     cmp byte [Int44Fail], 0
   346 000041C6 7509                <1>     jnz .skipFail
   347 000041C8 66C705(6DC30300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   347 000041D0 00                  <1>
   348                              <1> .skipFail:
   349 000041D1 56                  <1>     push rsi
   350 000041D2 488D3553BFFFFF      <1>     lea rsi, extErrTbl
   351 000041D9 E89CFFFFFF          <1>     call setErrorVars
   352 000041DE 5E                  <1>     pop rsi
   353                              <1>     return
    18                              <2> %%_ret:
    19 000041DF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   354                              <1> ;========================================:
   355                              <1> ;      Reentrant Kernel Functions        :
   356                              <1> ;========================================:
   357                              <1> ctrlBreakCheck:    ;ah = 33h
   358 000041E0 84C0                <1>     test al, al
   359 000041E2 7508                <1>     jnz .cbcget  ;Get the state or other functions
   360 000041E4 8A15(94C30300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   361 000041EA 48CF                <1>     iretq
   362                              <1> .cbcget:
   363 000041EC 3C02                <1>     cmp al, 02h
   364 000041EE 771A                <1>     ja .cbcBad
   365 000041F0 740D                <1>     jz .cbcxchg ;Function 2
   366 000041F2 52                  <1>     push rdx
   367 000041F3 80E201              <1>     and dl, 1   ;Get only the bottom bit
   368 000041F6 8815(94C30300)      <1>     mov byte [breakFlag], dl    ;Set the state
   369 000041FC 5A                  <1>     pop rdx
   370 000041FD 48CF                <1>     iretq
   371                              <1> .cbcxchg:
   372 000041FF 80E201              <1>     and dl, 1
   373 00004202 8615(94C30300)      <1>     xchg byte [breakFlag], dl
   374 00004208 48CF                <1>     iretq
   375                              <1> .cbcBad:
   376 0000420A B0FF                <1>     mov al, -1
   377 0000420C 48CF                <1>     iretq
   378                              <1> 
   379                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   380 0000420E 48891D(81C30300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   381 00004215 48CF                <1>     iretq
   382                              <1> 
   383                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   384 00004217 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   385 0000421E 48CF                <1>     iretq
   386                              <1> 
   387                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   388 00004220 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   389 00004227 48CF                <1>     iretq
   390                              <1> 
   391                              <1> setDriverLookahead:;ah = 64h, reserved
   392 00004229 48CF                <1>     iretq
   393                              <1> 
   394                              <1> ;========================================:
   395                              <1> ;            Kernel Functions            :
   396                              <1> ;========================================:
   397                              <1> diskReset:         ;ah = 0Dh
   398                              <1> ;Flush all dirty buffers to disk
   399 0000422B E8B2FEFFFF          <1>     call dosCrit1Enter
   400 00004230 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   401                              <1> .drCheckBuffer:
   402 00004237 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   403 0000423B 7407                <1>     jz .drGotoNextBuffer
   404                              <1> .drFlushBuffer:
   405 0000423D E83DC6FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   406 00004242 720C                <1>     jc .drExit
   407                              <1> .drGotoNextBuffer:
   408 00004244 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   409 00004247 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   410 0000424E 75E7                <1>     jne .drCheckBuffer
   411                              <1> .drExit:
   412 00004250 E897FEFFFF          <1>     call dosCrit1Exit
   413 00004255 B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   414 0000425A CD4F                <1>     int 4fh
   415                              <1>     return
    18                              <2> %%_ret:
    19 0000425C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   416                              <1> 
   417                              <1> selectDisk:        ;ah = 0Eh
   418                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   419 0000425D 88D0                <1>     mov al, dl
   420 0000425F FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   421 00004261 E8B3FAFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   422 00004266 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   423 00004268 8805(93C30300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   424                              <1> .skipSettingCurrent:
   425 0000426E 0FB605(70C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   426                              <1>     return
    18                              <2> %%_ret:
    19 00004275 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   429 00004276 8A05(93C30300)      <1>     mov al, byte [currentDrv]
   430                              <1>     return
    18                              <2> %%_ret:
    19 0000427C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> FATinfoDefault:    ;ah = 1Bh
   433 0000427D 30D2                <1>     xor dl, dl
   434                              <1> FATinfoDevice:     ;ah = 1Ch
   435                              <1> ;Input: dl = 1 based drive number
   436                              <1> ;Output:
   437                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   438                              <1> ;cx = bytes per sector
   439                              <1> ;edx = total number of clusters
   440                              <1> ;rbx = Ptr to media ID byte
   441 0000427F 88D0                <1>     mov al, dl  ;Move drive number into al
   442 00004281 E8FCFAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   443 00004286 7307                <1>     jnc .fidCDSFound
   444 00004288 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   445 0000428D EB2E                <1>     jmp short .error 
   446                              <1> .fidCDSFound:
   447 0000428F E80FFAFFFF          <1>     call getDiskData
   448 00004294 7227                <1>     jc .error
   449                              <1> ;Now we have that:
   450                              <1> ;al = sectors per cluster
   451                              <1> ;ah = media ID byte
   452                              <1> ;ebx = total clusters
   453                              <1> ;cx = bytes per sector
   454                              <1> ;edx = number of available clusters
   455 00004296 E85AFAFFFF          <1>     call getUserRegs
   456 0000429B 8825(E7C60300)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   457 000042A1 30E4                <1>     xor ah, ah
   458 000042A3 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   459 000042A6 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   460 000042AA 488D1D(E7C60300)    <1>     lea rbx, mediaByte
   461 000042B1 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   462 000042B5 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   463                              <1> .badExit:
   464 000042B9 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   465                              <1>     return
    18                              <2> %%_ret:
    19 000042BC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   466                              <1> .error:
   467 000042BD E85FFEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   468 000042C2 66B8FFFF            <1>     mov ax, -1
   469 000042C6 EBF1                <1>     jmp short .badExit
   470                              <1> 
   471                              <1> setIntVector:      ;ah = 25h
   472                              <1> ;Called with:
   473                              <1> ;   rdx = Pointer to interrupt handler
   474                              <1> ;   al = Interrupt number
   475 000042C8 50                  <1>     push rax    ;Preserve all registers in call
   476 000042C9 51                  <1>     push rcx
   477 000042CA 52                  <1>     push rdx
   478 000042CB 56                  <1>     push rsi
   479 000042CC 55                  <1>     push rbp
   480 000042CD 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   481 000042CF 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   482                              <1> ;First call to get default BIOS segement selector and attribute word
   483 000042D5 88C3                <1>     mov bl, al  ;Set interrupt number 
   484 000042D7 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   485 000042DC CD35                <1>     int 35h
   486 000042DE E812FAFFFF          <1>     call getUserRegs
   487 000042E3 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   488 000042E7 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   489 000042E9 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   490                              <1> ;dx preserves the attribute word
   491 000042EB B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   492 000042F0 CD35                <1>     int 35h
   493 000042F2 5D                  <1>     pop rbp
   494 000042F3 5E                  <1>     pop rsi
   495 000042F4 5A                  <1>     pop rdx
   496 000042F5 59                  <1>     pop rcx
   497 000042F6 58                  <1>     pop rax
   498                              <1>     return
    18                              <2> %%_ret:
    19 000042F7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   499                              <1> 
   500                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   501 000042F8 8805(32C30300)      <1>     mov byte [verifyFlag], al
   502 000042FE 8025(32C30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   503                              <1>     return
    18                              <2> %%_ret:
    19 00004305 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   504                              <1> getDOSversion:     ;ah = 30h
   505 00004306 E8EAF9FFFF          <1>     call getUserRegs
   506 0000430B 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   507 0000430D 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   508 00004310 668B05E9BCFFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   509 00004317 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   510                              <1>     return
    18                              <2> %%_ret:
    19 0000431A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   511                              <1> 
   512                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   513                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   514 0000431B 30D2                <1>     xor dl, dl
   515                              <1> getDeviceDPBptr:   ;ah = 32h
   516                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   517                              <1> ;On exit: rbx = DPB pointer
   518 0000431D 88D0                <1>     mov al, dl
   519 0000431F E85EFAFFFF          <1>     call getCDS
   520 00004324 722C                <1>     jc .bad
   521 00004326 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   522 0000432D 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   523 00004333 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   524                              <1>     ;Here ONLY if accessing critical Disk data structures
   525 00004335 E8A8FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   526 0000433A E82AF7FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   527 0000433F E8A8FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   528 00004344 720C                <1>     jc .bad
   529 00004346 E8AAF9FFFF          <1>     call getUserRegs
   530 0000434B 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   531 0000434F 30C0                <1>     xor al, al
   532                              <1>     return
    18                              <2> %%_ret:
    19 00004351 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   533                              <1> .bad:
   534 00004352 B0FF                <1>     mov al, -1
   535                              <1>     return
    18                              <2> %%_ret:
    19 00004354 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   536                              <1> 
   537                              <1> getInDOSflagPtr:   ;ah = 34h
   538 00004355 488D15(6AC30300)    <1>     lea rdx, inDOS
   539 0000435C E894F9FFFF          <1>     call getUserRegs
   540 00004361 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   541                              <1>     return
    18                              <2> %%_ret:
    19 00004365 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   542                              <1> 
   543                              <1> getIntVector:      ;ah = 35h
   544                              <1> ;Called with:
   545                              <1> ;   al = Interrupt Number
   546                              <1> ;Returns:
   547                              <1> ;   rbx = Pointer to interrupt handler
   548 00004366 E87CF9FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   549 0000436B E885F9FFFF          <1>     call getUserRegs
   550 00004370 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   551 00004374 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   552                              <1>     return
    18                              <2> %%_ret:
    19 00004376 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   553                              <1> 
   554                              <1> getDiskFreeSpace:  ;ah = 36h
   555                              <1> ;Input: Drive number in dl (0 = Current)
   556                              <1> ;Output:    ax = sectors per cluster
   557                              <1> ;           ebx = number of free clusters
   558                              <1> ;           cx = bytes per sector
   559                              <1> ;           edx = total clusters on drive
   560 00004377 88D0                <1>     mov al, dl
   561 00004379 E804FAFFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   562 0000437E 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   563                              <1> ;Else, we at an error.
   564                              <1> ;Simply return with CY set and error code in al with extended error info
   565 00004380 B80F000000          <1>     mov eax, errBadDrv
   566 00004385 E897FDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   567                              <1>     ;extErrExit sets rsi to caller regs
   568 0000438A 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   569                              <1>     return
    18                              <2> %%_ret:
    19 0000438F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   570                              <1> .gdfsCDSFound:
   571 00004390 E80EF9FFFF          <1>     call getDiskData
   572 00004395 7219                <1>     jc .error
   573                              <1> ;Now we have that:
   574                              <1> ;al = sectors per cluster
   575                              <1> ;ah = media ID byte
   576                              <1> ;ebx = total clusters
   577                              <1> ;cx = bytes per sector
   578                              <1> ;edx = number of available clusters
   579 00004397 E859F9FFFF          <1>     call getUserRegs
   580 0000439C 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   581 0000439E 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   582 000043A1 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   583 000043A5 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   584 000043A8 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   585                              <1> .badExit:
   586 000043AC 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   587                              <1>     return
    18                              <2> %%_ret:
    19 000043AF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   588                              <1> .error:
   589 000043B0 E86CFDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   590 000043B5 66B8FFFF            <1>     mov ax, -1
   591 000043B9 EBF1                <1>     jmp short .badExit
   592                              <1> 
   593                              <1> 
   594                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   595 000043BB 31C0                <1>     xor eax, eax
   596 000043BD 668705(91C30300)    <1>     xchg ax, word [errorLevel]
   597 000043C4 E94AFDFFFF          <1>     jmp extGoodExit
   598                              <1> 
   599                              <1> getSysVarsPtr:     ;ah = 52h
   600 000043C9 488D15(33C00300)    <1>     lea rdx, sysVarsPtr
   601 000043D0 E820F9FFFF          <1>     call getUserRegs
   602 000043D5 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   603                              <1>     return
    18                              <2> %%_ret:
    19 000043D9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   604                              <1> 
   605                              <1> 
   606                              <1> ;AH = 53h - CREATE DPB
   607                              <1> createDPB:         ;generates a DPB from a given BPB
   608                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   609                              <1> ;This is done so that the other fields of the DPB can be recycled
   610                              <1> ;Input: rsi = ptr to the BPB
   611                              <1> ;       rbp = ptr to the DPB
   612                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   613                              <1> ;bMediaDescriptor
   614 000043DA 8A4615              <1>     mov al, byte [rsi + bpb.media]
   615 000043DD 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   616                              <1> ;dFirstFreeCluster
   617 000043E0 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   618                              <1> ;dNumberOfFreeClusters
   619 000043E7 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   620                              <1> ;wBytesPerSector
   621 000043EE 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   622 000043F2 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   623                              <1> ;bMaxSectorInCluster
   624 000043F6 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   625 000043F9 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   626 000043FB 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   627                              <1> ;bSectorsPerClusterShift
   628 000043FE FEC0                <1>     inc al
   629 00004400 30C9                <1>     xor cl, cl
   630                              <1> .cd2:
   631 00004402 D0E8                <1>     shr al, 1
   632 00004404 7404                <1>     jz .cd3
   633 00004406 FEC1                <1>     inc cl
   634 00004408 EBF8                <1>     jmp short .cd2
   635                              <1> .cd3:
   636 0000440A 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   637                              <1> ;wFAToffset, number of reserved sectors in partition
   638 0000440D 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   639 00004411 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   640                              <1> ;bNumberOfFATs
   641 00004415 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   642 00004418 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   643                              <1> ;wNumberRootDirEntries
   644                              <1> ;Gets the number of 32 byte entries in the root directory
   645                              <1> ;Only valid for FAT 12/16
   646 0000441B 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   647 0000441F 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   648                              <1> ;dFATlength, get the FAT length
   649 00004423 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   650 00004427 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   651 0000442A 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   652 0000442C 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   653 0000442F 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   654                              <1> ;Complex cases below...
   655                              <1> ;dClusterHeapOffset, start sector of the data area
   656 00004432 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   657 00004436 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   658 00004439 85C0                <1>     test eax, eax
   659 0000443B 0F44C3              <1>     cmovz eax, ebx
   660                              <1> ;eax = FATsz
   661 0000443E 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   662 00004442 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   663 00004445 85DB                <1>     test ebx, ebx
   664 00004447 0F44D9              <1>     cmovz ebx, ecx 
   665                              <1> ;ebx = TotSec
   666 0000444A 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   667 0000444D 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   668                              <1> .cd4:
   669 0000444F 01C2                <1>     add edx, eax
   670 00004451 FEC9                <1>     dec cl
   671 00004453 75FA                <1>     jnz .cd4
   672 00004455 89D0                <1>     mov eax, edx    ;Store product in eax
   673 00004457 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   674 0000445B 01D0                <1>     add eax, edx
   675                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   676 0000445D 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   677 00004461 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   678 00004464 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   679 00004468 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   680 00004469 89D0                <1>     mov eax, edx
   681 0000446B 31D2                <1>     xor edx, edx
   682 0000446D F7F1                <1>     div ecx
   683 0000446F 89C2                <1>     mov edx, eax
   684 00004471 58                  <1>     pop rax
   685 00004472 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   686                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   687                              <1>     ;aka eax = Start sector of the data area in volume
   688 00004474 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   689                              <1> ;dClusterCount
   690 00004477 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   691 00004479 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   692 0000447B 31D2                <1>     xor edx, edx
   693 0000447D BB01000000          <1>     mov ebx, 1
   694 00004482 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   695 00004485 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   696 00004487 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   697 00004489 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   698 0000448B 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   699                              <1> ;dFirstUnitOfRootDir
   700 0000448E 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   701 00004493 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   702 00004496 770F                <1>     ja .cd5
   703                              <1>     ;Else, we need to find the first sector of the root directory
   704                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   705 00004498 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   706 0000449C 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   707                              <1> .cd51:
   708 000044A0 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   709 000044A3 FFC9                <1>     dec ecx
   710 000044A5 75F9                <1>     jnz .cd51
   711                              <1> .cd5:
   712 000044A7 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   713                              <1> ;Exit epilogue
   714 000044AA 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   715 000044B1 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   716                              <1>     %if DEBUG && DPBINFO
   717                              <1>     ;Print DPB 
   718                              <1>     debugEnterM
   719                              <1>     push rbp
   720                              <1>     lea rbp, .l0000
   721                              <1>     call debPrintNullString
   722                              <1>     pop rbp
   723                              <1>     call debDPBBPBptr
   724                              <1>     call debMakeDebuggerRespond
   725                              <1>     jmp short .l0001
   726                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   727                              <1> .l0001:
   728                              <1>     debugExitM
   729                              <1>     %endif
   730                              <1>     return
    18                              <2> %%_ret:
    19 000044B3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   731                              <1> 
   732                              <1> getVerifySetting:  ;ah = 54h
   733 000044B4 8A05(32C30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   734                              <1>     return
    18                              <2> %%_ret:
    19 000044BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   735                              <1> 
   736                              <1> getExtendedError:  ;ah = 59h
   737 000044BB E835F8FFFF          <1>     call getUserRegs
   738 000044C0 668B05(6DC30300)    <1>     mov ax, word [errorExCde]
   739 000044C7 8A2D(6CC30300)      <1>     mov ch, byte [errorLocus]
   740 000044CD 8A3D(70C30300)      <1>     mov bh, byte [errorClass]
   741 000044D3 8A1D(6FC30300)      <1>     mov bl, byte [errorAction]
   742 000044D9 668906              <1>     mov word [rsi + callerFrame.rax], ax
   743 000044DC 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   744 000044E0 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   745                              <1>     return
    18                              <2> %%_ret:
    19 000044E3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   746                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   747                              <1> noOp:
   748                              <1>     return
    18                              <2> %%_ret:
    19 000044E4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    37                                  %include "./Source/Kernel/Net/server.asm"
    38                              <1> ;Network functions here
    39                              <1> 
    40                              <1> dosServer:  ;ah = 5Dh
    41                              <1> ;Dispatches the server function in al. Many of these are share hooks.
    42                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
    43                              <1> ;   rdx = Pointer to DPL
    44 000044E5 3C07                <1>     cmp al, 07h
    45 000044E7 7204                <1>     jb .skip
    46 000044E9 3C09                <1>     cmp al, 09h
    47 000044EB 7619                <1>     jbe .skip2
    48                              <1> .skip:
    49 000044ED 4889D6              <1>     mov rsi, rdx
    50 000044F0 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    51 000044F4 66891D(A5C30300)    <1>     mov word [machineNum], bx
    52 000044FB 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    53 000044FF 48891D(9DC30300)    <1>     mov qword [serverPSP], rbx
    54                              <1>     
    55                              <1> .skip2:
    56                              <1> serverDispatch: ;AX=5D00h
    57                              <1> ;Input: rsi points to the DOS parameter list
    58 00004506 58                  <1>     pop rax
    59 00004507 56                  <1>     push rsi    ;Put dpl ptr in rdi
    60 00004508 5F                  <1>     pop rdi
    61 00004509 E8E7F7FFFF          <1>     call getUserRegs
    62 0000450E 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    63 00004511 56                  <1>     push rsi
    64 00004512 B906000000          <1>     mov ecx, 6
    65 00004517 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    66 0000451A 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    67 00004521 48A5                <1>     movsq   ;Transfer r8...
    68 00004523 48A5                <1>     movsq   ;... and r9
    69 00004525 5E                  <1>     pop rsi
    70 00004526 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    71 00004529 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    72 0000452D 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    73 00004531 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    74 00004535 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    75 00004539 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    76 0000453D 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    77 00004541 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    78 00004545 48891D(E4C30300)    <1>     mov qword [oldRBX], rbx
    79 0000454C C605(5CC60300)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    80 00004553 E98BFAFFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    81                              <1> 
    82                              <1> 
    83                              <1> netServices:   ;ah = 5Eh, do nothing
    84                              <1> netRedir:;ah = 5Fh, do nothing
    85                              <1>     return
    18                              <2> %%_ret:
    19 00004558 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    38                                  %include "./Source/Kernel/Net/multiplx.asm"
    39                              <1> ;Default multiplexer. Current only installed function is ah=12h
    40                              <1> 
    41                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    42 00004559 80FC12              <1>     cmp ah, 12h
    43 0000455C 751C                <1>     jne .exit       ;Exit if not for us
    44 0000455E 3C05                <1>     cmp al, mDispTblL / 2
    45 00004560 7318                <1>     jae .exit   ;If above or equal, exit
    46 00004562 53                  <1>     push rbx
    47 00004563 51                  <1>     push rcx
    48 00004564 31C9                <1>     xor ecx, ecx
    49 00004566 488D1D37BEFFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    50 0000456D 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    51 0000456F D1E1                <1>     shl ecx, 1   ;multiply by 2
    52 00004571 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    53 00004574 FFD3                <1>     call rbx
    54 00004576 59                  <1>     pop rcx
    55 00004577 5B                  <1>     pop rbx
    56 00004578 48CF                <1>     iretq
    57                              <1> .exit:
    58 0000457A 804C241001          <1>     or byte [rsp + 8h*2], 1
    59 0000457F 48CF                <1>     iretq
    60                              <1> multiplexTest:
    61 00004581 B0FF                <1>     mov al, -1
    62 00004583 C3                  <1>     ret
    63                              <1> getDosDataSeg:  ;Int 4Fh, AX=1203h
    64                              <1> ;Return: r8 = Dos Data Segment Pointer
    65 00004584 4C8D05(00C00300)    <1>     lea r8, dosDataArea
    66                              <1>     return
    18                              <2> %%_ret:
    19 0000458B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    39                                  %include "./Source/Misc/int44h.asm"
    40                              <1> critErrorHandler:   ;Int 44h
    41                              <1> ;User Stack in usage here, must be swapped to before this is called
    42                              <1> ;Entered with:  
    43                              <1> ;               AH = Critical Error Bitfield
    44                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    45                              <1> ;               Bit 6 - Reserved
    46                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    47                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    48                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    49                              <1> ;               Bits [2-1] = Affected Disk Error
    50                              <1> ;                     0 0   DOS area
    51                              <1> ;                     0 1   FAT area
    52                              <1> ;                     1 0   Directory area
    53                              <1> ;                     1 1   Data area
    54                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    55                              <1> ;               AL  = Failing drive number if AH[7] = 0
    56                              <1> ;               DIL = Error code for errorMsg
    57                              <1> ;               RSI = EA of Device Header for which device the error occured
    58                              <1> ;Return:
    59                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    60                              <1> ;                  = 1 - Retry the Operation    (Retry)
    61                              <1> ;                  = 2 - Terminate the Program  (Abort)
    62                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    63 0000458C 53                  <1>     push rbx
    64 0000458D 51                  <1>     push rcx
    65 0000458E 52                  <1>     push rdx
    66 0000458F 57                  <1>     push rdi
    67 00004590 56                  <1>     push rsi
    68 00004591 FC                  <1>     cld         ;Make String ops go forward
    69                              <1> 
    70 00004592 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    71 00004595 488D155E020000      <1>     lea rdx, qword [.crlf]
    72 0000459C B409                <1>     mov ah, 09h ;Print String
    73 0000459E CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    74                              <1> 
    75 000045A0 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    76 000045A6 B90C000000          <1>     mov ecx, 0Ch
    77 000045AB 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    78 000045AD 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    79 000045B0 480FB7FF            <1>     movzx rdi, di
    80 000045B4 4889FA              <1>     mov rdx, rdi    ;Copy error code
    81 000045B7 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    82 000045BB 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    83 000045BE 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    84 000045C1 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    85 000045C8 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    86 000045CC B409                <1>     mov ah, 09h ;Print String
    87 000045CE CD41                <1>     int 41h     ;Call DOS to print first part of message
    88                              <1> 
    89 000045D0 488D1505020000      <1>     lea rdx, qword [.readmsg]
    90 000045D7 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    91 000045DE F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    92 000045E1 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    93 000045E5 B409                <1>     mov ah, 09h ;Print String
    94 000045E7 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    95                              <1> 
    96 000045E9 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    97 000045EC 0F85DF000000        <1>     jnz .charError
    98                              <1> ;Disk error continues here
    99 000045F2 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
   100 000045F9 B409                <1>     mov ah, 09h
   101 000045FB CD41                <1>     int 41h
   102 000045FD 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   103 000045FF 80C241              <1>     add dl, "A" ;Add ASCII code
   104 00004602 B402                <1>     mov ah, 02h ;Print char in dl
   105 00004604 CD41                <1>     int 41h
   106                              <1> .userInput:
   107 00004606 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   108 0000460D B409                <1>     mov ah, 09h
   109 0000460F CD41                <1>     int 41h
   110                              <1> ;Abort, Retry, Ignore, Fail is word order
   111                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   112                              <1> .userAbort:
   113                              <1> ;Abort is always an option
   114 00004611 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   115 00004618 B409                <1>     mov ah, 09h
   116 0000461A CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   117                              <1> .userRetry:
   118 0000461C F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   119 0000461F 7416                <1>     jz .userIgnore    ;If clear, dont print message
   120 00004621 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   121 00004628 B409                <1>     mov ah, 09h
   122 0000462A CD41                <1>     int 41h
   123 0000462C 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   124 00004633 B409                <1>     mov ah, 09h
   125 00004635 CD41                <1>     int 41h
   126                              <1> .userIgnore:
   127 00004637 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   128 0000463A 7416                <1>     jz .userFail
   129 0000463C 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   130 00004643 B409                <1>     mov ah, 09h
   131 00004645 CD41                <1>     int 41h
   132 00004647 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   133 0000464E B409                <1>     mov ah, 09h
   134 00004650 CD41                <1>     int 41h
   135                              <1> .userFail:
   136 00004652 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   137 00004655 7416                <1>     jz .userMsgEnd
   138 00004657 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   139 0000465E B409                <1>     mov ah, 09h
   140 00004660 CD41                <1>     int 41h
   141 00004662 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   142 00004669 B409                <1>     mov ah, 09h
   143 0000466B CD41                <1>     int 41h
   144                              <1> .userMsgEnd:
   145 0000466D 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   146 00004674 B409                <1>     mov ah, 09h
   147 00004676 CD41                <1>     int 41h
   148                              <1> ;Get user input now 
   149 00004678 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   150 0000467A 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   151 00004681 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   152 00004683 CD41                <1>     int 41h ;Get char in al
   153 00004685 3C61                <1>     cmp al, "a" ;Chack if lowercase
   154 00004687 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   155 00004689 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   156                              <1> .uip1:
   157 0000468B AE                  <1>     scasb   ;Compare char to list, offset gives return code
   158 0000468C 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   159 0000468E FFC1                <1>     inc ecx
   160 00004690 81F904000000        <1>     cmp ecx, 4
   161 00004696 75F3                <1>     jne .uip1
   162 00004698 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   163                              <1> .validInput:
   164 0000469D 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   165                              <1> ;Now check if the input is permitted
   166 0000469F 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   167 000046A1 7427                <1>     je .cehExit
   168 000046A3 84C0                <1>     test al, al ;Check if 0 => Ignore
   169 000046A5 740F                <1>     je .viIgnore
   170 000046A7 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   171 000046A9 7416                <1>     je .viRetry
   172                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   173 000046AB F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   174 000046AE 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   175 000046B4 EB14                <1>     jmp short .cehExit
   176                              <1> .viIgnore:
   177 000046B6 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   178 000046B9 0F8447FFFFFF        <1>     jz .userInput
   179 000046BF EB09                <1>     jmp short .cehExit
   180                              <1> .viRetry:
   181 000046C1 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   182 000046C4 0F843CFFFFFF        <1>     jz .userInput
   183                              <1> .cehExit:
   184 000046CA 5E                  <1>     pop rsi
   185 000046CB 5F                  <1>     pop rdi
   186 000046CC 5A                  <1>     pop rdx
   187 000046CD 59                  <1>     pop rcx
   188 000046CE 5B                  <1>     pop rbx
   189 000046CF 48CF                <1>     iretq
   190                              <1> .charError:
   191 000046D1 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   192 000046D6 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   193                              <1> .ce1:
   194 000046DD AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   195 000046DE 88C2                <1>     mov dl, al  ;Move char into dl
   196 000046E0 B402                <1>     mov ah, 02h
   197 000046E2 CD41                <1>     int 41h ;Print char
   198 000046E4 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   199 000046E6 E91BFFFFFF          <1>     jmp .userInput
   200                              <1> 
   201                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   202 000046EB 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   202 000046F4 746563742024202020  <1>
   203 000046FD 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   203 00004706 6E6974202420202020  <1>
   204 0000470F 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   204 00004718 202420202020202020  <1>
   205 00004721 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   205 0000472A 6F6D6D616E64202420  <1>
   206 00004733 446174612024202020- <1>             db "Data $            "       ;Error 4
   206 0000473C 202020202020202020  <1>
   207 00004745 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   207 0000474E 737420242020202020  <1>
   208 00004757 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   208 00004760 202020202020202020  <1>
   209 00004769 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   209 00004772 656469612024202020  <1>
   210 0000477B 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   210 00004784 7420466F756E642024  <1>
   211 0000478D 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   211 00004796 706572202420202020  <1>
   212 0000479F 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   212 000047A8 6C7420242020202020  <1>
   213 000047B1 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   213 000047BA 742024202020202020  <1>
   214 000047C3 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   214 000047CC 61696C757265202420  <1>
   215                              <1> 
   216 000047D5 64726976652024      <1> .drive      db "drive $"
   217 000047DC 6572726F7220726561- <1> .readmsg    db "error reading $"
   217 000047E5 64696E672024        <1>
   218 000047EB 6572726F7220777269- <1> .writemsg   db "error writing $"
   218 000047F4 74696E672024        <1>
   219 000047FA 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   220 000047FD 41626F727424        <1> .abortmsg   db "Abort$" 
   221 00004803 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   222 0000480A 526574727924        <1> .retrymsg   db "Retry$"
   223 00004810 4661696C24          <1> .failmsg    db "Fail$"
   224 00004815 2C2024              <1> .betweenMsg db ", $"
   225 00004818 3F2024              <1> .endMsg     db "? $"
   226 0000481B 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    40                                  %include "./Source/Drivers/drvData.asm"
    41                              <1> ;-----------------------------------:
    42                              <1> ;          Driver routines          :
    43                              <1> ;-----------------------------------:
    44                              <1> drivers:
    45                              <1> conHdr:
    46 0000481F [4148000000000000]  <1>     dq auxHdr
    47 00004827 1380                <1>     dw 08013h
    48 00004829 [BF49000000000000]  <1>     dq commonStrat
    49 00004831 [CE49000000000000]  <1>     dq conDriver
    50 00004839 434F4E2020202020    <1>     db "CON     "
    51                              <1> auxHdr:
    52 00004841 [6348000000000000]  <1>     dq prnHdr
    53 00004849 0080                <1>     dw 08000h
    54 0000484B [BF49000000000000]  <1>     dq commonStrat
    55 00004853 [834C000000000000]  <1>     dq com1Intr
    56 0000485B 4155582020202020    <1>     db "AUX     "
    57                              <1> prnHdr:
    58 00004863 [8548000000000000]  <1>     dq clkHdr
    59 0000486B 40A0                <1>     dw 0A040h
    60 0000486D [C749000000000000]  <1>     dq nulStrat
    61 00004875 [CD49000000000000]  <1>     dq nulIntr
    62 0000487D 50524E2020202020    <1>     db "PRN     "
    63                              <1> clkHdr:
    64 00004885 [A748000000000000]  <1>     dq msdHdr
    65 0000488D 0880                <1>     dw 08008h
    66 0000488F [BF49000000000000]  <1>     dq commonStrat
    67 00004897 [1B4B000000000000]  <1>     dq clkDriver
    68 0000489F 434C4F434B242020    <1>     db "CLOCK$  "
    69                              <1> msdHdr:
    70 000048A7 [C948000000000000]  <1>     dq com1Hdr
    71 000048AF 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    72 000048B1 [BF49000000000000]  <1>     dq commonStrat
    73 000048B9 [284E000000000000]  <1>     dq msdDriver
    74 000048C1 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    75                              <1> com1Hdr:
    76 000048C9 [EB48000000000000]  <1>     dq com2Hdr
    77 000048D1 0080                <1>     dw 08000h
    78 000048D3 [BF49000000000000]  <1>     dq commonStrat
    79 000048DB [834C000000000000]  <1>     dq com1Intr
    80 000048E3 434F4D3120202020    <1>     db "COM1    "
    81                              <1> com2Hdr:
    82 000048EB [0D49000000000000]  <1>     dq com3Hdr
    83 000048F3 0080                <1>     dw 08000h
    84 000048F5 [BF49000000000000]  <1>     dq commonStrat
    85 000048FD [8C4C000000000000]  <1>     dq com2Intr
    86 00004905 434F4D3220202020    <1>     db "COM2    "
    87                              <1> com3Hdr:
    88 0000490D [2F49000000000000]  <1>     dq com4Hdr
    89 00004915 0080                <1>     dw 08000h
    90 00004917 [BF49000000000000]  <1>     dq commonStrat
    91 0000491F [954C000000000000]  <1>     dq com3Intr
    92 00004927 434F4D3320202020    <1>     db "COM3    "
    93                              <1> com4Hdr:
    94 0000492F [5149000000000000]  <1>     dq lpt1Hdr
    95 00004937 0080                <1>     dw 08000h
    96 00004939 [BF49000000000000]  <1>     dq commonStrat
    97 00004941 [9E4C000000000000]  <1>     dq com4Intr
    98 00004949 434F4D3420202020    <1>     db "COM4    "
    99                              <1> lpt1Hdr:
   100 00004951 [7349000000000000]  <1>     dq lpt2Hdr
   101 00004959 40A0                <1>     dw 0A040h
   102 0000495B [C749000000000000]  <1>     dq nulStrat
   103 00004963 [CD49000000000000]  <1>     dq nulIntr
   104 0000496B 4C50543120202020    <1>     db "LPT1    "
   105                              <1> lpt2Hdr:
   106 00004973 [9549000000000000]  <1>     dq lpt3Hdr
   107 0000497B 40A0                <1>     dw 0A040h
   108 0000497D [C749000000000000]  <1>     dq nulStrat
   109 00004985 [CD49000000000000]  <1>     dq nulIntr
   110 0000498D 4C50543220202020    <1>     db "LPT2    "
   111                              <1> lpt3Hdr:
   112 00004995 FFFFFFFFFFFFFFFF    <1>     dq -1
   113 0000499D 40A0                <1>     dw 0A040h
   114 0000499F [C749000000000000]  <1>     dq nulStrat
   115 000049A7 [CD49000000000000]  <1>     dq nulIntr
   116 000049AF 4C50543320202020    <1>     dq "LPT3    "
   117 000049B7 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    41                                  %include "./Source/Drivers/charDrv.asm"
    42                              <1> commonStrat:
    43                              <1> ;DOS calls this function with rbx=Ptr to request header
    44 000049BF 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    45 000049C6 C3                  <1>     ret
    46                              <1> nulStrat:
    47 000049C7 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    48                              <1> nulIntr:
    49 000049CD C3                  <1>     ret
    50                              <1> conDriver:
    51 000049CE 50                  <1>     push rax
    52 000049CF 53                  <1>     push rbx
    53 000049D0 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    54 000049D7 B003                <1>     mov al, 03h ;Unknown Command
    55 000049D9 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    56 000049DD 7739                <1>     ja .conWriteErrorCode ;If yes, error!
    57                              <1> 
    58 000049DF 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    59 000049E2 3C04                <1>     cmp al, 4
    60 000049E4 7441                <1>     jz .conRead
    61 000049E6 3C05                <1>     cmp al, 5
    62 000049E8 0F847F000000        <1>     jz .conNondestructiveRead
    63 000049EE 3C06                <1>     cmp al, 6
    64 000049F0 0F84A8000000        <1>     jz .conInputStatus
    65 000049F6 3C07                <1>     cmp al, 7
    66 000049F8 0F84B0000000        <1>     jz .conFlushInputBuffers
    67 000049FE 3C08                <1>     cmp al, 8
    68 00004A00 0F84CA000000        <1>     jz .conWrite
    69 00004A06 3C09                <1>     cmp al, 9
    70 00004A08 0F84C2000000        <1>     jz .conWrite
    71 00004A0E 3C0A                <1>     cmp al, 0Ah
    72 00004A10 0F84E3000000        <1>     jz .conOutputStatus
    73 00004A16 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    74                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    75 00004A18 B480                <1>     mov ah, 80h ;Set error bit
    76 00004A1A 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    77                              <1> .conExit:
    78 00004A1E 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    79 00004A24 5B                  <1>     pop rbx
    80 00004A25 58                  <1>     pop rax
    81 00004A26 C3                  <1>     ret
    82                              <1> .conRead:    ;Function 4
    83 00004A27 B005                <1>     mov al, 05h ;Bad request structure length?
    84 00004A29 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    85 00004A2C 75EA                <1>     jne .conWriteErrorCode
    86                              <1> 
    87 00004A2E 57                  <1>     push rdi
    88 00004A2F 51                  <1>     push rcx
    89 00004A30 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    90 00004A34 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    91                              <1> .cre1:
    92 00004A36 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    93 00004A39 741C                <1>     je .cre2
    94 00004A3B 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    95 00004A42 751A                <1>     jnz .cre3   ;No, get the buffer value
    96 00004A44 31C0                <1>     xor eax, eax
    97 00004A46 CD36                <1>     int 36h
    98                              <1> .cre11:
    99 00004A48 AA                  <1>     stosb
   100 00004A49 84C0                <1>     test al, al ;Was the ascii code stored 0?
   101 00004A4B 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   102 00004A4D 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   103                              <1> .cre12:
   104 00004A53 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   105 00004A55 EBDF                <1>     jmp short .cre1
   106                              <1> .cre2:
   107 00004A57 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   108 00004A5A 59                  <1>     pop rcx
   109 00004A5B 5F                  <1>     pop rdi
   110 00004A5C EBC0                <1>     jmp short .conExit
   111                              <1> .cre3:
   112 00004A5E 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   113 00004A64 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   114 00004A6B EBDB                <1>     jmp short .cre11
   115                              <1> 
   116                              <1> .conNondestructiveRead:  ;Function 5
   117 00004A6D B005                <1>     mov al, 05h ;Bad request structure length?
   118 00004A6F 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   119 00004A72 75A4                <1>     jne .conWriteErrorCode
   120 00004A74 803D8E00000000      <1>     cmp byte [.conBuf], 0
   121 00004A7B 7519                <1>     jnz .cnr2
   122 00004A7D B401                <1>     mov ah, 01h     ;Get key if exists
   123 00004A7F CD36                <1>     int 36h
   124 00004A81 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   125                              <1>     ;Keystroke available
   126                              <1> .cnr0:
   127 00004A83 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   128 00004A86 E993FFFFFF          <1>     jmp .conExit
   129                              <1> .cnr1: ;No keystroke available
   130 00004A8B 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   131 00004A91 E988FFFFFF          <1>     jmp .conExit
   132                              <1> .cnr2:
   133 00004A96 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   134 00004A9C EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   135                              <1> 
   136                              <1> .conInputStatus:         ;Function 6
   137 00004A9E B005                <1>     mov al, 05h ;Bad request structure length?
   138 00004AA0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   139 00004AA3 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   140 00004AA9 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   141                              <1> 
   142                              <1> .conFlushInputBuffers:   ;Function 7
   143 00004AAE B005                <1>     mov al, 05h ;Bad request structure length?
   144 00004AB0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   145 00004AB3 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   146 00004AB9 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   147                              <1> .cfib0:
   148 00004AC0 B401                <1>     mov ah, 01      ;Get buffer status
   149 00004AC2 CD36                <1>     int 36h
   150 00004AC4 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   151 00004ACA 30E4                <1>     xor ah, ah
   152 00004ACC CD36                <1>     int 36h ;Read key to flush from buffer
   153 00004ACE EBF0                <1>     jmp short .cfib0
   154                              <1> 
   155                              <1> .conWrite:   ;Function 8 and 9
   156 00004AD0 B005                <1>     mov al, 05h ;Bad request structure length?
   157 00004AD2 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   158 00004AD5 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   159                              <1> 
   160 00004ADB 56                  <1>     push rsi
   161 00004ADC 51                  <1>     push rcx
   162 00004ADD 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   163 00004AE1 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   164                              <1> .cw1: 
   165 00004AE3 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   166 00004AE6 7407                <1>     je .cw2
   167 00004AE8 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   168 00004AE9 CD49                <1>     int 49h ;Fast print char
   169 00004AEB FFC1                <1>     inc ecx
   170 00004AED EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   171                              <1> .cw2:
   172 00004AEF 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   173 00004AF2 59                  <1>     pop rcx
   174 00004AF3 5E                  <1>     pop rsi
   175 00004AF4 E925FFFFFF          <1>     jmp .conExit
   176                              <1> .conOutputStatus:   ;Function 0Ah
   177 00004AF9 B005                <1>     mov al, 05h ;Bad request structure length?
   178 00004AFB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   179 00004AFE 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   180 00004B04 E915FFFFFF          <1>     jmp .conExit
   181                              <1> 
   182 00004B09 00                  <1> .conBuf db 0    ;Single byte buffer
   183                              <1> fastOutput:         ;This CON driver supports Int 49h
   184                              <1> ;Called with char to transfer in al
   185 00004B0A 50                  <1>     push rax
   186 00004B0B B40E                <1>     mov ah, 0Eh
   187 00004B0D CD30                <1>     int 30h
   188 00004B0F 58                  <1>     pop rax
   189 00004B10 48CF                <1>     iretq
   190                              <1> ctrlBreak:
   191                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   192 00004B12 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   193 00004B19 48CF                <1>     iretq
   194                              <1> 
   195                              <1> clkDriver:
   196 00004B1B 50                  <1>     push rax
   197 00004B1C 53                  <1>     push rbx
   198 00004B1D 51                  <1>     push rcx
   199 00004B1E 52                  <1>     push rdx
   200 00004B1F 56                  <1>     push rsi
   201 00004B20 55                  <1>     push rbp
   202 00004B21 488B1D8FFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   203 00004B28 B003                <1>     mov al, 03h ;Unknown Command
   204 00004B2A 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   205 00004B2E 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   206                              <1> 
   207 00004B30 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   208 00004B33 3C04                <1>     cmp al, 04h
   209 00004B35 7437                <1>     jz .clkRead
   210 00004B37 3C06                <1>     cmp al, 06h
   211 00004B39 0F8494000000        <1>     jz .clkInputStatus
   212 00004B3F 3C07                <1>     cmp al, 07h
   213 00004B41 0F8498000000        <1>     jz .clkFlushInputBuffers
   214 00004B47 3C08                <1>     cmp al, 08h
   215 00004B49 0F84A0000000        <1>     jz .clkWrite
   216 00004B4F 3C09                <1>     cmp al, 09h
   217 00004B51 0F8498000000        <1>     jz .clkWrite
   218 00004B57 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   219                              <1> .clkNotFunctioning:
   220 00004B59 B002                <1>     mov al, 02h ;Device not ready error
   221                              <1> .clkWriteErrorCode:
   222 00004B5B B480                <1>     mov ah, 80h ;Set error bit
   223 00004B5D 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   224                              <1> .clkExit:
   225 00004B61 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   226 00004B67 5D                  <1>     pop rbp
   227 00004B68 5E                  <1>     pop rsi
   228 00004B69 5A                  <1>     pop rdx
   229 00004B6A 59                  <1>     pop rcx
   230 00004B6B 5B                  <1>     pop rbx
   231 00004B6C 58                  <1>     pop rax
   232 00004B6D C3                  <1>     ret
   233                              <1> 
   234                              <1> .clkRead:           ;Function 4
   235 00004B6E B005                <1>     mov al, 05h ;Bad request structure length?
   236 00004B70 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   237 00004B73 75E6                <1>     jne .clkWriteErrorCode
   238                              <1> 
   239 00004B75 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   240 00004B78 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   241 00004B7C 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   242 00004B83 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   243 00004B87 30E4                <1>     xor ah, ah
   244 00004B89 CD3A                <1>     int 3Ah         ;Read the system timer
   245 00004B8B 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   246 00004B8D 740D                <1>     jz .clkr1       ;Nope, now just time 
   247 00004B8F 30E4                <1>     xor ah, ah
   248                              <1>     ;This works as al should keep count of the # of days passed since last read
   249 00004B91 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   250 00004B95 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   251                              <1> .clkr1:
   252 00004B9C 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   253 00004B9F 0FB7D2              <1>     movzx edx, dx
   254 00004BA2 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   255 00004BA4 89D0                <1>     mov eax, edx
   256 00004BA6 31D2                <1>     xor edx, edx
   257 00004BA8 89D8                <1>     mov eax, ebx
   258 00004BAA B944040000          <1>     mov ecx, 1092   
   259 00004BAF F7F1                <1>     div ecx
   260 00004BB1 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   261 00004BB4 89D0                <1>     mov eax, edx    ;Get remainder in eax
   262 00004BB6 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   263 00004BBA 31D2                <1>     xor edx, edx
   264 00004BBC B95B000000          <1>     mov ecx, 91 ;5*18.2
   265 00004BC1 F7F1                <1>     div ecx
   266 00004BC3 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   267 00004BC6 89D0                <1>     mov eax, edx    ;Get remainder in eax
   268                              <1>     ;lea eax, dword [eax + 4*eax]
   269                              <1>     ;add eax, edx    ;Essentially multiply by 6
   270 00004BC8 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   271 00004BCB 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   272 00004BCE E98EFFFFFF          <1>     jmp .clkExit
   273                              <1> 
   274                              <1> .clkInputStatus:    ;Function 6
   275                              <1> ;Always return ready
   276 00004BD3 B005                <1>     mov al, 05h ;Bad request structure length?
   277 00004BD5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   278 00004BD8 7581                <1>     jne .clkWriteErrorCode
   279 00004BDA E982FFFFFF          <1>     jmp .clkExit
   280                              <1> .clkFlushInputBuffers:  ;Function 7
   281                              <1> ;Always return done immediately
   282 00004BDF B005                <1>     mov al, 05h ;Bad request structure length?
   283 00004BE1 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   284 00004BE4 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   285 00004BEA E972FFFFFF          <1>     jmp .clkExit
   286                              <1> 
   287                              <1> .clkWrite:          ;Functions 8 and 9
   288 00004BEF B005                <1>     mov al, 05h ;Bad request structure length?
   289 00004BF1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   290 00004BF4 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   291                              <1> 
   292 00004BFA 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   293 00004BFD 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   294 00004C01 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   295 00004C05 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   296                              <1> 
   297 00004C0C 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   298 00004C0E 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   299 00004C12 B105                <1>     mov cl, 5
   300 00004C14 F6F1                <1>     div cl          ;Divide al by 5
   301 00004C16 30E4                <1>     xor ah, ah      ;Remove the remainder
   302 00004C18 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   303                              <1> ;Using the decimal part of this formula for the low count
   304                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   305 00004C1A 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   306 00004C1D B912000000          <1>     mov ecx, 18
   307 00004C22 F7E1                <1>     mul ecx  
   308 00004C24 01C3                <1>     add ebx, eax
   309                              <1> 
   310 00004C26 31D2                <1>     xor edx, edx
   311 00004C28 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   312 00004C2C B944040000          <1>     mov ecx, 1092
   313 00004C31 F7E1                <1>     mul ecx
   314 00004C33 01C3                <1>     add ebx, eax
   315 00004C35 89DA                <1>     mov edx, ebx    ;edx now has low count
   316 00004C37 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   317 00004C3B B401                <1>     mov ah, 01h     ;Set the system time
   318 00004C3D CD3A                <1>     int 3Ah
   319                              <1> 
   320 00004C3F 4889F3              <1>     mov rbx, rsi
   321 00004C42 E91AFFFFFF          <1>     jmp .clkExit
   322                              <1> 
   323                              <1> .clkBCDtoHex:
   324                              <1> ;Converts a BCD value to a Hex byte
   325                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   326 00004C47 51                  <1>     push rcx
   327 00004C48 0FB6C0              <1>     movzx eax, al   ;Zero extend
   328 00004C4B 89C1                <1>     mov ecx, eax    ;Save al in ecx
   329 00004C4D 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   330 00004C52 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   331 00004C58 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   332                              <1> .cbth0:
   333 00004C5B 050A000000          <1>     add eax, 10
   334 00004C60 E2F9                <1>     loop .cbth0
   335 00004C62 59                  <1>     pop rcx
   336 00004C63 C3                  <1>     ret
   337                              <1> 
   338                              <1> .clkHexToBCD:
   339                              <1> ;Converts a Hex byte into two BCD digits
   340                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   341 00004C64 51                  <1>     push rcx
   342 00004C65 0FB6C0              <1>     movzx eax, al   ;Zero extend
   343 00004C68 31C9                <1>     xor ecx, ecx
   344                              <1> .chtb0:
   345 00004C6A 3D0A000000          <1>     cmp eax, 10
   346 00004C6F 7209                <1>     jb .chtb1
   347 00004C71 2D0A000000          <1>     sub eax, 10
   348 00004C76 FFC1                <1>     inc ecx
   349 00004C78 EBF0                <1>     jmp short .chtb0
   350                              <1> .chtb1:
   351 00004C7A C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   352 00004C7D 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   353 00004C7F 59                  <1>     pop rcx
   354 00004C80 C3                  <1>     ret
   355 00004C81 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   356                              <1> 
   357                              <1> ;COM Driver headers and main interrupt strat
   358                              <1> com1Intr:
   359 00004C83 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   360 00004C8A EB19                <1>     jmp short comIntr
   361                              <1> com2Intr:
   362 00004C8C C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   363 00004C93 EB10                <1>     jmp short comIntr
   364                              <1> com3Intr:
   365 00004C95 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   366 00004C9C EB07                <1>     jmp short comIntr
   367                              <1> com4Intr:
   368 00004C9E C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   369                              <1> comIntr:
   370 00004CA5 50                  <1>     push rax
   371 00004CA6 53                  <1>     push rbx
   372 00004CA7 51                  <1>     push rcx
   373 00004CA8 52                  <1>     push rdx
   374 00004CA9 56                  <1>     push rsi
   375 00004CAA 57                  <1>     push rdi
   376 00004CAB 488B1D05FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   377 00004CB2 B003                <1>     mov al, 03h ;Unknown Command
   378 00004CB4 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   379 00004CB8 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   380                              <1> 
   381 00004CBA 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   382 00004CBD 3C04                <1>     cmp al, 4   ;Read Character(s)
   383 00004CBF 7462                <1>     jz .comRead
   384 00004CC1 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   385 00004CC3 0F849B000000        <1>     jz .comNondestructiveRead   
   386 00004CC9 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   387 00004CCB 0F8484000000        <1>     jz .comReadInputStatus
   388 00004CD1 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   389 00004CD3 0F84B9000000        <1>     jz .comFlushInputBuffers
   390 00004CD9 3C08                <1>     cmp al, 8
   391 00004CDB 0F84DB000000        <1>     jz .comWrite
   392 00004CE1 3C09                <1>     cmp al, 9
   393 00004CE3 0F84D3000000        <1>     jz .comWrite
   394 00004CE9 3C0A                <1>     cmp al, 0Ah
   395 00004CEB 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   396 00004CF1 EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   397                              <1> .comErrorNoCount:
   398 00004CF3 B002                <1>     mov al, 02h ;Unknown device
   399 00004CF5 EB19                <1>     jmp short .comWriteErrorCode
   400                              <1> .comReadError:
   401 00004CF7 BA0B000000          <1>     mov edx, 0Bh
   402                              <1> .comWriteError:
   403 00004CFC BA0A000000          <1>     mov edx, 0Ah
   404                              <1> .comError:
   405 00004D01 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   406 00004D04 B902000000          <1>     mov ecx, 02h    ;Unknown device
   407 00004D09 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   408 00004D0B 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   409 00004D0E 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   410                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   411 00004D10 B480                <1>     mov ah, 80h ;Set error bit
   412 00004D12 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   413                              <1> .comExit:
   414 00004D16 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   415 00004D1C 5F                  <1>     pop rdi
   416 00004D1D 5E                  <1>     pop rsi
   417 00004D1E 5A                  <1>     pop rdx
   418 00004D1F 59                  <1>     pop rcx
   419 00004D20 5B                  <1>     pop rbx
   420 00004D21 58                  <1>     pop rax
   421 00004D22 C3                  <1>     ret
   422                              <1> 
   423                              <1> .comRead:
   424 00004D23 B005                <1>     mov al, 05h ;Bad request structure length?
   425 00004D25 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   426 00004D28 75E6                <1>     jne .comWriteErrorCode
   427                              <1> 
   428 00004D2A 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   429 00004D2E 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   430                              <1> .cr1:
   431 00004D30 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   432 00004D33 741B                <1>     je .cre2
   433                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   434 00004D35 B802000000          <1>     mov eax, 02h    ;Recieve 
   435 00004D3A 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   436 00004D40 6698                <1>     cbw     ;Zero extend to upper byte
   437 00004D42 CD34                <1>     int 34h ;Recieve Char
   438 00004D44 72BB                <1>     jc .comError
   439 00004D46 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   440 00004D49 74EA                <1>     je .cr11
   441 00004D4B AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   442 00004D4C FFC1                <1>     inc ecx
   443 00004D4E EBE0                <1>     jmp short .cr1
   444                              <1> .cre2:
   445 00004D50 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   446 00004D53 EBC1                <1>     jmp short .comExit
   447                              <1> 
   448                              <1> .comReadInputStatus:
   449 00004D55 B005                <1>     mov al, 05h ;Bad request structure length?
   450 00004D57 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   451 00004D5A 75B4                <1>     jne .comWriteErrorCode
   452 00004D5C 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   453 00004D62 EBB2                <1>     jmp short .comExit
   454                              <1> 
   455                              <1> .comNondestructiveRead:
   456                              <1> ;Acts like a "read one character if there is one" function
   457 00004D64 B005                <1>     mov al, 05h ;Bad request structure length?
   458 00004D66 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   459 00004D69 75A5                <1>     jne .comWriteErrorCode
   460                              <1> .cndr1:
   461 00004D6B B802000000          <1>     mov eax, 02h    ;Recieve 
   462 00004D70 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   463 00004D76 6698                <1>     cbw     ;Zero extend to upper byte
   464 00004D78 CD34                <1>     int 34h ;Recieve Char
   465 00004D7A 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   466 00004D80 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   467 00004D83 7405                <1>     je .cndr2
   468 00004D85 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Get next char
   469 00004D88 EB8C                <1>     jmp short .comExit
   470                              <1> .cndr2:
   471 00004D8A 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 200h ;Busy bit set
   472 00004D90 EB84                <1>     jmp short .comExit
   473                              <1> 
   474                              <1> .comFlushInputBuffers:
   475 00004D92 B005                <1>     mov al, 05h ;Bad request structure length?
   476 00004D94 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   477 00004D97 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   478                              <1> .cfib0:
   479 00004D9D 8A1584000000        <1>     mov dl, byte [.comDevice]
   480 00004DA3 6698                <1>     cbw
   481 00004DA5 B802000000          <1>     mov eax, 02h    ;Recieve
   482 00004DAA CD34                <1>     int 34h
   483 00004DAC 0F8241FFFFFF        <1>     jc .comErrorNoCount
   484 00004DB2 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   485 00004DB5 75E6                <1>     jne .cfib0
   486 00004DB7 E95AFFFFFF          <1>     jmp .comExit
   487                              <1> 
   488                              <1> .comWrite:
   489 00004DBC B005                <1>     mov al, 05h ;Bad request structure length?
   490 00004DBE 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   491 00004DC1 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   492                              <1> 
   493 00004DC7 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   494 00004DCB 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   495                              <1> .cw1: 
   496 00004DCD 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   497 00004DD0 7417                <1>     je .cw2
   498 00004DD2 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   499 00004DD3 B401                <1>     mov ah, 01h ;Move function number into ah
   500 00004DD5 8A154C000000        <1>     mov dl, byte [.comDevice]
   501 00004DDB 6698                <1>     cbw     ;Zero extend to upper byte
   502 00004DDD CD34                <1>     int 34h ;Transmit char
   503 00004DDF 0F821CFFFFFF        <1>     jc .comError
   504 00004DE5 FFC1                <1>     inc ecx
   505 00004DE7 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   506                              <1> .cw2:
   507 00004DE9 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   508 00004DEC E925FFFFFF          <1>     jmp .comExit
   509                              <1> 
   510                              <1> .comOutputStatus:
   511                              <1> ;Read MODEM status
   512 00004DF1 B005                <1>     mov al, 05h ;Bad request structure length?
   513 00004DF3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   514 00004DF6 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   515                              <1> 
   516 00004DFC 8A1525000000        <1>     mov dl, byte [.comDevice]
   517 00004E02 6698                <1>     cbw     ;Zero extend to upper byte
   518 00004E04 B403                <1>     mov ah, 03h     ;Get status
   519 00004E06 CD34                <1>     int 34h
   520 00004E08 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   521 00004E0E 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   522 00004E13 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   523 00004E16 F7D0                <1>     not eax      ;Bitwise inversion
   524 00004E18 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   525 00004E1D 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   526 00004E22 E9EFFEFFFF          <1>     jmp .comExit
   527 00004E27 00                  <1> .comDevice   db 0
    42                                  %include "./Source/Drivers/diskDrv.asm"
    43                              <1> msdDriver:
    44 00004E28 50                  <1>     push rax
    45 00004E29 53                  <1>     push rbx
    46 00004E2A 51                  <1>     push rcx
    47 00004E2B 52                  <1>     push rdx
    48 00004E2C 56                  <1>     push rsi
    49 00004E2D 57                  <1>     push rdi
    50 00004E2E 55                  <1>     push rbp
    51 00004E2F 4150                <1>     push r8
    52 00004E31 488B1D7FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    53 00004E38 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    54 00004E3C B003                <1>     mov al, drvBadCmd
    55 00004E3E 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    56 00004E44 B001                <1>     mov al, drvBadUnit 
    57 00004E46 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    58 00004E4A 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    59 00004E50 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    60 00004E57 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    61 00004E5B C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    62 00004E5E 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    63 00004E62 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    64 00004E66 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    65 00004E68 488D0D9A000000      <1>     lea rcx, .msdTable
    66 00004E6F 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    67 00004E73 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    68 00004E75 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    69 00004E77 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    70 00004E7A FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    71                              <1> .msdDriverExit:
    72 00004E7C 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    73 00004E82 4158                <1>     pop r8
    74 00004E84 5D                  <1>     pop rbp
    75 00004E85 5F                  <1>     pop rdi
    76 00004E86 5E                  <1>     pop rsi
    77 00004E87 5A                  <1>     pop rdx
    78 00004E88 59                  <1>     pop rcx
    79 00004E89 5B                  <1>     pop rbx
    80 00004E8A 58                  <1>     pop rax
    81 00004E8B C3                  <1>     ret
    82                              <1> 
    83                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    84 00004E8C 4889FB              <1>     mov rbx, rdi
    85 00004E8F 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    86 00004E92 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    87 00004E94 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    88                              <1> ;Now fall through to general error
    89                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    90 00004E97 B401                <1>     mov ah, 01h
    91 00004E99 CD33                <1>     int 33h ;Read status of last operation
    92 00004E9B 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    93 00004E9E B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    94 00004EA0 7460                <1>     je .msdWriteErrorCode 
    95 00004EA2 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    96 00004EA4 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    97 00004EA7 7459                <1>     je .msdWriteErrorCode 
    98 00004EA9 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    99 00004EAC 7454                <1>     je .msdWriteErrorCode
   100                              <1> ;Device Not Ready
   101 00004EAE B002                <1>     mov al, 02h  ;Device not ready code
   102 00004EB0 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   103 00004EB3 744D                <1>     je .msdWriteErrorCode
   104 00004EB5 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   105 00004EB9 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   106                              <1> ;Write Protected
   107 00004EBD 30C0                <1>     xor al, al
   108 00004EBF 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   109 00004EC4 743C                <1>     je .msdWriteErrorCode
   110                              <1> ;CRC Error
   111 00004EC6 B004                <1>     mov al, 04h     ;CRC error code
   112 00004EC8 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   113 00004ECD 7433                <1>     je .msdWriteErrorCode
   114 00004ECF 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   115 00004ED4 742C                <1>     je .msdWriteErrorCode
   116 00004ED6 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   117 00004EDB 7425                <1>     je .msdWriteErrorCode
   118                              <1> ;Seek Error
   119 00004EDD B006                <1>     mov al, 06h     ;Seek error code
   120 00004EDF 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   121 00004EE2 741E                <1>     je .msdWriteErrorCode
   122                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   123                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   124 00004EE4 B007                <1>     mov al, 07h
   125 00004EE6 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   126 00004EE9 7417                <1>     je .msdWriteErrorCode
   127                              <1> ;Sector Not Found
   128 00004EEB B008                <1>     mov al, 08h     ;Sector not found code
   129 00004EED 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   130 00004EF0 7410                <1>     je .msdWriteErrorCode
   131                              <1> ;Write faults
   132 00004EF2 B00A                <1>     mov al, 0Ah     ;Write fault
   133 00004EF4 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   134 00004EF7 7409                <1>     je .msdWriteErrorCode
   135                              <1> ;Read faults
   136 00004EF9 B00B                <1>     mov al, 0Bh     ;Read fault
   137 00004EFB 80F911              <1>     cmp cl, 11h     ;Read error
   138 00004EFE 7402                <1>     je .msdWriteErrorCode
   139                              <1> ;General Errors
   140 00004F00 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   141                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   142 00004F02 B480                <1>     mov ah, 80h ;Set error bit
   143 00004F04 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   144 00004F08 C3                  <1>     ret ;Return to set done bit
   145                              <1> .msdTable:
   146 00004F09 0000                <1>     dw 0                            ;Function 0
   147 00004F0B 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   148 00004F0D 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   149 00004F0F 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   150 00004F11 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   151 00004F13 0000                <1>     dw 0                            ;Function 5
   152 00004F15 0000                <1>     dw 0                            ;Function 6
   153 00004F17 0000                <1>     dw 0                            ;Function 7
   154 00004F19 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   155 00004F1B 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   156 00004F1D 0000                <1>     dw 0                            ;Function 10
   157 00004F1F 0000                <1>     dw 0                            ;Function 11
   158 00004F21 C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   159 00004F23 D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   160 00004F25 ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   161 00004F27 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   162 00004F29 0000                <1>     dw 0                            ;Function 16
   163 00004F2B 0000                <1>     dw 0                            ;Function 17
   164 00004F2D 0000                <1>     dw 0                            ;Function 18
   165 00004F2F 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   166 00004F31 0000                <1>     dw 0                            ;Function 20
   167 00004F33 0000                <1>     dw 0                            ;Function 21
   168 00004F35 0000                <1>     dw 0                            ;Function 22
   169 00004F37 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   170 00004F39 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   171                              <1> 
   172                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   173                              <1> .msdMedChk:          ;Function 1
   174 00004F3B B005                <1>     mov al, 05h ;Bad request structure length
   175 00004F3D 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   176 00004F40 75C0                <1>     jne .msdWriteErrorCode
   177                              <1> 
   178 00004F42 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   179 00004F47 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   180 00004F4E 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   181 00004F51 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   182 00004F54 753F                <1>     jnz .mmcNoChange
   183                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   184 00004F56 B416                <1>     mov ah, 16h 
   185 00004F58 CD33                <1>     int 33h
   186 00004F5A 0F8237FFFFFF        <1>     jc .msdGenDiskError
   187 00004F60 80FC80              <1>     cmp ah, 80h
   188 00004F63 740E                <1>     je .mmcNoChangeLine
   189 00004F65 80FC86              <1>     cmp ah, 86h
   190 00004F68 7409                <1>     je .mmcNoChangeLine
   191 00004F6A 84E4                <1>     test ah, ah ;No change?
   192 00004F6C 7427                <1>     jz .mmcNoChange
   193 00004F6E F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   194 00004F71 750D                <1>     jnz .mmcChange
   195                              <1> ;If nothing, fall through and test manually, should never happen though
   196                              <1> .mmcNoChangeLine:
   197                              <1> ;Now we test Media Descriptor
   198 00004F73 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   199 00004F78 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   200 00004F7B 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   201 00004F7E 7410                <1>     je .mmcUnsure
   202                              <1> .mmcChange:
   203 00004F80 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   204 00004F84 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   205 00004F8B 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   206                              <1>     ;Check here if there were any open handles on the device when it was changed
   207 00004F8F C3                  <1>     ret
   208                              <1> .mmcUnsure:
   209 00004F90 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   210 00004F94 C3                  <1>     ret
   211                              <1> .mmcNoChange:
   212 00004F95 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   213 00004F99 C3                  <1>     ret
   214                              <1> 
   215                              <1> 
   216                              <1> .msdBuildBPB:        ;Function 2
   217 00004F9A B005                <1>     mov al, 05h ;Bad request structure length
   218 00004F9C 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   219 00004F9F 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   220                              <1> 
   221 00004FA5 4889DE              <1>     mov rsi, rbx
   222 00004FA8 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   223 00004FAD 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   224 00004FB4 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   225 00004FB7 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   226 00004FBB 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   227 00004FBD 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   228 00004FC0 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   229 00004FC5 CD33                <1>     int 33h
   230 00004FC7 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   231                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   232 00004FCD 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   233 00004FD1 7418                <1>     je .mbbpb0
   234 00004FD3 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   235 00004FD7 7412                <1>     je .mbbpb0
   236 00004FD9 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   237 00004FDD 740C                <1>     je .mbbpb0
   238 00004FDF 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   239 00004FE3 B007                <1>     mov al, 07h ;Unknown media error code
   240 00004FE5 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   241                              <1> .mbbpb0:
   242 00004FEB 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   243 00004FEE 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   244 00004FF3 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   245 00004FFA 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   246 00004FFE 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   247 00005001 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   248 00005005 B90F000000          <1>     mov ecx, bpbEx_size/8
   249 0000500A F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   250 0000500D C3                  <1>     ret
   251                              <1> .msdIOCTLRead:       ;Function 3, returns done
   252 0000500E B005                <1>     mov al, drvBadDrvReq
   253 00005010 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   254 00005013 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   255 00005019 C3                  <1>     ret
   256                              <1> .msdRead:            ;Function 4
   257                              <1> ;Will read one sector at a time.
   258 0000501A B005                <1>     mov al, 05h ;Bad request structure length
   259 0000501C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   260 0000501F 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   261                              <1> 
   262 00005025 4889DF              <1>     mov rdi, rbx
   263 00005028 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   264                              <1> .msdr0:
   265 0000502A B682                <1>     mov dh, 82h ;LBA Read Sectors
   266 0000502C E841010000          <1>     call .msdBlkIOCommon
   267 00005031 0F8255FEFFFF        <1>     jc .msdIOError
   268 00005037 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   269 0000503F 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   270 00005047 FFC6                <1>     inc esi
   271 00005049 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   272 0000504C 75DC                <1>     jne .msdr0
   273 0000504E 4889FB              <1>     mov rbx, rdi
   274 00005051 C3                  <1>     ret
   275                              <1> .msdWrite:           ;Function 8
   276                              <1> ;Will write one sector at a time.
   277 00005052 B005                <1>     mov al, 05h ;Bad request structure length
   278 00005054 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   279 00005057 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   280                              <1> 
   281 0000505D 4889DF              <1>     mov rdi, rbx
   282 00005060 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   283                              <1> .msdw0:
   284 00005062 B683                <1>     mov dh, 83h ;LBA Write Sectors
   285 00005064 E809010000          <1>     call .msdBlkIOCommon
   286 00005069 0F821DFEFFFF        <1>     jc .msdIOError
   287 0000506F 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   288 00005077 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   289 0000507F FFC6                <1>     inc esi
   290 00005081 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   291 00005084 75DC                <1>     jne .msdw0
   292 00005086 4889FB              <1>     mov rbx, rdi
   293 00005089 C3                  <1>     ret
   294                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   295                              <1> ;Will write one sector at a time and then verify it.
   296 0000508A B005                <1>     mov al, 05h ;Bad request structure length
   297 0000508C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   298 0000508F 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   299                              <1> 
   300 00005095 4889DF              <1>     mov rdi, rbx
   301 00005098 31F6                <1>     xor esi, esi  ;Set counter to zero
   302                              <1> .msdwv0:
   303 0000509A B683                <1>     mov dh, 83h ;LBA Write Sectors
   304 0000509C E8D1000000          <1>     call .msdBlkIOCommon
   305 000050A1 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   306 000050A7 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   307 000050A9 E8C4000000          <1>     call .msdBlkIOCommon
   308 000050AE 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   309 000050B4 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   310 000050BC 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   311 000050C4 FFC6                <1>     inc esi
   312 000050C6 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   313 000050C9 75CF                <1>     jne .msdwv0
   314 000050CB 4889FB              <1>     mov rbx, rdi
   315 000050CE C3                  <1>     ret
   316                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   317 000050CF B005                <1>     mov al, drvBadDrvReq
   318 000050D1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   319 000050D4 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   320                              <1> 
   321 000050DA C3                  <1>     ret
   322                              <1> .msdDevOpen:         ;Function 13
   323 000050DB B005                <1>     mov al, drvBadDrvReq
   324 000050DD 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   325 000050E0 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   326                              <1> 
   327 000050E6 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   328 000050EB 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   329 000050F2 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   330 000050F5 C3                  <1>     ret
   331                              <1> .msdDevClose:        ;Function 14
   332 000050F6 B005                <1>     mov al, drvBadDrvReq
   333 000050F8 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   334 000050FB 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   335                              <1> 
   336 00005101 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   337 00005106 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   338 0000510D FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   339 00005110 C3                  <1>     ret
   340                              <1> .msdRemovableMedia:  ;Function 15
   341 00005111 B005                <1>     mov al, drvBadDrvReq
   342 00005113 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   343 00005116 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   344                              <1> 
   345 0000511C 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   346 00005121 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   347 00005128 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   348 0000512B B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   349 00005130 31D2                <1>     xor edx, edx    ;Busy bit clear
   350 00005132 A880                <1>     test al, 80h
   351 00005134 0F44CA              <1>     cmovz ecx, edx
   352 00005137 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   353 0000513B C3                  <1>     ret
   354                              <1> .msdGenericIOCTL:    ;Function 19
   355 0000513C B005                <1>     mov al, drvBadDrvReq
   356 0000513E 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   357 00005141 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   358                              <1> 
   359 00005147 C3                  <1>     ret
   360                              <1> .msdGetLogicalDev:   ;Function 23
   361 00005148 B005                <1>     mov al, drvBadDrvReq
   362 0000514A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   363 0000514D 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   364                              <1> 
   365 00005153 8A0541000000        <1>     mov al, byte [.msdCurDev]
   366 00005159 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   367 0000515C C3                  <1>     ret
   368                              <1> .msdSetLogicalDev:   ;Function 24
   369 0000515D B005                <1>     mov al, drvBadDrvReq
   370 0000515F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   371 00005162 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   372                              <1> 
   373 00005168 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   374 0000516B 880529000000        <1>     mov byte [.msdCurDev], al
   375 00005171 C3                  <1>     ret
   376                              <1> 
   377                              <1> .msdBlkIOCommon:  ;Does block IO
   378                              <1> ;Called with rdi containing old rbx value and ah with function number
   379                              <1> ;rbp points to bpb
   380                              <1> ;Error handled by caller
   381                              <1> ;Sector count handled by caller
   382                              <1> ;Called with dh = BIOS function number
   383 00005172 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   384 00005177 8A90[9B510000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   385 0000517D 31C9                <1>     xor ecx, ecx
   386 0000517F 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   387 00005182 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   388 00005186 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   389 0000518A 88F4                <1>     mov ah, dh
   390 0000518C B001                <1>     mov al, 01h ;Do one sector at a time 
   391 0000518E CD33                <1>     int 33h
   392 00005190 C3                  <1>     ret
   393                              <1> 
   394 00005191 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   395                              <1> ;LASTDRIVE default is 5
   396                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   397                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   398 0000519A 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   399                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   400 0000519B FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   401 000051A0 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   402 000051A5 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   402 000051AE 000000000000000000- <1>
   402 000051B7 000000000000000000- <1>
   402 000051C0 000000000000000000- <1>
   402 000051C9 00000000            <1>
   403 000051CD 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   403 000051D6 000000000000000000- <1>
   403 000051DF 000000000000000000- <1>
   403 000051E8 000000000000000000- <1>
   403 000051F1 000000000000000000- <1>
   403 000051FA 000000000000000000- <1>
   403 00005203 000000000000000000- <1>
   403 0000520C 000000000000000000- <1>
   403 00005215 000000000000000000- <1>
   403 0000521E 000000000000000000- <1>
   403 00005227 000000000000000000- <1>
   403 00005230 000000000000000000- <1>
   403 00005239 000000000000000000- <1>
   403 00005242 000000000000000000- <1>
   403 0000524B 000000000000000000- <1>
   403 00005254 000000000000000000- <1>
   403 0000525D 000000000000000000- <1>
   403 00005266 000000000000000000- <1>
   403 0000526F 000000000000000000- <1>
   403 00005278 000000000000000000- <1>
   403 00005281 000000000000000000- <1>
   403 0000528A 000000000000000000- <1>
   403 00005293 000000000000000000- <1>
   403 0000529C 000000000000000000- <1>
   403 000052A5 000000000000000000- <1>
   403 000052AE 000000000000000000- <1>
   403 000052B7 000000000000000000- <1>
   403 000052C0 000000000000000000- <1>
   403 000052C9 000000000000000000- <1>
   403 000052D2 000000000000000000- <1>
   403 000052DB 000000000000000000- <1>
   403 000052E4 000000000000000000- <1>
   403 000052ED 000000000000000000- <1>
   403 000052F6 000000000000000000- <1>
   403 000052FF 000000000000000000- <1>
   403 00005308 000000000000000000- <1>
   403 00005311 000000000000000000- <1>
   403 0000531A 000000000000000000- <1>
   403 00005323 000000000000000000- <1>
   403 0000532C 000000000000000000- <1>
   403 00005335 000000000000000000- <1>
   403 0000533E 000000000000000000- <1>
   403 00005347 000000000000000000- <1>
   403 00005350 000000000000000000- <1>
   403 00005359 000000000000000000- <1>
   403 00005362 000000000000000000- <1>
   403 0000536B 000000000000000000- <1>
   403 00005374 000000000000000000- <1>
   403 0000537D 000000000000000000- <1>
   403 00005386 000000000000000000- <1>
   403 0000538F 000000000000000000- <1>
   403 00005398 000000000000000000- <1>
   403 000053A1 000000000000000000- <1>
   403 000053AA 000000000000000000- <1>
   403 000053B3 000000000000000000- <1>
   403 000053BC 000000000000000000- <1>
   403 000053C5 000000000000000000- <1>
   403 000053CE 000000000000000000- <1>
   403 000053D7 000000000000000000- <1>
   403 000053E0 000000000000000000- <1>
   403 000053E9 000000000000000000- <1>
   403 000053F2 000000000000000000- <1>
   403 000053FB 000000000000000000- <1>
   403 00005404 000000000000000000- <1>
   403 0000540D 000000000000000000- <1>
   403 00005416 000000000000000000- <1>
   403 0000541F 000000000000        <1>
   404                              <1> 
   405                              <1> endptr equ $
    43                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    44                                  ;Paragraph alignment
    45                                  %include "./Source/BSS/dosDynaDataArea.asm"
    46                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    47                              <1> ; the MCB chain!
    48                              <1> ddaStart:
    49 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    50                              <1> 
    51                              <1> ;Create DPB chain of first 5 available DPB slots
    52                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    53 00000010 <res 35h>           <1> firstDPB        resb dpb_size
    54 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    55                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    56                              <1> ;Always jettison this space
    57 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    58 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    59 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    60                              <1> 
    61 00000119 <res 30h>           <1> tmpBufHdr       resb bufferHdr_size
    62 00000149 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    63                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    64                              <1> dynamicDataAreaLength equ $ - ddaStart
    64          ------------------  <1>  info: assembly required 1+9+2 passes

