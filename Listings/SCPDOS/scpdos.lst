     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvExtFun   equ 40h ;If set, functions 13, 17, 18 supported (must be)
    73                              <1>     devDrvIOCTL2   equ 80h ;If set, IOCTL function 19 supported
    74                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    75                              <1>     devDrvIOCTL    equ 4000h ;If set, Generic IOCTL supported
    76                              <1>     devDrvChar     equ 8000h ;If set, Char device
    77                              <1> ;Bit 0 1=console input
    78                              <1> ;    1 1=console output (character devices)
    79                              <1> ;    2 1=NUL device
    80                              <1> ;    3 1=CLOCK device
    81                              <1> ;    4 1=INT 49 output (CON)
    82                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    83                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    84                              <1> ;   11 1=open/close/removable media supported (3.0+)
    85                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    86                              <1> ;      1=media descriptor in FAT required (block devices)
    87                              <1> ;   14 1=IOCTL supported
    88                              <1> ;   15 0=block device
    89                              <1> ;      1=character device
    90                              <1> 
    91                              <1> ;Driver structures
    92                              <1> 
    93                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    94                              <1> 
    95                              <1>     .hdrlen resb 1  ;Length of the request header
    96                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    97                              <1>     .cmdcde resb 1  ;Command code
    98                              <1>     .status resw 1  ;Status word
    99                              <1>     .devptr resq 1  ;Device queue pointer field
   100                              <1> 
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> struc drvReqHdr
   104                              <1>     drvReqHdrM
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   105                              <1> endstruc
   106                              <1> 
   107                              <1> struc initReqPkt  ;Init Request Packet
   108                              <1> 
   109                              <1>     drvReqHdrM   ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   110 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   111 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   112 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   113 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   118                              <1> 
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   120 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   121 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   122 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   129 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   130 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   131 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   132                              <1> 
   133                              <1> endstruc
   134                              <1> 
   135                              <1> struc ioReqPkt   ;IO Request Packet
   136                              <1> 
   137                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   138 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   139 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   140 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   141 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   142 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   143                              <1> 
   144                              <1> endstruc
   145                              <1> 
   146                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   147                              <1>     
   148                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   149 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc statusReqPkt   ;Status Request Packet
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   156                              <1> 
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc openReqPkt ;Open Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc closeReqPkt ;Close Device Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   180                              <1>      
   181                              <1> endstruc
   182                              <1> 
   183                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   184                              <1> 
   185                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   186 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   187 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   188 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   189 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   190 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   201                              <1>     
   202                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   203                              <1> 
   204                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   138                              <1>     ;If any of the three bits are set, then ALL three bits are set
   139                              <1>     ; in addition to whatever the user passed to search for.
   140                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   141                              <1> 
   142                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   143                              <1> 
   144 00000000 ??????              <1>     .jmpBoot                resb 3 
   145 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   146 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   147 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   148 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   149 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   150 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   151 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   152 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   153 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   154 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   155 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   156 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   157 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   158 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   159 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   160 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   161 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   162 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   163                              <1> 
   164                              <1> endstruc
   165                              <1> 
   166                              <1> struc FSInfo
   167                              <1> 
   168 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   169 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   170 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   171 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   172 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   173 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   174 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   175                              <1> 
   176                              <1> endstruc
     8                                  %include "./Source/Include/dosStruc.inc"
     9                              <1> 
    10                              <1> ;-------------------------------------------------------;
    11                              <1> ; This include file contains miscellaneous internal     ;
    12                              <1> ; SCP/DOS structures.                                   ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> 
    15                              <1> ;------------------------------------------------------------------------;
    16                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    17                              <1> ; its file system structure. This is used to locate files and structures
    18                              <1> ; on the device itself and to translate file requests to cluster chains
    19                              <1> ; to LBAs to pass to the disk driver..
    20                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    21                              <1> ; drivers Initialise routine has been called.
    22                              <1> ;------------------------------------------------------------------------;
    23                              <1> struc dpb        ;Drive Parameter Block
    24                              <1> 
    25 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    26 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    27 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    28 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    29 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    30 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    31 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    32 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    33 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    34 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    35 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    36 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    37                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    38 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    39 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    40 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    41 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    42 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    43 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    44                              <1> 
    45                              <1> endstruc
    46                              <1> 
    47                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    48                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    49                              <1> ;------------------------------------------------------------------------;
    50                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    51                              <1> ; All disk pathing requests go via the CDS for that drive.
    52                              <1> ; The default drive is the last accessed drive, this number is stored
    53                              <1> ; in the DOS data area.
    54                              <1> ; The CDS is stored as an array with the offset into the array being 
    55                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    56                              <1> ;
    57                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> struc cds       ;Current Directory structure
    60 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    61 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    62 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    63 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    64 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    65 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    66                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    67                              <1> ; another, we save the number of chars to skip to that deep level).
    68                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    69                              <1> ; Only affects for SUBST drives, not JOIN
    70                              <1> ; Flags: Bit 15 set = Network drive
    71                              <1> ;        Bit 14 set = Physical drive
    72                              <1> ;        Bit 13 set = JOIN'ed drive
    73                              <1> ;        Bit 12 set = SUBST'ed drive
    74                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    75                              <1> endstruc
    76                              <1> ;CDS equates
    77                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    78                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    79                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    80                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    81                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    82                              <1> ;------------------------------------------------------------------------;
    83                              <1> ; The SFT is a way to allow applications to open file handles to files 
    84                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    85                              <1> ; under the first header, and then a second header will be linked to the 
    86                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    87                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    88                              <1> ; using the FCBS= command. Default FCBS=5.
    89                              <1> ;
    90                              <1> ; A file handle describes the file, and the location within the file that
    91                              <1> ; we are reading. The file handle can be manipulated without the file
    92                              <1> ; being in memory, thus allowing the user to access data without needing 
    93                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    94                              <1> ; accessing devices, by treating them as files with their drivers 
    95                              <1> ; responding and translating the manipulations of the file handle itself.
    96                              <1> ; Neither the driver nor the application should see or use the SFT for
    97                              <1> ; the handle, as it is subject to change (and will change when file 
    98                              <1> ; sharing provisions are included). The DOS will make requests to the 
    99                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   100                              <1> ; track of the information in the SFT entry for that handle. 
   101                              <1> ;
   102                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   103                              <1> ; can point to the same file. It all depends on what the applications 
   104                              <1> ; want to do with the File.
   105                              <1> ;
   106                              <1> ; !!!!IMPORTANT!!!!
   107                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   108                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   109                              <1> ;
   110                              <1> ;Each SFT may look like this:
   111                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   112                              <1> ;            |                |
   113                              <1> ;       wNumFiles*sft    wNumFiles*sft
   114                              <1> ;
   115                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   116                              <1> ; System FCBs.
   117                              <1> ;
   118                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   119                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   120                              <1> ;
   121                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   122                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   123                              <1> ;------------------------------------------------------------------------;
   124                              <1> struc sfth   ;System file table header
   125                              <1> ; This is the SFT header.
   126                              <1> ; This structure comes before the start of the first file in the array/table.
   127 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   128 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc sft
   132                              <1> ;This is the file struc itself
   133 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   134 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   135 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   136 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   137 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   138 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   139 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   140 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   141 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   142 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   143 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   144 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   145 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   146 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   147 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   148 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   149 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   150 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   151 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   152                              <1> ;                           0 means no record
   153                              <1> endstruc
   154                              <1> ;Open Mode equates
   155                              <1> ;Access modes   Bits[2:0]
   156                              <1> ReadAccess      equ 0h
   157                              <1> WriteAccess     equ 1h
   158                              <1> RWAccess        equ 2h
   159                              <1> ;Bit 3 reserved 0
   160                              <1> ;Sharing modes  Bits[6:4]
   161                              <1> CompatShare     equ 0h
   162                              <1> denyRWShare     equ 10h
   163                              <1> denyWriteShare  equ 20h
   164                              <1> denyReadShare   equ 30h
   165                              <1> denyNoneShare   equ 40h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> 
   169                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> ;------------------------------------------------------------------------;
   198                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   199                              <1> ; to an internal buffer, and then copying it to the specified location
   200                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   201                              <1> ; another request for the same sector from the same device is made, so 
   202                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   203                              <1> ; size, selected according to the largest detected sector size during 
   204                              <1> ; the initial loadup.
   205                              <1> ;
   206                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   207                              <1> ;
   208                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   209                              <1> ;------------------------------------------------------------------------;
   210                              <1> 
   211                              <1> struc bufferHdr
   212 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   213 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   219 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   220 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   221                              <1>     .dataarea:             ;Points to the start of the data area
   222                              <1> endstruc
   223                              <1> ;Buffer Flag equates
   224                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   225                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   226                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   227                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   228                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   229                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   230                              <1> ;Note! A buffer is marked as referenced only when the application 
   231                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   232                              <1> ;------------------------------------------------------------------------;
   233                              <1> ; Memory control block for each memory arena
   234                              <1> ;------------------------------------------------------------------------;
   235                              <1> struc mcb
   236 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   237 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   238 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   239 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   240                              <1>     .program:
   241                              <1> endstruc
   242                              <1> ;MCB equates
   243                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   244                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   245                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   246                              <1> mcbMarkCtn      equ "M"
   247                              <1> mcbMarkEnd      equ "Z"
   248                              <1> 
   249                              <1> memFirstFit     equ 0   ;First free block goes to application
   250                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   251                              <1> memLastFit      equ 2   ;Last free block goes to application
   252                              <1> 
   253                              <1> ;Owner = Para aligned address => Owning application PSP
   254                              <1> ;...To consider...
   255                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   256                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   257                              <1> ;------------------------------------------------------------------------;
   258                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   259                              <1> ; following order, thus allowing for return values to be placed in the 
   260                              <1> ; registers by accessing the caller register stack frame.
   261                              <1> ;------------------------------------------------------------------------;
   262                              <1> struc callerFrame
   263 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   264 00000008 ????????????????    <1>     .rbx    resq 1    
   265 00000010 ????????????????    <1>     .rcx    resq 1
   266 00000018 ????????????????    <1>     .rdx    resq 1
   267 00000020 ????????????????    <1>     .rsi    resq 1
   268 00000028 ????????????????    <1>     .rdi    resq 1
   269 00000030 ????????????????    <1>     .rbp    resq 1
   270 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   271 00000040 ????????????????    <1>     .r9     resq 1
   272                              <1> ;Pushed by Processor when invoked via Interrupt
   273 00000048 ????????????????    <1>     .rip    resq 1
   274 00000050 ????????????????    <1>     .cs     resq 1
   275 00000058 ????????????????    <1>     .flags  resq 1
   276                              <1> endstruc
   277                              <1> 
   278                              <1> struc fcb
   279                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   280 00000000 ??                  <1>     .driveNum   resb 1
   281 00000001 ????????????????    <1>     .filename   resb 8
   282 00000009 ??????              <1>     .fileext    resb 3
   283 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   284                              <1> ;One block consists of 128 records, of size denoted in the below
   285 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   286 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   287 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   288 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   289 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   290 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   291 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   292 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   293 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   294                              <1>     ;If record size > 64, high byte is ignored.
   295                              <1>     ;Used for random read and write operations to find the right record
   296                              <1> endstruc
   297                              <1> 
   298                              <1> struc filename
   299                              <1> ;8.3 File name struct
   300 00000000 ????????????????    <1>     .fName  resb 8
   301 00000008 ??????              <1>     .fExt   resb 3
   302                              <1> endstruc
   303                              <1> 
   304                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   305 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   306 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   307 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   308 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   309 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   310 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   311 00000016 ????                <1>     .fileTime   resw 1  ;File time
   312 00000018 ????                <1>     .fileDate   resw 1  ;File date
   313 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   314 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   315                              <1> endstruc
   316                              <1> 
   317                              <1> struc psp
   318 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   319 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   320 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   321 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   322 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   323 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   324 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   325 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   326 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   327 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   328 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   329 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   330 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   331 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   332                              <1> ;Extra handle arrays are grouped into a linked list
   333                              <1> ;The below are in the same place as in DOS
   334 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   335 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   336                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   337 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   338 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   339                              <1> endstruc
   340                              <1> 
   341                              <1> struc clkStruc
   342 00000000 ????                <1>     .dateWord   resw 1
   343 00000002 ??                  <1>     .minutes    resb 1
   344 00000003 ??                  <1>     .hours      resb 1
   345 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   346 00000005 ??                  <1>     .seconds    resb 1
   347                              <1> endstruc
   348                              <1> 
   349                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   350                              <1> ;for a space of 64Gb
   351                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   352                              <1> 
   353                              <1> ;Critical Error AH bitfield equates
   354                              <1> critRead    equ 0h
   355                              <1> critWrite   equ 1h
   356                              <1> critDOS     equ 0h
   357                              <1> critFAT     equ 2h
   358                              <1> critDir     equ 4h
   359                              <1> critData    equ 6h
   360                              <1> critFailOK  equ 8h
   361                              <1> critRetryOK equ 10h
   362                              <1> critIgnorOK equ 20h
   363                              <1> critCharDev equ 80h
   364                              <1> 
   365                              <1> critIgnore  equ 0
   366                              <1> critRetry   equ 1
   367                              <1> critAbort   equ 2
   368                              <1> critFail    equ 3
   369                              <1> 
   370                              <1> ;MISC ASCII control chars
   371                              <1> NUL equ 00h ;^@         | ASCII Null
   372                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   373                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   374                              <1> BEL equ 07h ;^G         | ASCII Bell
   375                              <1> BSP equ 08h ;^H         | ASCII Backspace
   376                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   377                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   378                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   379                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   380                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   381                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   382                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   383                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   384                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   385                              <1> SPC equ 20h ;Printable  | ASCII Space
   386                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   387                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   388                              <1> 
   389                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   390                              <1> ;Extended Ascii Codes
   391                              <1> eF1     equ 3Bh ;F1 second byte
   392                              <1> eF2     equ 3Ch ;F2 second byte
   393                              <1> eF3     equ 3Dh ;F3 second byte
   394                              <1> eF4     equ 3Eh ;F4 second byte
   395                              <1> eF5     equ 3Fh ;F5 second byte
   396                              <1> eF6     equ 40h ;F6 second byte
   397                              <1> eF7     equ 41h ;F7 second byte
   398                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   399                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   400                              <1> eIns    equ 52h ;Insert second byte
   401                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
     9                                  %include "./Source/Debug/debSym.inc"
    10                              <1> ;This file will include the debuging symbols
    11                              <1> 
    12                              <1> %define true 1
    13                              <1> %define false 0
    14                              <1> 
    15                              <1> ;Switch the DEBUG to false in production!
    16                              <1> %define DEBUG false
    17                              <1> %define DPBINFO false
    18                              <1> %define REGS false
    19                              <1> %define ENDSTATUS true
    20                              <1> %define ALLOCTEST false
    21                              <1> 
    22                              <1> 
    23                              <1> ;Use this space as the debug stack
    24                              <1> %define debStackTop 80000h
    10                                  %include "./Source/Include/dosError.inc"
    11                              <1> ;DOS Error codes
    12                              <1> 
    13                              <1> ;Extended Error Codes
    14                              <1> errInvFnc   equ 1   ;Invalid function number
    15                              <1> errFnf      equ 2   ;File not found
    16                              <1> errPnf      equ 3   ;Path not found
    17                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    18                              <1> errAccDen   equ 5   ;Access denied (to resource)
    19                              <1> errBadHdl   equ 6   ;Invalid handle
    20                              <1> errMCBbad   equ 7   ;MCB's destroyed
    21                              <1> errNoMem    equ 8   ;Insufficient memory
    22                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    23                              <1> errBadEnv   equ 10  ;Invalid environment
    24                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    25                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    26                              <1> errInvDat   equ 13  ;Invalid data
    27                              <1> ;           equ 14  ;Reserved
    28                              <1> errBadDrv   equ 15  ;Invalid drive specified
    29                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    30                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    31                              <1> errNoFil    equ 18  ;No more files
    32                              <1> ;The following are Driver error codes + 19
    33                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    34                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    35                              <1> errUnkUnt   equ 20  ;Unknown Unit
    36                              <1> errDrvNR    equ 21  ;Drive not ready
    37                              <1> errUnkCmd   equ 22  ;Unknown Command
    38                              <1> errCRCerr   equ 23  ;Data (CRC) error
    39                              <1> errBadRLn   equ 24  ;Bad request structure length
    40                              <1> errSekErr   equ 25  ;Seek error
    41                              <1> errUnkMed   equ 26  ;Unknown media type
    42                              <1> errSecNF    equ 27  ;Sector not Found
    43                              <1> errNoPap    equ 28  ;Printer out of paper
    44                              <1> errWF       equ 29  ;Write fault
    45                              <1> errRF       equ 30  ;Read fault
    46                              <1> errGF       equ 31  ;General fault
    47                              <1> ;----------------------------------------------
    48                              <1> ;The following two go inbetween the Disk errors
    49                              <1> errShrVio   equ 32  ;Sharing violations
    50                              <1> errLokVio   equ 33  ;File Lock violation
    51                              <1> ;----------------------------------------------
    52                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    53                              <1> errNoFCB    equ 35  ;FCB unavailable
    54                              <1> errShrFul   equ 36  ;Sharing buffer full
    55                              <1> 
    56                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    57                              <1> 
    58                              <1> errFilExist equ 80  ;File already exists
    59                              <1> errDirExist equ 82  ;Directory already exists
    60                              <1> errFI44     equ 83  ;Fail on INT 44h
    61                              <1> errRedir    equ 84  ;Too many levels of redirection
    62                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    63                              <1> errBadPass  equ 86  ;Bad password
    64                              <1> errBadParam equ 87  ;Bad parameter passed to request
    65                              <1> errNetWrite equ 88  ;Network Write Fault
    66                              <1> ;-----------------------------------------------------------------------------
    67                              <1> ;Error Loci
    68                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    69                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    70                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    71                              <1> eLocChr     equ 4   ;Serial/Character Device error
    72                              <1> eLocMem     equ 5   ;Related to RAM
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error Actions
    75                              <1> eActRet     equ 1   ;Retry
    76                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    77                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    78                              <1> eActAbt     equ 4   ;Abort with cleanup
    79                              <1> eActKil     equ 5   ;Abort without cleanup
    80                              <1> eActIgn     equ 6   ;Ignore error
    81                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    82                              <1> ;-----------------------------------------------------------------------------
    83                              <1> ;Error classes
    84                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    85                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    86                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    87                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    88                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    89                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    90                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    91                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    92                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    93                              <1> eClsLocked  equ 10  ;Resource Locked
    94                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    95                              <1> eClsClash   equ 12  ;Resource already exists!
    96                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  Segment .text align=1   ;Init code
    12                                  %define currSegVBase 0
    13                                  %include "./Source/Sysinit/sysInit.asm"
    14                              <1> ; We arrive here with the following values in the registers.
    15                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    16                              <1> ; dx  = Int 33h boot device number
    17                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    18                              <1> 
    19 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    20 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
    21 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
    22 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    23 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    24 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    25 0000001A F348A5              <1>     rep movsq   ;Copy over
    26 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    27 00000022 50                  <1>     push rax
    28 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    29                              <1> sysInitldr:
    30                              <1> ;Now the tough part, load DOS to 800
    31 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    32                              <1> .read:
    33 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    34 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    34 00000035 00                  <1>
    35 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    36 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    37 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    38 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    39 0000003F CD33                <1>     int 33h
    40 00000041 0F83B9010000        <1>     jnc initBegin   ;No error? Yay, DOS loaded.
    41 00000047 FFCE                <1>     dec esi
    42 00000049 75DE                <1>     jnz .read
    43 0000004B 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    44 00000052 B804130000          <1>     mov eax, 1304h
    45 00000057 CD30                <1>     int 30h
    46 00000059 CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    47 0000005B 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    47 00000064 6F6164204572726F72- <1>
    47 0000006D 0A0D00              <1>
    48 00000070 000000000000000000- <1>     db 100h-($-$$) dup 00h ;Fill with nulls  
    48 00000079 000000000000000000- <1>
    48 00000082 000000000000000000- <1>
    48 0000008B 000000000000000000- <1>
    48 00000094 000000000000000000- <1>
    48 0000009D 000000000000000000- <1>
    48 000000A6 000000000000000000- <1>
    48 000000AF 000000000000000000- <1>
    48 000000B8 000000000000000000- <1>
    48 000000C1 000000000000000000- <1>
    48 000000CA 000000000000000000- <1>
    48 000000D3 000000000000000000- <1>
    48 000000DC 000000000000000000- <1>
    48 000000E5 000000000000000000- <1>
    48 000000EE 000000000000000000- <1>
    48 000000F7 000000000000000000  <1>
    49                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    50                              <1>     ;Store space for a static PSP
    51 00000100 000000000000000000- <1>     db 100h dup 00h
    51 00000109 000000000000000000- <1>
    51 00000112 000000000000000000- <1>
    51 0000011B 000000000000000000- <1>
    51 00000124 000000000000000000- <1>
    51 0000012D 000000000000000000- <1>
    51 00000136 000000000000000000- <1>
    51 0000013F 000000000000000000- <1>
    51 00000148 000000000000000000- <1>
    51 00000151 000000000000000000- <1>
    51 0000015A 000000000000000000- <1>
    51 00000163 000000000000000000- <1>
    51 0000016C 000000000000000000- <1>
    51 00000175 000000000000000000- <1>
    51 0000017E 000000000000000000- <1>
    51 00000187 000000000000000000- <1>
    51 00000190 000000000000000000- <1>
    51 00000199 000000000000000000- <1>
    51 000001A2 000000000000000000- <1>
    51 000001AB 000000000000000000- <1>
    51 000001B4 000000000000000000- <1>
    51 000001BD 000000000000000000- <1>
    51 000001C6 000000000000000000- <1>
    51 000001CF 000000000000000000- <1>
    51 000001D8 000000000000000000- <1>
    51 000001E1 000000000000000000- <1>
    51 000001EA 000000000000000000- <1>
    51 000001F3 000000000000000000- <1>
    51 000001FC 00000000            <1>
    52                              <1> ;END OF FIRST SECTOR!!
    53                              <1> ;DOS SYSINIT BEGINS HERE
    54                              <1> ;First move the alignment of the DOSSEG to 4Kb
    55                              <1> initBegin:
    56 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    57 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    58 00000206 0F32                <1>     rdmsr
    59 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    60 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    61 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    62 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    63 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    64 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    65 00000221 89F8                <1>     mov eax, edi
    66 00000223 4889FA              <1>     mov rdx, rdi
    67 00000226 48C1EA20            <1>     shr rdx, 20h
    68 0000022A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    69                              <1> ;------------------------------------------------;
    70                              <1> ;              Connect Debugger                  ;
    71                              <1> ;------------------------------------------------;
    72                              <1> %if DEBUG
    73                              <1> ;Only connect if in debug mode
    74                              <1>     mov eax, 0C501h ;Connect debugger
    75                              <1>     int 35h
    76                              <1> %endif
    77                              <1> ;------------------------------------------------;
    78                              <1> ;           Sanitise the data area               ;
    79                              <1> ;------------------------------------------------;
    80                              <1> ; This call initialises ALL fields in the DOS    ;
    81                              <1> ; data area with 0's. Thus any fields, which     ;
    82                              <1> ; need to be initialised with a 0 value, are     ;
    83                              <1> ; initialised for free.                          ;
    84                              <1> ;------------------------------------------------;
    85 0000022C B9[11D90300]        <1>     mov ecx, dSegLen
    86 00000231 30C0                <1>     xor al, al
    87 00000233 57                  <1>     push rdi    ;Temp save rdi on the stack
    88 00000234 F3AA                <1>     rep stosb
    89 00000236 5F                  <1>     pop rdi
    90                              <1> ;------------------------------------------------;
    91                              <1> ;          Start saving Basic DOS data           ;
    92                              <1> ;------------------------------------------------;
    93 00000237 6444883C25-         <1>     mov byte fs:[bootDrive], r15b ;Save the boot drive in memory
    93 0000023C [10C00300]          <1>
    94                              <1> ;Copy DOS to its final resting place
    95 00000240 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    95 00000245 [00C00300]          <1>
    96 00000249 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    96 0000024E [08C00300]          <1>
    97 00000252 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    98 00000255 4881C7[11D90300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    99 0000025C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
   100 00000263 B900100000          <1>     mov ecx, 1000h
   101 00000268 F348A5              <1>     rep movsq
   102                              <1> 
   103 0000026B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   104 0000026D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   105 00000271 664489C0            <1>     mov ax, r8w
   106 00000275 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
   107 0000027D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
   108 00000285 64C60425[70C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
   108 0000028D 05                  <1>
   109                              <1>     ;mov byte fs:[numPhysVol], 0    ;Number of logical drives
   110 0000028E 64C60425[96C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 8 files, at start 5
   110 00000296 05                  <1>
   111 00000297 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
   111 0000029C [97C00300]1400      <1>
   112 000002A2 64C60425[71C00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
   112 000002AA 01                  <1>
   113                              <1>     ;If no detected Int 33h devices, halt 
   114 000002AB 49C1E810            <1>     shr r8, 2*8
   115 000002AF 4584C0              <1>     test r8b, r8b
   116 000002B2 0F84D50A0000        <1>     jz errorInit
   117                              <1> ;------------------------------------------------;
   118                              <1> ;          Add additional page tables            ;
   119                              <1> ;------------------------------------------------;
   120                              <1> ;This will allow for up to 64Gb of addressible space
   121 000002B8 4889EF              <1>     mov rdi, rbp
   122                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
   123 000002BB B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
   124 000002C0 57                  <1>     push rdi
   125 000002C1 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
   125 000002CA 00                  <1>
   126                              <1> pdtLoop:
   127 000002CB 48AB                <1>     stosq
   128 000002CD 480500002000        <1>     add rax, 200000h
   129 000002D3 FFC9                <1>     dec ecx
   130 000002D5 75F4                <1>     jnz pdtLoop
   131 000002D7 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   132                              <1> ;Now we add every 4kb page to the page directory pointer table
   133                              <1> ;15 4kb pages to consider
   134 000002D8 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   135 000002DB 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   136 000002DE 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   137 000002E5 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   138 000002EC B93C000000          <1>     mov ecx, 60
   139 000002F1 480D03000000        <1>     or rax, 3h      ;present and r/w
   140                              <1> pdptLoop:
   141 000002F7 48AB                <1>     stosq
   142 000002F9 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   143 000002FF FFC9                <1>     dec ecx
   144 00000301 75F4                <1>     jnz pdptLoop
   145 00000303 0F20DF              <1>     mov rdi, cr3
   146 00000306 0F22DF              <1>     mov cr3, rdi
   147                              <1> 
   148                              <1> ;------------------------------------------------;
   149                              <1> ;                   MCB inits                    ;
   150                              <1> ;------------------------------------------------;
   151                              <1> mcbInit:
   152 00000309 B820E80000          <1>     mov eax, 0E820h
   153 0000030E CD35                <1>     int 35h
   154                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   155 00000310 E804010000          <1>     call .mcbFindAddress
   156 00000315 7349                <1>     jnc .mcbi1  ;If found, proceed
   157                              <1>     ;Here, we try use E801h
   158 00000317 B801E80000          <1>     mov eax, 0E801h
   159 0000031C CD35                <1>     int 35h
   160 0000031E 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   161 00000321 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   162 00000324 85C0                <1>     test eax, eax
   163 00000326 741B                <1>     jz .worst
   164 00000328 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   165 0000032B C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   166 0000032E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   167 00000336 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   168 0000033E E909010000          <1>     jmp mcbBuild
   169                              <1> .worst:
   170                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   171 00000343 B800002000          <1>     mov eax, 200000h
   172 00000348 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   172 0000034D [08C00300]          <1>
   173 00000351 29D8                <1>     sub eax, ebx
   174 00000353 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   175 0000035B E9EC000000          <1>     jmp mcbBuild 
   176                              <1> .mcbi1:
   177 00000360 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   178 00000363 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   178 0000036C 00                  <1>
   179 0000036D 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   180 00000371 0F85C2000000        <1>     jne .mcbFail
   181 00000377 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   182                              <1>     ;PCI hole always exists so this value will always be a dword
   183 0000037B 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   184 00000383 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   185 00000386 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   186 00000389 4881FB00000001      <1>     cmp rbx, 1000000h  
   187 00000390 773C                <1>     ja .skipISA
   188                              <1> ;Here we deal with ISA hole issues
   189 00000392 B820E80000          <1>     mov eax, 0E820h
   190 00000397 CD35                <1>     int 35h
   191 00000399 48B800000001000000- <1>     mov rax, 1000000h
   191 000003A2 00                  <1>
   192 000003A3 E871000000          <1>     call .mcbFindAddress
   193 000003A8 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   194 000003AE 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   194 000003B7 00                  <1>
   195 000003B8 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   196 000003BC 0F858A000000        <1>     jne mcbBuild  
   197 000003C2 488B5808            <1>     mov rbx, qword [rax + 8]
   198 000003C6 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   199                              <1> .skipISA:
   200 000003CE B820E80000          <1>     mov eax, 0E820h
   201 000003D3 CD35                <1>     int 35h
   202 000003D5 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   202 000003DE 00                  <1>
   203 000003DF E835000000          <1>     call .mcbFindAddress
   204 000003E4 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   205 000003E6 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   205 000003EF 00                  <1>
   206 000003F0 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   207 000003F4 7556                <1>     jne mcbBuild   
   208 000003F6 488B5808            <1>     mov rbx, qword [rax + 8]
   209                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   210 000003FA 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   210 00000403 00                  <1>
   211 00000404 4839CB              <1>     cmp rbx, rcx
   212 00000407 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   213 0000040B 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   213 00000410 [1BC00300]          <1>
   214 00000414 E933000000          <1>     jmp mcbBuild
   215                              <1> .mcbFindAddress:
   216                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   217                              <1> ;Entry: rax = Address of arena to search for
   218                              <1> ;       rsi = Pointer to memory map
   219                              <1> ;       ecx = Number of 24 byte entries
   220                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   221                              <1> ;       CF=CY : value in rax not found
   222 00000419 56                  <1>     push rsi
   223 0000041A 51                  <1>     push rcx
   224 0000041B 50                  <1>     push rax
   225                              <1> .mfa0:
   226 0000041C 483B06              <1>     cmp rax, qword [rsi]
   227 0000041F 7410                <1>     je .mcbAddressFound
   228 00000421 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   229 00000428 FFC9                <1>     dec ecx
   230 0000042A 79F0                <1>     jns .mfa0
   231                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   232 0000042C 58                  <1>     pop rax
   233 0000042D 59                  <1>     pop rcx
   234 0000042E 5E                  <1>     pop rsi
   235 0000042F F9                  <1>     stc
   236 00000430 C3                  <1>     ret
   237                              <1> .mcbAddressFound:
   238 00000431 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   239 00000434 59                  <1>     pop rcx ;Pop old rax value off
   240 00000435 59                  <1>     pop rcx
   241 00000436 5E                  <1>     pop rsi
   242 00000437 F8                  <1>     clc
   243 00000438 C3                  <1>     ret
   244                              <1> .mcbFail:
   245 00000439 488D2D74090000      <1>     lea rbp, mcbFailmsg
   246 00000440 B804130000          <1>     mov eax, 1304h
   247 00000445 CD30                <1>     int 30h
   248 00000447 E941090000          <1>     jmp errorInit
   249                              <1> 
   250                              <1> mcbBuild:
   251                              <1> ;Actually build the MCB chain here
   252                              <1> ;Start by computing the difference between userbase and DOS area
   253                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   254 0000044C 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   254 00000451 [08C00300]          <1>
   255 00000455 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   256 0000045C 56                  <1>     push rsi    ;Save ptr
   257 0000045D 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   258 00000464 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   259 00000467 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   260 0000046F 5B                  <1>     pop rbx
   261 00000470 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   262 00000473 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   263 0000047B 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   264 00000483 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   265 00000486 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   266 00000489 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   266 0000048E [2BC00300]          <1>
   267                              <1> 
   268                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   269 00000492 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   269 0000049A 00000000            <1>
   270 0000049E 746E                <1>     jz .skipISA
   271                              <1>     ;Here if an ISA hole exists, place a MCB around it
   272 000004A0 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   273                              <1>     ;Remove one MCB worth of space from alloc
   274 000004A7 31C9                <1>     xor ecx, ecx
   275 000004A9 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   276 000004AC 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   277 000004B2 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   278 000004B5 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   279 000004B8 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   280 000004BB C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   281 000004BE 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   282 000004C6 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   282 000004CF 00                  <1>
   283 000004D0 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   284 000004D3 480510000000        <1>     add rax, mcb_size
   285 000004D9 4829C1              <1>     sub rcx, rax    ;Take their difference
   286 000004DC C1E904              <1>     shr ecx, 4
   287 000004DF 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   288 000004E2 C1E104              <1>     shl ecx, 4  ;Get bytes again
   289 000004E5 4881C310000000      <1>     add rbx, mcb_size
   290 000004EC 4801CB              <1>     add rbx, rcx
   291                              <1>     ;RBX should now be at 16Mb
   292 000004EF C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   293 000004F2 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   294 000004FA 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   295 00000502 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   296 00000505 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   297 0000050B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   298                              <1> .skipISA:
   299                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   300                              <1>     ;rbx points to a block with "Z" marker
   301 0000050E 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   301 00000516 00000000            <1>
   302 0000051A 7470                <1>     jz .exit
   303                              <1>     ;Add PCI hole MCB
   304 0000051C 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   305                              <1>     ;Remove one MCB worth of space from alloc
   306 00000523 31C9                <1>     xor ecx, ecx
   307 00000525 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   308 00000528 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   309 0000052E C1E104              <1>     shl ecx, 4  ;Get bytes
   310 00000531 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   311 00000534 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   312 00000537 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   313 0000053A 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   314 00000542 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   314 0000054B 00                  <1>
   315 0000054C 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   316 0000054F 480510000000        <1>     add rax, mcb_size
   317 00000555 4829C1              <1>     sub rcx, rax    ;Take their difference
   318 00000558 C1E904              <1>     shr ecx, 4
   319 0000055B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   320 0000055E C1E104              <1>     shl ecx, 4  ;Get bytes again
   321 00000561 4881C310000000      <1>     add rbx, mcb_size
   322 00000568 4801CB              <1>     add rbx, rcx
   323                              <1>     ;RBX should now be at 4Gb
   324 0000056B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   325 0000056E 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   326 00000576 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   326 0000057B [1BC00300]          <1>
   327 0000057F 48C1E904            <1>     shr rcx, 4
   328 00000583 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   329 00000589 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   330                              <1> .exit:
   331                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   332 0000058C 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   333                              <1> ;------------------------------------------------;
   334                              <1> ;          Kernel inits and adjustments          ;
   335                              <1> ;------------------------------------------------;
   336                              <1> ;Adjust Interrupt Entries Int 40h-49h
   337                              <1> adjInts:
   338 00000593 B340                <1>     mov bl, 40h
   339 00000595 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   340 0000059A CD35                <1>     int 35h
   341 0000059C B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   342 000005A1 488D3D7B080000      <1>     lea rdi, intData
   343 000005A8 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   344                              <1> .ai0:
   345 000005AA B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   346 000005AF 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   347 000005B2 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   348                              <1> .ai1:
   349 000005B5 CD35                <1>     int 35h
   350 000005B7 4881C708000000      <1>     add rdi, 8
   351 000005BE FFC1                <1>     inc ecx
   352 000005C0 81F950000000        <1>     cmp ecx, 50h
   353 000005C6 75E2                <1>     jne .ai0
   354                              <1> 
   355                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   356                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   357                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   358                              <1>     %if DEBUG
   359                              <1> debugPopUpMsg:
   360                              <1>     push rbx
   361                              <1>     push rbp
   362                              <1>     push rcx
   363                              <1>     push rdx
   364                              <1>     mov ecx, 53 ;A large number of lines
   365                              <1>     xor edx, edx    ;COM 1
   366                              <1> .cls:
   367                              <1>     mov eax, 010Ah ;Transmit Line feed
   368                              <1>     int 34h
   369                              <1>     dec ecx
   370                              <1>     jnz .cls
   371                              <1>     lea rbx, qword [debPrintNullString + rbp]
   372                              <1>     lea rbp, .msg
   373                              <1>     call rbx
   374                              <1>     jmp short .exit
   375                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   376                              <1> .exit:
   377                              <1>     pop rdx
   378                              <1>     pop rcx
   379                              <1>     pop rbp
   380                              <1>     pop rbx
   381                              <1>     %endif
   382                              <1> 
   383                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   384 000005C8 488D15BE070000      <1>     lea rdx, errorInit ;Get segment start address
   385 000005CF B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   386 000005D4 CD41                <1>     int 41h
   387 000005D6 488D15B0070000      <1>     lea rdx, errorInit ;Get segment start address
   388 000005DD B844250000          <1>     mov eax, 2544h
   389 000005E2 CD41                <1>     int 41h
   390                              <1> ;------------------------------------------------;
   391                              <1> ;          Driver Adjustments and inits          ;
   392                              <1> ;------------------------------------------------;
   393                              <1> ;Modify the pointers in nData before putting them in the data area
   394 000005E4 48012DB8080000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   395 000005EB 48012DBB080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   396 000005F2 48012DBC080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   397                              <1> ;Copy the Null driver to its location in Sysvars
   398 000005F9 B922000000          <1>     mov ecx, drvHdr_size
   399 000005FE 488D359E080000      <1>     lea rsi, qword [nData]
   400 00000605 488DBD[73C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   401 0000060C F3A4                <1>     rep movsb   
   402                              <1> 
   403                              <1> ;Adjust the addresses in the other driver headers 
   404 0000060E 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   404 00000610 [6040000000000000]  <1>
   405 00000618 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   406 0000061D 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   407                              <1> adjDrivers:
   408 00000621 E84B070000          <1>     call adjustDrvHdr
   409 00000626 E2F9                <1>     loop adjDrivers
   410                              <1> 
   411                              <1> ;Open NUL
   412                              <1> ;NUL opened
   413                              <1> ;Open CON
   414                              <1> conInit:    ;Rather than keeping this resident... do it here
   415                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   416 00000628 488D95[4B430000]    <1>     lea rdx, qword [rbp + fastOutput]
   417 0000062F B849250000          <1>     mov eax, 2549h
   418 00000634 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   419 00000636 488D95[53430000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   420 0000063D B83B250000          <1>     mov eax, 253Bh
   421 00000642 CD41                <1>     int 41h ;Hook int 3Bh
   422                              <1> .ci0:
   423 00000644 B401                <1>     mov ah, 01      ;Get buffer status
   424 00000646 CD36                <1>     int 36h
   425 00000648 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   426 0000064A 30E4                <1>     xor ah, ah
   427 0000064C CD36                <1>     int 36h ;Read key to flush from buffer
   428 0000064E EBF4                <1>     jmp short .ci0
   429                              <1> .ci1:
   430 00000650 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   431 00000655 CD30                <1>     int 30h
   432 00000657 B402                <1>     mov ah, 02h
   433 00000659 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   434 0000065B 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   435 0000065D CD30                <1>     int 30h
   436 0000065F B707                <1>     mov bh, 07h     ;Grey/Black attribs
   437 00000661 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   438 00000666 CD30                <1>     int 30h
   439                              <1> 
   440                              <1>     ;Save ptr to ConHdr in Sysvars
   441 00000668 488D85[60400000]    <1>     lea rax, qword [rbp + conHdr]
   442 0000066F 6448890425-         <1>     mov qword fs:[vConPtr], rax
   442 00000674 [4BC00300]          <1>
   443                              <1> 
   444                              <1>     ;Fix the ext ESC function handler address
   445 00000678 488D85[011F0000]    <1>     lea rax, qword [rbp + editKeys]
   446 0000067F 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   446 00000684 [59000000]          <1>
   447                              <1> 
   448                              <1> ;CLOCK init prock
   449                              <1> ;Set the time and date using the RTC (if present)
   450                              <1> clkInit:
   451                              <1>    ;Save ptr to ClkHdr in Sysvars first
   452 00000688 488D85[C6400000]    <1>     lea rax, qword [rbp + clkHdr]
   453 0000068F 6448890425-         <1>     mov qword fs:[clockPtr], rax
   453 00000694 [43C00300]          <1>
   454                              <1> ;CH - Hours, in BCD
   455                              <1> ;CL - Minutes, in BCD
   456                              <1> ;DH - Seconds, in BCD
   457 00000698 B402                <1>     mov ah, 02  ;Read RTC Time
   458 0000069A CD3A                <1>     int 3Ah
   459 0000069C 7271                <1>     jc .clkEnd  ;if error, just exit
   460                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   461 0000069E 0FB6C5              <1>     movzx eax, ch   ;Hours
   462 000006A1 E84D000000          <1>     call .bcd2Bin
   463 000006A6 88C5                <1>     mov ch, al
   464 000006A8 0FB6C1              <1>     movzx eax, cl     ;Mins
   465 000006AB E843000000          <1>     call .bcd2Bin
   466 000006B0 88C1                <1>     mov cl, al
   467 000006B2 0FB6C6              <1>     movzx eax, dh   ;Seconds
   468 000006B5 E839000000          <1>     call .bcd2Bin
   469 000006BA 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   470 000006BC 89C2                <1>     mov edx, eax
   471 000006BE B42D                <1>     mov ah, 2Dh ;DOS Set Time
   472 000006C0 CD41                <1>     int 41h
   473                              <1> ;Now get the date from RTC
   474                              <1> ;CL - Year, in BCD
   475                              <1> ;DH - Month, in BCD
   476                              <1> ;DL - Day, in BCD
   477 000006C2 B404                <1>     mov ah, 04  ;Read RTC Date
   478 000006C4 CD3A                <1>     int 3Ah
   479 000006C6 7247                <1>     jc .clkEnd
   480                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   481 000006C8 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   482 000006CB E823000000          <1>     call .bcd2Bin
   483 000006D0 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   484 000006D3 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   485 000006D9 0FB6C6              <1>     movzx eax, dh   ;Get Months
   486 000006DC E812000000          <1>     call .bcd2Bin
   487 000006E1 88C6                <1>     mov dh, al  
   488 000006E3 0FB6C2              <1>     movzx eax, dl   ;Get day
   489 000006E6 E808000000          <1>     call .bcd2Bin
   490 000006EB 88C2                <1>     mov dl, al
   491 000006ED B42B                <1>     mov ah, 2Bh ;DOS Set Date
   492 000006EF CD41                <1>     int 41h
   493 000006F1 EB1C                <1>     jmp short .clkEnd
   494                              <1> .bcd2Bin:
   495                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   496 000006F3 51                  <1>     push rcx
   497 000006F4 89C1                <1>     mov ecx, eax
   498 000006F6 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   499 000006FB 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   500 00000701 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   501 00000704 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   502                              <1> .b2blp:
   503 00000707 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   504 00000709 FFC9                <1>     dec ecx
   505 0000070B 75FA                <1>     jnz .b2blp
   506                              <1> .b2bexit:
   507 0000070D 59                  <1>     pop rcx
   508 0000070E C3                  <1>     ret
   509                              <1> .clkEnd:
   510                              <1> ;------------------------------------------------;
   511                              <1> ;         Link DOS to temporary Buffer           ;
   512                              <1> ;------------------------------------------------;
   513                              <1> tempBufferInit:
   514 0000070F 488DBD[19010000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   515 00000716 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   515 0000071B [55C00300]          <1>
   516 0000071F 31C0                <1>     xor eax, eax
   517 00000721 48FFC8              <1>     dec rax
   518 00000724 48AB                <1>     stosq   ;.nextBufPtr, end of list
   519 00000726 AA                  <1>     stosb   ;.driveNumber, Free entry
   520 00000727 48FFC0              <1>     inc rax
   521 0000072A AA                  <1>     stosb   ;.bufferFlags, No flags
   522                              <1> ;------------------------------------------------;
   523                              <1> ;         Init msd driver, create DPB            ;
   524                              <1> ;------------------------------------------------;
   525                              <1> storageInits:
   526                              <1> ;First save dpb pointer in sysvars
   527 0000072B 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   528 00000732 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   528 00000737 [33C00300]          <1>
   529                              <1> ;Open Mass Storage
   530                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   531                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   532                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   533                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   534                              <1>     ;mov al, byte fs:[numPhysVol]
   535                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   536                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   537                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   538                              <1>     ;Check if it returned OK first!
   539                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   540                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   541                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   542                              <1>     ;mov byte fs:[numPhysVol], al
   543                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   544                              <1> 
   545                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   546 0000073B E885070000          <1>     call diskInit
   547 00000740 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   548 00000743 648A0425[6FC00300]  <1>     mov al, byte fs:[numPhysVol]
   549 0000074B 488D95[E6490000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   550 00000752 30C9                <1>     xor cl, cl  ;Clear counter
   551 00000754 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   551 00000759 [33C00300]          <1>
   552                              <1> .si0:   
   553 0000075D 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   554 00000760 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   555 00000762 CD41                <1>     int 41h
   556                              <1> ;Add other data to DPB
   557 00000764 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   558 00000767 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   559 0000076A 50                  <1>     push rax
   560 0000076B 488D87[E8400000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   561 00000772 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   562 00000776 58                  <1>     pop rax
   563 00000777 FEC1                <1>     inc cl
   564 00000779 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   565 0000077B 7416                <1>     je .si1
   566 0000077D 50                  <1>     push rax
   567 0000077E 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   568 00000782 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   569 00000786 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   570 00000789 58                  <1>     pop rax
   571 0000078A 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   572 00000791 EBCA                <1>     jmp short .si0
   573                              <1> .si1:
   574                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   575 00000793 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   576 0000079B 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   577                              <1> ;------------------------------------------------;
   578                              <1> ;          Find largest sector size              ;
   579                              <1> ;------------------------------------------------;
   580                              <1> sectorSizeSearch:
   581                              <1> ;Done by reading BPB's for each drive
   582 0000079E 488D9D[E6490000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   583                              <1>     
   584                              <1>     ;Go thru each block individually
   585 000007A5 31C0                <1>     xor eax, eax
   586 000007A7 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   587                              <1> .findLargest:
   588 000007AA 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   589 000007AE 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   590 000007B3 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   591 000007BA 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   592 000007BD 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   593 000007C0 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   594 000007C2 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   594 000007C7 [53C00300]          <1>
   595                              <1>     
   596                              <1> ;------------------------------------------------;
   597                              <1> ;                 Temp CDS inits                 ;
   598                              <1> ;------------------------------------------------;
   599                              <1> tempCDS:
   600                              <1> ;Build a temporary CDS for Drive A to use it for booting
   601 000007CB 488DBD[FBC50300]    <1>     lea rdi, qword [rbp + tmpCDS]  ;Use Temp CDS in the SDA
   602 000007D2 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   602 000007D7 [5DC00300]          <1>
   603                              <1>     ;"A:\"+NULL char (in rev order because LITTLE ENDIAN!!)
   604 000007DB C707413A5C00        <1>     mov dword [rdi + cds.sCurrentPath], 005C3A41h  
   605 000007E1 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsValidDrive   ;Set the drive to be valid!
   606 000007E7 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   606 000007EC [33C00300]          <1>
   607 000007F0 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   608 000007F4 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   609                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   610                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   611                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   612                              <1>     ;cds.dStartCluster is 0 since we zero-ed the data area earlier
   613                              <1> ;------------------------------------------------;
   614                              <1> ;     Set up general PSP areas and DOS vars      ;
   615                              <1> ;------------------------------------------------;
   616                              <1> ;Additional DOS Vars init
   617                              <1>     ;xor eax, eax
   618                              <1>     ;mov byte fs:[currentDrv], al ;Current Drive = Drive A
   619                              <1>     ;mov byte fs:[breakFlag], al  ;Break off
   620                              <1>     ;mov byte fs:[verifyFlag], al ;Write only
   621                              <1>     ;mov byte fs:[singleDrv], al  ;Only used on single drive systems
   622                              <1>     ;mov byte fs:[critErrFlag], al   ;Not in critical error
   623                              <1>     ;mov byte fs:[inDOS], al      ;Not in DOS
   624 000007FA 64C60425[6BC30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   624 00000802 FF                  <1>
   625                              <1>     ;mov word fs:[errorLevel], ax   ;Last return code is 0, no error
   626                              <1>     ;mov byte fs:[allocStrat], al    ;First Fit
   627 00000803 64C60425[33C30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   627 0000080B 2F                  <1>
   628                              <1>     ;mov byte fs:[vConUnread], al   ;vCon has no unread data!
   629                              <1> 
   630                              <1> ;Set network machine name to... nothing!
   631 0000080C 488DBD[38C30300]    <1>     lea rdi, qword [rbp + machineName]
   632 00000813 B910000000          <1>     mov ecx, 10h    ;16 chars long
   633 00000818 B020                <1>     mov al, SPC ;Space char
   634 0000081A F3AA                <1>     rep stosb   ;Fill with space chars
   635                              <1>     ;xor al, al
   636                              <1>     ;mov byte fs:[serverCnt], al ;Set server call count to zero
   637                              <1>     ;mov word fs:[machineNum], ax   ;Clear machine number
   638                              <1> 
   639                              <1> ;Patch Data Table init
   640 0000081C 488DBD[48C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   641 00000823 488D85[74390000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   642 0000082A 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   643 0000082C 488D85[7E390000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   644 00000833 48AB                <1>     stosq
   645 00000835 488D85[88390000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   646 0000083C 48AB                <1>     stosq
   647 0000083E 488D85[92390000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   648 00000845 48AB                <1>     stosq
   649                              <1> 
   650                              <1> ;Initial PSP Init
   651 00000847 488D1DB2F8FFFF      <1>     lea rbx, qword [tempPSP]
   652 0000084E 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   652 00000853 [81C30300]          <1>
   653 00000857 53                  <1>     push rbx
   654 00000858 4881C380000000      <1>     add rbx, psp.dta
   655 0000085F 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   655 00000864 [79C30300]          <1>
   656 00000868 5B                  <1>     pop rbx
   657 00000869 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   658 0000086E C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   659 00000875 48C7430200000000    <1>     mov qword [rbx + psp.allocSize], 0    ;Size of allocation (dummy value)
   660 0000087D 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   661 00000881 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   662 00000885 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   663 00000889 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   663 00000892 FF                  <1>
   664 00000893 48AB                <1>     stosq   ;8 bytes
   665 00000895 31C0                <1>     xor eax, eax
   666 00000897 50                  <1>     push rax    ;Save 0 on the stack
   667 00000898 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   668 0000089B 48AB                <1>     stosq   ;16 bytes
   669 0000089D AB                  <1>     stosd   ;20 bytes
   670 0000089E 58                  <1>     pop rax ;Get 0 back
   671 0000089F 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   672 000008A7 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   673 000008AB C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   674 000008AF 4889DA              <1>     mov rdx, rbx
   675 000008B2 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   676 000008B7 CD41                <1>     int 41h
   677 000008B9 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   678 000008BD B843350000          <1>     mov eax, 3543h
   679 000008C2 CD41                <1>     int 41h
   680 000008C4 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   681 000008C8 B844350000          <1>     mov eax, 3544h
   682 000008CD CD41                <1>     int 41h
   683 000008CF 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   684                              <1> 
   685 000008D3 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   686 000008D8 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   687 000008DC F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   688                              <1> ;------------------------------------------------;
   689                              <1> ;          Default File Handle Creation          ;
   690                              <1> ;                                                ;
   691                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   692                              <1> ;------------------------------------------------;
   693                              <1> defaultFileHandles:
   694                              <1> ;Fill in the default file table entries
   695 000008DE 488D9D[99C00300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   696 000008E5 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   697 000008EC 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   698 000008F2 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   698 000008F7 [3BC00300]          <1>
   699 000008FB 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   699 00000904 20                  <1>
   700                              <1> ;GOTO FIRST FILE 
   701 00000905 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   702                              <1> ;Write AUX
   703 0000090C 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   704 00000911 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   705 00000917 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   706 0000091B C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   707                              <1>     ;No EOF when reading from the device
   708 0000091F 488B85[82400000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   709 00000926 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   710                              <1>     ;Ignore disk related fields and Date/Time of open
   711 0000092A 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   712                              <1>     ;11 chars in 8.3 name
   713 0000092E 488D35CE040000      <1>     lea rsi, auxName
   714 00000935 B903000000          <1>     mov ecx, 3
   715 0000093A F3A4                <1>     rep movsb   ;Move the three bytes
   716 0000093C 4889D0              <1>     mov rax, rdx
   717 0000093F 48AB                <1>     stosq   ;Eight spaces left to print
   718 00000941 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   718 00000946 [81C30300]          <1>
   719 0000094A 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   720                              <1> ;GOTO NEXT ENTRY
   721 0000094E 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   722                              <1>     ;Write CON
   723 00000955 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   724 0000095A 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   725 00000960 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   726 00000964 C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   727                              <1>     ;No EOF when reading from the device
   728 00000968 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   728 0000096D [4BC00300]          <1>
   729 00000971 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   730                              <1>     ;Ignore disk related fields and Date/Time of open
   731 00000975 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   732                              <1>     ;11 chars in 8.3 name
   733 00000979 488D357F040000      <1>     lea rsi, conName
   734 00000980 B903000000          <1>     mov ecx, 3
   735 00000985 F3A4                <1>     rep movsb   ;Move the three bytes
   736 00000987 4889D0              <1>     mov rax, rdx
   737 0000098A 48AB                <1>     stosq   ;Eight spaces left to print
   738 0000098C 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   738 00000991 [81C30300]          <1>
   739 00000995 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   740                              <1> ;GOTO NEXT ENTRY
   741 00000999 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   742                              <1> ;Write PRN
   743 000009A0 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   744 000009A5 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   745 000009AB C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   746 000009AF C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   747                              <1>     ;Want EOF when reading from to the device
   748 000009B3 488B85[A4400000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   749 000009BA 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   750                              <1>     ;Ignore disk related fields and Date/Time of open
   751 000009BE 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   752                              <1>     ;11 chars in 8.3 name
   753 000009C2 488D353E040000      <1>     lea rsi, prnName
   754 000009C9 B903000000          <1>     mov ecx, 3
   755 000009CE F3A4                <1>     rep movsb   ;Move the three bytes
   756 000009D0 4889D0              <1>     mov rax, rdx
   757 000009D3 48AB                <1>     stosq   ;Eight spaces left to print
   758 000009D5 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   758 000009DA [81C30300]          <1>
   759 000009DE 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   760                              <1> ;Zero word 0 of entry 4 and 5
   761 000009E2 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   762 000009E9 31C0                <1>     xor eax, eax
   763                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   764                              <1>     ; which is ok as these are empty entries, ready to be used)
   765 000009EB 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   766 000009ED 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   767 000009F4 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   768                              <1> ;------------------------------------------------;
   769                              <1> ;               Load CONFIG.SYS                  ;
   770                              <1> ;------------------------------------------------;
   771                              <1> ;------------------------------------------------;
   772                              <1> ;              Process CONFIG.SYS                ;
   773                              <1> ;------------------------------------------------;
   774                              <1> ;------------------------------------------------;
   775                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   776                              <1> ;------------------------------------------------;
   777                              <1> ;------------------------------------------------;
   778                              <1> ;   Setup Final Data Areas With Overrides from   ;
   779                              <1> ;                  CONFIG.SYS                    ;
   780                              <1> ;------------------------------------------------;
   781                              <1> ;------------------------------------------------;
   782                              <1> ;           Load Command interpreter             ;
   783                              <1> ;------------------------------------------------;
   784 000009F6 488D15A1030000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   785 000009FD B409                <1>     mov ah, 09h
   786 000009FF CD41                <1>     int 41h
   787                              <1> ;Resize DOS allocation before loading COMMAND.COM
   788 00000A01 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   788 00000A06 [2BC00300]          <1>
   789 00000A0A 4981C010000000      <1>     add r8, mcb.program
   790 00000A11 BB49110000          <1>     mov ebx, dynamicDataAreaLength
   791 00000A16 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   792 00000A19 FFC3                <1>     inc ebx
   793 00000A1B B44A                <1>     mov ah, 4Ah
   794 00000A1D CD41                <1>     int 41h
   795                              <1>     
   796                              <1>     %if DEBUG && ALLOCTEST
   797                              <1> ;Test Allocation, Growth and Deallocation
   798                              <1>     mov r15, qword fs:[currentPSP]
   799                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   800                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   801                              <1>     mov ah, 48h ;Allocate
   802                              <1>     int 41h
   803                              <1> 
   804                              <1>     mov byte [rax - 10h], 0 ;Trash chain
   805                              <1>     mov r8, rax ;Move the pointer to r8
   806                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   807                              <1>     mov ah, 4Ah
   808                              <1>     int 41h
   809                              <1> 
   810                              <1>     mov ah, 49h ;Free r8
   811                              <1>     int 41h
   812                              <1>     mov qword fs:[currentPSP], r15
   813                              <1>     %endif
   814                              <1> 
   815                              <1>     %if ENDSTATUS
   816                              <1> debugFinal:
   817                              <1>     ;Print system state
   818 00000A1F 55                  <1>     push rbp    ;Only rbp really matters here
   819 00000A20 4989E8              <1>     mov r8, rbp
   820                              <1> 
   821 00000A23 488D2DD0020000      <1>     lea rbp, .msg2
   822 00000A2A 4D8D88[79040000]    <1>     lea r9, qword [r8 + debPrintNullString]
   823 00000A31 41FFD1              <1>     call r9
   824                              <1> 
   825 00000A34 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   826 00000A3B 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   826 00000A40 [08C00300]          <1>
   827                              <1> 
   828 00000A44 4D8D88[B4070000]    <1>     lea r9, qword [r8 + overlayQword]
   829 00000A4B 41FFD1              <1>     call r9
   830                              <1> 
   831 00000A4E 4881C31B000000      <1>     add rbx, 19+8
   832 00000A55 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   832 00000A5A [00C00300]          <1>
   833 00000A5E 41FFD1              <1>     call r9
   834                              <1> 
   835 00000A61 4881C31B000000      <1>     add rbx, 19+8
   836 00000A68 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   836 00000A6D [2BC00300]          <1>
   837 00000A71 41FFD1              <1>     call r9
   838                              <1> 
   839 00000A74 4881C31C000000      <1>     add rbx, 20+8
   840 00000A7B 4D8D88[71070000]    <1>     lea r9, qword [r8 + overlayDword]
   841 00000A82 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   842 00000A8A 41FFD1              <1>     call r9
   843                              <1> 
   844 00000A8D 4881C312000000      <1>     add rbx, 10+8
   845 00000A94 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   846 00000A9C 41FFD1              <1>     call r9
   847                              <1> 
   848 00000A9F 4881C312000000      <1>     add rbx, 10+8
   849 00000AA6 64488B0425-         <1>     mov rax, qword fs:[longMem]
   849 00000AAB [1BC00300]          <1>
   850 00000AAF 4D8D88[B4070000]    <1>     lea r9, qword [r8 + overlayQword]
   851 00000AB6 41FFD1              <1>     call r9
   852                              <1> 
   853 00000AB9 4881C31B000000      <1>     add rbx, 19+8
   854 00000AC0 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   854 00000AC5 [33C00300]          <1>
   855 00000AC9 41FFD1              <1>     call r9
   856                              <1> 
   857 00000ACC 4881C31B000000      <1>     add rbx, 19+8
   858 00000AD3 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   858 00000AD8 [3BC00300]          <1>
   859 00000ADC 41FFD1              <1>     call r9
   860                              <1> 
   861 00000ADF 4881C31B000000      <1>     add rbx, 19+8
   862 00000AE6 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   862 00000AEB [55C00300]          <1>
   863 00000AEF 41FFD1              <1>     call r9
   864                              <1> 
   865 00000AF2 4881C31B000000      <1>     add rbx, 19+8
   866 00000AF9 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   866 00000AFE [5DC00300]          <1>
   867 00000B02 41FFD1              <1>     call r9
   868                              <1> 
   869 00000B05 4D8D88[FF060000]    <1>     lea r9, qword [r8 + overlayByte]
   870                              <1> 
   871 00000B0C 4881C32C000000      <1>     add rbx, 25+19
   872 00000B13 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
   872 00000B19 [6FC00300]          <1>
   873 00000B1D 41FFD1              <1>     call r9
   874                              <1> 
   875 00000B20 4881C31E000000      <1>     add rbx, 30
   876 00000B27 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   876 00000B2D [12C00300]          <1>
   877 00000B31 41FFD1              <1>     call r9
   878                              <1> 
   879 00000B34 4881C31E000000      <1>     add rbx, 30
   880 00000B3B 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   880 00000B41 [11C00300]          <1>
   881 00000B45 41FFD1              <1>     call r9
   882                              <1> 
   883 00000B48 4881C310000000      <1>     add rbx, 16
   884 00000B4F 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   884 00000B55 [10C00300]          <1>
   885 00000B59 0441                <1>     add al, "A"
   886 00000B5B 8803                <1>     mov byte [rbx], al
   887                              <1> 
   888 00000B5D 488D2D10000000      <1>     lea rbp, .msg
   889 00000B64 4D8D88[79040000]    <1>     lea r9, qword [r8 + debPrintNullString]
   890 00000B6B 41FFD1              <1>     call r9
   891 00000B6E 5D                  <1>     pop rbp
   892 00000B6F E99E010000          <1>     jmp l1
   893 00000B74 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   893 00000B7D 206261736520464646- <1>
   893 00000B86 464646464646464646- <1>
   893 00000B8F 46464646680A0D      <1>
   894 00000B96 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   894 00000B9F 464646464646464646- <1>
   894 00000BA8 464646464646680A0D  <1>
   895 00000BB1 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   895 00000BBA 464646464646464646- <1>
   895 00000BC3 46464646464668200A- <1>
   895 00000BCC 0D                  <1>
   896 00000BCD 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   896 00000BD6 464646464646466820  <1>
   897 00000BDF 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   897 00000BE8 464646464646466820  <1>
   898 00000BF1 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   898 00000BFA 464646464646464646- <1>
   898 00000C03 464646464646680A0D  <1>
   899 00000C0C 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   899 00000C15 464646464646464646- <1>
   899 00000C1E 464646464646680A0D  <1>
   900 00000C27 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   900 00000C30 464646464646464646- <1>
   900 00000C39 464646464646680A0D  <1>
   901 00000C42 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   901 00000C4B 464646464646464646- <1>
   901 00000C54 464646464646680A0D  <1>
   902 00000C5D 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   902 00000C66 464646464646464646- <1>
   902 00000C6F 464646464646680A0D  <1>
   903 00000C78 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   903 00000C81 204C6F676963616C20- <1>
   903 00000C8A 447269766573204646- <1>
   903 00000C93 680A0D              <1>
   904 00000C96 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   904 00000C9F 204669786564204472- <1>
   904 00000CA8 697665732020204646- <1>
   904 00000CB1 680A0D              <1>
   905 00000CB4 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   905 00000CBD 2052656D6F7661626C- <1>
   905 00000CC6 652044727673204646- <1>
   905 00000CCF 680A0D              <1>
   906 00000CD2 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   906 00000CDB 65205A3A0A0D        <1>
   907 00000CE1 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   907 00000CEA 4F4D4D414E442E434F- <1>
   907 00000CF3 4D2E2E2E0A0D00      <1>
   908 00000CFA 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   908 00000D03 626F6F742073756D6D- <1>
   908 00000D0C 6172790A0D00        <1>
   909                              <1>     %endif
   910                              <1> l1:
   911 00000D12 B436                <1>     mov ah, 36h
   912 00000D14 B200                <1>     mov dl, 0
   913 00000D16 CD41                <1>     int 41h
   914 00000D18 488D1540030000      <1>     lea rdx, tmpDTA
   915 00000D1F B41A                <1>     mov ah, 1Ah
   916 00000D21 CD41                <1>     int 41h ;Set tempDTA to current DTA
   917 00000D23 B44E                <1>     mov ah, 4Eh
   918 00000D25 488D1528030000      <1>     lea rdx, tmpName2
   919 00000D2C 0FB60D16030000      <1>     movzx ecx, byte [tmpAttr] ;Get the search attribute
   920 00000D33 CD41                <1>     int 41h
   921 00000D35 B460                <1>     mov ah, 60h
   922 00000D37 488D350C030000      <1>     lea rsi, tmpName
   923 00000D3E 488D3D1A030000      <1>     lea rdi, tmpDTA
   924 00000D45 CD41                <1>     int 41h
   925                              <1> l11:
   926 00000D47 B402                <1>     mov ah, 02h
   927 00000D49 B20A                <1>     mov dl, 0Ah
   928 00000D4B CD41                <1>     int 41h
   929 00000D4D B409                <1>     mov ah, 09h
   930 00000D4F 488D1516000000      <1>     lea rdx, .str
   931 00000D56 CD41                <1>     int 41h
   932                              <1>     ;lea rdx, tmpBuffer
   933                              <1>     ;mov ah, 0Ah  ;Buffered input
   934 00000D58 B980000000          <1>     mov ecx, 80h
   935 00000D5D 488D157B030000      <1>     lea rdx, tmpBuffer
   936 00000D64 31DB                <1>     xor ebx, ebx
   937 00000D66 B43F                <1>     mov ah, 3fh
   938 00000D68 CD41                <1>     int 41h
   939 00000D6A EBDB                <1>     jmp short l11
   940 00000D6C 433A5C3E24          <1> .str: db "C:\>$"
   941                              <1> ;--------------------------------
   942                              <1> ;       PROCS FOR SYSINIT       :
   943                              <1> ;--------------------------------
   944                              <1> adjustDrvHdr:
   945                              <1> ;Input: rsi = Effective address of driver in DOS segment
   946                              <1> ;       rbp = Ptr to the start of the DOS segment
   947                              <1> ;Output: rsi = EA of next header in DOS segment
   948 00000D71 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   949 00000D75 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   950 00000D79 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
   951 00000D80 740A                <1>     je .exit
   952 00000D82 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   953 00000D85 4881C622000000      <1>     add rsi, drvHdr_size
   954                              <1> .exit:
   955 00000D8C C3                  <1>     ret
   956                              <1> errorInit:
   957                              <1> ;If a critical error occurs during sysinit, fail through here
   958                              <1> ;Int 42h, 43h and 44h point here during sysinit
   959 00000D8D 488D2D3A000000      <1>     lea rbp, hltmsg
   960 00000D94 B804130000          <1>     mov eax, 1304h
   961 00000D99 CD30                <1>     int 30h
   962                              <1>     ;cli ;Clear interrupts
   963                              <1>     ;mov al, -1
   964                              <1>     ;mov dx, 0A1h    ;PIC2 data
   965                              <1>     ;out dx, al      ;Mask all lines
   966                              <1>     ;mov dx, 21h     ;PIC1 data
   967                              <1>     ;out dx, al      ;Mask all lines
   968                              <1> .ei0:
   969 00000D9B F4                  <1>     hlt
   970 00000D9C EBFD                <1>     jmp short .ei0
   971                              <1> ;--------------------------------
   972                              <1> ;       DATA FOR SYSINIT        :
   973                              <1> ;--------------------------------
   974 00000D9E 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   974 00000DA7 5343502F444F532E2E- <1>
   974 00000DB0 2E0A0D24            <1>
   975 00000DB4 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   975 00000DBD 6C6F636174696F6E20- <1>
   975 00000DC6 4572726F720A0D00    <1>
   976 00000DCE 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   976 00000DD7 7469616C6973696E67- <1>
   976 00000DE0 20534350444F532E53- <1>
   976 00000DE9 59532E205379737465- <1>
   976 00000DF2 6D2068616C74696E67- <1>
   976 00000DFB 2E2E2E00            <1>
   977 00000DFF 434F4E00            <1> conName db "CON",0
   978 00000E03 41555800            <1> auxName db "AUX",0
   979 00000E07 50524E00            <1> prnName db "PRN",0
   980                              <1> 
   981 00000E0B 4155544F455845432E- <1> aexec   db "AUTOEXEC.BAT",0 ;ASCIIZ for AUTOEXEC
   981 00000E14 42415400            <1>
   982 00000E18 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
   982 00000E21 5300                <1>
   983                              <1> 
   984                              <1> intData:
   985 00000E23 [6B2E000000000000]  <1>     dq terminateProcess ;Int 40h
   986 00000E2B [EC37000000000000]  <1>     dq functionDispatch ;Int 41h
   987 00000E33 [8D0D000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   988 00000E3B [4439000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
   989 00000E43 [0C32000000000000]  <1>     dq dosDefCritErrHdlr 
   990 00000E4B [DC32000000000000]  <1>     dq absDiskRead      ;Int 45h
   991 00000E53 [BD32000000000000]  <1>     dq absDiskWrite     ;Int 46h
   992 00000E5B [722E000000000000]  <1>     dq terminateRes     ;Int 47h
   993 00000E63 [4439000000000000]  <1>     dq defaultIretq     ;Int 48h
   994 00000E6B [4439000000000000]  <1>     dq defaultIretq     ;Int 49h
   995 00000E73 [4439000000000000]  <1>     dq defaultIretq     ;Int 4Ah
   996 00000E7B [4439000000000000]  <1>     dq defaultIretq     ;Int 4Bh
   997 00000E83 [4439000000000000]  <1>     dq defaultIretq     ;Int 4Ch
   998 00000E8B [4439000000000000]  <1>     dq defaultIretq     ;Int 4Dh
   999 00000E93 [4439000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1000 00000E9B [A23D000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1001                              <1> nData:
  1002 00000EA3 [6040000000000000]  <1>     dq conHdr
  1003 00000EAB 0480                <1>     dw 08004h
  1004 00000EAD [0842000000000000]  <1>     dq nulStrat
  1005 00000EB5 [0E42000000000000]  <1>     dq nulIntr
  1006 00000EBD 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1007                              <1> 
  1008                              <1> diskInit:
  1009                              <1>     ;We create a function to deal with BPB parsing etc
  1010                              <1>     ;Start with the first primary partition on each hard disk (until max)
  1011                              <1>     ;   They dont have to be bootable
  1012                              <1>     ;Then go back and look for other partitions partitions. 
  1013                              <1>     ;   Add each other primary or logical ptn (until max)
  1014                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
  1015                              <1>     ;Use r8 as device counter
  1016 00000EC5 488DBD[0E4A0000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
  1017 00000ECC 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
  1017 00000ED4 00                  <1>
  1018 00000ED5 0F84C6000000        <1>     jz .remInit ;No? Go to removables
  1019 00000EDB 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
  1019 00000EE4 00                  <1>
  1020 00000EE5 B280                <1>     mov dl, 80h ;Start with HDD 0
  1021                              <1> .primary:
  1022 00000EE7 64803C25[6FC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1022 00000EEF 03                  <1>
  1023 00000EF0 0F84AB000000        <1>     je .remInit
  1024 00000EF6 31C9                <1>     xor ecx, ecx    ;Sector 0
  1025 00000EF8 E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
  1026 00000EFD 0F8289000000        <1>     jc .primaryEpilog
  1027                              <1>     ;Here, check MBR or BPB
  1028 00000F03 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
  1029 00000F0C 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
  1030                              <1>     ;Now check if BPB or MBR
  1031 00000F0E 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1032 00000F10 8A6302              <1>     mov ah, byte [rbx + 2]
  1033 00000F13 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1034 00000F17 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
  1035                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
  1036                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
  1037 00000F19 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
  1038 00000F20 B104                <1>     mov cl, 4
  1039                              <1> .checkPrimary:
  1040 00000F22 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
  1041 00000F25 3C01                <1>     cmp al, 01
  1042 00000F27 7421                <1>     je .primaryFound
  1043 00000F29 3C04                <1>     cmp al, 04
  1044 00000F2B 741D                <1>     je .primaryFound
  1045 00000F2D 3C06                <1>     cmp al, 06
  1046 00000F2F 7419                <1>     je .primaryFound
  1047 00000F31 3C0B                <1>     cmp al, 0Bh
  1048 00000F33 7415                <1>     je .primaryFound
  1049 00000F35 3C0C                <1>     cmp al, 0Ch
  1050 00000F37 7411                <1>     je .primaryFound
  1051 00000F39 3C0E                <1>     cmp al, 0Eh
  1052 00000F3B 740D                <1>     je .primaryFound
  1053 00000F3D 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1054 00000F44 FEC9                <1>     dec cl
  1055 00000F46 7444                <1>     jz .primaryEpilog
  1056 00000F48 EBD8                <1>     jmp short .checkPrimary
  1057                              <1> .primaryFound:
  1058                              <1>     ;Copy the first sector of this partition into memory
  1059 00000F4A 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1060 00000F4D E8E9000000          <1>     call .initReadSector
  1061 00000F52 7238                <1>     jc .primaryEpilog
  1062                              <1>     ;Now verify this is a BPB
  1063 00000F54 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1064 00000F56 8A6302              <1>     mov ah, byte [rbx + 2]
  1065 00000F59 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1066 00000F5D 752D                <1>     jne .primaryEpilog   ;If not, skip
  1067                              <1>     ;Now copy data to internal tables
  1068 00000F5F 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1069 00000F62 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1070 00000F67 57                  <1>     push rdi
  1071 00000F68 F348A5              <1>     rep movsq   ;Copy the BPB
  1072 00000F6B 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1073                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1074 00000F6C 4A8D9C05[DC490000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1075                              <1>     ;Add device count to rbx to point to correct entry
  1076 00000F74 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1077 00000F76 4A8D9CC5[E6490000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1078 00000F7E 488933              <1>     mov qword [rbx], rsi
  1079 00000F81 49FFC0              <1>     inc r8  ;Goto next logical drive
  1080 00000F84 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1081                              <1> .primaryEpilog:
  1082 00000F8C FEC2                <1>     inc dl  ;Goto next BIOS drive
  1083 00000F8E 88D6                <1>     mov dh, dl
  1084 00000F90 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1085 00000F93 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1086 00000F9B 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1087                              <1> .extended:
  1088                              <1> ;We have gone through all the devices once
  1089                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1090                              <1>     ;je .remInit ;If yes, get removable devices
  1091                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1092                              <1>     ;xor ecx, ecx    ;Get MBR back
  1093                              <1>     ;call .initReadSector
  1094                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1095                              <1> .remInit:
  1096                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1097 00000FA1 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1098 00000FA4 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1099 00000FA6 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1100                              <1>     ;rdi points to the space for the subsequent bpb's
  1101                              <1> .removables:
  1102 00000FA9 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1103 00000FAB E88B000000          <1>     call .initReadSector
  1104 00000FB0 7238                <1>     jc .removableEpilogue   ;Goto next device
  1105                              <1>     ;Now verify this is a BPB
  1106 00000FB2 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1107 00000FB4 8A6302              <1>     mov ah, byte [rbx + 2]
  1108 00000FB7 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1109 00000FBB 752D                <1>     jne .removableEpilogue   ;If not, skip
  1110                              <1>     ;Now copy data to internal tables
  1111 00000FBD 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1112 00000FC0 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1113 00000FC5 57                  <1>     push rdi
  1114 00000FC6 F348A5              <1>     rep movsq   ;Copy the BPB
  1115 00000FC9 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1116                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1117 00000FCA 4A8D9C05[DC490000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1118                              <1>     ;Add device count to rbx to point to correct entry
  1119 00000FD2 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1120 00000FD4 4A8D9CC5[E6490000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1121 00000FDC 488933              <1>     mov qword [rbx], rsi
  1122 00000FDF 49FFC0              <1>     inc r8  ;Goto next logical drive
  1123 00000FE2 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1124                              <1> .removableEpilogue:
  1125 00000FEA FEC2                <1>     inc dl  ;Goto next BIOS device now
  1126 00000FEC 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1127 00000FF4 7412                <1>     je .end
  1128 00000FF6 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1129 00000FFD 7403                <1>     je .re0
  1130 00000FFF 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1131                              <1> .re0:
  1132 00001002 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1133 00001006 72A1                <1>     jb .removables
  1134                              <1> .end:
  1135 00001008 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1135 00001010 01                  <1>
  1136 00001011 7401                <1>     je .singleRemDev
  1137 00001013 C3                  <1>     ret
  1138                              <1> .singleRemDev:
  1139                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1140 00001014 488D9D[DC490000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1141 0000101B 8A95[DC490000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1142 00001021 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1143 00001024 488D9D[E6490000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1144 0000102B 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1145 0000102E 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1146 00001032 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1147 0000103A C3                  <1>     ret
  1148                              <1> .initReadSector:
  1149                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1150 0000103B B482                <1>     mov ah, 82h ;Read
  1151 0000103D B001                <1>     mov al, 1   ;One sector
  1152 0000103F 488D9D[49010000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1153 00001046 CD33                <1>     int 33h
  1154 00001048 C3                  <1>     ret
  1155 00001049 16                  <1> tmpAttr     db dirInclusive ;Search for all files
  1156 0000104A 2F6465762F636F6E3A- <1> tmpName     db "/dev/con:",0
  1156 00001053 00                  <1>
  1157 00001054 736370646F732E7379- <1> tmpName2    db "scpdos.sys",0
  1157 0000105D 7300                <1>
  1158 0000105F 000000000000000000- <1> tmpDTA      db 80h dup 00h
  1158 00001068 000000000000000000- <1>
  1158 00001071 000000000000000000- <1>
  1158 0000107A 000000000000000000- <1>
  1158 00001083 000000000000000000- <1>
  1158 0000108C 000000000000000000- <1>
  1158 00001095 000000000000000000- <1>
  1158 0000109E 000000000000000000- <1>
  1158 000010A7 000000000000000000- <1>
  1158 000010B0 000000000000000000- <1>
  1158 000010B9 000000000000000000- <1>
  1158 000010C2 000000000000000000- <1>
  1158 000010CB 000000000000000000- <1>
  1158 000010D4 000000000000000000- <1>
  1158 000010DD 0000                <1>
  1159 000010DF 500000000000000000- <1> tmpBuffer   db 80, 0, 126 dup 00h 
  1159 000010E8 000000000000000000- <1>
  1159 000010F1 000000000000000000- <1>
  1159 000010FA 000000000000000000- <1>
  1159 00001103 000000000000000000- <1>
  1159 0000110C 000000000000000000- <1>
  1159 00001115 000000000000000000- <1>
  1159 0000111E 000000000000000000- <1>
  1159 00001127 000000000000000000- <1>
  1159 00001130 000000000000000000- <1>
  1159 00001139 000000000000000000- <1>
  1159 00001142 000000000000000000- <1>
  1159 0000114B 000000000000000000- <1>
  1159 00001154 000000000000000000- <1>
  1159 0000115D 0000                <1>
    14                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    15                                  %include "./Source/BSS/dosSeg.asm"
    16                              <1> ;This file contains the main DOS data segment
    17                              <1> dosAPT: ;Additional Page tables
    18 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    19                              <1> dosDataArea:
    20 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    21 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    22 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    23 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    24 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    25 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    26 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    27 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    28                              <1> ;Above is the system stats
    29                              <1> ;Below is the DOS vars
    30 0003C023 ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    31                              <1>     ;   A value of 0 means no chars buffered.
    32 0003C02B ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    33                              <1> sysVarsPtr:
    34 0003C033 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    35 0003C03B ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    36 0003C043 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    37                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    38 0003C04B ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    39                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    40 0003C053 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    41 0003C055 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    42 0003C05D ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    43 0003C065 ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    44 0003C06D ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    45                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    46 0003C06F ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    47 0003C070 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    48 0003C071 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    49 0003C072 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    50 0003C073 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    51                              <1> ;Additional internal variables
    52                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    53 0003C095 ??                  <1>     singleDrv   resb 1    ;Set if last drive accessed was drive B x
    54 0003C096 ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    55 0003C097 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    56                              <1> ;Create SFT header and corresponding array of five default sft entries
    57 0003C099 <res Ah>            <1>     firstSftHeader  resb sfth_size
    58 0003C0A3 <res 4Fh>           <1>     firstSft    resb sft_size
    59 0003C0F2 <res 4Fh>           <1>     secondSft   resb sft_size
    60 0003C141 <res 4Fh>           <1>     thirdSft    resb sft_size
    61 0003C190 <res 4Fh>           <1>     fourthSft   resb sft_size
    62 0003C1DF <res 4Fh>           <1>     fifthSft    resb sft_size
    63                              <1> 
    64                              <1> ;Virtual CONsole Buffers
    65 0003C22E ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
    66                              <1>     ;Only incremented when CON device runs vCon
    67                              <1> vConBuf:    ;Proper buffer symbol
    68 0003C22F ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
    69 0003C230 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
    70                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
    71 0003C2B0 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
    72 0003C330 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
    73                              <1> 
    74 0003C331 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
    75 0003C332 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    76 0003C333 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
    77 0003C334 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
    78                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
    79                              <1> 
    80 0003C335 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    81                              <1> ;Server stuff. Default to all zeros (blank)
    82 0003C336 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
    83                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
    84 0003C337 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
    85 0003C338 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
    86                              <1> ;Swappable Data Area
    87 0003C348 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    88 0003C368 ??                  <1>                 resb 1  ;Alignment byte
    89                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    90 0003C369 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    91 0003C36A ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    92 0003C36B ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    93 0003C36C ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    94 0003C36D ????                <1>     errorExCde  resw 1  ;Extended Error Code
    95 0003C36F ??                  <1>     errorAction resb 1  ;Suggested action for error  
    96 0003C370 ??                  <1>     errorClass  resb 1  ;Error Class
    97 0003C371 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
    98 0003C379 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    99 0003C381 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   100                              <1> 
   101 0003C389 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   102 0003C391 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   103                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   104                              <1>     ;Lower byte: User Specified
   105 0003C393 ??                  <1>     currentDrv  resb 1  ;Default drive x
   106 0003C394 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   107                              <1> ;SDA, needs to be replaced between processes
   108                              <1> sdaMainSwap:
   109 0003C395 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   110 0003C39D ????????????????    <1>     sharePSP    resq 1  ;PSP of the share program
   111 0003C3A5 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   112 0003C3A7 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   113 0003C3AF ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   114 0003C3B7 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   115 0003C3BF ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   116 0003C3C1 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   117 0003C3C9 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   118 0003C3CA ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   119 0003C3CB ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   120                              <1> 
   121 0003C3CC ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   122 0003C3D4 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   123 0003C3DC ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   124 0003C3E4 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   125 0003C3EC ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   126                              <1> ;The below flag tells DOS to print ^C in the termination function
   127 0003C3ED ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   128 0003C3EE ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   129                              <1> ;Time stuff
   130                              <1> ;Read the below two as a word
   131 0003C3EF ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   132 0003C3F0 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   133 0003C3F1 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   134 0003C3F2 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   135 0003C3F4 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   136                              <1> 
   137 0003C3F5 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   138 0003C3F6 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   139 0003C3F7 ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   140                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   141                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   142                              <1> ; without forcing to re-build the whole primary request block.
   143                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   144                              <1> ; with secondary char output going through the secondary header
   145                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   146                              <1> ; for output)
   147                              <1> ;ioReqPkt is the largest possible packet
   148 0003C3F8 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   149 0003C422 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   150 0003C44C <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   151 0003C476 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   152                              <1> ;Swappable Buffers
   153 0003C477 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   154                              <1>     ;We add an additional byte to save ah too
   155 0003C47D ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   156 0003C47F <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   157 0003C4FF <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   158 0003C57F ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   159 0003C587 ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   160 0003C58F ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   161                              <1> ;Misc bookkeeping flags and vars
   162 0003C590 <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal searching block
   163 0003C5BB <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   164 0003C5DB <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   165 0003C5E7 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards in fcbName
   166 0003C5F3 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   167 0003C5FB <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need tmp CDS
   168 0003C656 ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   169 0003C657 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   170 0003C658 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   171 0003C659 ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   172 0003C65A ??                  <1>     rwFlag      resb 1  ;00h=Read, 01h=Write
   173 0003C65B ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   174 0003C65C ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   175                              <1> 
   176 0003C65D ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   177 0003C65E ??                  <1>     filspcExist resb 1  ;-1 if Filename of existing file/dir for create
   178 0003C65F ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlelv
   179 0003C660 ??                  <1>     workingDrv  resb 1  ;Working drive number
   180                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   181                              <1> workingDD:  ;Create a symbol for the working device driver too
   182 0003C661 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   183 0003C669 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   184                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   185                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   186 0003C671 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   187 0003C679 ????????????????    <1>     curJFTNum   resq 1  ;Ptr to JFT num in caller PSP of file being accessed
   188 0003C681 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   189 0003C689 ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   190 0003C68B ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   191                              <1> ;Temp vars, used when walking FAT or changing sectors
   192 0003C693 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   193 0003C69B ????                <1>     entries     resw 1  ;FAT entries per FAT sector
   194                              <1> ;***************************************************|
   195                              <1> ; Needs to be set up before any file access         |
   196                              <1> ; These vars keep track of file access properties   |
   197                              <1> ;   and must be used only for such purposes.        |
   198                              <1> ;***************************************************|
   199 0003C69D ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   200 0003C6A1 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   201                              <1> 
   202 0003C6A5 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   203 0003C6A9 ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   204 0003C6AA ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   205                              <1> 
   206 0003C6B2 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   207 0003C6B4 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   208                              <1> ;***************************************************|
   209 0003C6B8 ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   210 0003C6BC ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   211 0003C6C0 ????????            <1>     bytesAdded  resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   212 0003C6C4 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   213 0003C6C8 ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   214                              <1> ;Directory stuff
   215 0003C6CC ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   216 0003C6D0 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   217 0003C6D4 ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   218 0003C6D6 ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   219                              <1> ;Error DPB 
   220 0003C6DA ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   221 0003C6E2 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   222                              <1> ;Stacks and scratch SFT
   223 0003C6E3 <res 528h>          <1>     critStack   resq 165
   224 0003CC0B ????????????????    <1>     critStakTop resq 1
   225                              <1> 
   226 0003CC13 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   227                              <1> 
   228 0003CC62 <res 638h>          <1>     AuxStack    resq 199
   229 0003D29A ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   230 0003D2A2 <res 638h>          <1>     DiskStack   resq 199
   231 0003D8DA ????????????????    <1>     DiskStakTop resq 1
   232                              <1> 
   233 0003D8E2 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   234 0003D8E3 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls!  
   235                              <1>     sdaLen      equ     $ - sda 
   236                              <1>     sdaMSLen    equ     $ - sda
   237                              <1> 
   238                              <1> ;Additional variables NOT in the SDA
   239 0003D8E4 <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   240                              <1>     ;for saving the current header when quickly doing a second request
   241                              <1> 
   242                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   243                              <1> inExtASCII:
   244 0003D90E ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   245 0003D90F ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   246                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   247                              <1>     ; copy of the date/time record
   248                              <1>     dSegLen     equ     $
    16                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    17                                  %define currSegVBase section.resSeg.vstart
    18                                  %include "./Source/Data/staticData.asm"
    19                              <1> 
    20                              <1> ;-----------------------------------:
    21                              <1> ;       Static Data Variables       :
    22                              <1> ;-----------------------------------:
    23 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    24 00000001 01                  <1> dosMinor    db 01h      ;.01
    25 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    25 0000000B 535953              <1>
    26 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    26 00000017 535953              <1>
    27                              <1> 
    28                              <1> ;-----------------------------------:
    29                              <1> ;        Static Data Tables         :
    30                              <1> ;-----------------------------------:
    31                              <1> ctryTbl:
    32                              <1> ;Country Table (defaulting to UK)
    33 0000001A 0100                <1> .dtfmt:     dw 1            ;Date time format (2 bytes)
    34                              <1>                             ;0 = month day year hh:mm:ss
    35                              <1>                             ;1 = day month year hh:mm:ss
    36                              <1>                             ;2 = year month day hh:mm:ss
    37 0000001C C2A300000000        <1> .curr:      db "£",0,0,0,0  ;ASCIIZ Currency symbol (5 chars)
    38 00000022 2C00                <1> .thouSep:   db ",",0        ;ASCIIZ Thousands separator
    39 00000024 2E00                <1> .dcmlSep:   db ".",0        ;ASCIIZ Decimal separator
    40 00000026 2D00                <1> .dateSep:   db "-",0        ;ASCIIZ Date separator
    41 00000028 3A00                <1> .timeSep:   db ":",0        ;ASCIIZ Time separator
    42 0000002A 00                  <1> .currFmt:   db 0            ;Currency Format
    43                              <1>                 ;0 = Symbol leads, without space
    44                              <1>                 ;1 = Symbol follows, without space
    45                              <1>                 ;2 = Symbol leads, one space
    46                              <1>                 ;3 = Symbol follows, one space
    47                              <1>                 ;4 = Symbol replace decimal separator
    48 0000002B 02                  <1> .digtdpt:   db 2 ;Number of digits after the decimal point
    49 0000002C 00                  <1> .timefmt:   db 0 ;Time format, Bit 0 = 0 => 12 hour clock, = 1 => 24 hour clock
    50 0000002D 0000000000000000    <1> .mapaddr:   dq 0 ;Case map address (0 is nulptr)
    51 00000035 2C00                <1> .dataSep:   db ",",0    ;Data list separator
    52 00000037 000000000000000000- <1> .resv:      db 0,0,0,0,0,0,0,0,0,0  ;Reserve 10 bytes
    52 00000040 00                  <1>
    53                              <1> 
    54                              <1> ;IO Char table
    55                              <1> ;This table has Request header length, command code and error flags
    56                              <1> ; as a packed DWORD entry
    57                              <1> ioRqCmdErrTbl:
    58                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    59                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    60 00000041 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    61 00000045 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    62 00000049 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    63 0000004D 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    64 00000051 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    65 00000055 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    66                              <1> 
    67                              <1> 
    68                              <1> 
    69                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    70                              <1> ; wish to install their own custom logic.
    71 00000059 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    72 00000061 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    73 00000062 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    74                              <1> ;Extended ASCII keys with special meanings
    75 00000063 3B                  <1> extKeyTbl   db eF1
    76 00000064 EA1D                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    77 00000066 3C                  <1>             db eF2
    78 00000067 DC1D                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    79 00000069 3D                  <1>             db eF3
    80 0000006A E31D                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    81 0000006C 3E                  <1>             db eF4
    82 0000006D 181E                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    83 0000006F 3F                  <1>             db eF5
    84 00000070 5D1E                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    85 00000072 40                  <1>             db eF6
    86 00000073 731E                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    87 00000075 41                  <1>             db eF7
    88 00000076 7A1E                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    89 00000078 4B                  <1>             db eCursL
    90 00000079 411D                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    91 0000007B 4D                  <1>             db eCursR
    92 0000007C EA1D                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    93 0000007E 52                  <1>             db eIns
    94 0000007F 851E                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    95 00000081 53                  <1>             db eDel
    96 00000082 8C1E                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    97                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    98                              <1> 
    99                              <1> ;When counting the number of days, first compute the number of years since
   100                              <1> ; 1980 and your year. 
   101                              <1> ;Then, using the table below, find the number of leap years between 1980
   102                              <1> ; and (YourYear - 1). 
   103                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   104                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   105                              <1> ;
   106                              <1> ;Use the months table to get the number of days in a normal month as leap 
   107                              <1> ; years are added using the previous comment.
   108                              <1> 
   109                              <1> ;This table is the number of days in the month
   110                              <1> ;The function which updates the days in Feb writes the number to this table
   111                              <1> monthsTbl:  
   112 00000084 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   112 0000008D 1F1E1F              <1>
   113                              <1> 
   114                              <1> ;Error tables
   115                              <1> errXlatTbl:
   116                              <1> ;Each entry is n bytes long, defined as
   117                              <1> ; Byte 0      : DOS function number for which translation will occur
   118                              <1> ; Byte 1      : Length of the table entry - 2
   119                              <1> ; Bytes n - 3 : Acceptable Error codes
   120                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   121                              <1> ;The table is terminated with a single -1 byte
   122                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   123                              <1> ; only on entry to a disk function
   124 00000090 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   125 00000094 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   126 00000099 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   127 0000009F 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   128 000000A3 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   129 000000A9 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   130 000000B0 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   131 000000B3 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   132 000000B7 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   133 000000BB 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   134 000000C0 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   135 000000C4 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   136 000000CA 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   137 000000D1 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   138 000000D5 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   139 000000D9 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   140 000000DC 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   141 000000E0 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   142 000000E4 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   143 000000E9 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   144 000000F1 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   145 000000F3 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   146 000000F8 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   147 000000FB 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   148 00000101 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   149 00000105 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   150 00000108 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   151 0000010E 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   152 00000115 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   153 0000011B 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   154 0000011F 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   155 00000123 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   156 00000126 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   157 0000012B FF                  <1>     db -1   ;End Of Table marker
   158                              <1> 
   159                              <1> 
   160                              <1> extErrTbl:
   161                              <1> ;This table contains the default values for how to respond
   162                              <1> ; to particular errors. Fields with -1 need to be filled in before
   163                              <1> ; setting variables using this table.
   164                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   165                              <1> ; Byte 0: Extended Error Code as a byte
   166                              <1> ; Byte 1: Error Class
   167                              <1> ; Byte 2: Error Suggested Action
   168                              <1> ; Byte 3: Error Locus
   169                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   170                              <1> ;
   171                              <1> ;Error 01: Invalid function number
   172 0000012C 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   173                              <1> ;Error 02: File not found
   174 00000130 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   175                              <1> ;Error 03: Path not found
   176 00000134 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   177                              <1> ;Error 04: Too many open handles, and no handles are left
   178 00000138 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   179                              <1> ;Error 05: Access being denied
   180 0000013C 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   181                              <1> ;Error 06: Invalid File handle being provided
   182 00000140 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   183                              <1> ;Error 07: MCB chain destroyed
   184 00000144 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   185                              <1> ;Error 08: No Memory remaining
   186 00000148 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   187                              <1> ;Error 09: Invalid MCB block Address
   188 0000014C 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   189                              <1> ;Error 0A: Bad Environment block
   190 00000150 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   191                              <1> ;Error 0B: Data provided in a bad format
   192 00000154 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   193                              <1> ;Error 0C: Access Code Invalid
   194 00000158 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   195                              <1> ;Error 0D: Error due to Invalid Data provided
   196 0000015C 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   197                              <1> ;Error 0F: Error due to a bad drive letter being provided
   198 00000160 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   199                              <1> ;Error 10: Error due to attempting to delete the CWD
   200 00000164 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   201                              <1> ;Error 11: Error due to a unknown device being used
   202 00000168 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   203                              <1> ;Error 12: No more file handles available
   204 0000016C 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   205                              <1> ;Error 50: Network request not supported
   206 00000170 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   207                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   208 00000174 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   209                              <1> ;Error 21: File Locking Violation
   210 00000178 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   211                              <1> ;Error 54: Too many levels of redirection error
   212 0000017C 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   213                              <1> ;Error 56: Bad resource password provided
   214 00000180 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   215                              <1> ;Error 52: Directory already exists
   216 00000184 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   217                              <1> ;Error 32: Network request not supported by DOS
   218 00000188 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   219                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   220 0000018C 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   221                              <1> ;Error 57: Bad parameter in request
   222 00000190 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   223                              <1> ;Error 53: Fail was returned from Int 44h
   224 00000194 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   225                              <1> ;Error 24: Sharing Buffer Full
   226 00000198 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   227 0000019C FFFFFFFF            <1>     dd -1   ;End of table signature
   228                              <1> 
   229                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   230 000001A0 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   230 000001A9 090A0B0C0D0E0F      <1>
   231 000001B0 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   231 000001B9 191A1B1C1D1E1F      <1>
   232 000001C0 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   232 000001C9 3D3E3F5B5C5D7C      <1>
   233                              <1> badDirNameCharL equ $ - badDirNameChar
   234                              <1> ;The chars * ? . \ / need to always be handled separately
   235                              <1> 
   236                              <1> extAsciiTbl:    ;This table needs to be replaced in other Codepages
   237 000001D0 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   237 000001D9 4545494949          <1>
   238 000001DE 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   238 000001E7 5559999A9B          <1>
   239 000001EC 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   239 000001F5 A5A6A7A8            <1>
   240 000001F9 A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   240 00000202 B2B3B4              <1>
   241 00000205 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   241 0000020E BEBFC0              <1>
   242 00000211 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   242 0000021A CACBCC              <1>
   243 0000021D CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   243 00000226 D6D7D8              <1>
   244 00000229 D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   244 00000232 E2E3E4              <1>
   245 00000235 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   245 0000023E EEEFF0              <1>
   246 00000241 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   246 0000024A FAFBFC              <1>
   247 0000024D FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   248                              <1> extAsciiSig:   ;This table needs to replaces in other Codepages
   249 00000250 F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   249 00000259 F0F6F6              <1>
   250 0000025C F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   250 00000265 F6F6F6              <1>
   251 00000268 F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   251 00000271 FFF6FF              <1>
   252 00000274 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   252 0000027D FFFEF6              <1>
   253 00000280 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   253 00000289 FFF4F4              <1>
   254 0000028C F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   254 00000295 FFFFFF              <1>
   255 00000298 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   255 000002A1 FFFFFF              <1>
   256 000002A4 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   256 000002AD F6FFFF              <1>
   257 000002B0 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   257 000002B9 FFFFFF              <1>
   258 000002BC FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   258 000002C5 FFFFFF              <1>
   259 000002C8 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
    19                                  %include "./Source/Data/dispTbl.asm"
    20                              <1> ;Kernel Dispatch Function Table
    21                              <1> 
    22                              <1> kDispTbl:
    23 000002D0 742C                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    24 000002D2 7015                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    25 000002D4 7D15                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    26 000002D6 3A16                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    27 000002D8 6316                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    28 000002DA 6B16                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    29 000002DC 8316                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    30 000002DE B616                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    31 000002E0 DB16                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    32 000002E2 3A17                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    33 000002E4 ED19                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    34 000002E6 4917                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    35 000002E8 5517                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    36 000002EA ED37                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    37 000002EC 1F38                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    38 000002EE 291F                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    39 000002F0 291F                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    40 000002F2 291F                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    41 000002F4 291F                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    42 000002F6 291F                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    43 000002F8 291F                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    44 000002FA 291F                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    45 000002FC 291F                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    46 000002FE 291F                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    47 00000300 D13A                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    48 00000302 3838                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    49 00000304 2A1F                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    50 00000306 3F38                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    51 00000308 4138                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    52 0000030A D13A                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    53 0000030C D13A                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    54 0000030E EB38                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    55 00000310 D13A                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    56 00000312 3D1F                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    57 00000314 3D1F                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    58 00000316 3D1F                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    59 00000318 3D1F                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    60 0000031A 9838                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    61 0000031C C82B                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    62 0000031E 3D1F                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    63 00000320 3D1F                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    64 00000322 3D1F                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    65 00000324 631C                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    66 00000326 8A1C                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    67 00000328 901C                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    68 0000032A B11C                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    69 0000032C C838                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    70 0000032E 3E1F                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    71 00000330 D638                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    72 00000332 462C                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    73 00000334 ED38                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    74 00000336 A237                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    75 00000338 3339                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    76 0000033A 4439                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    77 0000033C 5539                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    78 0000033E 9A2D                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    79 00000340 C32D                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    80 00000342 4F13                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    81 00000344 4F13                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    82 00000346 4F13                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    83 00000348 511F                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    84 0000034A 521F                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    85 0000034C 531F                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    86 0000034E 901F                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    87 00000350 CB1F                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    88 00000352 D71F                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    89 00000354 D81F                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    90 00000356 4220                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    91 00000358 4220                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    92 0000035A 4220                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    93 0000035C 8020                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    94 0000035E 4F13                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    95 00000360 7B26                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    96 00000362 9628                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    97 00000364 8B29                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    98 00000366 992D                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    99 00000368 762C                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   100 0000036A A739                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   101 0000036C A020                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   102 0000036E 0421                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   103 00000370 D037                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   104 00000372 D937                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   105 00000374 B539                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   106 00000376 C639                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   107 00000378 A03A                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   108 0000037A B52B                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   109 0000037C 0421                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   110 0000037E 4F13                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   111 00000380 142B                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   112 00000382 A73A                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   113 00000384 0421                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   114 00000386 0421                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   115 00000388 0421                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   116 0000038A D03A                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   117 0000038C D03A                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   118 0000038E D03A                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   119 00000390 4F13                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   120 00000392 D13A                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   121 00000394 E237                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   122 00000396 D13A                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   123 00000398 EB37                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   124 0000039A C32D                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   125 0000039C C32D                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   126 0000039E 0921                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   127 000003A0 0E21                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   128 000003A2 D13A                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   129                              <1> kDispTblL  equ $ - kDispTbl 
   130                              <1> 
   131                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   132 000003A4 263A                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   133                              <1> mDispTblL   equ     $ - mDispTbl
    20                                  %include "./Source/Debug/debug.asm"
    21                              <1> ;This file contains debugging macros, procs and strings
    22                              <1> ; that we can use to output to COM1 bypassing the operating system.
    23                              <1> ;A serial terminal must be connected for this to work.
    24                              <1> 
    25                              <1> ;Variables and equates
    26                              <1> 
    27 000003A6 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    28                              <1> 
    29 000003AE 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    29 000003B7 39414243444546      <1>
    30                              <1> ;Common procedures
    31                              <1> debMakeDebuggerRespond:
    32 000003BE 488D2D26000000      <1>     lea rbp, .msg
    33 000003C5 E8AF000000          <1>     call debPrintNullString
    34 000003CA B900001000          <1>     mov ecx, 100000h
    35                              <1> .waiting:
    36 000003CF FFC9                <1>     dec ecx
    37 000003D1 740C                <1>     jz .timeout
    38 000003D3 B402                <1>     mov ah, 02h ;Blocking recieve!
    39 000003D5 31D2                <1>     xor edx, edx
    40 000003D7 CD34                <1>     int 34h
    41 000003D9 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    42 000003DC 75F1                <1>     jnz .waiting
    43 000003DE C3                  <1>     ret
    44                              <1> .timeout:
    45 000003DF 488D2D47000000      <1>     lea rbp, .msg2
    46 000003E6 E98E000000          <1>     jmp debPrintNullString
    47 000003EB 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    47 000003F4 6B6579206174207468- <1>
    47 000003FD 65207465726D696E61- <1>
    47 00000406 6C20746F20636F6E74- <1>
    47 0000040F 696E7565206F722077- <1>
    47 00000418 61697420666F722074- <1>
    47 00000421 696D656F75742E2E2E- <1>
    47 0000042A 0A0D00              <1>
    48 0000042D 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    48 00000436 436F6E74696E75696E- <1>
    48 0000043F 672E2E2E0A0D00      <1>
    49                              <1> debPrintHexByte:
    50                              <1> ;Print the hex byte in al as a hex value
    51 00000446 52                  <1>     push rdx
    52 00000447 53                  <1>     push rbx
    53 00000448 50                  <1>     push rax
    54                              <1> 
    55 00000449 88C2                <1>     mov dl, al           ;save byte in dl
    56 0000044B 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    57 0000044F 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    58 00000454 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    59 00000458 E80C000000          <1>     call .wrchar
    60 0000045D 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    61 00000460 E804000000          <1>     call .wrchar
    62                              <1> 
    63 00000465 58                  <1>     pop rax
    64 00000466 5B                  <1>     pop rbx
    65 00000467 5A                  <1>     pop rdx
    66 00000468 C3                  <1>     ret
    67                              <1> .wrchar:
    68 00000469 6687DB              <1>     xchg bx, bx
    69 0000046C 488D1D3BFFFFFF      <1>     lea rbx, debascii
    70 00000473 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    71 00000474 B401                <1>     mov ah, 01h
    72 00000476 CD34                <1>     int 34h  ;print char
    73 00000478 C3                  <1>     ret
    74                              <1> 
    75                              <1> debPrintNullString:
    76                              <1> ;Print a null terminated string pointed to by rbp
    77 00000479 56                  <1>     push rsi
    78 0000047A 50                  <1>     push rax
    79 0000047B 52                  <1>     push rdx
    80 0000047C 31D2                <1>     xor edx, edx    ;Select COM1
    81 0000047E 4889EE              <1>     mov rsi, rbp
    82                              <1> .getChar:
    83 00000481 AC                  <1>     lodsb
    84 00000482 84C0                <1>     test al, al
    85 00000484 7406                <1>     jz .exit
    86 00000486 B401                <1>     mov ah, 01h
    87 00000488 CD34                <1>     int 34h
    88 0000048A EBF5                <1>     jmp short .getChar
    89                              <1> .exit:
    90 0000048C 5A                  <1>     pop rdx
    91 0000048D 58                  <1>     pop rax
    92 0000048E 5E                  <1>     pop rsi
    93 0000048F C3                  <1>     ret
    94                              <1> 
    95                              <1> debPrintDOSStack:
    96                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    97                              <1> ;Shows me which function, and parameters passed and returned
    98 00000490 488D2DA5010000      <1>     lea rbp, .a1
    99 00000497 E8DDFFFFFF          <1>     call debPrintNullString
   100 0000049C 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   101 000004A3 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   102 000004AA 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   103 000004AD E802030000          <1>     call overlayQword
   104 000004B2 4881C316000000      <1>     add rbx, 22
   105 000004B9 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   106 000004BD E8F2020000          <1>     call overlayQword
   107 000004C2 4881C316000000      <1>     add rbx, 22
   108 000004C9 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   109 000004CD E8E2020000          <1>     call overlayQword
   110 000004D2 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   111 000004D9 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   112 000004DD E8D2020000          <1>     call overlayQword
   113 000004E2 4881C316000000      <1>     add rbx, 22 
   114 000004E9 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   115 000004ED E8C2020000          <1>     call overlayQword
   116 000004F2 4881C316000000      <1>     add rbx, 22
   117 000004F9 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   118 000004FD E8B2020000          <1>     call overlayQword
   119 00000502 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   120 00000509 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   121 0000050D E8A2020000          <1>     call overlayQword
   122 00000512 4881C316000000      <1>     add rbx, 22
   123 00000519 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
   124 00000520 480560000000        <1>     add rax, callerFrame_size
   125 00000526 E889020000          <1>     call overlayQword
   126 0000052B 4881C316000000      <1>     add rbx, 22
   127 00000532 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   128 00000536 E879020000          <1>     call overlayQword
   129 0000053B 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   130 00000542 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   131 00000546 E869020000          <1>     call overlayQword
   132 0000054B 488D2D06000000      <1>     lea rbp, .a0
   133 00000552 E822FFFFFF          <1>     call debPrintNullString
   134 00000557 C3                  <1>     ret
   135                              <1> 
   136 00000558 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   136 00000561 303030303030303030- <1>
   136 0000056A 30306820            <1>
   137 0000056E 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   137 00000577 303030303030303030- <1>
   137 00000580 30306820            <1>
   138 00000584 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   138 0000058D 303030303030303030- <1>
   138 00000596 30306820            <1>
   139 0000059A 0A0D                <1>     db  0Ah,0Dh
   140 0000059C 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   140 000005A5 303030303030303030- <1>
   140 000005AE 30306820            <1>
   141 000005B2 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   141 000005BB 303030303030303030- <1>
   141 000005C4 30306820            <1>
   142 000005C8 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   142 000005D1 303030303030303030- <1>
   142 000005DA 30306820            <1>
   143 000005DE 0A0D                <1>     db 0Ah, 0Dh
   144 000005E0 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   144 000005E9 303030303030303030- <1>
   144 000005F2 30306820            <1>
   145 000005F6 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   145 000005FF 303030303030303030- <1>
   145 00000608 30306820            <1>
   146 0000060C 7269703D3030303030- <1>     db "rip=0000000000000000h"
   146 00000615 303030303030303030- <1>
   146 0000061E 303068              <1>
   147 00000621 0A0D                <1>     db 0Ah, 0Dh
   148 00000623 666C673D3030303030- <1>     db "flg=0000000000000000h "
   148 0000062C 303030303030303030- <1>
   148 00000635 30306820            <1>
   149 00000639 0A0D00              <1>     db 0Ah,0Dh,0
   150 0000063C 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   150 00000645 206F6E20496E742034- <1>
   150 0000064E 316820737461636B0A- <1>
   150 00000657 0D00                <1>
   151                              <1> 
   152                              <1> debDPBptr:
   153                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   154 00000659 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   155 00000660 4889E8              <1>     mov rax, rbp
   156 00000663 E84C010000          <1>     call overlayQword
   157 00000668 488D2D06000000      <1>     lea rbp, .dpb
   158 0000066F E805FEFFFF          <1>     call debPrintNullString
   159 00000674 C3                  <1>     ret
   160                              <1> .dpb: 
   161 00000675 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   161 0000067E 203030303030303030- <1>
   161 00000687 303030303030303068- <1>
   161 00000690 200A0D00            <1>
   162                              <1> 
   163                              <1> debDPBBPBptr:
   164                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   165                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   166 00000694 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   167 0000069B 4889E8              <1>     mov rax, rbp
   168 0000069E E811010000          <1>     call overlayQword
   169 000006A3 4881C321000000      <1>     add rbx, 33
   170 000006AA 4889F0              <1>     mov rax, rsi
   171 000006AD E802010000          <1>     call overlayQword
   172 000006B2 488D2D06000000      <1>     lea rbp, .dpb
   173 000006B9 E8BBFDFFFF          <1>     call debPrintNullString
   174 000006BE C3                  <1>     ret
   175                              <1> .dpb: 
   176 000006BF 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   176 000006C8 203030303030303030- <1>
   176 000006D1 303030303030303068- <1>
   176 000006DA 2066726F6D20        <1>
   177 000006E0 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   177 000006E9 203030303030303030- <1>
   177 000006F2 303030303030303068- <1>
   177 000006FB 200A0D00            <1>
   178                              <1> overlayByte:
   179                              <1>     ;Called with number in rax
   180                              <1>     ;pointer to START of 16 byte space for number in rbx
   181 000006FF 53                  <1>     push rbx
   182 00000700 51                  <1>     push rcx
   183 00000701 52                  <1>     push rdx
   184 00000702 55                  <1>     push rbp
   185 00000703 4889DD              <1>     mov rbp, rbx
   186 00000706 4889C2              <1>     mov rdx, rax
   187 00000709 48FFC5              <1>     inc rbp ;Go to end of number
   188                              <1> 
   189 0000070C 488D1D9BFCFFFF      <1>     lea rbx, debascii
   190 00000713 88D0                <1>     mov al, dl  ;Go low nybble first
   191 00000715 240F                <1>     and al, 0Fh
   192 00000717 D7                  <1>     xlatb
   193 00000718 884500              <1>     mov byte [rbp], al
   194 0000071B 48FFCD              <1>     dec rbp ;Go down one char pos
   195 0000071E 88D0                <1>     mov al, dl
   196 00000720 24F0                <1>     and al, 0F0h    ;Hi nybble next
   197 00000722 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   198 00000725 D7                  <1>     xlatb
   199 00000726 884500              <1>     mov byte [rbp], al  ;Store char
   200                              <1> 
   201 00000729 5D                  <1>     pop rbp
   202 0000072A 5A                  <1>     pop rdx
   203 0000072B 59                  <1>     pop rcx
   204 0000072C 5B                  <1>     pop rbx
   205 0000072D C3                  <1>     ret
   206                              <1> 
   207                              <1> overlayWord:
   208                              <1>     ;Called with number in rax
   209                              <1>     ;pointer to START of 16 byte space for number in rbx
   210 0000072E 53                  <1>     push rbx
   211 0000072F 51                  <1>     push rcx
   212 00000730 52                  <1>     push rdx
   213 00000731 55                  <1>     push rbp
   214 00000732 4889DD              <1>     mov rbp, rbx
   215 00000735 4889C2              <1>     mov rdx, rax
   216 00000738 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   217 0000073F B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   218 00000744 488D1D63FCFFFF      <1>     lea rbx, debascii
   219                              <1> .ow0:
   220 0000074B 88D0                <1>     mov al, dl  ;Go low nybble first
   221 0000074D 240F                <1>     and al, 0Fh
   222 0000074F D7                  <1>     xlatb
   223 00000750 884500              <1>     mov byte [rbp], al
   224 00000753 48FFCD              <1>     dec rbp ;Go down one char pos
   225 00000756 88D0                <1>     mov al, dl
   226 00000758 24F0                <1>     and al, 0F0h    ;Hi nybble next
   227 0000075A C0E804              <1>     shr al, 4   ;Shift hi nybble low
   228 0000075D D7                  <1>     xlatb
   229 0000075E 884500              <1>     mov byte [rbp], al  ;Store char
   230 00000761 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   231 00000765 48FFCD              <1>     dec rbp
   232 00000768 FFC9                <1>     dec ecx
   233 0000076A 75DF                <1>     jnz .ow0
   234 0000076C 5D                  <1>     pop rbp
   235 0000076D 5A                  <1>     pop rdx
   236 0000076E 59                  <1>     pop rcx
   237 0000076F 5B                  <1>     pop rbx
   238 00000770 C3                  <1>     ret
   239                              <1> 
   240                              <1> overlayDword:
   241                              <1>     ;Called with number in rax
   242                              <1>     ;pointer to START of 16 byte space for number in rbx
   243 00000771 53                  <1>     push rbx
   244 00000772 51                  <1>     push rcx
   245 00000773 52                  <1>     push rdx
   246 00000774 55                  <1>     push rbp
   247 00000775 4889DD              <1>     mov rbp, rbx
   248 00000778 4889C2              <1>     mov rdx, rax
   249 0000077B 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   250 00000782 B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   251 00000787 488D1D20FCFFFF      <1>     lea rbx, debascii
   252                              <1> .od0:
   253 0000078E 88D0                <1>     mov al, dl  ;Go low nybble first
   254 00000790 240F                <1>     and al, 0Fh
   255 00000792 D7                  <1>     xlatb
   256 00000793 884500              <1>     mov byte [rbp], al
   257 00000796 48FFCD              <1>     dec rbp ;Go down one char pos
   258 00000799 88D0                <1>     mov al, dl
   259 0000079B 24F0                <1>     and al, 0F0h    ;Hi nybble next
   260 0000079D C0E804              <1>     shr al, 4   ;Shift hi nybble low
   261 000007A0 D7                  <1>     xlatb
   262 000007A1 884500              <1>     mov byte [rbp], al  ;Store char
   263 000007A4 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   264 000007A8 48FFCD              <1>     dec rbp
   265 000007AB FFC9                <1>     dec ecx
   266 000007AD 75DF                <1>     jnz .od0
   267 000007AF 5D                  <1>     pop rbp
   268 000007B0 5A                  <1>     pop rdx
   269 000007B1 59                  <1>     pop rcx
   270 000007B2 5B                  <1>     pop rbx
   271 000007B3 C3                  <1>     ret
   272                              <1> 
   273                              <1> overlayQword:
   274                              <1>     ;Called with number in rax
   275                              <1>     ;pointer to START of 16 byte space for number in rbx
   276 000007B4 53                  <1>     push rbx
   277 000007B5 51                  <1>     push rcx
   278 000007B6 52                  <1>     push rdx
   279 000007B7 55                  <1>     push rbp
   280 000007B8 4889DD              <1>     mov rbp, rbx
   281 000007BB 4889C2              <1>     mov rdx, rax
   282 000007BE 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   283 000007C5 B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   284 000007CA 488D1DDDFBFFFF      <1>     lea rbx, debascii
   285                              <1> .oq0:
   286 000007D1 88D0                <1>     mov al, dl  ;Go low nybble first
   287 000007D3 240F                <1>     and al, 0Fh
   288 000007D5 D7                  <1>     xlatb
   289 000007D6 884500              <1>     mov byte [rbp], al
   290 000007D9 48FFCD              <1>     dec rbp ;Go down one char pos
   291 000007DC 88D0                <1>     mov al, dl
   292 000007DE 24F0                <1>     and al, 0F0h    ;Hi nybble next
   293 000007E0 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   294 000007E3 D7                  <1>     xlatb
   295 000007E4 884500              <1>     mov byte [rbp], al  ;Store char
   296 000007E7 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   297 000007EB 48FFCD              <1>     dec rbp
   298 000007EE FFC9                <1>     dec ecx
   299 000007F0 75DF                <1>     jnz .oq0
   300 000007F2 5D                  <1>     pop rbp
   301 000007F3 5A                  <1>     pop rdx
   302 000007F4 59                  <1>     pop rcx
   303 000007F5 5B                  <1>     pop rbx
   304 000007F6 C3                  <1>     ret
   305                              <1> 
   306                              <1> debPrintFunctionName:
   307                              <1> ;Prints the DOS function that has been entered
   308                              <1> ;Entered with ah = Function number
   309 000007F7 88E0                <1>     mov al, ah  ;Get dos function number
   310 000007F9 488D1DAEFBFFFF      <1>     lea rbx, debascii
   311 00000800 488D1535000000      <1>     lea rdx, .number
   312 00000807 24F0                <1>     and al, 0F0h    ;Get high nybble first
   313 00000809 C0E804              <1>     shr al, 4
   314 0000080C D7                  <1>     xlatb
   315 0000080D 8802                <1>     mov byte [rdx], al
   316 0000080F 88E0                <1>     mov al, ah
   317 00000811 240F                <1>     and al, 0Fh
   318 00000813 D7                  <1>     xlatb
   319 00000814 884201              <1>     mov byte [rdx + 1], al
   320 00000817 488D2D06000000      <1>     lea rbp, .dosString
   321 0000081E E856FCFFFF          <1>     call debPrintNullString
   322 00000823 C3                  <1>     ret
   323 00000824 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   323 0000082D 696F6E20496E742034- <1>
   323 00000836 31682F41483D        <1>
   324 0000083C 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   325                              <1> 
   326                              <1> ;----------------:
   327                              <1> ;!!!! MACROS !!!!:
   328                              <1> ;----------------:
   329                              <1> ;Insert macro when entering a debug block
   330                              <1> %macro debugEnterM 0
   331                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   332                              <1>     mov rsp, debStackTop
   333                              <1> ;Push all registers except rsp on stack
   334                              <1>     push rax
   335                              <1>     push rbx
   336                              <1>     push rcx
   337                              <1>     push rdx
   338                              <1>     push rsi
   339                              <1>     push rdi
   340                              <1>     push rbp
   341                              <1>     push r8
   342                              <1>     push r9
   343                              <1>     push r10
   344                              <1>     push r11
   345                              <1>     push r12
   346                              <1>     push r13
   347                              <1>     push r14
   348                              <1>     push r15
   349                              <1>     pushfq
   350                              <1> %endmacro
   351                              <1> ;Insert macro when exiting a debug block
   352                              <1> %macro debugExitM 0
   353                              <1>     popfq
   354                              <1>     pop r15
   355                              <1>     pop r14
   356                              <1>     pop r13
   357                              <1>     pop r12
   358                              <1>     pop r11
   359                              <1>     pop r10
   360                              <1>     pop r9
   361                              <1>     pop r8
   362                              <1>     pop rbp
   363                              <1>     pop rdi
   364                              <1>     pop rsi
   365                              <1>     pop rdx
   366                              <1>     pop rcx
   367                              <1>     pop rbx
   368                              <1>     pop rax
   369                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   370                              <1> %endmacro
    21                                  %include "./Source/Kernel/FAT/buffun.asm"
    22                              <1> ;This file contains FAT disk buffer related functions that
    23                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    24                              <1> ;----------------------------------------------------
    25                              <1> ;           Externally referenced functions         :
    26                              <1> ;----------------------------------------------------
    27                              <1> 
    28                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    29                              <1> ;Sets the buffer in rdi to the head of the chain
    30                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    31                              <1> ;Output: Buffer header set to the head of the chain
    32 00000842 48393D(55C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    33 00000849 7428                <1>     je .exit
    34 0000084B 56                  <1>     push rsi
    35 0000084C 488B35(55C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    36                              <1> .mainlp:
    37 00000853 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    38 00000856 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    39 00000858 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    40 0000085B EBF6                <1>     jmp short .mainlp
    41                              <1> .fnd:
    42 0000085D 57                  <1>     push rdi
    43 0000085E 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    44 00000861 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    45 00000864 5F                  <1>     pop rdi ;Get original buf back
    46 00000865 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    47 00000868 488735(55C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    48 0000086F 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    49 00000872 5E                  <1>     pop rsi
    50                              <1> .exit:
    51                              <1>     return
    18                              <2> %%_ret:
    19 00000873 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    52                              <1> 
    53                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    54                              <1> ;1 External reference
    55                              <1> ;Input: rdi = Buffer header to flush and free
    56 00000874 E844000000          <1>     call flushBuffer
    57 00000879 7306                <1>     jnc .exit
    58                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    59 0000087B 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    60                              <1> .exit:
    61                              <1>     return
    18                              <2> %%_ret:
    19 00000881 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    64                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    65                              <1> ;Output: rdi = First disk buffer
    66 00000882 488B3D(55C00300)    <1>     mov rdi, [bufHeadPtr]
    67 00000889 57                  <1>     push rdi
    68                              <1> .lp:
    69 0000088A 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    70 0000088E 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    71 00000891 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    72 00000898 75F0                <1>     jne .lp
    73 0000089A 5F                  <1>     pop rdi
    74                              <1>     return
    18                              <2> %%_ret:
    19 0000089B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    75                              <1> 
    76                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    77                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    78                              <1> ; second buffer in the chain in rdi
    79                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    80                              <1> ;Output: rdi = Second buffer in the chain
    81 0000089C 52                  <1>     push rdx
    82 0000089D 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    83 000008A0 E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    84 000008A5 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    85 000008A8 5A                  <1>     pop rdx
    86                              <1>     return
    18                              <2> %%_ret:
    19 000008A9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    87                              <1> 
    88                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    89                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    90                              <1> ;Input: rdi = Buffer header to start searching at
    91                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    92                              <1> ;        ZF=ZE => No unreferenced buffer found
    93 000008AA F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    94 000008AE 750C                <1>     jnz .exit
    95 000008B0 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    96 000008B3 4881FFFFFFFFFF      <1>     cmp rdi, -1
    97 000008BA 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    98                              <1> .exit:
    99                              <1>     return
    18                              <2> %%_ret:
    19 000008BC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   100                              <1> 
   101                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
   102                              <1> ;Flushes the data in a sector buffer to disk!
   103                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   104                              <1> ;Exit:  CF=NC : Success
   105                              <1> ;       CF=CY : Fail, terminate the request
   106                              <1> ;First make request to device driver
   107 000008BD 50                  <1>     push rax
   108 000008BE 53                  <1>     push rbx
   109 000008BF 51                  <1>     push rcx
   110 000008C0 52                  <1>     push rdx
   111 000008C1 56                  <1>     push rsi
   112 000008C2 55                  <1>     push rbp
   113                              <1> ;If the buffer is freed, skip flushing to avoid issues
   114 000008C3 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
   115 000008C7 7454                <1>     je .fbFreeExit  ;If it is free exit
   116 000008C9 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   117 000008CD 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   118                              <1> .fbRequest0:
   119 000008CF BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   120 000008D4 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   121 000008D8 7406                <1>     jz .fbRequest1
   122 000008DA 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   123                              <1> .fbRequest1:
   124 000008E0 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   125 000008E3 B901000000          <1>     mov ecx, 1  ;One sector to copy
   126 000008E8 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   127 000008EC 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   128 000008F0 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   129 000008F4 E8912B0000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   130 000008F9 E83B2A0000          <1>     call absDiskDriverCall    ;Make Driver Request
   131 000008FE 7525                <1>     jnz .fbFail
   132                              <1> ;Now check if the buffer was a FAT, to write additional copies
   133 00000900 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   134 00000904 7417                <1>     jz .fbFreeExit  ;If not, exit
   135 00000906 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   136 00000909 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   137 0000090B 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   138 0000090E 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   139 00000912 E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   140                              <1> .fbFreeExit1:
   141 00000917 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   142 0000091A 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   143                              <1> .fbFreeExit:
   144 0000091D F8                  <1>     clc
   145                              <1> .fbExitFail:
   146 0000091E 5D                  <1>     pop rbp
   147 0000091F 5E                  <1>     pop rsi
   148 00000920 5A                  <1>     pop rdx
   149 00000921 59                  <1>     pop rcx
   150 00000922 5B                  <1>     pop rbx
   151 00000923 58                  <1>     pop rax
   152                              <1>     return
    18                              <2> %%_ret:
    19 00000924 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   153                              <1> .fbFail:
   154                              <1> ;Enter here only if the request failed
   155 00000925 FFCE                <1>     dec esi
   156 00000927 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   157                              <1> ;Request failed thrice, critical error call
   158 00000929 C605(C9C30300)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   159 00000930 E85F270000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   160 00000935 3C01                <1>     cmp al, critRetry
   161 00000937 7496                <1>     je .fbRequest0
   162                              <1>     ;Else we fail (Ignore=Fail here)
   163 00000939 F9                  <1>     stc ;Set error flag to indicate fail
   164 0000093A E9DFFFFFFF          <1>     jmp .fbExitFail
   165                              <1> 
   166                              <1> testDirtyBufferForDrive:    ;External linkage
   167                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   168                              <1> ;Input: al = Drive number (0 based)
   169                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   170                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   171 0000093F 53                  <1>     push rbx
   172 00000940 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   173                              <1> .tdbfdCheckBuffer:
   174 00000947 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   175 0000094A 7509                <1>     jne .tdbfdGotoNextBuffer
   176 0000094C F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   177 00000950 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   178 00000952 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   179                              <1> .tdbfdExit:
   180 00000953 5B                  <1>     pop rbx
   181                              <1>     return
    18                              <2> %%_ret:
    19 00000954 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   182                              <1> .tdbfdGotoNextBuffer:
   183 00000955 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   184 00000958 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   185 0000095F 74F2                <1>     je .tdbfdExit
   186 00000961 EBE4                <1>     jmp short .tdbfdCheckBuffer
   187                              <1> 
   188                              <1> freeBuffersForDPB:
   189                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   190                              <1> ; to have a drive number of -1, thus freeing it
   191                              <1> ;Given DPB is in rbp
   192 00000963 53                  <1>     push rbx
   193 00000964 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   194                              <1> .i0:
   195 0000096B 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   196 0000096F 7506                <1>     jne .i1 ;If no, skip freeing
   197 00000971 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   198                              <1> .i1:
   199 00000977 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   200 0000097A 4881FBFFFFFFFF      <1>     cmp rbx, -1
   201 00000981 75E8                <1>     jne .i0
   202                              <1> .exit:
   203 00000983 5B                  <1>     pop rbx
   204                              <1>     return
    18                              <2> %%_ret:
    19 00000984 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   205                              <1> 
   206                              <1> setBufferReferenced:
   207                              <1> ;Sets the current buffer in the buffer variable as referenced.
   208                              <1> ; AKA DOS is done with it.
   209                              <1> ;Saves flag state too 
   210 00000985 55                  <1>     push rbp
   211 00000986 9C                  <1>     pushfq
   212 00000987 488B2D(8BC60300)    <1>     mov rbp, qword [currBuff]
   213 0000098E 804D0920            <1>     or byte [rbp + bufferHdr.bufferFlags], refBuffer
   214 00000992 EB0D                <1>     jmp short clearBufferReferenced.exit
   215                              <1> clearBufferReferenced:
   216                              <1> ;Clears the referenced bit, if the buffer becomes referenced again
   217                              <1> ; Called if DOS is not quite done with this buffer.
   218 00000994 55                  <1>     push rbp
   219 00000995 9C                  <1>     pushfq
   220 00000996 488B2D(8BC60300)    <1>     mov rbp, qword [currBuff]
   221 0000099D 806509DF            <1>     and byte [rbp + bufferHdr.bufferFlags], ~refBuffer
   222                              <1> .exit:
   223 000009A1 9D                  <1>     popfq
   224 000009A2 5D                  <1>     pop rbp
   225                              <1>     return
    18                              <2> %%_ret:
    19 000009A3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   226                              <1> 
   227                              <1> 
   228                              <1> getBuffer: ;Internal Linkage ONLY
   229                              <1> ;
   230                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   231                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   232                              <1> ;Flushes if not in disk change mode. 
   233                              <1> ;If in disk change mode, will check to see if the selected buffer 
   234                              <1> ; has data referring a device using the same DPB as we are changing.
   235                              <1> ; If it is, skip flushing, if not, flush first!
   236                              <1> ;
   237                              <1> ;This function will return a pointer to the desired data sector OR 
   238                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   239                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   240                              <1> ;Entry: rax = Sector to read
   241                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   242                              <1> ;       rsi = DPB to use for transaction
   243                              <1> ;Exit:  CF=NC => 
   244                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   245                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   246 000009A4 51                  <1>     push rcx
   247 000009A5 52                  <1>     push rdx
   248 000009A6 56                  <1>     push rsi
   249 000009A7 57                  <1>     push rdi
   250 000009A8 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   251 000009AA E831010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   252 000009AF 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   253 000009B6 7419                <1>     je .rbReadNewSector
   254 000009B8 48893D(8BC60300)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   255 000009BF E8D0FFFFFF          <1>     call clearBufferReferenced  ;Set buffer to unref again if it was referenced
   256                              <1> .rbExit:
   257 000009C4 F8                  <1>     clc
   258                              <1> .rbExitNoFlag:
   259 000009C5 5F                  <1>     pop rdi
   260 000009C6 5E                  <1>     pop rsi
   261 000009C7 5A                  <1>     pop rdx
   262 000009C8 59                  <1>     pop rcx
   263 000009C9 488B1D(8BC60300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   264                              <1>     return
    18                              <2> %%_ret:
    19 000009D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   265                              <1> .rbReadNewSector:
   266 000009D1 E8B3000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   267 000009D6 803D(E2D80300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   268 000009DD 7506                <1>     jne .flush  ;We are not, flush buffer
   269 000009DF 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   270 000009E3 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   271                              <1> .flush:
   272 000009E5 E88AFEFFFF          <1>     call flushAndFreeBuffer
   273 000009EA 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   274                              <1> .skipFlush:
   275                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   276                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   277                              <1>     ; is no longer owned by that File so we mark the owner as none
   278 000009EC 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   279 000009F4 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   280 000009F7 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   281 000009FA 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   282 000009FE 80F902              <1>     cmp cl, fatBuffer
   283 00000A01 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   284 00000A03 7503                <1>     jne .rbNonFATbuffer
   285 00000A05 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   286                              <1> .rbNonFATbuffer:
   287 00000A08 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   288 00000A0B 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   289 00000A0E 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   290 00000A11 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   291 00000A15 C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   292 00000A19 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   293 00000A1E EBA5                <1>     jmp short .rbExitNoFlag
   294                              <1> 
   295                              <1> readSectorBuffer:   ;Internal Linkage
   296                              <1> ;Reads a sector into a built sector buffer
   297                              <1> ;Entry: rdi = Pointer to buffer header
   298                              <1> ;Exit:  CF=NC : Success
   299                              <1> ;       CF=CY : Fail, terminate the request
   300                              <1> ;       rbx pointing to buffer header
   301                              <1> ;First make request to device driver
   302 00000A20 50                  <1>     push rax
   303 00000A21 53                  <1>     push rbx
   304 00000A22 51                  <1>     push rcx
   305 00000A23 52                  <1>     push rdx
   306 00000A24 56                  <1>     push rsi
   307 00000A25 55                  <1>     push rbp
   308                              <1> .rsRequest0:
   309 00000A26 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   310 00000A2B F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   311 00000A2F 7406                <1>     jz .rsRequest1
   312 00000A31 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   313                              <1> .rsRequest1:
   314 00000A37 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   315 00000A3A B901000000          <1>     mov ecx, 1  ;One sector to copy
   316 00000A3F 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   317 00000A43 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   318 00000A47 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   319 00000A4B E8452A0000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   320 00000A50 E8E4280000          <1>     call absDiskDriverCall    ;Make Driver Request
   321 00000A55 7508                <1>     jnz .rsFail
   322                              <1> .rsExit:
   323 00000A57 F8                  <1>     clc
   324                              <1> .rsExitFail:
   325 00000A58 5D                  <1>     pop rbp
   326 00000A59 5E                  <1>     pop rsi
   327 00000A5A 5A                  <1>     pop rdx
   328 00000A5B 59                  <1>     pop rcx
   329 00000A5C 5B                  <1>     pop rbx
   330 00000A5D 58                  <1>     pop rax
   331                              <1>     return
    18                              <2> %%_ret:
    19 00000A5E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   332                              <1> .rsFail:
   333                              <1> ;Enter here only if the request failed
   334 00000A5F FFCE                <1>     dec esi
   335 00000A61 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   336                              <1> ;Request failed thrice, critical error call
   337                              <1> ;First free the buffer if we failed to read data into it 
   338 00000A63 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   339 00000A67 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   340 00000A6D C605(C9C30300)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   341 00000A74 E81B260000          <1>     call diskDevErr
   342 00000A79 3C01                <1>     cmp al, critRetry
   343 00000A7B 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   344 00000A7D 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   345 00000A81 EBA3                <1>     jmp short .rsRequest0
   346                              <1> .fail:
   347 00000A83 F9                  <1>     stc ;Set error flag to indicate fail
   348 00000A84 E9CFFFFFFF          <1>     jmp .rsExitFail
   349                              <1>     
   350                              <1> findLRUBuffer: ;Internal Linkage
   351                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   352                              <1> ; in rbx and the currBuff variable
   353                              <1> ;Input: Nothing
   354                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   355                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   356 00000A89 52                  <1>     push rdx
   357 00000A8A 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   358 00000A91 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   359 00000A95 7436                <1>     je .flbExit 
   360 00000A97 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   361 00000A9E 742D                <1>     je .flbExit
   362                              <1> .flbWalk:
   363 00000AA0 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   364 00000AA3 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   365 00000AA6 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   366 00000AAA 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   367 00000AAC 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   368 00000AB3 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   369 00000AB5 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   370                              <1> .flbHeadLink:
   371 00000ABC 488B15(55C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   372 00000AC3 48893D(55C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   373 00000ACA 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   374                              <1> .flbExit:
   375 00000ACD 5A                  <1>     pop rdx
   376 00000ACE 48893D(8BC60300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   377                              <1>     return
    18                              <2> %%_ret:
    19 00000AD5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   378                              <1> .flbFreeLink:
   379 00000AD6 51                  <1>     push rcx
   380 00000AD7 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   381 00000ADA 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   382 00000ADD 59                  <1>     pop rcx
   383 00000ADE EBDC                <1>     jmp short .flbHeadLink
   384                              <1> 
   385                              <1> findSectorInBuffer:     ;Internal linkage
   386                              <1> ;Finds the Buffer for a sector
   387                              <1> ;If the sector is not in a buffer, returns with a -1
   388                              <1> ;Input: rax = Sector number
   389                              <1> ;        dl = Drive number
   390                              <1> ;Output: rdi = Buffer hdr pointer or -1
   391 00000AE0 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   392                              <1> .fsiCheckBuffer:
   393 00000AE7 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   394 00000AEA 7507                <1>     jne .fsiGotoNextBuffer
   395 00000AEC 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   396 00000AF0 7501                <1>     jne .fsiGotoNextBuffer
   397                              <1> .fsiExit:
   398                              <1>     return
    18                              <2> %%_ret:
    19 00000AF2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   399                              <1> .fsiGotoNextBuffer:
   400 00000AF3 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   401 00000AF6 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   402 00000AFD 74F3                <1>     je .fsiExit
   403 00000AFF EBE6                <1>     jmp short .fsiCheckBuffer
   404                              <1> ;-----------------------------------------------------------------------------
   405                              <1> ;SPECIAL BUFFER FUNCTIONS
   406                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   407                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   408                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   409                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   410                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   411                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   412                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   413                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   414                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   415                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   416                              <1> ;-----------------------------------------------------------------------------
   417                              <1> getBufForFat:
   418                              <1> ;Returns a buffer to use for fat data in rbx
   419                              <1> ;Input: [workingDPB] = DPB to transact on
   420                              <1> ;       rax = Sector to transfer
   421                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   422 00000B01 51                  <1>     push rcx
   423 00000B02 B102                <1>     mov cl, fatBuffer
   424 00000B04 EB03                <1>     jmp short getBufCommon2
   425                              <1> getBufForDOS:
   426                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   427                              <1> ;Input: [workingDPB] = DPB to transact on
   428                              <1> ;       rax = Sector to transfer
   429                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   430 00000B06 51                  <1>     push rcx
   431 00000B07 B101                <1>     mov cl, dosBuffer
   432                              <1> getBufCommon2:
   433 00000B09 56                  <1>     push rsi
   434 00000B0A 57                  <1>     push rdi    ;Push rdi to preserve it
   435 00000B0B 488B35(61C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   436 00000B12 EB15                <1>     jmp short getBufCommon.makeReq
   437                              <1> getBufForDir:
   438                              <1> ;Returns a buffer to use for disk directory data in rbx
   439                              <1> ;Input: [currentSFT] = File to manipulate
   440                              <1> ;       rax = Sector to transfer
   441                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   442 00000B14 51                  <1>     push rcx
   443 00000B15 B104                <1>     mov cl, dirBuffer
   444 00000B17 EB03                <1>     jmp short getBufCommon
   445                              <1> getBufForData:
   446                              <1> ;Returns a buffer to use for disk data in rbx
   447                              <1> ;Requires a File Handle.
   448                              <1> ;Input: [currentSFT] = File to manipulate
   449                              <1> ;       rax = Sector to transfer
   450                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   451 00000B19 51                  <1>     push rcx
   452 00000B1A B108                <1>     mov cl, dataBuffer
   453                              <1> getBufCommon:
   454 00000B1C 56                  <1>     push rsi
   455 00000B1D 57                  <1>     push rdi
   456 00000B1E 488B3D(81C60300)    <1>     mov rdi, qword [currentSFT]
   457 00000B25 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   458                              <1> .makeReq:
   459 00000B29 E876FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   460 00000B2E 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   461                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   462                              <1>     ; flushed to the file!
   463                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   464                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   465                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   466 00000B30 F6C103              <1>     test cl, dosBuffer | fatBuffer
   467 00000B33 7504                <1>     jnz .exit
   468 00000B35 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   469                              <1> .exit:
   470 00000B39 5F                  <1>     pop rdi
   471 00000B3A 5E                  <1>     pop rsi
   472 00000B3B 59                  <1>     pop rcx
   473                              <1>     return
    18                              <2> %%_ret:
    19 00000B3C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   474                              <1> 
   475                              <1> flushFile:
   476                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   477                              <1> ; FAT/DOS buffers to flush
   478                              <1> ; We flush and free, and set to head of chain before continuing to search
   479                              <1> ;Input: rdi = is the file (sft) we wish to flush
   480                              <1> ;Output: CF=NC => All ok
   481                              <1> ;        CF=CY => A sector failed, exit. 
   482 00000B3D 57                  <1>     push rdi
   483 00000B3E 56                  <1>     push rsi
   484                              <1>     ;First check if the file has been written to?
   485 00000B3F 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   486 00000B45 742A                <1>     jz .exitNoFlush ;Exit without flushing
   487 00000B47 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   488 00000B4A 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   489                              <1> .ffLoop:
   490 00000B51 4881FFFFFFFFFF      <1>     cmp rdi, -1
   491 00000B58 7411                <1>     je .exit
   492 00000B5A F6470903            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer
   493 00000B5E 7514                <1>     jnz .found  ;Flush if either bit is set
   494 00000B60 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   495 00000B64 740E                <1>     je .found
   496 00000B66 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   497 00000B69 EBE6                <1>     jmp short .ffLoop
   498                              <1> .exit:
   499                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   500 00000B6B 66816605BFFF        <1>     and word [rsi + sft.wDeviceInfo], ~blokFileToFlush  ;Clear that bit!
   501                              <1> .exitNoFlush:
   502 00000B71 5E                  <1>     pop rsi
   503 00000B72 5F                  <1>     pop rdi
   504                              <1>     return
    18                              <2> %%_ret:
    19 00000B73 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   505                              <1> .found:
   506                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   507                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   508 00000B74 E8FBFCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   509 00000B79 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   510                              <1>     ;If the sector has been successfully flushed, then it
   511                              <1>     ; is no longer owned by that File so we mark the owner as none
   512 00000B7B 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   513 00000B83 E814FDFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   514 00000B88 EBC7                <1>     jmp short .ffLoop
    22                                  %include "./Source/Kernel/FAT/fat.asm"
    23                              <1> ;-----------------------------------:
    24                              <1> ;       File System routines        :
    25                              <1> ;-----------------------------------:
    26                              <1> getFATtype:
    27                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    28                              <1> ;Entry: rbp = DPB to ascertain FAT
    29                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    30 00000B8A 53                  <1>     push rbx
    31 00000B8B 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    32 00000B8E B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    33 00000B93 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    34 00000B99 730F                <1>     jae .exit
    35 00000B9B FFC9                <1>     dec ecx     ;FAT 12 marker
    36 00000B9D 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    37 00000BA3 7205                <1>     jb .exit
    38 00000BA5 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    39                              <1> .exit:
    40 00000BAA 5B                  <1>     pop rbx
    41                              <1>     return
    18                              <2> %%_ret:
    19 00000BAB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> clust2FATEntry:
    44                              <1> ;Converts a cluster number to a offset in the FAT
    45                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    46                              <1> ;        eax = Cluster number to look for
    47                              <1> ;Exit:   eax = Sector on disk of FAT 
    48                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    49                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    50 00000BAC 53                  <1>     push rbx
    51 00000BAD 55                  <1>     push rbp
    52 00000BAE 488B2D(61C60300)    <1>     mov rbp, qword [workingDPB]
    53 00000BB5 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    54 00000BB8 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    55 00000BBE 731E                <1>     jae .fat32
    56 00000BC0 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    57 00000BC6 7209                <1>     jb .fat12
    58                              <1> ;FAT16
    59 00000BC8 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    60 00000BCA 6801000000          <1>     push qword 1
    61 00000BCF EB15                <1>     jmp short .common
    62                              <1> .fat12:
    63 00000BD1 89C1                <1>     mov ecx, eax    ;ecx = eax
    64 00000BD3 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    65 00000BD5 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    66 00000BD7 6800000000          <1>     push qword 0
    67 00000BDC EB08                <1>     jmp short .common
    68                              <1> .fat32:
    69 00000BDE 6802000000          <1>     push qword 2
    70 00000BE3 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    71                              <1> .common:
    72                              <1> ;eax has the FAToffset
    73 00000BE6 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    74 00000BEA 31D2                <1>     xor edx, edx    ;edx = 0
    75 00000BEC F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    76 00000BEE 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    77 00000BF2 01D8                <1>     add eax, ebx
    78 00000BF4 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    79 00000BF5 5D                  <1>     pop rbp
    80 00000BF6 5B                  <1>     pop rbx
    81                              <1>     return
    18                              <2> %%_ret:
    19 00000BF7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    82                              <1> 
    83                              <1> getStartSectorOfCluster:
    84                              <1> ;Input: eax = Cluster Number
    85                              <1> ;       rbp = dpb pointer
    86                              <1> ;Output: rax = Starting Sector number for cluster
    87                              <1> ;Gives the data sector we are at in the current cluster
    88                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    89 00000BF8 51                  <1>     push rcx
    90 00000BF9 09C0                <1>     or eax, eax ;Zero upper dword
    91 00000BFB 482D02000000        <1>     sub rax, 2
    92 00000C01 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    93 00000C04 48D3E0              <1>     shl rax, cl
    94 00000C07 31C9                <1>     xor ecx, ecx
    95 00000C09 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    96 00000C0C 4801C8              <1>     add rax, rcx
    97                              <1>     ;rax now has the first sector of the current cluster
    98 00000C0F 59                  <1>     pop rcx
    99                              <1>     return
    18                              <2> %%_ret:
    19 00000C10 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   100                              <1> 
   101                              <1> findFreeClusterData:
   102                              <1> ;Walks the FAT to find a free cluster and returns the 
   103                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   104                              <1> ;Also finds NumberOfFreeCLusters. Both fields get filled in the workingDPB
   105                              <1> ;Works on the workingDPB
   106                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   107 00000C11 53                  <1>     push rbx
   108 00000C12 52                  <1>     push rdx
   109 00000C13 55                  <1>     push rbp
   110 00000C14 488B2D(61C60300)    <1>     mov rbp, qword [workingDPB]
   111 00000C1B 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   112 00000C1F 488905(93C60300)    <1>     mov qword [tempSect], rax   ;Save the sector number temporarily
   113                              <1>     ;Mark dFirstFreeCluster as -1 and dNumberOfFreeClusters as 0
   114 00000C26 31D2                <1>     xor edx, edx
   115 00000C28 895531              <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], edx ;Zero this field
   116 00000C2B FFCA                <1>     dec edx
   117 00000C2D 89552D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], edx ;Set to -1, unknown (i.e. none)
   118                              <1>     ;Use WALKFAT
   119                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   120                              <1>     ;If WALKFAT returns 0 then its a free cluster
   121 00000C30 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   122 00000C35 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   123                              <1> .fatLoop:
   124 00000C38 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   125 00000C3A E87D000000          <1>     call walkFAT
   126 00000C3F 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   127 00000C41 85C0                <1>     test eax, eax   ;Is this cluster free?
   128 00000C43 750C                <1>     jne .fatProceed
   129 00000C45 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   130 00000C48 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   131 00000C4F 7410                <1>     je .fatFirst
   132                              <1> .fatProceed:
   133 00000C51 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   134 00000C55 39D0                <1>     cmp eax, edx
   135 00000C57 76DF                <1>     jbe .fatLoop
   136                              <1> .exit:
   137 00000C59 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   138 00000C5C F8                  <1>     clc
   139                              <1> .exitFail:      ;Keep carry flag
   140 00000C5D 5D                  <1>     pop rbp
   141 00000C5E 5A                  <1>     pop rdx
   142 00000C5F 5B                  <1>     pop rbx
   143                              <1>     return
    18                              <2> %%_ret:
    19 00000C60 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> .fatFirst:
   145 00000C61 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   146 00000C64 EBEB                <1>     jmp short .fatProceed
   147                              <1> 
   148                              <1> getNextSectorOfFile:
   149                              <1> ;This function will read the next sector for a file into a buffer.
   150                              <1> ;If the next sector to be read lives in the next cluster, it will update
   151                              <1> ; the vars appropriately
   152                              <1> ;
   153                              <1> ;Input: rbp = dpb pointer
   154                              <1> ;Output:
   155                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   156                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   157                              <1> ;       CF=CY => Critical error occurred and was FAILed
   158                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   159                              <1> ; next cluster and read first sector 
   160                              <1>     ;Check if we need to go to next cluster
   161 00000C66 8A05(A9C60300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   162 00000C6C 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   163 00000C6F 7416                <1>     je .gotoNextCluster
   164                              <1>     ;Goto next sector in same cluster
   165 00000C71 FE05(A9C60300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   166 00000C77 48FF05(AAC60300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   167 00000C7E 488B05(AAC60300)    <1>     mov rax, qword [currSectD]
   168                              <1> .exitOK:
   169 00000C85 F8                  <1>     clc
   170                              <1> .exitFail:
   171                              <1>     return
    18                              <2> %%_ret:
    19 00000C86 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   172                              <1> .gotoNextCluster:
   173 00000C87 8B05(A1C60300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   174 00000C8D E82A000000          <1>     call walkFAT
   175 00000C92 72F2                <1>     jc .exitFail
   176                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   177 00000C94 3DFFFFFFFF          <1>     cmp eax, -1
   178 00000C99 74EA                <1>     je .exitOK
   179                              <1> ;Update the new cluster and sector information
   180 00000C9B 8905(A1C60300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   181 00000CA1 FF05(9DC60300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   182 00000CA7 E84CFFFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   183 00000CAC 488905(AAC60300)    <1>     mov qword [currSectD], rax  ;Save it
   184 00000CB3 C605(A9C60300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   185 00000CBA EBC9                <1>     jmp short .exitOK
   186                              <1> 
   187                              <1> 
   188                              <1> walkFAT:
   189                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   190                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   191                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   192                              <1> ;       rbp = DPB
   193                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   194                              <1> ;If carry set, getBuffer failed!
   195 00000CBC 53                  <1>     push rbx
   196 00000CBD 51                  <1>     push rcx
   197 00000CBE 52                  <1>     push rdx
   198 00000CBF 57                  <1>     push rdi
   199 00000CC0 55                  <1>     push rbp
   200 00000CC1 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   201 00000CC3 E8E4FEFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   202                              <1>     ;and FAT type in ecx
   203 00000CC8 E834FEFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   204 00000CCD 7237                <1>     jc .exitFail
   205                              <1>     ;Check if FAT 12, 16, 32
   206 00000CCF 85C9                <1>     test ecx, ecx
   207 00000CD1 743E                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   208 00000CD3 F7C101000000        <1>     test ecx, 1
   209 00000CD9 7413                <1>     jz .goToNextClusterFat32
   210                              <1>     ;Here we handle FAT16
   211 00000CDB 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   212 00000CE0 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   213 00000CE5 721E                <1>     jb .exit
   214 00000CE7 B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   215 00000CEC EB17                <1>     jmp short .exit
   216                              <1> .goToNextClusterFat32:
   217 00000CEE 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   218 00000CF2 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   219 00000CF7 7207                <1>     jb .validCluster32   
   220 00000CF9 B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   221 00000CFE EB05                <1>     jmp short .exit
   222                              <1> .validCluster32:
   223 00000D00 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   224                              <1> .exit:
   225 00000D05 F8                  <1>     clc
   226                              <1> .exitFail:
   227 00000D06 E87AFCFFFF          <1>     call setBufferReferenced    ;We are done with the disk buffer
   228 00000D0B 5D                  <1>     pop rbp
   229 00000D0C 5F                  <1>     pop rdi
   230 00000D0D 5A                  <1>     pop rdx
   231 00000D0E 59                  <1>     pop rcx
   232 00000D0F 5B                  <1>     pop rbx
   233                              <1>     return
    18                              <2> %%_ret:
    19 00000D10 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   234                              <1> .gotoNextClusterFat12:
   235                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   236                              <1> ;eax has the sector number of the FAT
   237                              <1> ;edx has byte offset into the sector
   238                              <1> ;edi has current cluster number
   239                              <1> ;rbx has ptr to buffer header
   240 00000D11 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   241 00000D17 7431                <1>     jz .gotoNextClusterFat12Even
   242                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   243 00000D19 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   244 00000D1D 29D1                <1>     sub ecx, edx
   245 00000D1F FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   246 00000D21 751D                <1>     jnz .gotoNextClusterFat12NoCross
   247                              <1>     ;Boundary cross, build entry properly
   248 00000D23 E85DFCFFFF          <1>     call setBufferReferenced  ;We are done with the current buffer
   249 00000D28 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   250 00000D2D FFC0                <1>     inc eax ;Get next FAT sector
   251 00000D2F 53                  <1>     push rbx
   252 00000D30 E8CCFDFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   253 00000D35 72CF                <1>     jc .exitFail
   254 00000D37 58                  <1>     pop rax ;Get bl in al, the last entry from the previous buffer
   255 00000D38 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   256 00000D3B C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   257 00000D3E EB14                <1>     jmp short .checkIfLastFAT12Cluster
   258                              <1> .gotoNextClusterFat12NoCross:
   259 00000D40 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   260 00000D45 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   261 00000D48 EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   262                              <1> .gotoNextClusterFat12Even:
   263                              <1>     ;Here the cluster is even and can't cross a sector boundary
   264 00000D4A 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   265 00000D4F 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   266                              <1> .checkIfLastFAT12Cluster:
   267 00000D54 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   268 00000D59 72AA                <1>     jb .exit         ;If so, exit with it in eax
   269 00000D5B B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   270 00000D60 E9A0FFFFFF          <1>     jmp .exit
    23                                  %include "./Source/Kernel/FAT/findfile.asm"
    24                              <1> ;Generic Find First and Find Next functions here
    25                              <1> 
    26                              <1> searchMoreDir:
    27                              <1> ;------------------------NOT READY TO BE USED YET------------------------
    28                              <1> ;
    29                              <1> ;Called in a level 1 critical section. 
    30                              <1> ;The three directory variables are set up from the ffblock. 
    31                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    32                              <1> ;Current DTA is also used to contain the ff block address
    33                              <1> ;All registers can be trashed
    34                              <1> ;
    35                              <1> ;------------------------------------------------------------------------
    36 00000D65 488B2D(61C60300)    <1>     mov rbp, qword [workingDPB]
    37                              <1>     ;First setup dirClustA and dirSect vars
    38 00000D6C 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
    39 00000D73 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    40 00000D76 8905(D0C60300)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    41 00000D7C 8905(CCC60300)      <1>     mov dword [dirClustPar], eax
    42                              <1>     ;Get number of 32 byte entries in a sector
    43 00000D82 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    44                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    45 00000D85 C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    46                              <1>     ;Now get bytes per cluster
    47 00000D88 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    48 00000D8A 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    49 00000D8E 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    50 00000D92 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    51 00000D94 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    52 00000D96 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    53 00000D98 31D2                <1>     xor edx, edx
    54 00000D9A F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    55                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    56                              <1>     ;edx has offset into that cluster (needs to be divded by bytesPerSector)
    57                              <1> 
    58                              <1> 
    59                              <1>     
    60 00000D9C 8B05(D0C60300)      <1>     mov eax, dword [dirClustA]
    61 00000DA2 85C0                <1>     test eax, eax
    62 00000DA4 7514                <1>     jnz .clusters
    63                              <1> ;Old FAT 12/16 root dirs fall thru here only
    64 00000DA6 488D0506010000      <1>     lea rax, searchDir.oldNextEP
    65 00000DAD 50                  <1>     push rax    ;Push return address onto the stack
    66 00000DAE 0FB705(D4C60300)    <1>     movzx eax, word [dirSect]   ;Get the root directory sector offset
    67 00000DB5 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
    68 00000DB8 EB1D                <1>     jmp short .common
    69                              <1> .clusters:
    70 00000DBA 488D0572000000      <1>     lea rax, searchDir.nextEp
    71 00000DC1 50                  <1>     push rax    ;Push the return address onto stack
    72 00000DC2 8B05(D0C60300)      <1>     mov eax, dword [dirClustA]
    73 00000DC8 E82BFEFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
    74 00000DCD 0FB71D(D4C60300)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
    75 00000DD4 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
    76                              <1> .common:
    77 00000DD7 E82AFDFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
    78 00000DDC 0F82EF000000        <1>     jc searchDir.hardError
    79 00000DE2 E8ED000000          <1>     call searchDir.setupBuffer  ;rbx has the buffer ptr for this dir sector
    80 00000DE7 8B05(D6C60300)      <1>     mov eax, dword [dirEntry]
    81 00000DED 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
    82 00000DEF C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
    83 00000DF2 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
    84                              <1>     ;We continue AS IF this entry was bad
    85                              <1>     ;Now setup al and rdi as upon normal entry 
    86 00000DF5 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get FFBlock buffer to use in rdi
    87 00000DFC 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib]  ;Get the search attrib
    88 00000DFF E913010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within findInBuffer
    89                              <1>     ;The return address on the stack will return to the ep's pushed
    90                              <1> 
    91                              <1> searchDir:
    92                              <1> ;Called in a level 1 critical section. 
    93                              <1> ;The three directory variables are set and the ffblock is setup
    94                              <1> ; with template, drive number and attribute fields. 
    95                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    96                              <1> ;Current DTA is also used to contain the ff block address
    97                              <1> ;All registers can be trashed
    98                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
    99 00000E04 488B2D(61C60300)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   100 00000E0B 8B05(D0C60300)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   101 00000E11 85C0                <1>     test eax, eax
   102 00000E13 0F847F000000        <1>     jz .oldRoot
   103 00000E19 E8DAFDFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   104                              <1> .sectorLoop:
   105 00000E1E E8E3FCFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   106 00000E23 0F82A8000000        <1>     jc .hardError
   107 00000E29 E8A6000000          <1>     call .setupBuffer       ;rbx has the buffer pointer for this dir sector
   108 00000E2E E8B1000000          <1>     call findInBuffer
   109                              <1> .nextEp:
   110                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00000E33 7201                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00000E35 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   111                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   112                              <1>     ;IF however, the next cluster is -1, then we return fail
   113 00000E36 8B05(D0C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   114 00000E3C 8905(A1C60300)      <1>     mov dword [currClustD], eax
   115 00000E42 668B05(D4C60300)    <1>     mov ax, word [dirSect]
   116 00000E49 8805(A9C60300)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   117 00000E4F 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   118 00000E53 488905(AAC60300)    <1>     mov qword [currSectD], rax  
   119 00000E5A C705(9DC60300)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   119 00000E62 0000                <1>
   120 00000E64 E8FDFDFFFF          <1>     call getNextSectorOfFile
   121 00000E69 7266                <1>     jc .hardError
   122 00000E6B 483DFFFFFFFF        <1>     cmp rax, -1
   123 00000E71 745A                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   124 00000E73 66FF05(D4C60300)    <1>     inc word [dirSect]  ;Goto next sector
   125 00000E7A 8B05(D0C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   126 00000E80 3B05(A1C60300)      <1>     cmp eax, dword [currClustD] ;Did it change?
   127 00000E86 7496                <1>     je .sectorLoop  ;If not, we advanced sectors only
   128 00000E88 66C705(D4C60300)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   128 00000E90 00                  <1>
   129 00000E91 E8EFFAFFFF          <1>     call setBufferReferenced    ;We are done with the current buffer
   130 00000E96 EB86                <1>     jmp short .sectorLoop 
   131                              <1> 
   132                              <1> .oldRoot:
   133                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   134                              <1> ; one large contiguous cluster.
   135                              <1> ;   ecx = Number of entries per sector
   136                              <1> .oldSectorLp:
   137 00000E98 0FB705(D4C60300)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   138 00000E9F 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   139 00000EA2 E85FFCFFFF          <1>     call getBufForDOS
   140 00000EA7 7228                <1>     jc .hardError
   141 00000EA9 E826000000          <1>     call .setupBuffer       ;rbx has the buffer pointer for this dir sector
   142 00000EAE E831000000          <1>     call findInBuffer
   143                              <1> .oldNextEP:
   144                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000EB3 7380                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   145 00000EB5 66FF05(D4C60300)    <1>     inc word [dirSect]  ;Goto next sector in directory
   146 00000EBC 8B4509              <1>     mov eax, dword [rbp + dpb.wNumberRootDirEntries]
   147 00000EBF 663905(D6C60300)    <1>     cmp word [dirEntry], ax ;Have we reached the last dir entry?
   148 00000EC6 E8BAFAFFFF          <1>     call setBufferReferenced    ;We are done with this buffer
   149 00000ECB 72CB                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   150                              <1> .fnfError:
   151 00000ECD B012                <1>     mov al, errNoFil
   152 00000ECF F9                  <1>     stc
   153                              <1>     return
    18                              <2> %%_ret:
    19 00000ED0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   154                              <1> .hardError:
   155 00000ED1 B0FF                <1>     mov al, -1
   156                              <1>     return
    18                              <2> %%_ret:
    19 00000ED3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   157                              <1> .setupBuffer:
   158 00000ED4 C6430904            <1>     mov byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   159 00000ED8 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   160 00000EDC 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   161 00000EE0 C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   162                              <1>     return
    18                              <2> %%_ret:
    19 00000EE3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> findInBuffer:
   165                              <1> ;Input: ecx = Number of entries in sector buffer to look for
   166                              <1> ;       rsi = Sector buffer data area
   167                              <1> ;Output: CF=CY => No entries found
   168                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   169 00000EE4 8A05(56C60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   170 00000EEA E8C9000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   171                              <1> .searchMainLp:
   172 00000EEF 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   173 00000EF2 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   174 00000EF5 803D(CAC30300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   175 00000EFC 742C                <1>     je .exclusiveDir
   176 00000EFE 80FC08              <1>     cmp ah, dirVolumeID
   177 00000F01 742E                <1>     je .volFile
   178 00000F03 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   179 00000F05 7710                <1>     ja .nextEntry
   180                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   181                              <1>     ;rdi points to the ffBlock to use
   182                              <1> .scanName:
   183 00000F07 56                  <1>     push rsi
   184 00000F08 488D3D(DBC50300)    <1>     lea rdi, fcbName ;Goto name template to search for
   185 00000F0F E88C000000          <1>     call .nameCompare
   186 00000F14 5E                  <1>     pop rsi
   187 00000F15 7420                <1>     je .searchEntryFound
   188                              <1> .nextEntry:
   189                              <1> ;Go to next entry
   190 00000F17 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   191 00000F1E FF05(D6C60300)      <1>     inc dword [dirEntry] ;And denote that in variable
   192 00000F24 FFC9                <1>     dec ecx
   193 00000F26 75C7                <1>     jnz .searchMainLp
   194 00000F28 F9                  <1>     stc
   195                              <1>     return
    18                              <2> %%_ret:
    19 00000F29 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   196                              <1> .exclusiveDir:
   197                              <1> ;Used when going down a path, dir bit simply need be set
   198 00000F2A F6C410              <1>     test ah, dirDirectory
   199 00000F2D 75D8                <1>     jnz .scanName
   200 00000F2F EBE6                <1>     jmp short .nextEntry
   201                              <1> 
   202                              <1> .volFile:
   203 00000F31 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   204 00000F33 74D2                <1>     je .scanName       ;If so, scan the name agrees
   205 00000F35 EBE0                <1>     jmp short .nextEntry    ;Else, goto next entry
   206                              <1> 
   207                              <1> .searchEntryFound:
   208                              <1> ;Here a good entry was found!
   209 00000F37 57                  <1>     push rdi
   210 00000F38 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   211 00000F3A 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   212 00000F41 B904000000          <1>     mov ecx, 32/8
   213 00000F46 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   214 00000F49 5F                  <1>     pop rdi
   215                              <1>     ;Now fill in the rest of the ffBlock IF this is a file.
   216                              <1>     ;rdi points to ffblock start
   217 00000F4A 803D(CAC30300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   218 00000F51 744B                <1>     je .skipFF  ;If yes, skip filling in the rest of the FF block
   219 00000F53 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get FFBlock buffer to use in rdi
   220 00000F5A 88D8                <1>     mov al, bl  ;Get the search attributes into al
   221 00000F5C E8F1000000          <1>     call setupFFBlock
   222 00000F61 8B05(D6C60300)      <1>     mov eax, dword [dirEntry]
   223 00000F67 89470D              <1>     mov dword [rdi + ffBlock.dirOffset], eax
   224 00000F6A 8B05(CCC60300)      <1>     mov eax, dword [dirClustPar]
   225 00000F70 894711              <1>     mov dword [rdi + ffBlock.parDirClus], eax
   226 00000F73 8A05(C6C50300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   227 00000F79 884715              <1>     mov byte [rdi + ffBlock.attribFnd], al
   228 00000F7C 8B05(D1C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   229 00000F82 894716              <1>     mov dword [rdi + ffBlock.fileTime], eax
   230 00000F85 8B05(D7C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   231 00000F8B 89471A              <1>     mov dword [rdi + ffBlock.fileSize], eax
   232 00000F8E 488D7F1E            <1>     lea rdi, qword [rdi + ffBlock.asciizName]   ;Goto the name field
   233 00000F92 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   234 00000F99 E874000000          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   235                              <1> .skipFF:
   236 00000F9E F8                  <1>     clc
   237                              <1>     return
    18                              <2> %%_ret:
    19 00000F9F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   238                              <1> .nameCompare:
   239                              <1> ;Input: rsi = source string
   240                              <1> ;       rdi = string template to compare against
   241                              <1> ;Output: ZF=ZE => Strings are ok
   242                              <1> ;        ZF=NZ => Strings not ok
   243                              <1> ;Accepts wildcards. Trashes al
   244 00000FA0 51                  <1>     push rcx
   245 00000FA1 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   246                              <1> .ncLp:
   247 00000FA3 81F90B000000        <1>     cmp ecx, 11
   248 00000FA9 740B                <1>     je .ncExit
   249 00000FAB FFC1                <1>     inc ecx
   250 00000FAD A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   251 00000FAE 74F3                <1>     je .ncLp    ;If equal, keep going
   252 00000FB0 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   253 00000FB4 74ED                <1>     je .ncLp
   254                              <1> .ncExit:
   255 00000FB6 59                  <1>     pop rcx
   256                              <1>     return
    18                              <2> %%_ret:
    19 00000FB7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> adjustSearchAttr:
   259                              <1> ;Converts the byte to a system only if the bit is set
   260                              <1> ;Input: eax = User selected search mask
   261                              <1> ;Output: eax = Modified search mask
   262 00000FB8 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   263 00000FBD A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   264                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000FC2 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   265 00000FC4 B808000000          <1>     mov eax, dirVolumeID
   266                              <1>     return
    18                              <2> %%_ret:
    19 00000FC9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   267                              <1> 
   268                              <1> asciiToFCB:
   269                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   270                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   271                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   272                              <1> ;Name is space padded.
   273                              <1> ;Input: rsi = ASCII string buffer
   274                              <1> ;       rdi = FCB name buffer
   275                              <1> ;Output: al = Char that terminated the source string 
   276 00000FCA 53                  <1>     push rbx    
   277 00000FCB 57                  <1>     push rdi
   278 00000FCC B90B000000          <1>     mov ecx, 11
   279 00000FD1 B020                <1>     mov al, " "
   280 00000FD3 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   281 00000FD5 5F                  <1>     pop rdi
   282 00000FD6 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   283                              <1> .processName:
   284 00000FD9 AC                  <1>     lodsb   ;Get the char in al
   285 00000FDA E830270000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   286 00000FDF 84C0                <1>     test al, al
   287 00000FE1 742D                <1>     jz .exit
   288                              <1>     ;Test if the char is valid
   289 00000FE3 E8CE270000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   290 00000FE8 7426                <1>     jz .exit    ;If the char invalid, consider it a terminator
   291 00000FEA 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   292 00000FEC 7407                <1>     je .extSpace
   293 00000FEE 3C2E                <1>     cmp al, "."
   294 00000FF0 740C                <1>     je .ext
   295 00000FF2 AA                  <1>     stosb   ;Store the char
   296 00000FF3 EBE4                <1>     jmp short .processName
   297                              <1> .extSpace:
   298                              <1> ;Now we scan for a period in the name
   299 00000FF5 AC                  <1>     lodsb   ;Get a char and increase rsi
   300 00000FF6 84C0                <1>     test al, al
   301 00000FF8 7416                <1>     jz .exit
   302 00000FFA 3C2E                <1>     cmp al, "."     ;If al is not a period...
   303 00000FFC 75F7                <1>     jne .extSpace   ; keep searching
   304                              <1> .ext:
   305 00000FFE 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   306                              <1> .processExt:
   307 00001002 AC                  <1>     lodsb
   308 00001003 84C0                <1>     test al, al
   309 00001005 7409                <1>     jz .exit
   310 00001007 3C20                <1>     cmp al, " "
   311 00001009 7405                <1>     je .exit
   312 0000100B AA                  <1>     stosb
   313 0000100C EBF4                <1>     jmp short .processExt
   314                              <1> .exitBadChar:
   315 0000100E 30C0                <1>     xor al, al  ;Return a null terminator
   316                              <1> .exit:
   317 00001010 5B                  <1>     pop rbx
   318                              <1>     return
    18                              <2> %%_ret:
    19 00001011 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   319                              <1> 
   320                              <1> FCBToAsciiz:
   321                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   322                              <1> ;Name is space padded too
   323                              <1> ;Input: rsi = FCB name buffer
   324                              <1> ;       rdi = ASCIIZ string buffer
   325 00001012 B908000000          <1>     mov ecx, 8
   326 00001017 F3A4                <1>     rep movsb   ;Move the name over
   327                              <1> .scanNameSpace:
   328 00001019 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   329 0000101D 750D                <1>     jne .ext
   330 0000101F 48FFCF              <1>     dec rdi
   331 00001022 FFC1                <1>     inc ecx
   332 00001024 81F908000000        <1>     cmp ecx, 8
   333 0000102A 72ED                <1>     jb .scanNameSpace
   334                              <1> .ext:
   335 0000102C 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   336 00001031 7506                <1>     jne .validExt
   337 00001033 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   338 00001037 7415                <1>     je .exit
   339                              <1> .validExt:
   340 00001039 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   341 0000103B AA                  <1>     stosb
   342 0000103C B903000000          <1>     mov ecx, 3
   343 00001041 F3A4                <1>     rep movsb   ;Move the three extension chars over
   344                              <1> .scanExtSpace:
   345 00001043 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   346 00001047 7505                <1>     jne .exit
   347 00001049 48FFCF              <1>     dec rdi
   348 0000104C EBF5                <1>     jmp short .scanExtSpace
   349                              <1> .exit:
   350 0000104E 31C0                <1>     xor eax, eax
   351 00001050 AA                  <1>     stosb   ;Store a null at the end
   352                              <1>     return
    18                              <2> %%_ret:
    19 00001051 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   353                              <1> 
   354                              <1> setupFFBlock:
   355                              <1> ;Sets up the find first block for the search
   356                              <1> ;Uses currentDrv and fcbName
   357                              <1> ;Input: al = Search attributes
   358 00001052 50                  <1>     push rax
   359 00001053 53                  <1>     push rbx
   360 00001054 56                  <1>     push rsi
   361 00001055 57                  <1>     push rdi
   362 00001056 488B1D(79C30300)    <1>     mov rbx, qword [currentDTA]
   363 0000105D 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   364 00001060 0FB605(93C30300)    <1>     movzx eax, byte [currentDrv]  ;Get the 0 based current drive number
   365 00001067 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   366 00001069 488D35(DBC50300)    <1>     lea rsi, fcbName
   367 00001070 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   368 00001074 48A5                <1>     movsq   ;Move 8 chars
   369 00001076 66A5                <1>     movsw   ;Move 2 chars
   370 00001078 A4                  <1>     movsb   ;Move the final char
   371 00001079 5F                  <1>     pop rdi
   372 0000107A 5E                  <1>     pop rsi
   373 0000107B 5B                  <1>     pop rbx
   374 0000107C 58                  <1>     pop rax
   375                              <1>     return
    18                              <2> %%_ret:
    19 0000107D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   376                              <1> 
   377                              <1> getDrvLetterFromPath:
   378                              <1> ;Gets the drive letter for the path in al
   379                              <1> ;Input: rsi = Buffer to process
   380                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   381                              <1> ;       ZF=ZE and al = 0 => Null path
   382                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   383                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   384                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   385 0000107E 30C0                <1>     xor al, al
   386 00001080 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   387                              <1>     retz    ;Return if a null path
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001083 74F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   388 00001085 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   389                              <1>     retne   ;If not equal, Relative path or network path
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001089 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   390 0000108B 66AD                <1>     lodsw   ;Get first word, rsi += 2
   391                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   392 0000108D 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   393 0000108F 2C60                <1>     sub al, 60h
   394                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001091 75EA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   395 00001093 B0FF                <1>     mov al, -1  ;Else not a valid drive number
   396                              <1>     return
    18                              <2> %%_ret:
    19 00001095 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   397                              <1> qualifyFileName:
   398                              <1> ;Always trying to build and qualify a full pathname
   399                              <1> ;Does getPath without hitting the disk
   400 00001096 B0FF                <1>     mov al, -1
   401 00001098 8805(CAC30300)      <1>     mov byte [fileDirFlag], al  
   402 0000109E 8805(5BC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   403 000010A4 8805(5EC60300)      <1>     mov byte [filspcExist], al  ;We are searching for a file that exists
   404 000010AA 48893D(7FC50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   405 000010B1 FEC0                <1>     inc al  ;make al = 0
   406 000010B3 8805(8FC50300)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   407 000010B9 EB27                <1>     jmp short getPath.epAlt
   408                              <1> getDirPath:
   409 000010BB 30C0                <1>     xor al, al   ;Set to Directory
   410 000010BD EB02                <1>     jmp short getPath
   411                              <1> getFilePath:
   412 000010BF B0FF                <1>     mov al, -1  ;Set to File
   413                              <1> getPath:
   414                              <1> ;Determines whether the path is spliced or not and transfers the chars
   415                              <1> ; from the user buffer into an internal buffer, normalising them.
   416                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   417                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   418                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   419                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   420                              <1> ; we let it do its thing and return.
   421                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   422                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   423                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   424                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   425                              <1> ; (converted from using machine name by the net client program).
   426                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   427                              <1> ; was good.
   428                              <1> ;Called with:
   429                              <1> ; rdi = SDA Buffer for filename
   430                              <1> ; rsi = Potentially unqualified filename
   431                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   432 000010C1 8805(CAC30300)      <1>     mov byte [fileDirFlag], al  
   433 000010C7 B0FF                <1>     mov al, -1
   434 000010C9 8805(5BC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   435 000010CF 8805(5EC60300)      <1>     mov byte [filspcExist], al  ;We are searching for a file that exists
   436 000010D5 48893D(7FC50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   437 000010DC 8805(8FC50300)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   438                              <1> .epAlt:
   439 000010E2 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   440 000010E9 7423                <1>     jz .notServer
   441                              <1>     ;In this case, the client network program will have correctly
   442                              <1>     ; substituted the drive letter for the path before making the request.
   443                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   444 000010EB E88EFFFFFF          <1>     call getDrvLetterFromPath
   445 000010F0 E882250000          <1>     call getCDS ;Get the cds for the drive letter on the path
   446                              <1>     ;Do nothing for now
   447 000010F5 488B3D(69C60300)    <1>     mov rdi, qword [workingCDS]
   448 000010FC E873280000          <1>     call dosCrit1Enter
   449 00001101 E8A7220000          <1>     call ensureDiskValid
   450 00001106 E873280000          <1>     call dosCrit1Exit
   451                              <1> .serverExit:
   452 0000110B B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   453                              <1>     return
    18                              <2> %%_ret:
    19 0000110D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   454                              <1> .notServer:
   455                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   456 0000110E 48C705(69C60300)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   456 00001116 FFFFFF              <1>
   457 00001119 B823110000          <1>     mov eax, 1123h
   458 0000111E CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   459                              <1>     retnc  ;Return if resolved
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001120 73EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   460 00001122 E857FFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   461 00001127 9C                  <1>     pushfq  ;Save the flag state on stack
   462 00001128 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   463 00001129 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   464 0000112C E8D3250000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   465 00001131 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   466 00001133 E8CC250000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   467 00001138 7525                <1>     jnz .notNet
   468 0000113A 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   469 0000113C 7521                <1>     jne .notNet
   470 0000113E 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   471 0000113F 9D                  <1>     popfq
   472 00001140 66A5                <1>     movsw   ;Tfr the two chars rsi, rdi + 2
   473                              <1> .moveNetChars:
   474 00001142 AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   475 00001143 E8C7250000          <1>     call uppercaseChar  ;Make char in al uppercase
   476 00001148 84C0                <1>     test al, al
   477 0000114A 7411                <1>     jz .netEnd
   478 0000114C E8B3250000          <1>     call swapPathSeparator  ;If path sep, swap it
   479 00001151 4889FB              <1>     mov rbx, rdi    ;Store current buffer offset in rbx
   480 00001154 AA                  <1>     stosb
   481 00001155 75EB                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   482 00001157 E857000000          <1>     call .mainlp    ;Now expand the pathspec portion
   483                              <1>     return
    18                              <2> %%_ret:
    19 0000115C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   484                              <1> .netEnd:
   485 0000115D AA                  <1>     stosb
   486                              <1>     return
    18                              <2> %%_ret:
    19 0000115E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   487                              <1> .notNet:
   488                              <1> ;This is the normal case; paths can be relative, or absolute.
   489 0000115F 58                  <1>     pop rax ;Get the drive letter back
   490 00001160 9D                  <1>     popfq   ;Get the flag state back
   491 00001161 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   492                              <1> .pnfErr:
   493 00001163 B003                <1>     mov al, errPnf  ;Null path error
   494 00001165 F9                  <1>     stc
   495                              <1>     return
    18                              <2> %%_ret:
    19 00001166 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   496                              <1> .notNull:
   497 00001167 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   498 00001169 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   499 0000116B B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   500 0000116D F9                  <1>     stc
   501                              <1>     return
    18                              <2> %%_ret:
    19 0000116E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   502                              <1> .driveOk:
   503 0000116F 84C0                <1>     test al, al
   504 00001171 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   505                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   506 00001173 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   507 00001176 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   508 00001178 50                  <1>     push rax    ;Save the drive letter
   509 00001179 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   510 0000117A 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   511 0000117D E882250000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   512                              <1>     ;If al is a path separator, then this path is absolute.
   513 00001182 58                  <1>     pop rax ;Get back the drive letter
   514 00001183 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   515                              <1> .absoPath:
   516                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   517 00001185 48FFC6              <1>     inc rsi
   518 00001188 EB1A                <1>     jmp short .commonDir
   519                              <1> .curPath:
   520                              <1> ;This is only jumped to if we are relative the current drive
   521                              <1> ;rsi points to first char in path
   522                              <1> ;If this char is \ or /, then it is an absolute path.
   523 0000118A 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   524 00001190 FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   525 00001192 50                  <1>     push rax    ;Save the current drive number
   526 00001193 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   527 00001195 E86A250000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   528 0000119A 58                  <1>     pop rax ;Get back the current drive number
   529 0000119B 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   530                              <1> .relMain:
   531 0000119D C605(5BC60300)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   532                              <1> .commonDir:
   533                              <1> ;rsi points to the start of the string we will be appending
   534 000011A4 E8CB270000          <1>     call dosCrit1Enter
   535 000011A9 E87F000000          <1>     call prepareDirCrit    ;Prepare the dir if the drive is subst/join drive
   536 000011AE 4889FB              <1>     mov rbx, rdi    ;Save a pointer to the first char of the string
   537                              <1>     ;If the user requests to .. to a point before rbx, we fail if a disk
   538                              <1>     ; resolution
   539 000011B1 7254                <1>     jc .badDriveExit
   540                              <1> .mainlp:    ;Now we transfer each directory portion
   541 000011B3 E83D010000          <1>     call copyPathspecCrit  ;Now setup the filename in the FCB name field
   542 000011B8 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   543 000011B9 E8B0030000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   544 000011BE 58                  <1>     pop rax
   545 000011BF 7365                <1>     jnc .deviceFound
   546 000011C1 E803020000          <1>     call searchForPathspecCrit  ;and search the directory
   547 000011C6 7246                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   548 000011C8 E848020000          <1>     call addPathspecToBufferCrit
   549 000011CD 7232                <1>     jc .driveExit   ;If a bad path (somehow I dont see this happening often)
   550 000011CF 84C0                <1>     test al, al ;Exit if this pathspec was a file
   551 000011D1 742E                <1>     jz .driveExit
   552                              <1>     ;Here I have to take the cluster data from the found directory entry
   553                              <1>     ; and setup the search for the next pathspec portion
   554                              <1>     ;Copy necessary data from the current directory copy
   555 000011D3 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   556 000011DA C1E010              <1>     shl eax, 10h    ;Shift it high
   557 000011DD 668B05(D5C50300)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   558                              <1>     ;eax now has the cluster number of the search
   559 000011E4 8905(D0C60300)      <1>     mov dword [dirClustA], eax
   560 000011EA 8905(CCC60300)      <1>     mov dword [dirClustPar], eax
   561 000011F0 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   562 000011F2 8905(D6C60300)      <1>     mov dword [dirEntry], eax
   563 000011F8 668905(D4C60300)    <1>     mov word [dirSect], ax
   564 000011FF EBB2                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   565                              <1> .driveExit:
   566 00001201 E878270000          <1>     call dosCrit1Exit
   567                              <1>     return
    18                              <2> %%_ret:
    19 00001206 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   568                              <1> .badDriveExit:
   569 00001207 B812000000          <1>     mov eax, errNoFil ;No file for that spec found
   570 0000120C EBF3                <1>     jmp short .driveExit
   571                              <1> .checkDev:
   572                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   573                              <1> ; we are in \DEV dir
   574 0000120E F605(CBC30300)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   575 00001215 7513                <1>     jnz .nodev  ;If any bits set, ignore this check
   576 00001217 3C12                <1>     cmp al, errNoFil   ;Only make this check if the file was not found
   577 00001219 750F                <1>     jne .nodev
   578                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   579 0000121B 56                  <1>     push rsi
   580 0000121C 57                  <1>     push rdi
   581 0000121D E859020000          <1>     call checkDevPath
   582 00001222 5F                  <1>     pop rdi
   583 00001223 5E                  <1>     pop rsi
   584 00001224 72DB                <1>     jc .driveExit   ;IF CF=CY, exit bad, with error code in eax
   585                              <1> .deviceFound:
   586 00001226 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   587 00001228 EBD7                <1>     jmp short .driveExit     ;If CF=CY, exit Char File found
   588                              <1> .nodev:
   589 0000122A F9                  <1>     stc
   590 0000122B EBD4                <1>     jmp short .driveExit
   591                              <1> prepareDirCrit:
   592                              <1> ;Used to transfer the current directory if it is necessary.
   593                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   594                              <1> ; relative
   595                              <1> ;Input: al = 1-based drive letter
   596                              <1> ;Output: rdi = Pointing at where to place chars from source string
   597                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   598 0000122D 56                  <1>     push rsi
   599 0000122E E8DB230000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   600 00001233 7258                <1>     jc .badDriveExit    ;If the drive number in al is too great or drive invalid
   601 00001235 488B3D(69C60300)    <1>     mov rdi, qword [workingCDS] 
   602 0000123C 57                  <1>     push rdi    ;Push CDS pointer on stack...
   603 0000123D E81C210000          <1>     call getDiskDPB  ;Update the working DPB ptr before searching, dpbptr in rbp
   604 00001242 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   605 00001243 488B3D(7FC50300)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   606                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   607                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   608                              <1>     ;   terminating char (\, / or Null)
   609                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   610                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   611 0000124A 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   612 00001250 753D                <1>     jnz .prepDirJoin
   613 00001252 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   614 00001258 7556                <1>     jnz .prepDirSubst
   615                              <1> .prepMain:
   616                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   617 0000125A F605(5BC60300)FF    <1>     test byte [spliceFlag], -1
   618 00001261 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   619                              <1>     ;Else we copy the first two chars only (X:)
   620 00001263 66A5                <1>     movsw  
   621 00001265 B05C                <1>     mov al, "\"
   622 00001267 AA                  <1>     stosb   ;Store the path separator and increment rdi
   623 00001268 31C0                <1>     xor eax, eax    ;Get cluster 0
   624 0000126A EB1B                <1>     jmp short .prepDirExitSkip
   625                              <1> .prepLoop:
   626 0000126C AC                  <1>     lodsb
   627 0000126D 84C0                <1>     test al, al ;If al was null, then we stop
   628 0000126F 7403                <1>     jz .prepDirExit
   629 00001271 AA                  <1>     stosb
   630 00001272 EBF8                <1>     jmp short .prepLoop
   631                              <1> .prepDirExit:
   632 00001274 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   633 00001278 7403                <1>     je .prepDirExitSkipPathsep
   634 0000127A B05C                <1>     mov al, "\"
   635 0000127C AA                  <1>     stosb   ;Store the path separator and increment rdi
   636                              <1> .prepDirExitSkipPathsep:
   637 0000127D 488B35(69C60300)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   638 00001284 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   639                              <1> .prepDirExitSkip:
   640 00001287 E837000000          <1>     call .prepSetupDirSearchVars
   641 0000128C F8                  <1>     clc ;Clear carry before exiting
   642                              <1> .badDriveExit:
   643 0000128D 5E                  <1>     pop rsi
   644                              <1>     return
    18                              <2> %%_ret:
    19 0000128E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   645                              <1> .prepDirJoin:
   646 0000128F 51                  <1>     push rcx
   647 00001290 56                  <1>     push rsi
   648 00001291 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   649 00001298 B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   650                              <1> .prepDirJoin1:
   651 0000129D AC                  <1>     lodsb   ;Get the char
   652 0000129E 84C0                <1>     test al, al ;Null char?
   653 000012A0 740B                <1>     jz .prepDirJoin2
   654 000012A2 E85D240000          <1>     call swapPathSeparator
   655 000012A7 7404                <1>     jz .prepDirJoin2
   656 000012A9 FFC1                <1>     inc ecx ;Accrue length to copy
   657 000012AB EBF0                <1>     jmp short .prepDirJoin1
   658                              <1> .prepDirJoin2:
   659 000012AD 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   660 000012AE EB05                <1>     jmp short .prepDirCopy1
   661                              <1> .prepDirSubst:
   662 000012B0 51                  <1>     push rcx
   663 000012B1 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   664                              <1> .prepDirCopy1:
   665 000012B5 F3A4                <1>     rep movsb   ;Copy the string over
   666 000012B7 59                  <1>     pop rcx
   667 000012B8 F605(5BC60300)FF    <1>     test byte [spliceFlag], -1
   668 000012BF 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   669 000012C1 EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   670                              <1> .prepSetupDirSearchVars:
   671                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   672                              <1> ;       rbp = DPB pointer for the device which will do transaction
   673 000012C3 51                  <1>     push rcx
   674 000012C4 31C9                <1>     xor ecx, ecx
   675 000012C6 66890D(D4C60300)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   676 000012CD 890D(D6C60300)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   677 000012D3 E8B2F8FFFF          <1>     call getFATtype ;Get type of fat
   678 000012D8 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   679 000012DE 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   680                              <1>     ;FAT 32 here
   681 000012E0 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   682 000012E2 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   683 000012E4 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   684                              <1> .psdsvExit:
   685 000012E7 8905(D0C60300)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   686 000012ED 8905(CCC60300)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   687 000012F3 59                  <1>     pop rcx
   688                              <1>     return 
    18                              <2> %%_ret:
    19 000012F4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   689                              <1> 
   690                              <1> copyPathspecCrit:
   691                              <1> ;1) Copies a path portion from the source buffer to the destination
   692                              <1> ;2) Advances rsi to the next null, \ or /
   693                              <1> ;3) Expands all * to ?'s
   694                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   695                              <1> ;    next path separator
   696                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   697                              <1> ;    with rsi moving to path separator
   698                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   699                              <1> ;
   700                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   701                              <1> ;           rdi = Points to where to store it
   702                              <1> ;
   703                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   704                              <1> ;           rdi = First char of next space to store next pathspec
   705                              <1> ;           al = Last char stored (either \ or NULL)
   706                              <1> ;           CF=NC = OK path
   707                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   708                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   709 000012F5 57                  <1>     push rdi    ;Save the pointer into the user buffer
   710 000012F6 C605(EEC30300)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   711 000012FD 488D3D(DBC50300)    <1>     lea rdi, fcbName
   712 00001304 57                  <1>     push rdi
   713 00001305 B903000000          <1>     mov ecx, 3
   714 0000130A B820202020          <1>     mov eax, "    " ;Four spaces
   715 0000130F F3AB                <1>     rep stosd   ;Store 12 spaces
   716 00001311 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   717                              <1> 
   718 00001312 B908000000          <1>     mov ecx, 8 ;8 chars to move over, when ecx = 0, the char must be . or term
   719 00001317 B501                <1>     mov ch, 1   ;Set that we are in name field
   720 00001319 AC                  <1>     lodsb   ;Get first char from user path in al
   721 0000131A 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   722 0000131C 7459                <1>     je .cpsDots
   723 0000131E 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   724                              <1> ;First char is not a dot, so now check if starts with E5h? 
   725                              <1> ;If so, store 05h in its place
   726 00001321 3CE5                <1>     cmp al, 0E5h
   727 00001323 7508                <1>     jne .cpsMainLoop
   728 00001325 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   729 00001328 B005                <1>     mov al, 05h
   730 0000132A AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   731 0000132B FEC9                <1>     dec cl  ;One less char to tfr
   732                              <1> .cpsMainLoop:
   733 0000132D AC                  <1>     lodsb   ;Get the char in al and advance rsi
   734 0000132E 84C0                <1>     test al, al ;Is it the null char?
   735 00001330 0F8489000000        <1>     jz .cpsProcessName  ;If so, terminate immediately
   736 00001336 E8C9230000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   737 0000133B 7448                <1>     jz .cpsCharSkip2 ; and then exit with the final converted pathsep in al
   738 0000133D 3C2E                <1>     cmp al, "." ;Filename extension separator
   739 0000133F 7428                <1>     je .cpsExtension
   740 00001341 81F900010000        <1>     cmp ecx, 0100h  ;If ch = 1 and cl = 0, then look for either . or terminator
   741 00001347 74E4                <1>     je .cpsMainLoop
   742 00001349 67E332              <1>     jecxz .cpsCharSkip ;If ch = 0 and cl = 0, scan for next terminator
   743                              <1>     ;If we have space in the filename, we check to see if the next char is *
   744 0000134C 3C2A                <1>     cmp al, "*" ;Wildcard?
   745 0000134E 743C                <1>     je .cpsWildcard
   746 00001350 3C3F                <1>     cmp al, "?" ;Good wildcard?
   747 00001352 740C                <1>     je .store
   748 00001354 E8B6230000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   749 00001359 E858240000          <1>     call checkCharValid ; and check it is a valid char
   750 0000135E 7405                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   751                              <1> .store:
   752 00001360 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   753 00001361 FEC9                <1>     dec cl  ;One less char left to tfr
   754 00001363 EBC8                <1>     jmp short .cpsMainLoop
   755                              <1> .cpsInvalidChar:
   756 00001365 30C0                <1>     xor al, al
   757 00001367 EB56                <1>     jmp short .cpsProcessName
   758                              <1> .cpsExtension:
   759                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   760 00001369 B903000000          <1>     mov ecx, 3  ;Set to 3 chars left, in extension (ch = 0)
   761 0000136E 488D3D(E3C50300)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   762 00001375 EBB6                <1>     jmp short .cpsMainLoop
   763                              <1> .cpsDots:
   764 00001377 AA                  <1>     stosb   ;Store the first dot
   765 00001378 AC                  <1>     lodsb   ;Check now if we have a second dot
   766 00001379 3C2E                <1>     cmp al, "."
   767 0000137B 7501                <1>     jne .cpsCharSkip
   768 0000137D AA                  <1>     stosb   ;Store the second dot
   769                              <1> .cpsCharSkip:
   770 0000137E E819000000          <1>     call .cpsPtrSkip    ;Now we are skipping any chars that arent terminators
   771 00001383 EB3A                <1>     jmp short .cpsProcessName
   772                              <1> .cpsCharSkip2:
   773 00001385 E81F000000          <1>     call .cpsPtrSkip2
   774 0000138A EB33                <1>     jmp short .cpsProcessName
   775                              <1> .cpsWildcard:
   776                              <1>     ;cl has the number of chars of ? to store 
   777 0000138C B03F                <1>     mov al, "?"
   778 0000138E 51                  <1>     push rcx
   779 0000138F 0FB6C9              <1>     movzx ecx, cl   ;Temporarily extend cl to ecx
   780 00001392 F3AA                <1>     rep stosb   ;Store that many ? in buffer and return cl to 0
   781 00001394 59                  <1>     pop rcx
   782 00001395 F6C501              <1>     test ch, 1  ;Is this bit set? If so, we jump to .cpsExtension
   783 00001398 75CF                <1>     jnz .cpsExtension   ;Now fill the extension field
   784                              <1>     ;Else, we process filename
   785 0000139A EBE2                <1>     jmp short .cpsCharSkip
   786                              <1> .cpsPtrSkip:
   787                              <1> ;Now advance rsi past the next pathsep or null char
   788                              <1> ;If an invalid char is detected, it is considered to be a terminator
   789                              <1> ;Output: al = Terminator char (either \ or null)
   790                              <1> ;        rsi -> First char of next pathspec (if al = \)
   791 0000139C AC                  <1>     lodsb
   792 0000139D E827240000          <1>     call checkCharOk
   793 000013A2 7418                <1>     je .cpsBadChar
   794 000013A4 84C0                <1>     test al, al ;Is this null?
   795                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 000013A6 7501                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 000013A8 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   796                              <1> ;If the next char that will be read is a pathsep, inc rsi to it
   797                              <1> ;This is to avoid multiple successive pathseps
   798                              <1> .cpsPtrSkip2:
   799 000013A9 803E5C              <1>     cmp byte [rsi], "\"
   800 000013AC 74EE                <1>     je .cpsPtrSkip 
   801 000013AE 803E2F              <1>     cmp byte [rsi], "/"
   802 000013B1 74E9                <1>     je .cpsPtrSkip 
   803                              <1>     ;If the current char is the final pathsep, exit
   804 000013B3 E84C230000          <1>     call swapPathSeparator
   805                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013B8 74EE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   806 000013BA EBE0                <1>     jmp short .cpsPtrSkip
   807                              <1> 
   808                              <1> .cpsBadChar:
   809 000013BC 30C0                <1>     xor al, al  ;Convert the char to a terminator
   810                              <1>     return
    18                              <2> %%_ret:
    19 000013BE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   811                              <1> .cpsProcessName:
   812                              <1> ;Store the final char in the 12 space in the FCB name field
   813 000013BF 488D3D(E6C50300)    <1>     lea rdi, fcbName+11
   814 000013C6 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   815 000013C7 5F                  <1>     pop rdi
   816                              <1>     return
    18                              <2> %%_ret:
    19 000013C8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   817                              <1> 
   818                              <1> searchForPathspecCrit:
   819                              <1>     ;Now search the current directory for this filename
   820                              <1>     ;Find first using SDA ffBlock
   821                              <1>     ;If al = 0, we have a file name
   822                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   823                              <1>     ;Output: CF=CY => Error occured
   824                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   825                              <1>     ;                 FF block somewhat setup
   826                              <1>     ;Preserves rbx, rsi rdi
   827 000013C9 53                  <1>     push rbx
   828 000013CA 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   829 000013CB 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   830                              <1> ;Evaluate whether we are searching for a file for a directory
   831 000013CC 84C0                <1>     test al, al
   832 000013CE 741D                <1>     jz .sfpPNfile
   833                              <1>     ;Fall if subdir
   834 000013D0 488D3D(DBC50300)    <1>     lea rdi, fcbName
   835 000013D7 B03F                <1>     mov al, "?" ;Search for wildcard
   836 000013D9 B90C000000          <1>     mov ecx, 12
   837 000013DE F2AE                <1>     repne scasb
   838 000013E0 742B                <1>     je .sfpPnf  ;Path not found if a ? found in the name
   839 000013E2 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
   840 000013E4 C605(CAC30300)00    <1>     mov byte [fileDirFlag], 0   ;Set to search exclusively for a dir
   841 000013EB EB0E                <1>     jmp short .sfpPNMain
   842                              <1> .sfpPNfile:
   843                              <1>     ;Here if we are searching for a file
   844 000013ED C605(CAC30300)FF    <1>     mov byte [fileDirFlag], -1  ;Search for file or dir according to attribs
   845 000013F4 0FB605(56C60300)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
   846                              <1> .sfpPNMain:
   847 000013FB 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
   848 00001402 7405                <1>     je .sfpPNNoDisk
   849                              <1>     ;Now the internal ff block is setup, conduct search.
   850 00001404 E8FBF9FFFF          <1>     call searchDir
   851                              <1> .sfpPNNoDisk:
   852 00001409 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
   853 0000140A 5E                  <1>     pop rsi
   854 0000140B 5B                  <1>     pop rbx
   855                              <1>     return
    18                              <2> %%_ret:
    19 0000140C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   856                              <1> .sfpPnf:
   857 0000140D B803000000          <1>     mov eax, errPnf
   858                              <1> .sfpErrExit:
   859 00001412 F9                  <1>     stc ;Set carry
   860 00001413 EBF4                <1>     jmp short .sfpPNNoDisk
   861                              <1> 
   862                              <1> addPathspecToBufferCrit:
   863                              <1> ;Input: fcbName = Qualified pathname portion
   864                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
   865                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
   866                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
   867                              <1> ;rbx points to the "head of the path"
   868 00001415 803D(DBC50300)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
   869 0000141C 741F                <1>     je .aptbPNDots
   870                              <1>     ;Copy filename over to internal buffer
   871 0000141E 56                  <1>     push rsi    ;Save source pointer position
   872 0000141F 488D35(DBC50300)    <1>     lea rsi, fcbName
   873 00001426 E8E7FBFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   874 0000142B 48FFCF              <1>     dec rdi ;Go back to the copied Null char
   875 0000142E 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
   876 0000142F 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
   877 00001432 E8CD220000          <1>     call swapPathSeparator
   878 00001437 7402                <1>     jz .aptbPNexit
   879 00001439 30C0                <1>     xor al, al  ;Set al to 0 else (all other chars are terminators)
   880                              <1> .aptbPNexit:
   881 0000143B AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
   882                              <1>     return
    18                              <2> %%_ret:
    19 0000143C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   883                              <1> .aptbPNDots:
   884                              <1> ;For one dot, we leave rdi where it is
   885                              <1> ;For two dots, we search backwards for the previous "\"
   886 0000143D 803D(DCC50300)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
   887                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001444 75F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   888                              <1>     ;Here we have two dots
   889                              <1>     ;Walk rdi backwards until a \ is found
   890 00001446 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
   891 00001449 803F3A              <1>     cmp byte [rdi], ":" ;IF the char preceeding \ is :, then error out
   892 0000144C 7426                <1>     je .aptbPnf
   893 0000144E 803F5C              <1>     cmp byte [rdi], "\" ;Similar net name check
   894 00001451 7421                <1>     je .aptbPnf
   895                              <1> .aptbPNDotsLp:
   896 00001453 48FFCF              <1>     dec rdi
   897 00001456 803F5C              <1>     cmp byte [rdi], "\"
   898 00001459 75E2                <1>     jne .aptbPNDots  ;Keep looping around until it is a "\"
   899 0000145B 48FFC7              <1>     inc rdi ;Go past that pathsep
   900 0000145E 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;Are we in name resolution mode?
   901                              <1>     rete    ;If clear, we are, so just return
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001465 74D5                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   902 00001467 4839FB              <1>     cmp rbx, rdi    ;Are we before the start of the path? (i.e in subst?)
   903 0000146A 7208                <1>     jb .aptbPnf
   904                              <1>     return
    18                              <2> %%_ret:
    19 0000146C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   905                              <1> .aptbSearchError:
   906 0000146D B812000000          <1>     mov eax, errNoFil
   907 00001472 EB05                <1>     jmp short .aptbErrExit
   908                              <1> .aptbPnf:
   909 00001474 B803000000          <1>     mov eax, errPnf
   910                              <1> .aptbErrExit:
   911 00001479 F9                  <1>     stc ;Set carry
   912                              <1>     return
    18                              <2> %%_ret:
    19 0000147A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   913                              <1> 
   914                              <1> checkDevPath:
   915                              <1> ;Called only if the file/directory was not found on disk.
   916                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
   917                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
   918                              <1> ; and check to see if it is a char device. If it is, build an ffblock.
   919                              <1> ; If it is not, proceed with the request fail.
   920                              <1> ;
   921                              <1> ;Input: rsi = Pointer to the next path spec
   922                              <1> ;Output: CF=NC => Char device found, directory and ffblocks built
   923                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
   924 0000147B 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
   925                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001482 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   926 00001484 803D(E6C50300)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
   927 0000148B 0F84D6000000        <1>     je .notOk                      
   928                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
   929 00001491 50                  <1>     push rax
   930 00001492 48B844455620202020- <1>     mov rax, "DEV     "
   930 0000149B 20                  <1>
   931 0000149C 483905(DBC50300)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
   932 000014A3 58                  <1>     pop rax
   933 000014A4 0F85BD000000        <1>     jne .notOk
   934 000014AA 813D(E3C50300)2020- <1>     cmp dword [fcbName + 8], "   \"
   934 000014B2 205C                <1>
   935 000014B4 0F85AD000000        <1>     jne .notOk
   936                              <1>     ;So the failed directory was DEV, now we search to see if we are
   937                              <1>     ; looking for a device driver
   938                              <1>     ;First append it to rdi 
   939 000014BA B84445565C          <1>     mov eax, "DEV\" 
   940 000014BF AB                  <1>     stosd   ;RDI now ready to add a device name to it too
   941 000014C0 57                  <1>     push rdi
   942 000014C1 488D3D(DBC50300)    <1>     lea rdi, fcbName
   943 000014C8 E8FDFAFFFF          <1>     call asciiToFCB    ;Converts the next section into this field
   944                              <1>     ;Returns in al the terminating char of the source string
   945 000014CD 5F                  <1>     pop rdi
   946                              <1>     ;If al is a pathsep, fail
   947 000014CE E831220000          <1>     call swapPathSeparator
   948 000014D3 0F848E000000        <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
   949 000014D9 30C0                <1>     xor al, al
   950 000014DB 8805(E6C50300)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
   951                              <1>     ;call checkDeviceName
   952                              <1>     ;jnz .notOk
   953 000014E1 E8B8000000          <1>     call checkIfCharDevice
   954 000014E6 727F                <1>     jc .notOk
   955 000014E8 E8E1000000          <1>     call buildCharDir
   956                              <1>     ;Here the device was determined to be a char device.
   957                              <1>     ;A dummy directory entry was built for it.
   958                              <1>     ;Now copy the dummy dir into the ffblock and return all OK!
   959                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
   960                              <1>     ; Do not Find Next!
   961                              <1> .buildDeviceFFblock:
   962 000014ED 50                  <1>     push rax
   963 000014EE 56                  <1>     push rsi
   964 000014EF 57                  <1>     push rdi
   965                              <1> 
   966 000014F0 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
   967 000014F7 48B820202020202020- <1>     mov rax, "        "
   967 00001500 20                  <1>
   968 00001501 48894701            <1>     mov qword [rdi + ffBlock.template], rax
   969 00001505 894709              <1>     mov dword [rdi + ffBlock.template + filename.fExt], eax
   970 00001508 31C0                <1>     xor eax, eax
   971 0000150A FFC8                <1>     dec eax
   972 0000150C 894711              <1>     mov dword [rdi + ffBlock.parDirClus], eax   ;Set parent cluster to -1
   973 0000150F 0FB605(56C60300)    <1>     movzx eax, byte [searchAttr]
   974 00001516 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   975 0000151B 88470C              <1>     mov byte [rdi + ffBlock.attrib], al    ;Place user attribs here
   976 0000151E 8A05(C6C50300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   977 00001524 884715              <1>     mov byte [rdi + ffBlock.attribFnd], al
   978 00001527 8B05(D1C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   979 0000152D 894716              <1>     mov dword [rdi + ffBlock.fileTime], eax
   980 00001530 8B05(D7C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   981 00001536 89471A              <1>     mov dword [rdi + ffBlock.fileSize], eax
   982 00001539 488B05(BBC50300)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the Device name
   983 00001540 48894701            <1>     mov qword [rdi + ffBlock.template], rax  ;Replace "DEV        " with devName
   984                              <1> 
   985 00001544 57                  <1>     push rdi
   986 00001545 488D35(DBC50300)    <1>     lea rsi, fcbName
   987 0000154C 488D7F1E            <1>     lea rdi, qword [rdi + ffBlock.asciizName]   ;Goto the name field
   988 00001550 E8BDFAFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   989 00001555 5F                  <1>     pop rdi
   990 00001556 488D771E            <1>     lea rsi, qword [rdi + ffBlock.asciizName]   ;Source the name field
   991 0000155A 5F                  <1>     pop rdi ;Get rdi pointing back to the internal pathbuffer position
   992                              <1> .copyName:
   993 0000155B AC                  <1>     lodsb
   994 0000155C 84C0                <1>     test al, al
   995 0000155E 7403                <1>     jz .nameCopied
   996 00001560 AA                  <1>     stosb
   997 00001561 EBF8                <1>     jmp short .copyName
   998                              <1> .nameCopied:
   999 00001563 5E                  <1>     pop rsi
  1000 00001564 58                  <1>     pop rax
  1001 00001565 F8                  <1>     clc
  1002                              <1>     return
    18                              <2> %%_ret:
    19 00001566 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1003                              <1> .notOk:
  1004 00001567 B812000000          <1>     mov eax, errNoFil
  1005 0000156C F9                  <1>     stc
  1006                              <1>     return
    18                              <2> %%_ret:
    19 0000156D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1007                              <1> .charDevSearch:
  1008                              <1>     ;call checkDeviceName
  1009                              <1>     ;jnz .notOk
  1010 0000156E E82B000000          <1>     call checkIfCharDevice
  1011 00001573 72F2                <1>     jc .notOk
  1012 00001575 E854000000          <1>     call buildCharDir
  1013 0000157A 803D(E6C50300)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1014 00001581 750C                <1>     jne .cds2
  1015 00001583 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1016 00001587 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1017 00001589 48FFCF              <1>     dec rdi
  1018 0000158C B02F                <1>     mov al, "/" ;Replace \ with "/"
  1019 0000158E AA                  <1>     stosb   ;Store that and let the ffblock write the filename
  1020                              <1> .cds2:
  1021 0000158F 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1022 00001596 0F8551FFFFFF        <1>     jne .buildDeviceFFblock    ;Now jump if in disk search
  1023 0000159C F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1024                              <1>     return
    18                              <2> %%_ret:
    19 0000159D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1025                              <1> 
  1026                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1027                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1028                              <1> ; device driver chain. 
  1029                              <1> ;Output: CF=CY if not found
  1030                              <1> ;        CF=NC if found
  1031 0000159E 50                  <1>     push rax
  1032 0000159F 57                  <1>     push rdi
  1033 000015A0 488B05(DBC50300)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1034 000015A7 488D3D(73C00300)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1035                              <1> .checkName:
  1036 000015AE 48F7470800800000    <1>     test qword [rdi + drvHdr.attrib], devDrvChar  ;Is the driver for disk drive?
  1037 000015B6 7406                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1038 000015B8 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1039 000015BC 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1040                              <1> .walkList:
  1041 000015BE 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1042 000015C1 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1043 000015C8 75E4                <1>     jne .checkName  ;If no, rdi points to char device
  1044 000015CA F9                  <1>     stc
  1045                              <1> .exit:
  1046 000015CB 5F                  <1>     pop rdi
  1047 000015CC 58                  <1>     pop rax
  1048                              <1>     return
    18                              <2> %%_ret:
    19 000015CD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1049                              <1> 
  1050                              <1> buildCharDir:
  1051                              <1> ;Build a dummy directory entry for the char device in FCBName
  1052                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1053 000015CE 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1054                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000015D5 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1055 000015D7 50                  <1>     push rax
  1056 000015D8 57                  <1>     push rdi
  1057 000015D9 C605(E6C50300)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1058 000015E0 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
  1059                              <1>     ;Zero the directory copy (32 bytes)
  1060 000015E7 50                  <1>     push rax
  1061 000015E8 51                  <1>     push rcx
  1062 000015E9 57                  <1>     push rdi
  1063 000015EA 31C0                <1>     xor eax, eax    ;Zero rax
  1064 000015EC B904000000          <1>     mov ecx, 4
  1065 000015F1 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1066 000015F4 5F                  <1>     pop rdi
  1067 000015F5 59                  <1>     pop rcx
  1068 000015F6 58                  <1>     pop rax
  1069 000015F7 488B05(DBC50300)    <1>     mov rax, qword [fcbName]
  1070 000015FE 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1071 00001601 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1072 00001606 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1073 00001609 C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], 40h ;Mimic DOS, set attr to 40h
  1074                              <1>     ;Get date and time and set the write time in the directory entry
  1075 0000160D E89F0A0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1076 00001612 E8850B0000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1077 00001617 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1078 0000161A 31C0                <1>     xor eax, eax
  1079 0000161C 5F                  <1>     pop rdi
  1080 0000161D 58                  <1>     pop rax
  1081                              <1>     return
    18                              <2> %%_ret:
    19 0000161E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    24                                  %include "./Source/Kernel/FAT/dirfun.asm"
    25                              <1> ;---------------------------------------------------:
    26                              <1> ;                   KERNEL FUNCTIONS                :
    27                              <1> ;---------------------------------------------------:
    28                              <1> makeDIR:           ;ah = 39h
    29                              <1> removeDIR:         ;ah = 3Ah
    30                              <1> setCurrentDIR:     ;ah = 3Bh, set dir for current drive (or drive in path)
    31                              <1> getCurrentDIR:     ;ah = 47h
    32                              <1> getSetFileDateTime:;ah = 57h
    33                              <1> trueName:          ;ah = 60h, get fully qualified name
    34                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
    35 0000161F 4889F2              <1>     mov rdx, rsi
    36 00001622 E80F210000          <1>     call checkPathspecOK    ;This preserves rsi
    37 00001627 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
    38 00001629 740A                <1>     jz .pathspecOk  ;If ZF=ZE AND CF=CY then we have path separators, still ok
    39                              <1> .badPath:
    40 0000162B B803000000          <1>     mov eax, errPnf
    41 00001630 E97E230000          <1>     jmp extErrExit
    42                              <1> .pathspecOk:
    43 00001635 57                  <1>     push rdi    ;Save the destination
    44 00001636 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    45 0000163D E854FAFFFF          <1>     call qualifyFileName
    46 00001642 C60700              <1>     mov byte [rdi], 0   ;Store a terminating zero if necessary
    47 00001645 5F                  <1>     pop rdi
    48 00001646 0F8267230000        <1>     jc extErrExit
    49 0000164C 488D35(7FC40300)    <1>     lea rsi, buffer1
    50 00001653 E88C210000          <1>     call strcpy
    51                              <1>     return
    18                              <2> %%_ret:
    19 00001658 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    52                              <1> 
    53                              <1> ;-----------------------------------
    54                              <1> ;    General Directory Routines    :
    55                              <1> ;-----------------------------------
    56                              <1> 
    57                              <1> updateDirectoryEntryForFile:    
    58                              <1> ;Updates the directory entry for disk files
    59                              <1> ;Called with:
    60                              <1> ;   [workingDPB] = DPB pointer for the disk device
    61                              <1> ;   [currentSFT] = Current SFT pointer
    62 00001659 50                  <1>     push rax
    63 0000165A 53                  <1>     push rbx
    64 0000165B 57                  <1>     push rdi
    65 0000165C 55                  <1>     push rbp
    66                              <1> 
    67 0000165D 488B3D(81C60300)    <1>     mov rdi, qword [currentSFT]
    68 00001664 488B2D(61C60300)    <1>     mov rbp, qword [workingDPB]
    69 0000166B 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
    70 00001671 751D                <1>     jnz .skipDT
    71                              <1>     ;Get date and time words and add them to the directory entry
    72 00001673 E8390A0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    73 00001678 7265                <1>     jc .exit  ;If we fail to get time/date, fail the request
    74                              <1>     ;Build date and time words
    75 0000167A E81D0B0000          <1>     call getDirDTwords  ;Get date time words packed in eax
    76                              <1>     ;Update SFT fields
    77 0000167F 66894713            <1>     mov word [rdi + sft.wTime], ax
    78 00001683 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
    79 00001686 66894715            <1>     mov word [rdi + sft.wDate], ax
    80 0000168A 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush  ;We update DT, so flush
    81                              <1> .skipDT:
    82                              <1> ;Before we read the dir sector in, if we never wrote to the disk
    83                              <1> ; we skip all of this
    84 00001690 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
    85 00001696 7447                <1>     jz .exit ;If the file was never written to, don't bother updating DIR data
    86 00001698 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
    87 0000169C E873F4FFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
    88 000016A1 723C                <1>     jc .exit    ;If an error is to be returned from, we skip the rest of this
    89                              <1>     ;Now we write the changes to the sector
    90 000016A3 4889DD              <1>     mov rbp, rbx    ;Move disk buffer header into rbp
    91                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
    92 000016A6 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer 
    93 000016AA 488D6D30            <1>     lea rbp, qword [rbp + bufferHdr.dataarea]   ;Goto data area
    94 000016AE 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
    95 000016B2 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
    96 000016B5 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
    97 000016B8 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
    98 000016BB 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
    99 000016BE 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   100 000016C2 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   101 000016C6 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   102 000016CA 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   103 000016CE 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   104                              <1>     ;Directory sector updated and marked to be flushed to disk!
   105                              <1>     ;Now mark that the file has sectors not yet flushed to disk
   106 000016D2 E8AEF2FFFF          <1>     call setBufferReferenced
   107 000016D7 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   108 000016D8 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush
   109 000016DE 9D                  <1>     popfq
   110                              <1> .exit:
   111 000016DF 5D                  <1>     pop rbp
   112 000016E0 5F                  <1>     pop rdi
   113 000016E1 5B                  <1>     pop rbx
   114 000016E2 58                  <1>     pop rax
   115                              <1>     return
    18                              <2> %%_ret:
    19 000016E3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    25                                  %include "./Source/Kernel/FileIO/devio.asm"
    26                              <1> ;This file contains the primitive dev io function, which will be called 
    27                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    28                              <1> ; make requests for device IO.
    29                              <1> 
    30                              <1> mainCharIO:
    31                              <1> ;This is the main IO clearing function for Char IO.
    32                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    33                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    34                              <1> ;
    35                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    36                              <1> ;       ah = {0,..., 5}, a subfunction number
    37                              <1> ;       Function 0: Read Char (drvREAD)
    38                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    39                              <1> ;       Function 2: Write Char (drvWrite)
    40                              <1> ; In the case the below functions are called for Disk/Net files
    41                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    42                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    43                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    44                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    45                              <1> ;
    46                              <1> ; If and only if ah = 02h, al = Char to write to device
    47                              <1> ;
    48                              <1> ;
    49                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    50                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    51                              <1> ;                                           ZF = NZ => Device ready (not busy)
    52                              <1> ;                                               If ND read, AL = Next Char
    53                              <1> ; For Files/Net:
    54                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    55                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    56                              <1> ;           For Read and ND Read:
    57                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    58                              <1> ;               Read returns ^Z on EOF.
    59                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    60                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    61                              <1> ;
    62                              <1> ;All registers preserved EXCEPT for ax and flags
    63                              <1> 
    64                              <1> ;Reference Request Header
    65                              <1> ;Common Section:
    66                              <1> ;    .hdrlen resb 1  ;Length of the request header
    67                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    68                              <1> ;    .cmdcde resb 1  ;Command code
    69                              <1> ;    .status resw 1  ;Status word
    70                              <1> ;    .devptr resq 1  ;Reserved. Unused
    71                              <1> ;Below used by calls 0,1,2,5
    72                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    73                              <1> ;Below used by calls 0,2
    74                              <1> ;    .bufptr resq 1
    75                              <1> ;    .tfrlen resd 1
    76                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    77                              <1> ;    .strtsc resq 1
    78                              <1> ;    .desptr resq 1
    79                              <1> 
    80                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    81 000016E4 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    82 000016E5 488D1D(7DC40300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    83 000016EC 48891D(06C40300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    84 000016F3 5B                  <1>     pop rbx
    85 000016F4 C705(0EC40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    85 000016FC 0000                <1>
    86 000016FE 668905(7DC40300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    87 00001705 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    88 0000170B 0F85A1000000        <1>     jnz .notChar
    89 00001711 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    90 00001717 0F8495000000        <1>     jz .notChar
    91                              <1> ;Char devices only here
    92 0000171D E83B220000          <1>     call dosPushRegs    ;Save context here
    93 00001722 488D1D18E9FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    94 00001729 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    95 0000172C C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    96 0000172F 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    97 00001732 890D(F8C30300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    98                              <1>     ;Now set up cx for status word
    99 00001738 31C9                <1>     xor ecx, ecx
   100 0000173A 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   101 0000173D 7506                <1>     jne .skipBsySet
   102 0000173F 81C900020000        <1>     or ecx, drvBsyStatus
   103                              <1> .skipBsySet:
   104 00001745 66870D(FBC30300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   105                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   106 0000174C 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   107 00001753 E8B81A0000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   108 00001758 668B3D(FBC30300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   109 0000175F F7C700800000        <1>     test edi, drvErrStatus
   110 00001765 752D                <1>     jnz .error
   111                              <1> .ignoreRet:
   112 00001767 803D(FAC30300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   113 0000176E 750C                <1>     jne .notNDRead
   114 00001770 8A05(05C40300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   115 00001776 8805(7DC40300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   116                              <1> .notNDRead:
   117 0000177C 8A25(FCC30300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   118 00001782 F6D4                <1>     not ah
   119 00001784 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   120 00001787 E8BA210000          <1>     call dosPopRegs ;Get back the context
   121 0000178C 668B05(7DC40300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   122                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 00001793 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   123                              <1> .error:
   124                              <1>     ;cl has flags
   125 00001794 88CC                <1>     mov ah, cl
   126 00001796 E84C190000          <1>     call charDevErr
   127 0000179B 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   128 0000179D 750A                <1>     jne .errorIgnore
   129                              <1>     ;Fallthrough => Retry
   130 0000179F E8A2210000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   131 000017A4 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   132                              <1> .errorIgnore:
   133                              <1>     ;Clear the busy bit in the status word
   134 000017A9 8025(FCC30300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   135 000017B0 EBB5                <1>     jmp short .ignoreRet
   136                              <1> .notChar:
   137                              <1> ;Just return with ZF=NZ for now
   138 000017B2 50                  <1>     push rax
   139 000017B3 31C0                <1>     xor eax, eax
   140 000017B5 FEC0                <1>     inc al
   141 000017B7 58                  <1>     pop rax
   142                              <1>     return
    18                              <2> %%_ret:
    19 000017B8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   143                              <1> 
   144                              <1> openSFT:
   145                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   146                              <1> ;Input: rdi = SFT pointer
   147 000017B9 E89F210000          <1>     call dosPushRegs
   148 000017BE B00D                <1>     mov al, drvOPEN
   149 000017C0 EB07                <1>     jmp short openCloseCommon
   150                              <1> closeSFT:
   151                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   152 000017C2 E896210000          <1>     call dosPushRegs
   153 000017C7 B00E                <1>     mov al, drvCLOSE
   154                              <1> openCloseCommon:
   155                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   156 000017C9 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   157 000017CF 7469                <1>     jz .exit    ;Exit if so
   158 000017D1 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   159 000017D5 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   160 000017D9 7512                <1>     jnz .charDev
   161                              <1>     ;Here a disk drive, rdi is a DPB ptr
   162 000017DB 803D(36C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   163 000017E2 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   164 000017E4 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   165 000017E7 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   166 000017E9 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   167                              <1> .charDev:
   168 000017ED 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   169 000017F3 7445                <1>     jz .exit    ;No, exit!
   170 000017F5 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   171 000017F8 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   172 000017FF 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   173                              <1> .retryEP:
   174 00001802 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   175 00001805 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   176 00001808 50                  <1>     push rax    ;Save the dword
   177 00001809 E8061A0000          <1>     call goDriver
   178 0000180E 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   179 00001815 F7C700800000        <1>     test edi, drvErrStatus
   180 0000181B 741C                <1>     jz .exitPop
   181                              <1>     ;Error here, check if char or block drive
   182 0000181D 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   183 00001823 7404                <1>     jz .blockError
   184                              <1>     ;Char error here
   185 00001825 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   186 00001827 EB04                <1>     jmp short .errorCmn
   187                              <1> .blockError:
   188 00001829 88C8                <1>     mov al, cl  ;Move drive number into al
   189 0000182B B406                <1>     mov ah, critData    ;Data on block dev error
   190                              <1> .errorCmn:
   191                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   192 0000182D E8B5180000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   193 00001832 B001                <1>     mov al, critRetry   ;al returns user response
   194 00001834 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   195 00001836 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   196 00001837 EBC9                <1>     jmp short .retryEP  ;Reset
   197                              <1> .exitPop:
   198 00001839 58                  <1>     pop rax    
   199                              <1> .exit:
   200 0000183A E807210000          <1>     call dosPopRegs
   201                              <1>     return
    18                              <2> %%_ret:
    19 0000183F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    26                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    27                              <1> ;-----------------------------------------------------------------------:
    28                              <1> ;                  DOS default char functions live here                 :
    29                              <1> ;                                                                       :
    30                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    31                              <1> ;                                                                       :
    32                              <1> ;Rules for the naming of the DOS functions                              :
    33                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    34                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    35                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    36                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    37                              <1> ;                                                                       :
    38                              <1> ;-----------------------------------------------------------------------:
    39                              <1> 
    40                              <1> charIn_BE:     ;ah = 01h
    41                              <1> ;Return char that has been read and echoed in al
    42 00001840 E866010000          <1>     call charIn_B
    43 00001845 50                  <1>     push rax
    44 00001846 E804000000          <1>     call charOut_B.in    ;Output it to screen
    45 0000184B 58                  <1>     pop rax
    46                              <1>     return
    18                              <2> %%_ret:
    19 0000184C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    47                              <1> 
    48                              <1> charOut_B:       ;ah = 02h
    49                              <1> ;Bspace is regular cursor left, does not insert a blank
    50 0000184D 88D0                <1>     mov al, dl
    51                              <1> .in:  ;Internal function Entry Point, with char in al
    52 0000184F 3C20                <1>     cmp al, asciiCaret
    53 00001851 7277                <1>     jb .control
    54 00001853 3C7F                <1>     cmp al, DEL ;DEL char?
    55 00001855 7406                <1>     je .skipCurs
    56 00001857 FE05(2EC20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    57                              <1> .skipCurs:
    58 0000185D FE05(34C30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    59 00001863 8025(34C30300)03    <1>     and byte [vConErr], 3
    60 0000186A 56                  <1>     push rsi
    61 0000186B 7507                <1>     jnz .skipErrorCheck
    62 0000186D 50                  <1>     push rax
    63 0000186E E884020000          <1>     call vConCtrlCheck
    64 00001873 58                  <1>     pop rax
    65                              <1> .skipErrorCheck:
    66 00001874 E80C020000          <1>     call outputOnStdout
    67 00001879 5E                  <1>     pop rsi
    68 0000187A F605(31C30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    69                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001881 74C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    70 00001883 53                  <1>     push rbx
    71 00001884 56                  <1>     push rsi
    72 00001885 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    73 0000188A E82F030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    74 0000188F 7236                <1>     jc .exitPrintEcho
    75                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    76 00001891 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    77 00001895 F7C300800000        <1>     test ebx, devRedirDev
    78 0000189B 752A                <1>     jnz .exitPrintEcho  ;Exit if STDOUT is redir
    79 0000189D F7C380000000        <1>     test ebx, devCharDev
    80 000018A3 7422                <1>     jz .exitPrintEcho
    81 000018A5 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    82 000018AA E80F030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    83 000018AF 7216                <1>     jc .exitPrintEcho   ;Exit if handle closed
    84 000018B1 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    85 000018B7 7407                <1>     jz .netSpool
    86 000018B9 E8FB010000          <1>     call outputOnSFT
    87 000018BE EB07                <1>     jmp short .exitPrintEcho
    88                              <1> .netSpool:
    89 000018C0 C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    90                              <1> .exitPrintEcho:
    91 000018C7 5E                  <1>     pop rsi
    92 000018C8 5B                  <1>     pop rbx
    93                              <1>     return
    18                              <2> %%_ret:
    19 000018C9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    94                              <1> .control:
    95 000018CA 3C0D                <1>     cmp al, CR
    96 000018CC 7425                <1>     je .newline
    97 000018CE 3C08                <1>     cmp al, BSP
    98 000018D0 742D                <1>     je .back
    99 000018D2 3C09                <1>     cmp al, TAB
   100 000018D4 7587                <1>     jne .skipCurs   ;Treat as normal
   101                              <1>     ;TAB key here
   102                              <1> .tab:
   103 000018D6 51                  <1>     push rcx
   104 000018D7 0FB60D(2EC20300)    <1>     movzx ecx, byte [vConCursPos]
   105 000018DE 80C9F8              <1>     or cl, ~7
   106 000018E1 F6D9                <1>     neg cl
   107 000018E3 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   108                              <1> .tabloop:
   109 000018E6 B020                <1>     mov al, SPC
   110 000018E8 E862FFFFFF          <1>     call charOut_B.in   ;Output the char
   111 000018ED FEC9                <1>     dec cl
   112 000018EF 75F5                <1>     jnz .tabloop
   113                              <1> .stopTab:
   114 000018F1 59                  <1>     pop rcx
   115                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 000018F2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   116                              <1> .newline:
   117 000018F3 C605(2EC20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   118 000018FA E95EFFFFFF          <1>     jmp .skipCurs   ;And echo 
   119                              <1> .back:
   120 000018FF FE0D(2EC20300)      <1>     dec byte [vConCursPos]
   121 00001905 E953FFFFFF          <1>     jmp .skipCurs   ;And echo
   122                              <1> 
   123                              <1> auxIn_B:        ;ah = 03h
   124 0000190A E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   125 0000190F BB03000000          <1>     mov ebx, 3
   126 00001914 E8A5020000          <1>     call getCharDevSFT
   127                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001919 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   128                              <1> .auxloop:
   129 0000191B B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   130 0000191D E8C2FDFFFF          <1>     call mainCharIO
   131 00001922 7408                <1>     jz .signalLoop
   132 00001924 30E4                <1>     xor ah, ah  ;Read the char in
   133 00001926 E8B9FDFFFF          <1>     call mainCharIO
   134                              <1>     return
    18                              <2> %%_ret:
    19 0000192B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   135                              <1> .signalLoop:
   136 0000192C E8A3010000          <1>     call callInt48h
   137 00001931 EBE8                <1>     jmp short .auxloop
   138                              <1> 
   139                              <1> auxOut_B:       ;ah = 04h
   140 00001933 53                  <1>     push rbx
   141 00001934 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   142 00001939 EB06                <1>     jmp short auxOutCmn
   143                              <1> prnOut_B:       ;ah = 05h
   144 0000193B 53                  <1>     push rbx
   145 0000193C BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   146                              <1> auxOutCmn: ;Auxilliary output device common 
   147 00001941 88D0                <1>     mov al, dl  ;Get the char into al
   148 00001943 50                  <1>     push rax
   149 00001944 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   150 00001949 58                  <1>     pop rax
   151 0000194A 56                  <1>     push rsi
   152 0000194B E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   153 00001950 5E                  <1>     pop rsi
   154 00001951 5B                  <1>     pop rbx
   155                              <1>     return
    18                              <2> %%_ret:
    19 00001952 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   156                              <1> 
   157                              <1> directConIO:    ;ah = 06h
   158 00001953 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   159 00001955 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   160 00001957 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   161                              <1> ;Here is the read char direct function
   162 0000195D 31DB                <1>     xor ebx, ebx    
   163 0000195F E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   164                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001964 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   165 00001966 488B2D(DCC30300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   166 0000196D B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   167 0000196F E870FDFFFF          <1>     call mainCharIO
   168 00001974 E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   169 00001979 7507                <1>     jnz .readChar
   170 0000197B 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   171 0000197F 30C0                <1>     xor al, al  ;Set caller return code to 0
   172                              <1>     return
    18                              <2> %%_ret:
    19 00001981 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   173                              <1> .readChar:
   174 00001982 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   175                              <1>     ;Fallthrough here to get the char at STDIN
   176                              <1> charIn:         ;ah = 07h
   177                              <1> ;Return char in al from STDIN without waiting
   178 00001986 31DB                <1>     xor ebx, ebx
   179 00001988 E831020000          <1>     call getCharDevSFT
   180                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000198D 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   181 0000198F B401                <1>     mov ah, 01  ;ND read for char
   182 00001991 E84EFDFFFF          <1>     call mainCharIO
   183 00001996 750B                <1>     jnz .getChar
   184 00001998 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   185 0000199A CD4A                <1>     int 4Ah
   186 0000199C E833010000          <1>     call callInt48h
   187 000019A1 EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   188                              <1> .getChar:
   189                              <1>     ;Get the char in al and exit
   190 000019A3 30E4                <1>     xor ah, ah
   191 000019A5 E83AFDFFFF          <1>     call mainCharIO
   192                              <1>     return
    18                              <2> %%_ret:
    19 000019AA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   193                              <1> charIn_B:       ;ah = 08h
   194                              <1> ;Return char in al from STDIN
   195 000019AB 56                  <1>     push rsi
   196                              <1> .readAgain:
   197 000019AC E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   198                              <1>     ;Also sets rsi to point to the device SFT for 
   199 000019B1 7543                <1>     jnz .pullChar
   200 000019B3 803D(E3D80300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   201 000019BA 7507                <1>     jne .skiplookahead
   202 000019BC B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   203 000019BE E821FDFFFF          <1>     call mainCharIO
   204                              <1> .skiplookahead:
   205 000019C3 B484                <1>     mov ah, 84h
   206 000019C5 CD4A                <1>     int 4ah ;Multitasking keyboard loop
   207 000019C7 66813D(0FD90300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   207 000019CF FF                  <1>
   208 000019D0 751B                <1>     jne .skipClockRead
   209 000019D2 E8861F0000          <1>     call dosPushRegs
   210 000019D7 F8                  <1>     clc ;Clear CF, write primary header to backup
   211 000019D8 E882000000          <1>     call swapPrimaryHeader
   212 000019DD E8CF060000          <1>     call readDateTimeRecord
   213 000019E2 F9                  <1>     stc ;Set CF, write backup to primary header
   214 000019E3 E877000000          <1>     call swapPrimaryHeader
   215 000019E8 E8591F0000          <1>     call dosPopRegs
   216                              <1> .skipClockRead:
   217 000019ED 66FF05(0FD90300)    <1>     inc word [keybTicks]
   218 000019F4 EBB6                <1>     jmp short .readAgain
   219                              <1> .pullChar:
   220 000019F6 30E4                <1>     xor ah, ah
   221 000019F8 E8E7FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   222 000019FD 5E                  <1>     pop rsi
   223 000019FE 3C00                <1>     cmp al, NUL ;Is this the null char?
   224 00001A00 7507                <1>     jne .exit
   225                              <1>     ;We are mid extended ascii, prevent printer toggling
   226 00001A02 C605(0ED90300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   227                              <1> .exit:
   228                              <1>     return
    18                              <2> %%_ret:
    19 00001A09 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   229                              <1> 
   230                              <1> printString_B:      ;ah = 09h
   231 00001A0A 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   232                              <1> .ps0:
   233 00001A0D AC                  <1>     lodsb   ;Get char in al and inc rsi
   234 00001A0E 3C24                <1>     cmp al, "$" ;End of string char?
   235                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001A10 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   236 00001A12 E838FEFFFF          <1>     call charOut_B.in
   237 00001A17 EBF4                <1>     jmp short .ps0
   238                              <1> 
   239                              <1> checkStdinStatus:  ;ah = 0Bh
   240                              <1> ;Returns the status of the driver controlling vCon
   241 00001A19 E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   242 00001A1E B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   243                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001A20 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   244 00001A22 FEC8                <1>     dec al  ;Set al to -1 if char available
   245                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 00001A24 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   246                              <1> clearbuffDoFunc:   ;ah = 0Ch
   247                              <1> ;Clears any buffers and issues a console read command (the command in al)
   248                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   249 00001A25 50                  <1>     push rax
   250 00001A26 52                  <1>     push rdx
   251 00001A27 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   252 00001A29 E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   253 00001A2E 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   254 00001A30 B404                <1>     mov ah, 04h ;Flush input buffers
   255 00001A32 E8ADFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   256                              <1> .skipFlush:
   257 00001A37 5A                  <1>     pop rdx
   258 00001A38 58                  <1>     pop rax
   259 00001A39 88C4                <1>     mov ah, al  ;Move function number into ah
   260 00001A3B 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   261 00001A3D 7507                <1>     jne .others
   262 00001A3F 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   263 00001A42 7412                <1>     jz .bad ;Yes, exit
   264 00001A44 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   265                              <1> .others:
   266 00001A46 3C01                <1>     cmp al, 01h
   267 00001A48 740F                <1>     je .callFunction
   268 00001A4A 3C07                <1>     cmp al, 07h
   269 00001A4C 740B                <1>     je .callFunction
   270 00001A4E 3C08                <1>     cmp al, 08h
   271 00001A50 7407                <1>     je .callFunction
   272 00001A52 3C0A                <1>     cmp al, 0Ah
   273 00001A54 7403                <1>     je .callFunction
   274                              <1> .bad:
   275 00001A56 30C0                <1>     xor al, al
   276                              <1>     return
    18                              <2> %%_ret:
    19 00001A58 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   277                              <1> .callFunction:
   278 00001A59 FA                  <1>     cli ;Prepare to swap stack pointer
   279                              <1>     ;The below address avoids "properly" reentering DOS
   280                              <1>     ;We simply reuse the function dispatch aspect. 
   281                              <1>     ;this means we dont trash the caller's register frame 
   282 00001A5A E9161E0000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   283                              <1> ;------------------------
   284                              <1> ;  Primitive functions  :
   285                              <1> ;------------------------
   286                              <1> swapPrimaryHeader:
   287                              <1> ;Will swap the primary header to the backup or vice-versa, depending on
   288                              <1> ; CF. CF = NC, write to backup, CF=CY, read from backup
   289 00001A5F 56                  <1>     push rsi
   290 00001A60 57                  <1>     push rdi
   291 00001A61 51                  <1>     push rcx
   292 00001A62 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   292 00001A6B 00                  <1>
   293 00001A6C 488D35(22C40300)    <1>     lea rsi, primReqHdr
   294 00001A73 488D3D(E4D80300)    <1>     lea rdi, bkupReqHdr
   295 00001A7A 7303                <1>     jnc .read
   296 00001A7C 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   297                              <1> .read:
   298 00001A7F F3A4                <1>     rep movsb   ;Swap
   299 00001A81 59                  <1>     pop rcx
   300 00001A82 5F                  <1>     pop rdi
   301 00001A83 5E                  <1>     pop rsi
   302                              <1>     return
    18                              <2> %%_ret:
    19 00001A84 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   303                              <1> outputOnStdout:
   304                              <1> ;Input: al = Char to output
   305                              <1> ;Output: CF=CY, all good
   306 00001A85 53                  <1>     push rbx
   307 00001A86 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   308 00001A8B E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   309 00001A90 7217                <1>     jc .exit
   310 00001A92 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   311 00001A98 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   312 00001A9A 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   313 00001A9E 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   314 00001AA4 7405                <1>     jz .notCharDevOrFast
   315 00001AA6 CD49                <1>     int 49h ;Fast output
   316                              <1> .exitOk:
   317 00001AA8 F8                  <1>     clc
   318                              <1> .exit:
   319 00001AA9 5B                  <1>     pop rbx
   320                              <1>     return
    18                              <2> %%_ret:
    19 00001AAA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   321                              <1> .notCharDevOrFast:
   322 00001AAB E809000000          <1>     call outputOnSFT
   323 00001AB0 5B                  <1>     pop rbx
   324                              <1>     return
    18                              <2> %%_ret:
    19 00001AB1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   325                              <1> 
   326                              <1> outputToHandle:
   327                              <1> ;Char to output must be in al
   328 00001AB2 E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   329                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001AB7 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   330                              <1> outputOnSFT:
   331                              <1> ;Output char in al to SFT in rsi
   332                              <1> ;Waits until device is not busy to send char.
   333                              <1> ;Calls int 48h if device busy
   334 00001AB9 50                  <1>     push rax
   335 00001ABA B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   336 00001ABC E823FCFFFF          <1>     call mainCharIO
   337 00001AC1 58                  <1>     pop rax
   338 00001AC2 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   339 00001AC4 B402                <1>     mov ah, 02h ;Output char in al
   340 00001AC6 E819FCFFFF          <1>     call mainCharIO
   341 00001ACB F8                  <1>     clc
   342                              <1>     return
    18                              <2> %%_ret:
    19 00001ACC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   343                              <1> .signalLoop:
   344 00001ACD E802000000          <1>     call callInt48h
   345 00001AD2 EBE5                <1>     jmp short outputOnSFT
   346                              <1> 
   347                              <1> callInt48h:
   348                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   349 00001AD4 9C                  <1>     pushfq
   350 00001AD5 F605(F6C30300)FF    <1>     test byte [int48Flag], -1
   351 00001ADC 7417                <1>     jz .exit    ;If zero, not safe
   352 00001ADE F605(69C30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   353 00001AE5 750E                <1>     jnz .exit
   354                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   355 00001AE7 FF35(F6C30300)      <1>     push qword [int48Flag] 
   356 00001AED CD48                <1>     int 48h
   357 00001AEF 8F05(F6C30300)      <1>     pop qword [int48Flag]    ;Return original value
   358                              <1> .exit:
   359 00001AF5 9D                  <1>     popfq
   360                              <1>     return
    18                              <2> %%_ret:
    19 00001AF6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   361                              <1> 
   362                              <1> 
   363                              <1> vConCtrlCheck:
   364                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   365                              <1> ; the processing. 
   366                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   367                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   368                              <1> ;
   369                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   370                              <1> ;^S will pause screen processing until another key is processed by vCon input
   371                              <1> ;^P will toggle the printer echo feature of the vConsole
   372                              <1> ;
   373                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   374                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   375                              <1> ;
   376                              <1> ;Output: 
   377                              <1> ;   CF=CY : Error
   378                              <1> ;   CF=NC : ...
   379                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   380                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   381 00001AF7 E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   382 00001AFC 53                  <1>     push rbx
   383 00001AFD 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   384 00001AFF E8BA000000          <1>     call getCharDevSFT
   385 00001B04 5B                  <1>     pop rbx
   386                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001B05 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   387 00001B07 B401                <1>     mov ah, 01  ;Non destructively read CON
   388 00001B09 E8D6FBFFFF          <1>     call mainCharIO
   389 00001B0E 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   390                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   391 00001B10 3C13                <1>     cmp al, DC3 ;^S ?
   392 00001B12 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   393 00001B14 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   394 00001B16 E8C9FBFFFF          <1>     call mainCharIO
   395 00001B1B E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   396                              <1> .checkPrintOrExit:
   397 00001B20 3C10                <1>     cmp al, DLE ;Do we have ^P?
   398 00001B22 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   399 00001B24 3C03                <1>     cmp al, ETX ;Do we have ^C?
   400 00001B26 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   401                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   402                              <1>     return 
    18                              <2> %%_ret:
    19 00001B28 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   403                              <1> .printToggle:
   404 00001B29 F615(31C30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   405 00001B2F 53                  <1>     push rbx
   406 00001B30 BB04000000          <1>     mov ebx, 4  ;PRN handle
   407 00001B35 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   408 00001B3A 5B                  <1>     pop rbx
   409                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001B3B 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   410 00001B3D 57                  <1>     push rdi
   411 00001B3E 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   412 00001B41 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   413 00001B47 741D                <1>     jz .notNet
   414 00001B49 50                  <1>     push rax
   415 00001B4A B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   416 00001B4F CD4F                <1>     int 4Fh
   417 00001B51 58                  <1>     pop rax
   418 00001B52 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   419                              <1>     ;If something went wrong, turn off echo
   420 00001B54 C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   421 00001B5B 50                  <1>     push rax
   422 00001B5C B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   423 00001B61 CD4F                <1>     int 4Fh
   424 00001B63 58                  <1>     pop rax
   425 00001B64 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   426                              <1> .notNet:
   427                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   428                              <1> ; 0Dh or 0Eh
   429 00001B66 803D(31C30300)00    <1>     cmp byte [printEcho], 00
   430 00001B6D 7507                <1>     jnz .echoOn
   431 00001B6F E84EFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   432 00001B74 EB05                <1>     jmp short .printExit
   433                              <1> .echoOn:
   434 00001B76 E83EFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   435                              <1> .printExit:
   436 00001B7B 5F                  <1>     pop rdi
   437                              <1>     return
    18                              <2> %%_ret:
    19 00001B7C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   438                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   439 00001B7D E852FFFFFF          <1>     call callInt48h
   440                              <1> .waitNextChar:   ;Here get next char
   441 00001B82 B401                <1>     mov ah, 01h ;ND read
   442 00001B84 E85BFBFFFF          <1>     call mainCharIO
   443 00001B89 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   444                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   445 00001B8B 53                  <1>     push rbx
   446 00001B8C 31DB                <1>     xor ebx, ebx
   447 00001B8E E82B000000          <1>     call getCharDevSFT
   448 00001B93 5B                  <1>     pop rbx
   449                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001B94 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   450 00001B96 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   451 00001B98 E847FBFFFF          <1>     call mainCharIO
   452 00001B9D 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   453 00001B9F 7514                <1>     jnz .checkBreak2
   454 00001BA1 803D(0ED90300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   455 00001BA8 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   456 00001BAE C605(0ED90300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   457                              <1> .checkBreak2:
   458 00001BB5 3C03                <1>     cmp al, ETX
   459                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001BB7 75C3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   460 00001BB9 E9E9150000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   461                              <1> 
   462                              <1> 
   463                              <1> getCharDevSFT:
   464                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   465                              <1> ;Input: bx = zero extended handle number
   466                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   467                              <1> ;        CF=CY => al = Error code, abort operation
   468 00001BBE F605(F5C30300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   469 00001BC5 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   470                              <1> .getSFT:
   471 00001BC7 57                  <1>     push rdi
   472 00001BC8 E8160D0000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   473 00001BCD 4889FE              <1>     mov rsi, rdi
   474 00001BD0 5F                  <1>     pop rdi
   475                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 00001BD1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   476                              <1> .swap:
   477                              <1> ;workingSFT is only set for CON calls
   478 00001BD2 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   479 00001BD8 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   480 00001BDA 488B35(71C60300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   481 00001BE1 F8                  <1>     clc
   482                              <1>     return
    18                              <2> %%_ret:
    19 00001BE2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   483                              <1> 
   484                              <1> ;------------------------
   485                              <1> ;   Utility functions   :
   486                              <1> ;------------------------
   487                              <1> printCaretASCII:
   488                              <1> ;Input: al = Char to print with a caret
   489                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   490                              <1> ;First check if the char should be careted, and then print normally if so
   491 00001BE3 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   492 00001BE5 0F8364FCFFFF        <1>     jae charOut_B.in
   493 00001BEB 3C09                <1>     cmp al, TAB
   494 00001BED 0F845CFCFFFF        <1>     je charOut_B.in
   495 00001BF3 3C15                <1>     cmp al, NAK
   496 00001BF5 0F8454FCFFFF        <1>     je charOut_B.in
   497 00001BFB 3C14                <1>     cmp al, DC4
   498 00001BFD 0F844CFCFFFF        <1>     je charOut_B.in
   499 00001C03 50                  <1>     push rax
   500 00001C04 B05E                <1>     mov al, "^" ;Get caret in place
   501 00001C06 E844FCFFFF          <1>     call charOut_B.in
   502 00001C0B 58                  <1>     pop rax
   503 00001C0C 0440                <1>     add al, "@" ;Turn into an ASCII Char
   504 00001C0E E93CFCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   505                              <1> printCRLF:
   506 00001C13 B00D                <1>     mov al, CR
   507 00001C15 E835FCFFFF          <1>     call charOut_B.in
   508 00001C1A B00A                <1>     mov al, LF
   509 00001C1C E92EFCFFFF          <1>     jmp charOut_B.in
   510                              <1> 
   511                              <1> checkBreak:
   512                              <1> ;Reads bytes from CON if there are any bytes to read and 
   513                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   514 00001C21 803D(6AC30300)01    <1>     cmp byte [inDOS], 1
   515                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001C28 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   516                              <1> ;Returns in al the keystroke that is available IF one is available
   517                              <1> ; or al=0 if no keystroke available
   518 00001C2A 53                  <1>     push rbx
   519 00001C2B 56                  <1>     push rsi
   520 00001C2C 488B35(4BC00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   521                              <1>     ;Place command code and a zero status word at the same time
   522 00001C33 C705(4EC40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   522 00001C3B 0000                <1>
   523                              <1>     ;Place the packet size in the hdrlen field
   524 00001C3D C605(4CC40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   525 00001C44 488D1D(4CC40300)    <1>     lea rbx, critReqHdr
   526 00001C4B E8C4150000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   527                              <1>     ;Check if the busy bit is set (No keystroke available)
   528 00001C50 66F705(4FC40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   528 00001C58 02                  <1>
   529 00001C59 7405                <1>     jz .charFound
   530                              <1> .exit:
   531 00001C5B 30C0                <1>     xor al, al
   532 00001C5D 5E                  <1>     pop rsi
   533 00001C5E 5B                  <1>     pop rbx
   534                              <1>     return
    18                              <2> %%_ret:
    19 00001C5F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   535                              <1> .charFound:
   536                              <1> ;Keystroke available, proceed
   537 00001C60 8A05(59C40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   538 00001C66 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   539 00001C68 75F1                <1>     jne .exit   ;If not equal exit
   540                              <1> ;Now we pull the char out of the buffer
   541 00001C6A C705(4EC40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   541 00001C72 0000                <1>
   542 00001C74 C605(4CC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   543                              <1>     ;Place pointers and number of chars
   544 00001C7B C705(62C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   544 00001C83 0000                <1>
   545                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   546 00001C85 488D05(59C40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   547 00001C8C 488905(5AC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   548 00001C93 E87C150000          <1>     call goDriver   ;RSI and RBX as before
   549 00001C98 E90A150000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   550                              <1> 
   551                              <1> vConSwapDriver:
   552                              <1> ;Sets up the vCon to use the alternative SFT pointer
   553 00001C9D 57                  <1>     push rdi
   554 00001C9E C605(F5C30300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   555 00001CA5 488B3D(81C60300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   556 00001CAC 48893D(71C60300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   557 00001CB3 5F                  <1>     pop rdi
   558                              <1>     return
    18                              <2> %%_ret:
    19 00001CB4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   559                              <1> 
   560                              <1> vConRetDriver:
   561                              <1> ;Returns the original driver (sets flag down)
   562 00001CB5 C605(F5C30300)00    <1>     mov byte [vConDrvSwp], 0
   563                              <1>     return
    18                              <2> %%_ret:
    19 00001CBC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   564                              <1> 
   565                              <1> ;--------------------------------------------------
   566                              <1> ;      Main Keyboard Buffered Input Function      :
   567                              <1> ;--------------------------------------------------
   568                              <1> buffCharInput_BE:  ;ah = 0Ah
   569                              <1> ;Buffer pointer in rdx
   570                              <1> ; byte [rdx + 0], buffer length
   571                              <1> ; byte [rdx + 1], number of chars in buffer
   572                              <1> ; byte [rdx + 2], buffer start
   573                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   574                              <1> ;Register use
   575                              <1> ; dh = Char offset in internal buffer
   576                              <1> ; dl = Buffer length
   577                              <1> ; bh = Char offset in user buffer
   578                              <1> ; bl = Number of chars already in the buffer
   579                              <1> ; rdi = Internal buffer
   580                              <1> ; rsi = User buffer
   581 00001CBD 4889D6              <1>     mov rsi, rdx
   582 00001CC0 66AD                <1>     lodsw   ;Get buffer metadata in ax
   583 00001CC2 84C0                <1>     test al, al
   584                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001CC4 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   585 00001CC6 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   586 00001CC9 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   587 00001CCB 7606                <1>     jbe .avoidcheck
   588 00001CCD 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   589 00001CD1 7402                <1>     je .functionKeyOk
   590                              <1> .avoidcheck:
   591 00001CD3 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   592                              <1> .functionKeyOk:
   593 00001CD5 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   594 00001CD8 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   595                              <1> .breakEP:
   596 00001CDA 8A05(2EC20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   597 00001CE0 8805(2FC20300)      <1>     mov byte [vConCurCnt], al
   598 00001CE6 56                  <1>     push rsi    ;Push user buffer address
   599 00001CE7 488D3D(30C20300)    <1>     lea rdi, vConBuffer
   600 00001CEE C605(5DC60300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   601                              <1> .mainLoop:
   602 00001CF5 E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   603 00001CFA 3C0A                <1>     cmp al, LF
   604 00001CFC 7505                <1>     jne .checkControlChars
   605                              <1> .mainLoop2:
   606 00001CFE E8A8FCFFFF          <1>     call charIn_B
   607                              <1> .checkControlChars:
   608 00001D03 3C06                <1>     cmp al, ACK
   609 00001D05 74F7                <1>     je .mainLoop2   ;Get another char
   610 00001D07 3A0554E3FFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   611 00001D0D 0F8426010000        <1>     je .escape
   612 00001D13 3C7F                <1>     cmp al, DEL
   613 00001D15 0F8489000000        <1>     je .delete
   614 00001D1B 3C08                <1>     cmp al, BSP
   615 00001D1D 0F8481000000        <1>     je .delete
   616 00001D23 3C17                <1>     cmp al, ETB
   617                              <1>     ;Add space for patched jump instructions
   618 00001D25 9090909090          <1>     db 5 dup (90h)  ;NOP
   619 00001D2A 3C15                <1>     cmp al, NAK
   620 00001D2C 9090909090          <1>     db 5 dup (90h)
   621 00001D31 3C0D                <1>     cmp al, CR
   622 00001D33 744C                <1>     je .carriageReturn
   623 00001D35 3C0A                <1>     cmp al, LF
   624 00001D37 7461                <1>     je .lineFeed
   625 00001D39 3A0523E3FFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   626 00001D3F 7429                <1>     je .break
   627                              <1> .checkIfCanInsert:
   628 00001D41 38D6                <1>     cmp dh, dl
   629 00001D43 731C                <1>     jae .bufOflw
   630 00001D45 AA                  <1>     stosb   ;Store the byte and increment rdi!
   631 00001D46 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   632 00001D48 E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   633 00001D4D 803D(5DC60300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   634 00001D54 75A8                <1>     jne .mainLoop2
   635                              <1>     ;IF not in insert mode, we fall here
   636                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   637                              <1>     ; or insert chars if needed.
   638 00001D56 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   639 00001D58 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   640 00001D5A 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   641 00001D5D FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   642 00001D5F EB9D                <1>     jmp short .mainLoop2
   643                              <1> .bufOflw:
   644                              <1> ;Buffer overflow
   645 00001D61 B007                <1>     mov al, BEL ;Sound the bell
   646 00001D63 E8E7FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   647 00001D68 EB94                <1>     jmp short .mainLoop2
   648                              <1> .break:
   649                              <1> ;Break, Place a "\", and do a CRLF
   650 00001D6A B05C                <1>     mov al, "\"
   651 00001D6C E8DEFAFFFF          <1>     call charOut_B.in
   652 00001D71 5E                  <1>     pop rsi ;Realign stack
   653                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   654 00001D72 E89CFEFFFF          <1>     call printCRLF
   655                              <1>     ;Align to next tabstop
   656 00001D77 E85AFBFFFF          <1>     call charOut_B.tab
   657 00001D7C E959FFFFFF          <1>     jmp .breakEP
   658                              <1> .carriageReturn:
   659 00001D81 AA                  <1>     stosb
   660 00001D82 E8C8FAFFFF          <1>     call charOut_B.in
   661 00001D87 5F                  <1>     pop rdi ;User buffer address was pushed 
   662 00001D88 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   663 00001D8B FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   664                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   665 00001D8D 488D35(30C20300)    <1>     lea rsi, vConBuffer
   666 00001D94 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   667 00001D97 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   668                              <1>     return
    18                              <2> %%_ret:
    19 00001D99 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   669                              <1> .lineFeed:
   670 00001D9A E874FEFFFF          <1>     call printCRLF
   671 00001D9F E95AFFFFFF          <1>     jmp .mainLoop2
   672                              <1> .delete:
   673 00001DA4 E805000000          <1>     call .removeChar
   674 00001DA9 E950FFFFFF          <1>     jmp .mainLoop2
   675                              <1> .removeChar:
   676 00001DAE 84F6                <1>     test dh, dh ;Is char count 0?
   677 00001DB0 741C                <1>     jz .normalChar   ;If so, skip going back!
   678 00001DB2 E868000000          <1>     call .vConErase
   679 00001DB7 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   680 00001DB9 3C20                <1>     cmp al, SPC
   681 00001DBB 7311                <1>     jae .normalChar
   682 00001DBD 3C09                <1>     cmp al, TAB
   683 00001DBF 7420                <1>     je .eraTab
   684 00001DC1 3C15                <1>     cmp al, NAK
   685 00001DC3 7409                <1>     je .normalChar
   686 00001DC5 3C14                <1>     cmp al, DC4
   687 00001DC7 7405                <1>     je .normalChar
   688 00001DC9 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   689                              <1> .normalChar:
   690 00001DCE 803D(5DC60300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   691                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001DD5 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   692 00001DD7 84FF                <1>     test bh, bh ;Beginning of user buffer?
   693                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001DD9 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   694 00001DDB 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   695 00001DDE FECF                <1>     dec bh
   696                              <1>     return
    18                              <2> %%_ret:
    19 00001DE0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   697                              <1> .eraTab:
   698                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   699                              <1> ; up to a tab stop worth of space chars printed
   700 00001DE1 57                  <1>     push rdi
   701 00001DE2 48FFCF              <1>     dec rdi
   702 00001DE5 FD                  <1>     std ;Go backwards
   703 00001DE6 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   704 00001DE9 B020                <1>     mov al, SPC
   705 00001DEB 53                  <1>     push rbx
   706 00001DEC BB07000000          <1>     mov ebx, 7
   707 00001DF1 67E30D              <1>     jecxz .onTabstop
   708                              <1> .scanString:
   709 00001DF4 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   710 00001DF5 7608                <1>     jbe .notChar    ;No, skip handling
   711 00001DF7 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   712 00001DFB 740A                <1>     je .tabChar
   713 00001DFD FECB                <1>     dec bl
   714                              <1> .notChar:
   715 00001DFF E2F3                <1>     loop .scanString
   716                              <1> .onTabstop:
   717 00001E01 2A1D(2FC20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   718                              <1> .tabChar:
   719 00001E07 28F3                <1>     sub bl, dh  ;Same on tabstop
   720 00001E09 00D9                <1>     add cl, bl
   721 00001E0B 80E107              <1>     and cl, 7
   722 00001E0E 5B                  <1>     pop rbx
   723 00001E0F 5F                  <1>     pop rdi
   724 00001E10 FC                  <1>     cld
   725 00001E11 74BB                <1>     jz .normalChar
   726                              <1>     ;Now erase all the spaces placed on the vCon
   727                              <1> .vConDelTab:
   728 00001E13 E80C000000          <1>     call .vConEraseNoDec
   729 00001E18 E2F9                <1>     loop .vConDelTab
   730 00001E1A E9AFFFFFFF          <1>     jmp .normalChar
   731                              <1> .vConErase:
   732                              <1> ;Erase the char on the vCon
   733                              <1> ;Return through the output function
   734 00001E1F 48FFCF              <1>     dec rdi ;Go back a space in the 
   735 00001E22 FECE                <1>     dec dh  ;Decrement char count in the buffer
   736                              <1> .vConEraseNoDec:
   737 00001E24 B008                <1>     mov al, BSP ;Move cursor back
   738 00001E26 E824FAFFFF          <1>     call charOut_B.in
   739 00001E2B B020                <1>     mov al, SPC ;Replace with a space
   740 00001E2D E81DFAFFFF          <1>     call charOut_B.in
   741 00001E32 B008                <1>     mov al, BSP ;Move cursor back again
   742 00001E34 E916FAFFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   743                              <1> .escape:
   744                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   745                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   746                              <1> ; including the function keys.
   747 00001E39 FF251AE2FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   748                              <1> .f2:
   749 00001E3F E846000000          <1>     call .fCommon2
   750 00001E44 EB0C                <1>     jmp short .fCommon
   751                              <1> .f3:
   752 00001E46 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   753 00001E49 28F9                <1>     sub cl, bh  ;Sub our current position
   754 00001E4B EB05                <1>     jmp short .fCommon
   755                              <1> .f1:
   756 00001E4D B901000000          <1>     mov ecx, 1  ;Get one char
   757                              <1> .fCommon:
   758 00001E52 C605(5DC60300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   759 00001E59 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   760 00001E5B 0F849DFEFFFF        <1>     je .mainLoop2
   761 00001E61 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   762 00001E63 0F8495FEFFFF        <1>     je .mainLoop2
   763                              <1>     ;Else, copy byte by byte, and retain char in al
   764 00001E69 AC                  <1>     lodsb
   765 00001E6A AA                  <1>     stosb
   766 00001E6B E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   767 00001E70 FEC7                <1>     inc bh
   768 00001E72 FEC6                <1>     inc dh
   769 00001E74 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   770 00001E76 E983FEFFFF          <1>     jmp .mainLoop2
   771                              <1> .f4:
   772 00001E7B E80A000000          <1>     call .fCommon2
   773 00001E80 4801CE              <1>     add rsi, rcx
   774 00001E83 00CF                <1>     add bh, cl
   775 00001E85 E974FEFFFF          <1>     jmp .mainLoop2
   776                              <1> .fCommon2:
   777 00001E8A E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   778 00001E8F 3A05CCE1FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   779 00001E95 750B                <1>     jne .fnotEscape
   780                              <1>     ;Get another char if they typed escape and force it in the buffer
   781                              <1>     ; Do not return to caller
   782 00001E97 E80FFBFFFF          <1>     call charIn_B
   783                              <1> .fforceExit:
   784 00001E9C 59                  <1>     pop rcx ;Get original return address from stack
   785 00001E9D E95CFEFFFF          <1>     jmp .mainLoop2
   786                              <1> .fnotEscape:
   787 00001EA2 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   788 00001EA5 28F9                <1>     sub cl, bh
   789 00001EA7 74F3                <1>     jz .fforceExit
   790 00001EA9 FFC9                <1>     dec ecx
   791 00001EAB 74EF                <1>     jz .fforceExit
   792 00001EAD 57                  <1>     push rdi
   793 00001EAE 4889F7              <1>     mov rdi, rsi
   794 00001EB1 48FFC7              <1>     inc rdi
   795 00001EB4 F2AE                <1>     repne scasb ;Search for the char to start printing from
   796 00001EB6 5F                  <1>     pop rdi
   797 00001EB7 75E3                <1>     jne .fforceExit ;If char not found, return
   798 00001EB9 F6D1                <1>     not cl
   799 00001EBB 00D9                <1>     add cl, bl
   800 00001EBD 28F9                <1>     sub cl, bh
   801                              <1>     return
    18                              <2> %%_ret:
    19 00001EBF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   802                              <1> .f5:
   803 00001EC0 B040                <1>     mov al, "@"
   804 00001EC2 E888F9FFFF          <1>     call charOut_B.in   ;Print the char
   805 00001EC7 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   806 00001EC8 57                  <1>     push rdi
   807 00001EC9 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   808 00001ECE 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   809 00001ECF 88F3                <1>     mov bl, dh
   810 00001ED1 E99CFEFFFF          <1>     jmp .breakAlt
   811                              <1> .f6:
   812                              <1> ;If the user wants to insert a EOF, they can use F6
   813 00001ED6 B01A                <1>     mov al, EOF
   814 00001ED8 E964FEFFFF          <1>     jmp .checkIfCanInsert
   815                              <1> .f7:
   816                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   817 00001EDD 8A057EE1FFFF        <1>     mov al, byte [extESC]
   818 00001EE3 E959FEFFFF          <1>     jmp .checkIfCanInsert
   819                              <1> .toggleIns:
   820 00001EE8 F615(5DC60300)      <1>     not byte [vConInsert]   ;Toggle
   821                              <1>     return
    18                              <2> %%_ret:
    19 00001EEE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   822                              <1> .eDel:
   823 00001EEF 38DF                <1>     cmp bh, bl
   824 00001EF1 0F8407FEFFFF        <1>     je .mainLoop2
   825 00001EF7 FEC7                <1>     inc bh
   826 00001EF9 48FFC6              <1>     inc rsi
   827 00001EFC E9FDFDFFFF          <1>     jmp .mainLoop2
   828                              <1> 
   829                              <1> editKeys:
   830                              <1> ;Our Default Extended keys handler
   831 00001F01 E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   832 00001F06 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   833 00001F0B 57                  <1>     push rdi    ;Preserve rdi
   834 00001F0C 488D3D50E1FFFF      <1>     lea rdi, extKeyTbl
   835 00001F13 57                  <1>     push rdi
   836                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   837                              <1>     ; offset of function from extKeyTbl
   838                              <1> .lp:
   839 00001F14 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   840 00001F15 7411                <1>     je .charFound
   841 00001F17 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   842 00001F19 0F84DFFDFFFF        <1>     jz buffCharInput_BE.mainLoop2
   843 00001F1F 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   844 00001F26 EBEC                <1>     jmp short .lp
   845                              <1> .charFound:
   846 00001F28 59                  <1>     pop rcx ;Pop back the effective address of the table
   847 00001F29 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   848 00001F2D 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   849 00001F30 5F                  <1>     pop rdi
   850 00001F31 FFE1                <1>     jmp rcx
    27                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    28                              <1> ;Major kernel date time functions and subroutines
    29                              <1> 
    30                              <1> getDate:           ;ah = 2Ah
    31 00001F33 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
    32 00001F38 E8AD160000          <1>     call getUserRegs
    33 00001F3D 668B15(EFC30300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
    34                              <1> ;    mov dh, byte [monthOfYear]
    35 00001F44 0FB60D(F1C30300)    <1>     movzx ecx, byte [years]
    36 00001F4B 8A05(F4C30300)      <1>     mov al, byte [dayOfWeek]
    37 00001F51 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    38 00001F55 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    39                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 00001F59 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    40                              <1> setDate:           ;ah = 2Bh
    41                              <1> ;	CX = year (1980-2099)
    42                              <1> ;   DH = month (1-12)
    43                              <1> ;	DL = day (1-31)
    44 00001F5A E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    45                              <1>     return
    18                              <2> %%_ret:
    19 00001F5F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> getTime:           ;ah = 2Ch
    47 00001F60 E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    48 00001F65 E880160000          <1>     call getUserRegs
    49 00001F6A 668B0D(7AC40300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.hours]
    50 00001F71 668B15(7BC40300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    51 00001F78 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    52 00001F7C 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    53                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 00001F80 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> setTime:           ;ah = 2Dh
    55                              <1> ;   CH = hour (0-23)
    56                              <1> ;	CL = minutes (0-59)
    57                              <1> ;	DH = seconds (0-59)
    58                              <1> ;	DL = hundredths (0-99)
    59 00001F81 80FD17              <1>     cmp ch, 23
    60 00001F84 7749                <1>     ja .exitBad
    61 00001F86 80F93B              <1>     cmp cl, 59
    62 00001F89 7744                <1>     ja .exitBad
    63 00001F8B 80FE3B              <1>     cmp dh, 59
    64 00001F8E 773F                <1>     ja .exitBad
    65 00001F90 80FA63              <1>     cmp dl, 99
    66 00001F93 773A                <1>     ja .exitBad
    67                              <1> ;Now we read date (updating internal count if necessary)
    68 00001F95 E817010000          <1>     call readDateTimeRecord
    69 00001F9A 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    70 00001FA1 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    71 00001FA8 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    72 00001FAB 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    73 00001FAF 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    74 00001FB3 B906000000          <1>     mov ecx, 6
    75 00001FB8 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    76 00001FBB E8CA140000          <1>     call primReqWriteSetup   ;rbx now points to request header
    77 00001FC0 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    78 00001FC7 E848120000          <1>     call goDriver
    79 00001FCC 30C0                <1>     xor al, al
    80                              <1>     return
    18                              <2> %%_ret:
    19 00001FCE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    81                              <1> .exitBad:
    82 00001FCF B0FF                <1>     mov al, -1
    83                              <1>     return
    18                              <2> %%_ret:
    19 00001FD1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    84                              <1> ;------------------------
    85                              <1> ;   Utility functions   :
    86                              <1> ;------------------------
    87                              <1> writeDate:
    88 00001FD2 6681F97800          <1>     cmp cx, 120
    89 00001FD7 0F83D1000000        <1>     jae .exitBad
    90 00001FDD 80FE0C              <1>     cmp dh, 12
    91 00001FE0 0F87C8000000        <1>     ja .exitBad
    92 00001FE6 80FA1F              <1>     cmp dl, 31
    93 00001FE9 0F87BF000000        <1>     ja .exitBad
    94 00001FEF 668915(EFC30300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    95                              <1>     ;mov byte [monthOfYear], dh
    96 00001FF6 880D(F1C30300)      <1>     mov byte [years], cl    ;Save the years count
    97 00001FFC E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    98 00002001 88CD                <1>     mov ch, cl ;Get years count in ch
    99 00002003 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
   100 00002006 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
   101 00002009 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
   102 0000200C BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
   103 00002011 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
   104                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
   105 00002013 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
   106 00002016 67E316              <1>     jecxz .addDay    ;Skip adding years
   107 00002019 056E010000          <1>     add eax, 366    ;First add for a leap year
   108                              <1> .addYears:
   109 0000201E FFC9                <1>     dec ecx
   110 00002020 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
   111 00002023 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   112 00002028 EBF4                <1>     jmp short .addYears
   113                              <1> .addLeap:
   114 0000202A 056E010000          <1>     add eax, 366    ;Add the days in the leap year
   115                              <1> .addDay:
   116 0000202F 89C2                <1>     mov edx, eax    ;Save this number in edx
   117                              <1>     ;Now to add day offset
   118 00002031 0FB60D(F0C30300)    <1>     movzx ecx, byte [monthOfYear]
   119 00002038 488D3545E0FFFF      <1>     lea rsi, monthsTbl
   120                              <1> .addDaysInMonth:
   121 0000203F FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   122 00002041 67E308              <1>     jecxz .addMonthOffset
   123 00002044 AC                  <1>     lodsb   ;Get the number of days in the month in al
   124 00002045 0FB6C0              <1>     movzx eax, al
   125 00002048 01C2                <1>     add edx, eax
   126 0000204A EBF3                <1>     jmp short .addDaysInMonth
   127                              <1> .addMonthOffset:
   128 0000204C 0FB60D(EFC30300)    <1>     movzx ecx, byte [dayOfMonth]
   129 00002053 FFC9                <1>     dec ecx
   130 00002055 01CA                <1>     add edx, ecx    ;Add month offset
   131                              <1>     ;edx has the number of days since 01/01/1980
   132 00002057 668915(F2C30300)    <1>     mov word [daysOffset], dx   ;Store!
   133                              <1> ;Now read and then write CLOCKrecrd
   134 0000205E 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   135 00002065 B906000000          <1>     mov ecx, 6
   136 0000206A 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   137 0000206D E823140000          <1>     call primReqReadSetup   ;rbx now points to request header
   138 00002072 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   139 00002079 E896110000          <1>     call goDriver
   140                              <1> ;Now we change daycount and write it back
   141 0000207E 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   142 00002085 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   143 0000208C 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   144 0000208F B906000000          <1>     mov ecx, 6
   145 00002094 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   146 00002097 E8EE130000          <1>     call primReqWriteSetup   ;rbx now points to request header
   147 0000209C 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   148 000020A3 E86C110000          <1>     call goDriver
   149 000020A8 E8AE000000          <1>     call setDayofWeek
   150                              <1>     return
    18                              <2> %%_ret:
    19 000020AD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   151                              <1> .exitBad:
   152 000020AE B0FF                <1>     mov al, -1
   153                              <1>     return
    18                              <2> %%_ret:
    19 000020B0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   154                              <1> 
   155                              <1> readDateTimeRecord:
   156                              <1> ;Will read the clock using the primary request header
   157                              <1> ;Preserves all regs except eax and flags
   158 000020B1 53                  <1>     push rbx
   159 000020B2 51                  <1>     push rcx
   160 000020B3 52                  <1>     push rdx
   161 000020B4 56                  <1>     push rsi
   162 000020B5 55                  <1>     push rbp
   163                              <1> 
   164 000020B6 66C705(0FD90300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   164 000020BE 00                  <1>
   165 000020BF 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   166 000020C6 B906000000          <1>     mov ecx, 6
   167 000020CB 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   168                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   169                              <1> ; rbx = Data storage buffer ptr
   170                              <1> ; ecx = Number of sectors to transfer
   171                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   172 000020CE E8C2130000          <1>     call primReqReadSetup   ;rbx now points to request header
   173 000020D3 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   174 000020DA E835110000          <1>     call goDriver
   175 000020DF 0FB705(77C40300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   176                              <1> ;Here we have:  ax = Days since 1/1/1980
   177                              <1> ;Updates the internal date fields
   178                              <1> ;Internal time fields are in the clock record
   179                              <1> ;So now we check if the number of days since 1980 are the same.
   180                              <1> ;If so, we can skip updating.
   181 000020E6 663B05(F2C30300)    <1>     cmp ax, word [daysOffset]
   182 000020ED 7466                <1>     je .exit    ;Return if equal
   183 000020EF 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   184 000020F4 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   185 000020F6 668905(F2C30300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   186                              <1>     ;Now want to update years, month and day fields
   187                              <1>     ;ax has the number of days since 01/01/1980
   188                              <1>     ;Get days in a 4 year period
   189 000020FD BBB5050000          <1>     mov ebx, 365*4 + 1
   190 00002102 31D2                <1>     xor edx, edx
   191 00002104 89D1                <1>     mov ecx, edx  ;Zero ecx
   192 00002106 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   193                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   194                              <1>     ;edx has offset into current 4 year bunch
   195 00002108 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   196 0000210D 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   197 0000210F 7210                <1>     jb .foundBunch
   198 00002111 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   199 00002113 FFC1                <1>     inc ecx
   200 00002115 FFCB                <1>     dec ebx ;Number of days in a normal year
   201                              <1> .findBunch:
   202 00002117 39DA                <1>     cmp edx, ebx
   203 00002119 7206                <1>     jb .foundBunch
   204 0000211B 29DA                <1>     sub edx, ebx
   205 0000211D FFC1                <1>     inc ecx
   206 0000211F EBF6                <1>     jmp short .findBunch
   207                              <1> .foundBunch:
   208                              <1>     ;If ecx = 0, february has 29 days!
   209                              <1>     ;eax has number of four year bunches elapsed since 1980
   210 00002121 C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   211 00002124 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   212                              <1>     ;ecx now has the number of years since 1980
   213 00002126 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   214                              <1> ;edx has number of days into the year we are in
   215                              <1> ;eax has number of days in Feb for this year
   216 0000212B 488D3552DFFFFF      <1>     lea rsi, monthsTbl
   217 00002132 31C9                <1>     xor ecx, ecx    ;Use as month counter
   218                              <1> .monthSearch:
   219 00002134 FFC1                <1>     inc ecx ;Start from 1
   220 00002136 AC                  <1>     lodsb   ;Get value in al and inc rsi
   221 00002137 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   222 0000213A 39C2                <1>     cmp edx, eax
   223 0000213C 7204                <1>     jb .monthFound
   224 0000213E 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   225 00002140 EBF2                <1>     jmp short .monthSearch
   226                              <1> .monthFound:
   227                              <1>     ;cl has the month (01h-0Ch)
   228                              <1>     ;dl has the day of the month - 1
   229 00002142 FFC2                <1>     inc edx
   230 00002144 880D(F0C30300)      <1>     mov byte [monthOfYear], cl
   231 0000214A 8815(EFC30300)      <1>     mov byte [dayOfMonth], dl
   232 00002150 E806000000          <1>     call setDayofWeek
   233                              <1> .exit:
   234 00002155 5D                  <1>     pop rbp
   235 00002156 5E                  <1>     pop rsi
   236 00002157 5A                  <1>     pop rdx
   237 00002158 59                  <1>     pop rcx
   238 00002159 5B                  <1>     pop rbx
   239                              <1>     return  ;Return with ZF is date set, or same day
    18                              <2> %%_ret:
    19 0000215A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   240                              <1> 
   241                              <1> setDayofWeek:
   242                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   243 0000215B 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   244 00002162 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   245                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   246 00002167 31D2                <1>     xor edx, edx
   247 00002169 B907000000          <1>     mov ecx, 7   
   248 0000216E F7F1                <1>     div ecx  ;Get remainder in dl
   249 00002170 8815(F4C30300)      <1>     mov byte [dayOfWeek], dl
   250                              <1> ;Set ZF to indicate all ok
   251 00002176 31C0                <1>     xor eax, eax
   252                              <1>     return
    18                              <2> %%_ret:
    19 00002178 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   253                              <1> 
   254                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   255                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   256                              <1> ;Input: cl = Year - 1980
   257                              <1> ;Output: al = Number of days in February
   258 00002179 880D(F1C30300)      <1>     mov byte [years], cl    ;Save this figure
   259 0000217F F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   260 00002182 51                  <1>     push rcx
   261 00002183 57                  <1>     push rdi
   262 00002184 B81C000000          <1>     mov eax, 28  ;Usual days in february
   263 00002189 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   264 0000218E 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   265 00002191 488D3DEDDEFFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   266 00002198 AA                  <1>     stosb   ;Store the word in rdi
   267 00002199 5F                  <1>     pop rdi
   268 0000219A 59                  <1>     pop rcx
   269                              <1>     return
    18                              <2> %%_ret:
    19 0000219B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   270                              <1> 
   271                              <1> getDirDTwords:
   272                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   273                              <1> ; High word of eax = Date
   274                              <1> ; Low word of eax = Time
   275                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   276                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   277                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   278                              <1> 
   279                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   280                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   281                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   282                              <1> ;Preserves all registers except eax
   283 0000219C 53                  <1>     push rbx
   284 0000219D 0FB61D(7CC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   285 000021A4 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   286 000021A6 89D8                <1>     mov eax, ebx
   287 000021A8 0FB61D(79C40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   288 000021AF C1E305              <1>     shl ebx, 5
   289 000021B2 09D8                <1>     or eax, ebx
   290 000021B4 0FB61D(7AC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   291 000021BB C1E30B              <1>     shl ebx, 11
   292 000021BE 09D8                <1>     or eax, ebx
   293 000021C0 0FB61D(EFC30300)    <1>     movzx ebx, byte [dayOfMonth]
   294 000021C7 C1E310              <1>     shl ebx, 16
   295 000021CA 09D8                <1>     or eax, ebx
   296 000021CC 0FB61D(F0C30300)    <1>     movzx ebx, byte [monthOfYear]
   297 000021D3 C1E315              <1>     shl ebx, 21
   298 000021D6 09D8                <1>     or eax, ebx
   299 000021D8 0FB61D(F1C30300)    <1>     movzx ebx, byte [years]
   300 000021DF C1E319              <1>     shl ebx, 25
   301 000021E2 09D8                <1>     or eax, ebx
   302 000021E4 5B                  <1>     pop rbx
   303                              <1>     return
    18                              <2> %%_ret:
    19 000021E5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   304                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   305                              <1> ;Returns edx = time
   306                              <1> ;        eax = date
   307                              <1> ; Formally ax and dx but we clear the upper words
   308 000021E6 E8C6FEFFFF          <1>     call readDateTimeRecord
   309 000021EB E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   310 000021F0 31D2                <1>     xor edx, edx
   311 000021F2 6689C2              <1>     mov dx, ax  ;Save time
   312 000021F5 C1E810              <1>     shr eax, 10h    ;Get date into rax
   313                              <1>     return
    18                              <2> %%_ret:
    19 000021F8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    28                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    29                              <1> openFileFCB:       ;ah = 0Fh
    30                              <1> closeFileFCB:      ;ah = 10h
    31                              <1> findFirstFileFCB:  ;ah = 11h
    32                              <1> findNextFileFCB:   ;ah = 12h
    33                              <1> deleteFileFCB:     ;ah = 13h
    34                              <1> sequentialReadFCB: ;ah = 14h
    35                              <1> sequentialWriteFCB:;ah = 15h
    36                              <1> createFileFCB:     ;ah = 16h
    37                              <1> renameFileFCB:     ;ah = 17h
    38 000021F9 C3                  <1>     ret
    39                              <1> setDTA:            ;ah = 1Ah
    40                              <1> ;Called with:
    41                              <1> ;   rdx = Pointer to the new default DTA
    42 000021FA 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
    43 00002201 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    44 00002205 488915(79C30300)    <1>     mov qword [currentDTA], rdx
    45 0000220C C3                  <1>     ret
    46                              <1> randomReadFCB:     ;ah = 21h
    47                              <1> randomWriteFCB:    ;ah = 22h
    48                              <1> getFileSizeFCB:    ;ah = 23h
    49                              <1> setRelRecordFCB:   ;ah = 24h
    50                              <1> randBlockReadFCB:  ;ah = 27h
    51                              <1> randBlockWriteFCB: ;ah = 28h
    52                              <1> parseFilenameFCB:  ;ah = 29h
    53 0000220D C3                  <1>     ret
    54                              <1> getDTA:            ;ah = 2Fh
    55 0000220E 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
    56 00002215 488B1D(79C30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    57 0000221C 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    58 00002220 C3                  <1>     ret
    29                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    30                              <1> ;-----------------------------------:
    31                              <1> ;    File Handle Kernel routines    :
    32                              <1> ;-----------------------------------:
    33                              <1> 
    34                              <1> createFileHdl:     ;ah = 3Ch, handle function
    35                              <1>     return 
    18                              <2> %%_ret:
    19 00002221 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    36                              <1> openFileHdl:       ;ah = 3Dh, handle function
    37                              <1>     return 
    18                              <2> %%_ret:
    19 00002222 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    38                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    39                              <1> ;Input: bx = file handle to close
    40 00002223 E8A1060000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
    41 00002228 0F8285170000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
    42 0000222E E885050000          <1>     call setCurrentSFT  ;Set this as the current SFT
    43                              <1>     ;Check count to see if we need to check share mode
    44 00002233 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared
    45 00002238 7409                <1>     je .skipNetCheck
    46                              <1>     ;Now check sharing mode
    47 0000223A 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
    48 0000223E 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
    49 00002240 3C70                <1>     cmp al, denyRWShare | denyWriteShare | denyReadShare | denyNoneShare
    50 00002242 9C                  <1>     pushfq  ;Save the result of this for after closing the file
    51                              <1> .skipNetCheck:
    52 00002243 E80A020000          <1>     call closeMain  ;Call close main!
    53 00002248 0F8265170000        <1>     jc extErrExit   ;If an error, exit through error exit
    54 0000224E 9D                  <1>     popfq
    55 0000224F 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
    56 00002251 E855060000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
    57 00002256 C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
    58                              <1> .exitOk:
    59 00002259 31C0                <1>     xor eax, eax    ;Return value
    60 0000225B E945170000          <1>     jmp extGoodExit
    61                              <1> 
    62                              <1> readFileHdl:       ;ah = 3Fh, handle function
    63 00002260 488D356C020000      <1>     lea rsi, readBytes
    64                              <1> .common:
    65 00002267 E85D060000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
    66 0000226C 0F8241170000        <1>     jc extErrExit   ;Error code in al and exit
    67 00002272 E841050000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
    68 00002277 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
    69 00002279 FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
    70 0000227F 488915(79C30300)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
    71 00002286 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
    72 00002288 8F05(79C30300)      <1>     pop qword [currentDTA]
    73 0000228E 0F821F170000        <1>     jc extErrExit   ;Error code in al and exit
    74 00002294 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
    75 00002296 E901170000          <1>     jmp extGoodExit2    ;and exit!
    76                              <1> 
    77                              <1> writeFileHdl:      ;ah = 40h, handle function
    78 0000229B 488D35E2040000      <1>     lea rsi, writeBytes
    79 000022A2 E9C0FFFFFF          <1>     jmp readFileHdl.common
    80                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    81                              <1>     return 
    18                              <2> %%_ret:
    19 000022A7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    82                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
    83                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
    84 000022A8 E81C060000          <1>     call getSFTPtr
    85 000022AD 0F8200170000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
    86 000022B3 3C03                <1>     cmp al, 3
    87 000022B5 720A                <1>     jb .validFunction
    88 000022B7 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
    89 000022BC E9F2160000          <1>     jmp extErrExit
    90                              <1> .validFunction:
    91 000022C1 3C01                <1>     cmp al, 1
    92 000022C3 7713                <1>     ja .seekend
    93 000022C5 7203                <1>     jb .seekset
    94                              <1> ;Here we are at seekcur, seek from current (signed)
    95 000022C7 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
    96                              <1> .seekset:
    97                              <1> ;Seek from the start (unsigned)
    98 000022CA 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
    99 000022CD E818130000          <1>     call getUserRegs    ;Get user regs in rsi
   100 000022D2 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   101                              <1> .seekExit:
   102 000022D5 30C0                <1>     xor al, al  ;Return OK!
   103                              <1>     return 
    18                              <2> %%_ret:
    19 000022D7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   104                              <1> .seekend:
   105                              <1> ;Here we are at seekend, seek from end (signed)
   106 000022D8 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   107 000022DE 7505                <1>     jnz .netCheck
   108                              <1> .proceedDisk:
   109 000022E0 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   110 000022E3 EBE5                <1>     jmp short .seekset
   111                              <1> .netCheck:
   112 000022E5 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   113 000022EB 75F3                <1>     jnz .proceedDisk
   114 000022ED 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   115                              <1>     ;Check it's share mode
   116 000022F1 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   117 000022F6 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   118 000022FB 7407                <1>     je .netSeek
   119 000022FD 3D30000000          <1>     cmp eax, denyReadShare
   120 00002302 75DC                <1>     jne .proceedDisk
   121                              <1> .netSeek:
   122 00002304 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   123 00002309 CD4F                <1>     int 4fh
   124 0000230B 73C8                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   125 0000230D E9A1160000          <1>     jmp extErrExit
   126                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   127                              <1> ioctrl:            ;ah = 44h, handle function
   128                              <1> duplicateHandle:   ;ah = 45h, handle function
   129                              <1> ;Input: bx = Handle to duplicate
   130                              <1> ;Output: If ok then ax = New handle
   131 00002312 E813060000          <1>     call findFreeJFT    ;First find a free space in the JFT
   132 00002317 0F8296160000        <1>     jc extErrExit   ;Exit if no space
   133                              <1>     ;rsi points to the free space
   134                              <1> .duplicateCommon:
   135 0000231D E889050000          <1>     call getJFTPtr  ;Get a pointer to the JFT entry in rdi for bx
   136 00002322 4887F7              <1>     xchg rsi, rdi
   137 00002325 AC                  <1>     lodsb   ;Move over the SFT ndx from the old to the new position
   138 00002326 AA                  <1>     stosb
   139 00002327 48FFCE              <1>     dec rsi
   140 0000232A 48FFCF              <1>     dec rdi
   141                              <1>     ;rdi now points to new position
   142                              <1>     ;rsi points to old position
   143                              <1>     ;al has SFT ndx
   144 0000232D 4889FE              <1>     mov rsi, rdi    ;Move rsi to point to the new position jft position
   145 00002330 0FB6D8              <1>     movzx ebx, al   ;Move SFTndx into ebx
   146 00002333 E83E050000          <1>     call getSFTPtrfromSFTNdx    ;Get the pointer to the SFT in rdi
   147 00002338 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   148                              <1>     ;Now we must return in ax the entry in the JFT 
   149 0000233B 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
   150 00002342 488D7F2A            <1>     lea rdi, qword [rdi + psp.jobFileTbl]   ;Point to head of table
   151 00002346 4829FE              <1>     sub rsi, rdi    ;Get the difference of the two in si
   152 00002349 89F0                <1>     mov eax, esi    ;Get the difference as the return code
   153 0000234B E955160000          <1>     jmp extGoodExit
   154                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   155                              <1> ;Input: bx = Handle to duplicate
   156                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   157                              <1>     ;First we close cx
   158 00002350 87D9                <1>     xchg ebx, ecx ;Swap cx and bx
   159 00002352 53                  <1>     push rbx
   160 00002353 51                  <1>     push rcx
   161 00002354 E8CAFEFFFF          <1>     call closeFileHdl   ;Close handle 
   162 00002359 59                  <1>     pop rcx
   163 0000235A 5B                  <1>     pop rbx
   164                              <1>     retc    ;The error code is set by errExtExit and CF is set on callerFrame
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 0000235B 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 0000235D C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   165                              <1>     ;Else, close was ok, lets duplicate now
   166 0000235E E848050000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   167 00002363 0F824A160000        <1>     jc extErrExit   ;Return bad with error code in al
   168 00002369 87D9                <1>     xchg ebx, ecx   ;Now get source to duplicate in ebx
   169 0000236B 4889FE              <1>     mov rsi, rdi    ;Put the free space ptr in rsi
   170 0000236E EBAD                <1>     jmp short duplicateHandle.duplicateCommon
   171                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   172                              <1> ;Input: cx = Search Attributes, cl only used
   173                              <1> ;       rdx = Ptr to path to file to look for
   174                              <1> ;       al = Document as needing to be 0 for now
   175 00002370 880D(56C60300)      <1>     mov byte [searchAttr], cl
   176 00002376 4889D6              <1>     mov rsi, rdx    ;Get src path in rsi
   177 00002379 E8B8130000          <1>     call checkPathspecOK    ;This preserves rsi
   178 0000237E 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   179 00002380 740A                <1>     jz .pathspecOk  ;If ZF=ZE AND CF=CY then we have path separators, still ok
   180                              <1> .badPath:
   181 00002382 B803000000          <1>     mov eax, errPnf
   182 00002387 E927160000          <1>     jmp extErrExit
   183                              <1> .pathspecOk:
   184 0000238C FF35(79C30300)      <1>     push qword [currentDTA]
   185 00002392 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   186 00002399 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
   187 000023A0 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   188 000023A7 E813EDFFFF          <1>     call getFilePath
   189 000023AC 8F05(79C30300)      <1>     pop qword [currentDTA]
   190 000023B2 0F82FB150000        <1>     jc extErrExit
   191 000023B8 488D35(90C50300)    <1>     lea rsi, dosffblock ;Copy the block to the user's DTA
   192 000023BF 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
   193 000023C6 B92B000000          <1>     mov ecx, ffBlock_size
   194 000023CB F3A4                <1>     rep movsb   ;Copy the whole block. 
   195                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   196 000023CD 31C0                <1>     xor eax, eax    ;Return value
   197 000023CF E9D1150000          <1>     jmp extGoodExit ;Exit well
   198                              <1> 
   199                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   200                              <1> renameFile:        ;ah = 56h
   201                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   202                              <1> createNewFile:     ;ah = 5Bh
   203                              <1> 
   204                              <1> lockUnlockFile:    ;ah = 5Ch
   205 000023D4 E9DA150000          <1>     jmp extErrExit
   206                              <1> setHandleCount:    ;ah = 67h
   207 000023D9 E9D5150000          <1>     jmp extErrExit
   208                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   209                              <1>     ;Input: bx = File to flush
   210 000023DE E8E6040000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   211 000023E3 0F82CA150000        <1>     jc extErrExit
   212 000023E9 E8CA030000          <1>     call setCurrentSFT
   213                              <1>     ;Now we check if the device is a char, disk or net file
   214 000023EE 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   215 000023F2 66A90080            <1>     test ax, devRedirDev
   216 000023F6 7512                <1>     jnz .notNet
   217                              <1>     ;Commit file net redir call and exit
   218 000023F8 B807110000          <1>     mov eax, 1107h
   219 000023FD CD4F                <1>     int 4fh
   220 000023FF 0F82AE150000        <1>     jc extErrExit
   221 00002405 E93D000000          <1>     jmp .exitOk
   222                              <1> .notNet:
   223 0000240A 66A98000            <1>     test ax, devCharDev
   224 0000240E 7418                <1>     jz .blokDev
   225                              <1>     ;Here we simply update date/time fields in the SFT structure before exiting
   226 00002410 E89CFCFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   227 00002415 0F8298150000        <1>     jc extErrExit  ;If we fail to get time/date, fail the request
   228                              <1>     ;Build date and time words
   229 0000241B E87CFDFFFF          <1>     call getDirDTwords  ;Get date time words packed in eax
   230 00002420 894713              <1>     mov dword [rdi + sft.wTime], eax    ;Store them at the same time
   231 00002423 E91F000000          <1>     jmp .exitOk
   232                              <1> .blokDev:
   233 00002428 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   234 0000242C E844110000          <1>     call setWorkingDPB
   235 00002431 E823F2FFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   236 00002436 0F8277150000        <1>     jc extErrExit
   237 0000243C E8FCE6FFFF          <1>     call flushFile  ;Now the file gets flushed
   238 00002441 0F826C150000        <1>     jc extErrExit
   239                              <1> .exitOk:
   240 00002447 30C0                <1>     xor al, al
   241 00002449 E89C110000          <1>     call getUserRegs
   242 0000244E 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   243                              <1>     return
    18                              <2> %%_ret:
    19 00002451 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   244                              <1> ;-----------------------------------:
   245                              <1> ;       Main File IO Routines       :
   246                              <1> ;-----------------------------------:
   247                              <1> closeMain: ;Int 4Fh AX=1201h
   248                              <1> ;Gets the directory entry for a file
   249                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
   250                              <1> ;If CF=CY on return: Error, return error with al = error code
   251                              <1> ;Preserve all regs except eax and rdi
   252                              <1> ; If CF=NC on return: eax = Unknown
   253                              <1> ;                     rdi = current SFT ptr
   254 00002452 488B3D(81C60300)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
   255 00002459 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
   256 0000245F 7508                <1>     jnz .physical
   257                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
   258 00002461 B806110000          <1>     mov eax, 1106h  ;Make request
   259 00002466 CD4F                <1>     int 4fh ;Beep!
   260                              <1>     return  ;Returns with CF set or clear as appropriate
    18                              <2> %%_ret:
    19 00002468 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   261                              <1> .physical:  
   262                              <1> ; We make a request to the dev dir to close the device
   263                              <1> ; If the device is disk, we then update the directory entry for the disk file
   264 00002469 E806150000          <1>     call dosCrit1Enter  ;Enter critical section 1
   265 0000246E 53                  <1>     push rbx
   266 0000246F 56                  <1>     push rsi
   267 00002470 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
   268 00002474 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   269 0000247A 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
   270                              <1>     ;rsi has DPB pointer here
   271                              <1>     ;rdi has the SFT pointer
   272 0000247C 55                  <1>     push rbp
   273 0000247D 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
   274 00002480 E8F0100000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
   275 00002485 E8CFF1FFFF          <1>     call updateDirectoryEntryForFile
   276 0000248A 5D                  <1>     pop rbp
   277                              <1>     ;If CF is set, Fail was requested and ax has an error code
   278 0000248B 722F                <1>     jc .exit
   279 0000248D E8ABE6FFFF          <1>     call flushFile
   280 00002492 7228                <1>     jc .exit    ;If something went wrong, exit
   281 00002494 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
   282 00002498 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
   283                              <1> .charClose:
   284                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
   285                              <1>     ;We now decrement handle count in SFT structure
   286 0000249C E823000000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
   287 000024A1 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
   288 000024A4 7503                <1>     jnz .driverClose
   289 000024A6 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
   290                              <1> .driverClose:
   291 000024A9 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
   292                              <1>     ;and if the device is a disk device, cl will have the unit number
   293                              <1>     ;We first check if the driver supports oper/close requests
   294 000024AA 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
   295 000024B0 750A                <1>     jnz .exit  ;If not, immediately jump to exit, all is well
   296                              <1>     ;rsi has device driver ptr for device, make request
   297 000024B2 E88D100000          <1>     call primReqCloseSetup  ;rbx gets header ptr, rsi has driver ptr
   298 000024B7 E8580D0000          <1>     call goDriver   ;Make request
   299                              <1>     ;Don't check the status here, as we are simply informing the driver 
   300                              <1>     ; of an operation. Nothing should be able to go wrong. 
   301                              <1>     ;Functionally, an ignore if anything does go wrong.
   302                              <1> .exit:
   303 000024BC 5E                  <1>     pop rsi
   304 000024BD 5B                  <1>     pop rbx
   305 000024BE E8BB140000          <1>     call dosCrit1Exit
   306                              <1>     return
    18                              <2> %%_ret:
    19 000024C3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   307                              <1> 
   308                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
   309                              <1> ;Input: rdi = SFT pointer
   310                              <1> ;Output: ax = Original wNumHandles count
   311 000024C4 9C                  <1>     pushfq
   312 000024C5 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
   313 000024C8 FFC8                <1>     dec eax     ;Decrement count
   314 000024CA 7502                <1>     jnz .exit                           ;If the count is not zero, exit
   315 000024CC FFC8                <1>     dec eax    ;If it is zero, now we make it -1
   316                              <1> .exit:
   317 000024CE 9D                  <1>     popfq
   318 000024CF 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
   319                              <1>     return
    18                              <2> %%_ret:
    19 000024D2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   320                              <1> 
   321                              <1> 
   322                              <1> readBytes:
   323                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
   324                              <1> ;Input: ecx = Number of bytes to read
   325                              <1> ;Output: ecx = Number of bytes read
   326                              <1> ;Number of bytes read 
   327                              <1> ;If CF=CY, return with error code in ax
   328 000024D3 E8E8020000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   329 000024D8 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   330 000024DC 240F                <1>     and al, 0Fh ;Eliminate except access mode
   331 000024DE 3C01                <1>     cmp al, WriteAccess
   332 000024E0 7509                <1>     jne .readable
   333 000024E2 B805000000          <1>     mov eax, errAccDen
   334 000024E7 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
   335 000024E9 F9                  <1>     stc
   336                              <1>     return
    18                              <2> %%_ret:
    19 000024EA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   337                              <1> .readable:
   338 000024EB E811030000          <1>     call setupVarsForTransfer
   339 000024F0 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
   340 000024F3 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   341 000024F9 740A                <1>     jz .notRedir
   342 000024FB B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
   343 00002500 CD4F                <1>     int 4fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
   344                              <1>     return 
    18                              <2> %%_ret:
    19 00002502 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   345                              <1> .exitOk:
   346 00002503 F8                  <1>     clc
   347                              <1>     return 
    18                              <2> %%_ret:
    19 00002504 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   348                              <1> .notRedir:
   349 00002505 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   350 0000250B 7510                <1>     jnz readCharDev
   351 0000250D E862140000          <1>     call dosCrit1Enter
   352 00002512 E898010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
   353 00002517 E862140000          <1>     call dosCrit1Exit
   354                              <1>     return 
    18                              <2> %%_ret:
    19 0000251C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   355                              <1> readCharDev:
   356                              <1> ;rdi points to sft for char dev to read
   357                              <1> ;ecx has the number of bytes to transfer
   358                              <1> ;Vars have been set up and DTA has the transfer address
   359                              <1> ;Returns in ecx, the actual bytes transferred
   360                              <1> ;If CF=CY, return with error code in ax
   361 0000251D C605(6CC30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
   362 00002524 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
   363 00002528 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
   364 0000252F F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
   365 00002532 0F8469020000        <1>     jz rwExitOk    ;If it does, jump to exit as if EOF has been hit
   366 00002538 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
   367 0000253B 7407                <1>     jz .notNul
   368                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
   369                              <1>     ;NUL never transfers bytes 
   370 0000253D 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
   371 0000253F E95D020000          <1>     jmp rwExitOk    ;Goto exit
   372                              <1> .notNul:
   373 00002544 F6C320              <1>     test bl, charDevBinary
   374 00002547 757F                <1>     jnz .binary
   375                              <1>     ;Here if the device is in ASCII mode
   376 00002549 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
   377 0000254C 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
   378                              <1> .consoleInput:
   379                              <1>     ;Console input here
   380 00002552 E846F7FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
   381                              <1>     ;Get current offset into buffer (if one exists)
   382 00002557 488B35(23C00300)    <1>     mov rsi, qword [vConHdlOff]
   383 0000255E 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
   384 00002561 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
   385 00002563 803D(B0C20300)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
   386 0000256A 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
   387                              <1>     ;Else, reset the buffer
   388 0000256C 66C705(B0C20300)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
   388 00002574 FF                  <1>
   389                              <1> .oldBuf:
   390                              <1> ;Preserve the dta and number of chars to tfr
   391 00002575 51                  <1>     push rcx
   392 00002576 57                  <1>     push rdi
   393 00002577 488D15(B0C20300)    <1>     lea rdx, vConInBuf
   394 0000257E E83AF7FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
   395 00002583 5F                  <1>     pop rdi
   396 00002584 59                  <1>     pop rcx
   397 00002585 488D35(B2C20300)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
   398 0000258C 803E1A              <1>     cmp byte [rsi], EOF
   399 0000258F 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
   400 00002591 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
   401 00002594 B00A                <1>     mov al, LF
   402 00002596 E8B4F2FFFF          <1>     call charOut_B.in   ;Echo CRLF
   403 0000259B 31F6                <1>     xor esi, esi    ;Set ZF = ZE
   404 0000259D EB18                <1>     jmp short .exit
   405                              <1> .tfrBuf:
   406 0000259F AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
   407 000025A0 AA                  <1>     stosb
   408 000025A1 3C0D                <1>     cmp al, CR 
   409 000025A3 7503                <1>     jne .noCRLF
   410 000025A5 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
   411                              <1> .noCRLF:
   412 000025A8 3C0A                <1>     cmp al, LF  ;Compare if al is LF
   413 000025AA E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
   414 000025AC 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
   415                              <1>     ;This only applies if the reason for exiting the loop is al=LF
   416 000025AE E89CF2FFFF          <1>     call charOut_B.in   ;Echo CRLF
   417 000025B3 31F6                <1>     xor esi, esi
   418 000025B5 0C01                <1>     or al, 1    ;Set ZF = NZ
   419                              <1> .exit:
   420 000025B7 E8F9F6FFFF          <1>     call vConRetDriver
   421 000025BC 488935(23C00300)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
   422 000025C3 E9D9010000          <1>     jmp rwExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
   423                              <1> 
   424                              <1> .binary:
   425                              <1>     ;Setup registers for transfer
   426 000025C8 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
   427 000025CB 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
   428                              <1>     ;ecx has the number of bytes to transfer directly
   429 000025CE E8C20E0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
   430 000025D3 488B35(61C60300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
   431 000025DA E8350C0000          <1>     call goDriver   ;Make the request
   432 000025DF 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
   433 000025E2 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   434 000025E9 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   435 000025EF 7422                <1>     jz .binNoError
   436                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
   437 000025F1 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
   438 000025F3 E8EF0A0000          <1>     call charDevErr   ;ah = has part of the error 
   439                              <1>     ;al now has the response
   440 000025F8 3C00                <1>     cmp al, critIgnore
   441 000025FA 7417                <1>     je .binNoError ;Simply proceed as normal
   442 000025FC 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
   443 000025FF 3C03                <1>     cmp al, critFail
   444 00002601 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
   445                              <1>     ;Fallthrough here for fail!
   446                              <1> .failExit:
   447 00002603 488B3D(81C60300)    <1>     mov rdi, qword [currentSFT]
   448 0000260A 31C9                <1>     xor ecx, ecx
   449 0000260C B805000000          <1>     mov eax, errAccDen
   450 00002611 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
   451                              <1>     return
    18                              <2> %%_ret:
    19 00002612 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   452                              <1> .binNoError:
   453                              <1>     ;Get number of bytes transferred into 
   454 00002613 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
   455 00002619 F7D8                <1>     neg eax ;make it into -eax
   456 0000261B 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
   457                              <1>     ;ecx now has bytes left to transfer
   458 0000261F 50                  <1>     push rax    ;Save value on stack
   459 00002620 31C0                <1>     xor eax, eax ;Set ZF
   460 00002622 FFC0                <1>     inc eax ;Clear ZF
   461 00002624 58                  <1>     pop rax ;Get back the original value
   462 00002625 E977010000          <1>     jmp rwExitOk    ;GoExit with ecx=Bytes left to read
   463                              <1> .generalASCII:
   464                              <1>     ;ecx has bytes to transfer here
   465                              <1>     ;Setup registers for transfer
   466 0000262A 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
   467 0000262D 51                  <1>     push rcx
   468 0000262E B901000000          <1>     mov ecx, 1  ;Get one char
   469 00002633 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
   470 00002636 E85A0E0000          <1>     call primReqReadSetup   ;Setup request
   471 0000263B 59                  <1>     pop rcx
   472                              <1>     ;rbx now has request header ptr
   473 0000263C 488B35(61C60300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
   474                              <1> .asciiReadChar:
   475 00002643 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
   476 00002646 E8D6F5FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
   477 0000264B E8C40B0000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
   478 00002650 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   479 00002657 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   480 0000265D 741E                <1>     jz .asciiNoError
   481 0000265F E8830A0000          <1>     call charDevErr    ;Call Int 44h
   482                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
   483 00002664 C705(38C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
   483 0000266C 0000                <1>
   484 0000266E 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   485 00002671 3C03                <1>     cmp al, critFail
   486 00002673 748E                <1>     je .failExit
   487 00002675 3C01                <1>     cmp al, critRetry
   488 00002677 74CA                <1>     je .asciiReadChar
   489                              <1>     ;Ignore here, pretend NULL CHAR was read
   490 00002679 30C0                <1>     xor al, al
   491 0000267B EB15                <1>     jmp short .asciiIgnoreEP
   492                              <1> .asciiNoError:
   493                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
   494                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
   495                              <1> ;Preserve RBX, RSI
   496                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
   497 0000267D 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   498 00002680 813D(38C40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
   498 00002688 0000                <1>
   499 0000268A 0F8511010000        <1>     jne rwExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
   500 00002690 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
   501                              <1> .asciiIgnoreEP:
   502 00002692 48FF05(30C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
   503 00002699 48FFC7              <1>     inc rdi ;Also advance register pointer
   504 0000269C 3C1A                <1>     cmp al, EOF ;Was this char EOF?
   505 0000269E 0F84FD000000        <1>     je rwExitOk
   506 000026A4 3C0D                <1>     cmp al, CR  ;Was this char CR?
   507 000026A6 E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
   508                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
   509 000026A8 FEC0                <1>     inc al  ;make ZF=NZ
   510 000026AA E9F2000000          <1>     jmp rwExitOk    ;Called with ecx = Number of bytes LEFT to transfer
   511                              <1> 
   512                              <1> readDiskFile:
   513                              <1> ;rdi = Current SFT
   514                              <1> ;rbp = WorkingDPB
   515 000026AF C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
   516 000026B6 C605(5AC60300)00    <1>     mov byte [rwFlag], 0    ;Read operation
   517                              <1>     ;We have the following vars setup:
   518                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
   519                              <1>     ;currClustF
   520                              <1>     ;Now convert currSectC to disk sector by using currClustF
   521                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
   522 000026BD 8B15(9DC60300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
   523 000026C3 8B460F              <1>     mov eax, dword [rsi + sft.dStartClust]  ;Get starting cluster
   524 000026C6 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
   525 000026C8 8B0D(C4C60300)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
   526 000026CE 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
   527 000026D0 741E                <1>     jz .skipWalk
   528                              <1> .goToCurrentCluster:
   529 000026D2 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
   530 000026D7 0F84C4000000        <1>     je rwExitOk ;Exit with no bytes transferred
   531 000026DD 89C3                <1>     mov ebx, eax    ;Save eax as current cluster
   532 000026DF E8D8E5FFFF          <1>     call walkFAT    ;Get in eax the next cluster
   533 000026E4 0F828B000000        <1>     jc .badExit   ;This can only return Fail
   534 000026EA FFCA                <1>     dec edx ;Decrement counter
   535 000026EC 75E4                <1>     jnz .goToCurrentCluster
   536                              <1> ;Now we fall out with ebx = Current cluster
   537 000026EE 89D8                <1>     mov eax, ebx    ;Get the current cluster in eax
   538                              <1> .skipWalk:
   539 000026F0 E803E5FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
   540                              <1>     ;Now we add the offset to this
   541 000026F5 0FB61D(A9C60300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
   542 000026FC 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
   543 000026FF 488905(AAC60300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
   544                              <1> ;Main
   545 00002706 EB05                <1>     jmp short .mainSkipBufferSet
   546                              <1> .mainRead:
   547 00002708 E878E2FFFF          <1>     call setBufferReferenced
   548                              <1> .mainSkipBufferSet:
   549 0000270D E807E4FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
   550 00002712 7261                <1>     jc .badExit
   551 00002714 4889DE              <1>     mov rsi, rbx    ;Move the buffer pointer into rsi
   552 00002717 0FB71D(B2C60300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
   553 0000271E 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
   554                              <1>     ;Now we read the smallest of the following from the sector buffer:
   555                              <1>     ; 1) Sector size, 2) Bytes left in File, 3) Bytes left to read from Request
   556 00002721 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
   557 00002724 2B4F1B              <1>     sub ecx, dword [rdi + sft.dCurntOff] ;Get bytes left to read in file in ecx
   558 00002727 8B1D(C8C60300)      <1>     mov ebx, dword [tfrCntr]
   559 0000272D 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
   560 0000272F 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
   561 00002732 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
   562 00002736 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
   563 00002738 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
   564 0000273B 57                  <1>     push rdi
   565 0000273C 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
   566 00002743 E8C5010000          <1>     call readWriteBytesBinary
   567 00002748 48893D(79C30300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
   568 0000274F 5F                  <1>     pop rdi
   569 00002750 8B0D(C8C60300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
   570 00002756 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
   571 00002758 7447                <1>     jz rwExitOk ;Exit if so!
   572 0000275A E807E5FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
   573 0000275F 7214                <1>     jc .badExit
   574 00002761 743E                <1>     jz rwExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
   575                              <1>     ;Else repeat
   576                              <1>     ;currSectD has been updated, we now set currByteS = 0
   577 00002763 66C705(B2C60300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
   577 0000276B 00                  <1>
   578 0000276C 488B05(AAC60300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
   579 00002773 EB93                <1>     jmp short .mainRead
   580                              <1> .badExit:
   581                              <1>     ;When a disk error occurs within the bit where vars have changed,
   582                              <1>     ; we need to update the SFT before returning
   583 00002775 8B0D(C8C60300)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
   584 0000277B 30C0                <1>     xor al, al  ;Set ZF flag
   585 0000277D E81F000000          <1>     call rwExitOk   ;We call this
   586 00002782 F9                  <1>     stc ;All calls which end up here return Fail!
   587 00002783 C3                  <1>     ret
   588                              <1> writeBytes:
   589                              <1> ;Writes the bytes from the user buffer
   590 00002784 E837000000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   591 00002789 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   592 0000278D 240F                <1>     and al, 0Fh ;Eliminate except access mode
   593 0000278F 3C00                <1>     cmp al, ReadAccess
   594 00002791 7509                <1>     jne .writeable
   595 00002793 B805000000          <1>     mov eax, errAccDen
   596 00002798 31C9                <1>     xor ecx, ecx
   597 0000279A F9                  <1>     stc
   598 0000279B C3                  <1>     ret
   599                              <1> .writeable:
   600 0000279C E860000000          <1>     call setupVarsForTransfer
   601                              <1> 
   602                              <1> rwExitOk:
   603                              <1> ;Input: ecx = Number of bytes left to transfer!
   604                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
   605 000027A1 890D(C8C60300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
   606 000027A7 7509                <1>     jnz .skipbitClear
   607 000027A9 E812000000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
   608                              <1>     ;The disk transfer must've flushed by now. 
   609 000027AE 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokFileToFlush|charDevNoEOF) ;OR
   610                              <1>     ;Next char dev read should give EOF.
   611                              <1> .skipbitClear:  ;Or skip that entirely
   612 000027B2 E811000000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
   613                              <1>     return 
    18                              <2> %%_ret:
    19 000027B7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   614                              <1> ;-----------------------------------:
   615                              <1> ;        File Handle routines       :
   616                              <1> ;-----------------------------------:
   617                              <1> 
   618                              <1> setCurrentSFT:
   619                              <1> ;Set the pointer in rdi as current SFT 
   620 000027B8 48893D(81C60300)    <1>     mov qword [currentSFT], rdi
   621                              <1>     return 
    18                              <2> %%_ret:
    19 000027BF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   622                              <1> getCurrentSFT:
   623                              <1> ;Get the current SFT pointer in rdi
   624 000027C0 488B3D(81C60300)    <1>     mov rdi, qword [currentSFT]
   625                              <1>     return 
    18                              <2> %%_ret:
    19 000027C7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   626                              <1> updateCurrentSFT:
   627                              <1> ;Updates the Current SFT fields before returning from a file handle operation
   628                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
   629 000027C8 57                  <1>     push rdi
   630 000027C9 488B3D(81C60300)    <1>     mov rdi, qword [currentSFT]
   631 000027D0 8B0D(C4C60300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
   632 000027D6 2B0D(C8C60300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
   633                              <1>     ;ecx has bytes transferred
   634 000027DC 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
   635 000027E2 751A                <1>     jnz .exit
   636 000027E4 50                  <1>     push rax
   637 000027E5 8B05(A1C60300)      <1>     mov eax, dword [currClustD]
   638 000027EB 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
   639 000027EE 8B05(9DC60300)      <1>     mov eax, dword [currClustF]
   640 000027F4 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
   641 000027F7 58                  <1>     pop rax
   642 000027F8 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
   643 000027FB 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
   644                              <1> .exit:
   645 000027FE 5F                  <1>     pop rdi
   646 000027FF F8                  <1>     clc
   647                              <1>     return 
    18                              <2> %%_ret:
    19 00002800 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   648                              <1> setupVarsForTransfer:
   649                              <1> ;Computes the actual bytes to be transferred and 
   650                              <1> ; sets up internal variables for the transfer. 
   651                              <1> ;Works for both reading and writing
   652                              <1> ;Input: ecx = User desired Bytes to transfer
   653                              <1> ;       rdi = SFT pointer for the file
   654                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   655                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
   656                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
   657                              <1> ;
   658                              <1> ;Note: Does not account for a FULL disk. When writing,
   659                              <1> ; if the disk will get full as a result of the write,
   660                              <1> ; stop at the last byte before the transfer. If the 
   661                              <1> ; file pointer is past the last free byte, write 0
   662 00002801 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
   663 00002805 488935(61C60300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
   664 0000280C 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
   665 0000280F 8905(B4C60300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
   666 00002815 890D(C4C60300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
   667 0000281B 890D(C8C60300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
   668 00002821 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev ;If not disk...
   669 00002827 7402                <1>     jz setupVarsForDiskTransfer
   670 00002829 F8                  <1>     clc
   671                              <1>     return ;Else just exit here
    18                              <2> %%_ret:
    19 0000282A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   672                              <1> setupVarsForDiskTransfer:
   673                              <1> ;Extension of the above, but for Disk files only
   674                              <1> ;Input: ecx = User desired Bytes to transfer
   675                              <1> ;       rdi = SFT pointer for the file
   676                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   677 0000282B 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
   678 0000282F 48892D(61C60300)    <1>     mov qword [workingDPB], rbp
   679 00002836 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
   680 00002839 881D(60C60300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
   681 0000283F 8B05(B4C60300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
   682 00002845 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   683 00002849 31D2                <1>     xor edx, edx    ;Zero rdx
   684 0000284B F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
   685                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
   686                              <1>     ;edx has the offset into that sector
   687 0000284D 8905(A5C60300)      <1>     mov dword [currSectF], eax
   688 00002853 668915(B2C60300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
   689 0000285A 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
   690 0000285C 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
   691 0000285F 8805(A9C60300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
   692 00002865 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
   693 00002867 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   694 0000286A D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
   695 0000286C 8915(9DC60300)      <1>     mov dword [currClustF], edx ;Save in var
   696 00002872 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in eax
   697 00002874 F8                  <1>     clc
   698                              <1>     return 
    18                              <2> %%_ret:
    19 00002875 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   699                              <1> 
   700                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216
   701                              <1> ;Return a pointer to the SFT entry in rdi
   702                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
   703                              <1> ;Output: rdi = SFT pointer
   704 00002876 488B3D(3BC00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
   705                              <1> .walk:
   706 0000287D 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
   707 00002881 7212                <1>     jb .thisTable
   708 00002883 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
   709 00002887 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
   710 0000288A 4881FFFFFFFFFF      <1>     cmp rdi, -1
   711 00002891 75EA                <1>     jne .walk
   712 00002893 F9                  <1>     stc
   713                              <1>     return
    18                              <2> %%_ret:
    19 00002894 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   714                              <1> .thisTable:
   715 00002895 50                  <1>     push rax
   716 00002896 52                  <1>     push rdx
   717 00002897 B84F000000          <1>     mov eax, sft_size
   718 0000289C F7E3                <1>     mul ebx
   719 0000289E 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
   720 000028A1 5A                  <1>     pop rdx
   721 000028A2 58                  <1>     pop rax
   722 000028A3 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
   723                              <1>     return
    18                              <2> %%_ret:
    19 000028AA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   724                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
   725                              <1> ;Return a zero extended value in rdi for the SFT entry
   726                              <1> ;Input: bx = JFT handle (we zero extend)
   727                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
   728                              <1> ;        CF=CY => al = Error code, Fail
   729 000028AB 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
   730 000028AE 663B1D(97C00300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
   731 000028B5 7204                <1>     jb .ok
   732 000028B7 B006                <1>     mov al, errBadHdl
   733 000028B9 F9                  <1>     stc
   734                              <1>     return
    18                              <2> %%_ret:
    19 000028BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   735                              <1> .ok:
   736 000028BB 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
   737 000028C2 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
   738 000028C7 F8                  <1>     clc
   739                              <1>     return
    18                              <2> %%_ret:
    19 000028C8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   740                              <1> 
   741                              <1> getSFTPtr:
   742                              <1> ;This gets the SFT pointer and checks it was opened by this machine
   743                              <1> ;Input: bx = JFT handle
   744                              <1> ;Output: CF=NC: rdi = SFT pointer
   745                              <1> ;        CF=CY: Error, ax=Error code
   746 000028C9 E815000000          <1>     call derefSFTPtr
   747                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000028CE 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   748 000028D0 50                  <1>     push rax
   749 000028D1 0FB705(A5C30300)    <1>     movzx eax, word [machineNum]
   750 000028D8 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
   751 000028DC 58                  <1>     pop rax
   752                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000028DD 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   753 000028DF B006                <1>     mov al, errBadHdl   ;Error code
   754 000028E1 F9                  <1>     stc         ;Reset CF
   755                              <1>     return
    18                              <2> %%_ret:
    19 000028E2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   756                              <1> 
   757                              <1> derefSFTPtr:
   758                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
   759                              <1> ;Input: bx = File handle (gets zero extended)
   760                              <1> ;Output: CF=NC: rdi = SFT pointer
   761                              <1> ;        CF=CY: Error, ax=Error code
   762 000028E3 E8C3FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
   763 000028E8 7205                <1>     jb .fail
   764 000028EA 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
   765 000028ED 7504                <1>     jne .ok
   766                              <1> .fail:
   767 000028EF B006                <1>     mov al, errBadHdl
   768 000028F1 F9                  <1>     stc
   769                              <1>     return
    18                              <2> %%_ret:
    19 000028F2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   770                              <1> .ok:
   771 000028F3 53                  <1>     push rbx    ;Preserve the JFT handle
   772 000028F4 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
   773 000028F7 E87AFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
   774 000028FC 5B                  <1>     pop rbx 
   775                              <1>     return
    18                              <2> %%_ret:
    19 000028FD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   776                              <1> 
   777                              <1> getBytesTransferred:
   778 000028FE 8B0D(C8C60300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
   779 00002904 F7D9                <1>     neg ecx ;Multiply by -1
   780 00002906 030D(C4C60300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
   781                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 0000290C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   782                              <1> 
   783                              <1> readWriteBytesBinary:
   784                              <1> ;Input: ecx = number of bytes to read in Binary mode
   785                              <1> ;       rdi = Points to where in caller buffer to place bytes
   786                              <1> ;       rsi = Points to where in DOS buffer to place pointer
   787                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
   788                              <1> ;Preserve rcx so we know how many bytes transferred
   789                              <1> ;Update the currByteA variable
   790                              <1> ;Returns (rsi and rdi) + (ecx on entry)
   791 0000290D 51                  <1>     push rcx
   792 0000290E F605(5AC60300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
   793 00002915 7403                <1>     jz .noSwap
   794 00002917 4887FE              <1>     xchg rdi, rsi
   795                              <1> .noSwap:
   796 0000291A F3A4                <1>     rep movsb
   797 0000291C 59                  <1>     pop rcx
   798 0000291D 010D(B4C60300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
   799 00002923 290D(C8C60300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
   800                              <1>     return
    18                              <2> %%_ret:
    19 00002929 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   801                              <1> 
   802                              <1> findFreeJFT:
   803                              <1> ;Input: [currentPSP] = Task whose PSP we will look through
   804                              <1> ;If there are no free spaces, then we return with al = errNhl and CF=CY
   805                              <1> ;Else, a pointer to the free space in rsi and al = -1
   806 0000292A 51                  <1>     push rcx
   807 0000292B 488B35(81C30300)    <1>     mov rsi, qword [currentPSP]
   808 00002932 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]
   809 00002939 488D762A            <1>     lea rsi, qword [rsi + psp.jobFileTbl]   ;Point to start of table
   810                              <1> .search:
   811 0000293D AC                  <1>     lodsb
   812 0000293E 3CFF                <1>     cmp al, -1
   813 00002940 7407                <1>     je .exit
   814 00002942 FFC9                <1>     dec ecx
   815 00002944 75F7                <1>     jnz .search
   816 00002946 B004                <1>     mov al, errNhl  ;No free handles buddy, sorry
   817 00002948 F9                  <1>     stc ;Set error bit
   818                              <1> .exit:
   819 00002949 59                  <1>     pop rcx
   820                              <1>     return
    18                              <2> %%_ret:
    19 0000294A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    30                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    31                              <1> ;Memory related functions
    32                              <1> 
    33                              <1> ;-----------------------------------:
    34                              <1> ;  Memory related Kernel routines   :
    35                              <1> ;-----------------------------------:
    36                              <1> allocateMemory:    ;ah = 48h
    37                              <1> ;Input: ebx = Number of paragraphs requested
    38                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    39                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    40 0000294B 31D2                <1>     xor edx, edx
    41                              <1>     ;Clear the pointers
    42 0000294D 488915(A7C30300)    <1>     mov qword [firstMCB], rdx
    43 00002954 488915(AFC30300)    <1>     mov qword [bestMCB], rdx
    44 0000295B 488915(B7C30300)    <1>     mov qword [lastMCB], rdx
    45 00002962 31ED                <1>     xor ebp, ebp    
    46 00002964 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    47 00002966 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    48                              <1> .walk:
    49 0000296D 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    50 00002970 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    51 00002973 7409                <1>     je .walk1
    52 00002975 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    53 00002978 0F85D9040000        <1>     jne badMCBChain
    54                              <1> .walk1:
    55                              <1>     ;Here if valid but not the last block
    56 0000297E 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    57 00002986 0F8582000000        <1>     jne .walk2
    58                              <1>     ;Here we consolidate adjacent free blocks if there are any
    59                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    60                              <1>     ;End consolidation at first non free block or at last block in chain
    61 0000298C 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    62 0000298F 744A                <1>     je .det0    ;Determine if this block is useful
    63 00002991 31C9                <1>     xor ecx, ecx
    64 00002993 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    65 00002996 4881C610000000      <1>     add rsi, mcb.program
    66                              <1> .cons0:
    67 0000299D 48C1E104            <1>     shl rcx, 4
    68 000029A1 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    69 000029A4 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    70 000029A7 7409                <1>     je .cons1
    71 000029A9 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    72 000029AC 0F85A5040000        <1>     jne badMCBChain 
    73                              <1> .cons1:
    74 000029B2 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    75 000029BA 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    76                              <1>     ;Here rsi, points to a free block, add it to rdi
    77 000029BC 31C9                <1>     xor ecx, ecx
    78 000029BE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    79 000029C1 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    80 000029C7 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    81 000029CA 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    82 000029CC 31D2                <1>     xor edx, edx
    83 000029CE 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    84 000029D1 48895608            <1>     mov qword [rsi + 8], rdx
    85 000029D5 3C5A                <1>     cmp al, mcbMarkEnd
    86 000029D7 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    87                              <1>     ;Here we deal with if the block was the last one 
    88 000029D9 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    89                              <1> .det0:  ;Now determine if pointer in rdi is useful
    90 000029DB 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    91                              <1> ;ebx must be less than the arena size for the arena to be useful!
    92 000029DE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    93 000029E1 39D9                <1>     cmp ecx, ebx
    94 000029E3 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    95 000029E5 488935(B7C30300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    96 000029EC 488B05(A7C30300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    97 000029F3 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    98 000029F6 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    99 000029F8 488935(A7C30300)    <1>     mov qword [firstMCB], rsi
   100                              <1> .det1:
   101                              <1>     ;Now test for best fit.
   102 000029FF 29D9                <1>     sub ecx, ebx    ;Block - ebx
   103 00002A01 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   104 00002A03 7209                <1>     jb .walk2
   105 00002A05 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   106 00002A07 488935(AFC30300)    <1>     mov qword [bestMCB], rsi
   107                              <1> .walk2:
   108 00002A0E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   109 00002A11 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   110 00002A13 31C9                <1>     xor ecx, ecx
   111 00002A15 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   112 00002A18 48C1E104            <1>     shl rcx, 4
   113 00002A1C 4881C610000000      <1>     add rsi, mcb.program
   114 00002A23 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   115 00002A26 E942FFFFFF          <1>     jmp .walk
   116                              <1> .allocate:
   117                              <1>     ;Allocation fails IF the pointer is the null pointer
   118 00002A2B 803D(35C30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   119 00002A32 7261                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   120                              <1>     ;Fall thru if last fit
   121 00002A34 488B35(B7C30300)    <1>     mov rsi, qword [lastMCB]
   122 00002A3B 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   123 00002A3E 0F84CE000000        <1>     jz .allocFail
   124 00002A44 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   125 00002A46 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   126 00002A49 31C9                <1>     xor ecx, ecx
   127 00002A4B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   128 00002A4E 29D9                <1>     sub ecx, ebx
   129 00002A50 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   130 00002A56 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   131 00002A59 48C1E104            <1>     shl rcx, 4
   132 00002A5D 4881C610000000      <1>     add rsi, mcb.program
   133 00002A64 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   134 00002A67 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   135 00002A69 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   136 00002A6C 488B15(81C30300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   137 00002A73 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   138 00002A77 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   139 00002A7E 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   140 00002A85 4889F0              <1>     mov rax, rsi
   141 00002A88 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   142 00002A8B 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   143 00002A8F E896030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   144                              <1>     return
    18                              <2> %%_ret:
    19 00002A94 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   145                              <1> .bfCommon:
   146 00002A95 488B35(A7C30300)    <1>     mov rsi, qword [firstMCB]
   147 00002A9C 803D(35C30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   148 00002AA3 480F4435(AFC30300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   149 00002AAB 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   150 00002AAE 7462                <1>     jz .allocFail
   151 00002AB0 8A06                <1>     mov al, byte [rsi + mcb.marker]
   152 00002AB2 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   153 00002AB5 31C9                <1>     xor ecx, ecx
   154 00002AB7 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   155 00002ABA 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   156 00002ABC 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   157 00002AC2 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   158 00002AC5 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   159 00002ACC 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   160 00002AD0 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   161 00002AD3 4881C610000000      <1>     add rsi, mcb.program
   162 00002ADA 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   163 00002AE0 48C1E304            <1>     shl rbx, 4
   164 00002AE4 4801DE              <1>     add rsi, rbx
   165 00002AE7 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   166 00002AE9 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   167 00002AF1 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   168 00002AF4 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   169 00002AFB 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   170 00002B02 4889F8              <1>     mov rax, rdi
   171 00002B05 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   172 00002B08 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   173 00002B0C E819030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   174                              <1>     return
    18                              <2> %%_ret:
    19 00002B11 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   175                              <1> .allocFail:
   176                              <1>     ;Walk the MCB chain to determine the biggest block size
   177 00002B12 488B35(2BC00300)    <1>     mov rsi, [mcbChainPtr]
   178 00002B19 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   179                              <1> .af0:
   180 00002B1B 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   181 00002B1E 7409                <1>     je .af1
   182 00002B20 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   183 00002B23 0F852E030000        <1>     jne badMCBChain
   184                              <1> .af1:
   185 00002B29 31C9                <1>     xor ecx, ecx
   186 00002B2B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   187 00002B2E 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   188 00002B36 7505                <1>     jne .af2
   189 00002B38 39D9                <1>     cmp ecx, ebx
   190 00002B3A 0F47D9              <1>     cmova ebx, ecx
   191                              <1> .af2:
   192 00002B3D 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   193 00002B40 7410                <1>     je .afExit
   194 00002B42 48C1E104            <1>     shl rcx, 4
   195 00002B46 4881C610000000      <1>     add rsi, mcb.program
   196 00002B4D 4801CE              <1>     add rsi, rcx
   197 00002B50 EBD7                <1>     jmp short .af1
   198                              <1> .afExit:
   199 00002B52 B808000000          <1>     mov eax, errNoMem
   200 00002B57 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   201 00002B5E 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   202 00002B61 E9F3020000          <1>     jmp mcbErrHdlr
   203                              <1> freeMemory:        ;ah = 49h
   204                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   205                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   206                              <1> ;Always skip the first block as this is the anchor for DOS
   207 00002B66 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   208 00002B6D 31C9                <1>     xor ecx, ecx
   209 00002B6F 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   210 00002B76 4889F7              <1>     mov rdi, rsi
   211 00002B79 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   212 00002B7C 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   213 00002B80 4881C610000000      <1>     add rsi, mcb.program
   214 00002B87 4801CE              <1>     add rsi, rcx    ;Go to next block
   215                              <1> .mainLoop:
   216 00002B8A 31C9                <1>     xor ecx, ecx
   217 00002B8C 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   218 00002B8F 7409                <1>     je .valid
   219 00002B91 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   220 00002B94 0F85BD020000        <1>     jne badMCBChain
   221                              <1> .valid:
   222 00002B9A 4939F0              <1>     cmp r8, rsi
   223 00002B9D 741C                <1>     je .blockFound
   224                              <1>     ;Not valid, check if last block in chain
   225 00002B9F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   226 00002BA2 0F849C000000        <1>     je .blockError
   227 00002BA8 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   228 00002BAB 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   229 00002BAF 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   230 00002BB6 4801CE              <1>     add rsi, rcx    ;Go to next block
   231 00002BB9 EBCF                <1>     jmp short .mainLoop
   232                              <1> .blockFound:
   233                              <1>     ;If hole, error.
   234                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   235 00002BBB 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   236 00002BC3 747F                <1>     je .blockError
   237 00002BC5 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   238 00002BCD 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   239 00002BD5 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   240                              <1>     ;It is, let it absorb this space
   241 00002BD7 31C9                <1>     xor ecx, ecx
   242 00002BD9 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   243 00002BDC 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   244 00002BE2 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   245                              <1>     ;Replace block marker
   246 00002BE5 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   247 00002BE7 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   248 00002BE9 31C9                <1>     xor ecx, ecx
   249 00002BEB 48890E              <1>     mov qword [rsi], rcx
   250 00002BEE 48894E08            <1>     mov qword [rsi + 8], rcx
   251 00002BF2 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   252                              <1> .blockFoundCheckFollowing:
   253                              <1>     ;First check if we are the last block in chain
   254 00002BF5 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   255 00002BF8 7439                <1>     je .blockFoundExit  ;If yes, exit!
   256 00002BFA 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   257 00002BFD 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   258 00002C00 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   259 00002C04 4881C110000000      <1>     add rcx, mcb.program
   260 00002C0B 4801CE              <1>     add rsi, rcx    ;Go to next block
   261 00002C0E 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   262 00002C16 751B                <1>     jne .blockFoundExit ;If not free, exit
   263                              <1>     ;If free, absorb into block pointed to by rdi
   264 00002C18 31C9                <1>     xor ecx, ecx
   265 00002C1A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   266 00002C1D 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   267 00002C23 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   268                              <1>     ;Replace block marker
   269 00002C26 8A06                <1>     mov al, byte [rsi + mcb.marker]
   270 00002C28 8807                <1>     mov byte [rdi + mcb.marker], al
   271 00002C2A 31C9                <1>     xor ecx, ecx
   272 00002C2C 48890E              <1>     mov qword [rsi], rcx
   273 00002C2F 48894E08            <1>     mov qword [rsi + 8], rcx
   274                              <1> .blockFoundExit:
   275 00002C33 E8F2010000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   276 00002C38 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   277 00002C3F 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   278                              <1>     return
    18                              <2> %%_ret:
    19 00002C43 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   279                              <1> .blockError:
   280 00002C44 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   281 00002C4B B809000000          <1>     mov eax, errMemAddr
   282 00002C50 E85E0D0000          <1>     call extErrExit ;Error thru the unified error handler
   283 00002C55 E8D0010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   284                              <1>     return
    18                              <2> %%_ret:
    19 00002C5A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   285                              <1> reallocMemory:     ;ah = 4Ah
   286                              <1> ;Input: r8 = address of the block to be realloc'ed
   287                              <1> ;       ebx = How many paras this block should contain after realloc. 
   288                              <1> ;               If ebx = 0, jump to free memory
   289 00002C5B 85DB                <1>     test ebx, ebx
   290 00002C5D 0F8403FFFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   291 00002C63 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   292 00002C6A 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   293 00002C6D 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   294 00002C70 7409                <1>     je .ctn
   295 00002C72 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   296 00002C75 0F855F010000        <1>     jne .badAddrGiven
   297                              <1> .ctn:
   298                              <1>     ;Provided block is valid and not a hole
   299                              <1>     ;Check if Growth or Shrink
   300 00002C7B 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   301 00002C83 74BF                <1>     je freeMemory.blockError
   302 00002C85 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   303 00002C88 31C9                <1>     xor ecx, ecx
   304 00002C8A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   305 00002C8D 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   306 00002C8F 0F8786000000        <1>     ja .growth
   307 00002C95 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   308                              <1> ;We can always shrink
   309 00002C9B 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   310 00002C9D 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   311 00002CA3 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   312 00002CA6 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   313 00002CAC 48C1E304            <1>     shl rbx, 4
   314 00002CB0 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   315 00002CB7 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   316 00002CBA 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   317 00002CBC C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   318 00002CBF 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   319 00002CC1 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   320 00002CC9 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   321 00002CCC 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   322 00002CCE 0F84DB000000        <1>     je .exit
   323                              <1> ;Else, now see if the block following is also free and absorb it
   324 00002CD4 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   325 00002CD7 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   326 00002CDB 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   327 00002CE2 4801CE              <1>     add rsi, rcx    ;Goto next arena
   328 00002CE5 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   329 00002CE8 7409                <1>     je .shrinkAbsorb
   330 00002CEA 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   331 00002CED 0F8564010000        <1>     jne badMCBChain
   332                              <1> .shrinkAbsorb:
   333 00002CF3 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   334 00002CFB 0F85AE000000        <1>     jne .exit
   335                              <1>     ;It is free, absorb it
   336 00002D01 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   337 00002D04 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   338 00002D0A 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   339 00002D0D 31C9                <1>     xor ecx, ecx
   340                              <1>     ;Clear absorbed MCB
   341 00002D0F 48890E              <1>     mov qword [rsi], rcx
   342 00002D12 48894E08            <1>     mov qword [rsi + 8], rcx
   343 00002D16 E994000000          <1>     jmp .exit
   344                              <1> .growth:
   345                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   346 00002D1B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   347 00002D1E 0F84A0000000        <1>     je .notEnuffMem
   348                              <1> ;Now check the following space is free. If not, not enuff mem err
   349 00002D24 31C9                <1>     xor ecx, ecx
   350 00002D26 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   351 00002D29 48C1E104            <1>     shl rcx, 4
   352 00002D2D 4889F7              <1>     mov rdi, rsi    
   353 00002D30 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   354 00002D37 4801CE              <1>     add rsi, rcx
   355 00002D3A 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   356 00002D3D 7409                <1>     je .growthOK
   357 00002D3F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   358 00002D42 0F850F010000        <1>     jne badMCBChain
   359                              <1> .growthOK:
   360                              <1>     ;rdi points to block we are growing
   361 00002D48 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   362 00002D50 7572                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   363                              <1>     ;rsi must own all memory up to the next owned arena
   364 00002D52 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   365 00002D54 31C9                <1>     xor ecx, ecx
   366 00002D56 31D2                <1>     xor edx, edx
   367 00002D58 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   368 00002D5B 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   369 00002D61 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   370 00002D64 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   371 00002D66 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   372 00002D68 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   373 00002D6B 7759                <1>     ja .notEnuffMem1
   374 00002D6D 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   375 00002D6F 81FA01000000        <1>     cmp edx, 1
   376 00002D75 7449                <1>     je .notEnuffMem2
   377 00002D77 31C9                <1>     xor ecx, ecx
   378 00002D79 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   379 00002D7C 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   380 00002D80 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   381 00002D83 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   382 00002D86 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   383 00002D8D 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   384 00002D91 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   385 00002D94 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   386 00002D98 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   387                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   388                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   389 00002D9A 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   390 00002D9C 7411                <1>     jz .exit
   391 00002D9E 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   392 00002DA4 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   393 00002DA7 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   394                              <1> .exit:
   395 00002DAF E876000000          <1>     call verifyIntegrityOfMCBChain
   396 00002DB4 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   397 00002DBB 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   398                              <1>     return
    18                              <2> %%_ret:
    19 00002DBF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   399                              <1> .notEnuffMem2:
   400 00002DC0 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   401 00002DC2 EB02                <1>     jmp short .notEnuffMem1
   402                              <1> .notEnuffMem:
   403 00002DC4 31DB                <1>     xor ebx, ebx    ;No space to grow
   404                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   405 00002DC6 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   406 00002DCB 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   407 00002DD2 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   408 00002DD5 E97F000000          <1>     jmp mcbErrHdlr
   409                              <1> .badAddrGiven:
   410 00002DDA B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   411 00002DDF E975000000          <1>     jmp mcbErrHdlr
   412                              <1> getsetMallocStrat: ;ah = 58h
   413 00002DE4 84C0                <1>     test al, al
   414 00002DE6 741F                <1>     jz .get
   415 00002DE8 3C02                <1>     cmp al, 2
   416 00002DEA 7337                <1>     jae .bad
   417                              <1> ;Set here
   418 00002DEC 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   419 00002DF3 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   420 00002DF7 8805(35C30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   421 00002DFD 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   422 00002E01 E824000000          <1>     call verifyIntegrityOfMCBChain
   423                              <1>     return
    18                              <2> %%_ret:
    19 00002E06 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   424                              <1> .get:
   425 00002E07 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   426 00002E0E 31C0                <1>     xor eax, eax
   427 00002E10 8A05(35C30300)      <1>     mov al, byte [allocStrat]
   428 00002E16 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   429 00002E19 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   430 00002E1D E808000000          <1>     call verifyIntegrityOfMCBChain
   431                              <1>     return
    18                              <2> %%_ret:
    19 00002E22 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   432                              <1> .bad:
   433 00002E23 B801000000          <1>     mov eax, errInvFnc
   434 00002E28 EB2F                <1>     jmp short mcbErrHdlr
   435                              <1> ;-----------------------------------:
   436                              <1> ;      Memory related routines      :
   437                              <1> ;-----------------------------------:
   438                              <1> verifyIntegrityOfMCBChain:
   439 00002E2A 50                  <1>     push rax
   440 00002E2B 53                  <1>     push rbx
   441 00002E2C 488B1D(2BC00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   442                              <1> .ok:
   443 00002E33 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   444 00002E36 7408                <1>     je .ok1
   445 00002E38 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   446 00002E3B 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   447                              <1> .exit:
   448 00002E3D 5B                  <1>     pop rbx
   449 00002E3E 58                  <1>     pop rax
   450                              <1>     return ;We have reached the end of the chain, return all good!
    18                              <2> %%_ret:
    19 00002E3F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   451                              <1> .ok1:
   452 00002E40 31C0                <1>     xor eax, eax
   453 00002E42 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   454 00002E45 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   455 00002E49 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   456 00002E50 4801C3              <1>     add rbx, rax
   457 00002E53 EBDE                <1>     jmp short .ok
   458                              <1> .bmcbPrep:
   459 00002E55 5B                  <1>     pop rbx ;Pop off the stack first!
   460 00002E56 58                  <1>     pop rax
   461                              <1> badMCBChain:
   462 00002E57 B007                <1>     mov al, errMCBbad   ;Yikes!
   463                              <1> mcbErrHdlr:
   464                              <1>     ;Jumped to with eax = error code
   465 00002E59 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   466 00002E60 E84E0B0000          <1>     call extErrExit ;Error thru the unified error handler
   467 00002E65 3C07                <1>     cmp al, errMCBbad
   468                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002E67 74D6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   469 00002E69 EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    31                                  %include "./Source/Kernel/MemExec/execTerm.asm"
    32                              <1> ;EXEC and all default terminates are here
    33                              <1> 
    34                              <1> ;========================
    35                              <1> ;   Interrupt handlers
    36                              <1> ;========================
    37                              <1> terminateProcess:   ;Int 40h
    38 00002E6B 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
    39 00002E6D E97A090000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
    40                              <1> terminateRes:       ;Int 47h
    41                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    42 00002E72 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    43 00002E78 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    44 00002E7B B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    45 00002E80 E967090000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    46                              <1> ;========================
    47                              <1> ;    Int 21h functions
    48                              <1> ;========================
    49                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    50                              <1> ;Input:
    51                              <1> ;rdx = Pointer to new PSP in memory.
    52                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    53                              <1> ;   Officially document that this MUST be paragraph aligned.
    54                              <1> ;rsi = alloc size for new psp block
    55 00002E85 C605(76C40300)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    56 00002E8C 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    57 00002E93 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    58 00002E95 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    59 00002E96 EB0C                <1>     jmp short copyPSP.pspCommon
    60                              <1> copyPSP:      ;ah = 26h
    61                              <1> ;Input:
    62                              <1> ;rdx = Pointer to new PSP in memory.
    63                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    64                              <1> ;   Officially document that this MUST be paragraph aligned.
    65 00002E98 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    66 00002E9F 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    67 00002EA3 53                  <1>     push rbx    ;Save this value for PSP allocsize
    68                              <1> .pspCommon:
    69 00002EA4 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    70 00002EAB 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    71 00002EAF 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    72                              <1> ;r8 is current PSP, now copy psp to rdx
    73                              <1> ;Preserve rdx and r8 until the end
    74 00002EB3 4C89C6              <1>     mov rsi, r8
    75 00002EB6 4889D7              <1>     mov rdi, rdx
    76 00002EB9 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    77 00002EBE F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    78 00002EC1 F605(76C40300)FF    <1>     test byte [pspCopyFlg], -1
    79 00002EC8 7400                <1>     jz .copy
    80                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    81                              <1> .copy:
    82 00002ECA C605(76C40300)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    83 00002ED1 58                  <1>     pop rax ;Pop the allocsize back into rax
    84 00002ED2 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    85                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    86 00002ED5 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
    87 00002ED9 B042                <1>     mov al, 42h
    88 00002EDB E8FC060000          <1>     call muxGetIntVector    ;Get vector in rbx
    89 00002EE0 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    90 00002EE3 48AB                <1>     stosq   ;Move rdi to next entry and store
    91 00002EE5 B043                <1>     mov al, 43h
    92 00002EE7 E8F0060000          <1>     call muxGetIntVector    ;Get vector in rbx
    93 00002EEC 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    94 00002EEF 48AB                <1>     stosq   ;Move rdi to next entry and store
    95 00002EF1 B044                <1>     mov al, 44h
    96 00002EF3 E8E4060000          <1>     call muxGetIntVector    ;Get vector in rbx
    97 00002EF8 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    98 00002EFB 48AB                <1>     stosq   ;Move rdi to next entry and store
    99                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   100 00002EFD 66C70240CD          <1>     mov word [rdx + psp.return], 0CD40h  ;Int 40h
   101 00002F02 C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Overlay next byte for prevPSP
   102 00002F09 48C74353FFFFFFFF    <1>     mov qword [rbx + psp.prevPSP], -1  
   103 00002F11 4C894322            <1>     mov qword [rbx + psp.parentPtr], r8 ;The Current PSP is parent
   104                              <1>     return
    18                              <2> %%_ret:
    19 00002F15 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   105                              <1> 
   106                              <1> terminateStayRes:  ;ah = 31h
   107                              <1> ;Input: al  = Error code
   108                              <1> ;       edx = Number of paragraphs to keep resident
   109 00002F16 C605(5FC60300)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   110                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   111 00002F1D 81FA06000000        <1>     cmp edx, 6
   112 00002F23 7305                <1>     jae .aboveMinimum
   113 00002F25 BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   114                              <1> .aboveMinimum:
   115                              <1> ;Now we setup a call to Realloc 
   116                              <1> ;Setup regs with: 
   117                              <1> ;   r8 = address of the block to be realloc'ed
   118                              <1> ;   ebx = How many paras this block should contain after realloc.
   119 00002F2A 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   120 00002F31 89D3                <1>     mov ebx, edx
   121 00002F33 50                  <1>     push rax    ;Preserve errorlevel across call
   122 00002F34 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   123 00002F35 E821FDFFFF          <1>     call reallocMemory
   124 00002F3A 5B                  <1>     pop rbx
   125 00002F3B 58                  <1>     pop rax
   126 00002F3C 7220                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   127 00002F3E 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   128                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   129 00002F42 EB1A                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   130                              <1> 
   131                              <1> simpleTerminate:   ;ah = 00h
   132 00002F44 31C0                <1>     xor eax, eax    ;Just fall through as normal
   133                              <1> terminateClean:    ;ah = 4Ch, EXIT
   134                              <1> ;Here we must:
   135                              <1> ;0) Build errorlevel and adjust variables accordingly
   136                              <1> ;1) Check if the program is it's own parent. If so, return.
   137                              <1> ;2) Swap the console back to the original driver if it is swapped.
   138                              <1> ;2.5) If we are exiting due to TSR, jump to 5
   139                              <1> ;3) Free all file handles associated to the current process.
   140                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   141                              <1> ;4) Free all memory blocks that have the signature of current PSP
   142                              <1> ;5) Set current PSP to parent PSP
   143                              <1> ;6) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   144                              <1> ;7) Call Network Termination hook.
   145                              <1> ;8) Set old old rsp as old rsp
   146                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   147                              <1> ;10) Exit all critical sections.
   148                              <1> ;
   149                              <1> ; Step 0
   150                              <1> ;For now, just adjust error level in var
   151 00002F46 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   152 00002F48 8625(5FC60300)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   153 00002F4E F605(EDC30300)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   154 00002F55 740D                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   155 00002F57 C605(5FC60300)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   156                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   157 00002F5E 8A25(5FC60300)      <1>     mov ah, byte [exitType] ;Get the exitType
   158                              <1> .storeELvl:
   159 00002F64 668905(91C30300)    <1>     mov word [errorLevel], ax   ;Store word
   160                              <1> ; Step 1
   161                              <1> .step1:
   162 00002F6B 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   163 00002F72 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   164 00002F75 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   165 00002F79 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   166                              <1>     rete            ;If it is, simply return (al has errorLevel)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002F7C 7497                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   167                              <1> ; Step 2
   168 00002F7E E832EDFFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   169                              <1> ; Step 2.5
   170 00002F83 803D(5FC60300)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   171 00002F8A 0F8488000000        <1>     je .step5   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   172                              <1> ; Step 3
   173 00002F90 803D(5FC60300)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   174 00002F97 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   175 00002F99 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   176 00002F9E CD4F                <1>     int 4Fh
   177                              <1> .skipAbortNetClose:
   178 00002FA0 4881C72A000000      <1>     add rdi, psp.jobFileTbl ;Move rdi to point to the start of the JFT
   179 00002FA7 4889FE              <1>     mov rsi, rdi    ;Point rsi to jft too
   180 00002FAA 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls] ;Number of entries in JFT
   181                              <1> .s3lp:
   182 00002FB1 AC                  <1>     lodsb   ;Inc rsi, get the SFT number in al
   183 00002FB2 3CFF                <1>     cmp al, -1  ;End of open JFT entries?
   184 00002FB4 7429                <1>     je .step4
   185 00002FB6 0FB6D8              <1>     movzx ebx, al   ;Move the file handle number into ebx
   186                              <1>     ;Replace with a call to close the handle eventually
   187 00002FB9 57                  <1>     push rdi
   188 00002FBA E824F9FFFF          <1>     call derefSFTPtr    ;Ret in rdi the SFT pointer
   189 00002FBF 7216                <1>     jc .badHdl  ;If a bad handle, skip the decrementing of the handle count
   190 00002FC1 FF35(81C60300)      <1>     push qword [currentSFT]
   191 00002FC7 E8ECF7FFFF          <1>     call setCurrentSFT  ;Set rdi to currentSFT
   192 00002FCC E881F4FFFF          <1>     call closeMain  ;Close all files opened by this program. Decrement ref ONLY
   193                              <1>     ;closeMain also flushes all sectors associated to the file
   194                              <1>     ;Ignore errors, simply keep closing files
   195 00002FD1 8F05(81C60300)      <1>     pop qword [currentSFT]
   196                              <1> .badHdl:
   197 00002FD7 5F                  <1>     pop rdi
   198 00002FD8 B0FF                <1>     mov al, -1
   199 00002FDA AA                  <1>     stosb   ;Store a -1 in it's place (not strictly necessary)
   200 00002FDB FFC9                <1>     dec ecx ;Zoom Zoom \mu-op!
   201 00002FDD 75D2                <1>     jnz .s3lp   ;Keep looping for all entries in the JFT 
   202                              <1> ;Step 4
   203                              <1> .step4:
   204 00002FDF 488B1D(81C30300)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   205                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   206                              <1>     ; with the currentPSP signature and free them.
   207 00002FE6 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   208                              <1> .s4lp:  ;And walk the chain
   209                              <1> ;First verify the address in rsi is a valid mcb
   210 00002FED 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   211 00002FEF 80F94D              <1>     cmp cl, mcbMarkCtn
   212 00002FF2 7405                <1>     je .checkToFree
   213 00002FF4 80F95A              <1>     cmp cl, mcbMarkEnd
   214 00002FF7 751F                <1>     jne .step5  ;Something wrong so stop freeing
   215                              <1> .checkToFree:
   216 00002FF9 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   217 00002FFD 7508                <1>     jne .noFree
   218 00002FFF 4989F0              <1>     mov r8, rsi ;Move pointer to r8
   219 00003002 E85FFBFFFF          <1>     call freeMemory ;Free this memory block
   220                              <1>     ;If an error occured, the internal vars will be set.
   221                              <1> .noFree:
   222 00003007 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   223 0000300A 740C                <1>     je .step5   ;Skip if we are
   224 0000300C 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   225 0000300F 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   226 00003013 4801C6              <1>     add rsi, rax    ;Goto next mcb block
   227 00003016 EBD5                <1>     jmp short .s4lp
   228                              <1> ;Step 5
   229                              <1> .step5:
   230 00003018 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   231 0000301C 488905(81C30300)    <1>     mov qword [currentPSP], rax
   232                              <1> ;Step 6
   233                              <1>     ;rbx points to current PSP
   234                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   235 00003023 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   236 00003027 B044                <1>     mov al, 44h
   237 00003029 E83A0B0000          <1>     call setIntVector
   238 0000302E 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   239 00003032 B043                <1>     mov al, 43h
   240 00003034 E82F0B0000          <1>     call setIntVector
   241 00003039 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   242 0000303D B042                <1>     mov al, 42h
   243 0000303F E8240B0000          <1>     call setIntVector
   244                              <1> ;Step 7
   245 00003044 B822110000          <1>     mov eax, 1122h  ;Network Termination Hook
   246 00003049 CD4F                <1>     int 4fh ;Beep it out
   247                              <1> ;Step 8
   248 0000304B 488B05(CCC30300)    <1>     mov rax, qword [oldoldRSP]  ;Make the parent register frame the current one
   249 00003052 488905(DCC30300)    <1>     mov qword [oldRSP], rax
   250                              <1> ;Step 9
   251 00003059 488B2D(DCC30300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to parent stack register frame in rbp
   252 00003060 48895548            <1>     mov qword [rbp + callerFrame.rip], rdx  ;Store return address vector here
   253                              <1> ;Step 10
   254 00003064 B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   255 00003066 CD4A                <1>     int 4ah
   256                              <1>     return
    18                              <2> %%_ret:
    19 00003068 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> loadExecChild:     ;ah = 4Bh, EXEC
   259                              <1>     return
    18                              <2> %%_ret:
    19 00003069 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    32                                  %include "./Source/Kernel/Local/Local.asm"
    33                              <1> ;Localisation based functions live here
    34                              <1> 
    35                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    36                              <1> ;al = 0 => Get the switch char
    37                              <1> ;al = 1 => Set the switch char to whats in DL
    38                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
    39                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
    40                              <1> ;       Always returns -1 => /DEV/ optional
    41                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    42                              <1> ;       Input value is ignored
    43 0000306A 3C01                <1>     cmp al, 01
    44 0000306C 7412                <1>     je .getSC
    45 0000306E 7209                <1>     jb .setSC
    46 00003070 3C03                <1>     cmp al, 03
    47 00003072 7214                <1>     jb .getDev
    48 00003074 741C                <1>     je .setDev
    49 00003076 B0FF                <1>     mov al, -1
    50                              <1>     return
    18                              <2> %%_ret:
    19 00003078 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    51                              <1> .setSC:
    52 00003079 8815(33C30300)      <1>     mov byte [switchChar], dl
    53                              <1>     return
    18                              <2> %%_ret:
    19 0000307F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> .getSC:
    55 00003080 8A15(33C30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    56 00003086 EB02                <1>     jmp short .getRet
    57                              <1> .getDev:
    58 00003088 B2FF                <1>     mov dl, -1
    59                              <1> .getRet:
    60 0000308A E85B050000          <1>     call getUserRegs
    61 0000308F 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    62                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    63                              <1>     return
    18                              <2> %%_ret:
    19 00003092 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> 
    66                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    67                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    68                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    69 00003093 C3                  <1>     ret
    33                                  %include "./Source/Kernel/ctrlc.asm"
    34                              <1> diskDevErr:
    35                              <1> ;Called, NOT Jumped to. 
    36                              <1> ;Input: rdi = Disk Buffer pointer
    37                              <1> ;       eax = Status word (Zero Extended)
    38                              <1> ;       rbp = Disk DPB pointer
    39                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    40                              <1> ;Output: al = Int 44h response (0-3)
    41                              <1> ; All other registers preserved
    42 00003094 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    43 0000309B 89C7                <1>     mov edi, eax    ;Store status word in rdi
    44 0000309D 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    45 000030A0 8A25(C9C30300)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    46 000030A6 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    47                              <1>     ;Test for correct buffer data type
    48 000030A9 53                  <1>     push rbx    ;Save rbx temporarily
    49 000030AA 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    50 000030AD F6C301              <1>     test bl, dosBuffer
    51 000030B0 7505                <1>     jnz .df0
    52 000030B2 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    53 000030B5 EB17                <1>     jmp short .df3
    54                              <1> .df0:
    55 000030B7 F6C302              <1>     test bl, fatBuffer
    56 000030BA 7505                <1>     jnz .df1
    57 000030BC 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    58 000030BF EB0D                <1>     jmp short .df3
    59                              <1> .df1:
    60 000030C1 F6C304              <1>     test bl, dirBuffer
    61 000030C4 7505                <1>     jnz .df2
    62 000030C6 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    63 000030C9 EB03                <1>     jmp short .df3
    64                              <1> .df2:
    65 000030CB 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    66                              <1> .df3:
    67 000030CE 5B                  <1>     pop rbx
    68 000030CF 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    69 000030D3 E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    70 000030D8 488B2D(DAC60300)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    71 000030DF 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    72                              <1>     return
    18                              <2> %%_ret:
    19 000030E6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    73                              <1> 
    74                              <1> charDevErr:
    75                              <1> ;Called with ah with additional bits
    76 000030E7 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
    77                              <1> criticalErrorSetup:
    78 000030EA 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    79 000030F0 48892D(DAC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    80 000030F7 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    81                              <1>     ;For now, fall through, but need much work to change it later! 
    82                              <1> 
    83                              <1> 
    84                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    85                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    86                              <1> ; to the critical error handler.
    87                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    88                              <1> ; and with Int44Bitfield set
    89                              <1> ;               AH = Critical Error Bitfield
    90                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    91                              <1> ;               Bit 6 - Reserved
    92                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    93                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    94                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    95                              <1> ;               Bits [2-1] = Affected Disk Error
    96                              <1> ;                     0 0   DOS area
    97                              <1> ;                     0 1   FAT area
    98                              <1> ;                     1 0   Directory area
    99                              <1> ;                     1 1   Data area
   100                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   101                              <1> ;               AL  = Failing drive number if AH[7] = 0
   102                              <1> ;               DIL = Error code for errorMsg
   103                              <1> ;               RSI = EA of Device Header for which device the error occured
   104                              <1> ;Return:
   105                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   106                              <1> ;                  = 1 - Retry the Operation    (Retry)
   107                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   108                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   109                              <1> ; Return response from int 44h in al
   110                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   111                              <1> ; This function will terminate the program if an abort was requested!
   112                              <1> ; This function also destroys RBP
   113 000030FD 803D(69C30300)01    <1>     cmp byte [critErrFlag], 1
   114 00003104 7204                <1>     jb .noIntError  ;If not 0, enter
   115 00003106 B003                <1>     mov al, critFail    ;Else, return Fail always
   116 00003108 EB4F                <1>     jmp short .exit     ;Don't translate fail to abort
   117                              <1> .noIntError:
   118 0000310A FA                  <1>     cli ;Disable Interrupts
   119 0000310B FE05(69C30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   120 00003111 FE0D(6AC30300)      <1>     dec byte [inDOS]    ;Exiting DOS
   121 00003117 488925(C1C30300)    <1>     mov qword [xInt44hRSP], rsp
   122 0000311E 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   123 00003125 31ED                <1>     xor ebp, ebp    ;Always zeroed
   124 00003127 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   125 00003129 488B25(C1C30300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   126 00003130 C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   127 00003137 FE05(6AC30300)      <1>     inc byte [inDOS]    ;Reenter DOS
   128 0000313D FB                  <1>     sti ;Reenable Interrupts
   129                              <1>     ;Now we check that the response given was allowed, and translate if needed
   130                              <1> .checkResponse:
   131 0000313E 3C01                <1>     cmp al, critRetry
   132 00003140 721F                <1>     jb .checkIgnore
   133 00003142 7428                <1>     je .checkRetry
   134 00003144 3C03                <1>     cmp al, critFail
   135 00003146 752F                <1>     jne .abort   ;Must be abort
   136                              <1> .setFail:   ;Here is for fail
   137 00003148 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   138 0000314A FE05(CBC30300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   139 00003150 F605(C9C30300)08    <1>     test byte [Int44bitfld], critFailOK
   140 00003157 751E                <1>     jnz .abort  ;If fail not permitted, abort
   141                              <1> .exit:
   142 00003159 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   143                              <1>     return
    18                              <2> %%_ret:
    19 00003160 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> .checkIgnore:
   145 00003161 F605(C9C30300)20    <1>     test byte [Int44bitfld], critIgnorOK
   146 00003168 75EF                <1>     jnz .exit
   147 0000316A EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   148                              <1> .checkRetry:
   149 0000316C F605(C9C30300)10    <1>     test byte [Int44bitfld], critRetryOK
   150 00003173 75E4                <1>     jnz .exit   
   151 00003175 EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   152                              <1> .abort:
   153                              <1> ;Prepare to abort. We abort from within!
   154                              <1>     ;First check if the process is it's own parent.
   155                              <1>     ;If it is, we exit fail and return to the process
   156 00003177 488B05(81C30300)    <1>     mov rax, qword [currentPSP] ;Get the current psp
   157 0000317E 53                  <1>     push rbx
   158 0000317F 488B5822            <1>     mov rbx, qword [rax + psp.parentPtr]
   159 00003183 4839C3              <1>     cmp rbx, rax    ;Check if the process is it's own parent
   160 00003186 5B                  <1>     pop rbx
   161 00003187 7509                <1>     jne .kill   ;If the process is not it's own parent, we kill the process
   162 00003189 C605(F7C30300)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   163 00003190 EBB6                <1>     jmp short .setFail
   164                              <1> .kill:
   165 00003192 66893D(6DC30300)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   166 00003199 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   167 0000319B C605(5FC60300)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   168 000031A2 E9B7FDFFFF          <1>     jmp terminateClean.altEP
   169                              <1> 
   170                              <1> ctrlBreakHdlr:
   171 000031A7 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   172 000031A9 E835EAFFFF          <1>     call printCaretASCII
   173 000031AE E860EAFFFF          <1>     call printCRLF
   174                              <1>     ;Reset the console back to 0
   175 000031B3 C605(F5C30300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   176                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   177 000031BA FA                  <1> 	cli
   178 000031BB 488B25(DCC30300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   179 000031C2 E87F070000          <1> 	call dosPopRegs ;Get user state back
   180 000031C7 488925(89C30300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   181 000031CE F8                  <1>     clc
   182 000031CF CD43                <1>     int 43h ;Call critical error handler
   183 000031D1 FA                  <1>     cli ;Clear interrupts again
   184 000031D2 488905(95C30300)    <1>     mov qword [oldRAX], rax ;Save rax
   185 000031D9 9C                  <1>     pushfq  ;Get flags in rax
   186 000031DA 58                  <1>     pop rax 
   187 000031DB 483B25(89C30300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   188 000031E2 750C                <1>     jne .checkCF
   189                              <1> .returnToDOS:
   190 000031E4 488B05(95C30300)    <1>     mov rax, qword [oldRAX]
   191 000031EB E9FC050000          <1>     jmp functionDispatch    ;Goto int 41h
   192                              <1> .checkCF:
   193 000031F0 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   194 000031F7 A801                <1>     test al, 1  ;CF set?
   195 000031F9 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   196 000031FB B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   197 00003200 C605(EDC30300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   198 00003207 E9E0050000          <1>     jmp functionDispatch
   199                              <1> 
    34                                  %include "./Source/Kernel/dosPrim.asm"
    35                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    36                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    37                              <1> 
    38                              <1> dosDefCritErrHdlr:
    39                              <1> ;The DOS default critical error handler always returns FAIL
    40 0000320C B003                <1>     mov al, critFail
    41 0000320E 48CF                <1>     iretq
    42                              <1> goDriverChar:
    43                              <1> ;Shortcut for Char requests, make a driver request
    44                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    45 00003210 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    46                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    47                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    48                              <1> ;       rbx = Ptr to the request header for the driver call!
    49 00003214 E86F070000          <1>     call dosCrit2Enter
    50 00003219 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    51 0000321C FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    52 0000321F E86E070000          <1>     call dosCrit2Exit
    53                              <1>     return
    18                              <2> %%_ret:
    19 00003224 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> 
    55                              <1> setupPhysicalDiskRequest:
    56                              <1> ;Ensure that al has valid disk number
    57                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    58                              <1> ;If CF=NC, rbp = DPB ptr.
    59                              <1> ;If CF=CY, exit error
    60 00003225 84C0                <1>     test al, al
    61 00003227 723F                <1>     jc .diskError
    62 00003229 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
    63 0000322F 7337                <1>     jae .diskError
    64 00003231 50                  <1>     push rax
    65 00003232 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    66 00003234 E83E040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    67 00003239 58                  <1>     pop rax
    68 0000323A 7235                <1>     jc .error
    69 0000323C 8805(60C60300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    70 00003242 488B2D(69C60300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    71 00003249 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    72 00003251 750A                <1>     jnz .netError
    73 00003253 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    74 00003257 E819030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    75                              <1>     return
    18                              <2> %%_ret:
    19 0000325C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    76                              <1> .netError:
    77 0000325D 66C705(6DC30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    77 00003265 00                  <1>
    78 00003266 EB09                <1>     jmp short .error
    79                              <1> .diskError:
    80 00003268 66C705(6DC30300)0F- <1>     mov word [errorExCde], errBadDrv
    80 00003270 00                  <1>
    81                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    82 00003271 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
    83 00003278 C605(6FC30300)07    <1>     mov byte [errorAction], eActRetUsr
    84 0000327F C605(70C30300)09    <1>     mov byte [errorClass], eClsBadFmt
    85 00003286 F9                  <1>     stc
    86                              <1>     return
    18                              <2> %%_ret:
    19 00003287 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    87                              <1> 
    88                              <1> setupAbsDiskEntry:
    89                              <1> ;Prepares to sets up the CDS and DPB for the request
    90 00003288 FE05(6AC30300)      <1>     inc byte [inDOS]
    91 0000328E FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    92 0000328F FC                  <1>     cld ;Set string ops in the right direction
    93 00003290 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    94 00003295 7223                <1>     jc .exit    ;Error exit
    95 00003297 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    96 0000329E 56                  <1>     push rsi
    97 0000329F 50                  <1>     push rax
    98 000032A0 488D35(7FC40300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    99 000032A7 8806                <1>     mov byte [rsi], al  ;Construct a path
   100 000032A9 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   101 000032AC C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   102 000032B0 F8                  <1>     clc
   103                              <1> ;++++++++++++++++++++++++++++
   104                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   105                              <1> ;Entered with path in rsi (ah=03h)
   106 000032B1 B800030000          <1>     mov eax, 0300h  
   107 000032B6 CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   108                              <1> ;++++++++++++++++++++++++++++
   109 000032B8 58                  <1>     pop rax
   110 000032B9 5E                  <1>     pop rsi
   111                              <1> .exit:
   112 000032BA 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   113                              <1>     return
    18                              <2> %%_ret:
    19 000032BC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> absDiskWrite:       ;Int 46h
   116                              <1> ;al = Drive number
   117                              <1> ;rbx = Memory Buffer address to read from
   118                              <1> ;ecx = Number of sectors to write
   119                              <1> ;rdx = Start LBA to write to
   120 000032BD FA                  <1>     cli
   121 000032BE 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   122 000032C5 488D25(DAD80300)    <1>     lea rsp, DiskStakTop
   123 000032CC 55                  <1>     push rbp
   124 000032CD 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   125 000032CE E8B5FFFFFF          <1>     call setupAbsDiskEntry
   126 000032D3 7252                <1>     jc absDiskExit
   127 000032D5 E8B0010000          <1>     call primReqWriteSetup
   128 000032DA EB1D                <1>     jmp short absDiskReadWriteCommon
   129                              <1> absDiskRead:        ;Int 45h
   130                              <1> ;al = Drive number
   131                              <1> ;rbx = Memory Buffer address to write to
   132                              <1> ;ecx = Number of sectors to read
   133                              <1> ;rdx = Start LBA to read from
   134 000032DC FA                  <1>     cli 
   135 000032DD 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   136 000032E4 488D25(DAD80300)    <1>     lea rsp, DiskStakTop
   137 000032EB 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   138 000032EC 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   139 000032ED E896FFFFFF          <1>     call setupAbsDiskEntry
   140 000032F2 7233                <1>     jc absDiskExit
   141 000032F4 E89C010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   142                              <1> absDiskReadWriteCommon:
   143                              <1> ;Entered with the appropriate function number in ah
   144                              <1> ; and primary request header in rbx
   145 000032F9 E83B000000          <1>     call absDiskDriverCall
   146 000032FE 7427                <1>     jz absDiskExit  ;Skip error code checking
   147 00003300 8A05(25C40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   148                              <1>     ;DOS uses the following pairs in a table
   149                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   150 00003306 B480                <1>     mov ah, 80h ;Attachment failure
   151 00003308 3C0C                <1>     cmp al, 0Ch ;Gen error
   152 0000330A 741A                <1>     je .absExit
   153 0000330C B440                <1>     mov ah, 40h ;Seek error
   154 0000330E 3C06                <1>     cmp al, 06h
   155 00003310 7414                <1>     je .absExit
   156 00003312 B408                <1>     mov ah, 08h ;Bad CRC
   157 00003314 3C04                <1>     cmp al, 04h
   158 00003316 740E                <1>     je .absExit
   159 00003318 B404                <1>     mov ah, 04h ;Sector not found
   160 0000331A 3C08                <1>     cmp al, 08h
   161 0000331C 7408                <1>     je .absExit
   162 0000331E 30E4                <1>     xor ah, ah  ;Write Protect Violation
   163 00003320 84C0                <1>     test al, al
   164 00003322 7402                <1>     je .absExit
   165 00003324 B402                <1>     mov ah, 02h ;Other Error
   166                              <1> .absExit:
   167 00003326 F9                  <1>     stc
   168                              <1> absDiskExit:
   169 00003327 5B                  <1>     pop rbx
   170 00003328 5D                  <1>     pop rbp
   171 00003329 FA                  <1>     cli
   172 0000332A FE0D(6AC30300)      <1>     dec byte [inDOS]
   173 00003330 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]
   174 00003337 FB                  <1>     sti ;Reenable interrupts
   175                              <1>     return ;Return from interrupt without popping flags!
    18                              <2> %%_ret:
    19 00003338 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   176                              <1> absDiskDriverCall:
   177                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   178                              <1> ;       rbx = Request header address
   179                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   180                              <1> ;       eax = Status word from request
   181                              <1> ;       ecx = Number of sectors transferred
   182 00003339 56                  <1>     push rsi
   183                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   184 0000333A 8B0D(38C40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   185                              <1>     ;Prepare for goDriver now
   186 00003340 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   187 00003344 E8CBFEFFFF          <1>     call goDriver   ;Make request
   188 00003349 5E                  <1>     pop rsi
   189 0000334A 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   190 00003350 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   191 00003352 0FB705(25C40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   192 00003359 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   193                              <1>     return
    18                              <2> %%_ret:
    19 0000335D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   194                              <1> 
   195                              <1> getDiskDPB:
   196                              <1> ;Gets the disk DPB if the Disk is physical
   197                              <1> ;Otherwise will return a pointer to the drive DPB
   198                              <1> ;Called with rdi pointing to the CDS
   199                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   200 0000335E 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   201 00003362 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   202 00003365 8805(60C60300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   203 0000336B E805020000          <1>     call setWorkingDPB
   204 00003370 57                  <1>     push rdi    ;Save the CDS ptr
   205 00003371 E837000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   206 00003376 5F                  <1>     pop rdi
   207 00003377 7233                <1>     jc .exitBad ;Preserve CF
   208 00003379 7530                <1>     jnz .exit
   209                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   210 0000337B 8A0D(70C00300)      <1>     mov cl, byte [lastdrvNum]
   211 00003381 31C0                <1>     xor eax, eax
   212 00003383 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   213 00003386 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   214 0000338A 488B3D(5DC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   215                              <1> .checkCDS:
   216 00003391 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   217 00003395 7509                <1>     jne .next
   218 00003397 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   219 0000339B 7403                <1>     jz .next    ;IF yes, skip it
   220 0000339D 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   221                              <1> .next:
   222 000033A0 4881C75B000000      <1>     add rdi, cds_size
   223 000033A7 FEC9                <1>     dec cl
   224 000033A9 75E6                <1>     jnz .checkCDS
   225                              <1> .exit:
   226 000033AB F8                  <1>     clc
   227                              <1> .exitBad:
   228                              <1>     return
    18                              <2> %%_ret:
    19 000033AC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   229                              <1> 
   230                              <1> ensureDiskValid:
   231                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   232                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   233                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   234                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   235                              <1> .medChk:
   236 000033AD E82C010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   237                              <1> ;Return in rbx the req hdr address
   238 000033B2 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   239 000033B6 E859FEFFFF          <1>     call goDriver   ;Request!
   240 000033BB 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   241 000033BF F7C700800000        <1>     test edi, drvErrStatus
   242 000033C5 756F                <1>     jnz .diskDrvCritErrMedChk
   243                              <1> .medChkIgnore:
   244 000033C7 8A05(60C60300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   245 000033CD 30E4                <1>     xor ah, ah
   246 000033CF 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   247 000033D2 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   248 000033D5 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   249 000033D7 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   250 000033D9 E861D5FFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   251 000033DE F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   252 000033DF 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   253                              <1>     ;ZF=NZ from test for dirty buffers
   254                              <1> .exit:
   255                              <1>     return
    18                              <2> %%_ret:
    19 000033E1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   256                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   257 000033E2 C605(E2D80300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   258 000033E9 E875D5FFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   259                              <1>     ;Get a buffer to read BPB into in rdi
   260 000033EE 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   261 000033F0 E811D7FFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   262 000033F5 72EA                <1>     jc .exit    ;Immediately exit with the carry flag set
   263 000033F7 4889DF              <1>     mov rdi, rbx
   264                              <1> .repeatEP:
   265 000033FA E80B010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   266 000033FF 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   267 00003403 E80CFEFFFF          <1>     call goDriver   ;Request!
   268 00003408 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   269 0000340C A900800000          <1>     test eax, drvErrStatus
   270 00003411 7561                <1>     jnz .diskDrvCritErrBPB
   271                              <1>     ;Now rebuild the dpb fields for this drive
   272 00003413 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   273 00003417 E87A080000          <1>     call createDPB  
   274 0000341C E864D5FFFF          <1>     call setBufferReferenced    ;We are now done with the buffer
   275                              <1>     ;Adjust the buffer header information
   276 00003421 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   277 00003424 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   278 00003427 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   279 0000342A 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   280 0000342D 30E4                <1>     xor ah, ah
   281 0000342F 8825(E2D80300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   282                              <1>     return
    18                              <2> %%_ret:
    19 00003435 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   283                              <1> .diskDrvCritErrMedChk:
   284                              <1> ;Critical Errors fall through here
   285                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   286 00003436 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   287 0000343D 48892D(DAC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   288 00003444 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   289 00003447 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   290 00003449 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   291 0000344F E8A9FCFFFF          <1>     call criticalDOSError
   292 00003454 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]
   293 0000345B 488B2D(DAC60300)    <1>     mov rbp, qword [tmpDPBPtr]
   294 00003462 3C01                <1>     cmp al, critRetry
   295 00003464 0F8443FFFFFF        <1>     je .medChk
   296 0000346A 3C00                <1>     cmp al, critIgnore
   297 0000346C 0F8455FFFFFF        <1>     je .medChkIgnore
   298 00003472 F9                  <1>     stc ;Set error flag to indicate fail
   299                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00003473 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   300                              <1> 
   301                              <1> .diskDrvCritErrBPB:
   302                              <1>     ;eax has status word, rbp has dpb ptr
   303                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   304 00003474 C605(C9C30300)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   305 0000347B E814FCFFFF          <1>     call diskDevErr
   306 00003480 3C01                <1>     cmp al, critRetry
   307 00003482 0F8472FFFFFF        <1>     je .repeatEP
   308                              <1>     ;Else we fail (Ignore=Fail here)
   309 00003488 F9                  <1>     stc ;Set error flag to indicate fail
   310                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00003489 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   311                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   312                              <1> ;           Primitive Driver Requests
   313                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   314                              <1> ;First are Disk requests, then Char device requests
   315                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   316                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   317                              <1> 
   318                              <1> primReqWriteSetup:
   319 0000348A 50                  <1>     push rax
   320 0000348B B408                <1>     mov ah, drvWRITE    ;Command code
   321 0000348D 0225(32C30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   322 00003493 EB03                <1>     jmp short primReqRWCommon
   323                              <1> primReqReadSetup:
   324 00003495 50                  <1>     push rax
   325 00003496 B404                <1>     mov ah, drvREAD
   326                              <1> primReqRWCommon:
   327                              <1> ;Sets up the IO request packet with:
   328                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   329                              <1> ; rbx = Data storage buffer ptr
   330                              <1> ; ecx = Number of sectors to transfer
   331                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   332                              <1> ; ~~~~ Set by entry function ~~~~ 
   333                              <1> ; ah = Command code
   334                              <1> ; All regs preserved EXCEPT rbx.
   335                              <1> ; Return: rbx = Transfer Address
   336 00003498 48891D(30C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   337 0000349F 890D(38C40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   338 000034A5 C605(22C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   339 000034AC 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   340 000034B1 8905(23C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   341 000034B7 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   342 000034BA 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   343                              <1>     ;Disk operations only here!
   344 000034BC 488915(3CC40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   345 000034C3 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   346 000034C6 8805(2FC40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   347 000034CC 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   348 000034CF 8805(23C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   349                              <1> primReqCommonExit:
   350                              <1> ;Returns in rbx the primary request header as these functions
   351                              <1> ; setup the request in the primary request header space
   352 000034D5 58                  <1>     pop rax
   353 000034D6 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   354                              <1>     return
    18                              <2> %%_ret:
    19 000034DD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   355                              <1> 
   356                              <1> primReqMedCheckSetup:
   357                              <1> ;Prepare the diskIO packet for mediacheck
   358                              <1> ;rbp has DPB pointer for device to check media on
   359 000034DE 50                  <1>     push rax
   360 000034DF C605(22C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   361 000034E6 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   362 000034E9 8805(2FC40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   363 000034EF 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   364 000034F2 8805(23C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   365 000034F8 C605(24C40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   366 000034FF 66C705(25C40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   366 00003507 00                  <1>
   367 00003508 EBCB                <1>     jmp short primReqCommonExit
   368                              <1> 
   369                              <1> primReqGetBPBSetup:
   370                              <1> ;rbp has DPB pointer for device
   371                              <1> ;rdi has sector buffer header pointer for transfer
   372 0000350A 50                  <1>     push rax
   373 0000350B 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   374 0000350F 48893D(30C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   375 00003516 C605(22C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   376 0000351D 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   377 00003520 8805(2FC40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   378 00003526 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   379 00003529 8805(23C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   380 0000352F C605(24C40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   381 00003536 66C705(25C40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   381 0000353E 00                  <1>
   382 0000353F EB94                <1>     jmp short primReqCommonExit
   383                              <1> 
   384                              <1> primReqOpenSetup:
   385                              <1> ;al = unit number if a disk device. Undefined otherwise
   386 00003541 50                  <1>     push rax
   387 00003542 B40D                <1>     mov ah, drvOPEN
   388                              <1> primReqCloseSetup:
   389                              <1> ;al = unit number if a disk device. Undefined otherwise
   390 00003544 50                  <1>     push rax
   391 00003545 B40E                <1>     mov ah, drvCLOSE
   392                              <1> primReqOCcommon:
   393 00003547 C605(22C40300)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   394 0000354E 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   395 0000354F 8905(23C40300)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   396                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   397 00003555 E97BFFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   398                              <1> 
   399                              <1> secdReqCharIOReq:
   400                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   401                              <1> ;Input:
   402                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   403                              <1> ; ecx = Length of buffer
   404                              <1> ; rdi = Buffer pointer
   405                              <1> ;Output: 
   406                              <1> ; rbx = Transfer Address 
   407 0000355A 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   408 00003561 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   409 00003564 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   410 00003567 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   411 0000356D 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   412 00003571 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   413                              <1>     return
    18                              <2> %%_ret:
    19 00003574 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   414                              <1> ;If the device which will process this request is a disk device
   415                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   416                              <1> ;Then we will read the appropriate byte from that buffer to the 
   417                              <1> ; singleIOByt buffer.
   418                              <1> ;Such a request will require additional setup with the following fields:
   419                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    35                                  %include "./Source/Kernel/dosUtils.asm"
    36                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    37                              <1> 
    38                              <1> ;Basic Drive related Utilities
    39                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    40                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    41                              <1> ; that gets set up)
    42                              <1> 
    43                              <1> setWorkingDPB:
    44                              <1> ;Gets dpb in rbp and saves to workingDPB
    45 00003575 48892D(61C60300)    <1>     mov qword [workingDPB], rbp
    46                              <1>     return
    18                              <2> %%_ret:
    19 0000357C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    47                              <1> 
    48                              <1> testCDSNet:
    49                              <1> ;Checks if the workingCDS is a redirector drive
    50                              <1> ;Return: rdi = workingCDS
    51                              <1> ;        CF=NC => Net
    52                              <1> ;        CF=CY => Not net or invalid CDS
    53 0000357D 488B3D(69C60300)    <1>     mov rdi, qword [workingCDS]
    54 00003584 4881FFFFFFFFFF      <1>     cmp rdi, -1
    55 0000358B 7409                <1>     je .notNet
    56 0000358D 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    57 00003593 7501                <1>     jnz .notNet ;Carry flag will always be clear
    58                              <1>     return
    18                              <2> %%_ret:
    19 00003595 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    59                              <1> .notNet:
    60 00003596 F9                  <1>     stc
    61                              <1>     return
    18                              <2> %%_ret:
    19 00003597 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> getDiskData:
    64                              <1> ;This function returns:
    65                              <1> ;al = sectors per cluster
    66                              <1> ;ah = media ID byte
    67                              <1> ;ebx = total clusters
    68                              <1> ;cx = bytes per sector
    69                              <1> ;edx = number of available clusters
    70                              <1> ;
    71                              <1> ;If CF=CY on exit, al contains the error code
    72 00003598 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    73 0000359D 7308                <1>     jnc .physical
    74                              <1>     ;Beep a redir request out
    75 0000359F B80C110000          <1>     mov eax, 110Ch 
    76 000035A4 CD4F                <1>     int 4Fh
    77                              <1>     return
    18                              <2> %%_ret:
    19 000035A6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    78                              <1> .physical:
    79                              <1> ;Now we must lock the structures
    80 000035A7 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
    81 000035AE E8C1030000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    82 000035B3 E8A6FDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    83 000035B8 721C                <1>     jc .exit
    84 000035BA E852D6FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    85 000035BF 7215                <1>     jc .exit
    86 000035C1 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    87 000035C4 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    88 000035C6 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    89 000035C9 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    90 000035CC FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
    91 000035CE 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    92 000035D2 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    93 000035D5 F8                  <1>     clc
    94                              <1> .exit:
    95 000035D6 E8A3030000          <1>     call dosCrit1Exit
    96                              <1>     return
    18                              <2> %%_ret:
    19 000035DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    97                              <1> 
    98                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
    99                              <1> ;Input: al = Interrupt number
   100                              <1> ;Output: rbx = Interrupt Vector
   101 000035DC 50                  <1>     push rax    ;Preserve rax, segment selector returned by call
   102 000035DD 52                  <1>     push rdx    ;Preserve rdx, Attribute Word returned by call
   103 000035DE 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   104 000035E0 B807F00000          <1>     mov eax, 0F007h
   105 000035E5 CD35                <1>     int 35h
   106 000035E7 5A                  <1>     pop rdx
   107 000035E8 58                  <1>     pop rax
   108                              <1>     return
    18                              <2> %%_ret:
    19 000035E9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   109                              <1> 
   110                              <1> getUserRegs:   ;Int 4Fh AX=1218h
   111                              <1> ;Returns ptr to user regs in rsi
   112 000035EA 488B35(DCC30300)    <1>     mov rsi, qword [oldRSP]
   113                              <1>     return
    18                              <2> %%_ret:
    19 000035F1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> walkDPBchain:
   116                              <1> ;Called with al = 0 based drive number
   117                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
   118 000035F2 488B35(3BC00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
   119                              <1> .walk:
   120 000035F9 4881FEFFFFFFFF      <1>     cmp rsi, -1
   121 00003600 740A                <1>     je .exitBad
   122 00003602 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   123 00003604 7407                <1>     je .exit    ;Drive found
   124 00003606 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   125 0000360A EBED                <1>     jmp short .walk
   126                              <1> .exitBad:
   127 0000360C F9                  <1>     stc
   128                              <1> .exit:
   129                              <1>     return
    18                              <2> %%_ret:
    19 0000360D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   130                              <1> setDrive:   
   131                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
   132                              <1> ;Input: al = 1-based drive number
   133                              <1> ;Output: al = 0-based drive number
   134                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   135                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   136                              <1> ;            set.
   137 0000360E E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   138 00003613 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   139 00003615 56                  <1>     push rsi
   140 00003616 488B35(69C60300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   141 0000361D 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   142 00003623 5E                  <1>     pop rsi
   143 00003624 7401                <1>     jz .exit
   144 00003626 F9                  <1>     stc
   145                              <1> .exit:
   146                              <1>     return
    18                              <2> %%_ret:
    19 00003627 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   147                              <1> 
   148                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   149                              <1> ;Allows a redirector or subst/join to build a CDS
   150                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   151                              <1> ; volumes, that are made at system boot.
   152                              <1> ;Input: al = Drive Letter for drive
   153                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   154                              <1> ;Output: rdi = newly filled in workingCDS
   155                              <1> ;CF=NC => CDS valid and has a DPB
   156                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   157 00003628 50                  <1>     push rax
   158 00003629 2C40                <1>     sub al, "A"-1
   159 0000362B 3A05(6FC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   160 00003631 488B3D(69C60300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   161 00003638 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   162 0000363E 58                  <1>     pop rax
   163 0000363F 7235                <1>     jb .exit    ;Exit with CF=CY
   164 00003641 50                  <1>     push rax
   165 00003642 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   166 00003647 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   167 00003649 58                  <1>     pop rax
   168 0000364A 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   169 00003650 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   170 00003657 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   171 0000365F 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   172                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   173 00003665 50                  <1>     push rax
   174 00003666 56                  <1>     push rsi
   175 00003667 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   176 00003669 E884FFFFFF          <1>     call walkDPBchain
   177 0000366E 7204                <1>     jb .skipSettingDPB
   178 00003670 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   179                              <1> .skipSettingDPB:
   180 00003674 5E                  <1>     pop rsi
   181 00003675 58                  <1>     pop rax
   182                              <1> .exit:
   183                              <1>     return
    18                              <2> %%_ret:
    19 00003676 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   184                              <1> 
   185                              <1> getCDS:     ;Int 4Fh AX=1219h
   186                              <1> ;Gets the device DPB and saves it in the DOS variable
   187                              <1> ;This can be called to get CDS for network drives too!
   188                              <1> ;Input: al = 1 based drive number
   189                              <1> ;Sets workingCDS var with the CDS for the device. 
   190                              <1> ;   If device on a network, sets CF
   191                              <1> ;Returns al with 0-based drive number
   192 00003677 84C0                <1>     test al, al
   193 00003679 7508                <1>     jnz .skip
   194 0000367B 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   195 00003681 FEC0                <1>     inc al
   196                              <1> .skip:
   197 00003683 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   198 00003685 56                  <1>     push rsi
   199 00003686 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   200 0000368D F605(5CC60300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   201 00003694 7423                <1>     jz .physDrive
   202                              <1>     ;Invokation via 21/5D00, not yet fully supported
   203                              <1>     ;If returned with CF=CY, consider it an error for now
   204 00003696 50                  <1>     push rax
   205 00003697 57                  <1>     push rdi
   206 00003698 488D3D(FBC50300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   207 0000369F 48893D(69C60300)    <1>     mov qword [workingCDS], rdi ;Make it current
   208 000036A6 0441                <1>     add al, "A" ;Convert to a drive letter
   209 000036A8 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   210 000036AD 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   211 000036B3 5F                  <1>     pop rdi
   212 000036B4 58                  <1>     pop rax
   213 000036B5 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   214 000036B7 EB17                <1>     jmp short .exitOk   ;All oki
   215                              <1> .physDrive:
   216 000036B9 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   217 000036BE 7208                <1>     jc .exitBad
   218 000036C0 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   219 000036C6 7508                <1>     jnz .exitOk ;Exit with flag cleared
   220                              <1>     ;Else Return to unknown error locus
   221                              <1> .exitBad:
   222 000036C8 C605(6CC30300)01    <1>     mov byte [errorLocus], eLocUnk
   223                              <1> .exitBad1:
   224 000036CF F9                  <1>     stc
   225                              <1> .exitOk:
   226 000036D0 5E                  <1>     pop rsi
   227                              <1>     return
    18                              <2> %%_ret:
    19 000036D1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   228                              <1> 
   229                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   230                              <1>     ;Gets the CDS for the current drive in al
   231                              <1>     ;Input: al = Drive number, 0 = A ...
   232                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   233                              <1>     ;        CF=CY => al not valid
   234 000036D2 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
   235 000036D8 7202                <1>     jb .ctn
   236 000036DA F9                  <1>     stc 
   237                              <1>     return
    18                              <2> %%_ret:
    19 000036DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   238                              <1> .ctn:
   239 000036DC 50                  <1>     push rax
   240 000036DD 52                  <1>     push rdx
   241 000036DE 0FB6C0              <1>     movzx eax, al
   242 000036E1 48BE5B000000000000- <1>     mov rsi, cds_size
   242 000036EA 00                  <1>
   243 000036EB 31D2                <1>     xor edx, edx
   244 000036ED F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   245 000036EF 488B35(5DC00300)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   246 000036F6 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   247 000036F9 488935(69C60300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   248 00003700 5A                  <1>     pop rdx
   249 00003701 58                  <1>     pop rax
   250 00003702 F8                  <1>     clc
   251                              <1>     return
    18                              <2> %%_ret:
    19 00003703 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   252                              <1> 
   253                              <1> 
   254                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   255                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   256                              <1> ;Input: AL = Char to normalise.
   257                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   258                              <1> ;If path separator, set ZF=ZE
   259 00003704 3C5C                <1>     cmp al, "\"
   260 00003706 7406                <1>     je .exit
   261 00003708 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   262 0000370A 7502                <1>     jne .exit
   263 0000370C B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   264                              <1> .exit:
   265                              <1>     return
    18                              <2> %%_ret:
    19 0000370E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   266                              <1> 
   267                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   268                              <1> ;Convert a lowercase char to uppercase
   269                              <1> ; Leave alone uppercase chars and invalid chars
   270                              <1> ;Input: al = Char to convert to uppercase
   271                              <1> ;Output: al = Processed char
   272 0000370F 53                  <1>     push rbx
   273 00003710 3C61                <1>     cmp al, "a"
   274 00003712 7214                <1>     jb .exit
   275 00003714 3C7A                <1>     cmp al, "z"
   276 00003716 7702                <1>     ja .checkExt
   277 00003718 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   278                              <1> .checkExt:
   279 0000371A 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   280 0000371C 720A                <1>     jb .exit
   281 0000371E 2C80                <1>     sub al, 80h ;Turn into table offset
   282 00003720 488D1DA9CAFFFF      <1>     lea rbx, extAsciiTbl
   283 00003727 D7                  <1>     xlatb   ;Get converted extended byte into al
   284                              <1> .exit:
   285 00003728 50                  <1>     push rax    ;Save al temporarily
   286 00003729 488D1D20CBFFFF      <1>     lea rbx, extAsciiSig
   287 00003730 D7                  <1>     xlatb   ;Get the signature in al
   288 00003731 A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   289 00003733 58                  <1>     pop rax
   290 00003734 5B                  <1>     pop rbx
   291                              <1>     return
    18                              <2> %%_ret:
    19 00003735 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   292                              <1> checkPathspecOK:
   293                              <1> ;Input:
   294                              <1> ;rdx -> points to a path to verify if it is ok.
   295                              <1> ;Output:
   296                              <1> ;CF=NC => The path is totally clean and ok to use.
   297                              <1> ;CF=CY => the path is malformed and may be used ONLY if ZF=ZE. 
   298                              <1> ; If ZF=ZE then the only malformed chars are path separators and may be used.
   299                              <1> ;Path separators are \, / and : for drive separation (not counted in ZF setting)
   300                              <1> ; Additionally ZF=ZE if the only bad char is followed by a ASCII null
   301                              <1> 
   302                              <1> ;Full paths may start with \\<15-char machine name>\...
   303                              <1> ; or <Drive Letter>:\...
   304                              <1> ;CWD relative paths start with <Drive Letter>:...
   305                              <1> ;Current Drive Root Relative paths may start with \...
   306                              <1> ;Current Drive CWD relative paths start with any other char
   307                              <1> ;FOR NOW, we allow redir but no servers. Too much hassle for now
   308                              <1> 
   309                              <1> ;We accept lc and uc characters in this check function.
   310 00003736 50                  <1>     push rax
   311 00003737 51                  <1>     push rcx
   312 00003738 56                  <1>     push rsi
   313 00003739 57                  <1>     push rdi
   314 0000373A 9C                  <1>     pushfq
   315 0000373B 59                  <1>     pop rcx ;Get flags into ecx
   316 0000373C 81E1BEFFFFFF        <1>     and ecx, ~41h  ;Clear CF and ZF to begin
   317                              <1>     ;First we verify that the first two chars are ok (either X: or \\ or chars)
   318 00003742 668B02              <1>     mov ax, word [rdx]  ;Get the first two chars
   319 00003745 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   320 00003749 740D                <1>     je .okToScanNet
   321 0000374B 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   322 0000374F 7407                <1>     je .okToScanNet
   323 00003751 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   324 00003754 741D                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   325                              <1>     ;Is this a current drive CWD relative or current drive root relative path?
   326                              <1>     ;If so the pathspec is not different to normal, goto scanLoop
   327 00003756 EB32                <1>     jmp short .scanLoop
   328                              <1> .okToScanNet:
   329 00003758 81C941000000        <1>     or ecx, 41h  ;Set ZF and CF to indicate "technically" a bad char
   330 0000375E EB23                <1>     jmp short .okToScan
   331                              <1> .badExit:
   332                              <1> ;Before we bad exit, we check if the next char is ascii null.
   333                              <1> ;If it is we still accept the path
   334 00003760 AC                  <1>     lodsb
   335 00003761 84C0                <1>     test al, al
   336 00003763 744A                <1>     jz .badLastChar
   337 00003765 81E1BFFFFFFF        <1>     and ecx, ~40h    ;Clear ZF if ZF was set
   338 0000376B 81C901000000        <1>     or ecx, 1   ;Set carry flag
   339 00003771 EB3C                <1>     jmp short .exit
   340                              <1> .diskPath:
   341                              <1> ;Disk Letter must be A-Z (or a-z)
   342 00003773 3C41                <1>     cmp al, "A"
   343 00003775 72E9                <1>     jb .badExit
   344 00003777 3C7A                <1>     cmp al, "z"
   345 00003779 77E5                <1>     ja .badExit
   346 0000377B 3C61                <1>     cmp al, "a"
   347 0000377D 7304                <1>     jae .okToScan
   348 0000377F 3C5A                <1>     cmp al, "Z"
   349 00003781 77DD                <1>     ja .badExit
   350                              <1> .okToScan:
   351 00003783 4881C602000000      <1>     add rsi, 2  ;Skip first two chars now
   352                              <1> .scanLoop:
   353 0000378A AC                  <1>     lodsb   ;Get char, inc rsi
   354 0000378B 84C0                <1>     test al, al  ;Is al=0, i.e string terminator?
   355 0000378D 7420                <1>     je .exit
   356 0000378F E822000000          <1>     call checkCharValid ;Validity check
   357                              <1>     ;If ZF=ZE, check if it is a path separator
   358 00003794 75F4                <1>     jnz .scanLoop   ;Char was ok if ZF=NZ, loop around
   359 00003796 3C5C                <1>     cmp al, "\"
   360 00003798 740D                <1>     je .pathSepFnd
   361 0000379A 3C2F                <1>     cmp al, "/"
   362 0000379C 7409                <1>     je .pathSepFnd
   363 0000379E E826000000          <1>     call checkCharOk    ;Check if it is ok, i.e. a period or wildcard
   364 000037A3 75E5                <1>     jne .scanLoop    ;Pretend they are alright!
   365 000037A5 EBB9                <1>     jmp short .badExit
   366                              <1> .pathSepFnd:
   367 000037A7 81C941000000        <1>     or ecx, 41h  ;Set ZF and CF to indicate "technically" a bad char    
   368 000037AD EBDB                <1>     jmp short .scanLoop
   369                              <1> .badLastChar:
   370                              <1> ;If a bad last char was detected, we set ZF and CF
   371                              <1>     or ecx,
   371          ******************  <1>  error: invalid combination of opcode and operands
   372                              <1> .exit:
   373 000037AF 51                  <1>     push rcx    ;Push flags back on
   374 000037B0 9D                  <1>     popfq   ;And pop them into the flags register
   375 000037B1 5F                  <1>     pop rdi
   376 000037B2 5E                  <1>     pop rsi
   377 000037B3 59                  <1>     pop rcx
   378 000037B4 58                  <1>     pop rax
   379                              <1>     return
    18                              <2> %%_ret:
    19 000037B5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   380                              <1> 
   381                              <1> checkCharValid:
   382                              <1> ;If ZF=ZE => Invalid Char
   383                              <1> ;If ZF=NZ => Valid Char
   384 000037B6 51                  <1>     push rcx
   385 000037B7 57                  <1>     push rdi
   386 000037B8 B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   387 000037BD 488D3DDCC9FFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   388 000037C4 F2AE                <1>     repne scasb ;Scan. Stop when equal
   389 000037C6 5F                  <1>     pop rdi
   390 000037C7 59                  <1>     pop rcx
   391                              <1>     return
    18                              <2> %%_ret:
    19 000037C8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   392                              <1> checkCharOk:
   393                              <1> ;Same as checkCharValid except DOES not return error on * ? \ / .
   394 000037C9 3C2E                <1>     cmp al, "."
   395 000037CB 7412                <1>     je .exitOk
   396 000037CD 3C2A                <1>     cmp al, "*"
   397 000037CF 740E                <1>     je .exitOk
   398 000037D1 3C3F                <1>     cmp al, "?"
   399 000037D3 740A                <1>     je .exitOk
   400 000037D5 3C5C                <1>     cmp al, "\"
   401 000037D7 7406                <1>     je .exitOk
   402 000037D9 3C2F                <1>     cmp al, "/"
   403 000037DB 7402                <1>     je .exitOk
   404                              <1> .ok:
   405 000037DD EBD7                <1>     jmp short checkCharValid
   406                              <1> .exitOk:
   407 000037DF 50                  <1>     push rax
   408 000037E0 0C01                <1>     or al, 1    ;Always clears the ZF
   409 000037E2 58                  <1>     pop rax
   410                              <1>     return
    18                              <2> %%_ret:
    19 000037E3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> strcpy:
   413                              <1> ;Copies a null terminated string from rsi to rdi
   414 000037E4 AC                  <1>     lodsb
   415 000037E5 AA                  <1>     stosb
   416 000037E6 84C0                <1>     test al, al
   417                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000037E8 74F9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   418 000037EA EBF8                <1>     jmp short strcpy
    36                                  %include "./Source/Kernel/dosMain.asm"
    37                              <1> ;-----------------------------------:
    38                              <1> ;        Main Kernel dispatch       :
    39                              <1> ;            and routines           :
    40                              <1> ;-----------------------------------:
    41                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    42                              <1> ;ah = Function number, all other registers have various meanings
    43                              <1>  %if DEBUG
    44                              <1>     ;Entry function
    45                              <1>     debugEnterM
    46                              <1>     lea rbp, .l0000
    47                              <1>     call debPrintNullString
    48                              <1>     call debPrintFunctionName
    49                              <1>     jmp short .l0001
    50                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    51                              <1> .l0001:    
    52                              <1>     debugExitM
    53                              <1>     %endif
    54 000037EC FA                  <1>     cli ;Halt external interrupts
    55 000037ED FC                  <1>     cld ;Ensure all string ops occur in the right direction
    56 000037EE 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    57 000037F1 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    58                              <1>     ;Cherry pick functions
    59 000037F7 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    60 000037FA 722C                <1>     jb .fsbegin   ;If below skip these checks
    61 000037FC 0F8470020000        <1>     je ctrlBreakCheck
    62 00003802 80FC64              <1>     cmp ah, 64h
    63 00003805 0F84B0020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    64 0000380B 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    65 0000380D 80FC51              <1>     cmp ah, 51h
    66 00003810 0F8493020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    67 00003816 80FC62              <1>     cmp ah, 62h
    68 00003819 0F8493020000        <1>     je getPSPaddr          ;Calls the above function
    69 0000381F 80FC50              <1>     cmp ah, 50h
    70 00003822 0F8478020000        <1>     je setCurrProcessID
    71                              <1> .fsbegin:
    72 00003828 E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    73 0000382D 48891D(E4C30300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    74 00003834 66C705(A5C30300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    74 0000383C 00                  <1>
    75 0000383D 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
    76 00003844 488905(CCC30300)    <1>     mov qword [oldoldRSP], rax
    77 0000384B FE05(6AC30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    78 00003851 488925(DCC30300)    <1>     mov qword [oldRSP], rsp
    79                              <1> ;Network related variable resetting
    80 00003858 C605(5CC60300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    81                              <1> ;Here, we want to save oldRSP in the callers PSP
    82 0000385F 803D(6AC30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    83 00003866 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    84 00003868 488B05(81C30300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    85 0000386F 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    86                              <1> .fsb1:
    87 00003873 58                  <1>     pop rax     ;Get old rax back
    88 00003874 50                  <1>     push rax    ;and push it back onto the stack
    89                              <1> .abortEP:
    90                              <1> .charFun0CEP:
    91 00003875 488D25(0BCC0300)    <1>     lea rsp, critStakTop
    92 0000387C FB                  <1>     sti         ;Reenable interrupts
    93                              <1> 
    94 0000387D 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    95 0000387F 881D(F5C30300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    96 00003885 C605(F6C30300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    97 0000388C 881D(CBC30300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
    98 00003892 881D(ECC30300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    99                              <1> 
   100 00003898 50                  <1>     push rax        ;Save rax to use temporarily as table base 
   101 00003899 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   102 0000389B D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   103 0000389D 488D052CCAFFFF      <1>     lea rax, kDispTbl
   104 000038A4 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   105 000038A7 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   106 000038AB 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   107 000038AE 58                  <1>     pop rax
   108                              <1> 
   109 000038AF 84E4                <1>     test ah, ah     ;Simple Terminate function?
   110 000038B1 741C                <1>     jz .fddiskOp
   111 000038B3 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   112 000038B6 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   113 000038B8 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   114 000038BB 7712                <1>     ja .fddiskOp
   115                              <1> ;Char operations here
   116 000038BD F605(69C30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   117 000038C4 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   118 000038C6 488D25(9AD20300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   119 000038CD EB40                <1>     jmp short .fdGoToFunction
   120                              <1> .fddiskOp:
   121                              <1>     ;Disk operations go here
   122                              <1>     ;Save rax on entry to a disk funciton
   123 000038CF 488905(95C30300)    <1>     mov qword [oldRAX], rax
   124                              <1>     ;Clear up error info
   125 000038D6 C605(6CC30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   126 000038DD C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   127 000038E4 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   128                              <1> 
   129 000038EB 50                  <1>     push rax
   130 000038EC B482                <1>     mov ah, 82h ;Cancel all critical section!
   131 000038EE CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   132 000038F0 58                  <1>     pop rax
   133                              <1> 
   134 000038F1 C605(F6C30300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   135 000038F8 488D25(DAD80300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   136 000038FF F605(94C30300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   137 00003906 7407                <1>     jz .fdGoToFunction
   138                              <1> ; HANDLE CTRL+BREAK HERE!
   139 00003908 50                  <1>     push rax
   140 00003909 E813E3FFFF          <1>     call checkBreak   ; Check for a ^C
   141 0000390E 58                  <1>     pop rax
   142                              <1> .fdGoToFunction:
   143 0000390F 48871D(E4C30300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   144                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   145                              <1>     ;
   146                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   147                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   148                              <1>     ;
   149                              <1>     %if DEBUG && REGS
   150                              <1>     ;Print stack if necessary function
   151                              <1>     debugEnterM
   152                              <1>     call debPrintDOSStack
   153                              <1>     debugExitM
   154                              <1>     %endif
   155 00003916 FF15(E4C30300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   156                              <1>     %if DEBUG
   157                              <1>     ;Entry function
   158                              <1>     debugEnterM
   159                              <1>     lea rbp, .l0002
   160                              <1>     call debPrintNullString
   161                              <1>     jmp short .l0003
   162                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   163                              <1> .l0003:    
   164                              <1>     debugExitM
   165                              <1>     %endif
   166                              <1>     %if DEBUG && REGS
   167                              <1>     ;Exit function
   168                              <1>     debugEnterM
   169                              <1>     call debPrintDOSStack
   170                              <1>     debugExitM
   171                              <1>     %endif
   172                              <1> .fdExit:
   173 0000391C FA                  <1>     cli     ;Redisable interrupts
   174 0000391D FE0D(6AC30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   175 00003923 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   176 0000392A 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   177 0000392D 488B05(CCC30300)    <1>     mov rax, qword [oldoldRSP]
   178 00003934 488905(DCC30300)    <1>     mov qword [oldRSP], rax
   179 0000393B E806000000          <1>     call dosPopRegs  ;Pop the frame
   180 00003940 48CF                <1>     iretq
   181                              <1> .fdExitBad:
   182 00003942 30C0                <1>     xor al, al
   183                              <1> defaultIretq:
   184 00003944 48CF                <1>     iretq
   185                              <1> dosPopRegs:
   186 00003946 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   187 0000394C 58                  <1>     pop rax
   188 0000394D 5B                  <1>     pop rbx
   189 0000394E 59                  <1>     pop rcx
   190 0000394F 5A                  <1>     pop rdx
   191 00003950 5E                  <1>     pop rsi
   192 00003951 5F                  <1>     pop rdi
   193 00003952 5D                  <1>     pop rbp
   194 00003953 4158                <1>     pop r8
   195 00003955 4159                <1>     pop r9
   196 00003957 FF25(D4C30300)      <1>     jmp qword [dosReturn]
   197                              <1> dosPushRegs:
   198 0000395D 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   199 00003963 4151                <1>     push r9
   200 00003965 4150                <1>     push r8
   201 00003967 55                  <1>     push rbp
   202 00003968 57                  <1>     push rdi
   203 00003969 56                  <1>     push rsi
   204 0000396A 52                  <1>     push rdx
   205 0000396B 51                  <1>     push rcx
   206 0000396C 53                  <1>     push rbx
   207 0000396D 50                  <1>     push rax
   208 0000396E FF25(D4C30300)      <1>     jmp qword [dosReturn]
   209                              <1> dosCrit1Enter:
   210                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    18                              <2> %%_ret:
    19 00003974 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   211 00003975 B801800000          <1>     mov eax, 8001h
   212 0000397A CD4A                <1>     int 4ah
   213 0000397C 58                  <1>     pop rax
   214                              <1>     return
    18                              <2> %%_ret:
    19 0000397D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   215                              <1> dosCrit1Exit:
   216                              <1>     return
    18                              <2> %%_ret:
    19 0000397E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   217 0000397F B801810000          <1>     mov eax, 8101h
   218 00003984 CD4A                <1>     int 4ah
   219 00003986 58                  <1>     pop rax
   220                              <1>     return
    18                              <2> %%_ret:
    19 00003987 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   221                              <1> dosCrit2Enter:
   222                              <1>     return
    18                              <2> %%_ret:
    19 00003988 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   223 00003989 B802800000          <1>     mov eax, 8002h
   224 0000398E CD4A                <1>     int 4ah
   225 00003990 58                  <1>     pop rax
   226                              <1>     return
    18                              <2> %%_ret:
    19 00003991 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   227                              <1> dosCrit2Exit:
   228                              <1>     return
    18                              <2> %%_ret:
    19 00003992 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   229 00003993 B802810000          <1>     mov eax, 8102h
   230 00003998 CD4A                <1>     int 4ah
   231 0000399A 58                  <1>     pop rax
   232                              <1>     return
    18                              <2> %%_ret:
    19 0000399B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> ;All good exits destroy AT LEAST ax 
   235                              <1> extGoodExit2:
   236                              <1> ;Good exit with an extended return code in eax
   237 0000399C E849FCFFFF          <1>     call getUserRegs
   238 000039A1 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   239 000039A3 EB08                <1>     jmp short extGoodExit.extGoodCommon
   240                              <1> extGoodExit:
   241                              <1> ;Good exit
   242                              <1> ;Return code in ax
   243 000039A5 E840FCFFFF          <1>     call getUserRegs
   244 000039AA 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   245                              <1> .extGoodCommon:
   246 000039AD 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   247 000039B1 F8                  <1>     clc
   248                              <1>     return
    18                              <2> %%_ret:
    19 000039B2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   249                              <1> extErrExit:
   250                              <1> ;The extended error exit from DOS
   251                              <1> ;Jumped to with AL=Extended error code
   252                              <1> ;Can be called too.
   253                              <1> ;Input: al = Extended error code
   254                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   255                              <1> ;   Returns with: eax = xLat Error
   256                              <1> ;                 rsi = callerFrame
   257 000039B3 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   258 000039B6 E813000000          <1>     call xLatError
   259 000039BB E891000000          <1>     call checkFail
   260 000039C0 E825FCFFFF          <1>     call getUserRegs
   261 000039C5 668906              <1>     mov word [rsi + callerFrame.rax], ax
   262 000039C8 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   263 000039CC F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   264                              <1>     return
    18                              <2> %%_ret:
    19 000039CD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   265                              <1> xLatError:
   266                              <1> ;Translates the error code given in ax and sets error code in the var
   267                              <1> ; Input: ax = Extended Error Code
   268                              <1> ; Output: ax = Potentially translated Error Code
   269                              <1> ;         [errorExCde] = Original Error Code
   270                              <1> ;Preserves all registers except ax
   271                              <1> ;AH is always returned as 0
   272 000039CE 53                  <1>     push rbx
   273 000039CF 51                  <1>     push rcx
   274 000039D0 56                  <1>     push rsi
   275 000039D1 668905(6DC30300)    <1>     mov word [errorExCde], ax
   276 000039D8 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   277 000039DA 488D35AFC6FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   278                              <1> .readEntry:
   279 000039E1 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   280 000039E3 3CFF                <1>     cmp al, -1
   281 000039E5 741F                <1>     je .skipXlat
   282 000039E7 3A05(96C30300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   283 000039ED 7408                <1>     je .found
   284                              <1>     ;Here, entry not found, goto next entry
   285 000039EF 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   286 000039F2 4801C6              <1>     add rsi, rax    ;Goto next entry
   287 000039F5 EBEA                <1>     jmp short .readEntry
   288                              <1> .found:
   289                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   290 000039F7 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   291                              <1> .mainSearch:
   292 000039FA AC                  <1>     lodsb   ;Get one byte into al
   293 000039FB 38C3                <1>     cmp bl, al  ;Check against the error code
   294 000039FD 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   295 000039FF FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   296 00003A01 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   297                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   298 00003A03 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   299                              <1> .skipXlat:
   300 00003A06 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   301 00003A08 5E                  <1>     pop rsi
   302 00003A09 59                  <1>     pop rcx
   303 00003A0A 5B                  <1>     pop rbx
   304                              <1>     return
    18                              <2> %%_ret:
    19 00003A0B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   305                              <1> setErrorVars:
   306                              <1> ;Looks up the error code in the variable and sets the other error vars
   307                              <1> ;Called with the lookup table in rsi
   308                              <1> ;All regs preserved
   309 00003A0C 50                  <1>     push rax
   310 00003A0D 53                  <1>     push rbx
   311 00003A0E 51                  <1>     push rcx
   312 00003A0F 56                  <1>     push rsi
   313 00003A10 0FB71D(6DC30300)    <1>     movzx ebx, word [errorExCde]
   314 00003A17 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   315                              <1> .readEntry:
   316 00003A1C AD                  <1>     lodsd   ;Read the dword table entry into eax
   317 00003A1D 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   318 00003A22 7428                <1>     je .exit    
   319 00003A24 38D8                <1>     cmp al, bl  ;Compare the error codes
   320 00003A26 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   321 00003A28 D3E8                <1>     shr eax, cl
   322 00003A2A 3CFF                <1>     cmp al, -1
   323 00003A2C 7406                <1>     je .skipClass
   324 00003A2E 8805(70C30300)      <1>     mov byte [errorClass], al
   325                              <1> .skipClass:
   326 00003A34 D3E8                <1>     shr eax, cl
   327 00003A36 3CFF                <1>     cmp al, -1
   328 00003A38 7406                <1>     je .skipAct
   329 00003A3A 8805(6FC30300)      <1>     mov byte [errorAction], al
   330                              <1> .skipAct:
   331 00003A40 D3E8                <1>     shr eax, cl
   332 00003A42 3CFF                <1>     cmp al, -1
   333 00003A44 7406                <1>     je .exit
   334 00003A46 8805(6CC30300)      <1>     mov byte [errorLocus], al
   335                              <1> .exit:
   336 00003A4C 5E                  <1>     pop rsi
   337 00003A4D 59                  <1>     pop rcx
   338 00003A4E 5B                  <1>     pop rbx
   339 00003A4F 58                  <1>     pop rax
   340                              <1>     return
    18                              <2> %%_ret:
    19 00003A50 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   341                              <1> checkFail:
   342                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   343                              <1> ; and swaps the var error code if so
   344 00003A51 803D(CBC30300)00    <1>     cmp byte [Int44Fail], 0
   345 00003A58 7509                <1>     jnz .skipFail
   346 00003A5A 66C705(6DC30300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   346 00003A62 00                  <1>
   347                              <1> .skipFail:
   348 00003A63 56                  <1>     push rsi
   349 00003A64 488D35C1C6FFFF      <1>     lea rsi, extErrTbl
   350 00003A6B E89CFFFFFF          <1>     call setErrorVars
   351 00003A70 5E                  <1>     pop rsi
   352                              <1>     return
    18                              <2> %%_ret:
    19 00003A71 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   353                              <1> ;========================================:
   354                              <1> ;      Reentrant Kernel Functions        :
   355                              <1> ;========================================:
   356                              <1> ctrlBreakCheck:    ;ah = 33h
   357 00003A72 84C0                <1>     test al, al
   358 00003A74 7508                <1>     jnz .cbcget  ;Get the state or other functions
   359 00003A76 8A15(94C30300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   360 00003A7C 48CF                <1>     iretq
   361                              <1> .cbcget:
   362 00003A7E 3C02                <1>     cmp al, 02h
   363 00003A80 771A                <1>     ja .cbcBad
   364 00003A82 740D                <1>     jz .cbcxchg ;Function 2
   365 00003A84 52                  <1>     push rdx
   366 00003A85 80E201              <1>     and dl, 1   ;Get only the bottom bit
   367 00003A88 8815(94C30300)      <1>     mov byte [breakFlag], dl    ;Set the state
   368 00003A8E 5A                  <1>     pop rdx
   369 00003A8F 48CF                <1>     iretq
   370                              <1> .cbcxchg:
   371 00003A91 80E201              <1>     and dl, 1
   372 00003A94 8615(94C30300)      <1>     xchg byte [breakFlag], dl
   373 00003A9A 48CF                <1>     iretq
   374                              <1> .cbcBad:
   375 00003A9C B0FF                <1>     mov al, -1
   376 00003A9E 48CF                <1>     iretq
   377                              <1> 
   378                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   379 00003AA0 48891D(81C30300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   380 00003AA7 48CF                <1>     iretq
   381                              <1> 
   382                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   383 00003AA9 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   384 00003AB0 48CF                <1>     iretq
   385                              <1> 
   386                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   387 00003AB2 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   388 00003AB9 48CF                <1>     iretq
   389                              <1> 
   390                              <1> setDriverLookahead:;ah = 64h, reserved
   391 00003ABB 48CF                <1>     iretq
   392                              <1> 
   393                              <1> ;========================================:
   394                              <1> ;            Kernel Functions            :
   395                              <1> ;========================================:
   396                              <1> diskReset:         ;ah = 0Dh
   397                              <1> ;Flush all dirty buffers to disk
   398 00003ABD E8B2FEFFFF          <1>     call dosCrit1Enter
   399 00003AC2 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   400                              <1> .drCheckBuffer:
   401 00003AC9 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   402 00003ACD 7407                <1>     jz .drGotoNextBuffer
   403                              <1> .drFlushBuffer:
   404 00003ACF E8A0CDFFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   405 00003AD4 720C                <1>     jc .drExit
   406                              <1> .drGotoNextBuffer:
   407 00003AD6 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   408 00003AD9 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   409 00003AE0 75E7                <1>     jne .drCheckBuffer
   410                              <1> .drExit:
   411 00003AE2 E897FEFFFF          <1>     call dosCrit1Exit
   412 00003AE7 B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   413 00003AEC CD4F                <1>     int 4fh
   414                              <1>     return
    18                              <2> %%_ret:
    19 00003AEE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   415                              <1> 
   416                              <1> selectDisk:        ;ah = 0Eh
   417                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   418 00003AEF 88D0                <1>     mov al, dl
   419 00003AF1 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   420 00003AF3 E816FBFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   421 00003AF8 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   422 00003AFA 8805(93C30300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   423                              <1> .skipSettingCurrent:
   424 00003B00 0FB605(70C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   425                              <1>     return
    18                              <2> %%_ret:
    19 00003B07 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   426                              <1> 
   427                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   428 00003B08 8A05(93C30300)      <1>     mov al, byte [currentDrv]
   429                              <1>     return
    18                              <2> %%_ret:
    19 00003B0E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   430                              <1> 
   431                              <1> FATinfoDefault:    ;ah = 1Bh
   432 00003B0F 30D2                <1>     xor dl, dl
   433                              <1> FATinfoDevice:     ;ah = 1Ch
   434                              <1> ;Input: dl = 1 based drive number
   435                              <1> ;Output:
   436                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   437                              <1> ;cx = bytes per sector
   438                              <1> ;edx = total number of clusters
   439                              <1> ;rbx = Ptr to media ID byte
   440 00003B11 84D2                <1>     test dl, dl
   441 00003B13 7508                <1>     jnz .fidSkipdefault
   442 00003B15 8A15(93C30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   443 00003B1B FEC2                <1>     inc dl
   444                              <1> .fidSkipdefault:
   445 00003B1D FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   446                              <1> ;Walk the dpb chain manually
   447 00003B1F 88D0                <1>     mov al, dl  ;Move drive number into al
   448 00003B21 E851FBFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   449 00003B26 7307                <1>     jnc .fidCDSFound
   450 00003B28 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   451 00003B2D EB2E                <1>     jmp short .error 
   452                              <1> .fidCDSFound:
   453 00003B2F E864FAFFFF          <1>     call getDiskData
   454 00003B34 7227                <1>     jc .error
   455                              <1> ;Now we have that:
   456                              <1> ;al = sectors per cluster
   457                              <1> ;ah = media ID byte
   458                              <1> ;ebx = total clusters
   459                              <1> ;cx = bytes per sector
   460                              <1> ;edx = number of available clusters
   461 00003B36 E8AFFAFFFF          <1>     call getUserRegs
   462 00003B3B 8825(E2C60300)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   463 00003B41 30E4                <1>     xor ah, ah
   464 00003B43 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   465 00003B46 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   466 00003B4A 488D1D(E2C60300)    <1>     lea rbx, mediaByte
   467 00003B51 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   468 00003B55 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   469                              <1> .badExit:
   470 00003B59 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   471                              <1>     return
    18                              <2> %%_ret:
    19 00003B5C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   472                              <1> .error:
   473 00003B5D E851FEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   474 00003B62 66B8FFFF            <1>     mov ax, -1
   475 00003B66 EBF1                <1>     jmp short .badExit
   476                              <1> 
   477                              <1> setIntVector:      ;ah = 25h
   478                              <1> ;Called with:
   479                              <1> ;   rdx = Pointer to interrupt handler
   480                              <1> ;   al = Interrupt number
   481 00003B68 50                  <1>     push rax    ;Preserve all registers in call
   482 00003B69 51                  <1>     push rcx
   483 00003B6A 52                  <1>     push rdx
   484 00003B6B 56                  <1>     push rsi
   485 00003B6C 55                  <1>     push rbp
   486 00003B6D 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   487 00003B6F 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   488                              <1> ;First call to get default BIOS segement selector and attribute word
   489 00003B75 88C3                <1>     mov bl, al  ;Set interrupt number 
   490 00003B77 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   491 00003B7C CD35                <1>     int 35h
   492 00003B7E E867FAFFFF          <1>     call getUserRegs
   493 00003B83 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   494 00003B87 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   495 00003B89 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   496                              <1> ;dx preserves the attribute word
   497 00003B8B B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   498 00003B90 CD35                <1>     int 35h
   499 00003B92 5D                  <1>     pop rbp
   500 00003B93 5E                  <1>     pop rsi
   501 00003B94 5A                  <1>     pop rdx
   502 00003B95 59                  <1>     pop rcx
   503 00003B96 58                  <1>     pop rax
   504                              <1>     return
    18                              <2> %%_ret:
    19 00003B97 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   505                              <1> 
   506                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   507 00003B98 8805(32C30300)      <1>     mov byte [verifyFlag], al
   508 00003B9E 8025(32C30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   509                              <1>     return
    18                              <2> %%_ret:
    19 00003BA5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   510                              <1> getDOSversion:     ;ah = 30h
   511 00003BA6 E83FFAFFFF          <1>     call getUserRegs
   512 00003BAB 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   513 00003BAD 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   514 00003BB0 668B0549C4FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   515 00003BB7 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   516                              <1>     return
    18                              <2> %%_ret:
    19 00003BBA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   517                              <1> 
   518                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   519                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   520 00003BBB 30D2                <1>     xor dl, dl
   521                              <1> getDeviceDPBptr:   ;ah = 32h
   522                              <1> ;On entry: dl = Drive number
   523                              <1> ;On exit: rbx = DPB pointer
   524 00003BBD 84D2                <1>     test dl, dl
   525 00003BBF 7508                <1>     jnz .gddpskipdefault
   526 00003BC1 8A15(93C30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   527 00003BC7 FEC2                <1>     inc dl
   528                              <1> .gddpskipdefault:
   529                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   530 00003BC9 FECA                <1>     dec dl
   531 00003BCB 88D0                <1>     mov al, dl
   532 00003BCD E8A5FAFFFF          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   533 00003BD2 722C                <1>     jc .bad
   534 00003BD4 488B3D(69C60300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   535 00003BDB 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   536 00003BE1 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   537                              <1>     ;Here ONLY if accessing critical Disk data structures
   538 00003BE3 E88CFDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   539 00003BE8 E871F7FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   540 00003BED E88CFDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   541 00003BF2 720C                <1>     jc .bad
   542 00003BF4 E8F1F9FFFF          <1>     call getUserRegs
   543 00003BF9 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   544 00003BFD 30C0                <1>     xor al, al
   545                              <1>     return
    18                              <2> %%_ret:
    19 00003BFF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   546                              <1> .bad:
   547 00003C00 B0FF                <1>     mov al, -1
   548                              <1>     return
    18                              <2> %%_ret:
    19 00003C02 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   549                              <1> 
   550                              <1> getInDOSflagPtr:   ;ah = 34h
   551 00003C03 488D15(6AC30300)    <1>     lea rdx, inDOS
   552 00003C0A E8DBF9FFFF          <1>     call getUserRegs
   553 00003C0F 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   554                              <1>     return
    18                              <2> %%_ret:
    19 00003C13 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   555                              <1> 
   556                              <1> getIntVector:      ;ah = 35h
   557                              <1> ;Called with:
   558                              <1> ;   al = Interrupt Number
   559                              <1> ;Returns:
   560                              <1> ;   rbx = Pointer to interrupt handler
   561 00003C14 E8C3F9FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   562 00003C19 E8CCF9FFFF          <1>     call getUserRegs
   563 00003C1E 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   564 00003C22 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   565                              <1>     return
    18                              <2> %%_ret:
    19 00003C24 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   566                              <1> 
   567                              <1> getDiskFreeSpace:  ;ah = 36h
   568                              <1> ;Input: Drive number in dl (0 = Current)
   569                              <1> ;Output:    ax = sectors per cluster
   570                              <1> ;           ebx = number of free clusters
   571                              <1> ;           cx = bytes per sector
   572                              <1> ;           edx = total clusters on drive
   573 00003C25 84D2                <1>     test dl, dl
   574 00003C27 7508                <1>     jnz .gdfsSkipdefault
   575 00003C29 8A15(93C30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   576 00003C2F FEC2                <1>     inc dl
   577                              <1> .gdfsSkipdefault:
   578 00003C31 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   579 00003C33 88D0                <1>     mov al, dl
   580 00003C35 E83DFAFFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   581 00003C3A 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   582                              <1> ;Else, we at an error.
   583                              <1> ;Simply return with CY set and error code in al with extended error info
   584 00003C3C B80F000000          <1>     mov eax, errBadDrv
   585 00003C41 E86DFDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   586                              <1>     ;extErrExit sets rsi to caller regs
   587 00003C46 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   588                              <1>     return
    18                              <2> %%_ret:
    19 00003C4B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   589                              <1> .gdfsCDSFound:
   590 00003C4C E847F9FFFF          <1>     call getDiskData
   591 00003C51 7219                <1>     jc .error
   592                              <1> ;Now we have that:
   593                              <1> ;al = sectors per cluster
   594                              <1> ;ah = media ID byte
   595                              <1> ;ebx = total clusters
   596                              <1> ;cx = bytes per sector
   597                              <1> ;edx = number of available clusters
   598 00003C53 E892F9FFFF          <1>     call getUserRegs
   599 00003C58 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   600 00003C5A 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   601 00003C5D 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   602 00003C61 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   603 00003C64 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   604                              <1> .badExit:
   605 00003C68 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   606                              <1>     return
    18                              <2> %%_ret:
    19 00003C6B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   607                              <1> .error:
   608 00003C6C E842FDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   609 00003C71 66B8FFFF            <1>     mov ax, -1
   610 00003C75 EBF1                <1>     jmp short .badExit
   611                              <1> 
   612                              <1> 
   613                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   614 00003C77 31C0                <1>     xor eax, eax
   615 00003C79 668705(91C30300)    <1>     xchg ax, word [errorLevel]
   616 00003C80 E920FDFFFF          <1>     jmp extGoodExit
   617                              <1> 
   618                              <1> getSysVarsPtr:     ;ah = 52h
   619 00003C85 488D15(33C00300)    <1>     lea rdx, sysVarsPtr
   620 00003C8C E859F9FFFF          <1>     call getUserRegs
   621 00003C91 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   622                              <1>     return
    18                              <2> %%_ret:
    19 00003C95 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   623                              <1> 
   624                              <1> 
   625                              <1> ;AH = 53h - CREATE DPB
   626                              <1> createDPB:         ;generates a DPB from a given BPB
   627                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   628                              <1> ;This is done so that the other fields of the DPB can be recycled
   629                              <1> ;Input: rsi = ptr to the BPB
   630                              <1> ;       rbp = ptr to the DPB
   631                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   632                              <1> ;bMediaDescriptor
   633 00003C96 8A4615              <1>     mov al, byte [rsi + bpb.media]
   634 00003C99 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   635                              <1> ;dFirstFreeCluster
   636 00003C9C C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   637                              <1> ;dNumberOfFreeClusters
   638 00003CA3 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   639                              <1> ;wBytesPerSector
   640 00003CAA 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   641 00003CAE 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   642                              <1> ;bMaxSectorInCluster
   643 00003CB2 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   644 00003CB5 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   645 00003CB7 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   646                              <1> ;bSectorsPerClusterShift
   647 00003CBA FEC0                <1>     inc al
   648 00003CBC 30C9                <1>     xor cl, cl
   649                              <1> .cd2:
   650 00003CBE D0E8                <1>     shr al, 1
   651 00003CC0 7404                <1>     jz .cd3
   652 00003CC2 FEC1                <1>     inc cl
   653 00003CC4 EBF8                <1>     jmp short .cd2
   654                              <1> .cd3:
   655 00003CC6 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   656                              <1> ;wFAToffset, number of reserved sectors in partition
   657 00003CC9 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   658 00003CCD 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   659                              <1> ;bNumberOfFATs
   660 00003CD1 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   661 00003CD4 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   662                              <1> ;wNumberRootDirEntries
   663                              <1> ;Gets the number of 32 byte entries in the root directory
   664                              <1> ;Only valid for FAT 12/16
   665 00003CD7 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   666 00003CDB 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   667                              <1> ;dFATlength, get the FAT length
   668 00003CDF 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   669 00003CE3 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   670 00003CE6 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   671 00003CE8 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   672 00003CEB 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   673                              <1> ;Complex cases below...
   674                              <1> ;dClusterHeapOffset, start sector of the data area
   675 00003CEE 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   676 00003CF2 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   677 00003CF5 85C0                <1>     test eax, eax
   678 00003CF7 0F44C3              <1>     cmovz eax, ebx
   679                              <1> ;eax = FATsz
   680 00003CFA 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   681 00003CFE 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   682 00003D01 85DB                <1>     test ebx, ebx
   683 00003D03 0F44D9              <1>     cmovz ebx, ecx 
   684                              <1> ;ebx = TotSec
   685 00003D06 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   686 00003D09 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   687                              <1> .cd4:
   688 00003D0B 01C2                <1>     add edx, eax
   689 00003D0D FEC9                <1>     dec cl
   690 00003D0F 75FA                <1>     jnz .cd4
   691 00003D11 89D0                <1>     mov eax, edx    ;Store product in eax
   692 00003D13 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   693 00003D17 01D0                <1>     add eax, edx
   694                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   695 00003D19 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   696 00003D1D C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   697 00003D20 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   698 00003D24 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   699 00003D25 89D0                <1>     mov eax, edx
   700 00003D27 31D2                <1>     xor edx, edx
   701 00003D29 F7F1                <1>     div ecx
   702 00003D2B 89C2                <1>     mov edx, eax
   703 00003D2D 58                  <1>     pop rax
   704 00003D2E 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   705                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   706                              <1>     ;aka eax = Start sector of the data area in volume
   707 00003D30 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   708                              <1> ;dClusterCount
   709 00003D33 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   710 00003D35 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   711 00003D37 31D2                <1>     xor edx, edx
   712 00003D39 BB01000000          <1>     mov ebx, 1
   713 00003D3E 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   714 00003D41 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   715 00003D43 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   716 00003D45 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   717 00003D47 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   718                              <1> ;dFirstUnitOfRootDir
   719 00003D4A 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   720 00003D4F 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   721 00003D52 770F                <1>     ja .cd5
   722                              <1>     ;Else, we need to find the first sector of the root directory
   723                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   724 00003D54 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   725 00003D58 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   726                              <1> .cd51:
   727 00003D5C 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   728 00003D5F FFC9                <1>     dec ecx
   729 00003D61 75F9                <1>     jnz .cd51
   730                              <1> .cd5:
   731 00003D63 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   732                              <1> ;Exit epilogue
   733 00003D66 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   734 00003D6D 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   735                              <1>     %if DEBUG && DPBINFO
   736                              <1>     ;Print DPB 
   737                              <1>     debugEnterM
   738                              <1>     push rbp
   739                              <1>     lea rbp, .l0000
   740                              <1>     call debPrintNullString
   741                              <1>     pop rbp
   742                              <1>     call debDPBBPBptr
   743                              <1>     call debMakeDebuggerRespond
   744                              <1>     jmp short .l0001
   745                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   746                              <1> .l0001:
   747                              <1>     debugExitM
   748                              <1>     %endif
   749                              <1>     return
    18                              <2> %%_ret:
    19 00003D6F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   750                              <1> 
   751                              <1> getVerifySetting:  ;ah = 54h
   752 00003D70 8A05(32C30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   753                              <1>     return
    18                              <2> %%_ret:
    19 00003D76 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   754                              <1> 
   755                              <1> getExtendedError:  ;ah = 59h
   756 00003D77 E86EF8FFFF          <1>     call getUserRegs
   757 00003D7C 668B05(6DC30300)    <1>     mov ax, word [errorExCde]
   758 00003D83 8A2D(6CC30300)      <1>     mov ch, byte [errorLocus]
   759 00003D89 8A3D(70C30300)      <1>     mov bh, byte [errorClass]
   760 00003D8F 8A1D(6FC30300)      <1>     mov bl, byte [errorAction]
   761 00003D95 668906              <1>     mov word [rsi + callerFrame.rax], ax
   762 00003D98 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   763 00003D9C 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   764                              <1>     return
    18                              <2> %%_ret:
    19 00003D9F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   765                              <1> dosServer:  ;ah = 5Dh
   766                              <1> netServices:   ;ah = 5Eh, do nothing
   767                              <1> netRedir:;ah = 5Fh, do nothing
   768                              <1>     return
    18                              <2> %%_ret:
    19 00003DA0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   769                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   770                              <1> noOp:
   771                              <1>     return
    18                              <2> %%_ret:
    19 00003DA1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    37                                  %include "./Source/Kernel/multiplx.asm"
    38                              <1> ;Default multiplexer. Current only installed function is ah=12h
    39                              <1> 
    40                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    41 00003DA2 80FC12              <1>     cmp ah, 12h
    42 00003DA5 751C                <1>     jne .exit       ;Exit if not for us
    43 00003DA7 3C01                <1>     cmp al, mDispTblL / 2
    44 00003DA9 7318                <1>     jae .exit   ;If above or equal, exit
    45 00003DAB 53                  <1>     push rbx
    46 00003DAC 51                  <1>     push rcx
    47 00003DAD 31C9                <1>     xor ecx, ecx
    48 00003DAF 488D1DEEC5FFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    49 00003DB6 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    50 00003DB8 D1E1                <1>     shl ecx, 1   ;multiply by 2
    51 00003DBA 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    52 00003DBD FFD3                <1>     call rbx
    53 00003DBF 59                  <1>     pop rcx
    54 00003DC0 5B                  <1>     pop rbx
    55 00003DC1 48CF                <1>     iretq
    56                              <1> .exit:
    57 00003DC3 804C241001          <1>     or byte [rsp + 8h*2], 1
    58 00003DC8 48CF                <1>     iretq
    59                              <1> multiplexTest:
    60 00003DCA B0FF                <1>     mov al, -1
    61 00003DCC C3                  <1>     ret
    38                                  %include "./Source/Misc/int44h.asm"
    39                              <1> critErrorHandler:   ;Int 44h
    40                              <1> ;User Stack in usage here, must be swapped to before this is called
    41                              <1> ;Entered with:  
    42                              <1> ;               AH = Critical Error Bitfield
    43                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    44                              <1> ;               Bit 6 - Reserved
    45                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    46                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    47                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    48                              <1> ;               Bits [2-1] = Affected Disk Error
    49                              <1> ;                     0 0   DOS area
    50                              <1> ;                     0 1   FAT area
    51                              <1> ;                     1 0   Directory area
    52                              <1> ;                     1 1   Data area
    53                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    54                              <1> ;               AL  = Failing drive number if AH[7] = 0
    55                              <1> ;               DIL = Error code for errorMsg
    56                              <1> ;               RSI = EA of Device Header for which device the error occured
    57                              <1> ;Return:
    58                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    59                              <1> ;                  = 1 - Retry the Operation    (Retry)
    60                              <1> ;                  = 2 - Terminate the Program  (Abort)
    61                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    62 00003DCD 53                  <1>     push rbx
    63 00003DCE 51                  <1>     push rcx
    64 00003DCF 52                  <1>     push rdx
    65 00003DD0 57                  <1>     push rdi
    66 00003DD1 56                  <1>     push rsi
    67 00003DD2 FC                  <1>     cld         ;Make String ops go forward
    68                              <1> 
    69 00003DD3 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    70 00003DD6 488D155E020000      <1>     lea rdx, qword [.crlf]
    71 00003DDD B409                <1>     mov ah, 09h ;Print String
    72 00003DDF CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    73                              <1> 
    74 00003DE1 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    75 00003DE7 B90C000000          <1>     mov ecx, 0Ch
    76 00003DEC 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    77 00003DEE 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    78 00003DF1 480FB7FF            <1>     movzx rdi, di
    79 00003DF5 4889FA              <1>     mov rdx, rdi    ;Copy error code
    80 00003DF8 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    81 00003DFC 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    82 00003DFF 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    83 00003E02 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    84 00003E09 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    85 00003E0D B409                <1>     mov ah, 09h ;Print String
    86 00003E0F CD41                <1>     int 41h     ;Call DOS to print first part of message
    87                              <1> 
    88 00003E11 488D1505020000      <1>     lea rdx, qword [.readmsg]
    89 00003E18 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    90 00003E1F F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    91 00003E22 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    92 00003E26 B409                <1>     mov ah, 09h ;Print String
    93 00003E28 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    94                              <1> 
    95 00003E2A F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    96 00003E2D 0F85DF000000        <1>     jnz .charError
    97                              <1> ;Disk error continues here
    98 00003E33 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    99 00003E3A B409                <1>     mov ah, 09h
   100 00003E3C CD41                <1>     int 41h
   101 00003E3E 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   102 00003E40 80C241              <1>     add dl, "A" ;Add ASCII code
   103 00003E43 B402                <1>     mov ah, 02h ;Print char in dl
   104 00003E45 CD41                <1>     int 41h
   105                              <1> .userInput:
   106 00003E47 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   107 00003E4E B409                <1>     mov ah, 09h
   108 00003E50 CD41                <1>     int 41h
   109                              <1> ;Abort, Retry, Ignore, Fail is word order
   110                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   111                              <1> .userAbort:
   112                              <1> ;Abort is always an option
   113 00003E52 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   114 00003E59 B409                <1>     mov ah, 09h
   115 00003E5B CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   116                              <1> .userRetry:
   117 00003E5D F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   118 00003E60 7416                <1>     jz .userIgnore    ;If clear, dont print message
   119 00003E62 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   120 00003E69 B409                <1>     mov ah, 09h
   121 00003E6B CD41                <1>     int 41h
   122 00003E6D 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   123 00003E74 B409                <1>     mov ah, 09h
   124 00003E76 CD41                <1>     int 41h
   125                              <1> .userIgnore:
   126 00003E78 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   127 00003E7B 7416                <1>     jz .userFail
   128 00003E7D 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   129 00003E84 B409                <1>     mov ah, 09h
   130 00003E86 CD41                <1>     int 41h
   131 00003E88 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   132 00003E8F B409                <1>     mov ah, 09h
   133 00003E91 CD41                <1>     int 41h
   134                              <1> .userFail:
   135 00003E93 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   136 00003E96 7416                <1>     jz .userMsgEnd
   137 00003E98 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   138 00003E9F B409                <1>     mov ah, 09h
   139 00003EA1 CD41                <1>     int 41h
   140 00003EA3 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   141 00003EAA B409                <1>     mov ah, 09h
   142 00003EAC CD41                <1>     int 41h
   143                              <1> .userMsgEnd:
   144 00003EAE 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   145 00003EB5 B409                <1>     mov ah, 09h
   146 00003EB7 CD41                <1>     int 41h
   147                              <1> ;Get user input now 
   148 00003EB9 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   149 00003EBB 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   150 00003EC2 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   151 00003EC4 CD41                <1>     int 41h ;Get char in al
   152 00003EC6 3C61                <1>     cmp al, "a" ;Chack if lowercase
   153 00003EC8 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   154 00003ECA 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   155                              <1> .uip1:
   156 00003ECC AE                  <1>     scasb   ;Compare char to list, offset gives return code
   157 00003ECD 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   158 00003ECF FFC1                <1>     inc ecx
   159 00003ED1 81F904000000        <1>     cmp ecx, 4
   160 00003ED7 75F3                <1>     jne .uip1
   161 00003ED9 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   162                              <1> .validInput:
   163 00003EDE 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   164                              <1> ;Now check if the input is permitted
   165 00003EE0 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   166 00003EE2 7427                <1>     je .cehExit
   167 00003EE4 84C0                <1>     test al, al ;Check if 0 => Ignore
   168 00003EE6 740F                <1>     je .viIgnore
   169 00003EE8 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   170 00003EEA 7416                <1>     je .viRetry
   171                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   172 00003EEC F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   173 00003EEF 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   174 00003EF5 EB14                <1>     jmp short .cehExit
   175                              <1> .viIgnore:
   176 00003EF7 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   177 00003EFA 0F8447FFFFFF        <1>     jz .userInput
   178 00003F00 EB09                <1>     jmp short .cehExit
   179                              <1> .viRetry:
   180 00003F02 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   181 00003F05 0F843CFFFFFF        <1>     jz .userInput
   182                              <1> .cehExit:
   183 00003F0B 5E                  <1>     pop rsi
   184 00003F0C 5F                  <1>     pop rdi
   185 00003F0D 5A                  <1>     pop rdx
   186 00003F0E 59                  <1>     pop rcx
   187 00003F0F 5B                  <1>     pop rbx
   188 00003F10 48CF                <1>     iretq
   189                              <1> .charError:
   190 00003F12 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   191 00003F17 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   192                              <1> .ce1:
   193 00003F1E AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   194 00003F1F 88C2                <1>     mov dl, al  ;Move char into dl
   195 00003F21 B402                <1>     mov ah, 02h
   196 00003F23 CD41                <1>     int 41h ;Print char
   197 00003F25 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   198 00003F27 E91BFFFFFF          <1>     jmp .userInput
   199                              <1> 
   200                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   201 00003F2C 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   201 00003F35 746563742024202020  <1>
   202 00003F3E 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   202 00003F47 6E6974202420202020  <1>
   203 00003F50 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   203 00003F59 202420202020202020  <1>
   204 00003F62 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   204 00003F6B 6F6D6D616E64202420  <1>
   205 00003F74 446174612024202020- <1>             db "Data $            "       ;Error 4
   205 00003F7D 202020202020202020  <1>
   206 00003F86 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   206 00003F8F 737420242020202020  <1>
   207 00003F98 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   207 00003FA1 202020202020202020  <1>
   208 00003FAA 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   208 00003FB3 656469612024202020  <1>
   209 00003FBC 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   209 00003FC5 7420466F756E642024  <1>
   210 00003FCE 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   210 00003FD7 706572202420202020  <1>
   211 00003FE0 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   211 00003FE9 6C7420242020202020  <1>
   212 00003FF2 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   212 00003FFB 742024202020202020  <1>
   213 00004004 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   213 0000400D 61696C757265202420  <1>
   214                              <1> 
   215 00004016 64726976652024      <1> .drive      db "drive $"
   216 0000401D 6572726F7220726561- <1> .readmsg    db "error reading $"
   216 00004026 64696E672024        <1>
   217 0000402C 6572726F7220777269- <1> .writemsg   db "error writing $"
   217 00004035 74696E672024        <1>
   218 0000403B 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   219 0000403E 41626F727424        <1> .abortmsg   db "Abort$" 
   220 00004044 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   221 0000404B 526574727924        <1> .retrymsg   db "Retry$"
   222 00004051 4661696C24          <1> .failmsg    db "Fail$"
   223 00004056 2C2024              <1> .betweenMsg db ", $"
   224 00004059 3F2024              <1> .endMsg     db "? $"
   225 0000405C 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    39                                  %include "./Source/Drivers/drvData.asm"
    40                              <1> ;-----------------------------------:
    41                              <1> ;          Driver routines          :
    42                              <1> ;-----------------------------------:
    43                              <1> drivers:
    44                              <1> conHdr:
    45 00004060 [8240000000000000]  <1>     dq auxHdr
    46 00004068 1380                <1>     dw 08013h
    47 0000406A [0042000000000000]  <1>     dq commonStrat
    48 00004072 [0F42000000000000]  <1>     dq conDriver
    49 0000407A 434F4E2020202020    <1>     db "CON     "
    50                              <1> auxHdr:
    51 00004082 [A440000000000000]  <1>     dq prnHdr
    52 0000408A 0080                <1>     dw 08000h
    53 0000408C [0042000000000000]  <1>     dq commonStrat
    54 00004094 [C444000000000000]  <1>     dq com1Intr
    55 0000409C 4155582020202020    <1>     db "AUX     "
    56                              <1> prnHdr:
    57 000040A4 [C640000000000000]  <1>     dq clkHdr
    58 000040AC 40A0                <1>     dw 0A040h
    59 000040AE [0842000000000000]  <1>     dq nulStrat
    60 000040B6 [0E42000000000000]  <1>     dq nulIntr
    61 000040BE 50524E2020202020    <1>     db "PRN     "
    62                              <1> clkHdr:
    63 000040C6 [E840000000000000]  <1>     dq msdHdr
    64 000040CE 0880                <1>     dw 08008h
    65 000040D0 [0042000000000000]  <1>     dq commonStrat
    66 000040D8 [5C43000000000000]  <1>     dq clkDriver
    67 000040E0 434C4F434B242020    <1>     db "CLOCK$  "
    68                              <1> msdHdr:
    69 000040E8 [0A41000000000000]  <1>     dq com1Hdr
    70 000040F0 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    71 000040F2 [0042000000000000]  <1>     dq commonStrat
    72 000040FA [6946000000000000]  <1>     dq msdDriver
    73 00004102 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    74                              <1> com1Hdr:
    75 0000410A [2C41000000000000]  <1>     dq com2Hdr
    76 00004112 0080                <1>     dw 08000h
    77 00004114 [0042000000000000]  <1>     dq commonStrat
    78 0000411C [C444000000000000]  <1>     dq com1Intr
    79 00004124 434F4D3120202020    <1>     db "COM1    "
    80                              <1> com2Hdr:
    81 0000412C [4E41000000000000]  <1>     dq com3Hdr
    82 00004134 0080                <1>     dw 08000h
    83 00004136 [0042000000000000]  <1>     dq commonStrat
    84 0000413E [CD44000000000000]  <1>     dq com2Intr
    85 00004146 434F4D3220202020    <1>     db "COM2    "
    86                              <1> com3Hdr:
    87 0000414E [7041000000000000]  <1>     dq com4Hdr
    88 00004156 0080                <1>     dw 08000h
    89 00004158 [0042000000000000]  <1>     dq commonStrat
    90 00004160 [D644000000000000]  <1>     dq com3Intr
    91 00004168 434F4D3320202020    <1>     db "COM3    "
    92                              <1> com4Hdr:
    93 00004170 [9241000000000000]  <1>     dq lpt1Hdr
    94 00004178 0080                <1>     dw 08000h
    95 0000417A [0042000000000000]  <1>     dq commonStrat
    96 00004182 [DF44000000000000]  <1>     dq com4Intr
    97 0000418A 434F4D3420202020    <1>     db "COM4    "
    98                              <1> lpt1Hdr:
    99 00004192 [B441000000000000]  <1>     dq lpt2Hdr
   100 0000419A 40A0                <1>     dw 0A040h
   101 0000419C [0842000000000000]  <1>     dq nulStrat
   102 000041A4 [0E42000000000000]  <1>     dq nulIntr
   103 000041AC 4C50543120202020    <1>     db "LPT1    "
   104                              <1> lpt2Hdr:
   105 000041B4 [D641000000000000]  <1>     dq lpt3Hdr
   106 000041BC 40A0                <1>     dw 0A040h
   107 000041BE [0842000000000000]  <1>     dq nulStrat
   108 000041C6 [0E42000000000000]  <1>     dq nulIntr
   109 000041CE 4C50543220202020    <1>     db "LPT2    "
   110                              <1> lpt3Hdr:
   111 000041D6 FFFFFFFFFFFFFFFF    <1>     dq -1
   112 000041DE 40A0                <1>     dw 0A040h
   113 000041E0 [0842000000000000]  <1>     dq nulStrat
   114 000041E8 [0E42000000000000]  <1>     dq nulIntr
   115 000041F0 4C50543320202020    <1>     dq "LPT3    "
   116 000041F8 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    40                                  %include "./Source/Drivers/charDrv.asm"
    41                              <1> commonStrat:
    42                              <1> ;DOS calls this function with rbx=Ptr to request header
    43 00004200 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    44 00004207 C3                  <1>     ret
    45                              <1> nulStrat:
    46 00004208 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    47                              <1> nulIntr:
    48 0000420E C3                  <1>     ret
    49                              <1> conDriver:
    50 0000420F 50                  <1>     push rax
    51 00004210 53                  <1>     push rbx
    52 00004211 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    53 00004218 B003                <1>     mov al, 03h ;Unknown Command
    54 0000421A 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    55 0000421E 7739                <1>     ja .conWriteErrorCode ;If yes, error!
    56                              <1> 
    57 00004220 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    58 00004223 3C04                <1>     cmp al, 4
    59 00004225 7441                <1>     jz .conRead
    60 00004227 3C05                <1>     cmp al, 5
    61 00004229 0F847F000000        <1>     jz .conNondestructiveRead
    62 0000422F 3C06                <1>     cmp al, 6
    63 00004231 0F84A8000000        <1>     jz .conInputStatus
    64 00004237 3C07                <1>     cmp al, 7
    65 00004239 0F84B0000000        <1>     jz .conFlushInputBuffers
    66 0000423F 3C08                <1>     cmp al, 8
    67 00004241 0F84CA000000        <1>     jz .conWrite
    68 00004247 3C09                <1>     cmp al, 9
    69 00004249 0F84C2000000        <1>     jz .conWrite
    70 0000424F 3C0A                <1>     cmp al, 0Ah
    71 00004251 0F84E3000000        <1>     jz .conOutputStatus
    72 00004257 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    73                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    74 00004259 B480                <1>     mov ah, 80h ;Set error bit
    75 0000425B 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    76                              <1> .conExit:
    77 0000425F 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    78 00004265 5B                  <1>     pop rbx
    79 00004266 58                  <1>     pop rax
    80 00004267 C3                  <1>     ret
    81                              <1> .conRead:    ;Function 4
    82 00004268 B005                <1>     mov al, 05h ;Bad request structure length?
    83 0000426A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    84 0000426D 75EA                <1>     jne .conWriteErrorCode
    85                              <1> 
    86 0000426F 57                  <1>     push rdi
    87 00004270 51                  <1>     push rcx
    88 00004271 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    89 00004275 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    90                              <1> .cre1:
    91 00004277 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    92 0000427A 741C                <1>     je .cre2
    93 0000427C 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    94 00004283 751A                <1>     jnz .cre3   ;No, get the buffer value
    95 00004285 31C0                <1>     xor eax, eax
    96 00004287 CD36                <1>     int 36h
    97                              <1> .cre11:
    98 00004289 AA                  <1>     stosb
    99 0000428A 84C0                <1>     test al, al ;Was the ascii code stored 0?
   100 0000428C 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   101 0000428E 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   102                              <1> .cre12:
   103 00004294 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   104 00004296 EBDF                <1>     jmp short .cre1
   105                              <1> .cre2:
   106 00004298 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   107 0000429B 59                  <1>     pop rcx
   108 0000429C 5F                  <1>     pop rdi
   109 0000429D EBC0                <1>     jmp short .conExit
   110                              <1> .cre3:
   111 0000429F 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   112 000042A5 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   113 000042AC EBDB                <1>     jmp short .cre11
   114                              <1> 
   115                              <1> .conNondestructiveRead:  ;Function 5
   116 000042AE B005                <1>     mov al, 05h ;Bad request structure length?
   117 000042B0 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   118 000042B3 75A4                <1>     jne .conWriteErrorCode
   119 000042B5 803D8E00000000      <1>     cmp byte [.conBuf], 0
   120 000042BC 7519                <1>     jnz .cnr2
   121 000042BE B401                <1>     mov ah, 01h     ;Get key if exists
   122 000042C0 CD36                <1>     int 36h
   123 000042C2 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   124                              <1>     ;Keystroke available
   125                              <1> .cnr0:
   126 000042C4 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   127 000042C7 E993FFFFFF          <1>     jmp .conExit
   128                              <1> .cnr1: ;No keystroke available
   129 000042CC 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   130 000042D2 E988FFFFFF          <1>     jmp .conExit
   131                              <1> .cnr2:
   132 000042D7 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   133 000042DD EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   134                              <1> 
   135                              <1> .conInputStatus:         ;Function 6
   136 000042DF B005                <1>     mov al, 05h ;Bad request structure length?
   137 000042E1 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   138 000042E4 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   139 000042EA E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   140                              <1> 
   141                              <1> .conFlushInputBuffers:   ;Function 7
   142 000042EF B005                <1>     mov al, 05h ;Bad request structure length?
   143 000042F1 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   144 000042F4 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   145 000042FA C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   146                              <1> .cfib0:
   147 00004301 B401                <1>     mov ah, 01      ;Get buffer status
   148 00004303 CD36                <1>     int 36h
   149 00004305 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   150 0000430B 30E4                <1>     xor ah, ah
   151 0000430D CD36                <1>     int 36h ;Read key to flush from buffer
   152 0000430F EBF0                <1>     jmp short .cfib0
   153                              <1> 
   154                              <1> .conWrite:   ;Function 8 and 9
   155 00004311 B005                <1>     mov al, 05h ;Bad request structure length?
   156 00004313 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   157 00004316 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   158                              <1> 
   159 0000431C 56                  <1>     push rsi
   160 0000431D 51                  <1>     push rcx
   161 0000431E 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   162 00004322 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   163                              <1> .cw1: 
   164 00004324 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   165 00004327 7407                <1>     je .cw2
   166 00004329 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   167 0000432A CD49                <1>     int 49h ;Fast print char
   168 0000432C FFC1                <1>     inc ecx
   169 0000432E EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   170                              <1> .cw2:
   171 00004330 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   172 00004333 59                  <1>     pop rcx
   173 00004334 5E                  <1>     pop rsi
   174 00004335 E925FFFFFF          <1>     jmp .conExit
   175                              <1> .conOutputStatus:   ;Function 0Ah
   176 0000433A B005                <1>     mov al, 05h ;Bad request structure length?
   177 0000433C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   178 0000433F 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   179 00004345 E915FFFFFF          <1>     jmp .conExit
   180                              <1> 
   181 0000434A 00                  <1> .conBuf db 0    ;Single byte buffer
   182                              <1> fastOutput:         ;This CON driver supports Int 49h
   183                              <1> ;Called with char to transfer in al
   184 0000434B 50                  <1>     push rax
   185 0000434C B40E                <1>     mov ah, 0Eh
   186 0000434E CD30                <1>     int 30h
   187 00004350 58                  <1>     pop rax
   188 00004351 48CF                <1>     iretq
   189                              <1> ctrlBreak:
   190                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   191 00004353 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   192 0000435A 48CF                <1>     iretq
   193                              <1> 
   194                              <1> clkDriver:
   195 0000435C 50                  <1>     push rax
   196 0000435D 53                  <1>     push rbx
   197 0000435E 51                  <1>     push rcx
   198 0000435F 52                  <1>     push rdx
   199 00004360 56                  <1>     push rsi
   200 00004361 55                  <1>     push rbp
   201 00004362 488B1D8FFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   202 00004369 B003                <1>     mov al, 03h ;Unknown Command
   203 0000436B 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   204 0000436F 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   205                              <1> 
   206 00004371 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   207 00004374 3C04                <1>     cmp al, 04h
   208 00004376 7437                <1>     jz .clkRead
   209 00004378 3C06                <1>     cmp al, 06h
   210 0000437A 0F8494000000        <1>     jz .clkInputStatus
   211 00004380 3C07                <1>     cmp al, 07h
   212 00004382 0F8498000000        <1>     jz .clkFlushInputBuffers
   213 00004388 3C08                <1>     cmp al, 08h
   214 0000438A 0F84A0000000        <1>     jz .clkWrite
   215 00004390 3C09                <1>     cmp al, 09h
   216 00004392 0F8498000000        <1>     jz .clkWrite
   217 00004398 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   218                              <1> .clkNotFunctioning:
   219 0000439A B002                <1>     mov al, 02h ;Device not ready error
   220                              <1> .clkWriteErrorCode:
   221 0000439C B480                <1>     mov ah, 80h ;Set error bit
   222 0000439E 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   223                              <1> .clkExit:
   224 000043A2 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   225 000043A8 5D                  <1>     pop rbp
   226 000043A9 5E                  <1>     pop rsi
   227 000043AA 5A                  <1>     pop rdx
   228 000043AB 59                  <1>     pop rcx
   229 000043AC 5B                  <1>     pop rbx
   230 000043AD 58                  <1>     pop rax
   231 000043AE C3                  <1>     ret
   232                              <1> 
   233                              <1> .clkRead:           ;Function 4
   234 000043AF B005                <1>     mov al, 05h ;Bad request structure length?
   235 000043B1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   236 000043B4 75E6                <1>     jne .clkWriteErrorCode
   237                              <1> 
   238 000043B6 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   239 000043B9 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   240 000043BD 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   241 000043C4 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   242 000043C8 30E4                <1>     xor ah, ah
   243 000043CA CD3A                <1>     int 3Ah         ;Read the system timer
   244 000043CC 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   245 000043CE 740D                <1>     jz .clkr1       ;Nope, now just time 
   246 000043D0 30E4                <1>     xor ah, ah
   247                              <1>     ;This works as al should keep count of the # of days passed since last read
   248 000043D2 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   249 000043D6 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   250                              <1> .clkr1:
   251 000043DD 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   252 000043E0 0FB7D2              <1>     movzx edx, dx
   253 000043E3 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   254 000043E5 89D0                <1>     mov eax, edx
   255 000043E7 31D2                <1>     xor edx, edx
   256 000043E9 89D8                <1>     mov eax, ebx
   257 000043EB B944040000          <1>     mov ecx, 1092   
   258 000043F0 F7F1                <1>     div ecx
   259 000043F2 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   260 000043F5 89D0                <1>     mov eax, edx    ;Get remainder in eax
   261 000043F7 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   262 000043FB 31D2                <1>     xor edx, edx
   263 000043FD B95B000000          <1>     mov ecx, 91 ;5*18.2
   264 00004402 F7F1                <1>     div ecx
   265 00004404 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   266 00004407 89D0                <1>     mov eax, edx    ;Get remainder in eax
   267                              <1>     ;lea eax, dword [eax + 4*eax]
   268                              <1>     ;add eax, edx    ;Essentially multiply by 6
   269 00004409 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   270 0000440C 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   271 0000440F E98EFFFFFF          <1>     jmp .clkExit
   272                              <1> 
   273                              <1> .clkInputStatus:    ;Function 6
   274                              <1> ;Always return ready
   275 00004414 B005                <1>     mov al, 05h ;Bad request structure length?
   276 00004416 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   277 00004419 7581                <1>     jne .clkWriteErrorCode
   278 0000441B E982FFFFFF          <1>     jmp .clkExit
   279                              <1> .clkFlushInputBuffers:  ;Function 7
   280                              <1> ;Always return done immediately
   281 00004420 B005                <1>     mov al, 05h ;Bad request structure length?
   282 00004422 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   283 00004425 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   284 0000442B E972FFFFFF          <1>     jmp .clkExit
   285                              <1> 
   286                              <1> .clkWrite:          ;Functions 8 and 9
   287 00004430 B005                <1>     mov al, 05h ;Bad request structure length?
   288 00004432 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   289 00004435 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   290                              <1> 
   291 0000443B 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   292 0000443E 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   293 00004442 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   294 00004446 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   295                              <1> 
   296 0000444D 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   297 0000444F 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   298 00004453 B105                <1>     mov cl, 5
   299 00004455 F6F1                <1>     div cl          ;Divide al by 5
   300 00004457 30E4                <1>     xor ah, ah      ;Remove the remainder
   301 00004459 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   302                              <1> ;Using the decimal part of this formula for the low count
   303                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   304 0000445B 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   305 0000445E B912000000          <1>     mov ecx, 18
   306 00004463 F7E1                <1>     mul ecx  
   307 00004465 01C3                <1>     add ebx, eax
   308                              <1> 
   309 00004467 31D2                <1>     xor edx, edx
   310 00004469 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   311 0000446D B944040000          <1>     mov ecx, 1092
   312 00004472 F7E1                <1>     mul ecx
   313 00004474 01C3                <1>     add ebx, eax
   314 00004476 89DA                <1>     mov edx, ebx    ;edx now has low count
   315 00004478 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   316 0000447C B401                <1>     mov ah, 01h     ;Set the system time
   317 0000447E CD3A                <1>     int 3Ah
   318                              <1> 
   319 00004480 4889F3              <1>     mov rbx, rsi
   320 00004483 E91AFFFFFF          <1>     jmp .clkExit
   321                              <1> 
   322                              <1> .clkBCDtoHex:
   323                              <1> ;Converts a BCD value to a Hex byte
   324                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   325 00004488 51                  <1>     push rcx
   326 00004489 0FB6C0              <1>     movzx eax, al   ;Zero extend
   327 0000448C 89C1                <1>     mov ecx, eax    ;Save al in ecx
   328 0000448E 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   329 00004493 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   330 00004499 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   331                              <1> .cbth0:
   332 0000449C 050A000000          <1>     add eax, 10
   333 000044A1 E2F9                <1>     loop .cbth0
   334 000044A3 59                  <1>     pop rcx
   335 000044A4 C3                  <1>     ret
   336                              <1> 
   337                              <1> .clkHexToBCD:
   338                              <1> ;Converts a Hex byte into two BCD digits
   339                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   340 000044A5 51                  <1>     push rcx
   341 000044A6 0FB6C0              <1>     movzx eax, al   ;Zero extend
   342 000044A9 31C9                <1>     xor ecx, ecx
   343                              <1> .chtb0:
   344 000044AB 3D0A000000          <1>     cmp eax, 10
   345 000044B0 7209                <1>     jb .chtb1
   346 000044B2 2D0A000000          <1>     sub eax, 10
   347 000044B7 FFC1                <1>     inc ecx
   348 000044B9 EBF0                <1>     jmp short .chtb0
   349                              <1> .chtb1:
   350 000044BB C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   351 000044BE 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   352 000044C0 59                  <1>     pop rcx
   353 000044C1 C3                  <1>     ret
   354 000044C2 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   355                              <1> 
   356                              <1> ;COM Driver headers and main interrupt strat
   357                              <1> com1Intr:
   358 000044C4 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   359 000044CB EB19                <1>     jmp short comIntr
   360                              <1> com2Intr:
   361 000044CD C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   362 000044D4 EB10                <1>     jmp short comIntr
   363                              <1> com3Intr:
   364 000044D6 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   365 000044DD EB07                <1>     jmp short comIntr
   366                              <1> com4Intr:
   367 000044DF C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   368                              <1> comIntr:
   369 000044E6 50                  <1>     push rax
   370 000044E7 53                  <1>     push rbx
   371 000044E8 51                  <1>     push rcx
   372 000044E9 52                  <1>     push rdx
   373 000044EA 56                  <1>     push rsi
   374 000044EB 57                  <1>     push rdi
   375 000044EC 488B1D05FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   376 000044F3 B003                <1>     mov al, 03h ;Unknown Command
   377 000044F5 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   378 000044F9 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   379                              <1> 
   380 000044FB 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   381 000044FE 3C04                <1>     cmp al, 4   ;Read Character(s)
   382 00004500 7462                <1>     jz .comRead
   383 00004502 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   384 00004504 0F849B000000        <1>     jz .comNondestructiveRead   
   385 0000450A 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   386 0000450C 0F8484000000        <1>     jz .comReadInputStatus
   387 00004512 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   388 00004514 0F84B9000000        <1>     jz .comFlushInputBuffers
   389 0000451A 3C08                <1>     cmp al, 8
   390 0000451C 0F84DB000000        <1>     jz .comWrite
   391 00004522 3C09                <1>     cmp al, 9
   392 00004524 0F84D3000000        <1>     jz .comWrite
   393 0000452A 3C0A                <1>     cmp al, 0Ah
   394 0000452C 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   395 00004532 EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   396                              <1> .comErrorNoCount:
   397 00004534 B002                <1>     mov al, 02h ;Unknown device
   398 00004536 EB19                <1>     jmp short .comWriteErrorCode
   399                              <1> .comReadError:
   400 00004538 BA0B000000          <1>     mov edx, 0Bh
   401                              <1> .comWriteError:
   402 0000453D BA0A000000          <1>     mov edx, 0Ah
   403                              <1> .comError:
   404 00004542 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   405 00004545 B902000000          <1>     mov ecx, 02h    ;Unknown device
   406 0000454A 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   407 0000454C 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   408 0000454F 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   409                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   410 00004551 B480                <1>     mov ah, 80h ;Set error bit
   411 00004553 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   412                              <1> .comExit:
   413 00004557 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   414 0000455D 5F                  <1>     pop rdi
   415 0000455E 5E                  <1>     pop rsi
   416 0000455F 5A                  <1>     pop rdx
   417 00004560 59                  <1>     pop rcx
   418 00004561 5B                  <1>     pop rbx
   419 00004562 58                  <1>     pop rax
   420 00004563 C3                  <1>     ret
   421                              <1> 
   422                              <1> .comRead:
   423 00004564 B005                <1>     mov al, 05h ;Bad request structure length?
   424 00004566 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   425 00004569 75E6                <1>     jne .comWriteErrorCode
   426                              <1> 
   427 0000456B 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   428 0000456F 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   429                              <1> .cr1:
   430 00004571 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   431 00004574 741B                <1>     je .cre2
   432                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   433 00004576 B802000000          <1>     mov eax, 02h    ;Recieve 
   434 0000457B 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   435 00004581 6698                <1>     cbw     ;Zero extend to upper byte
   436 00004583 CD34                <1>     int 34h ;Recieve Char
   437 00004585 72BB                <1>     jc .comError
   438 00004587 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   439 0000458A 74EA                <1>     je .cr11
   440 0000458C AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   441 0000458D FFC1                <1>     inc ecx
   442 0000458F EBE0                <1>     jmp short .cr1
   443                              <1> .cre2:
   444 00004591 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   445 00004594 EBC1                <1>     jmp short .comExit
   446                              <1> 
   447                              <1> .comReadInputStatus:
   448 00004596 B005                <1>     mov al, 05h ;Bad request structure length?
   449 00004598 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   450 0000459B 75B4                <1>     jne .comWriteErrorCode
   451 0000459D 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   452 000045A3 EBB2                <1>     jmp short .comExit
   453                              <1> 
   454                              <1> .comNondestructiveRead:
   455                              <1> ;Acts like a "read one character if there is one" function
   456 000045A5 B005                <1>     mov al, 05h ;Bad request structure length?
   457 000045A7 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   458 000045AA 75A5                <1>     jne .comWriteErrorCode
   459                              <1> .cndr1:
   460 000045AC B802000000          <1>     mov eax, 02h    ;Recieve 
   461 000045B1 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   462 000045B7 6698                <1>     cbw     ;Zero extend to upper byte
   463 000045B9 CD34                <1>     int 34h ;Recieve Char
   464 000045BB 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   465 000045C1 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   466 000045C4 7405                <1>     je .cndr2
   467 000045C6 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Get next char
   468 000045C9 EB8C                <1>     jmp short .comExit
   469                              <1> .cndr2:
   470 000045CB 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 200h ;Busy bit set
   471 000045D1 EB84                <1>     jmp short .comExit
   472                              <1> 
   473                              <1> .comFlushInputBuffers:
   474 000045D3 B005                <1>     mov al, 05h ;Bad request structure length?
   475 000045D5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   476 000045D8 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   477                              <1> .cfib0:
   478 000045DE 8A1584000000        <1>     mov dl, byte [.comDevice]
   479 000045E4 6698                <1>     cbw
   480 000045E6 B802000000          <1>     mov eax, 02h    ;Recieve
   481 000045EB CD34                <1>     int 34h
   482 000045ED 0F8241FFFFFF        <1>     jc .comErrorNoCount
   483 000045F3 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   484 000045F6 75E6                <1>     jne .cfib0
   485 000045F8 E95AFFFFFF          <1>     jmp .comExit
   486                              <1> 
   487                              <1> .comWrite:
   488 000045FD B005                <1>     mov al, 05h ;Bad request structure length?
   489 000045FF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   490 00004602 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   491                              <1> 
   492 00004608 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   493 0000460C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   494                              <1> .cw1: 
   495 0000460E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   496 00004611 7417                <1>     je .cw2
   497 00004613 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   498 00004614 B401                <1>     mov ah, 01h ;Move function number into ah
   499 00004616 8A154C000000        <1>     mov dl, byte [.comDevice]
   500 0000461C 6698                <1>     cbw     ;Zero extend to upper byte
   501 0000461E CD34                <1>     int 34h ;Transmit char
   502 00004620 0F821CFFFFFF        <1>     jc .comError
   503 00004626 FFC1                <1>     inc ecx
   504 00004628 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   505                              <1> .cw2:
   506 0000462A 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   507 0000462D E925FFFFFF          <1>     jmp .comExit
   508                              <1> 
   509                              <1> .comOutputStatus:
   510                              <1> ;Read MODEM status
   511 00004632 B005                <1>     mov al, 05h ;Bad request structure length?
   512 00004634 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   513 00004637 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   514                              <1> 
   515 0000463D 8A1525000000        <1>     mov dl, byte [.comDevice]
   516 00004643 6698                <1>     cbw     ;Zero extend to upper byte
   517 00004645 B403                <1>     mov ah, 03h     ;Get status
   518 00004647 CD34                <1>     int 34h
   519 00004649 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   520 0000464F 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   521 00004654 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   522 00004657 F7D0                <1>     not eax      ;Bitwise inversion
   523 00004659 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   524 0000465E 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   525 00004663 E9EFFEFFFF          <1>     jmp .comExit
   526 00004668 00                  <1> .comDevice   db 0
    41                                  %include "./Source/Drivers/diskDrv.asm"
    42                              <1> msdDriver:
    43 00004669 50                  <1>     push rax
    44 0000466A 53                  <1>     push rbx
    45 0000466B 51                  <1>     push rcx
    46 0000466C 52                  <1>     push rdx
    47 0000466D 56                  <1>     push rsi
    48 0000466E 57                  <1>     push rdi
    49 0000466F 55                  <1>     push rbp
    50 00004670 4150                <1>     push r8
    51 00004672 488B1D7FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    52 00004679 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    53 0000467D B003                <1>     mov al, drvBadCmd
    54 0000467F 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    55 00004685 B001                <1>     mov al, drvBadUnit 
    56 00004687 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    57 0000468B 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    58 00004691 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    59 00004698 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    60 0000469C C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    61 0000469F 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    62 000046A3 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    63 000046A7 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    64 000046A9 488D0D9A000000      <1>     lea rcx, .msdTable
    65 000046B0 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    66 000046B4 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    67 000046B6 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    68 000046B8 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    69 000046BB FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    70                              <1> .msdDriverExit:
    71 000046BD 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    72 000046C3 4158                <1>     pop r8
    73 000046C5 5D                  <1>     pop rbp
    74 000046C6 5F                  <1>     pop rdi
    75 000046C7 5E                  <1>     pop rsi
    76 000046C8 5A                  <1>     pop rdx
    77 000046C9 59                  <1>     pop rcx
    78 000046CA 5B                  <1>     pop rbx
    79 000046CB 58                  <1>     pop rax
    80 000046CC C3                  <1>     ret
    81                              <1> 
    82                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    83 000046CD 4889FB              <1>     mov rbx, rdi
    84 000046D0 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    85 000046D3 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    86 000046D5 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    87                              <1> ;Now fall through to general error
    88                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    89 000046D8 B401                <1>     mov ah, 01h
    90 000046DA CD33                <1>     int 33h ;Read status of last operation
    91 000046DC 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    92 000046DF B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    93 000046E1 7460                <1>     je .msdWriteErrorCode 
    94 000046E3 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    95 000046E5 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    96 000046E8 7459                <1>     je .msdWriteErrorCode 
    97 000046EA 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    98 000046ED 7454                <1>     je .msdWriteErrorCode
    99                              <1> ;Device Not Ready
   100 000046EF B002                <1>     mov al, 02h  ;Device not ready code
   101 000046F1 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   102 000046F4 744D                <1>     je .msdWriteErrorCode
   103 000046F6 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   104 000046FA 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   105                              <1> ;Write Protected
   106 000046FE 30C0                <1>     xor al, al
   107 00004700 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   108 00004705 743C                <1>     je .msdWriteErrorCode
   109                              <1> ;CRC Error
   110 00004707 B004                <1>     mov al, 04h     ;CRC error code
   111 00004709 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   112 0000470E 7433                <1>     je .msdWriteErrorCode
   113 00004710 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   114 00004715 742C                <1>     je .msdWriteErrorCode
   115 00004717 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   116 0000471C 7425                <1>     je .msdWriteErrorCode
   117                              <1> ;Seek Error
   118 0000471E B006                <1>     mov al, 06h     ;Seek error code
   119 00004720 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   120 00004723 741E                <1>     je .msdWriteErrorCode
   121                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   122                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   123 00004725 B007                <1>     mov al, 07h
   124 00004727 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   125 0000472A 7417                <1>     je .msdWriteErrorCode
   126                              <1> ;Sector Not Found
   127 0000472C B008                <1>     mov al, 08h     ;Sector not found code
   128 0000472E 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   129 00004731 7410                <1>     je .msdWriteErrorCode
   130                              <1> ;Write faults
   131 00004733 B00A                <1>     mov al, 0Ah     ;Write fault
   132 00004735 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   133 00004738 7409                <1>     je .msdWriteErrorCode
   134                              <1> ;Read faults
   135 0000473A B00B                <1>     mov al, 0Bh     ;Read fault
   136 0000473C 80F911              <1>     cmp cl, 11h     ;Read error
   137 0000473F 7402                <1>     je .msdWriteErrorCode
   138                              <1> ;General Errors
   139 00004741 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   140                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   141 00004743 B480                <1>     mov ah, 80h ;Set error bit
   142 00004745 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   143 00004749 C3                  <1>     ret ;Return to set done bit
   144                              <1> .msdTable:
   145 0000474A 0000                <1>     dw 0                            ;Function 0
   146 0000474C 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   147 0000474E 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   148 00004750 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   149 00004752 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   150 00004754 0000                <1>     dw 0                            ;Function 5
   151 00004756 0000                <1>     dw 0                            ;Function 6
   152 00004758 0000                <1>     dw 0                            ;Function 7
   153 0000475A 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   154 0000475C 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   155 0000475E 0000                <1>     dw 0                            ;Function 10
   156 00004760 0000                <1>     dw 0                            ;Function 11
   157 00004762 C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   158 00004764 D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   159 00004766 ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   160 00004768 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   161 0000476A 0000                <1>     dw 0                            ;Function 16
   162 0000476C 0000                <1>     dw 0                            ;Function 17
   163 0000476E 0000                <1>     dw 0                            ;Function 18
   164 00004770 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   165 00004772 0000                <1>     dw 0                            ;Function 20
   166 00004774 0000                <1>     dw 0                            ;Function 21
   167 00004776 0000                <1>     dw 0                            ;Function 22
   168 00004778 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   169 0000477A 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   170                              <1> 
   171                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   172                              <1> .msdMedChk:          ;Function 1
   173 0000477C B005                <1>     mov al, 05h ;Bad request structure length
   174 0000477E 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   175 00004781 75C0                <1>     jne .msdWriteErrorCode
   176                              <1> 
   177 00004783 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   178 00004788 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   179 0000478F 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   180 00004792 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   181 00004795 753F                <1>     jnz .mmcNoChange
   182                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   183 00004797 B416                <1>     mov ah, 16h 
   184 00004799 CD33                <1>     int 33h
   185 0000479B 0F8237FFFFFF        <1>     jc .msdGenDiskError
   186 000047A1 80FC80              <1>     cmp ah, 80h
   187 000047A4 740E                <1>     je .mmcNoChangeLine
   188 000047A6 80FC86              <1>     cmp ah, 86h
   189 000047A9 7409                <1>     je .mmcNoChangeLine
   190 000047AB 84E4                <1>     test ah, ah ;No change?
   191 000047AD 7427                <1>     jz .mmcNoChange
   192 000047AF F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   193 000047B2 750D                <1>     jnz .mmcChange
   194                              <1> ;If nothing, fall through and test manually, should never happen though
   195                              <1> .mmcNoChangeLine:
   196                              <1> ;Now we test Media Descriptor
   197 000047B4 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   198 000047B9 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   199 000047BC 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   200 000047BF 7410                <1>     je .mmcUnsure
   201                              <1> .mmcChange:
   202 000047C1 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   203 000047C5 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   204 000047CC 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   205                              <1>     ;Check here if there were any open handles on the device when it was changed
   206 000047D0 C3                  <1>     ret
   207                              <1> .mmcUnsure:
   208 000047D1 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   209 000047D5 C3                  <1>     ret
   210                              <1> .mmcNoChange:
   211 000047D6 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   212 000047DA C3                  <1>     ret
   213                              <1> 
   214                              <1> 
   215                              <1> .msdBuildBPB:        ;Function 2
   216 000047DB B005                <1>     mov al, 05h ;Bad request structure length
   217 000047DD 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   218 000047E0 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   219                              <1> 
   220 000047E6 4889DE              <1>     mov rsi, rbx
   221 000047E9 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   222 000047EE 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   223 000047F5 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   224 000047F8 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   225 000047FC 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   226 000047FE 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   227 00004801 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   228 00004806 CD33                <1>     int 33h
   229 00004808 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   230                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   231 0000480E 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   232 00004812 7418                <1>     je .mbbpb0
   233 00004814 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   234 00004818 7412                <1>     je .mbbpb0
   235 0000481A 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   236 0000481E 740C                <1>     je .mbbpb0
   237 00004820 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   238 00004824 B007                <1>     mov al, 07h ;Unknown media error code
   239 00004826 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   240                              <1> .mbbpb0:
   241 0000482C 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   242 0000482F 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   243 00004834 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   244 0000483B 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   245 0000483F 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   246 00004842 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   247 00004846 B90F000000          <1>     mov ecx, bpbEx_size/8
   248 0000484B F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   249 0000484E C3                  <1>     ret
   250                              <1> .msdIOCTLRead:       ;Function 3, returns done
   251 0000484F B005                <1>     mov al, drvBadDrvReq
   252 00004851 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   253 00004854 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   254 0000485A C3                  <1>     ret
   255                              <1> .msdRead:            ;Function 4
   256                              <1> ;Will read one sector at a time.
   257 0000485B B005                <1>     mov al, 05h ;Bad request structure length
   258 0000485D 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   259 00004860 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   260                              <1> 
   261 00004866 4889DF              <1>     mov rdi, rbx
   262 00004869 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   263                              <1> .msdr0:
   264 0000486B B682                <1>     mov dh, 82h ;LBA Read Sectors
   265 0000486D E841010000          <1>     call .msdBlkIOCommon
   266 00004872 0F8255FEFFFF        <1>     jc .msdIOError
   267 00004878 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   268 00004880 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   269 00004888 FFC6                <1>     inc esi
   270 0000488A 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   271 0000488D 75DC                <1>     jne .msdr0
   272 0000488F 4889FB              <1>     mov rbx, rdi
   273 00004892 C3                  <1>     ret
   274                              <1> .msdWrite:           ;Function 8
   275                              <1> ;Will write one sector at a time.
   276 00004893 B005                <1>     mov al, 05h ;Bad request structure length
   277 00004895 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   278 00004898 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   279                              <1> 
   280 0000489E 4889DF              <1>     mov rdi, rbx
   281 000048A1 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   282                              <1> .msdw0:
   283 000048A3 B683                <1>     mov dh, 83h ;LBA Write Sectors
   284 000048A5 E809010000          <1>     call .msdBlkIOCommon
   285 000048AA 0F821DFEFFFF        <1>     jc .msdIOError
   286 000048B0 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   287 000048B8 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   288 000048C0 FFC6                <1>     inc esi
   289 000048C2 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   290 000048C5 75DC                <1>     jne .msdw0
   291 000048C7 4889FB              <1>     mov rbx, rdi
   292 000048CA C3                  <1>     ret
   293                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   294                              <1> ;Will write one sector at a time and then verify it.
   295 000048CB B005                <1>     mov al, 05h ;Bad request structure length
   296 000048CD 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   297 000048D0 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   298                              <1> 
   299 000048D6 4889DF              <1>     mov rdi, rbx
   300 000048D9 31F6                <1>     xor esi, esi  ;Set counter to zero
   301                              <1> .msdwv0:
   302 000048DB B683                <1>     mov dh, 83h ;LBA Write Sectors
   303 000048DD E8D1000000          <1>     call .msdBlkIOCommon
   304 000048E2 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   305 000048E8 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   306 000048EA E8C4000000          <1>     call .msdBlkIOCommon
   307 000048EF 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   308 000048F5 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   309 000048FD 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   310 00004905 FFC6                <1>     inc esi
   311 00004907 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   312 0000490A 75CF                <1>     jne .msdwv0
   313 0000490C 4889FB              <1>     mov rbx, rdi
   314 0000490F C3                  <1>     ret
   315                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   316 00004910 B005                <1>     mov al, drvBadDrvReq
   317 00004912 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   318 00004915 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   319                              <1> 
   320 0000491B C3                  <1>     ret
   321                              <1> .msdDevOpen:         ;Function 13
   322 0000491C B005                <1>     mov al, drvBadDrvReq
   323 0000491E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   324 00004921 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   325                              <1> 
   326 00004927 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   327 0000492C 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   328 00004933 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   329 00004936 C3                  <1>     ret
   330                              <1> .msdDevClose:        ;Function 14
   331 00004937 B005                <1>     mov al, drvBadDrvReq
   332 00004939 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   333 0000493C 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   334                              <1> 
   335 00004942 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   336 00004947 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   337 0000494E FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   338 00004951 C3                  <1>     ret
   339                              <1> .msdRemovableMedia:  ;Function 15
   340 00004952 B005                <1>     mov al, drvBadDrvReq
   341 00004954 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   342 00004957 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   343                              <1> 
   344 0000495D 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   345 00004962 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   346 00004969 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   347 0000496C B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   348 00004971 31D2                <1>     xor edx, edx    ;Busy bit clear
   349 00004973 A880                <1>     test al, 80h
   350 00004975 0F44CA              <1>     cmovz ecx, edx
   351 00004978 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   352 0000497C C3                  <1>     ret
   353                              <1> .msdGenericIOCTL:    ;Function 19
   354 0000497D B005                <1>     mov al, drvBadDrvReq
   355 0000497F 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   356 00004982 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   357                              <1> 
   358 00004988 C3                  <1>     ret
   359                              <1> .msdGetLogicalDev:   ;Function 23
   360 00004989 B005                <1>     mov al, drvBadDrvReq
   361 0000498B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   362 0000498E 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   363                              <1> 
   364 00004994 8A0541000000        <1>     mov al, byte [.msdCurDev]
   365 0000499A 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   366 0000499D C3                  <1>     ret
   367                              <1> .msdSetLogicalDev:   ;Function 24
   368 0000499E B005                <1>     mov al, drvBadDrvReq
   369 000049A0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   370 000049A3 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   371                              <1> 
   372 000049A9 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   373 000049AC 880529000000        <1>     mov byte [.msdCurDev], al
   374 000049B2 C3                  <1>     ret
   375                              <1> 
   376                              <1> .msdBlkIOCommon:  ;Does block IO
   377                              <1> ;Called with rdi containing old rbx value and ah with function number
   378                              <1> ;rbp points to bpb
   379                              <1> ;Error handled by caller
   380                              <1> ;Sector count handled by caller
   381                              <1> ;Called with dh = BIOS function number
   382 000049B3 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   383 000049B8 8A90[DC490000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   384 000049BE 31C9                <1>     xor ecx, ecx
   385 000049C0 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   386 000049C3 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   387 000049C7 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   388 000049CB 88F4                <1>     mov ah, dh
   389 000049CD B001                <1>     mov al, 01h ;Do one sector at a time 
   390 000049CF CD33                <1>     int 33h
   391 000049D1 C3                  <1>     ret
   392                              <1> 
   393 000049D2 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   394                              <1> ;LASTDRIVE default is 5
   395                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   396                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   397 000049DB 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   398                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   399 000049DC FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   400 000049E1 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   401 000049E6 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   401 000049EF 000000000000000000- <1>
   401 000049F8 000000000000000000- <1>
   401 00004A01 000000000000000000- <1>
   401 00004A0A 00000000            <1>
   402 00004A0E 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   402 00004A17 000000000000000000- <1>
   402 00004A20 000000000000000000- <1>
   402 00004A29 000000000000000000- <1>
   402 00004A32 000000000000000000- <1>
   402 00004A3B 000000000000000000- <1>
   402 00004A44 000000000000000000- <1>
   402 00004A4D 000000000000000000- <1>
   402 00004A56 000000000000000000- <1>
   402 00004A5F 000000000000000000- <1>
   402 00004A68 000000000000000000- <1>
   402 00004A71 000000000000000000- <1>
   402 00004A7A 000000000000000000- <1>
   402 00004A83 000000000000000000- <1>
   402 00004A8C 000000000000000000- <1>
   402 00004A95 000000000000000000- <1>
   402 00004A9E 000000000000000000- <1>
   402 00004AA7 000000000000000000- <1>
   402 00004AB0 000000000000000000- <1>
   402 00004AB9 000000000000000000- <1>
   402 00004AC2 000000000000000000- <1>
   402 00004ACB 000000000000000000- <1>
   402 00004AD4 000000000000000000- <1>
   402 00004ADD 000000000000000000- <1>
   402 00004AE6 000000000000000000- <1>
   402 00004AEF 000000000000000000- <1>
   402 00004AF8 000000000000000000- <1>
   402 00004B01 000000000000000000- <1>
   402 00004B0A 000000000000000000- <1>
   402 00004B13 000000000000000000- <1>
   402 00004B1C 000000000000000000- <1>
   402 00004B25 000000000000000000- <1>
   402 00004B2E 000000000000000000- <1>
   402 00004B37 000000000000000000- <1>
   402 00004B40 000000000000000000- <1>
   402 00004B49 000000000000000000- <1>
   402 00004B52 000000000000000000- <1>
   402 00004B5B 000000000000000000- <1>
   402 00004B64 000000000000000000- <1>
   402 00004B6D 000000000000000000- <1>
   402 00004B76 000000000000000000- <1>
   402 00004B7F 000000000000000000- <1>
   402 00004B88 000000000000000000- <1>
   402 00004B91 000000000000000000- <1>
   402 00004B9A 000000000000000000- <1>
   402 00004BA3 000000000000000000- <1>
   402 00004BAC 000000000000000000- <1>
   402 00004BB5 000000000000000000- <1>
   402 00004BBE 000000000000000000- <1>
   402 00004BC7 000000000000000000- <1>
   402 00004BD0 000000000000000000- <1>
   402 00004BD9 000000000000000000- <1>
   402 00004BE2 000000000000000000- <1>
   402 00004BEB 000000000000000000- <1>
   402 00004BF4 000000000000000000- <1>
   402 00004BFD 000000000000000000- <1>
   402 00004C06 000000000000000000- <1>
   402 00004C0F 000000000000000000- <1>
   402 00004C18 000000000000000000- <1>
   402 00004C21 000000000000000000- <1>
   402 00004C2A 000000000000000000- <1>
   402 00004C33 000000000000000000- <1>
   402 00004C3C 000000000000000000- <1>
   402 00004C45 000000000000000000- <1>
   402 00004C4E 000000000000000000- <1>
   402 00004C57 000000000000000000- <1>
   402 00004C60 000000000000        <1>
   403                              <1> 
   404                              <1> endptr equ $
    42                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    43                                  ;Paragraph alignment
    44                                  %include "./Source/BSS/dosDynaDataArea.asm"
    45                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    46                              <1> ; the MCB chain!
    47                              <1> ddaStart:
    48 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    49                              <1> 
    50                              <1> ;Create DPB chain of first 5 available DPB slots
    51                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    52 00000010 <res 35h>           <1> firstDPB        resb dpb_size
    53 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    54                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    55                              <1> ;Always jettison this space
    56 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    57 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    58 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    59                              <1> 
    60 00000119 <res 30h>           <1> tmpBufHdr       resb bufferHdr_size
    61 00000149 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    62                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    63                              <1> dynamicDataAreaLength equ $ - ddaStart
    63          ------------------  <1>  info: assembly required 1+8+2 passes

