     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvExtFun   equ 40h ;If set, functions 13, 17, 18 supported (must be)
    73                              <1>     devDrvIOCTL2   equ 80h ;If set, IOCTL function 19 supported
    74                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported (must)
    75                              <1>     devDrvIOCTL    equ 4000h ;If set, Generic IOCTL supported
    76                              <1>     devDrvChar     equ 8000h ;If set, Char device
    77                              <1> ;Bit 0 1=console input
    78                              <1> ;    1 1=console output (character devices)
    79                              <1> ;    2 1=NUL device
    80                              <1> ;    3 1=CLOCK device
    81                              <1> ;    4 1=INT 49 output (CON)
    82                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    83                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    84                              <1> ;   11 1=open/close/removable media supported (3.0+)
    85                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    86                              <1> ;      1=media descriptor in FAT required (block devices)
    87                              <1> ;   14 1=IOCTL supported
    88                              <1> ;   15 0=block device
    89                              <1> ;      1=character device
    90                              <1> 
    91                              <1> ;Driver structures
    92                              <1> 
    93                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    94                              <1> 
    95                              <1>     .hdrlen resb 1  ;Length of the request header
    96                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    97                              <1>     .cmdcde resb 1  ;Command code
    98                              <1>     .status resw 1  ;Status word
    99                              <1>     .devptr resq 1  ;Device queue pointer field
   100                              <1> 
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> struc drvReqHdr
   104                              <1>     drvReqHdrM
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   105                              <1> endstruc
   106                              <1> 
   107                              <1> struc initReqPkt  ;Init Request Packet
   108                              <1> 
   109                              <1>     drvReqHdrM   ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   110 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   111 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   112 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   113 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   118                              <1> 
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   120 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   121 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   122 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   129 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   130 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   131 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   132                              <1> 
   133                              <1> endstruc
   134                              <1> 
   135                              <1> struc ioReqPkt   ;IO Request Packet
   136                              <1> 
   137                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   138 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   139 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   140 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   141 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   142 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   143                              <1> 
   144                              <1> endstruc
   145                              <1> 
   146                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   147                              <1>     
   148                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   149 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc statusReqPkt   ;Status Request Packet
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   156                              <1> 
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc openReqPkt ;Open Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc closeReqPkt ;Close Device Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   180                              <1>      
   181                              <1> endstruc
   182                              <1> 
   183                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   184                              <1> 
   185                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   186 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   187 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   188 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   189 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   190 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   201                              <1>     
   202                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   203                              <1> 
   204                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   138                              <1> 
   139                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   140                              <1> 
   141 00000000 ??????              <1>     .jmpBoot                resb 3 
   142 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   143 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   144 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   145 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   146 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   147 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   148 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   149 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   150 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   151 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   152 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   153 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   154 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   155 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   156 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   157 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   158 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   159 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   160                              <1> 
   161                              <1> endstruc
   162                              <1> 
   163                              <1> struc FSInfo
   164                              <1> 
   165 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   166 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   167 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   168 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   169 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   170 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   171 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   172                              <1> 
   173                              <1> endstruc
     8                                  %include "./Source/Include/dosStruc.inc"
     9                              <1> 
    10                              <1> ;-------------------------------------------------------;
    11                              <1> ; This include file contains miscellaneous internal     ;
    12                              <1> ; SCP/DOS structures.                                   ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> 
    15                              <1> ;------------------------------------------------------------------------;
    16                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    17                              <1> ; its file system structure. This is used to locate files and structures
    18                              <1> ; on the device itself and to translate file requests to cluster chains
    19                              <1> ; to LBAs to pass to the disk driver..
    20                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    21                              <1> ; drivers Initialise routine has been called.
    22                              <1> ;------------------------------------------------------------------------;
    23                              <1> struc dpb        ;Drive Parameter Block
    24                              <1> 
    25 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    26 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    27 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    28 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    29 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    30 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    31 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    32 00000009 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    33 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    34 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    35 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    36 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    37                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    38 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    39 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    40 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    41 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    42 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    43 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    44                              <1> 
    45                              <1> endstruc
    46                              <1> 
    47                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    48                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    49                              <1> ;------------------------------------------------------------------------;
    50                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    51                              <1> ; All disk pathing requests go via the CDS for that drive.
    52                              <1> ; The default drive is the last accessed drive, this number is stored
    53                              <1> ; in the DOS data area.
    54                              <1> ; The CDS is stored as an array with the offset into the array being 
    55                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    56                              <1> ;
    57                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> struc cds       ;Current Directory structure
    60 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    61 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    62 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    63 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    64 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    65 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    66                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    67                              <1> ; another, we save the number of chars to skip to that deep level).
    68                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    69                              <1> ; Only affects for SUBST drives, not JOIN
    70                              <1> ; Flags: Bit 15 set = Network drive
    71                              <1> ;        Bit 14 set = Physical drive
    72                              <1> ;        Bit 13 set = JOIN'ed drive
    73                              <1> ;        Bit 12 set = SUBST'ed drive
    74                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    75                              <1> endstruc
    76                              <1> ;CDS equates
    77                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    78                              <1> cdsPhysDrive    equ 4000h   ;CDS initialised 
    79                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    80                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    81                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    82                              <1> ;------------------------------------------------------------------------;
    83                              <1> ; The SFT is a way to allow applications to open file handles to files 
    84                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    85                              <1> ; under the first header, and then a second header will be linked to the 
    86                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    87                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    88                              <1> ; using the FCBS= command. Default FCBS=5.
    89                              <1> ;
    90                              <1> ; A file handle describes the file, and the location within the file that
    91                              <1> ; we are reading. The file handle can be manipulated without the file
    92                              <1> ; being in memory, thus allowing the user to access data without needing 
    93                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    94                              <1> ; accessing devices, by treating them as files with their drivers 
    95                              <1> ; responding and translating the manipulations of the file handle itself.
    96                              <1> ; Neither the driver nor the application should see or use the SFT for
    97                              <1> ; the handle, as it is subject to change (and will change when file 
    98                              <1> ; sharing provisions are included). The DOS will make requests to the 
    99                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   100                              <1> ; track of the information in the SFT entry for that handle. 
   101                              <1> ;
   102                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   103                              <1> ; can point to the same file. It all depends on what the applications 
   104                              <1> ; want to do with the File.
   105                              <1> ;
   106                              <1> ; !!!!IMPORTANT!!!!
   107                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   108                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   109                              <1> ;
   110                              <1> ;Each SFT may look like this:
   111                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   112                              <1> ;            |                |
   113                              <1> ;       wNumFiles*sft    wNumFiles*sft
   114                              <1> ;
   115                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   116                              <1> ; System FCBs.
   117                              <1> ;
   118                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   119                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   120                              <1> ;
   121                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   122                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   123                              <1> ;------------------------------------------------------------------------;
   124                              <1> struc sfth   ;System file table header
   125                              <1> ; This is the SFT header.
   126                              <1> ; This structure comes before the start of the first file in the array/table.
   127 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   128 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc sft
   132                              <1> ;This is the file struc itself
   133 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   134 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   135 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   136 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   137 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   138 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   139 00000013 ????                <1>     .wTime       resw 1    ;File Time
   140 00000015 ????                <1>     .wDate       resw 1    ;File Date
   141 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   142 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   143 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   144 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   145 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   146 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   147 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   148 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   149 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   150 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   151 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   152                              <1> ;                           0 means no record
   153                              <1> endstruc
   154                              <1> ;Open Mode equates
   155                              <1> ;Access modes   Bits[2:0]
   156                              <1> ReadAccess      equ 0h
   157                              <1> WriteAccess     equ 1h
   158                              <1> RWAccess        equ 2h
   159                              <1> ;Bit 3 reserved 0
   160                              <1> ;Sharing modes  Bits[6:4]
   161                              <1> CompatShare     equ 0h
   162                              <1> denyRWShare     equ 10h
   163                              <1> denyWriteShare  equ 20h
   164                              <1> denyReadShare   equ 30h
   165                              <1> denyNoneShare   equ 40h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> ;Critical Error handling
   169                              <1> critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> ;------------------------------------------------------------------------;
   198                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   199                              <1> ; to an internal buffer, and then copying it to the specified location
   200                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   201                              <1> ; another request for the same sector from the same device is made, so 
   202                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   203                              <1> ; size, selected according to the largest detected sector size during 
   204                              <1> ; the initial loadup.
   205                              <1> ;
   206                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   207                              <1> ;
   208                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   209                              <1> ;------------------------------------------------------------------------;
   210                              <1> 
   211                              <1> struc bufferHdr
   212 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   213 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> ;Note! A buffer is marked as referenced IF it has been accessed via 
   230                              <1> ; a Read or Write call. 
   231                              <1> ; When a buffer is used temporarily for internal purposes (as when DOS
   232                              <1> ; gives a driver a buffer) and then DOS reads data from that buffer (such as
   233                              <1> ; a BUILD BPB situation), the data is left as unreferenced as the use for that 
   234                              <1> ; buffer goes away before the end of the DOS call, and there is no danger of.
   235                              <1> ; of misbehaviour.
   236                              <1> ;------------------------------------------------------------------------;
   237                              <1> ; Memory control block for each memory arena
   238                              <1> ;------------------------------------------------------------------------;
   239                              <1> struc mcb
   240 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   241 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   242 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   243 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   244                              <1>     .program:
   245                              <1> endstruc
   246                              <1> ;MCB equates
   247                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   248                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   249                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   250                              <1> mcbMarkCtn      equ "M"
   251                              <1> mcbMarkEnd      equ "Z"
   252                              <1> 
   253                              <1> memFirstFit     equ 0   ;First free block goes to application
   254                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   255                              <1> memLastFit      equ 2   ;Last free block goes to application
   256                              <1> 
   257                              <1> ;Owner = Para aligned address => Owning application PSP
   258                              <1> ;...To consider...
   259                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   260                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   261                              <1> ;------------------------------------------------------------------------;
   262                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   263                              <1> ; following order, thus allowing for return values to be placed in the 
   264                              <1> ; registers by accessing the caller register stack frame.
   265                              <1> ;------------------------------------------------------------------------;
   266                              <1> struc callerFrame
   267 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   268 00000008 ????????????????    <1>     .rbx    resq 1    
   269 00000010 ????????????????    <1>     .rcx    resq 1
   270 00000018 ????????????????    <1>     .rdx    resq 1
   271 00000020 ????????????????    <1>     .rsi    resq 1
   272 00000028 ????????????????    <1>     .rdi    resq 1
   273 00000030 ????????????????    <1>     .rbp    resq 1
   274 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   275 00000040 ????????????????    <1>     .r9     resq 1
   276                              <1> ;Pushed by Processor when invoked via Interrupt
   277 00000048 ????????????????    <1>     .rip    resq 1
   278 00000050 ????????????????    <1>     .cs     resq 1
   279 00000058 ????????????????    <1>     .flags  resq 1
   280                              <1> endstruc
   281                              <1> 
   282                              <1> struc fcb
   283                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   284 00000000 ??                  <1>     .driveNum   resb 1
   285 00000001 ????????????????    <1>     .filename   resb 8
   286 00000009 ??????              <1>     .fileext    resb 3
   287 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   288                              <1> ;One block consists of 128 records, of size denoted in the below
   289 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   290 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   291 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   292 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   293 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   294 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   295 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   296 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   297 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   298                              <1>     ;If record size > 64, high byte is ignored.
   299                              <1>     ;Used for random read and write operations to find the right record
   300                              <1> endstruc
   301                              <1> 
   302                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   303 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   304 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   305 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   306 0000000D ????????            <1>     .dirOffset  resd 1  ;Entry within dir (made a dword but will never be so)
   307 00000011 ????????            <1>     .parCluster resd 1  ;Parent cluster number
   308 00000015 ??                  <1>     .atrribFnd  resb 1  ;Attrib of file found
   309 00000016 ????                <1>     .fileTime   resw 1  ;File time
   310 00000018 ????                <1>     .fileDate   resw 1  ;File date
   311 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   312 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   313                              <1> endstruc
   314                              <1> 
   315                              <1> struc psp
   316 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   317 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   318 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   319 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   320 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   321 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   322 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   323 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   324 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   325 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   326 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   327 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   328 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   329                              <1> ;Extra handle arrays are grouped into a linked list
   330                              <1> ;The below are in the same place as in DOS
   331 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   332 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   333                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   334 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   335 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   336                              <1> endstruc
   337                              <1> 
   338                              <1> struc clkStruc
   339 00000000 ????                <1>     .dateWord   resw 1
   340 00000002 ??                  <1>     .minutes    resb 1
   341 00000003 ??                  <1>     .hours      resb 1
   342 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   343 00000005 ??                  <1>     .seconds    resb 1
   344                              <1> endstruc
   345                              <1> 
   346                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   347                              <1> ;for a space of 64Gb
   348                              <1> dosAPTsize  equ 60*4096
   349                              <1> 
   350                              <1> ;Critical Error AH bitfield equates
   351                              <1> critRead    equ 0h
   352                              <1> critWrite   equ 1h
   353                              <1> critDOS     equ 0h
   354                              <1> critFAT     equ 2h
   355                              <1> critDir     equ 4h
   356                              <1> critData    equ 6h
   357                              <1> critFailOK  equ 8h
   358                              <1> critRetryOK equ 10h
   359                              <1> critIgnorOK equ 20h
   360                              <1> critCharDev equ 80h
   361                              <1> 
   362                              <1> critIgnore  equ 0
   363                              <1> critRetry   equ 1
   364                              <1> critAbort   equ 2
   365                              <1> critFail    equ 3
   366                              <1> 
   367                              <1> ;MISC ASCII control chars
   368                              <1> NUL equ 00h ;^@         | ASCII Null
   369                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   370                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   371                              <1> BEL equ 07h ;^G         | ASCII Bell
   372                              <1> BSP equ 08h ;^H         | ASCII Backspace
   373                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   374                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   375                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   376                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   377                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   378                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   379                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   380                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   381                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   382                              <1> SPC equ 20h ;Printable  | ASCII Space
   383                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   384                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   385                              <1> 
   386                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   387                              <1> ;Extended Ascii Codes
   388                              <1> eF1     equ 3Bh ;F1 second byte
   389                              <1> eF2     equ 3Ch ;F2 second byte
   390                              <1> eF3     equ 3Dh ;F3 second byte
   391                              <1> eF4     equ 3Eh ;F4 second byte
   392                              <1> eF5     equ 3Fh ;F5 second byte
   393                              <1> eF6     equ 40h ;F6 second byte
   394                              <1> eF7     equ 41h ;F7 second byte
   395                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   396                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   397                              <1> eIns    equ 52h ;Insert second byte
   398                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
     9                                  %include "./Source/Debug/debSym.inc"
    10                              <1> ;This file will include the debuging symbols
    11                              <1> 
    12                              <1> %define true 1
    13                              <1> %define false 0
    14                              <1> 
    15                              <1> ;Switch the DEBUG to false in production!
    16                              <1> %define DEBUG false
    17                              <1> %define DPBINFO false
    18                              <1> %define REGS true
    19                              <1> %define ENDSTATUS true
    20                              <1> %define ALLOCTEST true
    21                              <1> 
    22                              <1> 
    23                              <1> ;Use this space as the debug stack
    24                              <1> %define debStackTop 80000h
    10                                  %include "./Source/Include/dosError.inc"
    11                              <1> ;DOS Error codes
    12                              <1> 
    13                              <1> ;Extended Error Codes
    14                              <1> errInvFnc   equ 1   ;Invalid function number
    15                              <1> errFnf      equ 2   ;File not found
    16                              <1> errPnf      equ 3   ;Path not found
    17                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    18                              <1> errAccDen   equ 5   ;Access denied (to resource)
    19                              <1> errBadHdl   equ 6   ;Invalid handle
    20                              <1> errMCBbad   equ 7   ;MCB's destroyed
    21                              <1> errNoMem    equ 8   ;Insufficient memory
    22                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    23                              <1> errBadEnv   equ 10  ;Invalid environment
    24                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    25                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    26                              <1> errInvDat   equ 13  ;Invalid data
    27                              <1> ;           equ 14  ;Reserved
    28                              <1> errBadDrv   equ 15  ;Invalid drive specified
    29                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    30                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    31                              <1> errNoFil    equ 18  ;No more files
    32                              <1> ;The following are Driver error codes + 19
    33                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    34                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    35                              <1> errUnkUnt   equ 20  ;Unknown Unit
    36                              <1> errDrvNR    equ 21  ;Drive not ready
    37                              <1> errUnkCmd   equ 22  ;Unknown Command
    38                              <1> errCRCerr   equ 23  ;Data (CRC) error
    39                              <1> errBadRLn   equ 24  ;Bad request structure length
    40                              <1> errSekErr   equ 25  ;Seek error
    41                              <1> errUnkMed   equ 26  ;Unknown media type
    42                              <1> errSecNF    equ 27  ;Sector not Found
    43                              <1> errNoPap    equ 28  ;Printer out of paper
    44                              <1> errWF       equ 29  ;Write fault
    45                              <1> errRF       equ 30  ;Read fault
    46                              <1> errGF       equ 31  ;General fault
    47                              <1> ;Number 32-33 reserved
    48                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    49                              <1> errNoFCB    equ 35  ;FCB unavailable
    50                              <1> ;Numbers 36-82 reserved
    51                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    52                              <1> errFI44     equ 83  ;Fail on INT 44h
    53                              <1> ;Numbers 84-88 reserved
    54                              <1> ;-----------------------------------------------------------------------------
    55                              <1> ;Error Loci
    56                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    57                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    58                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    59                              <1> eLocChr     equ 4   ;Serial/Character Device error
    60                              <1> eLocMem     equ 5   ;Related to RAM
    61                              <1> ;-----------------------------------------------------------------------------
    62                              <1> ;Error Actions
    63                              <1> eActRet     equ 1   ;Retry
    64                              <1> eActDRet    equ 2   ;Delay then retry
    65                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    66                              <1> eActAbt     equ 4   ;Abort with cleanup
    67                              <1> eActKil     equ 5   ;Abort without cleanup
    68                              <1> eActIgn     equ 6   ;Ignore error
    69                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    70                              <1> ;-----------------------------------------------------------------------------
    71                              <1> ;Error classes
    72                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    73                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    74                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    75                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    76                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    77                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    78                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    79                              <1> eClsNotFnd  equ 8   ;Resource not found
    80                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    81                              <1> eClsLocked  equ 10  ;Resource Locked
    82                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    83                              <1> eClsClash   equ 12  ;Resource already exists!
    84                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  Segment .text align=1   ;Init code
    12                                  %define currSegVBase 0
    13                                  %include "./Source/Sysinit/sysInit.asm"
    14                              <1> ; We arrive here with the following values in the registers.
    15                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    16                              <1> ; dx  = Int 33h boot device number
    17                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    18                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    19 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    20 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    20 0000000B 909090909090909090- <1>
    20 00000014 909090909090909090- <1>
    20 0000001D 909090909090909090- <1>
    20 00000026 909090909090909090- <1>
    20 0000002F 909090909090909090- <1>
    20 00000038 909090909090909090- <1>
    20 00000041 909090909090909090- <1>
    20 0000004A 909090909090909090- <1>
    20 00000053 909090909090909090- <1>
    20 0000005C 909090909090909090- <1>
    20 00000065 909090909090909090- <1>
    20 0000006E 909090909090909090- <1>
    20 00000077 909090909090909090- <1>
    20 00000080 909090909090909090- <1>
    20 00000089 909090909090909090- <1>
    20 00000092 909090909090909090- <1>
    20 0000009B 909090909090909090- <1>
    20 000000A4 909090909090909090- <1>
    20 000000AD 909090909090909090- <1>
    20 000000B6 909090909090909090- <1>
    20 000000BF 909090909090909090- <1>
    20 000000C8 909090909090909090- <1>
    20 000000D1 909090909090909090- <1>
    20 000000DA 909090909090909090- <1>
    20 000000E3 909090909090909090- <1>
    20 000000EC 909090909090909090- <1>
    20 000000F5 909090909090909090- <1>
    20 000000FE 9090                <1>
    21                              <1> ;First move the alignment of the DOSSEG to 4Kb
    22 00000100 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    23 00000101 52                  <1>     push rdx    ;Save dl on stack briefly
    24 00000102 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    25 00000107 0F32                <1>     rdmsr
    26 00000109 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    27 0000010B 48C1E720            <1>     shl rdi, 20h        ;Shift high
    28 0000010F 89C7                <1>     mov edi, eax        ;Get the low dword in
    29 00000111 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    30 00000114 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    31 0000011B 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    32 00000122 89F8                <1>     mov eax, edi
    33 00000124 4889FA              <1>     mov rdx, rdi
    34 00000127 48C1EA20            <1>     shr rdx, 20h
    35 0000012B 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    36 0000012D 5A                  <1>     pop rdx
    37                              <1> ;------------------------------------------------;
    38                              <1> ;              Connect Debugger                  ;
    39                              <1> ;------------------------------------------------;
    40                              <1> %if DEBUG
    41                              <1> ;Only connect if in debug mode
    42                              <1>     mov eax, 0C501h ;Connect debugger
    43                              <1>     int 35h
    44                              <1> %endif
    45                              <1> ;------------------------------------------------;
    46                              <1> ;           Sanitise the data area               ;
    47                              <1> ;------------------------------------------------;
    48                              <1> ; This call initialises ALL fields in the DOS    ;
    49                              <1> ; data area with 0's. Thus any fields, which     ;
    50                              <1> ; need to be initialised with a 0 value, are     ;
    51                              <1> ; initialised for free.                          ;
    52                              <1> ;------------------------------------------------;
    53 0000012E B9[57D80300]        <1>     mov ecx, dSegLen
    54 00000133 30C0                <1>     xor al, al
    55 00000135 57                  <1>     push rdi    ;Temp save rdi on the stack
    56 00000136 F3AA                <1>     rep stosb
    57 00000138 5F                  <1>     pop rdi
    58                              <1> ;------------------------------------------------;
    59                              <1> ;          Start saving Basic DOS data           ;
    60                              <1> ;------------------------------------------------;
    61 00000139 64881425[10C00300]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    62                              <1> ;Copy DOS to its final resting place
    63 00000141 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    63 00000146 [00C00300]          <1>
    64 0000014A 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    64 0000014F [08C00300]          <1>
    65 00000153 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    66 00000156 4881C7[57D80300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    67 0000015D 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    68 00000164 B900100000          <1>     mov ecx, 1000h
    69 00000169 F348A5              <1>     rep movsq
    70                              <1> 
    71 0000016C CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    72 0000016E 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    73 00000172 664489C0            <1>     mov ax, r8w
    74 00000176 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
    75 0000017E 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    76 00000186 64C60425[69C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    76 0000018E 05                  <1>
    77                              <1>     ;mov byte fs:[numPhysVol], 0    ;Number of logical drives
    78 0000018F 6466C70425-         <1>     mov word fs:[numFiles], 5      ;Default 8 files, at start 5
    78 00000194 [8FC00300]0500      <1>
    79 0000019A 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
    79 0000019F [91C00300]1400      <1>
    80 000001A5 64C60425[6AC00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
    80 000001AD 01                  <1>
    81                              <1>     ;If no detected Int 33h devices, halt 
    82 000001AE 49C1E810            <1>     shr r8, 2*8
    83 000001B2 4584C0              <1>     test r8b, r8b
    84 000001B5 0F84050A0000        <1>     jz errorInit
    85                              <1> ;------------------------------------------------;
    86                              <1> ;          Add additional page tables            ;
    87                              <1> ;------------------------------------------------;
    88                              <1> ;This will allow for up to 64Gb of addressible space
    89 000001BB 4889EF              <1>     mov rdi, rbp
    90                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    91 000001BE B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
    92 000001C3 57                  <1>     push rdi
    93 000001C4 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    93 000001CD 00                  <1>
    94                              <1> pdtLoop:
    95 000001CE 48AB                <1>     stosq
    96 000001D0 480500002000        <1>     add rax, 200000h
    97 000001D6 FFC9                <1>     dec ecx
    98 000001D8 75F4                <1>     jnz pdtLoop
    99 000001DA 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   100                              <1> ;Now we add every 4kb page to the page directory pointer table
   101                              <1> ;15 4kb pages to consider
   102 000001DB 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   103 000001DE 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   104 000001E1 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   105 000001E8 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   106 000001EF B93C000000          <1>     mov ecx, 60
   107 000001F4 480D03000000        <1>     or rax, 3h      ;present and r/w
   108                              <1> pdptLoop:
   109 000001FA 48AB                <1>     stosq
   110 000001FC 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   111 00000202 FFC9                <1>     dec ecx
   112 00000204 75F4                <1>     jnz pdptLoop
   113 00000206 0F20DF              <1>     mov rdi, cr3
   114 00000209 0F22DF              <1>     mov cr3, rdi
   115                              <1> 
   116                              <1> ;------------------------------------------------;
   117                              <1> ;                   MCB inits                    ;
   118                              <1> ;------------------------------------------------;
   119                              <1> mcbInit:
   120 0000020C B820E80000          <1>     mov eax, 0E820h
   121 00000211 CD35                <1>     int 35h
   122                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   123 00000213 E804010000          <1>     call .mcbFindAddress
   124 00000218 7349                <1>     jnc .mcbi1  ;If found, proceed
   125                              <1>     ;Here, we try use E801h
   126 0000021A B801E80000          <1>     mov eax, 0E801h
   127 0000021F CD35                <1>     int 35h
   128 00000221 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   129 00000224 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   130 00000227 85C0                <1>     test eax, eax
   131 00000229 741B                <1>     jz .worst
   132 0000022B C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   133 0000022E C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   134 00000231 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   135 00000239 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   136 00000241 E909010000          <1>     jmp mcbBuild
   137                              <1> .worst:
   138                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   139 00000246 B800002000          <1>     mov eax, 200000h
   140 0000024B 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   140 00000250 [08C00300]          <1>
   141 00000254 29D8                <1>     sub eax, ebx
   142 00000256 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   143 0000025E E9EC000000          <1>     jmp mcbBuild 
   144                              <1> .mcbi1:
   145 00000263 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   146 00000266 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   146 0000026F 00                  <1>
   147 00000270 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   148 00000274 0F85C2000000        <1>     jne .mcbFail
   149 0000027A 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   150                              <1>     ;PCI hole always exists so this value will always be a dword
   151 0000027E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   152 00000286 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   153 00000289 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   154 0000028C 4881FB00000001      <1>     cmp rbx, 1000000h  
   155 00000293 773C                <1>     ja .skipISA
   156                              <1> ;Here we deal with ISA hole issues
   157 00000295 B820E80000          <1>     mov eax, 0E820h
   158 0000029A CD35                <1>     int 35h
   159 0000029C 48B800000001000000- <1>     mov rax, 1000000h
   159 000002A5 00                  <1>
   160 000002A6 E871000000          <1>     call .mcbFindAddress
   161 000002AB 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   162 000002B1 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   162 000002BA 00                  <1>
   163 000002BB 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   164 000002BF 0F858A000000        <1>     jne mcbBuild  
   165 000002C5 488B5808            <1>     mov rbx, qword [rax + 8]
   166 000002C9 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   167                              <1> .skipISA:
   168 000002D1 B820E80000          <1>     mov eax, 0E820h
   169 000002D6 CD35                <1>     int 35h
   170 000002D8 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   170 000002E1 00                  <1>
   171 000002E2 E835000000          <1>     call .mcbFindAddress
   172 000002E7 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   173 000002E9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   173 000002F2 00                  <1>
   174 000002F3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   175 000002F7 7556                <1>     jne mcbBuild   
   176 000002F9 488B5808            <1>     mov rbx, qword [rax + 8]
   177                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   178 000002FD 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   178 00000306 00                  <1>
   179 00000307 4839CB              <1>     cmp rbx, rcx
   180 0000030A 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   181 0000030E 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   181 00000313 [1BC00300]          <1>
   182 00000317 E933000000          <1>     jmp mcbBuild
   183                              <1> .mcbFindAddress:
   184                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   185                              <1> ;Entry: rax = Address of arena to search for
   186                              <1> ;       rsi = Pointer to memory map
   187                              <1> ;       ecx = Number of 24 byte entries
   188                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   189                              <1> ;       CF=CY : value in rax not found
   190 0000031C 56                  <1>     push rsi
   191 0000031D 51                  <1>     push rcx
   192 0000031E 50                  <1>     push rax
   193                              <1> .mfa0:
   194 0000031F 483B06              <1>     cmp rax, qword [rsi]
   195 00000322 7410                <1>     je .mcbAddressFound
   196 00000324 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   197 0000032B FFC9                <1>     dec ecx
   198 0000032D 79F0                <1>     jns .mfa0
   199                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   200 0000032F 58                  <1>     pop rax
   201 00000330 59                  <1>     pop rcx
   202 00000331 5E                  <1>     pop rsi
   203 00000332 F9                  <1>     stc
   204 00000333 C3                  <1>     ret
   205                              <1> .mcbAddressFound:
   206 00000334 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   207 00000337 59                  <1>     pop rcx ;Pop old rax value off
   208 00000338 59                  <1>     pop rcx
   209 00000339 5E                  <1>     pop rsi
   210 0000033A F8                  <1>     clc
   211 0000033B C3                  <1>     ret
   212                              <1> .mcbFail:
   213 0000033C 488D2DA4080000      <1>     lea rbp, mcbFailmsg
   214 00000343 B804130000          <1>     mov eax, 1304h
   215 00000348 CD30                <1>     int 30h
   216 0000034A E971080000          <1>     jmp errorInit
   217                              <1> 
   218                              <1> mcbBuild:
   219                              <1> ;Actually build the MCB chain here
   220                              <1> ;Start by computing the difference between userbase and DOS area
   221                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   222 0000034F 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   222 00000354 [08C00300]          <1>
   223 00000358 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   224 0000035F 56                  <1>     push rsi    ;Save ptr
   225 00000360 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   226 00000367 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   227 0000036A 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   228 00000372 5B                  <1>     pop rbx
   229 00000373 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   230 00000376 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   231 0000037E 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   232 00000386 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   233 00000389 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   234 0000038C 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   234 00000391 [24C00300]          <1>
   235                              <1> 
   236                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   237 00000395 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   237 0000039D 00000000            <1>
   238 000003A1 746E                <1>     jz .skipISA
   239                              <1>     ;Here if an ISA hole exists, place a MCB around it
   240 000003A3 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   241                              <1>     ;Remove one MCB worth of space from alloc
   242 000003AA 31C9                <1>     xor ecx, ecx
   243 000003AC 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   244 000003AF 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   245 000003B5 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   246 000003B8 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   247 000003BB 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   248 000003BE C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   249 000003C1 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   250 000003C9 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   250 000003D2 00                  <1>
   251 000003D3 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   252 000003D6 480510000000        <1>     add rax, mcb_size
   253 000003DC 4829C1              <1>     sub rcx, rax    ;Take their difference
   254 000003DF C1E904              <1>     shr ecx, 4
   255 000003E2 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   256 000003E5 C1E104              <1>     shl ecx, 4  ;Get bytes again
   257 000003E8 4881C310000000      <1>     add rbx, mcb_size
   258 000003EF 4801CB              <1>     add rbx, rcx
   259                              <1>     ;RBX should now be at 16Mb
   260 000003F2 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   261 000003F5 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   262 000003FD 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   263 00000405 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   264 00000408 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   265 0000040E 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   266                              <1> .skipISA:
   267                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   268                              <1>     ;rbx points to a block with "Z" marker
   269 00000411 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   269 00000419 00000000            <1>
   270 0000041D 7470                <1>     jz .exit
   271                              <1>     ;Add PCI hole MCB
   272 0000041F 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   273                              <1>     ;Remove one MCB worth of space from alloc
   274 00000426 31C9                <1>     xor ecx, ecx
   275 00000428 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   276 0000042B 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   277 00000431 C1E104              <1>     shl ecx, 4  ;Get bytes
   278 00000434 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   279 00000437 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   280 0000043A C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   281 0000043D 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   282 00000445 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   282 0000044E 00                  <1>
   283 0000044F 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   284 00000452 480510000000        <1>     add rax, mcb_size
   285 00000458 4829C1              <1>     sub rcx, rax    ;Take their difference
   286 0000045B C1E904              <1>     shr ecx, 4
   287 0000045E 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   288 00000461 C1E104              <1>     shl ecx, 4  ;Get bytes again
   289 00000464 4881C310000000      <1>     add rbx, mcb_size
   290 0000046B 4801CB              <1>     add rbx, rcx
   291                              <1>     ;RBX should now be at 4Gb
   292 0000046E C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   293 00000471 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   294 00000479 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   294 0000047E [1BC00300]          <1>
   295 00000482 48C1E904            <1>     shr rcx, 4
   296 00000486 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   297 0000048C 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   298                              <1> .exit:
   299                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   300 0000048F 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   301                              <1> ;------------------------------------------------;
   302                              <1> ;          Kernel inits and adjustments          ;
   303                              <1> ;------------------------------------------------;
   304                              <1> ;Adjust Interrupt Entries Int 40h-49h
   305                              <1> adjInts:
   306 00000496 B340                <1>     mov bl, 40h
   307 00000498 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   308 0000049D CD35                <1>     int 35h
   309 0000049F B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   310 000004A4 488D3DB1070000      <1>     lea rdi, intData
   311 000004AB 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   312                              <1> .ai0:
   313 000004AD B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   314 000004B2 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   315 000004B5 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   316                              <1> .ai1:
   317 000004B8 CD35                <1>     int 35h
   318 000004BA 4881C708000000      <1>     add rdi, 8
   319 000004C1 FFC1                <1>     inc ecx
   320 000004C3 81F950000000        <1>     cmp ecx, 50h
   321 000004C9 75E2                <1>     jne .ai0
   322                              <1> 
   323                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   324                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   325                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   326                              <1>     %if DEBUG
   327                              <1> debugPopUpMsg:
   328                              <1>     push rbx
   329                              <1>     push rbp
   330                              <1>     push rcx
   331                              <1>     push rdx
   332                              <1>     mov ecx, 53 ;A large number of lines
   333                              <1>     xor edx, edx    ;COM 1
   334                              <1> .cls:
   335                              <1>     mov eax, 010Ah ;Transmit Line feed
   336                              <1>     int 34h
   337                              <1>     dec ecx
   338                              <1>     jnz .cls
   339                              <1>     lea rbx, qword [debPrintNullString + rbp]
   340                              <1>     lea rbp, .msg
   341                              <1>     call rbx
   342                              <1>     jmp short .exit
   343                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   344                              <1> .exit:
   345                              <1>     pop rdx
   346                              <1>     pop rcx
   347                              <1>     pop rbp
   348                              <1>     pop rbx
   349                              <1>     %endif
   350                              <1> 
   351                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   352 000004CB 488D15EE060000      <1>     lea rdx, errorInit ;Get segment start address
   353 000004D2 B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   354 000004D7 CD41                <1>     int 41h
   355 000004D9 488D15E0060000      <1>     lea rdx, errorInit ;Get segment start address
   356 000004E0 B844250000          <1>     mov eax, 2544h
   357 000004E5 CD41                <1>     int 41h
   358                              <1> ;------------------------------------------------;
   359                              <1> ;          Driver Adjustments and inits          ;
   360                              <1> ;------------------------------------------------;
   361                              <1> ;Modify the pointers in nData before putting them in the data area
   362 000004E7 48012DEE070000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   363 000004EE 48012DF1070000      <1>     add qword [nData + drvHdr.strPtr], rbp
   364 000004F5 48012DF2070000      <1>     add qword [nData + drvHdr.intPtr], rbp
   365                              <1> ;Copy the Null driver to its location in Sysvars
   366 000004FC B922000000          <1>     mov ecx, drvHdr_size
   367 00000501 488D35D4070000      <1>     lea rsi, qword [nData]
   368 00000508 488DBD[6CC00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   369 0000050F F3A4                <1>     rep movsb   
   370                              <1> 
   371                              <1> ;Adjust the addresses in the other driver headers 
   372 00000511 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   372 00000513 [B42A000000000000]  <1>
   373 0000051B B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   374 00000520 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   375                              <1> adjDrivers:
   376 00000524 E884060000          <1>     call adjustDrvHdr
   377 00000529 E2F9                <1>     loop adjDrivers
   378                              <1> 
   379                              <1> ;Open NUL
   380                              <1> ;NUL opened
   381                              <1> ;Open CON
   382                              <1> conInit:    ;Rather than keeping this resident... do it here
   383                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   384 0000052B 488D95[9B2D0000]    <1>     lea rdx, qword [rbp + fastOutput]
   385 00000532 B849250000          <1>     mov eax, 2549h
   386 00000537 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   387 00000539 488D95[A32D0000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   388 00000540 B83B250000          <1>     mov eax, 253Bh
   389 00000545 CD41                <1>     int 41h ;Hook int 3Bh
   390                              <1> .ci0:
   391 00000547 B401                <1>     mov ah, 01      ;Get buffer status
   392 00000549 CD36                <1>     int 36h
   393 0000054B 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   394 0000054D 30E4                <1>     xor ah, ah
   395 0000054F CD36                <1>     int 36h ;Read key to flush from buffer
   396 00000551 EBF4                <1>     jmp short .ci0
   397                              <1> .ci1:
   398 00000553 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   399 00000558 CD30                <1>     int 30h
   400 0000055A B402                <1>     mov ah, 02h
   401 0000055C 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   402 0000055E 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   403 00000560 CD30                <1>     int 30h
   404 00000562 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   405 00000564 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   406 00000569 CD30                <1>     int 30h
   407                              <1> 
   408                              <1>     ;Save ptr to ConHdr in Sysvars
   409 0000056B 488D85[B42A0000]    <1>     lea rax, qword [rbp + conHdr]
   410 00000572 6448890425-         <1>     mov qword fs:[vConPtr], rax
   410 00000577 [44C00300]          <1>
   411                              <1> 
   412                              <1>     ;Save ptr to ClkHdr in Sysvars
   413 0000057B 488D85[1A2B0000]    <1>     lea rax, qword [rbp + clkHdr]
   414 00000582 6448890425-         <1>     mov qword fs:[clockPtr], rax
   414 00000587 [3CC00300]          <1>
   415                              <1> 
   416                              <1>     ;Fix the oem ESC function handler address
   417 0000058B 488D85[41130000]    <1>     lea rax, qword [rbp + editKeys]
   418 00000592 6448890425-         <1>     mov qword fs:[oemKeyFunc], rax
   418 00000597 [1A000000]          <1>
   419                              <1> ;------------------------------------------------;
   420                              <1> ;         Link DOS to temporary Buffer           ;
   421                              <1> ;------------------------------------------------;
   422                              <1> tempBufferInit:
   423 0000059B 488DBD[19010000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   424 000005A2 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   424 000005A7 [4EC00300]          <1>
   425 000005AB 31C0                <1>     xor eax, eax
   426 000005AD 48FFC8              <1>     dec rax
   427 000005B0 48AB                <1>     stosq   ;.nextBufPtr, end of list
   428 000005B2 AA                  <1>     stosb   ;.driveNumber, Free entry
   429 000005B3 48FFC0              <1>     inc rax
   430 000005B6 AA                  <1>     stosb   ;.bufferFlags, No flags
   431                              <1> ;------------------------------------------------;
   432                              <1> ;         Init msd driver, create DPB            ;
   433                              <1> ;------------------------------------------------;
   434                              <1> storageInits:
   435                              <1> ;First save dpb pointer in sysvars
   436 000005B7 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   437 000005BE 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   437 000005C3 [2CC00300]          <1>
   438                              <1> ;Open Mass Storage
   439                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   440                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   441                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   442                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   443                              <1>     ;mov al, byte fs:[numPhysVol]
   444                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   445                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   446                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   447                              <1>     ;Check if it returned OK first!
   448                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   449                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   450                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   451                              <1>     ;mov byte fs:[numPhysVol], al
   452                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   453                              <1> 
   454                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   455 000005C7 E832070000          <1>     call diskInit
   456 000005CC 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   457 000005CF 648A0425[68C00300]  <1>     mov al, byte fs:[numPhysVol]
   458 000005D7 488D95[5B340000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   459 000005DE 30C9                <1>     xor cl, cl  ;Clear counter
   460 000005E0 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   460 000005E5 [2CC00300]          <1>
   461                              <1> .si0:   
   462 000005E9 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   463 000005EC B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   464 000005EE CD41                <1>     int 41h
   465                              <1> ;Add other data to DPB
   466 000005F0 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   467 000005F3 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   468 000005F6 50                  <1>     push rax
   469 000005F7 488D87[3C2B0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   470 000005FE 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   471 00000602 58                  <1>     pop rax
   472 00000603 FEC1                <1>     inc cl
   473 00000605 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   474 00000607 7416                <1>     je .si1
   475 00000609 50                  <1>     push rax
   476 0000060A 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   477 0000060E 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   478 00000612 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   479 00000615 58                  <1>     pop rax
   480 00000616 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   481 0000061D EBCA                <1>     jmp short .si0
   482                              <1> .si1:
   483                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   484 0000061F 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   485 00000627 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   486                              <1> ;------------------------------------------------;
   487                              <1> ;          Find largest sector size              ;
   488                              <1> ;------------------------------------------------;
   489                              <1> sectorSizeSearch:
   490                              <1> ;Done by reading BPB's for each drive
   491 0000062A 488D9D[5B340000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   492                              <1>     
   493                              <1>     ;Go thru each block individually
   494 00000631 31C0                <1>     xor eax, eax
   495 00000633 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   496                              <1> .findLargest:
   497 00000636 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   498 0000063A 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   499 0000063F 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   500 00000646 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   501 00000649 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   502 0000064C 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   503 0000064E 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   503 00000653 [4CC00300]          <1>
   504                              <1>     
   505                              <1> ;------------------------------------------------;
   506                              <1> ;                 Temp CDS inits                 ;
   507                              <1> ;------------------------------------------------;
   508                              <1> tempCDS:
   509                              <1> ;Build a temporary CDS for Drive A to use it for booting
   510 00000657 488DBD[94C50300]    <1>     lea rdi, qword [rbp + tmpCDS]  ;Use Temp CDS in the SDA
   511 0000065E 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   511 00000663 [56C00300]          <1>
   512                              <1>     ;"A:\"+NULL char (in rev order because LITTLE ENDIAN!!)
   513 00000667 C707413A5C00        <1>     mov dword [rdi + cds.sCurrentPath], 005C3A41h  
   514 0000066D 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   515 00000673 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   515 00000678 [2CC00300]          <1>
   516 0000067C 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   517 00000680 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   518                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   519                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   520                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   521                              <1>     ;cds.dStartCluster is 0 since we zero-ed the data area earlier
   522                              <1> ;------------------------------------------------;
   523                              <1> ;     Set up general PSP areas and DOS vars      ;
   524                              <1> ;------------------------------------------------;
   525                              <1> ;Additional DOS Vars init
   526                              <1>     ;xor eax, eax
   527                              <1>     ;mov byte fs:[currentDrv], al ;Current Drive = Drive A
   528                              <1>     ;mov byte fs:[breakFlag], al  ;Break off
   529                              <1>     ;mov byte fs:[verifyFlag], al ;Write only
   530                              <1>     ;mov byte fs:[singleDrv], al  ;Only used on single drive systems
   531                              <1>     ;mov byte fs:[critErrFlag], al   ;Not in critical error
   532                              <1>     ;mov byte fs:[inDOS], al      ;Not in DOS
   533 00000686 64C60425[65C30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   533 0000068E FF                  <1>
   534                              <1>     ;mov word fs:[errorLevel], ax   ;Last return code is 0, no error
   535                              <1>     ;mov byte fs:[allocStrat], al    ;First Fit
   536 0000068F 64C60425[2DC30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   536 00000697 2F                  <1>
   537                              <1>     ;mov byte fs:[vConUnread], al   ;vCon has no unread data!
   538                              <1> 
   539                              <1> ;Set network machine name to... nothing!
   540 00000698 488DBD[32C30300]    <1>     lea rdi, qword [rbp + machineName]
   541 0000069F B910000000          <1>     mov ecx, 10h    ;16 chars long
   542 000006A4 B020                <1>     mov al, SPC ;Space char
   543 000006A6 F3AA                <1>     rep stosb   ;Fill with space chars
   544                              <1>     ;xor al, al
   545                              <1>     ;mov byte fs:[serverCnt], al ;Set server call count to zero
   546                              <1>     ;mov word fs:[machineNum], ax   ;Clear machine number
   547                              <1> 
   548                              <1> ;Patch Data Table init
   549 000006A8 488DBD[42C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   550 000006AF 488D85[8D240000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   551 000006B6 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   552 000006B8 488D85[97240000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   553 000006BF 48AB                <1>     stosq
   554 000006C1 488D85[A1240000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   555 000006C8 48AB                <1>     stosq
   556 000006CA 488D85[AB240000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   557 000006D1 48AB                <1>     stosq
   558                              <1> 
   559                              <1> ;Initial PSP Init
   560 000006D3 488D1D26F9FFFF      <1>     lea rbx, qword [tempPSP]
   561 000006DA 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   561 000006DF [7BC30300]          <1>
   562 000006E3 53                  <1>     push rbx
   563 000006E4 4881C380000000      <1>     add rbx, psp.dta
   564 000006EB 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   564 000006F0 [73C30300]          <1>
   565 000006F4 5B                  <1>     pop rbx
   566 000006F5 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   567 000006FA C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   568 00000701 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   569 00000705 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   570 00000709 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   571 0000070D 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   572 00000711 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   572 0000071A FF                  <1>
   573 0000071B 48AB                <1>     stosq   ;8 bytes
   574 0000071D 31C0                <1>     xor eax, eax
   575 0000071F 50                  <1>     push rax    ;Save 0 on the stack
   576 00000720 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   577 00000723 48AB                <1>     stosq   ;16 bytes
   578 00000725 AB                  <1>     stosd   ;20 bytes
   579 00000726 58                  <1>     pop rax ;Get 0 back
   580 00000727 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   581 0000072F 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   582 00000733 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   583 00000737 4889DA              <1>     mov rdx, rbx
   584 0000073A B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   585 0000073F CD41                <1>     int 41h
   586 00000741 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   587 00000745 B843350000          <1>     mov eax, 3543h
   588 0000074A CD41                <1>     int 41h
   589 0000074C 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   590 00000750 B844350000          <1>     mov eax, 3544h
   591 00000755 CD41                <1>     int 41h
   592 00000757 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   593                              <1> 
   594 0000075B B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   595 00000760 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   596 00000764 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   597                              <1> ;------------------------------------------------;
   598                              <1> ;          Default File Handle Creation          ;
   599                              <1> ;                                                ;
   600                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   601                              <1> ;------------------------------------------------;
   602                              <1> defaultFileHandles:
   603                              <1> ;Fill in the default file table entries
   604 00000766 488D9D[93C00300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   605 0000076D 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   606 00000774 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   607 0000077A 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   607 0000077F [34C00300]          <1>
   608 00000783 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   608 0000078C 20                  <1>
   609                              <1> ;GOTO FIRST FILE 
   610 0000078D 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   611                              <1> ;Write AUX
   612 00000794 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   613 00000799 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   614 0000079F C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   615 000007A3 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   616                              <1>     ;No EOF when reading from the device
   617 000007A7 488B85[D62A0000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   618 000007AE 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   619                              <1>     ;Ignore disk related fields and Date/Time of open
   620 000007B2 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   621                              <1>     ;11 chars in 8.3 name
   622 000007B6 488D3579040000      <1>     lea rsi, auxName
   623 000007BD B903000000          <1>     mov ecx, 3
   624 000007C2 F3A4                <1>     rep movsb   ;Move the three bytes
   625 000007C4 4889D0              <1>     mov rax, rdx
   626 000007C7 48AB                <1>     stosq   ;Eight spaces left to print
   627 000007C9 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   627 000007CE [7BC30300]          <1>
   628 000007D2 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   629                              <1> ;GOTO NEXT ENTRY
   630 000007D6 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   631                              <1>     ;Write CON
   632 000007DD 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   633 000007E2 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   634 000007E8 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   635 000007EC C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   636                              <1>     ;No EOF when reading from the device
   637 000007F0 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   637 000007F5 [44C00300]          <1>
   638 000007F9 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   639                              <1>     ;Ignore disk related fields and Date/Time of open
   640 000007FD 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   641                              <1>     ;11 chars in 8.3 name
   642 00000801 488D352A040000      <1>     lea rsi, conName
   643 00000808 B903000000          <1>     mov ecx, 3
   644 0000080D F3A4                <1>     rep movsb   ;Move the three bytes
   645 0000080F 4889D0              <1>     mov rax, rdx
   646 00000812 48AB                <1>     stosq   ;Eight spaces left to print
   647 00000814 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   647 00000819 [7BC30300]          <1>
   648 0000081D 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   649                              <1> ;GOTO NEXT ENTRY
   650 00000821 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   651                              <1> ;Write PRN
   652 00000828 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   653 0000082D 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   654 00000833 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   655 00000837 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   656                              <1>     ;Want EOF when reading from to the device
   657 0000083B 488B85[F82A0000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   658 00000842 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   659                              <1>     ;Ignore disk related fields and Date/Time of open
   660 00000846 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   661                              <1>     ;11 chars in 8.3 name
   662 0000084A 488D35E9030000      <1>     lea rsi, prnName
   663 00000851 B903000000          <1>     mov ecx, 3
   664 00000856 F3A4                <1>     rep movsb   ;Move the three bytes
   665 00000858 4889D0              <1>     mov rax, rdx
   666 0000085B 48AB                <1>     stosq   ;Eight spaces left to print
   667 0000085D 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   667 00000862 [7BC30300]          <1>
   668 00000866 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   669                              <1> ;Zero word 0 of entry 4 and 5
   670 0000086A 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   671 00000871 31C0                <1>     xor eax, eax
   672                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   673                              <1>     ; which is ok as these are empty entries, ready to be used)
   674 00000873 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   675 00000875 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   676 0000087C 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   677                              <1> ;------------------------------------------------;
   678                              <1> ;               Load CONFIG.SYS                  ;
   679                              <1> ;------------------------------------------------;
   680                              <1> ;------------------------------------------------;
   681                              <1> ;              Process CONFIG.SYS                ;
   682                              <1> ;------------------------------------------------;
   683                              <1> ;------------------------------------------------;
   684                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   685                              <1> ;------------------------------------------------;
   686                              <1> ;------------------------------------------------;
   687                              <1> ;   Setup Final Data Areas With Overrides from   ;
   688                              <1> ;                  CONFIG.SYS                    ;
   689                              <1> ;------------------------------------------------;
   690                              <1> ;------------------------------------------------;
   691                              <1> ;           Load Command interpreter             ;
   692                              <1> ;------------------------------------------------;
   693 0000087E 488D154C030000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   694 00000885 B409                <1>     mov ah, 09h
   695 00000887 CD41                <1>     int 41h
   696                              <1> ;Resize DOS allocation before loading COMMAND.COM
   697 00000889 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   697 0000088E [24C00300]          <1>
   698 00000892 4981C010000000      <1>     add r8, mcb.program
   699 00000899 BB39110000          <1>     mov ebx, dynamicDataAreaLength
   700 0000089E C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   701 000008A1 FFC3                <1>     inc ebx
   702 000008A3 B44A                <1>     mov ah, 4Ah
   703 000008A5 CD41                <1>     int 41h
   704                              <1>     
   705                              <1>     %if DEBUG && ALLOCTEST
   706                              <1> ;Test Allocation, Growth and Deallocation
   707                              <1>     mov r15, qword fs:[currentPSP]
   708                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   709                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   710                              <1>     mov ah, 48h ;Allocate
   711                              <1>     int 41h
   712                              <1> 
   713                              <1>     mov r8, rax ;Move the pointer to r8
   714                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   715                              <1>     mov ah, 4Ah
   716                              <1>     int 41h
   717                              <1> 
   718                              <1>     mov ah, 49h ;Free r8
   719                              <1>     int 41h
   720                              <1>     mov qword fs:[currentPSP], r15
   721                              <1>     %endif
   722                              <1> 
   723                              <1>     %if ENDSTATUS
   724                              <1> debugFinal:
   725                              <1>     ;Print system state
   726 000008A7 55                  <1>     push rbp    ;Only rbp really matters here
   727 000008A8 4989E8              <1>     mov r8, rbp
   728                              <1> 
   729 000008AB 488D2DD0020000      <1>     lea rbp, .msg2
   730 000008B2 4D8D88[11020000]    <1>     lea r9, qword [r8 + debPrintNullString]
   731 000008B9 41FFD1              <1>     call r9
   732                              <1> 
   733 000008BC 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   734 000008C3 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   734 000008C8 [08C00300]          <1>
   735                              <1> 
   736 000008CC 4D8D88[4C050000]    <1>     lea r9, qword [r8 + overlayQword]
   737 000008D3 41FFD1              <1>     call r9
   738                              <1> 
   739 000008D6 4881C31B000000      <1>     add rbx, 19+8
   740 000008DD 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   740 000008E2 [00C00300]          <1>
   741 000008E6 41FFD1              <1>     call r9
   742                              <1> 
   743 000008E9 4881C31B000000      <1>     add rbx, 19+8
   744 000008F0 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   744 000008F5 [24C00300]          <1>
   745 000008F9 41FFD1              <1>     call r9
   746                              <1> 
   747 000008FC 4881C31C000000      <1>     add rbx, 20+8
   748 00000903 4D8D88[09050000]    <1>     lea r9, qword [r8 + overlayDword]
   749 0000090A 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   750 00000912 41FFD1              <1>     call r9
   751                              <1> 
   752 00000915 4881C312000000      <1>     add rbx, 10+8
   753 0000091C 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   754 00000924 41FFD1              <1>     call r9
   755                              <1> 
   756 00000927 4881C312000000      <1>     add rbx, 10+8
   757 0000092E 64488B0425-         <1>     mov rax, qword fs:[longMem]
   757 00000933 [1BC00300]          <1>
   758 00000937 4D8D88[4C050000]    <1>     lea r9, qword [r8 + overlayQword]
   759 0000093E 41FFD1              <1>     call r9
   760                              <1> 
   761 00000941 4881C31B000000      <1>     add rbx, 19+8
   762 00000948 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   762 0000094D [2CC00300]          <1>
   763 00000951 41FFD1              <1>     call r9
   764                              <1> 
   765 00000954 4881C31B000000      <1>     add rbx, 19+8
   766 0000095B 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   766 00000960 [34C00300]          <1>
   767 00000964 41FFD1              <1>     call r9
   768                              <1> 
   769 00000967 4881C31B000000      <1>     add rbx, 19+8
   770 0000096E 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   770 00000973 [4EC00300]          <1>
   771 00000977 41FFD1              <1>     call r9
   772                              <1> 
   773 0000097A 4881C31B000000      <1>     add rbx, 19+8
   774 00000981 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   774 00000986 [56C00300]          <1>
   775 0000098A 41FFD1              <1>     call r9
   776                              <1> 
   777 0000098D 4D8D88[97040000]    <1>     lea r9, qword [r8 + overlayByte]
   778                              <1> 
   779 00000994 4881C32C000000      <1>     add rbx, 25+19
   780 0000099B 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
   780 000009A1 [68C00300]          <1>
   781 000009A5 41FFD1              <1>     call r9
   782                              <1> 
   783 000009A8 4881C31E000000      <1>     add rbx, 30
   784 000009AF 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   784 000009B5 [12C00300]          <1>
   785 000009B9 41FFD1              <1>     call r9
   786                              <1> 
   787 000009BC 4881C31E000000      <1>     add rbx, 30
   788 000009C3 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   788 000009C9 [11C00300]          <1>
   789 000009CD 41FFD1              <1>     call r9
   790                              <1> 
   791 000009D0 4881C310000000      <1>     add rbx, 16
   792 000009D7 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   792 000009DD [10C00300]          <1>
   793 000009E1 0441                <1>     add al, "A"
   794 000009E3 8803                <1>     mov byte [rbx], al
   795                              <1> 
   796 000009E5 488D2D10000000      <1>     lea rbp, .msg
   797 000009EC 4D8D88[11020000]    <1>     lea r9, qword [r8 + debPrintNullString]
   798 000009F3 41FFD1              <1>     call r9
   799 000009F6 5D                  <1>     pop rbp
   800 000009F7 E99E010000          <1>     jmp l1
   801 000009FC 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   801 00000A05 206261736520464646- <1>
   801 00000A0E 464646464646464646- <1>
   801 00000A17 46464646680A0D      <1>
   802 00000A1E 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   802 00000A27 464646464646464646- <1>
   802 00000A30 464646464646680A0D  <1>
   803 00000A39 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   803 00000A42 464646464646464646- <1>
   803 00000A4B 46464646464668200A- <1>
   803 00000A54 0D                  <1>
   804 00000A55 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   804 00000A5E 464646464646466820  <1>
   805 00000A67 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   805 00000A70 464646464646466820  <1>
   806 00000A79 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   806 00000A82 464646464646464646- <1>
   806 00000A8B 464646464646680A0D  <1>
   807 00000A94 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   807 00000A9D 464646464646464646- <1>
   807 00000AA6 464646464646680A0D  <1>
   808 00000AAF 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   808 00000AB8 464646464646464646- <1>
   808 00000AC1 464646464646680A0D  <1>
   809 00000ACA 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   809 00000AD3 464646464646464646- <1>
   809 00000ADC 464646464646680A0D  <1>
   810 00000AE5 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   810 00000AEE 464646464646464646- <1>
   810 00000AF7 464646464646680A0D  <1>
   811 00000B00 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   811 00000B09 204C6F676963616C20- <1>
   811 00000B12 447269766573204646- <1>
   811 00000B1B 680A0D              <1>
   812 00000B1E 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   812 00000B27 204669786564204472- <1>
   812 00000B30 697665732020204646- <1>
   812 00000B39 680A0D              <1>
   813 00000B3C 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   813 00000B45 2052656D6F7661626C- <1>
   813 00000B4E 652044727673204646- <1>
   813 00000B57 680A0D              <1>
   814 00000B5A 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   814 00000B63 65205A3A0A0D        <1>
   815 00000B69 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   815 00000B72 4F4D4D414E442E434F- <1>
   815 00000B7B 4D2E2E2E0A0D00      <1>
   816 00000B82 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   816 00000B8B 626F6F742073756D6D- <1>
   816 00000B94 6172790A0D00        <1>
   817                              <1>     %endif
   818                              <1> l1:
   819 00000B9A 488D15E1020000      <1>     lea rdx, tmpBuffer
   820 00000BA1 B40A                <1>     mov ah, 0Ah  ;Buffered input
   821 00000BA3 CD41                <1>     int 41h
   822 00000BA5 B402                <1>     mov ah, 02h
   823 00000BA7 B20A                <1>     mov dl, 0Ah
   824 00000BA9 CD41                <1>     int 41h
   825 00000BAB EBED                <1>     jmp short l1
   826                              <1> ;l2:
   827                              <1> ;    mov ah, 07h
   828                              <1> ;    int 41h
   829                              <1> ;    cmp al, 42h
   830                              <1> ;    jne l1
   831                              <1> ;l3:
   832                              <1> ;    mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   833                              <1> ;    lea rbx, qword [rbp + secdReqHdr] ;Get the address of this request block
   834                              <1> ;    lea rax, qword [rbp + CLOCKrecrd]
   835                              <1> ;    mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   836                              <1> ;    mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   837                              <1> ;    mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   838                              <1> ;    mov qword [rbx + ioReqPkt.bufptr], rax
   839                              <1> ;    mov dword [rbx + ioReqPkt.tfrlen], 06
   840                              <1> ;    call qword [rbp + clkHdr + drvHdr.strPtr]
   841                              <1> ;    call qword [rbp + clkHdr + drvHdr.intPtr] 
   842                              <1> 
   843                              <1> ;    mov ah, 03h
   844                              <1> ;    xor bh, bh
   845                              <1> ;    int 30h
   846                              <1> ;    xor dl, dl  ;0 column
   847                              <1> ;    mov ah, 02h
   848                              <1> ;    int 30h
   849                              <1> 
   850                              <1> ;    lea rbx, qword [rbp + CLOCKrecrd]
   851                              <1> ;    movzx eax, byte [rbx + clkStruc.hours]
   852                              <1> ;    call .clkHexToBCD
   853                              <1> ;    mov ah, 0Eh
   854                              <1> ;    mov al, ":"
   855                              <1> ;    int 30h
   856                              <1> ;    movzx eax, byte [rbx + clkStruc.minutes]
   857                              <1> ;    call .clkHexToBCD
   858                              <1> ;    mov ah, 0Eh
   859                              <1> ;    mov al, ":"
   860                              <1> ;    int 30h
   861                              <1> ;    movzx eax, byte [rbx + clkStruc.seconds]
   862                              <1> ;    call .clkHexToBCD
   863                              <1> ;    mov ah, 0Eh
   864                              <1> ;    mov al, "."
   865                              <1> ;    int 30h
   866                              <1> ;    movzx eax, byte [rbx + clkStruc.hseconds]
   867                              <1> ;    call .clkHexToBCD
   868                              <1> ;    jmp l1
   869                              <1> ;.clkHexToBCD:
   870                              <1> ;Converts a Hex byte into two BCD digits
   871                              <1> ;Takes input in each nybble of al
   872                              <1> ;    push rbx
   873                              <1> ;    mov rbx, 0Ah  ;Divide by 10
   874                              <1> ;    xor edx, edx
   875                              <1> ;    div rbx
   876                              <1> ;    add dl, '0'
   877                              <1> ;    cmp dl, '9'
   878                              <1> ;    jbe .chtb0
   879                              <1> ;    add dl, 'A'-'0'-10
   880                              <1> ;.chtb0:
   881                              <1> ;    mov cl, dl    ;Save remainder byte
   882                              <1> ;    xor edx, edx
   883                              <1> ;    div rbx
   884                              <1> ;    add dl, '0'
   885                              <1> ;    cmp dl, '9'
   886                              <1> ;    jbe .chtb1
   887                              <1> ;    add dl, 'A'-'0'-10
   888                              <1> ;.chtb1:
   889                              <1> ;    mov ch, dl    ;Save remainder byte
   890                              <1> ;    mov al, ch    ;Get most sig digit into al
   891                              <1> ;    mov ah, 0Eh
   892                              <1> ;    int 30h
   893                              <1> ;    mov al, cl    ;Get least sig digit into al
   894                              <1> ;    mov ah, 0Eh
   895                              <1> ;    int 30h
   896                              <1> ;    pop rbx
   897                              <1> ;    ret
   898                              <1> ;--------------------------------
   899                              <1> ;       PROCS FOR SYSINIT       :
   900                              <1> ;--------------------------------
   901                              <1> adjustDrvHdr:
   902                              <1> ;Input: rsi = Effective address of driver in DOS segment
   903                              <1> ;       rbp = Ptr to the start of the DOS segment
   904                              <1> ;Output: rsi = EA of next header in DOS segment
   905 00000BAD 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   906 00000BB0 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   907 00000BB4 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   908 00000BB8 4881C622000000      <1>     add rsi, drvHdr_size
   909 00000BBF C3                  <1>     ret
   910                              <1> errorInit:
   911                              <1> ;If a critical error occurs during sysinit, fail through here
   912                              <1> ;Int 42h, 43h and 44h point here during sysinit
   913 00000BC0 488D2D3A000000      <1>     lea rbp, hltmsg
   914 00000BC7 B804130000          <1>     mov eax, 1304h
   915 00000BCC CD30                <1>     int 30h
   916                              <1>     ;cli ;Clear interrupts
   917                              <1>     ;mov al, -1
   918                              <1>     ;mov dx, 0A1h    ;PIC2 data
   919                              <1>     ;out dx, al      ;Mask all lines
   920                              <1>     ;mov dx, 21h     ;PIC1 data
   921                              <1>     ;out dx, al      ;Mask all lines
   922                              <1> .ei0:
   923 00000BCE F4                  <1>     hlt
   924 00000BCF EBFD                <1>     jmp short .ei0
   925                              <1> ;--------------------------------
   926                              <1> ;       DATA FOR SYSINIT        :
   927                              <1> ;--------------------------------
   928 00000BD1 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   928 00000BDA 5343502F444F532E2E- <1>
   928 00000BE3 2E0A0D24            <1>
   929 00000BE7 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   929 00000BF0 6C6F636174696F6E20- <1>
   929 00000BF9 4572726F720A0D00    <1>
   930 00000C01 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   930 00000C0A 7469616C6973696E67- <1>
   930 00000C13 20534350444F532E53- <1>
   930 00000C1C 59532E205379737465- <1>
   930 00000C25 6D2068616C74696E67- <1>
   930 00000C2E 2E2E2E00            <1>
   931 00000C32 434F4E00            <1> conName db "CON",0
   932 00000C36 41555800            <1> auxName db "AUX",0
   933 00000C3A 50524E00            <1> prnName db "PRN",0
   934                              <1> 
   935 00000C3E 003A5C4155544F4558- <1> aexec   db 0,":\AUTOEXEC.BAT",0 ;ASCIIZ for AUTOEXEC (with space for drvletter)
   935 00000C47 45432E42415400      <1>
   936 00000C4E 003A5C434F4E464947- <1> cfgspec db 0,":\CONFIG.SYS",0 ;ASCIIZ for CONFIG (with space for drive letter)
   936 00000C57 2E53595300          <1>
   937                              <1> 
   938                              <1> intData:
   939 00000C5C [431D000000000000]  <1>     dq terminateProcess ;Int 40h
   940 00000C64 [0523000000000000]  <1>     dq functionDispatch ;Int 41h
   941 00000C6C [C00B000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   942 00000C74 [5D24000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
   943 00000C7C [4B1E000000000000]  <1>     dq dosDefCritErrHdlr 
   944 00000C84 [1B1F000000000000]  <1>     dq absDiskRead      ;Int 45h
   945 00000C8C [FC1E000000000000]  <1>     dq absDiskWrite     ;Int 46h
   946 00000C94 [451D000000000000]  <1>     dq terminateRes     ;Int 47h
   947 00000C9C [5D24000000000000]  <1>     dq defaultIretq     ;Int 48h
   948 00000CA4 [5D24000000000000]  <1>     dq defaultIretq     ;Int 49h
   949 00000CAC [5D24000000000000]  <1>     dq defaultIretq     ;Int 4Ah
   950 00000CB4 [5D24000000000000]  <1>     dq defaultIretq     ;Int 4Bh
   951 00000CBC [5D24000000000000]  <1>     dq defaultIretq     ;Int 4Ch
   952 00000CC4 [5D24000000000000]  <1>     dq defaultIretq     ;Int 4Dh
   953 00000CCC [5D24000000000000]  <1>     dq defaultIretq     ;Int 4Eh
   954 00000CD4 [FD27000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
   955                              <1> nData:
   956 00000CDC [B42A000000000000]  <1>     dq conHdr
   957 00000CE4 0480                <1>     dw 08004h
   958 00000CE6 [5C2C000000000000]  <1>     dq nulStrat
   959 00000CEE [622C000000000000]  <1>     dq nulIntr
   960 00000CF6 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   961                              <1> 
   962                              <1> diskInit:
   963                              <1>     ;We create a function to deal with BPB parsing etc
   964                              <1>     ;Start with the first primary partition on each hard disk (until max)
   965                              <1>     ;   They dont have to be bootable
   966                              <1>     ;Then go back and look for other partitions partitions. 
   967                              <1>     ;   Add each other primary or logical ptn (until max)
   968                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   969                              <1>     ;Use r8 as device counter
   970 00000CFE 488DBD[83340000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
   971 00000D05 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
   971 00000D0D 00                  <1>
   972 00000D0E 0F84C6000000        <1>     jz .remInit ;No? Go to removables
   973 00000D14 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   973 00000D1D 00                  <1>
   974 00000D1E B280                <1>     mov dl, 80h ;Start with HDD 0
   975                              <1> .primary:
   976 00000D20 64803C25[68C00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
   976 00000D28 03                  <1>
   977 00000D29 0F84AB000000        <1>     je .remInit
   978 00000D2F 31C9                <1>     xor ecx, ecx    ;Sector 0
   979 00000D31 E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   980 00000D36 0F8289000000        <1>     jc .primaryEpilog
   981                              <1>     ;Here, check MBR or BPB
   982 00000D3C 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   983 00000D45 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   984                              <1>     ;Now check if BPB or MBR
   985 00000D47 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   986 00000D49 8A6302              <1>     mov ah, byte [rbx + 2]
   987 00000D4C 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   988 00000D50 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   989                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   990                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   991 00000D52 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   992 00000D59 B104                <1>     mov cl, 4
   993                              <1> .checkPrimary:
   994 00000D5B 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   995 00000D5E 3C01                <1>     cmp al, 01
   996 00000D60 7421                <1>     je .primaryFound
   997 00000D62 3C04                <1>     cmp al, 04
   998 00000D64 741D                <1>     je .primaryFound
   999 00000D66 3C06                <1>     cmp al, 06
  1000 00000D68 7419                <1>     je .primaryFound
  1001 00000D6A 3C0B                <1>     cmp al, 0Bh
  1002 00000D6C 7415                <1>     je .primaryFound
  1003 00000D6E 3C0C                <1>     cmp al, 0Ch
  1004 00000D70 7411                <1>     je .primaryFound
  1005 00000D72 3C0E                <1>     cmp al, 0Eh
  1006 00000D74 740D                <1>     je .primaryFound
  1007 00000D76 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1008 00000D7D FEC9                <1>     dec cl
  1009 00000D7F 7444                <1>     jz .primaryEpilog
  1010 00000D81 EBD8                <1>     jmp short .checkPrimary
  1011                              <1> .primaryFound:
  1012                              <1>     ;Copy the first sector of this partition into memory
  1013 00000D83 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1014 00000D86 E8E9000000          <1>     call .initReadSector
  1015 00000D8B 7238                <1>     jc .primaryEpilog
  1016                              <1>     ;Now verify this is a BPB
  1017 00000D8D 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1018 00000D8F 8A6302              <1>     mov ah, byte [rbx + 2]
  1019 00000D92 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1020 00000D96 752D                <1>     jne .primaryEpilog   ;If not, skip
  1021                              <1>     ;Now copy data to internal tables
  1022 00000D98 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1023 00000D9B B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1024 00000DA0 57                  <1>     push rdi
  1025 00000DA1 F348A5              <1>     rep movsq   ;Copy the BPB
  1026 00000DA4 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1027                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1028 00000DA5 4A8D9C05[51340000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1029                              <1>     ;Add device count to rbx to point to correct entry
  1030 00000DAD 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1031 00000DAF 4A8D9CC5[5B340000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1032 00000DB7 488933              <1>     mov qword [rbx], rsi
  1033 00000DBA 49FFC0              <1>     inc r8  ;Goto next logical drive
  1034 00000DBD 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1035                              <1> .primaryEpilog:
  1036 00000DC5 FEC2                <1>     inc dl  ;Goto next BIOS drive
  1037 00000DC7 88D6                <1>     mov dh, dl
  1038 00000DC9 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1039 00000DCC 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1040 00000DD4 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1041                              <1> .extended:
  1042                              <1> ;We have gone through all the devices once
  1043                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1044                              <1>     ;je .remInit ;If yes, get removable devices
  1045                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1046                              <1>     ;xor ecx, ecx    ;Get MBR back
  1047                              <1>     ;call .initReadSector
  1048                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1049                              <1> .remInit:
  1050                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1051 00000DDA 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1052 00000DDD 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1053 00000DDF 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1054                              <1>     ;rdi points to the space for the subsequent bpb's
  1055                              <1> .removables:
  1056 00000DE2 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1057 00000DE4 E88B000000          <1>     call .initReadSector
  1058 00000DE9 7238                <1>     jc .removableEpilogue   ;Goto next device
  1059                              <1>     ;Now verify this is a BPB
  1060 00000DEB 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1061 00000DED 8A6302              <1>     mov ah, byte [rbx + 2]
  1062 00000DF0 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1063 00000DF4 752D                <1>     jne .removableEpilogue   ;If not, skip
  1064                              <1>     ;Now copy data to internal tables
  1065 00000DF6 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1066 00000DF9 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1067 00000DFE 57                  <1>     push rdi
  1068 00000DFF F348A5              <1>     rep movsq   ;Copy the BPB
  1069 00000E02 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1070                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1071 00000E03 4A8D9C05[51340000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1072                              <1>     ;Add device count to rbx to point to correct entry
  1073 00000E0B 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1074 00000E0D 4A8D9CC5[5B340000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1075 00000E15 488933              <1>     mov qword [rbx], rsi
  1076 00000E18 49FFC0              <1>     inc r8  ;Goto next logical drive
  1077 00000E1B 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1078                              <1> .removableEpilogue:
  1079 00000E23 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1080 00000E25 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1081 00000E2D 7412                <1>     je .end
  1082 00000E2F 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1083 00000E36 7403                <1>     je .re0
  1084 00000E38 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1085                              <1> .re0:
  1086 00000E3B 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1087 00000E3F 72A1                <1>     jb .removables
  1088                              <1> .end:
  1089 00000E41 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1089 00000E49 01                  <1>
  1090 00000E4A 7401                <1>     je .singleRemDev
  1091 00000E4C C3                  <1>     ret
  1092                              <1> .singleRemDev:
  1093                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1094 00000E4D 488D9D[51340000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1095 00000E54 8A95[51340000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1096 00000E5A 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1097 00000E5D 488D9D[5B340000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1098 00000E64 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1099 00000E67 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1100 00000E6B 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1101 00000E73 C3                  <1>     ret
  1102                              <1> .initReadSector:
  1103                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1104 00000E74 B482                <1>     mov ah, 82h ;Read
  1105 00000E76 B001                <1>     mov al, 1   ;One sector
  1106 00000E78 488D9D[39010000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1107 00000E7F CD33                <1>     int 33h
  1108 00000E81 C3                  <1>     ret
  1109 00000E82 800000000000000000- <1> tmpBuffer db 80h, 00h, (80h-2) dup (00)
  1109 00000E8B 000000000000000000- <1>
  1109 00000E94 000000000000000000- <1>
  1109 00000E9D 000000000000000000- <1>
  1109 00000EA6 000000000000000000- <1>
  1109 00000EAF 000000000000000000- <1>
  1109 00000EB8 000000000000000000- <1>
  1109 00000EC1 000000000000000000- <1>
  1109 00000ECA 000000000000000000- <1>
  1109 00000ED3 000000000000000000- <1>
  1109 00000EDC 000000000000000000- <1>
  1109 00000EE5 000000000000000000- <1>
  1109 00000EEE 000000000000000000- <1>
  1109 00000EF7 000000000000000000- <1>
  1109 00000F00 0000                <1>
    14                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    15                                  %include "./Source/BSS/dosSeg.asm"
    16                              <1> ;This file contains the main DOS data segment
    17                              <1> dosAPT: ;Additional Page tables
    18 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    19                              <1> dosDataArea:
    20 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    21 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    22 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    23 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    24 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    25 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    26 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    27 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    28                              <1> ;Above is the system stats
    29                              <1> ;Below is the DOS vars
    30 0003C023 ??                  <1>     vConOutOff  resb 1    ;Offset in output buffer to the next char to output
    31                              <1>     ;   A value of 0 means no chars buffered.
    32 0003C024 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    33                              <1> sysVarsPtr:
    34 0003C02C ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    35 0003C034 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    36 0003C03C ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    37                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    38 0003C044 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    39                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    40 0003C04C ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    41 0003C04E ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    42 0003C056 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    43 0003C05E ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    44 0003C066 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    45                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    46 0003C068 ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    47 0003C069 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    48 0003C06A ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    49 0003C06B ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    50 0003C06C <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    51                              <1> ;Additional internal variables
    52                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    53 0003C08E ??                  <1>     singleDrv   resb 1    ;Set if last drive accessed was drive B x
    54 0003C08F ????                <1>     numFiles    resw 1    ;FILES=5 default
    55 0003C091 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    56                              <1> ;Create SFT header and corresponding array of five default sft entries
    57 0003C093 <res Ah>            <1>     firstSftHeader  resb sfth_size
    58 0003C09D <res 4Fh>           <1>     firstSft    resb sft_size
    59 0003C0EC <res 4Fh>           <1>     secondSft   resb sft_size
    60 0003C13B <res 4Fh>           <1>     thirdSft    resb sft_size
    61 0003C18A <res 4Fh>           <1>     fourthSft   resb sft_size
    62 0003C1D9 <res 4Fh>           <1>     fifthSft    resb sft_size
    63                              <1> 
    64                              <1> ;Virtual CONsole Buffers
    65 0003C228 ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
    66                              <1>     ;Only incremented when CON device runs vCon
    67                              <1> vConBuf:    ;Proper buffer symbol
    68 0003C229 ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
    69 0003C22A <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
    70                              <1>     ;Only 128 if also taking input and outputting simultaneously
    71 0003C2AA <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
    72 0003C32A ??                  <1>     bufpad      resb 1     ;Used to pad with LF
    73                              <1> 
    74 0003C32B ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
    75 0003C32C ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    76 0003C32D ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
    77 0003C32E ??                  <1>     vConErr     resb 1  ;Inc on each char output call
    78                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
    79                              <1> 
    80 0003C32F ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    81                              <1> ;Server stuff. Default to all zeros (blank)
    82 0003C330 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
    83 0003C331 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
    84 0003C332 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
    85                              <1> ;Swappable Data Area
    86 0003C342 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    87 0003C362 ??                  <1>                 resb 1  ;Alignment byte
    88                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    89 0003C363 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    90 0003C364 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    91 0003C365 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    92 0003C366 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    93 0003C367 ????                <1>     errorExCde  resw 1  ;Extended Error Code
    94 0003C369 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    95 0003C36A ??                  <1>     errorClass  resb 1  ;Error Class
    96 0003C36B ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
    97 0003C373 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    98 0003C37B ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
    99                              <1> 
   100 0003C383 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   101 0003C38B ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   102 0003C38D ??                  <1>     currentDrv  resb 1  ;Default drive x
   103 0003C38E ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   104                              <1> ;SDA, needs to be replaced between processes
   105                              <1> sdaMainSwap:
   106 0003C38F ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   107 0003C397 ????????????????    <1>     sharePSP    resq 1  ;PSP of the share program
   108 0003C39F ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   109 0003C3A1 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   110 0003C3A9 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   111 0003C3B1 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   112                              <1> 
   113 0003C3B9 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   114 0003C3C1 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   115 0003C3C2 ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   116                              <1> 
   117 0003C3C3 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   118 0003C3CB ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   119 0003C3D3 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   120 0003C3DB ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   121 0003C3E3 ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   122                              <1> ;The below flag tells DOS to print ^C in the termination function
   123 0003C3E4 ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   124                              <1> 
   125                              <1> ;Time stuff
   126 0003C3E5 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   127 0003C3E6 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   128 0003C3E7 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
   129 0003C3E8 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   130 0003C3EA ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   131                              <1> 
   132 0003C3EB ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   133 0003C3EC ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   134 0003C3ED ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   135                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   136                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   137                              <1> ; without forcing to re-build the whole primary request block.
   138                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   139                              <1> ; with secondary char output going through the secondary header
   140                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   141                              <1> ; for output)
   142                              <1> ;ioReqPkt is the largest possible packet
   143 0003C3EE <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   144 0003C418 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   145 0003C442 <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   146                              <1> 
   147                              <1> ;Swappable Buffers
   148 0003C46C <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   149 0003C4EC <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   150 0003C56C ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   151                              <1>     ;We add an additional byte to save ah too
   152 0003C572 ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   153                              <1> ;Misc bookkeeping flags and vars
   154                              <1>     ;secClusConv resb 1  ;For networking, do we convert sector to cluster?
   155 0003C574 ??                  <1>     rwFlag      resb 1  ;00h=Read, 01h=Write
   156 0003C575 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   157 0003C576 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   158 0003C577 ??                  <1>     typePSPcopy resb 1  ;00=Simple copy, -1=Make Child process
   159 0003C578 ??                  <1>     spliceFlag  resb 1  ;01 = file name and directory name together
   160 0003C579 ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   161                              <1> 
   162 0003C57A ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   163                              <1> 
   164 0003C57B ??                  <1>     workingDrv  resb 1  ;Working drive number
   165                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   166                              <1> workingDD:  ;Create a symbol for the working device driver too
   167 0003C57C ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   168 0003C584 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   169                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   170                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   171 0003C58C ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   172 0003C594 <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need tmp CDS
   173 0003C5EF ????????????????    <1>     curJFTNum   resq 1  ;Ptr to JFT num in caller PSP of file being accessed
   174 0003C5F7 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   175 0003C5FF ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   176 0003C601 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   177                              <1> ;Temp vars, used when walking FAT or changing sectors
   178 0003C609 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   179 0003C611 ????                <1>     entries     resw 1  ;FAT entries per FAT sector
   180                              <1> ;***************************************************|
   181                              <1> ; Needs to be set up before any file access         |
   182                              <1> ; These vars keep track of file access properties   |
   183                              <1> ;   and must be used only for such purposes.        |
   184                              <1> ;***************************************************|
   185 0003C613 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   186 0003C617 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   187                              <1> 
   188 0003C61B ??                  <1>     clustFact   resb 1  ;NUMBER of sectors per cluster
   189                              <1> 
   190 0003C61C ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   191 0003C620 ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   192 0003C621 ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   193                              <1> 
   194 0003C629 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   195 0003C62B ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   196                              <1> ;***************************************************|
   197 0003C62F ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   198 0003C633 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   199 0003C637 ????????            <1>     bytesAdded  resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   200 0003C63B ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   201 0003C63F ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   202                              <1> ;Directory stuff
   203 0003C643 ????????            <1>     dirClust    resd 1  ;Cluster number of current directory
   204 0003C647 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   205 0003C64B ??                  <1>     dirSect     resb 1  ;Sector of current directory
   206 0003C64C ??                  <1>     dirEntry    resb 1  ;32 byte offset in dir sect for file being searched for
   207                              <1> ;Error DPB 
   208 0003C64D ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   209                              <1>     
   210                              <1> ;Stacks and scratch SFT
   211 0003C655 <res 528h>          <1>     critStack   resq 165
   212 0003CB7D ????????????????    <1>     critStakTop resq 1
   213                              <1> 
   214 0003CB85 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   215                              <1> 
   216 0003CBD4 <res 638h>          <1>     AuxStack    resq 199
   217 0003D20C ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   218 0003D214 <res 638h>          <1>     DiskStack   resq 199
   219 0003D84C ????????????????    <1>     DiskStakTop resq 1
   220                              <1> 
   221 0003D854 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   222 0003D855 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls!  
   223                              <1>     sdaLen      equ     $ - sda 
   224                              <1>     sdaMSLen    equ     $ - sda
   225                              <1> 
   226                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   227                              <1> inExtASCII:
   228 0003D856 ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   229                              <1>     dSegLen     equ     $
    16                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    17                                  %define currSegVBase section.resSeg.vstart
    18                                  %include "./Source/Data/staticData.asm"
    19                              <1> 
    20                              <1> ;-----------------------------------:
    21                              <1> ;           Static Data             :
    22                              <1> ;-----------------------------------:
    23 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    24 00000001 01                  <1> dosMinor    db 01h      ;.01
    25 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    25 0000000B 535953              <1>
    26 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    26 00000017 535953              <1>
    27                              <1> 
    28                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    29                              <1> ; wish to install their own custom logic.
    30 0000001A 0000000000000000    <1> oemKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    31 00000022 00                  <1> oemESC      db 00h  ;NULL char is our Escape char
    32 00000023 1B                  <1> oemBreak    db 1Bh  ;1Bh is our Break Char
    33                              <1> ;Extended ASCII keys with special meanings
    34 00000024 3B54                <1> oemKeyTbl   db eF1, "T"
    35 00000026 6912                <1>             dw (buffCharInput_BE.f1 - oemKeyTbl)
    36 00000028 3C49                <1>             db eF2, "I"
    37 0000002A 5B12                <1>             dw (buffCharInput_BE.f2 - oemKeyTbl)
    38 0000002C 3D4E                <1>             db eF3, "N"
    39 0000002E 6212                <1>             dw (buffCharInput_BE.f3 - oemKeyTbl)
    40 00000030 3E41                <1>             db eF4, "A"
    41 00000032 9712                <1>             dw (buffCharInput_BE.f4 - oemKeyTbl)
    42 00000034 3F20                <1>             db eF5, " "
    43 00000036 DC12                <1>             dw (buffCharInput_BE.f5 - oemKeyTbl)
    44 00000038 4052                <1>             db eF6, "R"
    45 0000003A F212                <1>             dw (buffCharInput_BE.f6 - oemKeyTbl)
    46 0000003C 4145                <1>             db eF7, "E"
    47 0000003E F912                <1>             dw (buffCharInput_BE.f7 - oemKeyTbl)
    48 00000040 4B4D                <1>             db eCursL, "M"
    49 00000042 C011                <1>             dw (buffCharInput_BE.delete - oemKeyTbl)
    50 00000044 4D45                <1>             db eCursR, "E"
    51 00000046 6912                <1>             dw (buffCharInput_BE.f1 - oemKeyTbl)
    52 00000048 5243                <1>             db eIns, "C"
    53 0000004A 0413                <1>             dw (buffCharInput_BE.toggleIns - oemKeyTbl)
    54 0000004C 5320                <1>             db eDel, " "
    55 0000004E 0B13                <1>             dw (buffCharInput_BE.eDel - oemKeyTbl)
    56                              <1> oemKeyTbl_len   equ ($ - oemKeyTbl) / 4
    19                                  %include "./Source/Data/dispTbl.asm"
    20                              <1> ;Kernel Dispatch Function Table
    21                              <1> 
    22                              <1> kDispTbl:
    23 00000050 F71C                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    24 00000052 990C                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    25 00000054 A60C                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    26 00000056 630D                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    27 00000058 8C0D                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    28 0000005A 940D                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    29 0000005C AC0D                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    30 0000005E DF0D                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    31 00000060 040E                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    32 00000062 360E                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    33 00000064 AD10                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    34 00000066 450E                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    35 00000068 510E                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    36 0000006A B024                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    37 0000006C D124                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    38 0000006E 2513                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    39 00000070 2513                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    40 00000072 2513                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    41 00000074 2513                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    42 00000076 2513                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    43 00000078 2513                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    44 0000007A 2513                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    45 0000007C 2513                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    46 0000007E 2513                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    47 00000080 AC27                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    48 00000082 EA24                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    49 00000084 2613                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    50 00000086 F124                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    51 00000088 F324                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    52 0000008A AC27                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    53 0000008C AC27                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    54 0000008E AE25                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    55 00000090 AC27                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    56 00000092 3913                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    57 00000094 3913                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    58 00000096 3913                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    59 00000098 3913                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    60 0000009A 5D25                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    61 0000009C 8A25                <1>     dw createNewPSP - kDispTbl        ;AH = 26H, PROCESS MANAGEMENT
    62 0000009E 3913                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    63 000000A0 3913                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    64 000000A2 3913                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    65 000000A4 2413                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    66 000000A6 2413                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    67 000000A8 2413                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    68 000000AA 2413                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    69 000000AC 8B25                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    70 000000AE 3A13                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    71 000000B0 9925                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    72 000000B2 F81C                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    73 000000B4 B025                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    74 000000B6 6524                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    75 000000B8 F625                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    76 000000BA 0726                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    77 000000BC 1C26                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    78 000000BE FB1C                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    79 000000C0 FB1C                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    80 000000C2 B908                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    81 000000C4 B908                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    82 000000C6 B908                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    83 000000C8 4D13                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    84 000000CA 4E13                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    85 000000CC 4F13                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    86 000000CE 5013                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    87 000000D0 8913                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    88 000000D2 9513                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    89 000000D4 9613                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    90 000000D6 E913                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    91 000000D8 E913                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    92 000000DA E913                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    93 000000DC E913                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    94 000000DE B908                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    95 000000E0 EC16                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    96 000000E2 0919                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    97 000000E4 321A                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    98 000000E6 F91C                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    99 000000E8 FA1C                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   100 000000EA 8526                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   101 000000EC E913                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   102 000000EE E913                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   103 000000F0 9324                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   104 000000F2 9C24                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   105 000000F4 9726                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   106 000000F6 A826                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   107 000000F8 7A27                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   108 000000FA 8127                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   109 000000FC E913                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   110 000000FE B908                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   111 00000100 E31B                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   112 00000102 8227                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   113 00000104 E913                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   114 00000106 E913                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   115 00000108 E913                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   116 0000010A AB27                <1>     dw getCritErrorInfo - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   117 0000010C AB27                <1>     dw networkServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   118 0000010E AB27                <1>     dw networkRedirection - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   119 00000110 B908                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   120 00000112 AC27                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   121 00000114 A524                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   122 00000116 AC27                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   123 00000118 AE24                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   124 0000011A FB1C                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   125 0000011C FB1C                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   126 0000011E E913                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   127 00000120 E913                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   128 00000122 AC27                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   129                              <1> kDispTblL  equ $ - kDispTbl 
   130                              <1> 
   131                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   132 00000124 FA26                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   133                              <1> mDispTblL   equ     $ - mDispTbl
    20                                  %include "./Source/Data/chrIOtbl.asm"
    21                              <1> ;IO Char table
    22                              <1> ;This table has Request header length, command code and error flags
    23                              <1> ; as a packed DWORD entry
    24                              <1> ioRqCmdErrTbl:
    25                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    26                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    27 00000126 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    28 0000012A 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    29 0000012E 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    30 00000132 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    31 00000136 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    32 0000013A 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    21                                  %include "./Source/Debug/debug.asm"
    22                              <1> ;This file contains debugging macros, procs and strings
    23                              <1> ; that we can use to output to COM1 bypassing the operating system.
    24                              <1> ;A serial terminal must be connected for this to work.
    25                              <1> 
    26                              <1> ;Variables and equates
    27                              <1> 
    28 0000013E 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    29                              <1> 
    30 00000146 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    30 0000014F 39414243444546      <1>
    31                              <1> ;Common procedures
    32                              <1> debMakeDebuggerRespond:
    33 00000156 488D2D26000000      <1>     lea rbp, .msg
    34 0000015D E8AF000000          <1>     call debPrintNullString
    35 00000162 B900001000          <1>     mov ecx, 100000h
    36                              <1> .waiting:
    37 00000167 FFC9                <1>     dec ecx
    38 00000169 740C                <1>     jz .timeout
    39 0000016B B402                <1>     mov ah, 02h ;Blocking recieve!
    40 0000016D 31D2                <1>     xor edx, edx
    41 0000016F CD34                <1>     int 34h
    42 00000171 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    43 00000174 75F1                <1>     jnz .waiting
    44 00000176 C3                  <1>     ret
    45                              <1> .timeout:
    46 00000177 488D2D47000000      <1>     lea rbp, .msg2
    47 0000017E E98E000000          <1>     jmp debPrintNullString
    48 00000183 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    48 0000018C 6B6579206174207468- <1>
    48 00000195 65207465726D696E61- <1>
    48 0000019E 6C20746F20636F6E74- <1>
    48 000001A7 696E7565206F722077- <1>
    48 000001B0 61697420666F722074- <1>
    48 000001B9 696D656F75742E2E2E- <1>
    48 000001C2 0A0D00              <1>
    49 000001C5 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    49 000001CE 436F6E74696E75696E- <1>
    49 000001D7 672E2E2E0A0D00      <1>
    50                              <1> debPrintHexByte:
    51                              <1> ;Print the hex byte in al as a hex value
    52 000001DE 52                  <1>     push rdx
    53 000001DF 53                  <1>     push rbx
    54 000001E0 50                  <1>     push rax
    55                              <1> 
    56 000001E1 88C2                <1>     mov dl, al           ;save byte in dl
    57 000001E3 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    58 000001E7 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    59 000001EC 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    60 000001F0 E80C000000          <1>     call .wrchar
    61 000001F5 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    62 000001F8 E804000000          <1>     call .wrchar
    63                              <1> 
    64 000001FD 58                  <1>     pop rax
    65 000001FE 5B                  <1>     pop rbx
    66 000001FF 5A                  <1>     pop rdx
    67 00000200 C3                  <1>     ret
    68                              <1> .wrchar:
    69 00000201 6687DB              <1>     xchg bx, bx
    70 00000204 488D1D3BFFFFFF      <1>     lea rbx, debascii
    71 0000020B D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    72 0000020C B401                <1>     mov ah, 01h
    73 0000020E CD34                <1>     int 34h  ;print char
    74 00000210 C3                  <1>     ret
    75                              <1> 
    76                              <1> debPrintNullString:
    77                              <1> ;Print a null terminated string pointed to by rbp
    78 00000211 56                  <1>     push rsi
    79 00000212 50                  <1>     push rax
    80 00000213 52                  <1>     push rdx
    81 00000214 31D2                <1>     xor edx, edx    ;Select COM1
    82 00000216 4889EE              <1>     mov rsi, rbp
    83                              <1> .getChar:
    84 00000219 AC                  <1>     lodsb
    85 0000021A 84C0                <1>     test al, al
    86 0000021C 7406                <1>     jz .exit
    87 0000021E B401                <1>     mov ah, 01h
    88 00000220 CD34                <1>     int 34h
    89 00000222 EBF5                <1>     jmp short .getChar
    90                              <1> .exit:
    91 00000224 5A                  <1>     pop rdx
    92 00000225 58                  <1>     pop rax
    93 00000226 5E                  <1>     pop rsi
    94 00000227 C3                  <1>     ret
    95                              <1> 
    96                              <1> debPrintDOSStack:
    97                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    98                              <1> ;Shows me which function, and parameters passed and returned
    99 00000228 488D2DA5010000      <1>     lea rbp, .a1
   100 0000022F E8DDFFFFFF          <1>     call debPrintNullString
   101 00000234 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   102 0000023B 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   103 00000242 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   104 00000245 E802030000          <1>     call overlayQword
   105 0000024A 4881C316000000      <1>     add rbx, 22
   106 00000251 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   107 00000255 E8F2020000          <1>     call overlayQword
   108 0000025A 4881C316000000      <1>     add rbx, 22
   109 00000261 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   110 00000265 E8E2020000          <1>     call overlayQword
   111 0000026A 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   112 00000271 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   113 00000275 E8D2020000          <1>     call overlayQword
   114 0000027A 4881C316000000      <1>     add rbx, 22 
   115 00000281 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   116 00000285 E8C2020000          <1>     call overlayQword
   117 0000028A 4881C316000000      <1>     add rbx, 22
   118 00000291 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   119 00000295 E8B2020000          <1>     call overlayQword
   120 0000029A 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   121 000002A1 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   122 000002A5 E8A2020000          <1>     call overlayQword
   123 000002AA 4881C316000000      <1>     add rbx, 22
   124 000002B1 488B05(D3C30300)    <1>     mov rax, qword [oldRSP]
   125 000002B8 480560000000        <1>     add rax, callerFrame_size
   126 000002BE E889020000          <1>     call overlayQword
   127 000002C3 4881C316000000      <1>     add rbx, 22
   128 000002CA 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   129 000002CE E879020000          <1>     call overlayQword
   130 000002D3 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   131 000002DA 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   132 000002DE E869020000          <1>     call overlayQword
   133 000002E3 488D2D06000000      <1>     lea rbp, .a0
   134 000002EA E822FFFFFF          <1>     call debPrintNullString
   135 000002EF C3                  <1>     ret
   136                              <1> 
   137 000002F0 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   137 000002F9 303030303030303030- <1>
   137 00000302 30306820            <1>
   138 00000306 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   138 0000030F 303030303030303030- <1>
   138 00000318 30306820            <1>
   139 0000031C 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   139 00000325 303030303030303030- <1>
   139 0000032E 30306820            <1>
   140 00000332 0A0D                <1>     db  0Ah,0Dh
   141 00000334 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   141 0000033D 303030303030303030- <1>
   141 00000346 30306820            <1>
   142 0000034A 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   142 00000353 303030303030303030- <1>
   142 0000035C 30306820            <1>
   143 00000360 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   143 00000369 303030303030303030- <1>
   143 00000372 30306820            <1>
   144 00000376 0A0D                <1>     db 0Ah, 0Dh
   145 00000378 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   145 00000381 303030303030303030- <1>
   145 0000038A 30306820            <1>
   146 0000038E 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   146 00000397 303030303030303030- <1>
   146 000003A0 30306820            <1>
   147 000003A4 7269703D3030303030- <1>     db "rip=0000000000000000h"
   147 000003AD 303030303030303030- <1>
   147 000003B6 303068              <1>
   148 000003B9 0A0D                <1>     db 0Ah, 0Dh
   149 000003BB 666C673D3030303030- <1>     db "flg=0000000000000000h "
   149 000003C4 303030303030303030- <1>
   149 000003CD 30306820            <1>
   150 000003D1 0A0D00              <1>     db 0Ah,0Dh,0
   151 000003D4 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   151 000003DD 206F6E20496E742034- <1>
   151 000003E6 316820737461636B0A- <1>
   151 000003EF 0D00                <1>
   152                              <1> 
   153                              <1> debDPBptr:
   154                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   155 000003F1 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   156 000003F8 4889E8              <1>     mov rax, rbp
   157 000003FB E84C010000          <1>     call overlayQword
   158 00000400 488D2D06000000      <1>     lea rbp, .dpb
   159 00000407 E805FEFFFF          <1>     call debPrintNullString
   160 0000040C C3                  <1>     ret
   161                              <1> .dpb: 
   162 0000040D 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   162 00000416 203030303030303030- <1>
   162 0000041F 303030303030303068- <1>
   162 00000428 200A0D00            <1>
   163                              <1> 
   164                              <1> debDPBBPBptr:
   165                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   166                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   167 0000042C 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   168 00000433 4889E8              <1>     mov rax, rbp
   169 00000436 E811010000          <1>     call overlayQword
   170 0000043B 4881C321000000      <1>     add rbx, 33
   171 00000442 4889F0              <1>     mov rax, rsi
   172 00000445 E802010000          <1>     call overlayQword
   173 0000044A 488D2D06000000      <1>     lea rbp, .dpb
   174 00000451 E8BBFDFFFF          <1>     call debPrintNullString
   175 00000456 C3                  <1>     ret
   176                              <1> .dpb: 
   177 00000457 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   177 00000460 203030303030303030- <1>
   177 00000469 303030303030303068- <1>
   177 00000472 2066726F6D20        <1>
   178 00000478 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   178 00000481 203030303030303030- <1>
   178 0000048A 303030303030303068- <1>
   178 00000493 200A0D00            <1>
   179                              <1> overlayByte:
   180                              <1>     ;Called with number in rax
   181                              <1>     ;pointer to START of 16 byte space for number in rbx
   182 00000497 53                  <1>     push rbx
   183 00000498 51                  <1>     push rcx
   184 00000499 52                  <1>     push rdx
   185 0000049A 55                  <1>     push rbp
   186 0000049B 4889DD              <1>     mov rbp, rbx
   187 0000049E 4889C2              <1>     mov rdx, rax
   188 000004A1 48FFC5              <1>     inc rbp ;Go to end of number
   189                              <1> 
   190 000004A4 488D1D9BFCFFFF      <1>     lea rbx, debascii
   191 000004AB 88D0                <1>     mov al, dl  ;Go low nybble first
   192 000004AD 240F                <1>     and al, 0Fh
   193 000004AF D7                  <1>     xlatb
   194 000004B0 884500              <1>     mov byte [rbp], al
   195 000004B3 48FFCD              <1>     dec rbp ;Go down one char pos
   196 000004B6 88D0                <1>     mov al, dl
   197 000004B8 24F0                <1>     and al, 0F0h    ;Hi nybble next
   198 000004BA C0E804              <1>     shr al, 4   ;Shift hi nybble low
   199 000004BD D7                  <1>     xlatb
   200 000004BE 884500              <1>     mov byte [rbp], al  ;Store char
   201                              <1> 
   202 000004C1 5D                  <1>     pop rbp
   203 000004C2 5A                  <1>     pop rdx
   204 000004C3 59                  <1>     pop rcx
   205 000004C4 5B                  <1>     pop rbx
   206 000004C5 C3                  <1>     ret
   207                              <1> 
   208                              <1> overlayWord:
   209                              <1>     ;Called with number in rax
   210                              <1>     ;pointer to START of 16 byte space for number in rbx
   211 000004C6 53                  <1>     push rbx
   212 000004C7 51                  <1>     push rcx
   213 000004C8 52                  <1>     push rdx
   214 000004C9 55                  <1>     push rbp
   215 000004CA 4889DD              <1>     mov rbp, rbx
   216 000004CD 4889C2              <1>     mov rdx, rax
   217 000004D0 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   218 000004D7 B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   219 000004DC 488D1D63FCFFFF      <1>     lea rbx, debascii
   220                              <1> .ow0:
   221 000004E3 88D0                <1>     mov al, dl  ;Go low nybble first
   222 000004E5 240F                <1>     and al, 0Fh
   223 000004E7 D7                  <1>     xlatb
   224 000004E8 884500              <1>     mov byte [rbp], al
   225 000004EB 48FFCD              <1>     dec rbp ;Go down one char pos
   226 000004EE 88D0                <1>     mov al, dl
   227 000004F0 24F0                <1>     and al, 0F0h    ;Hi nybble next
   228 000004F2 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   229 000004F5 D7                  <1>     xlatb
   230 000004F6 884500              <1>     mov byte [rbp], al  ;Store char
   231 000004F9 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   232 000004FD 48FFCD              <1>     dec rbp
   233 00000500 FFC9                <1>     dec ecx
   234 00000502 75DF                <1>     jnz .ow0
   235 00000504 5D                  <1>     pop rbp
   236 00000505 5A                  <1>     pop rdx
   237 00000506 59                  <1>     pop rcx
   238 00000507 5B                  <1>     pop rbx
   239 00000508 C3                  <1>     ret
   240                              <1> 
   241                              <1> overlayDword:
   242                              <1>     ;Called with number in rax
   243                              <1>     ;pointer to START of 16 byte space for number in rbx
   244 00000509 53                  <1>     push rbx
   245 0000050A 51                  <1>     push rcx
   246 0000050B 52                  <1>     push rdx
   247 0000050C 55                  <1>     push rbp
   248 0000050D 4889DD              <1>     mov rbp, rbx
   249 00000510 4889C2              <1>     mov rdx, rax
   250 00000513 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   251 0000051A B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   252 0000051F 488D1D20FCFFFF      <1>     lea rbx, debascii
   253                              <1> .od0:
   254 00000526 88D0                <1>     mov al, dl  ;Go low nybble first
   255 00000528 240F                <1>     and al, 0Fh
   256 0000052A D7                  <1>     xlatb
   257 0000052B 884500              <1>     mov byte [rbp], al
   258 0000052E 48FFCD              <1>     dec rbp ;Go down one char pos
   259 00000531 88D0                <1>     mov al, dl
   260 00000533 24F0                <1>     and al, 0F0h    ;Hi nybble next
   261 00000535 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   262 00000538 D7                  <1>     xlatb
   263 00000539 884500              <1>     mov byte [rbp], al  ;Store char
   264 0000053C 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   265 00000540 48FFCD              <1>     dec rbp
   266 00000543 FFC9                <1>     dec ecx
   267 00000545 75DF                <1>     jnz .od0
   268 00000547 5D                  <1>     pop rbp
   269 00000548 5A                  <1>     pop rdx
   270 00000549 59                  <1>     pop rcx
   271 0000054A 5B                  <1>     pop rbx
   272 0000054B C3                  <1>     ret
   273                              <1> 
   274                              <1> overlayQword:
   275                              <1>     ;Called with number in rax
   276                              <1>     ;pointer to START of 16 byte space for number in rbx
   277 0000054C 53                  <1>     push rbx
   278 0000054D 51                  <1>     push rcx
   279 0000054E 52                  <1>     push rdx
   280 0000054F 55                  <1>     push rbp
   281 00000550 4889DD              <1>     mov rbp, rbx
   282 00000553 4889C2              <1>     mov rdx, rax
   283 00000556 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   284 0000055D B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   285 00000562 488D1DDDFBFFFF      <1>     lea rbx, debascii
   286                              <1> .oq0:
   287 00000569 88D0                <1>     mov al, dl  ;Go low nybble first
   288 0000056B 240F                <1>     and al, 0Fh
   289 0000056D D7                  <1>     xlatb
   290 0000056E 884500              <1>     mov byte [rbp], al
   291 00000571 48FFCD              <1>     dec rbp ;Go down one char pos
   292 00000574 88D0                <1>     mov al, dl
   293 00000576 24F0                <1>     and al, 0F0h    ;Hi nybble next
   294 00000578 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   295 0000057B D7                  <1>     xlatb
   296 0000057C 884500              <1>     mov byte [rbp], al  ;Store char
   297 0000057F 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   298 00000583 48FFCD              <1>     dec rbp
   299 00000586 FFC9                <1>     dec ecx
   300 00000588 75DF                <1>     jnz .oq0
   301 0000058A 5D                  <1>     pop rbp
   302 0000058B 5A                  <1>     pop rdx
   303 0000058C 59                  <1>     pop rcx
   304 0000058D 5B                  <1>     pop rbx
   305 0000058E C3                  <1>     ret
   306                              <1> 
   307                              <1> debPrintFunctionName:
   308                              <1> ;Prints the DOS function that has been entered
   309                              <1> ;Entered with ah = Function number
   310 0000058F 88E0                <1>     mov al, ah  ;Get dos function number
   311 00000591 488D1DAEFBFFFF      <1>     lea rbx, debascii
   312 00000598 488D1535000000      <1>     lea rdx, .number
   313 0000059F 24F0                <1>     and al, 0F0h    ;Get high nybble first
   314 000005A1 C0E804              <1>     shr al, 4
   315 000005A4 D7                  <1>     xlatb
   316 000005A5 8802                <1>     mov byte [rdx], al
   317 000005A7 88E0                <1>     mov al, ah
   318 000005A9 240F                <1>     and al, 0Fh
   319 000005AB D7                  <1>     xlatb
   320 000005AC 884201              <1>     mov byte [rdx + 1], al
   321 000005AF 488D2D06000000      <1>     lea rbp, .dosString
   322 000005B6 E856FCFFFF          <1>     call debPrintNullString
   323 000005BB C3                  <1>     ret
   324 000005BC 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   324 000005C5 696F6E20496E742034- <1>
   324 000005CE 31682F41483D        <1>
   325 000005D4 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   326                              <1> 
   327                              <1> ;----------------:
   328                              <1> ;!!!! MACROS !!!!:
   329                              <1> ;----------------:
   330                              <1> ;Insert macro when entering a debug block
   331                              <1> %macro debugEnterM 0
   332                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   333                              <1>     mov rsp, debStackTop
   334                              <1> ;Push all registers except rsp on stack
   335                              <1>     push rax
   336                              <1>     push rbx
   337                              <1>     push rcx
   338                              <1>     push rdx
   339                              <1>     push rsi
   340                              <1>     push rdi
   341                              <1>     push rbp
   342                              <1>     push r8
   343                              <1>     push r9
   344                              <1>     push r10
   345                              <1>     push r11
   346                              <1>     push r12
   347                              <1>     push r13
   348                              <1>     push r14
   349                              <1>     push r15
   350                              <1>     pushfq
   351                              <1> %endmacro
   352                              <1> ;Insert macro when exiting a debug block
   353                              <1> %macro debugExitM 0
   354                              <1>     popfq
   355                              <1>     pop r15
   356                              <1>     pop r14
   357                              <1>     pop r13
   358                              <1>     pop r12
   359                              <1>     pop r11
   360                              <1>     pop r10
   361                              <1>     pop r9
   362                              <1>     pop r8
   363                              <1>     pop rbp
   364                              <1>     pop rdi
   365                              <1>     pop rsi
   366                              <1>     pop rdx
   367                              <1>     pop rcx
   368                              <1>     pop rbx
   369                              <1>     pop rax
   370                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   371                              <1> %endmacro
    22                                  %include "./Source/Kernel/FAT/buffun.asm"
    23                              <1> ;This file contains FAT disk buffer related functions that
    24                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    25                              <1> ;----------------------------------------------------
    26                              <1> ;           Externally referenced functions         :
    27                              <1> ;----------------------------------------------------
    28                              <1> 
    29                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    30                              <1> ;Sets the buffer in rdi to the head of the chain
    31                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    32                              <1> ;Output: Buffer header set to the head of the chain
    33 000005DA 48393D(4EC00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    34 000005E1 7428                <1>     je .exit
    35 000005E3 56                  <1>     push rsi
    36 000005E4 488B35(4EC00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    37                              <1> .mainlp:
    38 000005EB 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    39 000005EE 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    40 000005F0 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    41 000005F3 EBF6                <1>     jmp short .mainlp
    42                              <1> .fnd:
    43 000005F5 57                  <1>     push rdi
    44 000005F6 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    45 000005F9 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    46 000005FC 5F                  <1>     pop rdi ;Get original buf back
    47 000005FD 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    48 00000600 488735(4EC00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    49 00000607 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    50 0000060A 5E                  <1>     pop rsi
    51                              <1> .exit:
    52 0000060B C3                  <1>     ret
    53                              <1> 
    54                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h
    55 0000060C E846000000          <1>     call flushBuffer
    56 00000611 7306                <1>     jnc .exit
    57                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    58 00000613 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    59                              <1> .exit:
    60 00000619 C3                  <1>     ret
    61                              <1> 
    62                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    63                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    64                              <1> ;Output: rdi = First disk buffer
    65 0000061A 488B3D(4EC00300)    <1>     mov rdi, [bufHeadPtr]
    66 00000621 57                  <1>     push rdi
    67                              <1> .lp:
    68 00000622 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    69 00000626 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    70 00000629 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    71 00000630 75F0                <1>     jne .lp
    72 00000632 5F                  <1>     pop rdi
    73 00000633 C3                  <1>     ret
    74                              <1> 
    75                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    76                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    77                              <1> ; second buffer in the chain in rdi
    78                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    79                              <1> ;Output: rdi = Second buffer in the chain
    80 00000634 E8A1FFFFFF          <1>     call makeBufferMostRecentlyUsed
    81 00000639 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
    82 00000640 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    83 00000643 C3                  <1>     ret
    84                              <1> 
    85                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    86                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    87                              <1> ;Input: rdi = Buffer header to start searching at
    88                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    89                              <1> ;        ZF=ZE => No unreferenced buffer found
    90 00000644 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    91 00000648 750C                <1>     jnz .exit
    92 0000064A 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    93 0000064D 4881FFFFFFFFFF      <1>     cmp rdi, -1
    94 00000654 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    95                              <1> .exit:
    96 00000656 C3                  <1>     ret
    97                              <1> 
    98                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
    99                              <1> ;Flushes the data in a sector buffer to disk!
   100                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   101                              <1> ;Exit:  CF=NC : Success
   102                              <1> ;       CF=CY : Fail, terminate the request
   103                              <1> ;First make request to device driver
   104 00000657 50                  <1>     push rax
   105 00000658 53                  <1>     push rbx
   106 00000659 51                  <1>     push rcx
   107 0000065A 52                  <1>     push rdx
   108 0000065B 56                  <1>     push rsi
   109 0000065C 55                  <1>     push rbp
   110 0000065D F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   111 00000661 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   112                              <1> .fbRequest0:
   113 00000663 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   114 00000668 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   115 0000066C 7406                <1>     jz .fbRequest1
   116 0000066E 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   117                              <1> .fbRequest1:
   118 00000674 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   119 00000677 B901000000          <1>     mov ecx, 1  ;One sector to copy
   120 0000067C 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   121 00000680 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   122 00000684 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   123 00000688 E86E1A0000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   124 0000068D E8E6180000          <1>     call absDiskDriverCall    ;Make Driver Request
   125 00000692 7525                <1>     jnz .fbFail
   126                              <1> ;Now check if the buffer was a FAT, to write additional copies
   127 00000694 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   128 00000698 7417                <1>     jz .fbFreeExit  ;If not, exit
   129 0000069A FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   130 0000069D 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   131 0000069F 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   132 000006A2 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   133 000006A6 E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   134                              <1> .fbFreeExit1:
   135 000006AB 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   136 000006AE 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   137                              <1> .fbFreeExit:
   138 000006B1 F8                  <1>     clc
   139                              <1> .fbExitFail:
   140 000006B2 5D                  <1>     pop rbp
   141 000006B3 5E                  <1>     pop rsi
   142 000006B4 5A                  <1>     pop rdx
   143 000006B5 59                  <1>     pop rcx
   144 000006B6 5B                  <1>     pop rbx
   145 000006B7 58                  <1>     pop rax
   146 000006B8 C3                  <1>     ret
   147                              <1> .fbFail:
   148                              <1> ;Enter here only if the request failed
   149 000006B9 FFCE                <1>     dec esi
   150 000006BB 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   151                              <1> ;Request failed thrice, critical error call
   152 000006BD 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   153 000006C4 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   154 000006CB 89C7                <1>     mov edi, eax    ;Save status word in di
   155 000006CD 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   156 000006D4 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   157 000006D7 B419                <1>     mov ah, critWrite | critFailOK | critRetryOK ;Set bits
   158                              <1>     ;Test for correct buffer data type
   159 000006D9 F6C401              <1>     test ah, dosBuffer
   160 000006DC 7505                <1>     jnz .fbFail0
   161 000006DE 80CC00              <1>     or ah, critDOS
   162 000006E1 EB14                <1>     jmp short .fbFailMain
   163                              <1> .fbFail0:
   164 000006E3 F6C402              <1>     test ah, fatBuffer
   165 000006E6 7504                <1>     jnz .fbFail1
   166 000006E8 B402                <1>     mov ah, critFAT
   167 000006EA EB0B                <1>     jmp short .fbFailMain
   168                              <1> .fbFail1:
   169 000006EC F6C404              <1>     test ah, dirBuffer
   170 000006EF 7504                <1>     jnz .fbFail2
   171 000006F1 B404                <1>     mov ah, critDir
   172 000006F3 EB02                <1>     jmp short .fbFailMain
   173                              <1> .fbFail2:
   174                              <1> ;Here it must be a data buffer
   175 000006F5 B406                <1>     mov ah, critData
   176                              <1> .fbFailMain:
   177 000006F7 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   178 000006FD 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   179 00000701 E866160000          <1>     call criticalDOSError   ;Return in al the return code
   180 00000706 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   181 0000070D 488B2D(4DC60300)    <1>     mov rbp, qword [tmpDPBPtr]
   182 00000714 3C01                <1>     cmp al, critRetry
   183 00000716 0F8447FFFFFF        <1>     je .fbRequest0
   184                              <1>     ;Else we fail (Ignore=Fail here)
   185 0000071C 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   185 00000724 00                  <1>
   186 00000725 F9                  <1>     stc ;Set error flag to indicate fail
   187 00000726 E987FFFFFF          <1>     jmp .fbExitFail
   188                              <1> 
   189                              <1> 
   190                              <1> testDirtyBufferForDrive:    ;External linkage
   191                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   192                              <1> ;Input: al = Drive number (0 based)
   193                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   194                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   195 0000072B 53                  <1>     push rbx
   196 0000072C 488B1D(4EC00300)    <1>     mov rbx, qword [bufHeadPtr]
   197                              <1> .tdbfdCheckBuffer:
   198 00000733 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   199 00000736 7509                <1>     jne .tdbfdGotoNextBuffer
   200 00000738 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   201 0000073C 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   202 0000073E F9                  <1>     stc ;Else dirty buffer found, set carry flag
   203                              <1> .tdbfdExit:
   204 0000073F 5B                  <1>     pop rbx
   205 00000740 C3                  <1>     ret
   206                              <1> .tdbfdGotoNextBuffer:
   207 00000741 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   208 00000744 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   209 0000074B 74F2                <1>     je .tdbfdExit
   210 0000074D EBE4                <1>     jmp short .tdbfdCheckBuffer
   211                              <1> 
   212                              <1> freeBuffersForDPB:
   213                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   214                              <1> ; to have a drive number of -1, thus freeing it
   215                              <1> ;Given DPB is in rbp
   216 0000074F 53                  <1>     push rbx
   217 00000750 488B1D(4EC00300)    <1>     mov rbx, qword [bufHeadPtr]
   218                              <1> .i0:
   219 00000757 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   220 0000075B 7506                <1>     jne .i1 ;If no, skip freeing
   221 0000075D 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   222                              <1> .i1:
   223 00000763 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   224 00000766 4881FBFFFFFFFF      <1>     cmp rbx, -1
   225 0000076D 75E8                <1>     jne .i0
   226                              <1> .exit:
   227 0000076F 5B                  <1>     pop rbx
   228 00000770 C3                  <1>     ret
   229                              <1> 
   230                              <1> getBuffer: ;External Linkage (dosPrim.asm, fat.asm)
   231                              <1> ;
   232                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   233                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   234                              <1> ;Flushes if not in disk change mode. 
   235                              <1> ;If in disk change mode, will check to see if the selected buffer 
   236                              <1> ; has data referring a device using the same DPB as we are changing.
   237                              <1> ; If it is, skip flushing, if not, flush first!
   238                              <1> ;
   239                              <1> ;This function will return a pointer to the desired data sector OR 
   240                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   241                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   242                              <1> ;Entry: rax = Sector to read
   243                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   244                              <1> ;       qword [workingDPB] = DPB to use for transaction
   245                              <1> ;Exit:  CF=NC => 
   246                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   247                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   248 00000771 51                  <1>     push rcx
   249 00000772 52                  <1>     push rdx
   250 00000773 56                  <1>     push rsi
   251 00000774 57                  <1>     push rdi
   252 00000775 488B35(7CC50300)    <1>     mov rsi, qword [workingDPB]  ;Get DPB of transacting device
   253 0000077C 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   254 0000077E E865010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   255 00000783 4881FFFFFFFFFF      <1>     cmp rdi, -1
   256 0000078A 740D                <1>     je .rbReadNewSector
   257                              <1> .rbExit:
   258 0000078C F8                  <1>     clc
   259                              <1> .rbExitNoFlag:
   260 0000078D 5F                  <1>     pop rdi
   261 0000078E 5E                  <1>     pop rsi
   262 0000078F 5A                  <1>     pop rdx
   263 00000790 59                  <1>     pop rcx
   264 00000791 488B1D(01C60300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   265 00000798 C3                  <1>     ret
   266                              <1> .rbReadNewSector:
   267 00000799 E8F3000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   268 0000079E 803D(54D80300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   269 000007A5 7506                <1>     jne .flush  ;We are not, flush buffer
   270 000007A7 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   271 000007AB 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used
   272                              <1> .flush:
   273 000007AD E85AFEFFFF          <1>     call flushAndFreeBuffer
   274 000007B2 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   275                              <1> .skipFlush:
   276                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   277 000007B4 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   278 000007B7 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
   279 000007BA 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   280 000007BE 80F902              <1>     cmp cl, fatBuffer
   281 000007C1 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   282 000007C3 7503                <1>     jne .rbNonFATbuffer
   283 000007C5 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   284                              <1> .rbNonFATbuffer:
   285 000007C8 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   286 000007CB 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   287 000007CE 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   288 000007D1 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   289 000007D5 C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   290 000007D9 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   291 000007DE EBAD                <1>     jmp short .rbExitNoFlag
   292                              <1> 
   293                              <1> readSectorBuffer:   ;Internal Linkage
   294                              <1> ;Reads a sector into a built sector buffer
   295                              <1> ;Entry: rdi = Pointer to buffer header
   296                              <1> ;Exit:  CF=NC : Success
   297                              <1> ;       CF=CY : Fail, terminate the request
   298                              <1> ;       rbx pointing to buffer header
   299                              <1> ;First make request to device driver
   300 000007E0 50                  <1>     push rax
   301 000007E1 53                  <1>     push rbx
   302 000007E2 51                  <1>     push rcx
   303 000007E3 52                  <1>     push rdx
   304 000007E4 56                  <1>     push rsi
   305 000007E5 55                  <1>     push rbp
   306                              <1> .rsRequest0:
   307 000007E6 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   308 000007EB F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   309 000007EF 7406                <1>     jz .rsRequest1
   310 000007F1 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   311                              <1> .rsRequest1:
   312 000007F7 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   313 000007FA B901000000          <1>     mov ecx, 1  ;One sector to copy
   314 000007FF 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   315 00000803 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   316 00000807 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   317 0000080B E8F6180000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   318 00000810 E863170000          <1>     call absDiskDriverCall    ;Make Driver Request
   319 00000815 7508                <1>     jnz .rsFail
   320                              <1> .rsExit:
   321 00000817 F8                  <1>     clc
   322                              <1> .rsExitFail:
   323 00000818 5D                  <1>     pop rbp
   324 00000819 5E                  <1>     pop rsi
   325 0000081A 5A                  <1>     pop rdx
   326 0000081B 59                  <1>     pop rcx
   327 0000081C 5B                  <1>     pop rbx
   328 0000081D 58                  <1>     pop rax
   329 0000081E C3                  <1>     ret
   330                              <1> .rsFail:
   331                              <1> ;Enter here only if the request failed
   332 0000081F FFCE                <1>     dec esi
   333 00000821 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   334                              <1> ;Request failed thrice, critical error call
   335 00000823 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   336 0000082A 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   337 00000831 89C7                <1>     mov edi, eax    ;Save status word in di
   338 00000833 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   339 0000083A 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   340 0000083D B418                <1>     mov ah, critRead | critFailOK | critRetryOK ;Set bits
   341                              <1>     ;Test for correct buffer data type
   342 0000083F F6C401              <1>     test ah, dosBuffer
   343 00000842 7505                <1>     jnz .rsFail0
   344 00000844 80CC00              <1>     or ah, critDOS
   345 00000847 EB14                <1>     jmp short .rsFailMain
   346                              <1> .rsFail0:
   347 00000849 F6C402              <1>     test ah, fatBuffer
   348 0000084C 7504                <1>     jnz .rsFail1
   349 0000084E B402                <1>     mov ah, critFAT
   350 00000850 EB0B                <1>     jmp short .rsFailMain
   351                              <1> .rsFail1:
   352 00000852 F6C404              <1>     test ah, dirBuffer
   353 00000855 7504                <1>     jnz .rsFail2
   354 00000857 B404                <1>     mov ah, critDir
   355 00000859 EB02                <1>     jmp short .rsFailMain
   356                              <1> .rsFail2:
   357                              <1> ;Here it must be a data buffer
   358 0000085B B406                <1>     mov ah, critData
   359                              <1> .rsFailMain:
   360 0000085D 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   361 00000863 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   362 00000867 E800150000          <1>     call criticalDOSError
   363 0000086C 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   364 00000873 488B2D(4DC60300)    <1>     mov rbp, qword [tmpDPBPtr]
   365 0000087A 3C01                <1>     cmp al, critRetry
   366 0000087C 0F8464FFFFFF        <1>     je .rsRequest0
   367                              <1>     ;Else we fail (Ignore=Fail here)
   368 00000882 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   368 0000088A 00                  <1>
   369 0000088B F9                  <1>     stc ;Set error flag to indicate fail
   370 0000088C E987FFFFFF          <1>     jmp .rsExitFail
   371                              <1>     
   372                              <1> findLRUBuffer: ;Internal Linkage
   373                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   374                              <1> ; in rbx and the currBuff variable
   375                              <1> ;Input: Nothing
   376                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   377                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   378 00000891 52                  <1>     push rdx
   379 00000892 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   380 00000899 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   381 0000089D 7436                <1>     je .flbExit 
   382 0000089F 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   383 000008A6 742D                <1>     je .flbExit
   384                              <1> .flbWalk:
   385 000008A8 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   386 000008AB 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   387 000008AE 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   388 000008B2 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   389 000008B4 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   390 000008BB 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   391 000008BD 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   392                              <1> .flbHeadLink:
   393 000008C4 488B15(4EC00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   394 000008CB 48893D(4EC00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   395 000008D2 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   396                              <1> .flbExit:
   397 000008D5 5A                  <1>     pop rdx
   398 000008D6 48893D(01C60300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   399 000008DD C3                  <1>     ret
   400                              <1> .flbFreeLink:
   401 000008DE 51                  <1>     push rcx
   402 000008DF 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   403 000008E2 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   404 000008E5 59                  <1>     pop rcx
   405 000008E6 EBDC                <1>     jmp short .flbHeadLink
   406                              <1> 
   407                              <1> findSectorInBuffer:     ;Internal linkage
   408                              <1> ;Finds the Buffer for a sector
   409                              <1> ;If the sector is not in a buffer, returns with a -1
   410                              <1> ;Input: rax = Sector number
   411                              <1> ;        dl = Drive number
   412                              <1> ;Output: rdi = Buffer hdr pointer or -1
   413 000008E8 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   414                              <1> .fsiCheckBuffer:
   415 000008EF 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   416 000008F2 7507                <1>     jne .fsiGotoNextBuffer
   417 000008F4 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   418 000008F8 7501                <1>     jne .fsiGotoNextBuffer
   419                              <1> .fsiExit:
   420 000008FA C3                  <1>     ret
   421                              <1> .fsiGotoNextBuffer:
   422 000008FB 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   423 000008FE 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   424 00000905 74F3                <1>     je .fsiExit
   425 00000907 EBE6                <1>     jmp short .fsiCheckBuffer
    23                                  %include "./Source/Kernel/FAT/fat.asm"
    24                              <1> ;---------------------------------------------------:
    25                              <1> ;                   KERNEL FUNCTIONS                :
    26                              <1> ;---------------------------------------------------:
    27                              <1> makeDIR:           ;ah = 39h
    28                              <1> removeDIR:         ;ah = 3Ah
    29                              <1> setCurrentDIR:     ;ah = 3Bh, set dir for current drive (or drive in path)
    30                              <1> getCurrentDIR:     ;ah = 47h
    31                              <1> getSetFileDateTime:;ah = 57h
    32                              <1> trueName:          ;ah = 60h, get fully qualified name
    33 00000909 C3                  <1>     ret
    34                              <1> 
    35                              <1> 
    36                              <1> ;-----------------------------------:
    37                              <1> ;       File System routines        :
    38                              <1> ;-----------------------------------:
    39                              <1> getFATtype:
    40                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    41                              <1> ;Entry: rbp = DPB to ascertain FAT
    42                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    43 0000090A 53                  <1>     push rbx
    44 0000090B 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    45 0000090E B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    46 00000913 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    47 00000919 730F                <1>     jae .exit
    48 0000091B FFC9                <1>     dec ecx     ;FAT 12 marker
    49 0000091D 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    50 00000923 7205                <1>     jb .exit
    51 00000925 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    52                              <1> .exit:
    53 0000092A 5B                  <1>     pop rbx
    54 0000092B C3                  <1>     ret
    55                              <1> 
    56                              <1> clust2FATEntry:
    57                              <1> ;Converts a cluster number to a offset in the FAT
    58                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    59                              <1> ;        eax = Cluster number to look for
    60                              <1> ;Exit:   eax = Sector on disk of FAT 
    61                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    62                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    63 0000092C 53                  <1>     push rbx
    64 0000092D 55                  <1>     push rbp
    65 0000092E 488B2D(7CC50300)    <1>     mov rbp, qword [workingDPB]
    66 00000935 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    67 00000938 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    68 0000093E 731E                <1>     jae .fat32
    69 00000940 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    70 00000946 7209                <1>     jb .fat12
    71                              <1> ;FAT16
    72 00000948 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    73 0000094A 6801000000          <1>     push qword 1
    74 0000094F EB15                <1>     jmp short .common
    75                              <1> .fat12:
    76 00000951 89C1                <1>     mov ecx, eax    ;ecx = eax
    77 00000953 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    78 00000955 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    79 00000957 6800000000          <1>     push qword 0
    80 0000095C EB08                <1>     jmp short .common
    81                              <1> .fat32:
    82 0000095E 6802000000          <1>     push qword 2
    83 00000963 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    84                              <1> .common:
    85                              <1> ;eax has the FAToffset
    86 00000966 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    87 0000096A 31D2                <1>     xor edx, edx    ;edx = 0
    88 0000096C F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    89 0000096E 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    90 00000972 01D8                <1>     add eax, ebx
    91 00000974 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    92 00000975 5D                  <1>     pop rbp
    93 00000976 5B                  <1>     pop rbx
    94 00000977 C3                  <1>     ret
    95                              <1> 
    96                              <1> getStartSectorOfCluster:
    97                              <1> ;Input: eax = Cluster Number
    98                              <1> ;       rbp = dpb pointer
    99                              <1> ;Output: rax = Starting Sector number for cluster
   100                              <1> ;Gives the data sector we are at in the current cluster
   101                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
   102 00000978 51                  <1>     push rcx
   103 00000979 09C0                <1>     or eax, eax ;Zero upper dword
   104 0000097B 482D02000000        <1>     sub rax, 2
   105 00000981 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   106 00000984 48D3E0              <1>     shl rax, cl
   107 00000987 31C9                <1>     xor ecx, ecx
   108 00000989 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
   109 0000098C 4801C8              <1>     add rax, rcx
   110                              <1>     ;rax now has the first sector of the current cluster
   111 0000098F 59                  <1>     pop rcx
   112 00000990 C3                  <1>     ret
   113                              <1> 
   114                              <1> findFreeCluster:
   115                              <1> ;Walks the FAT to find a free cluster and returns the 
   116                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   117                              <1> ;Works on the workingDPB
   118                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   119 00000991 53                  <1>     push rbx
   120 00000992 51                  <1>     push rcx
   121 00000993 52                  <1>     push rdx
   122 00000994 57                  <1>     push rdi
   123 00000995 55                  <1>     push rbp
   124 00000996 488B2D(7CC50300)    <1>     mov rbp, qword [workingDPB]
   125 0000099D 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   126 000009A1 488905(09C60300)    <1>     mov qword [tempSect], rax   ;Save the sector number temporarily
   127                              <1> ;Use ebp as sector counter
   128 000009A8 8B5513              <1>     mov edx, dword [rbp + dpb.dFATlength]
   129                              <1> ;Get Sector Size in bytes in ebx
   130 000009AB 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
   131                              <1> ;Get FAT type
   132 000009AF E856FFFFFF          <1>     call getFATtype ;Gets FAT type (for number of elements in sector)
   133 000009B4 0F84B6000000        <1>     jz .fat12
   134 000009BA F6C101              <1>     test cl, 1
   135 000009BD 7571                <1>     jnz .fat16
   136                              <1> ;FAT32 proceeds here
   137 000009BF C1EB02              <1>     shr ebx, 2  ;Divide by 4 to get number of FAT entries in a sector buffer
   138 000009C2 66891D(11C60300)    <1>     mov word [entries], bx
   139                              <1> .fat32Search:
   140 000009C9 B102                <1>     mov cl, fatBuffer
   141 000009CB 488B05(09C60300)    <1>     mov rax, qword [tempSect]
   142 000009D2 E89AFDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   143 000009D7 724A                <1>     jc .exitFail
   144 000009D9 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   145 000009DD 31C0                <1>     xor eax, eax
   146 000009DF 0FB70D(11C60300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   147 000009E6 F2AF                <1>     repne scasd ;Look for the zero dword 
   148 000009E8 740D                <1>     je .fat32Found  ;If found, report cluster number (offset into FAT)
   149 000009EA FFCA                <1>     dec edx ;Dec number of sectors left to search
   150 000009EC 743B                <1>     jz .noFreeClusters
   151 000009EE 48FF05(09C60300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   152 000009F5 EBD2                <1>     jmp short .fat32Search
   153                              <1> .fat32Found:
   154 000009F7 81EF04000000        <1>     sub edi, 4  ;edi is one dword past the entry
   155                              <1> .computeEntry:
   156 000009FD 480FB74D06          <1>     movzx rcx, word [rbp + dpb.wFAToffset] ;Get start sector number of FAT 
   157 00000A02 488B05(09C60300)    <1>     mov rax, qword [tempSect]   ;Get disk sector number of FAT into rax
   158 00000A09 4829C8              <1>     sub rax, rcx   ;Get Offset into FAT in rax
   159 00000A0C 0FB70D(11C60300)    <1>     movzx ecx, word [entries] ;Get number of entries in a FAT sector
   160 00000A13 52                  <1>     push rdx
   161 00000A14 48F7E1              <1>     mul rcx ;Multiply rax with rcx (technically eax with ecx)
   162 00000A17 5A                  <1>     pop rdx
   163                              <1> ;rbx points to current buffer header
   164 00000A18 488D5320            <1>     lea rdx, qword [rbx + bufferHdr.dataarea]
   165 00000A1C 4829D7              <1>     sub rdi, rdx
   166 00000A1F 4801F8              <1>     add rax, rdi    ;Add the offset into the sector to rax to get cluster number
   167                              <1> .exit:
   168 00000A22 F8                  <1>     clc
   169                              <1> .exitFail:      ;Keep carry flag
   170 00000A23 5D                  <1>     pop rbp
   171 00000A24 5F                  <1>     pop rdi
   172 00000A25 5A                  <1>     pop rdx
   173 00000A26 59                  <1>     pop rcx
   174 00000A27 5B                  <1>     pop rbx
   175 00000A28 C3                  <1>     ret
   176                              <1> .noFreeClusters:
   177 00000A29 B8FFFFFFFF          <1>     mov eax, -1 ;No free cluster marker
   178 00000A2E EBF2                <1>     jmp short .exit
   179                              <1> .fat16:
   180 00000A30 D1EB                <1>     shr ebx, 1  ;Divide by 2 to get number of FAT entries in a sector buffer
   181 00000A32 66891D(11C60300)    <1>     mov word [entries], bx
   182                              <1> .fat16Search:
   183 00000A39 B102                <1>     mov cl, fatBuffer
   184 00000A3B 488B05(09C60300)    <1>     mov rax, qword [tempSect]
   185 00000A42 E82AFDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   186 00000A47 72DA                <1>     jc .exitFail
   187 00000A49 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   188 00000A4D 31C0                <1>     xor eax, eax
   189 00000A4F 0FB70D(11C60300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   190 00000A56 F266AF              <1>     repne scasw ;Look for the zero word 
   191 00000A59 740D                <1>     je .fat16Found  ;If found, report cluster number (offset into FAT)
   192 00000A5B FFCA                <1>     dec edx ;Dec number of sectors left to search
   193 00000A5D 74CA                <1>     jz .noFreeClusters
   194 00000A5F 48FF05(09C60300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   195 00000A66 EBD1                <1>     jmp short .fat16Search
   196                              <1> .fat16Found:
   197 00000A68 81EF02000000        <1>     sub edi, 2  ;edi is one word past the entry
   198 00000A6E EB8D                <1>     jmp short .computeEntry
   199                              <1> .fat12:
   200 00000A70 89D8                <1>     mov eax, ebx    ;Get sectorsize in ax
   201 00000A72 D1E0                <1>     shl eax, 1  ;Multiply by 2
   202 00000A74 B903000000          <1>     mov ecx, 3  ;1.5 bytes per FAT entry *2
   203 00000A79 52                  <1>     push rdx    ;Preserve number of sectors in FAT counter
   204 00000A7A 31D2                <1>     xor edx, edx
   205 00000A7C F7F1                <1>     div ecx
   206 00000A7E 5A                  <1>     pop rdx
   207 00000A7F 668905(11C60300)    <1>     mov word [entries], ax ;Get quotient (number of whole entries in sector) 
   208                              <1>     ;The value is rounded down so we can read the next sector for the 
   209                              <1>     ;last entry manually (thus buffering it if it not already buffered)
   210 00000A86 B102                <1>     mov cl, fatBuffer
   211 00000A88 488B05(09C60300)    <1>     mov rax, qword [tempSect]
   212 00000A8F E8DDFCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   213 00000A94 728D                <1>     jc .exitFail
   214 00000A96 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   215                              <1> .fat12SearchNewSector:
   216 00000A9A 0FB70D(11C60300)    <1>     movzx ecx, word [entries]   ;This is total entries in Sector rounded down
   217                              <1> .fat12Search:
   218 00000AA1 0FB707              <1>     movzx eax, word [rdi]   ;Get first word (EVEN ENTRY)
   219 00000AA4 25FF0F0000          <1>     and eax, 0FFFh   ;Clear upper nybble
   220 00000AA9 744A                <1>     jz .fat12EntryFound
   221 00000AAB 48FFC7              <1>     inc rdi ;Goto next byte
   222 00000AAE FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   223 00000AB0 0FB707              <1>     movzx eax, word [rdi]  ;Get second word (ODD ENTRY)
   224 00000AB3 C1E804              <1>     shr eax, 4  ;Shift down by 4
   225 00000AB6 743D                <1>     jz .fat12EntryFound
   226 00000AB8 48FFC7              <1>     inc rdi ;Goto next entry
   227 00000ABB FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   228 00000ABD 75E2                <1>     jnz .fat12Search
   229                              <1> ;We arrive here when we are at the last entry in the sector
   230 00000ABF 48FF05(09C60300)    <1>     inc qword [tempSect]    ;Get next Sector
   231 00000AC6 488B05(09C60300)    <1>     mov rax, qword [tempSect]   ;Get this sector in rax
   232 00000ACD B102                <1>     mov cl, fatBuffer
   233 00000ACF E89DFCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   234 00000AD4 0F8249FFFFFF        <1>     jc .exitFail
   235 00000ADA 0FB607              <1>     movzx eax, byte [rdi]  ;Get last byte in old buffer (rdi still points there)
   236 00000ADD 488D4B20            <1>     lea rcx, qword [rbx + bufferHdr.dataarea]   ;Go to data area (preserve rdi)
   237 00000AE1 8A21                <1>     mov ah, byte [rcx]  ;Get first byte in new sector
   238 00000AE3 C1E804              <1>     shr eax, 4  ;Clear out bottom nybble
   239 00000AE6 740D                <1>     jz .fat12EntryFound ;Found a sector!
   240                              <1>     ;Empty cluster not found in sector
   241 00000AE8 FFCA                <1>     dec edx ;Decrement sector count
   242 00000AEA 0F8439FFFFFF        <1>     jz .noFreeClusters
   243 00000AF0 4889CF              <1>     mov rdi, rcx    ;Set rdi to point at start of next sector
   244 00000AF3 EBA5                <1>     jmp short .fat12SearchNewSector ;Reload the number of entries and search
   245                              <1> .fat12EntryFound:
   246 00000AF5 E903FFFFFF          <1>     jmp .computeEntry   ;Unnecessary redirection
   247                              <1> 
   248                              <1> getDataSector:
   249                              <1> ;This function will request the sector of data in [currSectD].
   250                              <1> ;This call can only be used for DATA sectors.
   251                              <1> ;Preserves all registers
   252                              <1> ;On ret: CF=NC => currBuff = Buffer with data
   253                              <1> ;        CF=CY => Critical error occurred and was FAILed
   254 00000AFA 50                  <1>     push rax
   255 00000AFB 53                  <1>     push rbx
   256 00000AFC 51                  <1>     push rcx
   257 00000AFD 488B05(21C60300)    <1>     mov rax, qword [currSectD]  ;Get the disk sector number to read
   258 00000B04 BB01000000          <1>     mov ebx, dosBuffer
   259 00000B09 B908000000          <1>     mov ecx, dataBuffer 
   260 00000B0E 4885C0              <1>     test rax, rax
   261 00000B11 0F44CB              <1>     cmovz ecx, ebx  ;If sector 0, change to DOS buffer
   262                              <1> .getSectorRead:
   263 00000B14 E858FCFFFF          <1>     call getBuffer  ;Get ptr to buffer header in [currBuff] (and rbx but ignore)
   264 00000B19 59                  <1>     pop rcx
   265 00000B1A 5B                  <1>     pop rbx
   266 00000B1B 58                  <1>     pop rax
   267 00000B1C C3                  <1>     ret
   268                              <1> 
   269                              <1> getNextSectorOfFile:
   270                              <1> ;This function will read the next sector for a file into a buffer.
   271                              <1> ;If the next sector to be read lives in the next cluster, it will update
   272                              <1> ; the file handle of the file being read/written to the new cluster
   273                              <1> ;
   274                              <1> ;Input: rbp = dpb pointer
   275                              <1> ;Output:
   276                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   277                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File
   278                              <1> ;       CF=CY => Critical error occurred and was FAILed
   279                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   280                              <1> ; next cluster and read first sector 
   281                              <1>     ;Check if we need to go to next cluster
   282 00000B1D 8A05(20C60300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   283 00000B23 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   284 00000B26 7416                <1>     je .gotoNextCluster
   285                              <1>     ;Goto next sector in same cluster
   286 00000B28 FE05(20C60300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   287 00000B2E 48FF05(21C60300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk
   288 00000B35 488B05(21C60300)    <1>     mov rax, qword [currSectD]
   289                              <1> .exitOK:
   290 00000B3C F8                  <1>     clc
   291                              <1> .exitFail:
   292 00000B3D C3                  <1>     ret
   293                              <1> .gotoNextCluster:
   294 00000B3E 8B05(17C60300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   295 00000B44 E82A000000          <1>     call walkFAT
   296 00000B49 72F2                <1>     jc .exitFail
   297                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   298 00000B4B 3DFFFFFFFF          <1>     cmp eax, -1
   299 00000B50 74EA                <1>     je .exitOK
   300                              <1> ;Update the new cluster and sector information
   301 00000B52 8905(17C60300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   302 00000B58 FF05(13C60300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   303 00000B5E E815FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster
   304 00000B63 488905(21C60300)    <1>     mov qword [currSectD], rax  ;Save it
   305 00000B6A C605(20C60300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   306 00000B71 EBC9                <1>     jmp short .exitOK
   307                              <1> 
   308                              <1> 
   309                              <1> walkFAT:
   310                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   311                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   312                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   313                              <1> ;       rbp = DPB number
   314                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   315                              <1> ;If carry set, getBuffer failed!
   316 00000B73 53                  <1>     push rbx
   317 00000B74 51                  <1>     push rcx
   318 00000B75 52                  <1>     push rdx
   319 00000B76 57                  <1>     push rdi
   320 00000B77 55                  <1>     push rbp
   321 00000B78 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   322 00000B7A E8ADFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   323                              <1>     ;and FAT type in ecx
   324 00000B7F 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]
   325 00000B83 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   326 00000B85 51                  <1>     push rcx    ;Move FAT signature onto stack
   327 00000B86 B102                <1>     mov cl, fatBuffer
   328 00000B88 E8E4FBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   329 00000B8D 59                  <1>     pop rcx
   330 00000B8E 722D                <1>     jc .exitFail
   331                              <1>     ;Check if FAT 12, 16, 32
   332 00000B90 85C9                <1>     test ecx, ecx
   333 00000B92 742F                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   334 00000B94 F7C101000000        <1>     test ecx, 1
   335 00000B9A 7410                <1>     jz .goToNextClusterFat32
   336                              <1>     ;Here we handle FAT16
   337 00000B9C 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   338 00000BA1 663DFFFF            <1>     cmp ax, -1
   339 00000BA5 7515                <1>     jne .exit
   340 00000BA7 0FBEC0              <1>     movsx eax, al
   341 00000BAA EB10                <1>     jmp short .exit
   342                              <1> .goToNextClusterFat32:
   343 00000BAC 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   344 00000BB0 3DFFFFFFFF          <1>     cmp eax, -1
   345 00000BB5 7405                <1>     je .exit   ;If EOC, skip zeroing nybble
   346 00000BB7 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   347                              <1> .exit:
   348 00000BBC F8                  <1>     clc
   349                              <1> .exitFail:
   350 00000BBD 5D                  <1>     pop rbp
   351 00000BBE 5F                  <1>     pop rdi
   352 00000BBF 5A                  <1>     pop rdx
   353 00000BC0 59                  <1>     pop rcx
   354 00000BC1 5B                  <1>     pop rbx
   355 00000BC2 C3                  <1>     ret
   356                              <1> .gotoNextClusterFat12:
   357                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   358                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   359                              <1> 
   360 00000BC3 57                  <1>     push rdi    ;Save the cluster number on the stack
   361 00000BC4 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   362 00000BC7 FFC0                <1>     inc eax ;Get next sector
   363 00000BC9 B102                <1>     mov cl, fatBuffer
   364 00000BCB E8A1FBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   365 00000BD0 59                  <1>     pop rcx ;Return the cluster number in rcx
   366 00000BD1 72EA                <1>     jc .exitFail
   367                              <1>     ;rdi has first buffer header, rbx has second buffer header
   368                              <1>     ;rdx has offset into first header for entry
   369 00000BD3 F7C101000000        <1>     test ecx, 1  ;Check if cluster is odd
   370 00000BD9 7422                <1>     jz .gotoNextClusterFat12Even
   371                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   372 00000BDB 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   373 00000BDF 29D0                <1>     sub eax, edx
   374 00000BE1 FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   375 00000BE3 750E                <1>     jnz .gotoNextClusterFat12NoCross
   376                              <1>     ;Boundary cross, build entry properly
   377 00000BE5 31C0                <1>     xor eax, eax
   378 00000BE7 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   379 00000BEB 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   380 00000BEE C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   381 00000BF1 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   382                              <1> .gotoNextClusterFat12NoCross:
   383 00000BF3 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   384 00000BF8 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   385 00000BFB EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   386                              <1> .gotoNextClusterFat12Even:
   387                              <1>     ;Here the cluster is even and can't cross a sector boundary
   388 00000BFD 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   389 00000C02 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   390                              <1> .checkIfLastFAT12Cluster:
   391 00000C07 663DFF0F            <1>     cmp ax, 0FFFh
   392 00000C0B 75AF                <1>     jne .exit
   393 00000C0D B8FFFFFFFF          <1>     mov eax, -1
   394 00000C12 E9A5FFFFFF          <1>     jmp .exit
    24                                  %include "./Source/Kernel/FAT/findfile.asm"
    25                              <1> ;Generic Find First and Find Next functions here
    26                              <1> 
    27                              <1> genericFindFirst:
    28 00000C17 C3                  <1>     ret
    29                              <1> genericFindNext:
    30 00000C18 C3                  <1>     ret
    25                                  %include "./Source/Kernel/FileIO/devio.asm"
    26                              <1> ;This file contains the primitive dev io function, which will be called 
    27                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    28                              <1> ; make requests for device IO.
    29                              <1> 
    30                              <1> mainCharIO:
    31                              <1> ;This is the main IO clearing function for Char IO.
    32                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    33                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    34                              <1> ;
    35                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    36                              <1> ;       ah = {0,..., 5}, a subfunction number
    37                              <1> ;       Function 0: Read Char (drvREAD)
    38                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    39                              <1> ;       Function 2: Write Char (drvWrite)
    40                              <1> ; In the case the below functions are called for Disk/Net files
    41                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    42                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    43                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    44                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    45                              <1> ;
    46                              <1> ; If and only if ah = 02h, al = Char to write to device
    47                              <1> ;
    48                              <1> ;
    49                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    50                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    51                              <1> ;                                           ZF = NZ => Device ready (not busy)
    52                              <1> ;                                               If ND read, AL = Next Char
    53                              <1> ; For Files/Net:
    54                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    55                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    56                              <1> ;           For Read and ND Read:
    57                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    58                              <1> ;               Read returns ^Z on EOF.
    59                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    60                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    61                              <1> ;
    62                              <1> ;All registers preserved EXCEPT for ax and flags
    63                              <1> 
    64                              <1> ;Reference Request Header
    65                              <1> ;Common Section:
    66                              <1> ;    .hdrlen resb 1  ;Length of the request header
    67                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    68                              <1> ;    .cmdcde resb 1  ;Command code
    69                              <1> ;    .status resw 1  ;Status word
    70                              <1> ;    .devptr resq 1  ;Reserved. Unused
    71                              <1> ;Below used by calls 0,1,2,5
    72                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    73                              <1> ;Below used by calls 0,2
    74                              <1> ;    .bufptr resq 1
    75                              <1> ;    .tfrlen resd 1
    76                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    77                              <1> ;    .strtsc resq 1
    78                              <1> ;    .desptr resq 1
    79                              <1> 
    80                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    81 00000C19 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    82 00000C1A 488D1D(72C50300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    83 00000C21 48891D(FCC30300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    84 00000C28 5B                  <1>     pop rbx
    85 00000C29 C705(04C40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    85 00000C31 0000                <1>
    86 00000C33 668905(72C50300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    87 00000C3A 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    88 00000C40 0F859C000000        <1>     jnz .notChar
    89 00000C46 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    90 00000C4C 0F8490000000        <1>     jz .notChar
    91                              <1> ;Char devices only here
    92 00000C52 E81F180000          <1>     call dosPushRegs    ;Save context here
    93 00000C57 488D1DC8F4FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    94 00000C5E 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    95 00000C61 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    96 00000C64 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    97 00000C67 890D(EEC30300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    98                              <1>     ;Now set up cx for status word
    99 00000C6D 31C9                <1>     xor ecx, ecx
   100 00000C6F 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   101 00000C72 7506                <1>     jne .skipBsySet
   102 00000C74 81C900020000        <1>     or ecx, drvBsyStatus
   103                              <1> .skipBsySet:
   104 00000C7A 66870D(F1C30300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   105                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   106 00000C81 488D1D(EEC30300)    <1>     lea rbx, secdReqHdr
   107 00000C88 E8C2110000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   108 00000C8D 668B3D(F1C30300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   109 00000C94 F7C700800000        <1>     test edi, drvErrStatus
   110 00000C9A 752D                <1>     jnz .error
   111                              <1> .ignoreRet:
   112 00000C9C 803D(F0C30300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   113 00000CA3 750C                <1>     jne .notNDRead
   114 00000CA5 8A05(FBC30300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   115 00000CAB 8805(72C50300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   116                              <1> .notNDRead:
   117 00000CB1 8A25(F2C30300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   118 00000CB7 F6D4                <1>     not ah
   119 00000CB9 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   120 00000CBC E89E170000          <1>     call dosPopRegs ;Get back the context
   121 00000CC1 668B05(72C50300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   122                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 00000CC8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   123                              <1> .error:
   124                              <1>     ;cl has flags
   125 00000CC9 88CC                <1>     mov ah, cl
   126                              <1>     ;call charDevHardErr
   127 00000CCB 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   128 00000CCD 750A                <1>     jne .errorIgnore
   129                              <1>     ;Fallthrough => Retry
   130 00000CCF E88B170000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   131 00000CD4 E940FFFFFF          <1>     jmp mainCharIO  ;Retry operation
   132                              <1> .errorIgnore:
   133                              <1>     ;Clear the busy bit in the status word
   134 00000CD9 8025(F2C30300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   135 00000CE0 EBBA                <1>     jmp short .ignoreRet
   136                              <1> .notChar:
   137                              <1> ;Just return with ZF=NZ for now
   138 00000CE2 50                  <1>     push rax
   139 00000CE3 31C0                <1>     xor eax, eax
   140 00000CE5 FEC0                <1>     inc al
   141 00000CE7 58                  <1>     pop rax
   142                              <1>     return
    18                              <2> %%_ret:
    19 00000CE8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    26                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    27                              <1> ;-----------------------------------------------------------------------:
    28                              <1> ;                  DOS default char functions live here                 :
    29                              <1> ;                                                                       :
    30                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    31                              <1> ;                                                                       :
    32                              <1> ;Rules for the naming of the DOS functions                              :
    33                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    34                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    35                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    36                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    37                              <1> ;                                                                       :
    38                              <1> ;-----------------------------------------------------------------------:
    39                              <1> 
    40                              <1> charIn_BE:     ;ah = 01h
    41                              <1> ;Return char that has been read and echoed in al
    42 00000CE9 E866010000          <1>     call charIn_B
    43 00000CEE 50                  <1>     push rax
    44 00000CEF E804000000          <1>     call charOut_B.in    ;Output it to screen
    45 00000CF4 58                  <1>     pop rax
    46                              <1>     return
    18                              <2> %%_ret:
    19 00000CF5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    47                              <1> 
    48                              <1> charOut_B:       ;ah = 02h
    49                              <1> ;Bspace is regular cursor left, does not insert a blank
    50 00000CF6 88D0                <1>     mov al, dl
    51                              <1> .in:  ;Internal function Entry Point, with char in al
    52 00000CF8 3C20                <1>     cmp al, asciiCaret
    53 00000CFA 7277                <1>     jb .control
    54 00000CFC 3C7F                <1>     cmp al, DEL ;DEL char?
    55 00000CFE 7406                <1>     je .skipCurs
    56 00000D00 FE05(28C20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    57                              <1> .skipCurs:
    58 00000D06 FE05(2EC30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    59 00000D0C 8025(2EC30300)03    <1>     and byte [vConErr], 3
    60 00000D13 56                  <1>     push rsi
    61 00000D14 7507                <1>     jnz .skipErrorCheck
    62 00000D16 50                  <1>     push rax
    63 00000D17 E831020000          <1>     call vConCtrlCheck
    64 00000D1C 58                  <1>     pop rax
    65                              <1> .skipErrorCheck:
    66 00000D1D E8B9010000          <1>     call outputOnStdout
    67 00000D22 5E                  <1>     pop rsi
    68 00000D23 F605(2BC30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    69                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000D2A 74C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    70 00000D2C 53                  <1>     push rbx
    71 00000D2D 56                  <1>     push rsi
    72 00000D2E BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    73 00000D33 E8CE020000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    74 00000D38 7236                <1>     jc .exitPrintEcho
    75                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    76 00000D3A 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    77 00000D3E F7C300800000        <1>     test ebx, devRedirDev
    78 00000D44 752A                <1>     jnz .exitPrintEcho  ;Exit if STDOUT is redir
    79 00000D46 F7C380000000        <1>     test ebx, devCharDev
    80 00000D4C 7422                <1>     jz .exitPrintEcho
    81 00000D4E BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    82 00000D53 E8AE020000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    83 00000D58 7216                <1>     jc .exitPrintEcho   ;Exit if handle closed
    84 00000D5A 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    85 00000D60 7407                <1>     jz .netSpool
    86 00000D62 E8A8010000          <1>     call outputOnSFT
    87 00000D67 EB07                <1>     jmp short .exitPrintEcho
    88                              <1> .netSpool:
    89 00000D69 C605(2BC30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    90                              <1> .exitPrintEcho:
    91 00000D70 5E                  <1>     pop rsi
    92 00000D71 5B                  <1>     pop rbx
    93                              <1>     return
    18                              <2> %%_ret:
    19 00000D72 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    94                              <1> .control:
    95 00000D73 3C0D                <1>     cmp al, CR
    96 00000D75 7425                <1>     je .newline
    97 00000D77 3C08                <1>     cmp al, BSP
    98 00000D79 742D                <1>     je .back
    99 00000D7B 3C09                <1>     cmp al, TAB
   100 00000D7D 7587                <1>     jne .skipCurs   ;Treat as normal
   101                              <1>     ;TAB key here
   102                              <1> .tab:
   103 00000D7F 51                  <1>     push rcx
   104 00000D80 0FB60D(28C20300)    <1>     movzx ecx, byte [vConCursPos]
   105 00000D87 80C9F8              <1>     or cl, ~7
   106 00000D8A F6D9                <1>     neg cl
   107 00000D8C 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   108                              <1> .tabloop:
   109 00000D8F B020                <1>     mov al, SPC
   110 00000D91 E862FFFFFF          <1>     call charOut_B.in   ;Output the char
   111 00000D96 FEC9                <1>     dec cl
   112 00000D98 75F5                <1>     jnz .tabloop
   113                              <1> .stopTab:
   114 00000D9A 59                  <1>     pop rcx
   115                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 00000D9B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   116                              <1> .newline:
   117 00000D9C C605(28C20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   118 00000DA3 E95EFFFFFF          <1>     jmp .skipCurs   ;And echo 
   119                              <1> .back:
   120 00000DA8 FE0D(28C20300)      <1>     dec byte [vConCursPos]
   121 00000DAE E953FFFFFF          <1>     jmp .skipCurs   ;And echo
   122                              <1> 
   123                              <1> auxIn_B:        ;ah = 03h
   124 00000DB3 E895010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   125 00000DB8 BB03000000          <1>     mov ebx, 3
   126 00000DBD E844020000          <1>     call getCharDevSFT
   127                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000DC2 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   128                              <1> .auxloop:
   129 00000DC4 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   130 00000DC6 E84EFEFFFF          <1>     call mainCharIO
   131 00000DCB 7408                <1>     jz .signalLoop
   132 00000DCD 30E4                <1>     xor ah, ah  ;Read the char in
   133 00000DCF E845FEFFFF          <1>     call mainCharIO
   134                              <1>     return
    18                              <2> %%_ret:
    19 00000DD4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   135                              <1> .signalLoop:
   136 00000DD5 E850010000          <1>     call callInt48h
   137 00000DDA EBE8                <1>     jmp short .auxloop
   138                              <1> 
   139                              <1> auxOut_B:       ;ah = 04h
   140 00000DDC 53                  <1>     push rbx
   141 00000DDD BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   142 00000DE2 EB06                <1>     jmp short auxOutCmn
   143                              <1> prnOut_B:       ;ah = 05h
   144 00000DE4 53                  <1>     push rbx
   145 00000DE5 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   146                              <1> auxOutCmn: ;Auxilliary output device common 
   147 00000DEA 88D0                <1>     mov al, dl  ;Get the char into al
   148 00000DEC 50                  <1>     push rax
   149 00000DED E85B010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   150 00000DF2 58                  <1>     pop rax
   151 00000DF3 56                  <1>     push rsi
   152 00000DF4 E80F010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   153 00000DF9 5E                  <1>     pop rsi
   154 00000DFA 5B                  <1>     pop rbx
   155                              <1>     return
    18                              <2> %%_ret:
    19 00000DFB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   156                              <1> 
   157                              <1> directConIO:    ;ah = 06h
   158 00000DFC 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   159 00000DFE 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   160 00000E00 0F85D5000000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   161                              <1> ;Here is the read char direct function
   162 00000E06 31DB                <1>     xor ebx, ebx    
   163 00000E08 E8F9010000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   164                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000E0D 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   165 00000E0F 488B2D(D3C30300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   166 00000E16 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   167 00000E18 E8FCFDFFFF          <1>     call mainCharIO
   168 00000E1D E808010000          <1>     call callInt48h ;This preserves flags so call here!
   169 00000E22 7507                <1>     jnz .readChar
   170 00000E24 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   171 00000E28 30C0                <1>     xor al, al  ;Set caller return code to 0
   172                              <1>     return
    18                              <2> %%_ret:
    19 00000E2A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   173                              <1> .readChar:
   174 00000E2B 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   175                              <1>     ;Fallthrough here to get the char at STDIN
   176                              <1> charIn:         ;ah = 07h
   177                              <1> ;Return char in al from STDIN without waiting
   178 00000E2F 31DB                <1>     xor ebx, ebx
   179 00000E31 E8D0010000          <1>     call getCharDevSFT
   180                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000E36 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   181 00000E38 B401                <1>     mov ah, 01  ;ND read for char
   182 00000E3A E8DAFDFFFF          <1>     call mainCharIO
   183 00000E3F 750B                <1>     jnz .getChar
   184 00000E41 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   185 00000E43 CD4A                <1>     int 4Ah
   186 00000E45 E8E0000000          <1>     call callInt48h
   187 00000E4A EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   188                              <1> .getChar:
   189                              <1>     ;Get the char in al and exit
   190 00000E4C 30E4                <1>     xor ah, ah
   191 00000E4E E8C6FDFFFF          <1>     call mainCharIO
   192                              <1>     return
    18                              <2> %%_ret:
    19 00000E53 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   193                              <1> charIn_B:       ;ah = 08h
   194                              <1> ;Return char in al from STDIN
   195 00000E54 56                  <1>     push rsi
   196                              <1> .readAgain:
   197 00000E55 E8F3000000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   198                              <1>     ;Also sets rsi to point to the device SFT for 
   199 00000E5A 7516                <1>     jnz .pullChar
   200 00000E5C 803D(55D80300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   201 00000E63 7507                <1>     jne .skiplookahead
   202 00000E65 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   203 00000E67 E8ADFDFFFF          <1>     call mainCharIO
   204                              <1> .skiplookahead:
   205 00000E6C B484                <1>     mov ah, 84h
   206 00000E6E CD4A                <1>     int 4ah ;Multitasking keyboard loop
   207 00000E70 EBE3                <1>     jmp short .readAgain
   208                              <1> .pullChar:
   209 00000E72 30E4                <1>     xor ah, ah
   210 00000E74 E8A0FDFFFF          <1>     call mainCharIO ;Pull char from device buffer
   211 00000E79 5E                  <1>     pop rsi
   212 00000E7A 3C00                <1>     cmp al, NUL ;Is this the null char?
   213 00000E7C 7507                <1>     jne .exit
   214                              <1>     ;We are mid extended ascii, prevent printer toggling
   215 00000E7E C605(56D80300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   216                              <1> .exit:
   217                              <1>     return
    18                              <2> %%_ret:
    19 00000E85 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   218                              <1> 
   219                              <1> printString_B:      ;ah = 09h
   220 00000E86 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   221                              <1> .ps0:
   222 00000E89 AC                  <1>     lodsb   ;Get char in al and inc rsi
   223 00000E8A 3C24                <1>     cmp al, "$" ;End of string char?
   224                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000E8C 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   225 00000E8E E865FEFFFF          <1>     call charOut_B.in
   226 00000E93 EBF4                <1>     jmp short .ps0
   227                              <1> 
   228                              <1> checkStdinStatus:  ;ah = 0Bh
   229                              <1> ;Returns the status of the driver controlling vCon
   230 00000E95 E8B3000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   231 00000E9A B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   232                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000E9C 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   233 00000E9E FEC8                <1>     dec al  ;Set al to -1 if char available
   234                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 00000EA0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   235                              <1> clearbuffDoFunc:   ;ah = 0Ch
   236                              <1> ;Clears any buffers and issues a console read command (the command in al)
   237                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   238 00000EA1 50                  <1>     push rax
   239 00000EA2 52                  <1>     push rdx
   240 00000EA3 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   241 00000EA5 E85C010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   242 00000EAA 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   243 00000EAC B404                <1>     mov ah, 04h ;Flush input buffers
   244 00000EAE E866FDFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   245                              <1> .skipFlush:
   246 00000EB3 5A                  <1>     pop rdx
   247 00000EB4 58                  <1>     pop rax
   248 00000EB5 88C4                <1>     mov ah, al  ;Move function number into ah
   249 00000EB7 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   250 00000EB9 7507                <1>     jne .others
   251 00000EBB 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   252 00000EBE 7412                <1>     jz .bad ;Yes, exit
   253 00000EC0 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   254                              <1> .others:
   255 00000EC2 3C01                <1>     cmp al, 01h
   256 00000EC4 740F                <1>     je .callFunction
   257 00000EC6 3C07                <1>     cmp al, 07h
   258 00000EC8 740B                <1>     je .callFunction
   259 00000ECA 3C08                <1>     cmp al, 08h
   260 00000ECC 7407                <1>     je .callFunction
   261 00000ECE 3C0A                <1>     cmp al, 0Ah
   262 00000ED0 7403                <1>     je .callFunction
   263                              <1> .bad:
   264 00000ED2 30C0                <1>     xor al, al
   265                              <1>     return
    18                              <2> %%_ret:
    19 00000ED4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   266                              <1> .callFunction:
   267 00000ED5 FA                  <1>     cli ;Prepare to swap stack pointer
   268                              <1>     ;The below address avoids "properly" reentering DOS
   269                              <1>     ;We simply reuse the function dispatch aspect and 
   270                              <1>     ; return the stack pointer to the top.
   271 00000ED6 E9B3140000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   272                              <1> ;------------------------
   273                              <1> ;  Primitive functions  :
   274                              <1> ;------------------------
   275                              <1> outputOnStdout:
   276                              <1> ;Input: al = Char to output
   277                              <1> ;Output: CF=CY, all good
   278 00000EDB 53                  <1>     push rbx
   279 00000EDC BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   280 00000EE1 E820010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   281 00000EE6 7217                <1>     jc .exit
   282 00000EE8 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   283 00000EEE 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   284 00000EF0 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   285 00000EF4 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   286 00000EFA 7405                <1>     jz .notCharDevOrFast
   287 00000EFC CD49                <1>     int 49h ;Fast output
   288                              <1> .exitOk:
   289 00000EFE F8                  <1>     clc
   290                              <1> .exit:
   291 00000EFF 5B                  <1>     pop rbx
   292                              <1>     return
    18                              <2> %%_ret:
    19 00000F00 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   293                              <1> .notCharDevOrFast:
   294 00000F01 E809000000          <1>     call outputOnSFT
   295 00000F06 5B                  <1>     pop rbx
   296                              <1>     return
    18                              <2> %%_ret:
    19 00000F07 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   297                              <1> 
   298                              <1> outputToHandle:
   299                              <1> ;Char to output must be in al
   300 00000F08 E8F9000000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   301                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000F0D 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   302                              <1> outputOnSFT:
   303                              <1> ;Output char in al to SFT in rsi
   304                              <1> ;Waits until device is not busy to send char.
   305                              <1> ;Calls int 48h if device busy
   306 00000F0F 50                  <1>     push rax
   307 00000F10 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   308 00000F12 E802FDFFFF          <1>     call mainCharIO
   309 00000F17 58                  <1>     pop rax
   310 00000F18 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   311 00000F1A B402                <1>     mov ah, 02h ;Output char in al
   312 00000F1C E8F8FCFFFF          <1>     call mainCharIO
   313 00000F21 F8                  <1>     clc
   314                              <1>     return
    18                              <2> %%_ret:
    19 00000F22 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   315                              <1> .signalLoop:
   316 00000F23 E802000000          <1>     call callInt48h
   317 00000F28 EBE5                <1>     jmp short outputOnSFT
   318                              <1> 
   319                              <1> callInt48h:
   320                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   321 00000F2A 9C                  <1>     pushfq
   322 00000F2B F605(ECC30300)FF    <1>     test byte [int48Flag], -1
   323 00000F32 7417                <1>     jz .exit    ;If zero, not safe
   324 00000F34 F605(63C30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   325 00000F3B 750E                <1>     jnz .exit
   326                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   327 00000F3D FF35(ECC30300)      <1>     push qword [int48Flag] 
   328 00000F43 CD48                <1>     int 48h
   329 00000F45 8F05(ECC30300)      <1>     pop qword [int48Flag]    ;Return original value
   330                              <1> .exit:
   331 00000F4B 9D                  <1>     popfq
   332                              <1>     return
    18                              <2> %%_ret:
    19 00000F4C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   333                              <1> 
   334                              <1> 
   335                              <1> vConCtrlCheck:
   336                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   337                              <1> ; the processing. 
   338                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   339                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   340                              <1> ;
   341                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   342                              <1> ;^S will pause screen processing until another key is processed by vCon input
   343                              <1> ;^P will toggle the printer echo feature of the vConsole
   344                              <1> ;
   345                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   346                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   347                              <1> ;
   348                              <1> ;Output: 
   349                              <1> ;   CF=CY : Error
   350                              <1> ;   CF=NC : ...
   351                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   352                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   353 00000F4D E817010000          <1>     call checkBreak ;Check if there is a ^C on CON
   354 00000F52 53                  <1>     push rbx
   355 00000F53 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   356 00000F55 E8AC000000          <1>     call getCharDevSFT
   357 00000F5A 5B                  <1>     pop rbx
   358                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000F5B 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   359 00000F5D B401                <1>     mov ah, 01  ;Non destructively read CON
   360 00000F5F E8B5FCFFFF          <1>     call mainCharIO
   361 00000F64 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   362                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   363 00000F66 3C13                <1>     cmp al, DC3 ;^S ?
   364 00000F68 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   365 00000F6A 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   366 00000F6C E8A8FCFFFF          <1>     call mainCharIO
   367 00000F71 E958000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   368                              <1> .checkPrintOrExit:
   369 00000F76 3C10                <1>     cmp al, DLE ;Do we have ^P?
   370 00000F78 745D                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   371 00000F7A 3C03                <1>     cmp al, ETX ;Do we have ^C?
   372 00000F7C 7459                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   373                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   374                              <1>     return 
    18                              <2> %%_ret:
    19 00000F7E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   375                              <1> .printToggle:
   376 00000F7F F615(2BC30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   377 00000F85 53                  <1>     push rbx
   378 00000F86 BB04000000          <1>     mov ebx, 4  ;PRN handle
   379 00000F8B E876000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   380 00000F90 5B                  <1>     pop rbx
   381                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000F91 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   382 00000F93 57                  <1>     push rdi
   383 00000F94 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   384 00000F97 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   385 00000F9D 741D                <1>     jz .notNet
   386 00000F9F 50                  <1>     push rax
   387 00000FA0 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   388 00000FA5 CD4F                <1>     int 4Fh
   389 00000FA7 58                  <1>     pop rax
   390 00000FA8 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   391                              <1>     ;If something went wrong, turn off echo
   392 00000FAA C605(2BC30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   393 00000FB1 50                  <1>     push rax
   394 00000FB2 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   395 00000FB7 CD4F                <1>     int 4Fh
   396 00000FB9 58                  <1>     pop rax
   397 00000FBA EB0B                <1>     jmp short .printExit    ;Skip the following for local printers
   398                              <1> .notNet:
   399                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   400                              <1> ; 0Dh or 0Eh
   401 00000FBC 803D(2BC30300)00    <1>     cmp byte [printEcho], 00
   402 00000FC3 7502                <1>     jnz .echoOn
   403                              <1>     ;Here do something with echo off!
   404 00000FC5 EB00                <1>     jmp short .printExit
   405                              <1> .echoOn:
   406                              <1>     ;Here do something with echo on!
   407                              <1> .printExit:
   408 00000FC7 5F                  <1>     pop rdi
   409                              <1>     return
    18                              <2> %%_ret:
    19 00000FC8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   410                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   411 00000FC9 E85CFFFFFF          <1>     call callInt48h
   412                              <1> .waitNextChar:   ;Here get next char
   413 00000FCE B401                <1>     mov ah, 01h ;ND read
   414 00000FD0 E844FCFFFF          <1>     call mainCharIO
   415 00000FD5 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   416                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   417 00000FD7 53                  <1>     push rbx
   418 00000FD8 31DB                <1>     xor ebx, ebx
   419 00000FDA E827000000          <1>     call getCharDevSFT
   420 00000FDF 5B                  <1>     pop rbx
   421                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000FE0 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   422 00000FE2 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   423 00000FE4 E830FCFFFF          <1>     call mainCharIO
   424 00000FE9 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   425 00000FEB 7510                <1>     jnz .checkBreak2
   426 00000FED 803D(56D80300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   427 00000FF4 7489                <1>     jz .printToggle ;If 0, toggle!
   428 00000FF6 C605(56D80300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   429                              <1> .checkBreak2:
   430 00000FFD 3C03                <1>     cmp al, ETX
   431                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000FFF 75C7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   432 00001001 E9E00D0000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   433                              <1> 
   434                              <1> 
   435                              <1> getCharDevSFT:
   436                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   437                              <1> ;Input: bx = zero extended handle number
   438                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   439                              <1> ;        CF=CY => al = Error code, abort operation
   440 00001006 F605(EBC30300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   441 0000100D 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   442                              <1> .getSFT:
   443 0000100F 57                  <1>     push rdi
   444 00001010 E8E0060000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   445 00001015 4889FE              <1>     mov rsi, rdi
   446 00001018 5F                  <1>     pop rdi
   447                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 00001019 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   448                              <1> .swap:
   449                              <1> ;workingSFT is only set for CON calls
   450 0000101A 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   451 00001020 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   452 00001022 488B35(8CC50300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   453 00001029 F8                  <1>     clc
   454                              <1>     return
    18                              <2> %%_ret:
    19 0000102A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   455                              <1> 
   456                              <1> ;------------------------
   457                              <1> ;   Utility functions   :
   458                              <1> ;------------------------
   459                              <1> printCaretASCII:
   460                              <1> ;Input: al = Char to print with a caret
   461                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   462                              <1> ;First check if the char should be careted, and then print normally if so
   463 0000102B 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   464 0000102D 0F83C5FCFFFF        <1>     jae charOut_B.in
   465 00001033 3C09                <1>     cmp al, TAB
   466 00001035 0F84BDFCFFFF        <1>     je charOut_B.in
   467 0000103B 3C15                <1>     cmp al, NAK
   468 0000103D 0F84B5FCFFFF        <1>     je charOut_B.in
   469 00001043 3C14                <1>     cmp al, DC4
   470 00001045 0F84ADFCFFFF        <1>     je charOut_B.in
   471 0000104B 50                  <1>     push rax
   472 0000104C B05E                <1>     mov al, "^" ;Get caret in place
   473 0000104E E8A5FCFFFF          <1>     call charOut_B.in
   474 00001053 58                  <1>     pop rax
   475 00001054 0440                <1>     add al, "@" ;Turn into an ASCII Char
   476 00001056 E99DFCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   477                              <1> printCRLF:
   478 0000105B B00D                <1>     mov al, CR
   479 0000105D E896FCFFFF          <1>     call charOut_B.in
   480 00001062 B00A                <1>     mov al, LF
   481 00001064 E98FFCFFFF          <1>     jmp charOut_B.in
   482                              <1> 
   483                              <1> checkBreak:
   484                              <1> ;Reads bytes from CON if there are any bytes to read and 
   485                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   486 00001069 803D(64C30300)01    <1>     cmp byte [inDOS], 1
   487                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001070 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   488                              <1> ;Returns in al the keystroke that is available IF one is available
   489                              <1> ; or al=0 if no keystroke available
   490 00001072 53                  <1>     push rbx
   491 00001073 56                  <1>     push rsi
   492 00001074 488B35(44C00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   493                              <1>     ;Place command code and a zero status word at the same time
   494 0000107B C705(44C40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   494 00001083 0000                <1>
   495                              <1>     ;Place the packet size in the hdrlen field
   496 00001085 C605(42C40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   497 0000108C 488D1D(42C40300)    <1>     lea rbx, critReqHdr
   498 00001093 E8BB0D0000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   499                              <1>     ;Check if the busy bit is set (No keystroke available)
   500 00001098 66F705(45C40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   500 000010A0 02                  <1>
   501 000010A1 7405                <1>     jz .charFound
   502                              <1> .exit:
   503 000010A3 30C0                <1>     xor al, al
   504 000010A5 5E                  <1>     pop rsi
   505 000010A6 5B                  <1>     pop rbx
   506                              <1>     return
    18                              <2> %%_ret:
    19 000010A7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   507                              <1> .charFound:
   508                              <1> ;Keystroke available, proceed
   509 000010A8 8A05(4FC40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   510 000010AE 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   511 000010B0 75F1                <1>     jne .exit   ;If not equal exit
   512                              <1> ;Now we pull the char out of the buffer
   513 000010B2 C705(44C40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   513 000010BA 0000                <1>
   514 000010BC C605(42C40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   515                              <1>     ;Place pointers and number of chars
   516 000010C3 C705(58C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   516 000010CB 0000                <1>
   517                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   518 000010CD 488D05(4FC40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   519 000010D4 488905(50C40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   520 000010DB E8730D0000          <1>     call goDriver   ;RSI and RBX as before
   521 000010E0 E9010D0000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   522                              <1> 
   523                              <1> vConSwapDriver:
   524                              <1> ;Sets up the vCon to use the alternative SFT pointer
   525 000010E5 57                  <1>     push rdi
   526 000010E6 C605(EBC30300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   527 000010ED 488B3D(F7C50300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   528 000010F4 48893D(8CC50300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   529 000010FB 5F                  <1>     pop rdi
   530                              <1>     return
    18                              <2> %%_ret:
    19 000010FC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> ;--------------------------------------------------
   533                              <1> ;      Main Keyboard Buffered Input Function      :
   534                              <1> ;--------------------------------------------------
   535                              <1> buffCharInput_BE:  ;ah = 0Ah
   536                              <1> ;Buffer pointer in rdx
   537                              <1> ; byte [rdx + 0], buffer length
   538                              <1> ; byte [rdx + 1], number of chars in buffer
   539                              <1> ; byte [rdx + 2], buffer start
   540                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   541                              <1> ;Register use
   542                              <1> ; dh = Char offset in internal buffer
   543                              <1> ; dl = Buffer length
   544                              <1> ; bh = Char offset in user buffer
   545                              <1> ; bl = Number of chars already in the buffer
   546                              <1> ; rdi = Internal buffer
   547                              <1> ; rsi = User buffer
   548 000010FD 4889D6              <1>     mov rsi, rdx
   549 00001100 66AD                <1>     lodsw   ;Get buffer metadata in ax
   550 00001102 84C0                <1>     test al, al
   551                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001104 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   552 00001106 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   553 00001109 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   554 0000110B 7606                <1>     jbe .avoidcheck
   555 0000110D 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   556 00001111 7402                <1>     je .functionKeyOk
   557                              <1> .avoidcheck:
   558 00001113 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   559                              <1> .functionKeyOk:
   560 00001115 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   561 00001118 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   562                              <1> .breakEP:
   563 0000111A 8A05(28C20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   564 00001120 8805(29C20300)      <1>     mov byte [vConCurCnt], al
   565 00001126 56                  <1>     push rsi    ;Push user buffer address
   566 00001127 488D3D(2AC20300)    <1>     lea rdi, vConBuffer
   567 0000112E C605(7AC50300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   568                              <1> .mainLoop:
   569 00001135 E81AFDFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   570 0000113A 3C0A                <1>     cmp al, LF
   571 0000113C 7505                <1>     jne .checkControlChars
   572                              <1> .mainLoop2:
   573 0000113E E811FDFFFF          <1>     call charIn_B
   574                              <1> .checkControlChars:
   575 00001143 3C06                <1>     cmp al, ACK
   576 00001145 74F7                <1>     je .mainLoop2   ;Get another char
   577 00001147 3A05D5EEFFFF        <1>     cmp al, byte [oemESC]   ;Is it our ESC key?
   578 0000114D 0F8426010000        <1>     je .escape
   579 00001153 3C7F                <1>     cmp al, DEL
   580 00001155 0F8489000000        <1>     je .delete
   581 0000115B 3C08                <1>     cmp al, BSP
   582 0000115D 0F8481000000        <1>     je .delete
   583 00001163 3C17                <1>     cmp al, ETB
   584                              <1>     ;Add space for patched jump instructions
   585 00001165 9090909090          <1>     db 5 dup (90h)  ;NOP
   586 0000116A 3C15                <1>     cmp al, NAK
   587 0000116C 9090909090          <1>     db 5 dup (90h)
   588 00001171 3C0D                <1>     cmp al, CR
   589 00001173 744C                <1>     je .carriageReturn
   590 00001175 3C0A                <1>     cmp al, LF
   591 00001177 7461                <1>     je .lineFeed
   592 00001179 3A05A4EEFFFF        <1>     cmp al, byte [oemBreak] ;Is this our Break key?
   593 0000117F 7429                <1>     je .break
   594                              <1> .checkIfCanInsert:
   595 00001181 38D6                <1>     cmp dh, dl
   596 00001183 731C                <1>     jae .bufOflw
   597 00001185 AA                  <1>     stosb   ;Store the byte and increment rdi!
   598 00001186 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   599 00001188 E89EFEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   600 0000118D 803D(7AC50300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   601 00001194 75A8                <1>     jne .mainLoop2
   602                              <1>     ;IF not in insert mode, we fall here
   603                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   604                              <1>     ; or insert chars if needed.
   605 00001196 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   606 00001198 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   607 0000119A 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   608 0000119D FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   609 0000119F EB9D                <1>     jmp short .mainLoop2
   610                              <1> .bufOflw:
   611                              <1> ;Buffer overflow
   612 000011A1 B007                <1>     mov al, BEL ;Sound the bell
   613 000011A3 E850FBFFFF          <1>     call charOut_B.in   ;Call this with char in al
   614 000011A8 EB94                <1>     jmp short .mainLoop2
   615                              <1> .break:
   616                              <1> ;Break, Place a "\", and do a CRLF
   617 000011AA B05C                <1>     mov al, "\"
   618 000011AC E847FBFFFF          <1>     call charOut_B.in
   619 000011B1 5E                  <1>     pop rsi ;Realign stack
   620                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   621 000011B2 E8A4FEFFFF          <1>     call printCRLF
   622                              <1>     ;Align to next tabstop
   623 000011B7 E8C3FBFFFF          <1>     call charOut_B.tab
   624 000011BC E959FFFFFF          <1>     jmp .breakEP
   625                              <1> .carriageReturn:
   626 000011C1 AA                  <1>     stosb
   627 000011C2 E831FBFFFF          <1>     call charOut_B.in
   628 000011C7 5F                  <1>     pop rdi ;User buffer address was pushed 
   629 000011C8 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   630 000011CB FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   631                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   632 000011CD 488D35(2AC20300)    <1>     lea rsi, vConBuffer
   633 000011D4 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   634 000011D7 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   635                              <1>     return
    18                              <2> %%_ret:
    19 000011D9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   636                              <1> .lineFeed:
   637 000011DA E87CFEFFFF          <1>     call printCRLF
   638 000011DF E95AFFFFFF          <1>     jmp .mainLoop2
   639                              <1> .delete:
   640 000011E4 E805000000          <1>     call .removeChar
   641 000011E9 E950FFFFFF          <1>     jmp .mainLoop2
   642                              <1> .removeChar:
   643 000011EE 84F6                <1>     test dh, dh ;Is char count 0?
   644 000011F0 741C                <1>     jz .normalChar   ;If so, skip going back!
   645 000011F2 E868000000          <1>     call .vConErase
   646 000011F7 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   647 000011F9 3C20                <1>     cmp al, SPC
   648 000011FB 7311                <1>     jae .normalChar
   649 000011FD 3C09                <1>     cmp al, TAB
   650 000011FF 7420                <1>     je .eraTab
   651 00001201 3C15                <1>     cmp al, NAK
   652 00001203 7409                <1>     je .normalChar
   653 00001205 3C14                <1>     cmp al, DC4
   654 00001207 7405                <1>     je .normalChar
   655 00001209 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   656                              <1> .normalChar:
   657 0000120E 803D(7AC50300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   658                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001215 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   659 00001217 84FF                <1>     test bh, bh ;Beginning of user buffer?
   660                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001219 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   661 0000121B 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   662 0000121E FECF                <1>     dec bh
   663                              <1>     return
    18                              <2> %%_ret:
    19 00001220 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   664                              <1> .eraTab:
   665                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   666                              <1> ; up to a tab stop worth of space chars printed
   667 00001221 57                  <1>     push rdi
   668 00001222 48FFCF              <1>     dec rdi
   669 00001225 FD                  <1>     std ;Go backwards
   670 00001226 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   671 00001229 B020                <1>     mov al, SPC
   672 0000122B 53                  <1>     push rbx
   673 0000122C BB07000000          <1>     mov ebx, 7
   674 00001231 67E30D              <1>     jecxz .onTabstop
   675                              <1> .scanString:
   676 00001234 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   677 00001235 7608                <1>     jbe .notChar    ;No, skip handling
   678 00001237 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   679 0000123B 740A                <1>     je .tabChar
   680 0000123D FECB                <1>     dec bl
   681                              <1> .notChar:
   682 0000123F E2F3                <1>     loop .scanString
   683                              <1> .onTabstop:
   684 00001241 2A1D(29C20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   685                              <1> .tabChar:
   686 00001247 28F3                <1>     sub bl, dh  ;Same on tabstop
   687 00001249 00D9                <1>     add cl, bl
   688 0000124B 80E107              <1>     and cl, 7
   689 0000124E 5B                  <1>     pop rbx
   690 0000124F 5F                  <1>     pop rdi
   691 00001250 FC                  <1>     cld
   692 00001251 74BB                <1>     jz .normalChar
   693                              <1>     ;Now erase all the spaces placed on the vCon
   694                              <1> .vConDelTab:
   695 00001253 E80C000000          <1>     call .vConEraseNoDec
   696 00001258 E2F9                <1>     loop .vConDelTab
   697 0000125A E9AFFFFFFF          <1>     jmp .normalChar
   698                              <1> .vConErase:
   699                              <1> ;Erase the char on the vCon
   700                              <1> ;Return through the output function
   701 0000125F 48FFCF              <1>     dec rdi ;Go back a space in the 
   702 00001262 FECE                <1>     dec dh  ;Decrement char count in the buffer
   703                              <1> .vConEraseNoDec:
   704 00001264 B008                <1>     mov al, BSP ;Move cursor back
   705 00001266 E88DFAFFFF          <1>     call charOut_B.in
   706 0000126B B020                <1>     mov al, SPC ;Replace with a space
   707 0000126D E886FAFFFF          <1>     call charOut_B.in
   708 00001272 B008                <1>     mov al, BSP ;Move cursor back again
   709 00001274 E97FFAFFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   710                              <1> .escape:
   711                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   712                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   713                              <1> ; including the function keys.
   714 00001279 FF259BEDFFFF        <1>     jmp [oemKeyFunc]    ;Jump to the "OEM "address here
   715                              <1> .f2:
   716 0000127F E846000000          <1>     call .fCommon2
   717 00001284 EB0C                <1>     jmp short .fCommon
   718                              <1> .f3:
   719 00001286 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   720 00001289 28F9                <1>     sub cl, bh  ;Sub our current position
   721 0000128B EB05                <1>     jmp short .fCommon
   722                              <1> .f1:
   723 0000128D B901000000          <1>     mov ecx, 1  ;Get one char
   724                              <1> .fCommon:
   725 00001292 C605(7AC50300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   726 00001299 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   727 0000129B 0F849DFEFFFF        <1>     je .mainLoop2
   728 000012A1 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   729 000012A3 0F8495FEFFFF        <1>     je .mainLoop2
   730                              <1>     ;Else, copy byte by byte, and retain char in al
   731 000012A9 AC                  <1>     lodsb
   732 000012AA AA                  <1>     stosb
   733 000012AB E87BFDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   734 000012B0 FEC7                <1>     inc bh
   735 000012B2 FEC6                <1>     inc dh
   736 000012B4 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   737 000012B6 E983FEFFFF          <1>     jmp .mainLoop2
   738                              <1> .f4:
   739 000012BB E80A000000          <1>     call .fCommon2
   740 000012C0 4801CE              <1>     add rsi, rcx
   741 000012C3 00CF                <1>     add bh, cl
   742 000012C5 E974FEFFFF          <1>     jmp .mainLoop2
   743                              <1> .fCommon2:
   744 000012CA E885FBFFFF          <1>     call charIn_B   ;Get a char in al
   745 000012CF 3A054DEDFFFF        <1>     cmp al, byte [oemESC]   ;IS this the escape char?
   746 000012D5 750B                <1>     jne .fnotEscape
   747                              <1>     ;Get another char if they typed escape and force it in the buffer
   748                              <1>     ; Do not return to caller
   749 000012D7 E878FBFFFF          <1>     call charIn_B
   750                              <1> .fforceExit:
   751 000012DC 59                  <1>     pop rcx ;Get original return address from stack
   752 000012DD E95CFEFFFF          <1>     jmp .mainLoop2
   753                              <1> .fnotEscape:
   754 000012E2 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   755 000012E5 28F9                <1>     sub cl, bh
   756 000012E7 74F3                <1>     jz .fforceExit
   757 000012E9 FFC9                <1>     dec ecx
   758 000012EB 74EF                <1>     jz .fforceExit
   759 000012ED 57                  <1>     push rdi
   760 000012EE 4889F7              <1>     mov rdi, rsi
   761 000012F1 48FFC7              <1>     inc rdi
   762 000012F4 F2AE                <1>     repne scasb ;Search for the char to start printing from
   763 000012F6 5F                  <1>     pop rdi
   764 000012F7 75E3                <1>     jne .fforceExit ;If char not found, return
   765 000012F9 F7D1                <1>     not ecx
   766 000012FB 00D9                <1>     add cl, bl
   767 000012FD 28F9                <1>     sub cl, bh
   768                              <1>     return
    18                              <2> %%_ret:
    19 000012FF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   769                              <1> .f5:
   770 00001300 B040                <1>     mov al, "@"
   771 00001302 E8F1F9FFFF          <1>     call charOut_B.in   ;Print the char
   772 00001307 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   773 00001308 57                  <1>     push rdi
   774 00001309 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   775 0000130E 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   776 0000130F 88F3                <1>     mov bl, dh
   777 00001311 E99CFEFFFF          <1>     jmp .breakAlt
   778                              <1> .f6:
   779                              <1> ;If the user wants to insert a EOF, they can use F6
   780 00001316 B01A                <1>     mov al, EOF
   781 00001318 E964FEFFFF          <1>     jmp .checkIfCanInsert
   782                              <1> .f7:
   783                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   784 0000131D 8A05FFECFFFF        <1>     mov al, byte [oemESC]
   785 00001323 E959FEFFFF          <1>     jmp .checkIfCanInsert
   786                              <1> .toggleIns:
   787 00001328 F615(7AC50300)      <1>     not byte [vConInsert]   ;Toggle
   788                              <1>     return
    18                              <2> %%_ret:
    19 0000132E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   789                              <1> .eDel:
   790 0000132F 38DF                <1>     cmp bh, bl
   791 00001331 0F8407FEFFFF        <1>     je .mainLoop2
   792 00001337 FEC7                <1>     inc bh
   793 00001339 48FFC6              <1>     inc rsi
   794 0000133C E9FDFDFFFF          <1>     jmp .mainLoop2
   795                              <1> editKeys:
   796 00001341 E80EFBFFFF          <1>     call charIn_B   ;Get the next char in al
   797 00001346 B90B000000          <1>     mov ecx, oemKeyTbl_len  ;Get number of entries in table
   798 0000134B 57                  <1>     push rdi    ;Preserve rdi
   799 0000134C 488D3DD1ECFFFF      <1>     lea rdi, oemKeyTbl
   800 00001353 57                  <1>     push rdi
   801                              <1>     ;Each entry is 4 bytes. 1st byte is char, 2nd is reserved, 2nd word is
   802                              <1>     ; offset of function from oemKeyTbl
   803                              <1> .lp:
   804 00001354 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi
   805 00001355 7411                <1>     je .charFound
   806 00001357 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   807 00001359 0F84DFFDFFFF        <1>     jz buffCharInput_BE.mainLoop2
   808 0000135F 4881C703000000      <1>     add rdi, 3  ;Skip next three bytes
   809 00001366 EBEC                <1>     jmp short .lp
   810                              <1> .charFound:
   811 00001368 59                  <1>     pop rcx ;Pop back the effective address of the table
   812 00001369 480FB77F01          <1>     movzx rdi, word [rdi + 1]   ;Get high word into rdi zero extended
   813 0000136E 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   814 00001371 5F                  <1>     pop rdi
   815 00001372 FFE1                <1>     jmp rcx
    27                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    28                              <1> ;Major kernel date time functions and subroutines
    29                              <1> 
    30                              <1> getDate:           ;ah = 2Ah
    31                              <1> setDate:           ;ah = 2Bh
    32                              <1> getTime:           ;ah = 2Ch
    33                              <1> setTime:           ;ah = 2Dh
    34 00001374 C3                  <1>     ret
    28                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    29                              <1> openFileFCB:       ;ah = 0Fh
    30                              <1> closeFileFCB:      ;ah = 10h
    31                              <1> findFirstFileFCB:  ;ah = 11h
    32                              <1> findNextFileFCB:   ;ah = 12h
    33                              <1> deleteFileFCB:     ;ah = 13h
    34                              <1> sequentialReadFCB: ;ah = 14h
    35                              <1> sequentialWriteFCB:;ah = 15h
    36                              <1> createFileFCB:     ;ah = 16h
    37                              <1> renameFileFCB:     ;ah = 17h
    38 00001375 C3                  <1>     ret
    39                              <1> setDTA:            ;ah = 1Ah
    40                              <1> ;Called with:
    41                              <1> ;   rdx = Pointer to the new default DTA
    42 00001376 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
    43 0000137D 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    44 00001381 488915(73C30300)    <1>     mov qword [currentDTA], rdx
    45 00001388 C3                  <1>     ret
    46                              <1> randomReadFCB:     ;ah = 21h
    47                              <1> randomWriteFCB:    ;ah = 22h
    48                              <1> getFileSizeFCB:    ;ah = 23h
    49                              <1> setRelRecordFCB:   ;ah = 24h
    50                              <1> randBlockReadFCB:  ;ah = 27h
    51                              <1> randBlockWriteFCB: ;ah = 28h
    52                              <1> parseFilenameFCB:  ;ah = 29h
    53 00001389 C3                  <1>     ret
    54                              <1> getDTA:            ;ah = 2Fh
    55 0000138A 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
    56 00001391 488B1D(73C30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    57 00001398 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    58 0000139C C3                  <1>     ret
    29                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    30                              <1> ;-----------------------------------:
    31                              <1> ;    File Handle Kernel routines    :
    32                              <1> ;-----------------------------------:
    33                              <1> 
    34                              <1> createFileHdl:     ;ah = 3Ch, handle function
    35                              <1>     return 
    18                              <2> %%_ret:
    19 0000139D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    36                              <1> openFileHdl:       ;ah = 3Dh, handle function
    37                              <1>     return 
    18                              <2> %%_ret:
    19 0000139E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    38                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    39                              <1>     return 
    18                              <2> %%_ret:
    19 0000139F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    40                              <1> readFileHdl:       ;ah = 3Fh, handle function
    41 000013A0 488D3593000000      <1>     lea rsi, readBytes
    42                              <1> .common:
    43 000013A7 E82F030000          <1>     call getSFTPtr ;Get SFT ptr in rdi (if file is r/w-able from machine)
    44 000013AC 7221                <1>     jb .error
    45 000013AE E81B020000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
    46 000013B3 FF35(73C30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
    47 000013B9 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
    48 000013BB 8F05(73C30300)      <1>     pop qword [currentDTA]
    49 000013C1 720C                <1>     jb .errorFromDataTransfer
    50 000013C3 E80D0E0000          <1>     call getUserRegs
    51 000013C8 890E                <1>     mov dword [rsi + callerFrame.rax], ecx  ;Put actual number of bytes tfrd
    52 000013CA 806658FE            <1>     and byte [rsi + callerFrame.flags], 0FEh    ;Clear CF
    53                              <1>     return 
    18                              <2> %%_ret:
    19 000013CE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> ;Temporary Error handler, simply return with CF set
    55                              <1> .error:
    56                              <1> .errorFromDataTransfer:
    57 000013CF E8010E0000          <1>     call getUserRegs
    58 000013D4 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set CF
    59                              <1>     return 
    18                              <2> %%_ret:
    19 000013D8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    60                              <1> writeFileHdl:      ;ah = 40h, handle function
    61 000013D9 488D35B5010000      <1>     lea rsi, writeBytes
    62 000013E0 E9C2FFFFFF          <1>     jmp readFileHdl.common
    63                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    64                              <1>     return 
    18                              <2> %%_ret:
    19 000013E5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    65                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
    66                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
    67 000013E6 E8F0020000          <1>     call getSFTPtr
    68 000013EB 7326                <1>     jnc .sftValid
    69                              <1>     ;Error code and exit
    70                              <1>     ;al (eax) has error code for bad file handle
    71 000013ED 668905(67C30300)    <1>     mov word [errorExCde], ax
    72                              <1> .exitBad:
    73 000013F4 C605(66C30300)01    <1>     mov byte [errorLocus], eLocUnk  ;Unknown Locus
    74 000013FB C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Reinput data
    75 00001402 C605(6AC30300)08    <1>     mov byte [errorClass], eClsNotFnd
    76 00001409 E8C70D0000          <1>     call getUserRegs    ;Get user regs in rsi
    77 0000140E 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set CF
    78                              <1>     return 
    18                              <2> %%_ret:
    19 00001412 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    79                              <1> .sftValid:
    80 00001413 3C03                <1>     cmp al, 3
    81 00001415 7206                <1>     jb .validFunction
    82                              <1>     ;Error code and exit
    83 00001417 66B80100            <1>     mov ax, errInvFnc
    84 0000141B EBD7                <1>     jmp short .exitBad
    85                              <1> .validFunction:
    86 0000141D 3C01                <1>     cmp al, 1
    87 0000141F 7713                <1>     ja .seekend
    88 00001421 7203                <1>     jb .seekset
    89                              <1> ;Here we are at seekcur, seek from current (signed)
    90 00001423 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
    91                              <1> .seekset:
    92                              <1> ;Seek from the start (unsigned)
    93 00001426 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
    94 00001429 E8A70D0000          <1>     call getUserRegs    ;Get user regs in rsi
    95 0000142E 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
    96 00001431 30C0                <1>     xor al, al  ;Return OK!
    97                              <1>     return 
    18                              <2> %%_ret:
    19 00001433 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    98                              <1> .seekend:
    99                              <1> ;Here we are at seekend, seek from end (signed)
   100 00001434 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   101 00001437 EBED                <1>     jmp short .seekset
   102                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   103                              <1> ioctrl:            ;ah = 44h, handle function
   104                              <1> duplicateHandle:   ;ah = 45h, handle function
   105                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   106                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   107                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   108                              <1> renameFile:        ;ah = 56h
   109                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   110                              <1> createNewFile:     ;ah = 5Bh
   111                              <1> lockUnlockFile:    ;ah = 5Ch
   112                              <1> setHandleCount:    ;ah = 67h
   113                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   114                              <1>     return 
    18                              <2> %%_ret:
    19 00001439 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   115                              <1> ;-----------------------------------:
   116                              <1> ;       Main File IO Routines       :
   117                              <1> ;-----------------------------------:
   118                              <1> readBytes:
   119                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
   120                              <1> ;Input: ecx = Number of bytes to read
   121                              <1> ;Output: ecx = Number of bytes read
   122                              <1> ;Number of bytes read 
   123 0000143A E897010000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   124 0000143F 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   125 00001443 240F                <1>     and al, 0Fh ;Eliminate except access mode
   126 00001445 3C01                <1>     cmp al, WriteAccess
   127 00001447 750E                <1>     jne .readable
   128 00001449 B805000000          <1>     mov eax, errAccDen
   129 0000144E 668905(67C30300)    <1>     mov word [errorExCde], ax
   130 00001455 F9                  <1>     stc
   131                              <1>     return ;Exit with error code 
    18                              <2> %%_ret:
    19 00001456 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   132                              <1> .readable:
   133 00001457 E8BB010000          <1>     call setupVarsForTransfer
   134 0000145C 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
   135 0000145F 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   136 00001465 740A                <1>     jz .notRedir
   137 00001467 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
   138 0000146C CD4F                <1>     int 4fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
   139                              <1>     return 
    18                              <2> %%_ret:
    19 0000146E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   140                              <1> .exitOk:
   141 0000146F F8                  <1>     clc
   142                              <1>     return 
    18                              <2> %%_ret:
    19 00001470 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   143                              <1> .notRedir:
   144 00001471 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   145 00001477 7510                <1>     jnz readCharDev
   146 00001479 E80F100000          <1>     call dosCrit1Enter
   147 0000147E E80B010000          <1>     call readDiskFile
   148 00001483 E80F100000          <1>     call dosCrit1Exit
   149                              <1>     return 
    18                              <2> %%_ret:
    19 00001488 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   150                              <1> readCharDev:
   151                              <1> ;rdi points to sft for char dev to read
   152                              <1> ;ecx has the number of bytes to transfer
   153                              <1> ;Vars have been set up and DTA has the transfer address
   154                              <1> ;Returns in ecx, the actual bytes transferred
   155 00001489 C605(66C30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
   156 00001490 488B3D(73C30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
   157 00001497 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
   158 0000149B F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
   159 0000149E 0F8413010000        <1>     jz rwExitOk    ;If it does, jump to exit as if EOF has been hit
   160 000014A4 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
   161 000014A7 7507                <1>     jnz .notNul
   162                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
   163                              <1>     ;NUL never transfers bytes 
   164 000014A9 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
   165 000014AB E907010000          <1>     jmp rwExitOk    ;Goto exit
   166                              <1> .notNul:
   167 000014B0 F6C320              <1>     test bl, charDevBinary
   168 000014B3 750A                <1>     jnz .binary
   169                              <1>     ;Here if the device is in ASCII mode
   170 000014B5 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
   171 000014B8 7457                <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
   172                              <1> .consoleInput:
   173                              <1>     ;Console input here
   174 000014BA E826FCFFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
   175                              <1>     
   176                              <1> 
   177                              <1> .binary:
   178                              <1>     ;Setup registers for transfer
   179 000014BF 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
   180 000014C2 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
   181                              <1>     ;ecx has the number of bytes to transfer directly
   182 000014C5 E83C0C0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
   183 000014CA 488B35(7CC50300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
   184 000014D1 E87D090000          <1>     call goDriver   ;Make the request
   185 000014D6 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
   186 000014D9 0FB73D(1BC40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   187 000014E0 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   188 000014E6 7412                <1>     jz .binNoError
   189                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
   190 000014E8 B486                <1>     mov ah, 86h ;Char device, data error signature
   191 000014EA E867080000          <1>     call binaryCharDevErr   ;ah = has part of the error 
   192                              <1>     ;al now has the response
   193                              <1>     ;Cannot return Abort as Abort returns to command interpreter through DOS
   194 000014EF 3C00                <1>     cmp al, critIgnore
   195 000014F1 7407                <1>     je .binNoError ;Simply proceed as normal
   196 000014F3 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
   197 000014F6 3C03                <1>     cmp al, critFail
   198 000014F8 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
   199                              <1>     ;Fallthrough here for fail!
   200                              <1> .failExit:
   201                              <1>     
   202                              <1> .binNoError:
   203                              <1>     ;Get number of bytes transferred into 
   204 000014FA 8B05(2EC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
   205 00001500 F7D8                <1>     neg eax ;make it into -eax
   206 00001502 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
   207                              <1>     ;ecx now has bytes left to transfer
   208 00001506 50                  <1>     push rax    ;Save value on stack
   209 00001507 31C0                <1>     xor eax, eax ;Set ZF
   210 00001509 FFC0                <1>     inc eax ;Clear ZF
   211 0000150B 58                  <1>     pop rax ;Get back the original value
   212 0000150C E9A6000000          <1>     jmp rwExitOk    ;GoExit with ecx=Bytes left to read
   213                              <1> .generalASCII:
   214                              <1>     ;ecx has bytes to transfer here
   215                              <1>     ;Setup registers for transfer
   216 00001511 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
   217 00001514 51                  <1>     push rcx
   218 00001515 B901000000          <1>     mov ecx, 1  ;Get one char
   219 0000151A 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
   220 0000151D E8E40B0000          <1>     call primReqReadSetup   ;Setup request
   221 00001522 59                  <1>     pop rcx
   222                              <1>     ;rbx now has request header ptr
   223 00001523 488B35(7CC50300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
   224                              <1> .asciiReadChar:
   225 0000152A 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
   226 0000152D E837FBFFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
   227 00001532 E81C090000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
   228 00001537 0FB73D(1BC40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   229 0000153E F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   230 00001544 741E                <1>     jz .asciiNoError
   231 00001546 E806080000          <1>     call asciiCharDevErr    ;Call Int 44h
   232                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
   233 0000154B C705(2EC40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
   233 00001553 0000                <1>
   234 00001555 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   235 00001558 3C03                <1>     cmp al, critFail
   236 0000155A 749E                <1>     je .failExit
   237 0000155C 3C01                <1>     cmp al, critRetry
   238 0000155E 74CA                <1>     je .asciiReadChar
   239                              <1>     ;Ignore here, pretend NULL CHAR was read
   240 00001560 30C0                <1>     xor al, al
   241 00001562 EB11                <1>     jmp short .asciiIgnoreEP
   242                              <1> .asciiNoError:
   243                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
   244                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
   245                              <1> ;Preserve RBX, RSI
   246                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
   247 00001564 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   248 00001567 813D(2EC40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
   248 0000156F 0000                <1>
   249 00001571 7544                <1>     jne rwExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
   250 00001573 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
   251                              <1> .asciiIgnoreEP:
   252 00001575 48FF05(26C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
   253 0000157C 48FFC7              <1>     inc rdi ;Also advance register pointer
   254 0000157F 3C1A                <1>     cmp al, EOF ;Was this char EOF?
   255 00001581 7434                <1>     je rwExitOk
   256 00001583 3C0D                <1>     cmp al, CR  ;Was this char CR?
   257 00001585 E0A3                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
   258                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
   259 00001587 FEC0                <1>     inc al  ;make ZF=NZ
   260 00001589 E929000000          <1>     jmp rwExitOk    ;Called with ecx = Number of bytes LEFT to transfer
   261                              <1>     
   262                              <1> readDiskFile:
   263 0000158E C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
   264                              <1> 
   265                              <1> writeBytes:
   266                              <1> ;Writes the bytes from the user buffer
   267 00001595 E83C000000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   268 0000159A 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   269 0000159E 240F                <1>     and al, 0Fh ;Eliminate except access mode
   270 000015A0 3C00                <1>     cmp al, ReadAccess
   271 000015A2 750E                <1>     jne .writeable
   272 000015A4 B805000000          <1>     mov eax, errAccDen
   273 000015A9 668905(67C30300)    <1>     mov word [errorExCde], ax
   274 000015B0 F9                  <1>     stc
   275                              <1>     return ;Exit with error code 
    18                              <2> %%_ret:
    19 000015B1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   276                              <1> .writeable:
   277 000015B2 E860000000          <1>     call setupVarsForTransfer
   278                              <1> 
   279                              <1> rwExitOk:
   280                              <1> ;Input: ecx = Number of bytes left to transfer!
   281                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
   282 000015B7 890D(3FC60300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
   283 000015BD 7509                <1>     jnz .skipbitClear
   284 000015BF E812000000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
   285                              <1>     ;The disk transfer must've flushed by now. 
   286 000015C4 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokDevNotFlush|charDevNoEOF) ;OR
   287                              <1>     ;Next char dev read should give EOF.
   288                              <1> .skipbitClear:  ;Or skip that entirely
   289 000015C8 E811000000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
   290                              <1>     return 
    18                              <2> %%_ret:
    19 000015CD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   291                              <1> rwExitBad:
   292                              <1> ;-----------------------------------:
   293                              <1> ;        File Handle routines       :
   294                              <1> ;-----------------------------------:
   295                              <1> 
   296                              <1> setCurrentSFT:
   297                              <1> ;Set the pointer in rdi as current SFT 
   298 000015CE 48893D(F7C50300)    <1>     mov qword [currentSFT], rdi
   299                              <1>     return 
    18                              <2> %%_ret:
    19 000015D5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   300                              <1> getCurrentSFT:
   301                              <1> ;Get the current SFT pointer in rdi
   302 000015D6 488B3D(F7C50300)    <1>     mov rdi, qword [currentSFT]
   303                              <1>     return 
    18                              <2> %%_ret:
    19 000015DD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   304                              <1> updateCurrentSFT:
   305                              <1> ;Updates the Current SFT fields before returning from a file handle operation
   306                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
   307 000015DE 57                  <1>     push rdi
   308 000015DF 488B3D(F7C50300)    <1>     mov rdi, qword [currentSFT]
   309 000015E6 8B0D(3BC60300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
   310 000015EC 2B0D(3FC60300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
   311                              <1>     ;ecx has bytes transferred
   312 000015F2 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
   313 000015F8 751A                <1>     jnz .exit
   314 000015FA 50                  <1>     push rax
   315 000015FB 8B05(17C60300)      <1>     mov eax, dword [currClustD]
   316 00001601 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
   317 00001604 8B05(13C60300)      <1>     mov eax, dword [currClustF]
   318 0000160A 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
   319 0000160D 58                  <1>     pop rax
   320 0000160E 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
   321 00001611 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
   322                              <1> .exit:
   323 00001614 5F                  <1>     pop rdi
   324 00001615 F8                  <1>     clc
   325                              <1>     return 
    18                              <2> %%_ret:
    19 00001616 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   326                              <1> setupVarsForTransfer:
   327                              <1> ;Computes the actual bytes to be transferred and 
   328                              <1> ; sets up internal variables for the transfer. 
   329                              <1> ;Works for both reading and writing
   330                              <1> ;Input: ecx = User desired Bytes to transfer
   331                              <1> ;       rdi = SFT pointer for the file
   332                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   333                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
   334                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
   335                              <1> ;
   336                              <1> ;Note: Does not account for a FULL disk. When writing,
   337                              <1> ; if the disk will get full as a result of the write,
   338                              <1> ; stop at the last byte before the transfer. If the 
   339                              <1> ; file pointer is past the last free byte, write 0
   340 00001617 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
   341 0000161B 488935(7CC50300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
   342 00001622 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
   343 00001625 8905(2BC60300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
   344 0000162B 890D(3BC60300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
   345 00001631 890D(3FC60300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
   346 00001637 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev ;If not disk...
   347 0000163D 7402                <1>     jz setupVarsForDiskTransfer
   348 0000163F F8                  <1>     clc
   349                              <1>     return ;Else just exit here
    18                              <2> %%_ret:
    19 00001640 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   350                              <1> setupVarsForDiskTransfer:
   351                              <1> ;Extension of the above, but for Disk files only
   352                              <1> ;Input: ecx = User desired Bytes to transfer
   353                              <1> ;       rdi = SFT pointer for the file
   354                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   355 00001641 488B2D(7CC50300)    <1>     mov rbp, qword [workingDPB] ;Get the workingDPB (the same as qPtr)
   356 00001648 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
   357 0000164B 881D(7BC50300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
   358 00001651 8B05(2BC60300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
   359 00001657 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   360 0000165B 31D2                <1>     xor edx, edx    ;Zero rdx
   361 0000165D F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
   362                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
   363                              <1>     ;edx has the offset into that sector
   364 0000165F 8905(1CC60300)      <1>     mov dword [currSectF], eax
   365 00001665 668915(29C60300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
   366 0000166C 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
   367 0000166E 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
   368 00001671 8805(20C60300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
   369 00001677 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
   370 00001679 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   371 0000167C D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
   372 0000167E 8915(13C60300)      <1>     mov dword [currClustF], edx ;Save in var
   373 00001684 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in eax
   374 00001686 F8                  <1>     clc
   375                              <1>     return 
    18                              <2> %%_ret:
    19 00001687 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   376                              <1> 
   377                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216
   378                              <1> ;Return a pointer to the SFT entry in rdi
   379                              <1> ;Input: rbx = Valid SFT ndx number (word)
   380                              <1> ;Output: rdi = SFT pointer
   381 00001688 488B3D(34C00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
   382                              <1> .walk:
   383 0000168F 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
   384 00001693 7212                <1>     jb .thisTable
   385 00001695 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
   386 00001699 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
   387 0000169C 4881FFFFFFFFFF      <1>     cmp rdi, -1
   388 000016A3 75EA                <1>     jne .walk
   389 000016A5 F9                  <1>     stc
   390                              <1>     return
    18                              <2> %%_ret:
    19 000016A6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   391                              <1> .thisTable:
   392 000016A7 50                  <1>     push rax
   393 000016A8 52                  <1>     push rdx
   394 000016A9 B84F000000          <1>     mov eax, sft_size
   395 000016AE F7E3                <1>     mul ebx
   396 000016B0 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
   397 000016B3 5A                  <1>     pop rdx
   398 000016B4 58                  <1>     pop rax
   399 000016B5 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
   400                              <1>     return
    18                              <2> %%_ret:
    19 000016BC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   401                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
   402                              <1> ;Return a zero extended value in rdi for the SFT entry
   403                              <1> ;Input: bx = JFT handle (we zero extend)
   404                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
   405                              <1> ;        CF=CY => al = Error code, Fail
   406 000016BD 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
   407 000016C0 663B1D(91C00300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
   408 000016C7 7204                <1>     jb .ok
   409 000016C9 B006                <1>     mov al, errBadHdl
   410 000016CB F9                  <1>     stc
   411                              <1>     return
    18                              <2> %%_ret:
    19 000016CC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   412                              <1> .ok:
   413 000016CD 488B3D(7BC30300)    <1>     mov rdi, qword [currentPSP]
   414 000016D4 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
   415 000016D9 F8                  <1>     clc
   416                              <1>     return
    18                              <2> %%_ret:
    19 000016DA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   417                              <1> 
   418                              <1> getSFTPtr:
   419                              <1> ;This gets the SFT pointer and checks it was opened by this machine
   420                              <1> ;Input: bx = JFT handle
   421                              <1> ;Output: CF=NC: rdi = SFT pointer
   422                              <1> ;        CF=CY: Error, ax=Error code
   423 000016DB E815000000          <1>     call derefSFTPtr
   424                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000016E0 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   425 000016E2 50                  <1>     push rax
   426 000016E3 0FB705(9FC30300)    <1>     movzx eax, word [machineNum]
   427 000016EA 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
   428 000016EE 58                  <1>     pop rax
   429                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000016EF 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   430 000016F1 B006                <1>     mov al, errBadHdl   ;Error code
   431 000016F3 F9                  <1>     stc         ;Reset CF
   432                              <1>     return
    18                              <2> %%_ret:
    19 000016F4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   433                              <1> 
   434                              <1> derefSFTPtr:
   435                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
   436                              <1> ;Input: bx = File handle (gets zero extended)
   437                              <1> ;Output: CF=NC: rdi = SFT pointer
   438                              <1> ;        CF=CY: Error, ax=Error code
   439 000016F5 E8C3FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
   440 000016FA 7205                <1>     jb .fail
   441 000016FC 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
   442 000016FF 7504                <1>     jne .ok
   443                              <1> .fail:
   444 00001701 B006                <1>     mov al, errBadHdl
   445 00001703 F9                  <1>     stc
   446                              <1>     return
    18                              <2> %%_ret:
    19 00001704 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   447                              <1> .ok:
   448 00001705 53                  <1>     push rbx    ;Preserve the JFT handle
   449 00001706 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
   450 00001709 E87AFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
   451 0000170E 5B                  <1>     pop rbx 
   452                              <1>     return
    18                              <2> %%_ret:
    19 0000170F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   453                              <1> 
   454                              <1> getBytesTransferred:
   455 00001710 8B0D(3FC60300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
   456 00001716 F7D9                <1>     neg ecx ;Multiply by -1
   457 00001718 030D(3BC60300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
   458                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 0000171E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   459                              <1> 
   460                              <1> readWriteBytesBinary:
   461                              <1> ;Input: ecx = number of bytes to read in Binary mode
   462                              <1> ;       rdi = Points to where in caller buffer to place bytes
   463                              <1> ;       rsi = Points to where in DOS buffer to place pointer
   464                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
   465                              <1> ;Preserve rcx so we know how many bytes transferred
   466                              <1> ;Update the currByteA variable
   467                              <1> ;Returns (rsi and rdi) + (ecx on entry)
   468 0000171F 51                  <1>     push rcx
   469 00001720 F605(74C50300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
   470 00001727 7403                <1>     jz .noSwap
   471 00001729 4887FE              <1>     xchg rdi, rsi
   472                              <1> .noSwap:
   473 0000172C F3A4                <1>     rep movsb
   474 0000172E 59                  <1>     pop rcx
   475 0000172F 010D(2BC60300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
   476 00001735 290D(3FC60300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
   477                              <1>     return
    18                              <2> %%_ret:
    19 0000173B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    30                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    31                              <1> ;Memory related functions
    32                              <1> 
    33                              <1> ;-----------------------------------:
    34                              <1> ;  Memory related Kernel routines   :
    35                              <1> ;-----------------------------------:
    36                              <1> allocateMemory:    ;ah = 48h
    37                              <1> ;Input: ebx = Number of paragraphs requested
    38                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    39                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    40 0000173C 31D2                <1>     xor edx, edx
    41                              <1>     ;Clear the pointers
    42 0000173E 488915(A1C30300)    <1>     mov qword [firstMCB], rdx
    43 00001745 488915(A9C30300)    <1>     mov qword [bestMCB], rdx
    44 0000174C 488915(B1C30300)    <1>     mov qword [lastMCB], rdx
    45 00001753 31ED                <1>     xor ebp, ebp    
    46 00001755 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    47 00001757 488B35(24C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    48                              <1> .walk:
    49 0000175E 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    50 00001761 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    51 00001764 7409                <1>     je .walk1
    52 00001766 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    53 00001769 0F8565050000        <1>     jne memSysHalt
    54                              <1> .walk1:
    55                              <1>     ;Here if valid but not the last block
    56 0000176F 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    57 00001777 0F8582000000        <1>     jne .walk2
    58                              <1>     ;Here we consolidate adjacent free blocks if there are any
    59                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    60                              <1>     ;End consolidation at first non free block or at last block in chain
    61 0000177D 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    62 00001780 744A                <1>     je .det0    ;Determine if this block is useful
    63 00001782 31C9                <1>     xor ecx, ecx
    64 00001784 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    65 00001787 4881C610000000      <1>     add rsi, mcb.program
    66                              <1> .cons0:
    67 0000178E 48C1E104            <1>     shl rcx, 4
    68 00001792 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    69 00001795 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    70 00001798 7409                <1>     je .cons1
    71 0000179A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    72 0000179D 0F8531050000        <1>     jne memSysHalt 
    73                              <1> .cons1:
    74 000017A3 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    75 000017AB 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    76                              <1>     ;Here rsi, points to a free block, add it to rdi
    77 000017AD 31C9                <1>     xor ecx, ecx
    78 000017AF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    79 000017B2 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    80 000017B8 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    81 000017BB 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    82 000017BD 31D2                <1>     xor edx, edx
    83 000017BF 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    84 000017C2 48895608            <1>     mov qword [rsi + 8], rdx
    85 000017C6 3C5A                <1>     cmp al, mcbMarkEnd
    86 000017C8 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    87                              <1>     ;Here we deal with if the block was the last one 
    88 000017CA 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    89                              <1> .det0:  ;Now determine if pointer in rdi is useful
    90 000017CC 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    91                              <1> ;ebx must be less than the arena size for the arena to be useful!
    92 000017CF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    93 000017D2 39D9                <1>     cmp ecx, ebx
    94 000017D4 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    95 000017D6 488935(B1C30300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    96 000017DD 488B05(A1C30300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    97 000017E4 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    98 000017E7 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    99 000017E9 488935(A1C30300)    <1>     mov qword [firstMCB], rsi
   100                              <1> .det1:
   101                              <1>     ;Now test for best fit.
   102 000017F0 29D9                <1>     sub ecx, ebx    ;Block - ebx
   103 000017F2 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   104 000017F4 7209                <1>     jb .walk2
   105 000017F6 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   106 000017F8 488935(A9C30300)    <1>     mov qword [bestMCB], rsi
   107                              <1> .walk2:
   108 000017FF 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   109 00001802 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   110 00001804 31C9                <1>     xor ecx, ecx
   111 00001806 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   112 00001809 48C1E104            <1>     shl rcx, 4
   113 0000180D 4881C610000000      <1>     add rsi, mcb.program
   114 00001814 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   115 00001817 E942FFFFFF          <1>     jmp .walk
   116                              <1> .allocate:
   117                              <1>     ;Allocation fails IF the pointer is the null pointer
   118 0000181C 803D(2FC30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   119 00001823 7261                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   120                              <1>     ;Fall thru if last fit
   121 00001825 488B35(B1C30300)    <1>     mov rsi, qword [lastMCB]
   122 0000182C 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   123 0000182F 0F84CE000000        <1>     jz .allocFail
   124 00001835 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   125 00001837 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   126 0000183A 31C9                <1>     xor ecx, ecx
   127 0000183C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   128 0000183F 29D9                <1>     sub ecx, ebx
   129 00001841 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   130 00001847 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   131 0000184A 48C1E104            <1>     shl rcx, 4
   132 0000184E 4881C610000000      <1>     add rsi, mcb.program
   133 00001855 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   134 00001858 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   135 0000185A 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   136 0000185D 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   137 00001864 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   138 00001868 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   139 0000186F 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   140 00001876 4889F0              <1>     mov rax, rsi
   141 00001879 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   142 0000187C 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   143 00001880 E824040000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   144 00001885 C3                  <1>     ret
   145                              <1> .bfCommon:
   146 00001886 488B35(A1C30300)    <1>     mov rsi, qword [firstMCB]
   147 0000188D 803D(2FC30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   148 00001894 480F4435(A9C30300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   149 0000189C 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   150 0000189F 7462                <1>     jz .allocFail
   151 000018A1 8A06                <1>     mov al, byte [rsi + mcb.marker]
   152 000018A3 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   153 000018A6 31C9                <1>     xor ecx, ecx
   154 000018A8 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   155 000018AB 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   156 000018AD 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   157 000018B3 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   158 000018B6 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP]
   159 000018BD 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   160 000018C1 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   161 000018C4 4881C610000000      <1>     add rsi, mcb.program
   162 000018CB 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   163 000018D1 48C1E304            <1>     shl rbx, 4
   164 000018D5 4801DE              <1>     add rsi, rbx
   165 000018D8 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   166 000018DA 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   167 000018E2 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   168 000018E5 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   169 000018EC 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   170 000018F3 4889F8              <1>     mov rax, rdi
   171 000018F6 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   172 000018F9 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   173 000018FD E8A7030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   174 00001902 C3                  <1>     ret
   175                              <1> .allocFail:
   176                              <1>     ;Walk the MCB chain to determine the biggest block size
   177 00001903 488B35(24C00300)    <1>     mov rsi, [mcbChainPtr]
   178 0000190A 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   179                              <1> .af0:
   180 0000190C 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   181 0000190F 7409                <1>     je .af1
   182 00001911 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   183 00001914 0F85BA030000        <1>     jne memSysHalt
   184                              <1> .af1:
   185 0000191A 31C9                <1>     xor ecx, ecx
   186 0000191C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   187 0000191F 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   188 00001927 7505                <1>     jne .af2
   189 00001929 39D9                <1>     cmp ecx, ebx
   190 0000192B 0F47D9              <1>     cmova ebx, ecx
   191                              <1> .af2:
   192 0000192E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   193 00001931 7410                <1>     je .afExit
   194 00001933 48C1E104            <1>     shl rcx, 4
   195 00001937 4881C610000000      <1>     add rsi, mcb.program
   196 0000193E 4801CE              <1>     add rsi, rcx
   197 00001941 EBD7                <1>     jmp short .af1
   198                              <1> .afExit:
   199 00001943 B808000000          <1>     mov eax, errNoMem
   200 00001948 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   201 0000194F 8802                <1>     mov byte [rdx + callerFrame.rax], al
   202 00001951 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx
   203 00001954 804A5801            <1>     or byte [rdx + callerFrame.flags], 1
   204 00001958 C3                  <1>     ret
   205                              <1> freeMemory:        ;ah = 49h
   206                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   207                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   208                              <1> ;Always skip the first block as this is the anchor for DOS
   209 00001959 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   210 00001960 31C9                <1>     xor ecx, ecx
   211 00001962 488B35(24C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   212 00001969 4889F7              <1>     mov rdi, rsi
   213 0000196C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   214 0000196F 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   215 00001973 4881C610000000      <1>     add rsi, mcb.program
   216 0000197A 4801CE              <1>     add rsi, rcx    ;Go to next block
   217                              <1> .mainLoop:
   218 0000197D 31C9                <1>     xor ecx, ecx
   219 0000197F 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   220 00001982 7409                <1>     je .valid
   221 00001984 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   222 00001987 0F8547030000        <1>     jne memSysHalt
   223                              <1> .valid:
   224 0000198D 4939F0              <1>     cmp r8, rsi
   225 00001990 741C                <1>     je .blockFound
   226                              <1>     ;Not valid, check if last block in chain
   227 00001992 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   228 00001995 0F84A0000000        <1>     je .blockNotFound
   229 0000199B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   230 0000199E 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   231 000019A2 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   232 000019A9 4801CE              <1>     add rsi, rcx    ;Go to next block
   233 000019AC EBCF                <1>     jmp short .mainLoop
   234                              <1> .blockFound:
   235                              <1>     ;If hole, error.
   236                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   237 000019AE 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   238 000019B6 0F8488000000        <1>     je .blockHole
   239 000019BC 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   240 000019C4 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   241 000019CC 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   242                              <1>     ;It is, let it absorb this space
   243 000019CE 31C9                <1>     xor ecx, ecx
   244 000019D0 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   245 000019D3 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   246 000019D9 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   247                              <1>     ;Replace block marker
   248 000019DC 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   249 000019DE 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   250 000019E0 31C9                <1>     xor ecx, ecx
   251 000019E2 48890E              <1>     mov qword [rsi], rcx
   252 000019E5 48894E08            <1>     mov qword [rsi + 8], rcx
   253 000019E9 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   254                              <1> .blockFoundCheckFollowing:
   255                              <1>     ;First check if we are the last block in chain
   256 000019EC 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   257 000019EF 7439                <1>     je .blockFoundExit  ;If yes, exit!
   258 000019F1 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   259 000019F4 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   260 000019F7 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   261 000019FB 4881C110000000      <1>     add rcx, mcb.program
   262 00001A02 4801CE              <1>     add rsi, rcx    ;Go to next block
   263 00001A05 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   264 00001A0D 751B                <1>     jne .blockFoundExit ;If not free, exit
   265                              <1>     ;If free, absorb into block pointed to by rdi
   266 00001A0F 31C9                <1>     xor ecx, ecx
   267 00001A11 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   268 00001A14 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   269 00001A1A 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   270                              <1>     ;Replace block marker
   271 00001A1D 8A06                <1>     mov al, byte [rsi + mcb.marker]
   272 00001A1F 8807                <1>     mov byte [rdi + mcb.marker], al
   273 00001A21 31C9                <1>     xor ecx, ecx
   274 00001A23 48890E              <1>     mov qword [rsi], rcx
   275 00001A26 48894E08            <1>     mov qword [rsi + 8], rcx
   276                              <1> .blockFoundExit:
   277 00001A2A E87A020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   278 00001A2F 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   279 00001A36 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   280 00001A3A C3                  <1>     ret
   281                              <1> .blockNotFound:
   282                              <1>     ;Set CF and error code
   283 00001A3B C605(6AC30300)08    <1>     mov byte [errorClass], eClsNotFnd   ;Block not found 
   284 00001A42 EB07                <1>     jmp short .blockError
   285                              <1> .blockHole:
   286                              <1> ;Cannot free a hole! Fail!
   287 00001A44 C605(6AC30300)0A    <1>     mov byte [errorClass], eClsLocked   ;Cant free a hole
   288                              <1> .blockError:
   289 00001A4B C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   290 00001A52 C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   291 00001A59 66C705(67C30300)09- <1>     mov word [errorExCde], errMemAddr   ;Invalid mem addr
   291 00001A61 00                  <1>
   292 00001A62 C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   293 00001A69 B809000000          <1>     mov eax, errMemAddr
   294 00001A6E 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   295 00001A75 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   296 00001A78 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   297 00001A7C E828020000          <1>     call verifyIntegrityOfMCBChain
   298 00001A81 C3                  <1>     ret
   299                              <1> reallocMemory:     ;ah = 4Ah
   300                              <1> ;Input: r8 = address of the block to be realloc'ed
   301                              <1> ;       ebx = How many paras this block should contain after realloc. 
   302                              <1> ;               If ebx = 0, jump to free memory
   303 00001A82 85DB                <1>     test ebx, ebx
   304 00001A84 0F84CFFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   305 00001A8A 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   306 00001A91 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   307 00001A94 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   308 00001A97 7409                <1>     je .ctn
   309 00001A99 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   310 00001A9C 0F855C010000        <1>     jne .badAddrGiven
   311                              <1> .ctn:
   312                              <1>     ;Provided block is valid and not a hole
   313                              <1>     ;Check if Growth or Shrink
   314 00001AA2 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   315 00001AAA 7498                <1>     je freeMemory.blockHole
   316 00001AAC 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   317 00001AAF 31C9                <1>     xor ecx, ecx
   318 00001AB1 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   319 00001AB4 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   320 00001AB6 0F8786000000        <1>     ja .growth
   321 00001ABC 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   322                              <1> ;We can always shrink
   323 00001AC2 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   324 00001AC4 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   325 00001ACA 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   326 00001ACD 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   327 00001AD3 48C1E304            <1>     shl rbx, 4
   328 00001AD7 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   329 00001ADE 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   330 00001AE1 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   331 00001AE3 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   332 00001AE6 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   333 00001AE8 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   334 00001AF0 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   335 00001AF3 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   336 00001AF5 0F84DB000000        <1>     je .exit
   337                              <1> ;Else, now see if the block following is also free and absorb it
   338 00001AFB 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   339 00001AFE 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   340 00001B02 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   341 00001B09 4801CE              <1>     add rsi, rcx    ;Goto next arena
   342 00001B0C 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   343 00001B0F 7409                <1>     je .shrinkAbsorb
   344 00001B11 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   345 00001B14 0F85BA010000        <1>     jne memSysHalt
   346                              <1> .shrinkAbsorb:
   347 00001B1A 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   348 00001B22 0F85AE000000        <1>     jne .exit
   349                              <1>     ;It is free, absorb it
   350 00001B28 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   351 00001B2B 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   352 00001B31 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   353 00001B34 31C9                <1>     xor ecx, ecx
   354                              <1>     ;Clear absorbed MCB
   355 00001B36 48890E              <1>     mov qword [rsi], rcx
   356 00001B39 48894E08            <1>     mov qword [rsi + 8], rcx
   357 00001B3D E994000000          <1>     jmp .exit
   358                              <1> .growth:
   359                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   360 00001B42 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   361 00001B45 0F84A0000000        <1>     je .notEnuffMem
   362                              <1> ;Now check the following space is free. If not, not enuff mem err
   363 00001B4B 31C9                <1>     xor ecx, ecx
   364 00001B4D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   365 00001B50 48C1E104            <1>     shl rcx, 4
   366 00001B54 4889F7              <1>     mov rdi, rsi    
   367 00001B57 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   368 00001B5E 4801CE              <1>     add rsi, rcx
   369 00001B61 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   370 00001B64 7409                <1>     je .growthOK
   371 00001B66 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   372 00001B69 0F8565010000        <1>     jne memSysHalt
   373                              <1> .growthOK:
   374                              <1>     ;rdi points to block we are growing
   375 00001B6F 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   376 00001B77 7572                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   377                              <1>     ;rsi must own all memory up to the next owned arena
   378 00001B79 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   379 00001B7B 31C9                <1>     xor ecx, ecx
   380 00001B7D 31D2                <1>     xor edx, edx
   381 00001B7F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   382 00001B82 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   383 00001B88 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   384 00001B8B 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   385 00001B8D 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   386 00001B8F 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   387 00001B92 7759                <1>     ja .notEnuffMem1
   388 00001B94 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   389 00001B96 81FA01000000        <1>     cmp edx, 1
   390 00001B9C 7449                <1>     je .notEnuffMem2
   391 00001B9E 31C9                <1>     xor ecx, ecx
   392 00001BA0 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   393 00001BA3 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   394 00001BA7 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   395 00001BAA 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   396 00001BAD 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   397 00001BB4 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   398 00001BB8 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   399 00001BBB 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   400 00001BBF 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   401                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   402                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   403 00001BC1 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   404 00001BC3 7411                <1>     jz .exit
   405 00001BC5 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   406 00001BCB 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   407 00001BCE 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   408                              <1> .exit:
   409 00001BD6 E8CE000000          <1>     call verifyIntegrityOfMCBChain
   410 00001BDB 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   411 00001BE2 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   412 00001BE6 C3                  <1>     ret
   413                              <1> .notEnuffMem2:
   414 00001BE7 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   415 00001BE9 EB02                <1>     jmp short .notEnuffMem1
   416                              <1> .notEnuffMem:
   417 00001BEB 31DB                <1>     xor ebx, ebx    ;No space to grow
   418                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   419 00001BED B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   420 00001BF2 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   421 00001BF9 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   422 00001BFC EB0C                <1>     jmp short .bad
   423                              <1> .badAddrGiven:
   424 00001BFE 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   425 00001C05 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   426                              <1> .bad:
   427 00001C0A C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   428 00001C11 C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   429 00001C18 668905(67C30300)    <1>     mov word [errorExCde], ax   ;Error code
   430 00001C1F C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   431 00001C26 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save this word on stack
   432 00001C29 804A5801            <1>     or byte [rdx + callerFrame.flags], 1    ;Set Carry flag on
   433 00001C2D E877000000          <1>     call verifyIntegrityOfMCBChain
   434 00001C32 C3                  <1>     ret
   435                              <1> getsetMallocStrat: ;ah = 58h
   436 00001C33 84C0                <1>     test al, al
   437 00001C35 741F                <1>     jz .get
   438 00001C37 3C02                <1>     cmp al, 2
   439 00001C39 7337                <1>     jae .bad
   440                              <1> ;Set here
   441 00001C3B 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   442 00001C42 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   443 00001C46 8805(2FC30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   444 00001C4C 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   445 00001C50 E854000000          <1>     call verifyIntegrityOfMCBChain
   446 00001C55 C3                  <1>     ret
   447                              <1> .get:
   448 00001C56 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   449 00001C5D 31C0                <1>     xor eax, eax
   450 00001C5F 8A05(2FC30300)      <1>     mov al, byte [allocStrat]
   451 00001C65 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   452 00001C68 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   453 00001C6C E838000000          <1>     call verifyIntegrityOfMCBChain
   454 00001C71 C3                  <1>     ret
   455                              <1> .bad:
   456 00001C72 C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   457 00001C79 C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   458 00001C80 66C705(67C30300)01- <1>     mov word [errorExCde], errInvFnc   ;Invalid function number addr
   458 00001C88 00                  <1>
   459 00001C89 C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   460 00001C90 B801000000          <1>     mov eax, errInvFnc
   461 00001C95 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   462 00001C9C 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   463 00001C9F 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   464 00001CA3 E801000000          <1>     call verifyIntegrityOfMCBChain
   465 00001CA8 C3                  <1>     ret
   466                              <1> ;-----------------------------------:
   467                              <1> ;      Memory related routines      :
   468                              <1> ;-----------------------------------:
   469                              <1> verifyIntegrityOfMCBChain:
   470 00001CA9 50                  <1>     push rax
   471 00001CAA 53                  <1>     push rbx
   472 00001CAB 488B1D(24C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   473                              <1> .ok:
   474 00001CB2 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   475 00001CB5 7408                <1>     je .ok1
   476 00001CB7 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   477 00001CBA 7518                <1>     jne memSysHalt    ;It was not M or Z, fail violently
   478                              <1> .exit:
   479 00001CBC 5B                  <1>     pop rbx
   480 00001CBD 58                  <1>     pop rax
   481 00001CBE C3                  <1>     ret ;We have reached the end of the chain, return all good!
   482                              <1> .ok1:
   483 00001CBF 31C0                <1>     xor eax, eax
   484 00001CC1 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   485 00001CC4 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   486 00001CC8 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   487 00001CCF 4801C3              <1>     add rbx, rax
   488 00001CD2 EBDE                <1>     jmp short .ok
   489                              <1> memSysHalt:
   490                              <1> ;Only arrive here if the integrity of the system is not verified
   491                              <1> ;Lock the system
   492 00001CD4 C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   493 00001CDB C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   494 00001CE2 66C705(67C30300)07- <1>     mov word [errorExCde], errMCBbad   ;Destroyed MCB chain
   494 00001CEA 00                  <1>
   495 00001CEB C605(69C30300)05    <1>     mov byte [errorAction], eActKil ;Abort the system
   496 00001CF2 488D150E000000      <1>     lea rdx, .sysHltString
   497 00001CF9 B409                <1>     mov ah, 09h
   498 00001CFB CD41                <1>     int 41h
   499                              <1>     ;Only halt IRQ's in production!
   500                              <1>     %if !DEBUG
   501 00001CFD FA                  <1>     cli ;Halt interrupts
   502 00001CFE B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
   503 00001D00 E6A1                <1>     out 0A1h, al
   504 00001D02 E621                <1>     out 021h, al
   505                              <1>     %endif
   506 00001D04 F4                  <1>     hlt             ;Halt the system
   507 00001D05 EBFD                <1>     jmp short $ - 1 ;Go back far enough to capture the hlt
   508 00001D07 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
   508 00001D10 6C6F636174696F6E20- <1>
   508 00001D19 6572726F720D0A      <1>
   509 00001D20 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
   509 00001D29 616420434F4D4D414E- <1>
   509 00001D32 442C2073797374656D- <1>
   509 00001D3B 2068616C74656424    <1>
    31                                  %include "./Source/Kernel/MemExec/execTerm.asm"
    32                              <1> ;EXEC and all default terminates are here
    33                              <1> 
    34                              <1> ;========================
    35                              <1> ;   Interrupt handlers
    36                              <1> ;========================
    37                              <1> terminateProcess:   ;Int 40h
    38 00001D43 48CF                <1>     iretq
    39                              <1> terminateRes:       ;Int 47h
    40 00001D45 48CF                <1>     iretq
    41                              <1> ;========================
    42                              <1> ;    Int 21h functions
    43                              <1> ;========================
    44                              <1> simpleTerminate:   ;ah = 00h
    45 00001D47 C3                  <1>     ret
    46                              <1> terminateStayRes:  ;ah = 31h
    47 00001D48 C3                  <1>     ret
    48                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    49 00001D49 C3                  <1>     ret
    50                              <1> terminateClean:    ;ah = 4Ch, EXIT
    51 00001D4A C3                  <1>     ret
    32                                  %include "./Source/Kernel/Local/Local.asm"
    33                              <1> ;Localisation based functions live here
    34                              <1> 
    35                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    36                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    37                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    38                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    39 00001D4B C3                  <1>     ret
    33                                  %include "./Source/Kernel/ctrlc.asm"
    34                              <1> diskErr:
    35 00001D4C 80CC00              <1>     or ah, 00h
    36 00001D4F EB08                <1>     jmp short criticalErrorSetup
    37                              <1> asciiCharDevErr:
    38 00001D51 80CC00              <1>     or ah, 00h
    39 00001D54 EB03                <1>     jmp short criticalErrorSetup
    40                              <1> binaryCharDevErr:
    41                              <1> ;Called with ah with additional bits
    42 00001D56 80CC38              <1>     or ah, 38h  ;Ignore,Retry,Fail OK
    43                              <1> criticalErrorSetup:
    44 00001D59 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    45 00001D5F 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp should be NULLPTR
    46 00001D66 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    47                              <1>     ;For now, fall through, but change it later! 
    48                              <1> 
    49                              <1> 
    50                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    51                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    52                              <1> ; to the critical error handler.
    53                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    54                              <1> ; and with Int44Bitfield set
    55                              <1> ;               AH = Critical Error Bitfield
    56                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    57                              <1> ;               Bit 6 - Reserved
    58                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    59                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    60                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    61                              <1> ;               Bits [2-1] = Affected Disk Error
    62                              <1> ;                     0 0   DOS area
    63                              <1> ;                     0 1   FAT area
    64                              <1> ;                     1 0   Directory area
    65                              <1> ;                     1 1   Data area
    66                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    67                              <1> ;               AL  = Failing drive number if AH[7] = 0
    68                              <1> ;               DIL = Error code for errorMsg
    69                              <1> ;               RSI = EA of Device Header for which device the error occured
    70                              <1> ;Return:
    71                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    72                              <1> ;                  = 1 - Retry the Operation    (Retry)
    73                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
    74                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    75                              <1> ; Return response from int 44h in al
    76                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
    77                              <1> ; This function will terminate the program if an abort was requested!
    78                              <1> ; This function also destroys RBP
    79 00001D6C 803D(63C30300)01    <1>     cmp byte [critErrFlag], 1
    80 00001D73 7204                <1>     jb .noIntError  ;If not 0, enter
    81 00001D75 B003                <1>     mov al, critFail    ;Else, return Fail always
    82 00001D77 EB34                <1>     jmp short .checkResponse
    83                              <1> .noIntError:
    84 00001D79 FA                  <1>     cli ;Disable Interrupts
    85 00001D7A FE05(63C30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
    86 00001D80 FE0D(64C30300)      <1>     dec byte [inDOS]    ;Exiting DOS
    87 00001D86 488925(B9C30300)    <1>     mov qword [xInt44hRSP], rsp
    88 00001D8D 488B25(D3C30300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    89 00001D94 31ED                <1>     xor ebp, ebp
    90 00001D96 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
    91 00001D98 488B25(B9C30300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    92 00001D9F C605(63C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    93 00001DA6 FE05(64C30300)      <1>     inc byte [inDOS]    ;Reenter DOS
    94 00001DAC FB                  <1>     sti ;Reenable Interrupts
    95                              <1>     ;Now we check that the response given was allowed, and translate if needed
    96                              <1> .checkResponse:
    97 00001DAD 3C01                <1>     cmp al, critRetry
    98 00001DAF 7217                <1>     jb .checkIgnore
    99 00001DB1 7420                <1>     je .checkRetry
   100 00001DB3 3C03                <1>     cmp al, critFail
   101 00001DB5 752F                <1>     jne .abort   ;Must be abort
   102                              <1> ;Here is for fail
   103 00001DB7 F605(C1C30300)08    <1>     test byte [Int44bitfld], critFailOK
   104 00001DBE 7526                <1>     jnz .abort
   105                              <1> .exit:
   106 00001DC0 C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   107 00001DC7 C3                  <1>     ret
   108                              <1> .checkIgnore:
   109 00001DC8 F605(C1C30300)20    <1>     test byte [Int44bitfld], critIgnorOK
   110 00001DCF 75EF                <1>     jnz .exit
   111 00001DD1 EB09                <1>     jmp short .setFail
   112                              <1> .checkRetry:
   113 00001DD3 F605(C1C30300)10    <1>     test byte [Int44bitfld], critRetryOK
   114 00001DDA 75E4                <1>     jnz .exit
   115                              <1> .setFail:
   116 00001DDC B003                <1>     mov al, critFail
   117 00001DDE FE05(C2C30300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   118 00001DE4 EBC7                <1>     jmp short .checkResponse    ;Double check if I can return Fail
   119                              <1> .abort:
   120                              <1> ;Prepare to abort. We abort from within!
   121                              <1> ;Currently fall into ^C
   122                              <1> ctrlBreakHdlr:
   123 00001DE6 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   124 00001DE8 E83EF2FFFF          <1>     call printCaretASCII
   125 00001DED E869F2FFFF          <1>     call printCRLF
   126                              <1>     ;Reset the console back to 0
   127 00001DF2 C605(EBC30300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   128                              <1> .avoidCON:
   129                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   130 00001DF9 FA                  <1> 	cli
   131 00001DFA 488B25(D3C30300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   132 00001E01 E859060000          <1> 	call dosPopRegs ;Get user state back
   133 00001E06 488925(83C30300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   134 00001E0D F8                  <1>     clc
   135 00001E0E CD43                <1>     int 43h ;Call critical error handler
   136 00001E10 FA                  <1>     cli ;Clear interrupts again
   137 00001E11 488905(8FC30300)    <1>     mov qword [oldRAX], rax ;Save rax
   138 00001E18 9C                  <1>     pushfq  ;Get flags in rax
   139 00001E19 58                  <1>     pop rax 
   140 00001E1A 483B25(83C30300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   141 00001E21 750C                <1>     jne .checkCF
   142                              <1> .returnToDOS:
   143 00001E23 488B05(8FC30300)    <1>     mov rax, qword [oldRAX]
   144 00001E2A E9D6040000          <1>     jmp functionDispatch    ;Goto int 41h
   145                              <1> .checkCF:
   146 00001E2F 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   147 00001E36 A801                <1>     test al, 1  ;CF set?
   148 00001E38 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   149 00001E3A B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   150 00001E3F C605(E4C30300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   151 00001E46 E9BA040000          <1>     jmp functionDispatch
   152                              <1> 
    34                                  %include "./Source/Kernel/dosPrim.asm"
    35                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    36                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    37                              <1> 
    38                              <1> dosDefCritErrHdlr:
    39                              <1> ;The DOS default critical error handler always returns FAIL
    40 00001E4B B003                <1>     mov al, critFail
    41 00001E4D 48CF                <1>     iretq
    42                              <1> goDriverChar:
    43                              <1> ;Shortcut for Char requests, make a driver request
    44                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    45 00001E4F 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    46                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    47                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    48                              <1> ;       rbx = Ptr to the request header for the driver call!
    49 00001E53 E849060000          <1>     call dosCrit2Enter
    50 00001E58 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    51 00001E5B FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    52 00001E5E E848060000          <1>     call dosCrit2Exit
    53                              <1>     return
    18                              <2> %%_ret:
    19 00001E63 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> 
    55                              <1> setupPhysicalDiskRequest:
    56                              <1> ;Ensure that al has valid disk number
    57                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    58                              <1> ;If CF=NC, rbp = DPB ptr.
    59                              <1> ;If CF=CY, exit error
    60 00001E64 84C0                <1>     test al, al
    61 00001E66 723F                <1>     jc .diskError
    62 00001E68 3A05(69C00300)      <1>     cmp al, byte [lastdrvNum]
    63 00001E6E 7337                <1>     jae .diskError
    64 00001E70 50                  <1>     push rax
    65 00001E71 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    66 00001E73 E8EA030000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    67 00001E78 58                  <1>     pop rax
    68 00001E79 7235                <1>     jc .error
    69 00001E7B 8805(7BC50300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    70 00001E81 488B2D(84C50300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    71 00001E88 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    72 00001E90 750A                <1>     jnz .netError
    73 00001E92 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    74 00001E96 E832030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    75                              <1>     return
    18                              <2> %%_ret:
    19 00001E9B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    76                              <1> .netError:
    77 00001E9C 66C705(67C30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    77 00001EA4 00                  <1>
    78 00001EA5 EB09                <1>     jmp short .error
    79                              <1> .diskError:
    80 00001EA7 66C705(67C30300)0F- <1>     mov word [errorExCde], errBadDrv
    80 00001EAF 00                  <1>
    81                              <1> .error:
    82 00001EB0 C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk
    83 00001EB7 C605(69C30300)07    <1>     mov byte [errorAction], eActRetUsr
    84 00001EBE C605(6AC30300)09    <1>     mov byte [errorClass], eClsBadFmt
    85 00001EC5 F9                  <1>     stc
    86                              <1>     return
    18                              <2> %%_ret:
    19 00001EC6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    87                              <1> 
    88                              <1> setupAbsDiskEntry:
    89                              <1> ;Prepares to sets up the CDS and DPB for the request
    90 00001EC7 FE05(64C30300)      <1>     inc byte [inDOS]
    91 00001ECD FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    92 00001ECE FC                  <1>     cld ;Set string ops in the right direction
    93 00001ECF E890FFFFFF          <1>     call setupPhysicalDiskRequest
    94 00001ED4 7223                <1>     jc .exit    ;Error exit
    95 00001ED6 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    96 00001EDD 56                  <1>     push rsi
    97 00001EDE 50                  <1>     push rax
    98 00001EDF 488D35(6CC40300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    99 00001EE6 8806                <1>     mov byte [rsi], al  ;Construct a path
   100 00001EE8 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   101 00001EEB C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   102 00001EEF F8                  <1>     clc
   103                              <1> ;++++++++++++++++++++++++++++
   104                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   105                              <1> ;Entered with path in rsi (ah=03h)
   106 00001EF0 B800030000          <1>     mov eax, 0300h  
   107 00001EF5 CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   108                              <1> ;++++++++++++++++++++++++++++
   109 00001EF7 58                  <1>     pop rax
   110 00001EF8 5E                  <1>     pop rsi
   111                              <1> .exit:
   112 00001EF9 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   113                              <1>     return
    18                              <2> %%_ret:
    19 00001EFB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> absDiskWrite:       ;Int 46h
   116                              <1> ;al = Drive number
   117                              <1> ;rbx = Memory Buffer address to read from
   118                              <1> ;ecx = Number of sectors to write
   119                              <1> ;rdx = Start LBA to write to
   120 00001EFC FA                  <1>     cli
   121 00001EFD 488925(D3C30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   122 00001F04 488D25(4CD80300)    <1>     lea rsp, DiskStakTop
   123 00001F0B 55                  <1>     push rbp
   124 00001F0C 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   125 00001F0D E8B5FFFFFF          <1>     call setupAbsDiskEntry
   126 00001F12 7252                <1>     jc absDiskExit
   127 00001F14 E8E2010000          <1>     call primReqWriteSetup
   128 00001F19 EB1D                <1>     jmp short absDiskReadWriteCommon
   129                              <1> absDiskRead:        ;Int 45h
   130                              <1> ;al = Drive number
   131                              <1> ;rbx = Memory Buffer address to write to
   132                              <1> ;ecx = Number of sectors to read
   133                              <1> ;rdx = Start LBA to read from
   134 00001F1B FA                  <1>     cli 
   135 00001F1C 488925(D3C30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   136 00001F23 488D25(4CD80300)    <1>     lea rsp, DiskStakTop
   137 00001F2A 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   138 00001F2B 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   139 00001F2C E896FFFFFF          <1>     call setupAbsDiskEntry
   140 00001F31 7233                <1>     jc absDiskExit
   141 00001F33 E8CE010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   142                              <1> absDiskReadWriteCommon:
   143                              <1> ;Entered with the appropriate function number in ah
   144                              <1> ; and primary request header in rbx
   145 00001F38 E83B000000          <1>     call absDiskDriverCall
   146 00001F3D 7427                <1>     jz absDiskExit  ;Skip error code checking
   147 00001F3F 8A05(1BC40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   148                              <1>     ;DOS uses the following pairs in a table
   149                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   150 00001F45 B480                <1>     mov ah, 80h ;Attachment failure
   151 00001F47 3C0C                <1>     cmp al, 0Ch ;Gen error
   152 00001F49 741A                <1>     je .absExit
   153 00001F4B B440                <1>     mov ah, 40h ;Seek error
   154 00001F4D 3C06                <1>     cmp al, 06h
   155 00001F4F 7414                <1>     je .absExit
   156 00001F51 B408                <1>     mov ah, 08h ;Bad CRC
   157 00001F53 3C04                <1>     cmp al, 04h
   158 00001F55 740E                <1>     je .absExit
   159 00001F57 B404                <1>     mov ah, 04h ;Sector not found
   160 00001F59 3C08                <1>     cmp al, 08h
   161 00001F5B 7408                <1>     je .absExit
   162 00001F5D 30E4                <1>     xor ah, ah  ;Write Protect Violation
   163 00001F5F 84C0                <1>     test al, al
   164 00001F61 7402                <1>     je .absExit
   165 00001F63 B402                <1>     mov ah, 02h ;Other Error
   166                              <1> .absExit:
   167 00001F65 F9                  <1>     stc
   168                              <1> absDiskExit:
   169 00001F66 5B                  <1>     pop rbx
   170 00001F67 5D                  <1>     pop rbp
   171 00001F68 FA                  <1>     cli
   172 00001F69 FE0D(64C30300)      <1>     dec byte [inDOS]
   173 00001F6F 488B25(D3C30300)    <1>     mov rsp, qword [oldRSP]
   174 00001F76 FB                  <1>     sti ;Reenable interrupts
   175                              <1>     return ;Return from interrupt without popping flags!
    18                              <2> %%_ret:
    19 00001F77 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   176                              <1> absDiskDriverCall:
   177                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   178                              <1> ;       rbx = Request header address
   179                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   180                              <1> ;       eax = Status word from request
   181                              <1> ;       ecx = Number of sectors transferred
   182 00001F78 56                  <1>     push rsi
   183                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   184 00001F79 8B0D(2EC40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   185                              <1>     ;Prepare for goDriver now
   186 00001F7F 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   187 00001F83 E8CBFEFFFF          <1>     call goDriver   ;Make request
   188 00001F88 5E                  <1>     pop rsi
   189 00001F89 8B05(2EC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   190 00001F8F 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   191 00001F91 0FB705(1BC40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   192 00001F98 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   193                              <1>     return
    18                              <2> %%_ret:
    19 00001F9C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   194                              <1> 
   195                              <1> getDiskDPB:
   196                              <1> ;Gets the disk DPB if the Disk is physical
   197                              <1> ;Otherwise will return a pointer to the drive DPB
   198                              <1> ;Called with rdi pointing to the CDS
   199                              <1> ;CF=NC => RBP=DPBptr, CF=CY => Error exit
   200 00001F9D 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   201 00001FA1 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   202 00001FA4 8805(7BC50300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   203 00001FAA E81E020000          <1>     call setWorkingDPB
   204 00001FAF 57                  <1>     push rdi    ;Save the CDS ptr
   205 00001FB0 E838000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   206 00001FB5 5F                  <1>     pop rdi
   207 00001FB6 7234                <1>     jc .exitBad ;Preserve CF
   208 00001FB8 7531                <1>     jnz .exit
   209                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   210 00001FBA 8A0D(69C00300)      <1>     mov cl, byte [lastdrvNum]
   211 00001FC0 4831C0              <1>     xor rax, rax
   212 00001FC3 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   213 00001FC6 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   214 00001FCA 488B3D(56C00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   215                              <1> .checkCDS:
   216 00001FD1 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   217 00001FD5 7509                <1>     jne .next
   218 00001FD7 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   219 00001FDB 7403                <1>     jz .next    ;IF yes, skip it
   220 00001FDD 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   221                              <1> .next:
   222 00001FE0 4881C75B000000      <1>     add rdi, cds_size
   223 00001FE7 FEC9                <1>     dec cl
   224 00001FE9 75E6                <1>     jnz .checkCDS
   225                              <1> .exit:
   226 00001FEB F8                  <1>     clc
   227                              <1> .exitBad:
   228                              <1>     return
    18                              <2> %%_ret:
    19 00001FEC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   229                              <1> 
   230                              <1> ensureDiskValid:
   231                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   232                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   233                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   234                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   235                              <1> .medChk:
   236 00001FED E85D010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   237                              <1> ;Return in rbx the req hdr address
   238 00001FF2 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   239 00001FF6 E858FEFFFF          <1>     call goDriver   ;Request!
   240 00001FFB 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   241 00001FFF F7C700800000        <1>     test edi, drvErrStatus
   242 00002005 756C                <1>     jnz .diskDrvCritErrMedChk
   243                              <1> .medChkIgnore:
   244 00002007 8A05(7BC50300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   245 0000200D 30E4                <1>     xor ah, ah
   246 0000200F 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   247 00002012 84630E              <1>     test byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   248 00002015 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   249 00002017 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   250 00002019 E80DE7FFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   251 0000201E F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   252 0000201F 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   253                              <1>     ;ZF=NZ from test for dirty buffers
   254                              <1> .exit:
   255                              <1>     return
    18                              <2> %%_ret:
    19 00002021 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   256                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   257 00002022 C605(54D80300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   258 00002029 E821E7FFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   259                              <1>     ;Get a buffer to read BPB into in rdi
   260 0000202E B101                <1>     mov cl, dosBuffer
   261 00002030 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   262 00002032 E83AE7FFFF          <1>     call getBuffer ;Get a disk buffer
   263 00002037 72E8                <1>     jc .exit    ;Immediately exit with the carry flag set
   264 00002039 4889DF              <1>     mov rdi, rbx
   265                              <1> .repeatEP:
   266 0000203C E83A010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   267 00002041 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   268 00002045 E809FEFFFF          <1>     call goDriver   ;Request!
   269 0000204A 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   270 0000204E A900800000          <1>     test eax, drvErrStatus
   271 00002053 7565                <1>     jnz .diskDrvCritErrBPB
   272                              <1>     ;Now rebuild the dpb fields for this drive
   273 00002055 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   274 00002059 E89A060000          <1>     call createDPB  
   275                              <1>     ;Adjust the buffer header information
   276 0000205E 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   277 00002061 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   278 00002064 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   279 00002067 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   280 0000206A 30E4                <1>     xor ah, ah
   281 0000206C 8825(54D80300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   282                              <1>     return
    18                              <2> %%_ret:
    19 00002072 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   283                              <1> .diskDrvCritErrMedChk:
   284                              <1> ;Critical Errors fall through here
   285                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   286 00002073 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   287 0000207A 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   288 00002081 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   289 00002084 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   290 00002086 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   291 0000208C E8DBFCFFFF          <1>     call criticalDOSError
   292 00002091 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   293 00002098 488B2D(4DC60300)    <1>     mov rbp, qword [tmpDPBPtr]
   294 0000209F 3C01                <1>     cmp al, critRetry
   295 000020A1 0F8446FFFFFF        <1>     je .medChk
   296 000020A7 3C00                <1>     cmp al, critIgnore
   297 000020A9 0F8458FFFFFF        <1>     je .medChkIgnore
   298 000020AF 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   298 000020B7 00                  <1>
   299 000020B8 F9                  <1>     stc ;Set error flag to indicate fail
   300                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 000020B9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   301                              <1> 
   302                              <1> .diskDrvCritErrBPB:
   303                              <1>     ;eax has status word, rbp has dpb ptr
   304                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   305 000020BA 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   306 000020C1 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   307 000020C8 89C7                <1>     mov edi, eax    ;Transfer the status word over
   308 000020CA 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   309 000020CD B418                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK ;Set bits
   310 000020CF 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   311 000020D5 E892FCFFFF          <1>     call criticalDOSError
   312 000020DA 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   313 000020E1 488B2D(4DC60300)    <1>     mov rbp, qword [tmpDPBPtr]
   314 000020E8 3C01                <1>     cmp al, critRetry
   315 000020EA 0F844CFFFFFF        <1>     je .repeatEP
   316                              <1>     ;Else we fail (Ignore=Fail here)
   317 000020F0 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   317 000020F8 00                  <1>
   318 000020F9 F9                  <1>     stc ;Set error flag to indicate fail
   319                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 000020FA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   320                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   321                              <1> ;           Primitive Driver Requests
   322                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   323                              <1> ;First are Disk requests, then Char device requests
   324                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   325                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   326                              <1> 
   327                              <1> primReqWriteSetup:
   328 000020FB 50                  <1>     push rax
   329 000020FC B408                <1>     mov ah, drvWRITE    ;Command code
   330 000020FE 0225(2CC30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   331 00002104 EB03                <1>     jmp short primReqRWCommon
   332                              <1> primReqReadSetup:
   333 00002106 50                  <1>     push rax
   334 00002107 B404                <1>     mov ah, drvREAD
   335                              <1> primReqRWCommon:
   336                              <1> ;Sets up the IO request packet with:
   337                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   338                              <1> ; rbx = Data storage buffer ptr
   339                              <1> ; ecx = Number of sectors to transfer
   340                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   341                              <1> ; ~~~~ Set by entry function ~~~~ 
   342                              <1> ; ah = Command code
   343                              <1> ; All regs preserved EXCEPT rbx.
   344                              <1> ; Return: rbx = Transfer Address
   345 00002109 48891D(26C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   346 00002110 890D(2EC40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   347 00002116 C605(18C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   348 0000211D 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   349 00002122 8905(19C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   350 00002128 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   351 0000212B 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   352                              <1>     ;Disk operations only here!
   353 0000212D 488915(32C40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   354 00002134 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   355 00002137 8805(25C40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   356 0000213D 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   357 00002140 8805(19C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   358                              <1> primReqCommonExit:
   359                              <1> ;Returns in rbx the primary request header as these functions
   360                              <1> ; setup the request in the primary request header space
   361 00002146 58                  <1>     pop rax
   362 00002147 488D1D(18C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   363                              <1>     return
    18                              <2> %%_ret:
    19 0000214E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> primReqMedCheckSetup:
   366                              <1> ;Prepare the diskIO packet for mediacheck
   367                              <1> ;rbp has DPB pointer for device to check media on
   368 0000214F 50                  <1>     push rax
   369 00002150 C605(18C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   370 00002157 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   371 0000215A 8805(25C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   372 00002160 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   373 00002163 8805(19C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   374 00002169 C605(1AC40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   375 00002170 66C705(1BC40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   375 00002178 00                  <1>
   376 00002179 EBCB                <1>     jmp short primReqCommonExit
   377                              <1> 
   378                              <1> primReqGetBPBSetup:
   379                              <1> ;rbp has DPB pointer for device
   380                              <1> ;rdi has sector buffer header pointer for transfer
   381 0000217B 50                  <1>     push rax
   382 0000217C 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   383 00002180 48893D(26C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   384 00002187 C605(18C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   385 0000218E 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   386 00002191 8805(25C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   387 00002197 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   388 0000219A 8805(19C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   389 000021A0 C605(1AC40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   390 000021A7 66C705(1BC40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   390 000021AF 00                  <1>
   391 000021B0 EB94                <1>     jmp short primReqCommonExit
   392                              <1> 
   393                              <1> secdReqCharIOReq:
   394                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   395                              <1> ;Input:
   396                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   397                              <1> ; ecx = Length of buffer
   398                              <1> ; rdi = Buffer pointer
   399                              <1> ;Output: 
   400                              <1> ; rbx = Transfer Address 
   401 000021B2 488D1D(EEC30300)    <1>     lea rbx, secdReqHdr
   402 000021B9 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   403 000021BC 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   404 000021BF 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   405 000021C5 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   406 000021C9 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   407                              <1>     return
    18                              <2> %%_ret:
    19 000021CC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   408                              <1> ;If the device which will process this request is a disk device
   409                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   410                              <1> ;Then we will read the appropriate byte from that buffer to the 
   411                              <1> ; singleIOByt buffer.
   412                              <1> ;Such a request will require additional setup with the following fields:
   413                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    35                                  %include "./Source/Kernel/dosUtils.asm"
    36                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    37                              <1> 
    38                              <1> ;Basic Drive related Utilities
    39                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    40                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    41                              <1> ; that gets set up)
    42                              <1> 
    43                              <1> setWorkingDPB:
    44                              <1> ;Gets dpb in rbp and saves to curDrvDPB (working dpb)
    45 000021CD 48892D(7CC50300)    <1>     mov qword [workingDPB], rbp
    46                              <1>     return
    18                              <2> %%_ret:
    19 000021D4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    47                              <1> 
    48                              <1> getUserRegs:   ;Int 4Fh AX=1218h
    49                              <1> ;Returns ptr to user regs in rsi
    50 000021D5 488B35(D3C30300)    <1>     mov rsi, qword [oldRSP]
    51                              <1>     return
    18                              <2> %%_ret:
    19 000021DC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    52                              <1> 
    53                              <1> walkDPBchain:
    54                              <1> ;Called with al = 0 based drive number
    55                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    56 000021DD 488B35(34C00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    57                              <1> .walk:
    58 000021E4 4881FEFFFFFFFF      <1>     cmp rsi, -1
    59 000021EB 740A                <1>     je .exitBad
    60 000021ED 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    61 000021EF 7407                <1>     je .exit    ;Drive found
    62 000021F1 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    63 000021F5 EBED                <1>     jmp short .walk
    64                              <1> .exitBad:
    65 000021F7 F9                  <1>     stc
    66                              <1> .exit:
    67                              <1>     return
    18                              <2> %%_ret:
    19 000021F8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    68                              <1> setDrive:   
    69                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
    70                              <1> ;Input: al = 1-based drive number
    71                              <1> ;Output: al = 0-based drive number
    72                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
    73                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
    74                              <1> ;            set.
    75 000021F9 E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
    76 000021FE 7212                <1>     jc .exit    ;Carry the CF flag if not Physical
    77 00002200 56                  <1>     push rsi
    78 00002201 488B35(84C50300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
    79 00002208 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
    80 0000220E 5E                  <1>     pop rsi
    81 0000220F 7401                <1>     jz .exit
    82 00002211 F9                  <1>     stc
    83                              <1> .exit:
    84                              <1>     return
    18                              <2> %%_ret:
    19 00002212 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
    87                              <1> ;Allows a redirector or subst/join to build a CDS
    88                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
    89                              <1> ; volumes, that are made at system boot.
    90                              <1> ;Input: al = Drive Letter for drive
    91                              <1> ;       workingCDS = Set to the CDS array slot for the drive
    92                              <1> ;Output: rdi = newly filled in workingCDS
    93                              <1> ;CF=NC => CDS valid and has a DPB
    94                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
    95 00002213 50                  <1>     push rax
    96 00002214 2C40                <1>     sub al, "A"-1
    97 00002216 3A05(68C00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
    98 0000221C 488B3D(84C50300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
    99 00002223 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   100 00002229 58                  <1>     pop rax
   101 0000222A 7235                <1>     jb .exit    ;Exit with CF=CY
   102 0000222C 50                  <1>     push rax
   103 0000222D 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   104 00002232 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   105 00002234 58                  <1>     pop rax
   106 00002235 66814F430040        <1>     or word [rdi + cds.wFlags], cdsPhysDrive    ;Config bit set
   107 0000223B C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   108 00002242 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   109 0000224A 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   110                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   111 00002250 50                  <1>     push rax
   112 00002251 56                  <1>     push rsi
   113 00002252 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   114 00002254 E884FFFFFF          <1>     call walkDPBchain
   115 00002259 7204                <1>     jb .skipSettingDPB
   116 0000225B 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   117                              <1> .skipSettingDPB:
   118 0000225F 5E                  <1>     pop rsi
   119 00002260 58                  <1>     pop rax
   120                              <1> .exit:
   121                              <1>     return
    18                              <2> %%_ret:
    19 00002261 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   122                              <1> 
   123                              <1> getCDS:     ;Int 4Fh AX=1219h
   124                              <1> ;Gets the device DPB and saves it in the DOS variable
   125                              <1> ;This can be called to get CDS for network drives too!
   126                              <1> ;Input: al = 1 based drive number
   127                              <1> ;Sets workingCDS var with the CDS for the device. 
   128                              <1> ;   If device on a network, sets CF
   129                              <1> ;Returns al with 0-based drive number
   130 00002262 84C0                <1>     test al, al
   131 00002264 7508                <1>     jnz .skip
   132 00002266 8A05(8DC30300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   133 0000226C FEC0                <1>     inc al
   134                              <1> .skip:
   135 0000226E FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   136 00002270 56                  <1>     push rsi
   137 00002271 C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   138 00002278 F605(79C50300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   139 0000227F 7423                <1>     jz .physDrive
   140                              <1>     ;Invokation via 21/5D00, not yet fully supported
   141                              <1>     ;If returned with CF=CY, consider it an error for now
   142 00002281 50                  <1>     push rax
   143 00002282 57                  <1>     push rdi
   144 00002283 488D3D(94C50300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   145 0000228A 48893D(84C50300)    <1>     mov qword [workingCDS], rdi ;Make it current
   146 00002291 0441                <1>     add al, "A" ;Convert to a drive letter
   147 00002293 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   148 00002298 66F747430040        <1>     test word [rdi + cds.wFlags], cdsPhysDrive  ;Is the CDS valid?
   149 0000229E 5F                  <1>     pop rdi
   150 0000229F 58                  <1>     pop rax
   151 000022A0 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   152 000022A2 EB17                <1>     jmp short .exitOk   ;All oki
   153                              <1> .physDrive:
   154 000022A4 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   155 000022A9 7208                <1>     jc .exitBad
   156 000022AB 66F746430040        <1>     test word [rsi + cds.wFlags], cdsPhysDrive
   157 000022B1 7508                <1>     jnz .exitOk ;Exit with flag cleared
   158                              <1>     ;Else Return to unknown error locus
   159                              <1> .exitBad:
   160 000022B3 C605(66C30300)01    <1>     mov byte [errorLocus], eLocUnk
   161                              <1> .exitBad1:
   162 000022BA F9                  <1>     stc
   163                              <1> .exitOk:
   164 000022BB 5E                  <1>     pop rsi
   165                              <1>     return
    18                              <2> %%_ret:
    19 000022BC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   166                              <1> 
   167                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   168                              <1>     ;Gets the CDS for the current drive in al
   169                              <1>     ;Input: al = Drive number, 0 = A ...
   170                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   171                              <1>     ;        CF=CY => al not valid
   172 000022BD 3A05(69C00300)      <1>     cmp al, byte [lastdrvNum]
   173 000022C3 7202                <1>     jb .ctn
   174 000022C5 F9                  <1>     stc 
   175                              <1>     return
    18                              <2> %%_ret:
    19 000022C6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   176                              <1> .ctn:
   177 000022C7 50                  <1>     push rax
   178 000022C8 52                  <1>     push rdx
   179 000022C9 0FB6C0              <1>     movzx eax, al
   180 000022CC 48BE5B000000000000- <1>     mov rsi, cds_size
   180 000022D5 00                  <1>
   181 000022D6 31D2                <1>     xor edx, edx
   182 000022D8 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip
   183 000022DA 488D05(56C00300)    <1>     lea rax, qword [cdsHeadPtr] ;Get the first CDS
   184 000022E1 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   185 000022E4 488935(84C50300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   186 000022EB 5A                  <1>     pop rdx
   187 000022EC 58                  <1>     pop rax
   188 000022ED F8                  <1>     clc
   189                              <1>     return
    18                              <2> %%_ret:
    19 000022EE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   190                              <1> 
   191                              <1> 
   192                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   193                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   194                              <1> ;Input: AL = Char to normalise.
   195                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   196                              <1> ;If path separator, set ZF=ZE
   197 000022EF 3C5C                <1>     cmp al, "\"
   198 000022F1 7406                <1>     je .exit
   199 000022F3 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   200 000022F5 7502                <1>     jne .exit
   201 000022F7 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   202                              <1> .exit:
   203                              <1>     return
    18                              <2> %%_ret:
    19 000022F9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   204                              <1> 
   205                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   206                              <1> ;Convert a lowercase char to uppercase
   207                              <1> ; Leave alone uppercase chars and invalid chars
   208                              <1> ;Input: al = Char to convert to uppercase
   209                              <1> ;Output: al = Processed char
   210 000022FA 3C7A                <1>     cmp al, "z"
   211 000022FC 7706                <1>     ja .exit
   212 000022FE 3C61                <1>     cmp al, "a"
   213 00002300 7202                <1>     jb .exit
   214 00002302 2C20                <1>     sub al, "a" - "A"   ;Convert the char
   215                              <1> .exit:
   216                              <1>     return
    18                              <2> %%_ret:
    19 00002304 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    36                                  %include "./Source/Kernel/dosMain.asm"
    37                              <1> ;-----------------------------------:
    38                              <1> ;        Main Kernel dispatch       :
    39                              <1> ;            and routines           :
    40                              <1> ;-----------------------------------:
    41                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    42                              <1> ;ah = Function number, all other registers have various meanings
    43                              <1>  %if DEBUG
    44                              <1>     ;Entry function
    45                              <1>     debugEnterM
    46                              <1>     lea rbp, .l0000
    47                              <1>     call debPrintNullString
    48                              <1>     call debPrintFunctionName
    49                              <1>     jmp short .l0001
    50                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    51                              <1> .l0001:    
    52                              <1>     debugExitM
    53                              <1>     %endif
    54 00002305 FA                  <1>     cli ;Halt external interrupts
    55 00002306 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    56 00002307 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    57 0000230A 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    58                              <1>     ;Cherry pick functions
    59 00002310 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    60 00002313 722C                <1>     jb .fsbegin   ;If below skip these checks
    61 00002315 0F849A010000        <1>     je ctrlBreakCheck
    62 0000231B 80FC64              <1>     cmp ah, 64h
    63 0000231E 0F84DA010000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    64 00002324 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    65 00002326 80FC51              <1>     cmp ah, 51h
    66 00002329 0F84BD010000        <1>     je getCurrProcessID    ;This and below are exactly the same
    67 0000232F 80FC62              <1>     cmp ah, 62h
    68 00002332 0F84BD010000        <1>     je getPSPaddr          ;Calls the above function
    69 00002338 80FC50              <1>     cmp ah, 50h
    70 0000233B 0F84A2010000        <1>     je setCurrProcessID
    71                              <1> .fsbegin:
    72 00002341 E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    73 00002346 48891D(DBC30300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    74 0000234D 66C705(9FC30300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    74 00002355 00                  <1>
    75 00002356 488B05(D3C30300)    <1>     mov rax, qword [oldRSP]
    76 0000235D 488905(C3C30300)    <1>     mov qword [oldoldRSP], rax
    77 00002364 FE05(64C30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    78 0000236A 488925(D3C30300)    <1>     mov qword [oldRSP], rsp
    79                              <1> ;Network related variable resetting
    80 00002371 C605(79C50300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    81                              <1> ;Here, we want to save oldRSP in the callers PSP
    82 00002378 803D(64C30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    83 0000237F 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    84 00002381 488B05(7BC30300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    85 00002388 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    86                              <1> .fsb1:
    87 0000238C 58                  <1>     pop rax     ;Get old rax back
    88 0000238D 50                  <1>     push rax    ;and push it back onto the stack
    89                              <1> .charFun0CEP:
    90 0000238E 488D25(7DCB0300)    <1>     lea rsp, critStakTop
    91 00002395 FB                  <1>     sti         ;Reenable interrupts
    92                              <1> 
    93 00002396 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    94 00002398 881D(EBC30300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    95 0000239E C605(ECC30300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    96 000023A5 881D(C2C30300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
    97 000023AB 881D(E3C30300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    98                              <1> 
    99 000023B1 50                  <1>     push rax        ;Save rax to use temporarily as table base 
   100 000023B2 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   101 000023B4 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   102 000023B6 488D0593DCFFFF      <1>     lea rax, kDispTbl
   103 000023BD 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   104 000023C0 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   105 000023C4 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   106 000023C7 58                  <1>     pop rax
   107                              <1> 
   108 000023C8 84E4                <1>     test ah, ah     ;Simple Terminate function?
   109 000023CA 741C                <1>     jz .fddiskOp
   110 000023CC 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   111 000023CF 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   112 000023D1 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   113 000023D4 7712                <1>     ja .fddiskOp
   114                              <1> ;Char operations here
   115 000023D6 F605(63C30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   116 000023DD 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   117 000023DF 488D25(0CD20300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   118 000023E6 EB40                <1>     jmp short .fdGoToFunction
   119                              <1> .fddiskOp:
   120                              <1>     ;Disk operations go here
   121                              <1>     ;Save rax on entry to a disk funciton
   122 000023E8 488905(8FC30300)    <1>     mov qword [oldRAX], rax
   123                              <1>     ;Clear up error info
   124 000023EF C605(66C30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   125 000023F6 C605(63C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   126 000023FD C605(65C30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   127                              <1> 
   128 00002404 50                  <1>     push rax
   129 00002405 B482                <1>     mov ah, 82h ;Cancel all critical section!
   130 00002407 CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   131 00002409 58                  <1>     pop rax
   132                              <1> 
   133 0000240A C605(ECC30300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   134 00002411 488D25(4CD80300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   135 00002418 F605(8EC30300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   136 0000241F 7407                <1>     jz .fdGoToFunction
   137                              <1> ; HANDLE CTRL+BREAK HERE!
   138 00002421 50                  <1>     push rax
   139 00002422 E842ECFFFF          <1>     call checkBreak   ; Check for a ^C
   140 00002427 58                  <1>     pop rax
   141                              <1> .fdGoToFunction:
   142 00002428 48871D(DBC30300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   143                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   144                              <1>     ;
   145                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   146                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   147                              <1>     ;
   148                              <1>     %if DEBUG && REGS
   149                              <1>     ;Print stack if necessary function
   150                              <1>     debugEnterM
   151                              <1>     call debPrintDOSStack
   152                              <1>     debugExitM
   153                              <1>     %endif
   154 0000242F FF15(DBC30300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   155                              <1>     %if DEBUG
   156                              <1>     ;Entry function
   157                              <1>     debugEnterM
   158                              <1>     lea rbp, .l0002
   159                              <1>     call debPrintNullString
   160                              <1>     jmp short .l0003
   161                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   162                              <1> .l0003:    
   163                              <1>     debugExitM
   164                              <1>     %endif
   165                              <1>     %if DEBUG && REGS
   166                              <1>     ;Exit function
   167                              <1>     debugEnterM
   168                              <1>     call debPrintDOSStack
   169                              <1>     debugExitM
   170                              <1>     %endif
   171                              <1> .fdExit:
   172 00002435 FA                  <1>     cli     ;Redisable interrupts
   173 00002436 FE0D(64C30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   174 0000243C 488B25(D3C30300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   175 00002443 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   176 00002446 488B05(C3C30300)    <1>     mov rax, qword [oldoldRSP]
   177 0000244D 488905(D3C30300)    <1>     mov qword [oldRSP], rax
   178 00002454 E806000000          <1>     call dosPopRegs  ;Pop the frame
   179 00002459 48CF                <1>     iretq
   180                              <1> .fdExitBad:
   181 0000245B 30C0                <1>     xor al, al
   182                              <1> defaultIretq:
   183 0000245D 48CF                <1>     iretq
   184                              <1> dosPopRegs:
   185 0000245F 8F05(CBC30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   186 00002465 58                  <1>     pop rax
   187 00002466 5B                  <1>     pop rbx
   188 00002467 59                  <1>     pop rcx
   189 00002468 5A                  <1>     pop rdx
   190 00002469 5E                  <1>     pop rsi
   191 0000246A 5F                  <1>     pop rdi
   192 0000246B 5D                  <1>     pop rbp
   193 0000246C 4158                <1>     pop r8
   194 0000246E 4159                <1>     pop r9
   195 00002470 FF25(CBC30300)      <1>     jmp qword [dosReturn]
   196                              <1> dosPushRegs:
   197 00002476 8F05(CBC30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   198 0000247C 4151                <1>     push r9
   199 0000247E 4150                <1>     push r8
   200 00002480 55                  <1>     push rbp
   201 00002481 57                  <1>     push rdi
   202 00002482 56                  <1>     push rsi
   203 00002483 52                  <1>     push rdx
   204 00002484 51                  <1>     push rcx
   205 00002485 53                  <1>     push rbx
   206 00002486 50                  <1>     push rax
   207 00002487 FF25(CBC30300)      <1>     jmp qword [dosReturn]
   208                              <1> dosCrit1Enter:
   209 0000248D C3                  <1>     ret     ;Needs to be patched with 50h (PUSH RAX)
   210 0000248E B801800000          <1>     mov eax, 8001h
   211 00002493 CD4A                <1>     int 4ah
   212 00002495 58                  <1>     pop rax
   213 00002496 C3                  <1>     ret
   214                              <1> dosCrit1Exit:
   215 00002497 C3                  <1>     ret
   216 00002498 B801810000          <1>     mov eax, 8101h
   217 0000249D CD4A                <1>     int 4ah
   218 0000249F 58                  <1>     pop rax
   219 000024A0 C3                  <1>     ret
   220                              <1> dosCrit2Enter:
   221 000024A1 C3                  <1>     ret
   222 000024A2 B802800000          <1>     mov eax, 8002h
   223 000024A7 CD4A                <1>     int 4ah
   224 000024A9 58                  <1>     pop rax
   225 000024AA C3                  <1>     ret
   226                              <1> dosCrit2Exit:
   227 000024AB C3                  <1>     ret
   228 000024AC B802810000          <1>     mov eax, 8102h
   229 000024B1 CD4A                <1>     int 4ah
   230 000024B3 58                  <1>     pop rax
   231 000024B4 C3                  <1>     ret
   232                              <1> ;========================================:
   233                              <1> ;      Reentrant Kernel Functions        :
   234                              <1> ;========================================:
   235                              <1> ctrlBreakCheck:    ;ah = 33h
   236 000024B5 84C0                <1>     test al, al
   237 000024B7 7508                <1>     jnz .cbcget  ;Get the state or other functions
   238 000024B9 8A15(8EC30300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   239 000024BF 48CF                <1>     iretq
   240                              <1> .cbcget:
   241 000024C1 3C02                <1>     cmp al, 02h
   242 000024C3 771A                <1>     ja .cbcBad
   243 000024C5 740D                <1>     jz .cbcxchg ;Function 2
   244 000024C7 52                  <1>     push rdx
   245 000024C8 80E201              <1>     and dl, 1   ;Get only the bottom bit
   246 000024CB 8815(8EC30300)      <1>     mov byte [breakFlag], dl    ;Set the state
   247 000024D1 5A                  <1>     pop rdx
   248 000024D2 48CF                <1>     iretq
   249                              <1> .cbcxchg:
   250 000024D4 80E201              <1>     and dl, 1
   251 000024D7 8615(8EC30300)      <1>     xchg byte [breakFlag], dl
   252 000024DD 48CF                <1>     iretq
   253                              <1> .cbcBad:
   254 000024DF B0FF                <1>     mov al, -1
   255 000024E1 48CF                <1>     iretq
   256                              <1> 
   257                              <1> 
   258                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   259 000024E3 48891D(7BC30300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   260 000024EA 48CF                <1>     iretq
   261                              <1> 
   262                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   263 000024EC 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP]
   264 000024F3 48CF                <1>     iretq
   265                              <1> 
   266                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   267 000024F5 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP]
   268 000024FC 48CF                <1>     iretq
   269                              <1> 
   270                              <1> setDriverLookahead:;ah = 64h, reserved
   271 000024FE 48CF                <1>     iretq
   272                              <1> 
   273                              <1> ;========================================:
   274                              <1> ;            Kernel Functions            :
   275                              <1> ;========================================:
   276                              <1> diskReset:         ;ah = 0Dh
   277                              <1> ;Flush all dirty buffers to disk
   278 00002500 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   279                              <1> .drCheckBuffer:
   280 00002507 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   281 0000250B 7407                <1>     jz .drGotoNextBuffer
   282                              <1> .drFlushBuffer:
   283 0000250D E8FAE0FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   284 00002512 720C                <1>     jc .drExit
   285                              <1> .drGotoNextBuffer:
   286 00002514 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   287 00002517 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   288 0000251E 75E7                <1>     jne .drCheckBuffer
   289                              <1> .drExit:
   290 00002520 C3                  <1>     ret
   291                              <1> 
   292                              <1> selectDisk:        ;ah = 0Eh
   293                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   294 00002521 88D0                <1>     mov al, dl
   295 00002523 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   296 00002525 E8CFFCFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   297 0000252A 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   298 0000252C 8805(8DC30300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   299                              <1> .skipSettingCurrent:
   300 00002532 0FB605(69C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   301 00002539 C3                  <1>     ret
   302                              <1> 
   303                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   304 0000253A 8A05(8DC30300)      <1>     mov al, byte [currentDrv]
   305 00002540 C3                  <1>     ret
   306                              <1> 
   307                              <1> FATinfoDefault:    ;ah = 1Bh
   308 00002541 30D2                <1>     xor dl, dl
   309                              <1> FATinfoDevice:     ;ah = 1Ch
   310                              <1> ;Return in:
   311                              <1> ;   al = Number of sectors per cluster
   312                              <1> ;   edx = Number of clusters
   313                              <1> ;   cx =  Size of a clsuter
   314 00002543 84D2                <1>     test dl, dl
   315 00002545 7508                <1>     jnz .fidSkipdefault
   316 00002547 8A15(8DC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   317 0000254D FEC2                <1>     inc dl
   318                              <1> .fidSkipdefault:
   319 0000254F FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   320                              <1> ;Walk the dpb chain manually
   321 00002551 88D0                <1>     mov al, dl  ;Move drive number into al
   322 00002553 E885FCFFFF          <1>     call walkDPBchain    ;Get in rsi the dpb pointer for drive in al
   323 00002558 7331                <1>     jnc .fidDPBFound
   324                              <1> ;Else, we at an error.
   325                              <1> ;Simply return with CY set and error code in al with extended error info
   326 0000255A E876FCFFFF          <1>     call getUserRegs
   327 0000255F 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set the CY flag
   328 00002567 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   329 0000256C 66C705(67C30300)0F- <1>     mov word [errorExCde], errBadDrv     
   329 00002574 00                  <1>
   330 00002575 C605(66C30300)01    <1>     mov byte [errorLocus], eLocUnk    ;Not appropriate
   331 0000257C C605(6AC30300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   332 00002583 C605(69C30300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   333 0000258A C3                  <1>     ret
   334                              <1> .fidDPBFound:
   335 0000258B 8A4604              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   336 0000258E FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   337 00002590 8B560F              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   338 00002593 0FB74E02            <1>     movzx ecx, word [rsi + dpb.wBytesPerSector] ; Save the value in ecx
   339 00002597 488D5E23            <1>     lea rbx, qword [rsi + dpb.bMediaDescriptor]
   340 0000259B E835FCFFFF          <1>     call getUserRegs
   341 000025A0 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   342 000025A4 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   343 000025A8 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   344 000025AC C3                  <1>     ret
   345                              <1> 
   346                              <1> setIntVector:      ;ah = 25h
   347                              <1> ;Called with:
   348                              <1> ;   rdx = Pointer to interrupt handler
   349                              <1> ;   al = Interrupt number
   350 000025AD 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   351 000025AF 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   352                              <1> ;First call to get default BIOS segement selector and attribute word
   353 000025B5 88C3                <1>     mov bl, al  ;Set interrupt number 
   354 000025B7 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   355 000025BC CD35                <1>     int 35h
   356 000025BE E812FCFFFF          <1>     call getUserRegs
   357 000025C3 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   358 000025C7 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   359 000025C9 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   360                              <1> ;dx preserves the attribute word
   361 000025CB B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   362 000025D0 CD35                <1>     int 35h
   363 000025D2 E8FEFBFFFF          <1>     call getUserRegs
   364 000025D7 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Preserve low byte of rax
   365 000025D9 C3                  <1>     ret
   366                              <1> createNewPSP:      ;ah = 26h
   367 000025DA C3                  <1>     ret
   368                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   369 000025DB 8805(2CC30300)      <1>     mov byte [verifyFlag], al
   370 000025E1 8025(2CC30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   371 000025E8 C3                  <1>     ret
   372                              <1> getDOSversion:     ;ah = 30h
   373 000025E9 E8E7FBFFFF          <1>     call getUserRegs
   374 000025EE 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   375 000025F0 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   376 000025F3 668B0506DAFFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   377 000025FA 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   378 000025FD C3                  <1>     ret
   379                              <1> 
   380                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   381                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   382 000025FE 30D2                <1>     xor dl, dl
   383                              <1> getDeviceDPBptr:   ;ah = 32h
   384                              <1> ;On entry: dl = Drive number
   385                              <1> ;On exit: rbx = DPB pointer
   386 00002600 84D2                <1>     test dl, dl
   387 00002602 7508                <1>     jnz .gddpskipdefault
   388 00002604 8A15(8DC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   389 0000260A FEC2                <1>     inc dl
   390                              <1> .gddpskipdefault:
   391                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   392 0000260C FECA                <1>     dec dl
   393 0000260E 88D0                <1>     mov al, dl
   394 00002610 E84DFCFFFF          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   395 00002615 722C                <1>     jc .bad
   396 00002617 488B3D(84C50300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   397 0000261E 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   398 00002624 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   399                              <1>     ;Here ONLY if accessing critical Disk data structures
   400 00002626 E862FEFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   401 0000262B E86DF9FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   402 00002630 E862FEFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   403 00002635 720C                <1>     jc .bad
   404 00002637 E899FBFFFF          <1>     call getUserRegs
   405 0000263C 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   406 00002640 30C0                <1>     xor al, al
   407 00002642 C3                  <1>     ret
   408                              <1> .bad:
   409 00002643 B0FF                <1>     mov al, -1
   410 00002645 C3                  <1>     ret
   411                              <1> 
   412                              <1> getInDOSflagPtr:   ;ah = 34h
   413 00002646 488D15(64C30300)    <1>     lea rdx, inDOS
   414 0000264D E883FBFFFF          <1>     call getUserRegs
   415 00002652 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   416 00002656 C3                  <1>     ret
   417                              <1> getIntVector:      ;ah = 35h
   418                              <1> ;Called with:
   419                              <1> ;   al = Interrupt Number
   420                              <1> ;Returns:
   421                              <1> ;   rbx = Pointer to interrupt handler
   422 00002657 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   423 00002659 B807F00000          <1>     mov eax, 0F007h
   424 0000265E CD35                <1>     int 35h
   425 00002660 E870FBFFFF          <1>     call getUserRegs
   426 00002665 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   427 00002669 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   428 0000266B C3                  <1>     ret
   429                              <1> 
   430                              <1> getDiskFreeSpace:  ;ah = 36h
   431 0000266C 84D2                <1>     test dl, dl
   432 0000266E 7508                <1>     jnz .gdfsSkipdefault
   433 00002670 8A15(8DC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   434 00002676 FEC2                <1>     inc dl
   435                              <1> .gdfsSkipdefault:
   436 00002678 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   437 0000267A 88D0                <1>     mov al, dl
   438 0000267C E85CFBFFFF          <1>     call walkDPBchain ;Get in rsi the dpb pointer for drive al
   439 00002681 7331                <1>     jnc .gdfsDPBFound
   440                              <1> ;Else, we at an error.
   441                              <1> ;Simply return with CY set and error code in al with extended error info
   442 00002683 66C705(67C30300)0F- <1>     mov word [errorExCde], errBadDrv     ;Invalid drive error
   442 0000268B 00                  <1>
   443 0000268C C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk    ;Not appropriate
   444 00002693 C605(6AC30300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   445 0000269A C605(69C30300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   446 000026A1 E82FFBFFFF          <1>     call getUserRegs
   447 000026A6 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   448 000026AB 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set CF=CY
   449 000026B3 C3                  <1>     ret
   450                              <1> .gdfsDPBFound:
   451 000026B4 8A4604              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   452 000026B7 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   453 000026B9 8B560F              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   454 000026BC 0FB74E02            <1>     movzx ecx, word [rsi + dpb.wBytesPerSector] ;Save the value in ecx
   455 000026C0 8B5E31              <1>     mov ebx, dword [rsi + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   456 000026C3 E80DFBFFFF          <1>     call getUserRegs
   457 000026C8 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   458 000026CC 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   459 000026D0 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   460 000026D4 C3                  <1>     ret
   461                              <1> 
   462                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   463 000026D5 31C0                <1>     xor eax, eax
   464 000026D7 668705(8BC30300)    <1>     xchg ax, word [errorLevel]
   465 000026DE E8F2FAFFFF          <1>     call getUserRegs
   466 000026E3 668906              <1>     mov word [rsi + callerFrame.rax], ax
   467 000026E6 C3                  <1>     ret
   468                              <1> 
   469                              <1> getSysVarsPtr:     ;ah = 52h
   470 000026E7 488D15(2CC00300)    <1>     lea rdx, sysVarsPtr
   471 000026EE E8E2FAFFFF          <1>     call getUserRegs
   472 000026F3 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   473 000026F7 C3                  <1>     ret
   474                              <1> 
   475                              <1> 
   476                              <1> ;AH = 53h - CREATE DPB
   477                              <1> createDPB:         ;generates a DPB from a given BPB
   478                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   479                              <1> ;This is done so that the other fields of the DPB can be recycled
   480                              <1> ;Input: rsi = ptr to the BPB
   481                              <1> ;       rbp = ptr to the DPB
   482                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   483                              <1> ;bMediaDescriptor
   484 000026F8 8A4615              <1>     mov al, byte [rsi + bpb.media]
   485 000026FB 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   486                              <1> ;dFirstFreeCluster
   487 000026FE C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   488                              <1> ;dNumberOfFreeClusters
   489 00002705 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   490                              <1> ;wBytesPerSector
   491 0000270C 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   492 00002710 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   493                              <1> ;bMaxSectorInCluster
   494 00002714 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   495 00002717 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   496 00002719 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   497                              <1> ;bSectorsPerClusterShift
   498 0000271C FEC0                <1>     inc al
   499 0000271E 30C9                <1>     xor cl, cl
   500                              <1> .cd2:
   501 00002720 D0E8                <1>     shr al, 1
   502 00002722 7404                <1>     jz .cd3
   503 00002724 FEC1                <1>     inc cl
   504 00002726 EBF8                <1>     jmp short .cd2
   505                              <1> .cd3:
   506 00002728 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   507                              <1> ;wFAToffset, number of reserved sectors in partition
   508 0000272B 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   509 0000272F 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   510                              <1> ;bNumberOfFATs
   511 00002733 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   512 00002736 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   513                              <1> ;wNumberRootDirSectors
   514 00002739 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   515 0000273D C1E005              <1>     shl eax, 5  ;Multiply by 32
   516 00002740 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   517 00002744 FFC9                <1>     dec ecx
   518 00002746 01C8                <1>     add eax, ecx
   519 00002748 31D2                <1>     xor edx, edx    ;Clear for divide
   520 0000274A F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   521 0000274C 66894509            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   522                              <1> ;dFATlength, get the FAT length
   523 00002750 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   524 00002754 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   525 00002757 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   526 00002759 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   527 0000275C 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   528                              <1> ;Complex cases below...
   529                              <1> ;dClusterHeapOffset, start sector of the data area
   530 0000275F 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   531 00002763 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   532 00002766 85C0                <1>     test eax, eax
   533 00002768 0F44C3              <1>     cmovz eax, ebx
   534                              <1> ;eax = FATsz
   535 0000276B 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   536 0000276F 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   537 00002772 85DB                <1>     test ebx, ebx
   538 00002774 0F44D9              <1>     cmovz ebx, ecx 
   539                              <1> ;ebx = TotSec
   540 00002777 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   541 0000277A 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   542                              <1> .cd4:
   543 0000277C 01C2                <1>     add edx, eax
   544 0000277E FEC9                <1>     dec cl
   545 00002780 75FA                <1>     jnz .cd4
   546 00002782 89D0                <1>     mov eax, edx    ;Store product in eax
   547 00002784 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   548 00002788 01D0                <1>     add eax, edx
   549 0000278A 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   550 0000278E 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   551                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   552                              <1>     ;aka eax = Start sector of the data area in volume
   553 00002790 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   554                              <1> ;dClusterCount
   555 00002793 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   556 00002795 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   557 00002797 31D2                <1>     xor edx, edx
   558 00002799 BB01000000          <1>     mov ebx, 1
   559 0000279E 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   560 000027A1 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   561 000027A3 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   562 000027A5 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   563 000027A7 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   564                              <1> ;dFirstUnitOfRootDir
   565 000027AA 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   566 000027AF 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   567 000027B2 7709                <1>     ja .cd5
   568                              <1>     ;Else, we need to find the first sector of the root directory
   569                              <1>     ;Get the start sector of data area in volume 
   570                              <1>     ; and sub the number of sectors in the root directory
   571 000027B4 8B450B              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   572 000027B7 0FB75D09            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   573 000027BB 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   574                              <1> .cd5:
   575 000027BD 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   576                              <1> ;Exit epilogue
   577 000027C0 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   578 000027C7 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   579                              <1>     %if DEBUG && DPBINFO
   580                              <1>     ;Print DPB 
   581                              <1>     debugEnterM
   582                              <1>     push rbp
   583                              <1>     lea rbp, .l0000
   584                              <1>     call debPrintNullString
   585                              <1>     pop rbp
   586                              <1>     call debDPBBPBptr
   587                              <1>     call debMakeDebuggerRespond
   588                              <1>     jmp short .l0001
   589                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   590                              <1> .l0001:
   591                              <1>     debugExitM
   592                              <1>     %endif
   593 000027C9 C3                  <1>     ret
   594                              <1> 
   595                              <1> getVerifySetting:  ;ah = 54h
   596 000027CA 8A05(2CC30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   597 000027D0 C3                  <1>     ret
   598                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   599 000027D1 C3                  <1>     ret
   600                              <1> getExtendedError:  ;ah = 59h
   601 000027D2 E8FEF9FFFF          <1>     call getUserRegs
   602 000027D7 668B05(67C30300)    <1>     mov ax, word [errorExCde]
   603 000027DE 8A2D(66C30300)      <1>     mov ch, byte [errorLocus]
   604 000027E4 8A3D(6AC30300)      <1>     mov bh, byte [errorClass]
   605 000027EA 8A1D(69C30300)      <1>     mov bl, byte [errorAction]
   606 000027F0 668906              <1>     mov word [rsi + callerFrame.rax], ax
   607 000027F3 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   608 000027F7 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   609 000027FA C3                  <1>     ret
   610                              <1> getCritErrorInfo:  ;ah = 5Dh
   611                              <1> networkServices:   ;ah = 5Eh, do nothing
   612                              <1> networkRedirection:;ah = 5Fh, do nothing
   613 000027FB C3                  <1>     ret
   614                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   615                              <1> noOp:
   616 000027FC C3                  <1>     ret
    37                                  %include "./Source/Kernel/multiplx.asm"
    38                              <1> ;Default multiplexer. Current only installed function is ah=12h
    39                              <1> 
    40                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    41 000027FD 80FC12              <1>     cmp ah, 12h
    42 00002800 751A                <1>     jne .exit       ;Exit if not for us
    43 00002802 3C01                <1>     cmp al, mDispTblL / 2
    44 00002804 7316                <1>     jae .exit   ;If above or equal, exit
    45 00002806 53                  <1>     push rbx
    46 00002807 51                  <1>     push rcx
    47 00002808 31C9                <1>     xor ecx, ecx
    48 0000280A 488D1D13D9FFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    49 00002811 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    50 00002813 D1E1                <1>     shl ecx, 1   ;multiply by 2
    51 00002815 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    52 00002818 FFD3                <1>     call rbx
    53 0000281A 59                  <1>     pop rcx
    54 0000281B 5B                  <1>     pop rbx
    55                              <1> .exit:
    56 0000281C 48CF                <1>     iretq
    57                              <1> multiplexTest:
    58 0000281E B0FF                <1>     mov al, -1
    59 00002820 C3                  <1>     ret
    38                                  %include "./Source/Misc/int44h.asm"
    39                              <1> critErrorHandler:   ;Int 44h
    40                              <1> ;User Stack in usage here, must be swapped to before this is called
    41                              <1> ;Entered with:  
    42                              <1> ;               AH = Critical Error Bitfield
    43                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    44                              <1> ;               Bit 6 - Reserved
    45                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    46                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    47                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    48                              <1> ;               Bits [2-1] = Affected Disk Error
    49                              <1> ;                     0 0   DOS area
    50                              <1> ;                     0 1   FAT area
    51                              <1> ;                     1 0   Directory area
    52                              <1> ;                     1 1   Data area
    53                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    54                              <1> ;               AL  = Failing drive number if AH[7] = 0
    55                              <1> ;               DIL = Error code for errorMsg
    56                              <1> ;               RSI = EA of Device Header for which device the error occured
    57                              <1> ;Return:
    58                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    59                              <1> ;                  = 1 - Retry the Operation    (Retry)
    60                              <1> ;                  = 2 - Terminate the Program  (Abort)
    61                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    62 00002821 53                  <1>     push rbx
    63 00002822 51                  <1>     push rcx
    64 00002823 52                  <1>     push rdx
    65 00002824 57                  <1>     push rdi
    66 00002825 56                  <1>     push rsi
    67 00002826 FC                  <1>     cld         ;Make String ops go forward
    68                              <1> 
    69 00002827 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    70 0000282A 488D155E020000      <1>     lea rdx, qword [.crlf]
    71 00002831 B409                <1>     mov ah, 09h ;Print String
    72 00002833 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    73                              <1> 
    74 00002835 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    75 0000283B B90C000000          <1>     mov ecx, 0Ch
    76 00002840 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    77 00002842 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    78 00002845 480FB7FF            <1>     movzx rdi, di
    79 00002849 4889FA              <1>     mov rdx, rdi    ;Copy error code
    80 0000284C 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    81 00002850 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    82 00002853 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    83 00002856 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    84 0000285D 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    85 00002861 B409                <1>     mov ah, 09h ;Print String
    86 00002863 CD41                <1>     int 41h     ;Call DOS to print first part of message
    87                              <1> 
    88 00002865 488D1505020000      <1>     lea rdx, qword [.readmsg]
    89 0000286C 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    90 00002873 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    91 00002876 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    92 0000287A B409                <1>     mov ah, 09h ;Print String
    93 0000287C CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    94                              <1> 
    95 0000287E F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    96 00002881 0F85DF000000        <1>     jnz .charError
    97                              <1> ;Disk error continues here
    98 00002887 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    99 0000288E B409                <1>     mov ah, 09h
   100 00002890 CD41                <1>     int 41h
   101 00002892 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   102 00002894 80C241              <1>     add dl, "A" ;Add ASCII code
   103 00002897 B402                <1>     mov ah, 02h ;Print char in dl
   104 00002899 CD41                <1>     int 41h
   105                              <1> .userInput:
   106 0000289B 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   107 000028A2 B409                <1>     mov ah, 09h
   108 000028A4 CD41                <1>     int 41h
   109                              <1> ;Abort, Retry, Ignore, Fail is word order
   110                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   111                              <1> .userAbort:
   112                              <1> ;Abort is always an option
   113 000028A6 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   114 000028AD B409                <1>     mov ah, 09h
   115 000028AF CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   116                              <1> .userRetry:
   117 000028B1 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   118 000028B4 7416                <1>     jz .userIgnore    ;If clear, dont print message
   119 000028B6 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   120 000028BD B409                <1>     mov ah, 09h
   121 000028BF CD41                <1>     int 41h
   122 000028C1 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   123 000028C8 B409                <1>     mov ah, 09h
   124 000028CA CD41                <1>     int 41h
   125                              <1> .userIgnore:
   126 000028CC F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   127 000028CF 7416                <1>     jz .userFail
   128 000028D1 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   129 000028D8 B409                <1>     mov ah, 09h
   130 000028DA CD41                <1>     int 41h
   131 000028DC 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   132 000028E3 B409                <1>     mov ah, 09h
   133 000028E5 CD41                <1>     int 41h
   134                              <1> .userFail:
   135 000028E7 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   136 000028EA 7416                <1>     jz .userMsgEnd
   137 000028EC 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   138 000028F3 B409                <1>     mov ah, 09h
   139 000028F5 CD41                <1>     int 41h
   140 000028F7 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   141 000028FE B409                <1>     mov ah, 09h
   142 00002900 CD41                <1>     int 41h
   143                              <1> .userMsgEnd:
   144 00002902 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   145 00002909 B409                <1>     mov ah, 09h
   146 0000290B CD41                <1>     int 41h
   147                              <1> ;Get user input now 
   148 0000290D 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   149 0000290F 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   150 00002916 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   151 00002918 CD41                <1>     int 41h ;Get char in al
   152 0000291A 3C61                <1>     cmp al, "a" ;Chack if lowercase
   153 0000291C 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   154 0000291E 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   155                              <1> .uip1:
   156 00002920 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   157 00002921 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   158 00002923 FFC1                <1>     inc ecx
   159 00002925 81F904000000        <1>     cmp ecx, 4
   160 0000292B 75F3                <1>     jne .uip1
   161 0000292D E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   162                              <1> .validInput:
   163 00002932 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   164                              <1> ;Now check if the input is permitted
   165 00002934 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   166 00002936 7427                <1>     je .cehExit
   167 00002938 84C0                <1>     test al, al ;Check if 0 => Ignore
   168 0000293A 740F                <1>     je .viIgnore
   169 0000293C 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   170 0000293E 7416                <1>     je .viRetry
   171                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   172 00002940 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   173 00002943 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   174 00002949 EB14                <1>     jmp short .cehExit
   175                              <1> .viIgnore:
   176 0000294B F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   177 0000294E 0F8447FFFFFF        <1>     jz .userInput
   178 00002954 EB09                <1>     jmp short .cehExit
   179                              <1> .viRetry:
   180 00002956 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   181 00002959 0F843CFFFFFF        <1>     jz .userInput
   182                              <1> .cehExit:
   183 0000295F 5E                  <1>     pop rsi
   184 00002960 5F                  <1>     pop rdi
   185 00002961 5A                  <1>     pop rdx
   186 00002962 59                  <1>     pop rcx
   187 00002963 5B                  <1>     pop rbx
   188 00002964 48CF                <1>     iretq
   189                              <1> .charError:
   190 00002966 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   191 0000296B 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   192                              <1> .ce1:
   193 00002972 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   194 00002973 88C2                <1>     mov dl, al  ;Move char into dl
   195 00002975 B402                <1>     mov ah, 02h
   196 00002977 CD41                <1>     int 41h ;Print char
   197 00002979 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   198 0000297B E91BFFFFFF          <1>     jmp .userInput
   199                              <1> 
   200                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   201 00002980 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   201 00002989 746563742024202020  <1>
   202 00002992 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   202 0000299B 6E6974202420202020  <1>
   203 000029A4 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   203 000029AD 202420202020202020  <1>
   204 000029B6 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   204 000029BF 6F6D6D616E64202420  <1>
   205 000029C8 446174612024202020- <1>             db "Data $            "       ;Error 4
   205 000029D1 202020202020202020  <1>
   206 000029DA 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   206 000029E3 737420242020202020  <1>
   207 000029EC 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   207 000029F5 202020202020202020  <1>
   208 000029FE 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   208 00002A07 656469612024202020  <1>
   209 00002A10 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   209 00002A19 7420466F756E642024  <1>
   210 00002A22 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   210 00002A2B 706572202420202020  <1>
   211 00002A34 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   211 00002A3D 6C7420242020202020  <1>
   212 00002A46 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   212 00002A4F 742024202020202020  <1>
   213 00002A58 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   213 00002A61 61696C757265202420  <1>
   214                              <1> 
   215 00002A6A 64726976652024      <1> .drive      db "drive $"
   216 00002A71 6572726F7220726561- <1> .readmsg    db "error reading $"
   216 00002A7A 64696E672024        <1>
   217 00002A80 6572726F7220777269- <1> .writemsg   db "error writing $"
   217 00002A89 74696E672024        <1>
   218 00002A8F 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   219 00002A92 41626F727424        <1> .abortmsg   db "Abort$" 
   220 00002A98 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   221 00002A9F 526574727924        <1> .retrymsg   db "Retry$"
   222 00002AA5 4661696C24          <1> .failmsg    db "Fail$"
   223 00002AAA 2C2024              <1> .betweenMsg db ", $"
   224 00002AAD 3F2024              <1> .endMsg     db "? $"
   225 00002AB0 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    39                                  %include "./Source/Drivers/drvData.asm"
    40                              <1> ;-----------------------------------:
    41                              <1> ;          Driver routines          :
    42                              <1> ;-----------------------------------:
    43                              <1> drivers:
    44                              <1> conHdr:
    45 00002AB4 [D62A000000000000]  <1>     dq auxHdr
    46 00002ABC 1308                <1>     dw 0813h
    47 00002ABE [542C000000000000]  <1>     dq commonStrat
    48 00002AC6 [632C000000000000]  <1>     dq conDriver
    49 00002ACE 434F4E2020202020    <1>     db "CON     "
    50                              <1> auxHdr:
    51 00002AD6 [F82A000000000000]  <1>     dq prnHdr
    52 00002ADE 0080                <1>     dw 08000h
    53 00002AE0 [542C000000000000]  <1>     dq commonStrat
    54 00002AE8 [392F000000000000]  <1>     dq com1Intr
    55 00002AF0 4155582020202020    <1>     db "AUX     "
    56                              <1> prnHdr:
    57 00002AF8 [1A2B000000000000]  <1>     dq clkHdr
    58 00002B00 40A0                <1>     dw 0A040h
    59 00002B02 [5C2C000000000000]  <1>     dq nulStrat
    60 00002B0A [622C000000000000]  <1>     dq nulIntr
    61 00002B12 50524E2020202020    <1>     db "PRN     "
    62                              <1> clkHdr:
    63 00002B1A [3C2B000000000000]  <1>     dq msdHdr
    64 00002B22 0880                <1>     dw 08008h
    65 00002B24 [542C000000000000]  <1>     dq commonStrat
    66 00002B2C [AC2D000000000000]  <1>     dq clkDriver
    67 00002B34 434C4F434B242020    <1>     db "CLOCK$  "
    68                              <1> msdHdr:
    69 00002B3C [5E2B000000000000]  <1>     dq com1Hdr
    70 00002B44 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    71 00002B46 [542C000000000000]  <1>     dq commonStrat
    72 00002B4E [DE30000000000000]  <1>     dq msdDriver
    73 00002B56 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    74                              <1> com1Hdr:
    75 00002B5E [802B000000000000]  <1>     dq com2Hdr
    76 00002B66 0080                <1>     dw 08000h
    77 00002B68 [542C000000000000]  <1>     dq commonStrat
    78 00002B70 [392F000000000000]  <1>     dq com1Intr
    79 00002B78 434F4D3120202020    <1>     db "COM1    "
    80                              <1> com2Hdr:
    81 00002B80 [A22B000000000000]  <1>     dq com3Hdr
    82 00002B88 0080                <1>     dw 08000h
    83 00002B8A [542C000000000000]  <1>     dq commonStrat
    84 00002B92 [422F000000000000]  <1>     dq com2Intr
    85 00002B9A 434F4D3220202020    <1>     db "COM2    "
    86                              <1> com3Hdr:
    87 00002BA2 [C42B000000000000]  <1>     dq com4Hdr
    88 00002BAA 0080                <1>     dw 08000h
    89 00002BAC [542C000000000000]  <1>     dq commonStrat
    90 00002BB4 [4B2F000000000000]  <1>     dq com3Intr
    91 00002BBC 434F4D3320202020    <1>     db "COM3    "
    92                              <1> com4Hdr:
    93 00002BC4 [E62B000000000000]  <1>     dq lpt1Hdr
    94 00002BCC 0080                <1>     dw 08000h
    95 00002BCE [542C000000000000]  <1>     dq commonStrat
    96 00002BD6 [542F000000000000]  <1>     dq com4Intr
    97 00002BDE 434F4D3420202020    <1>     db "COM4    "
    98                              <1> lpt1Hdr:
    99 00002BE6 [082C000000000000]  <1>     dq lpt2Hdr
   100 00002BEE 40A0                <1>     dw 0A040h
   101 00002BF0 [5C2C000000000000]  <1>     dq nulStrat
   102 00002BF8 [622C000000000000]  <1>     dq nulIntr
   103 00002C00 4C50543120202020    <1>     db "LPT1    "
   104                              <1> lpt2Hdr:
   105 00002C08 [2A2C000000000000]  <1>     dq lpt3Hdr
   106 00002C10 40A0                <1>     dw 0A040h
   107 00002C12 [5C2C000000000000]  <1>     dq nulStrat
   108 00002C1A [622C000000000000]  <1>     dq nulIntr
   109 00002C22 4C50543220202020    <1>     db "LPT2    "
   110                              <1> lpt3Hdr:
   111 00002C2A FFFFFFFFFFFFFFFF    <1>     dq -1
   112 00002C32 40A0                <1>     dw 0A040h
   113 00002C34 [5C2C000000000000]  <1>     dq nulStrat
   114 00002C3C [622C000000000000]  <1>     dq nulIntr
   115 00002C44 4C50543320202020    <1>     dq "LPT3    "
   116 00002C4C 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    40                                  %include "./Source/Drivers/charDrv.asm"
    41                              <1> commonStrat:
    42                              <1> ;DOS calls this function with rbx=Ptr to request header
    43 00002C54 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    44 00002C5B C3                  <1>     ret
    45                              <1> nulStrat:
    46 00002C5C 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    47                              <1> nulIntr:
    48 00002C62 C3                  <1>     ret
    49                              <1> conDriver:
    50 00002C63 50                  <1>     push rax
    51 00002C64 53                  <1>     push rbx
    52 00002C65 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    53 00002C6C B003                <1>     mov al, 03h ;Unknown Command
    54 00002C6E 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    55 00002C72 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    56                              <1> 
    57 00002C74 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    58 00002C77 3C04                <1>     cmp al, 4
    59 00002C79 743D                <1>     jz .conRead
    60 00002C7B 3C05                <1>     cmp al, 5
    61 00002C7D 747F                <1>     jz .conNondestructiveRead
    62 00002C7F 3C06                <1>     cmp al, 6
    63 00002C81 0F84A8000000        <1>     jz .conInputStatus
    64 00002C87 3C07                <1>     cmp al, 7
    65 00002C89 0F84B0000000        <1>     jz .conFlushInputBuffers
    66 00002C8F 3C08                <1>     cmp al, 8
    67 00002C91 0F84CA000000        <1>     jz .conWrite
    68 00002C97 3C09                <1>     cmp al, 9
    69 00002C99 0F84C2000000        <1>     jz .conWrite
    70 00002C9F 3C0A                <1>     cmp al, 0Ah
    71 00002CA1 0F84E3000000        <1>     jz .conOutputStatus
    72 00002CA7 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    73                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    74 00002CA9 B480                <1>     mov ah, 80h ;Set error bit
    75 00002CAB 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    76                              <1> .conExit:
    77 00002CAF 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    78 00002CB5 5B                  <1>     pop rbx
    79 00002CB6 58                  <1>     pop rax
    80 00002CB7 C3                  <1>     ret
    81                              <1> .conRead:    ;Function 4
    82 00002CB8 B005                <1>     mov al, 05h ;Bad request structure length?
    83 00002CBA 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    84 00002CBD 75EA                <1>     jne .conWriteErrorCode
    85                              <1> 
    86 00002CBF 57                  <1>     push rdi
    87 00002CC0 51                  <1>     push rcx
    88 00002CC1 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    89 00002CC5 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    90                              <1> .cre1:
    91 00002CC7 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    92 00002CCA 741C                <1>     je .cre2
    93 00002CCC 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    94 00002CD3 751A                <1>     jnz .cre3   ;No, get the buffer value
    95 00002CD5 31C0                <1>     xor eax, eax
    96 00002CD7 CD36                <1>     int 36h
    97                              <1> .cre11:
    98 00002CD9 AA                  <1>     stosb
    99 00002CDA 84C0                <1>     test al, al ;Was the ascii code stored 0?
   100 00002CDC 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   101 00002CDE 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   102                              <1> .cre12:
   103 00002CE4 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   104 00002CE6 EBDF                <1>     jmp short .cre1
   105                              <1> .cre2:
   106 00002CE8 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   107 00002CEB 59                  <1>     pop rcx
   108 00002CEC 5F                  <1>     pop rdi
   109 00002CED EBC0                <1>     jmp short .conExit
   110                              <1> .cre3:
   111 00002CEF 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   112 00002CF5 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   113 00002CFC EBDB                <1>     jmp short .cre11
   114                              <1> 
   115                              <1> .conNondestructiveRead:  ;Function 5
   116 00002CFE B005                <1>     mov al, 05h ;Bad request structure length?
   117 00002D00 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   118 00002D03 75A4                <1>     jne .conWriteErrorCode
   119 00002D05 803D8E00000000      <1>     cmp byte [.conBuf], 0
   120 00002D0C 7519                <1>     jnz .cnr2
   121 00002D0E B401                <1>     mov ah, 01h     ;Get key if exists
   122 00002D10 CD36                <1>     int 36h
   123 00002D12 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   124                              <1>     ;Keystroke available
   125                              <1> .cnr0:
   126 00002D14 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   127 00002D17 E993FFFFFF          <1>     jmp .conExit
   128                              <1> .cnr1: ;No keystroke available
   129 00002D1C 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   130 00002D22 E988FFFFFF          <1>     jmp .conExit
   131                              <1> .cnr2:
   132 00002D27 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   133 00002D2D EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   134                              <1> 
   135                              <1> .conInputStatus:         ;Function 6
   136 00002D2F B005                <1>     mov al, 05h ;Bad request structure length?
   137 00002D31 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   138 00002D34 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   139 00002D3A E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   140                              <1> 
   141                              <1> .conFlushInputBuffers:   ;Function 7
   142 00002D3F B005                <1>     mov al, 05h ;Bad request structure length?
   143 00002D41 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   144 00002D44 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   145 00002D4A C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   146                              <1> .cfib0:
   147 00002D51 B401                <1>     mov ah, 01      ;Get buffer status
   148 00002D53 CD36                <1>     int 36h
   149 00002D55 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   150 00002D5B 30E4                <1>     xor ah, ah
   151 00002D5D CD36                <1>     int 36h ;Read key to flush from buffer
   152 00002D5F EBF0                <1>     jmp short .cfib0
   153                              <1> 
   154                              <1> .conWrite:   ;Function 8 and 9
   155 00002D61 B005                <1>     mov al, 05h ;Bad request structure length?
   156 00002D63 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   157 00002D66 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   158                              <1> 
   159 00002D6C 56                  <1>     push rsi
   160 00002D6D 51                  <1>     push rcx
   161 00002D6E 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   162 00002D72 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   163                              <1> .cw1: 
   164 00002D74 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   165 00002D77 7407                <1>     je .cw2
   166 00002D79 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   167 00002D7A CD49                <1>     int 49h ;Fast print char
   168 00002D7C FFC1                <1>     inc ecx
   169 00002D7E EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   170                              <1> .cw2:
   171 00002D80 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   172 00002D83 59                  <1>     pop rcx
   173 00002D84 5E                  <1>     pop rsi
   174 00002D85 E925FFFFFF          <1>     jmp .conExit
   175                              <1> .conOutputStatus:   ;Function 0Ah
   176 00002D8A B005                <1>     mov al, 05h ;Bad request structure length?
   177 00002D8C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   178 00002D8F 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   179 00002D95 E915FFFFFF          <1>     jmp .conExit
   180                              <1> 
   181 00002D9A 00                  <1> .conBuf db 0    ;Single byte buffer
   182                              <1> fastOutput:         ;This CON driver supports Int 49h
   183                              <1> ;Called with char to transfer in al
   184 00002D9B 50                  <1>     push rax
   185 00002D9C B40E                <1>     mov ah, 0Eh
   186 00002D9E CD30                <1>     int 30h
   187 00002DA0 58                  <1>     pop rax
   188 00002DA1 48CF                <1>     iretq
   189                              <1> ctrlBreak:
   190                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   191 00002DA3 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   192 00002DAA 48CF                <1>     iretq
   193                              <1> 
   194                              <1> clkDriver:
   195 00002DAC 50                  <1>     push rax
   196 00002DAD 53                  <1>     push rbx
   197 00002DAE 51                  <1>     push rcx
   198 00002DAF 52                  <1>     push rdx
   199 00002DB0 56                  <1>     push rsi
   200 00002DB1 55                  <1>     push rbp
   201 00002DB2 488B1D93FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   202 00002DB9 B003                <1>     mov al, 03h ;Unknown Command
   203 00002DBB 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   204 00002DBF 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   205                              <1> 
   206 00002DC1 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   207 00002DC4 3C04                <1>     cmp al, 04h
   208 00002DC6 7437                <1>     jz .clkRead
   209 00002DC8 3C06                <1>     cmp al, 06h
   210 00002DCA 0F8494000000        <1>     jz .clkInputStatus
   211 00002DD0 3C07                <1>     cmp al, 07h
   212 00002DD2 0F8498000000        <1>     jz .clkFlushInputBuffers
   213 00002DD8 3C08                <1>     cmp al, 08h
   214 00002DDA 0F84A0000000        <1>     jz .clkWrite
   215 00002DE0 3C09                <1>     cmp al, 09h
   216 00002DE2 0F8498000000        <1>     jz .clkWrite
   217 00002DE8 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   218                              <1> .clkNotFunctioning:
   219 00002DEA B002                <1>     mov al, 02h ;Device not ready error
   220                              <1> .clkWriteErrorCode:
   221 00002DEC B480                <1>     mov ah, 80h ;Set error bit
   222 00002DEE 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   223                              <1> .clkExit:
   224 00002DF2 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   225 00002DF8 5D                  <1>     pop rbp
   226 00002DF9 5E                  <1>     pop rsi
   227 00002DFA 5A                  <1>     pop rdx
   228 00002DFB 59                  <1>     pop rcx
   229 00002DFC 5B                  <1>     pop rbx
   230 00002DFD 58                  <1>     pop rax
   231 00002DFE C3                  <1>     ret
   232                              <1> 
   233                              <1> .clkRead:           ;Function 4
   234 00002DFF B005                <1>     mov al, 05h ;Bad request structure length?
   235 00002E01 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   236 00002E04 75E6                <1>     jne .clkWriteErrorCode
   237                              <1> 
   238 00002E06 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   239 00002E09 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   240 00002E0D 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   241 00002E14 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   242 00002E18 30E4                <1>     xor ah, ah
   243 00002E1A CD3A                <1>     int 3Ah         ;Read the system timer
   244 00002E1C 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   245 00002E1E 740D                <1>     jz .clkr1       ;Nope, now just time 
   246 00002E20 30E4                <1>     xor ah, ah
   247                              <1>     ;This works as al should keep count of the # of days passed since last read
   248 00002E22 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   249 00002E26 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   250                              <1> .clkr1:
   251 00002E2D 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   252 00002E30 0FB7D2              <1>     movzx edx, dx
   253 00002E33 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   254 00002E35 89D0                <1>     mov eax, edx
   255 00002E37 31D2                <1>     xor edx, edx
   256 00002E39 89D8                <1>     mov eax, ebx
   257 00002E3B B944040000          <1>     mov ecx, 1092   
   258 00002E40 F7F1                <1>     div ecx
   259 00002E42 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   260 00002E45 89D0                <1>     mov eax, edx    ;Get remainder in eax
   261 00002E47 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   262 00002E4B 31D2                <1>     xor edx, edx
   263 00002E4D B95B000000          <1>     mov ecx, 91 ;5*18.2
   264 00002E52 F7F1                <1>     div ecx
   265 00002E54 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   266 00002E57 89D0                <1>     mov eax, edx    ;Get remainder in eax
   267                              <1>     ;lea eax, dword [eax + 4*eax]
   268                              <1>     ;add eax, edx    ;Essentially multiply by 6
   269 00002E59 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   270 00002E5C 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   271 00002E5F E98EFFFFFF          <1>     jmp .clkExit
   272                              <1> 
   273                              <1> .clkInputStatus:    ;Function 6
   274                              <1> ;Always return ready
   275 00002E64 B005                <1>     mov al, 05h ;Bad request structure length?
   276 00002E66 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   277 00002E69 7581                <1>     jne .clkWriteErrorCode
   278 00002E6B E982FFFFFF          <1>     jmp .clkExit
   279                              <1> .clkFlushInputBuffers:  ;Function 7
   280                              <1> ;Always return done immediately
   281 00002E70 B005                <1>     mov al, 05h ;Bad request structure length?
   282 00002E72 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   283 00002E75 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   284 00002E7B E972FFFFFF          <1>     jmp .clkExit
   285                              <1> 
   286                              <1> .clkWrite:          ;Functions 8 and 9
   287 00002E80 B005                <1>     mov al, 05h ;Bad request structure length?
   288 00002E82 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   289 00002E85 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   290                              <1> 
   291 00002E8B 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   292 00002E8E 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   293 00002E92 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   294 00002E96 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   295                              <1> 
   296 00002E9D 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   297 00002E9F 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   298 00002EA3 B105                <1>     mov cl, 5
   299 00002EA5 F6F1                <1>     div cl          ;Divide al by 5
   300 00002EA7 30E4                <1>     xor ah, ah      ;Remove the remainder
   301 00002EA9 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   302                              <1> ;Using the decimal part of this formula for the low count
   303                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   304 00002EAB 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   305 00002EAE B912000000          <1>     mov ecx, 18
   306 00002EB3 F7E1                <1>     mul ecx  
   307 00002EB5 01C3                <1>     add ebx, eax
   308                              <1> 
   309 00002EB7 31D2                <1>     xor edx, edx
   310 00002EB9 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   311 00002EBD B944040000          <1>     mov ecx, 1092
   312 00002EC2 F7E1                <1>     mul ecx
   313 00002EC4 01C3                <1>     add ebx, eax
   314 00002EC6 89DA                <1>     mov edx, ebx    ;edx now has low count
   315 00002EC8 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   316 00002ECC B401                <1>     mov ah, 01h     ;Set the system time
   317 00002ECE CD3A                <1>     int 3Ah
   318                              <1> 
   319 00002ED0 4889F3              <1>     mov rbx, rsi
   320 00002ED3 E91AFFFFFF          <1>     jmp .clkExit
   321                              <1> 
   322                              <1> .clkBCDtoHex:
   323                              <1> ;Converts a BCD value to a Hex byte
   324                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   325 00002ED8 51                  <1>     push rcx
   326 00002ED9 0FB6C0              <1>     movzx eax, al   ;Zero extend
   327 00002EDC 89C1                <1>     mov ecx, eax    ;Save al in ecx
   328 00002EDE 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   329 00002EE3 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   330 00002EE9 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   331                              <1> .cbth0:
   332 00002EEC 050A000000          <1>     add eax, 10
   333 00002EF1 E2F9                <1>     loop .cbth0
   334 00002EF3 59                  <1>     pop rcx
   335 00002EF4 C3                  <1>     ret
   336                              <1> 
   337                              <1> .clkHexToBCD:
   338                              <1> ;Converts a Hex byte into two BCD digits
   339                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   340 00002EF5 51                  <1>     push rcx
   341 00002EF6 0FB6C0              <1>     movzx eax, al   ;Zero extend
   342 00002EF9 31C9                <1>     xor ecx, ecx
   343                              <1> .chtb0:
   344 00002EFB 3D0A000000          <1>     cmp eax, 10
   345 00002F00 7209                <1>     jb .chtb1
   346 00002F02 2D0A000000          <1>     sub eax, 10
   347 00002F07 FFC1                <1>     inc ecx
   348 00002F09 EBF0                <1>     jmp short .chtb0
   349                              <1> .chtb1:
   350 00002F0B C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   351 00002F0E 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   352 00002F10 59                  <1>     pop rcx
   353 00002F11 C3                  <1>     ret
   354 00002F12 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   355                              <1> ;When counting the number of days, first compute the number of years since
   356                              <1> ; 1980 and your year. 
   357                              <1> ;Then, using the table below, find the number of leap years between 1980
   358                              <1> ; and (YourYear - 1). 
   359                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   360                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   361                              <1> ;Use the months table to get the number of days in a normal month as leap 
   362                              <1> ; years are added using the previous comment.
   363                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   364                              <1> ; a leap year using the table. If it is, add an extra day.
   365                              <1> .clkLeapYears:
   366 00002F14 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   366 00002F1D 24282C30            <1>
   367 00002F21 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   367 00002F2A 585C60              <1>
   368                              <1> .clkMonths:
   369 00002F2D 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   369 00002F36 1F1E1F              <1>
   370                              <1> ;COM Driver headers and main interrupt strat
   371                              <1> com1Intr:
   372 00002F39 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   373 00002F40 EB19                <1>     jmp short comIntr
   374                              <1> com2Intr:
   375 00002F42 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   376 00002F49 EB10                <1>     jmp short comIntr
   377                              <1> com3Intr:
   378 00002F4B C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   379 00002F52 EB07                <1>     jmp short comIntr
   380                              <1> com4Intr:
   381 00002F54 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   382                              <1> comIntr:
   383 00002F5B 50                  <1>     push rax
   384 00002F5C 53                  <1>     push rbx
   385 00002F5D 51                  <1>     push rcx
   386 00002F5E 52                  <1>     push rdx
   387 00002F5F 56                  <1>     push rsi
   388 00002F60 57                  <1>     push rdi
   389 00002F61 488B1DE4FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   390 00002F68 B003                <1>     mov al, 03h ;Unknown Command
   391 00002F6A 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   392 00002F6E 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   393                              <1> 
   394 00002F70 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   395 00002F73 3C04                <1>     cmp al, 4   ;Read Character(s)
   396 00002F75 7462                <1>     jz .comRead
   397 00002F77 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   398 00002F79 0F849B000000        <1>     jz .comNondestructiveRead   
   399 00002F7F 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   400 00002F81 0F8484000000        <1>     jz .comReadInputStatus
   401 00002F87 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   402 00002F89 0F84B9000000        <1>     jz .comFlushInputBuffers
   403 00002F8F 3C08                <1>     cmp al, 8
   404 00002F91 0F84DB000000        <1>     jz .comWrite
   405 00002F97 3C09                <1>     cmp al, 9
   406 00002F99 0F84D3000000        <1>     jz .comWrite
   407 00002F9F 3C0A                <1>     cmp al, 0Ah
   408 00002FA1 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   409 00002FA7 EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   410                              <1> .comErrorNoCount:
   411 00002FA9 B002                <1>     mov al, 02h ;Unknown device
   412 00002FAB EB19                <1>     jmp short .comWriteErrorCode
   413                              <1> .comReadError:
   414 00002FAD BA0B000000          <1>     mov edx, 0Bh
   415                              <1> .comWriteError:
   416 00002FB2 BA0A000000          <1>     mov edx, 0Ah
   417                              <1> .comError:
   418 00002FB7 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   419 00002FBA B902000000          <1>     mov ecx, 02h    ;Unknown device
   420 00002FBF 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   421 00002FC1 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   422 00002FC4 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   423                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   424 00002FC6 B480                <1>     mov ah, 80h ;Set error bit
   425 00002FC8 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   426                              <1> .comExit:
   427 00002FCC 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   428 00002FD2 5F                  <1>     pop rdi
   429 00002FD3 5E                  <1>     pop rsi
   430 00002FD4 5A                  <1>     pop rdx
   431 00002FD5 59                  <1>     pop rcx
   432 00002FD6 5B                  <1>     pop rbx
   433 00002FD7 58                  <1>     pop rax
   434 00002FD8 C3                  <1>     ret
   435                              <1> 
   436                              <1> .comRead:
   437 00002FD9 B005                <1>     mov al, 05h ;Bad request structure length?
   438 00002FDB 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   439 00002FDE 75E6                <1>     jne .comWriteErrorCode
   440                              <1> 
   441 00002FE0 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   442 00002FE4 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   443                              <1> .cr1:
   444 00002FE6 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   445 00002FE9 741B                <1>     je .cre2
   446                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   447 00002FEB B802000000          <1>     mov eax, 02h    ;Recieve 
   448 00002FF0 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   449 00002FF6 6698                <1>     cbw     ;Zero extend to upper byte
   450 00002FF8 CD34                <1>     int 34h ;Recieve Char
   451 00002FFA 72BB                <1>     jc .comError
   452 00002FFC 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   453 00002FFF 74EA                <1>     je .cr11
   454 00003001 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   455 00003002 FFC1                <1>     inc ecx
   456 00003004 EBE0                <1>     jmp short .cr1
   457                              <1> .cre2:
   458 00003006 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   459 00003009 EBC1                <1>     jmp short .comExit
   460                              <1> 
   461                              <1> .comReadInputStatus:
   462 0000300B B005                <1>     mov al, 05h ;Bad request structure length?
   463 0000300D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   464 00003010 75B4                <1>     jne .comWriteErrorCode
   465 00003012 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   466 00003018 EBB2                <1>     jmp short .comExit
   467                              <1> 
   468                              <1> .comNondestructiveRead:
   469                              <1> ;Acts like a "read one character if there is one" function
   470 0000301A B005                <1>     mov al, 05h ;Bad request structure length?
   471 0000301C 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   472 0000301F 75A5                <1>     jne .comWriteErrorCode
   473                              <1> .cndr1:
   474 00003021 B802000000          <1>     mov eax, 02h    ;Recieve 
   475 00003026 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   476 0000302C 6698                <1>     cbw     ;Zero extend to upper byte
   477 0000302E CD34                <1>     int 34h ;Recieve Char
   478 00003030 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   479 00003036 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   480 00003039 7405                <1>     je .cndr2
   481 0000303B 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Get next char
   482 0000303E EB8C                <1>     jmp short .comExit
   483                              <1> .cndr2:
   484 00003040 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 200h ;Busy bit set
   485 00003046 EB84                <1>     jmp short .comExit
   486                              <1> 
   487                              <1> .comFlushInputBuffers:
   488 00003048 B005                <1>     mov al, 05h ;Bad request structure length?
   489 0000304A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   490 0000304D 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   491                              <1> .cfib0:
   492 00003053 8A1584000000        <1>     mov dl, byte [.comDevice]
   493 00003059 6698                <1>     cbw
   494 0000305B B802000000          <1>     mov eax, 02h    ;Recieve
   495 00003060 CD34                <1>     int 34h
   496 00003062 0F8241FFFFFF        <1>     jc .comErrorNoCount
   497 00003068 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   498 0000306B 75E6                <1>     jne .cfib0
   499 0000306D E95AFFFFFF          <1>     jmp .comExit
   500                              <1> 
   501                              <1> .comWrite:
   502 00003072 B005                <1>     mov al, 05h ;Bad request structure length?
   503 00003074 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   504 00003077 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   505                              <1> 
   506 0000307D 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   507 00003081 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   508                              <1> .cw1: 
   509 00003083 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   510 00003086 7417                <1>     je .cw2
   511 00003088 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   512 00003089 B401                <1>     mov ah, 01h ;Move function number into ah
   513 0000308B 8A154C000000        <1>     mov dl, byte [.comDevice]
   514 00003091 6698                <1>     cbw     ;Zero extend to upper byte
   515 00003093 CD34                <1>     int 34h ;Transmit char
   516 00003095 0F821CFFFFFF        <1>     jc .comError
   517 0000309B FFC1                <1>     inc ecx
   518 0000309D EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   519                              <1> .cw2:
   520 0000309F 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   521 000030A2 E925FFFFFF          <1>     jmp .comExit
   522                              <1> 
   523                              <1> .comOutputStatus:
   524                              <1> ;Read MODEM status
   525 000030A7 B005                <1>     mov al, 05h ;Bad request structure length?
   526 000030A9 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   527 000030AC 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   528                              <1> 
   529 000030B2 8A1525000000        <1>     mov dl, byte [.comDevice]
   530 000030B8 6698                <1>     cbw     ;Zero extend to upper byte
   531 000030BA B403                <1>     mov ah, 03h     ;Get status
   532 000030BC CD34                <1>     int 34h
   533 000030BE 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   534 000030C4 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   535 000030C9 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   536 000030CC F7D0                <1>     not eax      ;Bitwise inversion
   537 000030CE 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   538 000030D3 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   539 000030D8 E9EFFEFFFF          <1>     jmp .comExit
   540 000030DD 00                  <1> .comDevice   db 0
    41                                  %include "./Source/Drivers/diskDrv.asm"
    42                              <1> msdDriver:
    43 000030DE 50                  <1>     push rax
    44 000030DF 53                  <1>     push rbx
    45 000030E0 51                  <1>     push rcx
    46 000030E1 52                  <1>     push rdx
    47 000030E2 56                  <1>     push rsi
    48 000030E3 57                  <1>     push rdi
    49 000030E4 55                  <1>     push rbp
    50 000030E5 4150                <1>     push r8
    51 000030E7 488B1D5EFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    52 000030EE 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    53 000030F2 B003                <1>     mov al, drvBadCmd
    54 000030F4 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    55 000030FA B001                <1>     mov al, drvBadUnit 
    56 000030FC 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    57 00003100 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    58 00003106 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    59 0000310D 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    60 00003111 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    61 00003114 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    62 00003118 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    63 0000311C D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    64 0000311E 488D0D9A000000      <1>     lea rcx, .msdTable
    65 00003125 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    66 00003129 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    67 0000312B 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    68 0000312D 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    69 00003130 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    70                              <1> .msdDriverExit:
    71 00003132 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    72 00003138 4158                <1>     pop r8
    73 0000313A 5D                  <1>     pop rbp
    74 0000313B 5F                  <1>     pop rdi
    75 0000313C 5E                  <1>     pop rsi
    76 0000313D 5A                  <1>     pop rdx
    77 0000313E 59                  <1>     pop rcx
    78 0000313F 5B                  <1>     pop rbx
    79 00003140 58                  <1>     pop rax
    80 00003141 C3                  <1>     ret
    81                              <1> 
    82                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    83 00003142 4889FB              <1>     mov rbx, rdi
    84 00003145 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    85 00003148 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    86 0000314A 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    87                              <1> ;Now fall through to general error
    88                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    89 0000314D B401                <1>     mov ah, 01h
    90 0000314F CD33                <1>     int 33h ;Read status of last operation
    91 00003151 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    92 00003154 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    93 00003156 7460                <1>     je .msdWriteErrorCode 
    94 00003158 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    95 0000315A 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    96 0000315D 7459                <1>     je .msdWriteErrorCode 
    97 0000315F 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    98 00003162 7454                <1>     je .msdWriteErrorCode
    99                              <1> ;Device Not Ready
   100 00003164 B002                <1>     mov al, 02h  ;Device not ready code
   101 00003166 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   102 00003169 744D                <1>     je .msdWriteErrorCode
   103 0000316B 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   104 0000316F 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   105                              <1> ;Write Protected
   106 00003173 30C0                <1>     xor al, al
   107 00003175 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   108 0000317A 743C                <1>     je .msdWriteErrorCode
   109                              <1> ;CRC Error
   110 0000317C B004                <1>     mov al, 04h     ;CRC error code
   111 0000317E 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   112 00003183 7433                <1>     je .msdWriteErrorCode
   113 00003185 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   114 0000318A 742C                <1>     je .msdWriteErrorCode
   115 0000318C 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   116 00003191 7425                <1>     je .msdWriteErrorCode
   117                              <1> ;Seek Error
   118 00003193 B006                <1>     mov al, 06h     ;Seek error code
   119 00003195 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   120 00003198 741E                <1>     je .msdWriteErrorCode
   121                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   122                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   123 0000319A B007                <1>     mov al, 07h
   124 0000319C 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   125 0000319F 7417                <1>     je .msdWriteErrorCode
   126                              <1> ;Sector Not Found
   127 000031A1 B008                <1>     mov al, 08h     ;Sector not found code
   128 000031A3 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   129 000031A6 7410                <1>     je .msdWriteErrorCode
   130                              <1> ;Write faults
   131 000031A8 B00A                <1>     mov al, 0Ah     ;Write fault
   132 000031AA 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   133 000031AD 7409                <1>     je .msdWriteErrorCode
   134                              <1> ;Read faults
   135 000031AF B00B                <1>     mov al, 0Bh     ;Read fault
   136 000031B1 80F911              <1>     cmp cl, 11h     ;Read error
   137 000031B4 7402                <1>     je .msdWriteErrorCode
   138                              <1> ;General Errors
   139 000031B6 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   140                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   141 000031B8 B480                <1>     mov ah, 80h ;Set error bit
   142 000031BA 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   143 000031BE C3                  <1>     ret ;Return to set done bit
   144                              <1> .msdTable:
   145 000031BF 0000                <1>     dw 0                            ;Function 0
   146 000031C1 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   147 000031C3 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   148 000031C5 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   149 000031C7 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   150 000031C9 0000                <1>     dw 0                            ;Function 5
   151 000031CB 0000                <1>     dw 0                            ;Function 6
   152 000031CD 0000                <1>     dw 0                            ;Function 7
   153 000031CF 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   154 000031D1 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   155 000031D3 0000                <1>     dw 0                            ;Function 10
   156 000031D5 0000                <1>     dw 0                            ;Function 11
   157 000031D7 C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   158 000031D9 D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   159 000031DB ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   160 000031DD 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   161 000031DF 0000                <1>     dw 0                            ;Function 16
   162 000031E1 0000                <1>     dw 0                            ;Function 17
   163 000031E3 0000                <1>     dw 0                            ;Function 18
   164 000031E5 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   165 000031E7 0000                <1>     dw 0                            ;Function 20
   166 000031E9 0000                <1>     dw 0                            ;Function 21
   167 000031EB 0000                <1>     dw 0                            ;Function 22
   168 000031ED 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   169 000031EF 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   170                              <1> 
   171                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   172                              <1> .msdMedChk:          ;Function 1
   173 000031F1 B005                <1>     mov al, 05h ;Bad request structure length
   174 000031F3 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   175 000031F6 75C0                <1>     jne .msdWriteErrorCode
   176                              <1> 
   177 000031F8 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   178 000031FD 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   179 00003204 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   180 00003207 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   181 0000320A 753F                <1>     jnz .mmcNoChange
   182                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   183 0000320C B416                <1>     mov ah, 16h 
   184 0000320E CD33                <1>     int 33h
   185 00003210 0F8237FFFFFF        <1>     jc .msdGenDiskError
   186 00003216 80FC80              <1>     cmp ah, 80h
   187 00003219 740E                <1>     je .mmcNoChangeLine
   188 0000321B 80FC86              <1>     cmp ah, 86h
   189 0000321E 7409                <1>     je .mmcNoChangeLine
   190 00003220 84E4                <1>     test ah, ah ;No change?
   191 00003222 7427                <1>     jz .mmcNoChange
   192 00003224 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   193 00003227 750D                <1>     jnz .mmcChange
   194                              <1> ;If nothing, fall through and test manually, should never happen though
   195                              <1> .mmcNoChangeLine:
   196                              <1> ;Now we test Media Descriptor
   197 00003229 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   198 0000322E 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   199 00003231 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   200 00003234 7410                <1>     je .mmcUnsure
   201                              <1> .mmcChange:
   202 00003236 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   203 0000323A 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   204 00003241 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   205                              <1>     ;Check here if there were any open handles on the device when it was changed
   206 00003245 C3                  <1>     ret
   207                              <1> .mmcUnsure:
   208 00003246 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   209 0000324A C3                  <1>     ret
   210                              <1> .mmcNoChange:
   211 0000324B C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   212 0000324F C3                  <1>     ret
   213                              <1> 
   214                              <1> 
   215                              <1> .msdBuildBPB:        ;Function 2
   216 00003250 B005                <1>     mov al, 05h ;Bad request structure length
   217 00003252 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   218 00003255 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   219                              <1> 
   220 0000325B 4889DE              <1>     mov rsi, rbx
   221 0000325E 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   222 00003263 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   223 0000326A 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   224 0000326D 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   225 00003271 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   226 00003273 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   227 00003276 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   228 0000327B CD33                <1>     int 33h
   229 0000327D 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   230                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   231 00003283 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   232 00003287 7418                <1>     je .mbbpb0
   233 00003289 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   234 0000328D 7412                <1>     je .mbbpb0
   235 0000328F 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   236 00003293 740C                <1>     je .mbbpb0
   237 00003295 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   238 00003299 B007                <1>     mov al, 07h ;Unknown media error code
   239 0000329B 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   240                              <1> .mbbpb0:
   241 000032A1 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   242 000032A4 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   243 000032A9 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   244 000032B0 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   245 000032B4 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   246 000032B7 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   247 000032BB B90F000000          <1>     mov ecx, bpbEx_size/8
   248 000032C0 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   249 000032C3 C3                  <1>     ret
   250                              <1> .msdIOCTLRead:       ;Function 3, returns done
   251 000032C4 B005                <1>     mov al, drvBadDrvReq
   252 000032C6 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   253 000032C9 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   254 000032CF C3                  <1>     ret
   255                              <1> .msdRead:            ;Function 4
   256                              <1> ;Will read one sector at a time.
   257 000032D0 B005                <1>     mov al, 05h ;Bad request structure length
   258 000032D2 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   259 000032D5 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   260                              <1> 
   261 000032DB 4889DF              <1>     mov rdi, rbx
   262 000032DE 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   263                              <1> .msdr0:
   264 000032E0 B682                <1>     mov dh, 82h ;LBA Read Sectors
   265 000032E2 E841010000          <1>     call .msdBlkIOCommon
   266 000032E7 0F8255FEFFFF        <1>     jc .msdIOError
   267 000032ED 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   268 000032F5 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   269 000032FD FFC6                <1>     inc esi
   270 000032FF 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   271 00003302 75DC                <1>     jne .msdr0
   272 00003304 4889FB              <1>     mov rbx, rdi
   273 00003307 C3                  <1>     ret
   274                              <1> .msdWrite:           ;Function 8
   275                              <1> ;Will write one sector at a time.
   276 00003308 B005                <1>     mov al, 05h ;Bad request structure length
   277 0000330A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   278 0000330D 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   279                              <1> 
   280 00003313 4889DF              <1>     mov rdi, rbx
   281 00003316 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   282                              <1> .msdw0:
   283 00003318 B683                <1>     mov dh, 83h ;LBA Write Sectors
   284 0000331A E809010000          <1>     call .msdBlkIOCommon
   285 0000331F 0F821DFEFFFF        <1>     jc .msdIOError
   286 00003325 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   287 0000332D 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   288 00003335 FFC6                <1>     inc esi
   289 00003337 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   290 0000333A 75DC                <1>     jne .msdw0
   291 0000333C 4889FB              <1>     mov rbx, rdi
   292 0000333F C3                  <1>     ret
   293                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   294                              <1> ;Will write one sector at a time and then verify it.
   295 00003340 B005                <1>     mov al, 05h ;Bad request structure length
   296 00003342 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   297 00003345 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   298                              <1> 
   299 0000334B 4889DF              <1>     mov rdi, rbx
   300 0000334E 31F6                <1>     xor esi, esi  ;Set counter to zero
   301                              <1> .msdwv0:
   302 00003350 B683                <1>     mov dh, 83h ;LBA Write Sectors
   303 00003352 E8D1000000          <1>     call .msdBlkIOCommon
   304 00003357 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   305 0000335D B684                <1>     mov dh, 84h ;LBA Verify Sectors
   306 0000335F E8C4000000          <1>     call .msdBlkIOCommon
   307 00003364 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   308 0000336A 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   309 00003372 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   310 0000337A FFC6                <1>     inc esi
   311 0000337C 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   312 0000337F 75CF                <1>     jne .msdwv0
   313 00003381 4889FB              <1>     mov rbx, rdi
   314 00003384 C3                  <1>     ret
   315                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   316 00003385 B005                <1>     mov al, drvBadDrvReq
   317 00003387 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   318 0000338A 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   319                              <1> 
   320 00003390 C3                  <1>     ret
   321                              <1> .msdDevOpen:         ;Function 13
   322 00003391 B005                <1>     mov al, drvBadDrvReq
   323 00003393 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   324 00003396 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   325                              <1> 
   326 0000339C 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   327 000033A1 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   328 000033A8 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   329 000033AB C3                  <1>     ret
   330                              <1> .msdDevClose:        ;Function 14
   331 000033AC B005                <1>     mov al, drvBadDrvReq
   332 000033AE 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   333 000033B1 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   334                              <1> 
   335 000033B7 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   336 000033BC 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   337 000033C3 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   338 000033C6 C3                  <1>     ret
   339                              <1> .msdRemovableMedia:  ;Function 15
   340 000033C7 B005                <1>     mov al, drvBadDrvReq
   341 000033C9 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   342 000033CC 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   343                              <1> 
   344 000033D2 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   345 000033D7 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   346 000033DE 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   347 000033E1 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   348 000033E6 31D2                <1>     xor edx, edx    ;Busy bit clear
   349 000033E8 A880                <1>     test al, 80h
   350 000033EA 0F44CA              <1>     cmovz ecx, edx
   351 000033ED 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   352 000033F1 C3                  <1>     ret
   353                              <1> .msdGenericIOCTL:    ;Function 19
   354 000033F2 B005                <1>     mov al, drvBadDrvReq
   355 000033F4 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   356 000033F7 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   357                              <1> 
   358 000033FD C3                  <1>     ret
   359                              <1> .msdGetLogicalDev:   ;Function 23
   360 000033FE B005                <1>     mov al, drvBadDrvReq
   361 00003400 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   362 00003403 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   363                              <1> 
   364 00003409 8A0541000000        <1>     mov al, byte [.msdCurDev]
   365 0000340F 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   366 00003412 C3                  <1>     ret
   367                              <1> .msdSetLogicalDev:   ;Function 24
   368 00003413 B005                <1>     mov al, drvBadDrvReq
   369 00003415 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   370 00003418 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   371                              <1> 
   372 0000341E 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   373 00003421 880529000000        <1>     mov byte [.msdCurDev], al
   374 00003427 C3                  <1>     ret
   375                              <1> 
   376                              <1> .msdBlkIOCommon:  ;Does block IO
   377                              <1> ;Called with rdi containing old rbx value and ah with function number
   378                              <1> ;rbp points to bpb
   379                              <1> ;Error handled by caller
   380                              <1> ;Sector count handled by caller
   381                              <1> ;Called with dh = BIOS function number
   382 00003428 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   383 0000342D 8A90[51340000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   384 00003433 31C9                <1>     xor ecx, ecx
   385 00003435 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   386 00003438 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   387 0000343C 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   388 00003440 88F4                <1>     mov ah, dh
   389 00003442 B001                <1>     mov al, 01h ;Do one sector at a time 
   390 00003444 CD33                <1>     int 33h
   391 00003446 C3                  <1>     ret
   392                              <1> 
   393 00003447 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   394                              <1> ;LASTDRIVE default is 5
   395                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   396                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   397 00003450 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   398                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   399 00003451 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   400 00003456 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   401 0000345B 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   401 00003464 000000000000000000- <1>
   401 0000346D 000000000000000000- <1>
   401 00003476 000000000000000000- <1>
   401 0000347F 00000000            <1>
   402 00003483 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   402 0000348C 000000000000000000- <1>
   402 00003495 000000000000000000- <1>
   402 0000349E 000000000000000000- <1>
   402 000034A7 000000000000000000- <1>
   402 000034B0 000000000000000000- <1>
   402 000034B9 000000000000000000- <1>
   402 000034C2 000000000000000000- <1>
   402 000034CB 000000000000000000- <1>
   402 000034D4 000000000000000000- <1>
   402 000034DD 000000000000000000- <1>
   402 000034E6 000000000000000000- <1>
   402 000034EF 000000000000000000- <1>
   402 000034F8 000000000000000000- <1>
   402 00003501 000000000000000000- <1>
   402 0000350A 000000000000000000- <1>
   402 00003513 000000000000000000- <1>
   402 0000351C 000000000000000000- <1>
   402 00003525 000000000000000000- <1>
   402 0000352E 000000000000000000- <1>
   402 00003537 000000000000000000- <1>
   402 00003540 000000000000000000- <1>
   402 00003549 000000000000000000- <1>
   402 00003552 000000000000000000- <1>
   402 0000355B 000000000000000000- <1>
   402 00003564 000000000000000000- <1>
   402 0000356D 000000000000000000- <1>
   402 00003576 000000000000000000- <1>
   402 0000357F 000000000000000000- <1>
   402 00003588 000000000000000000- <1>
   402 00003591 000000000000000000- <1>
   402 0000359A 000000000000000000- <1>
   402 000035A3 000000000000000000- <1>
   402 000035AC 000000000000000000- <1>
   402 000035B5 000000000000000000- <1>
   402 000035BE 000000000000000000- <1>
   402 000035C7 000000000000000000- <1>
   402 000035D0 000000000000000000- <1>
   402 000035D9 000000000000000000- <1>
   402 000035E2 000000000000000000- <1>
   402 000035EB 000000000000000000- <1>
   402 000035F4 000000000000000000- <1>
   402 000035FD 000000000000000000- <1>
   402 00003606 000000000000000000- <1>
   402 0000360F 000000000000000000- <1>
   402 00003618 000000000000000000- <1>
   402 00003621 000000000000000000- <1>
   402 0000362A 000000000000000000- <1>
   402 00003633 000000000000000000- <1>
   402 0000363C 000000000000000000- <1>
   402 00003645 000000000000000000- <1>
   402 0000364E 000000000000000000- <1>
   402 00003657 000000000000000000- <1>
   402 00003660 000000000000000000- <1>
   402 00003669 000000000000000000- <1>
   402 00003672 000000000000000000- <1>
   402 0000367B 000000000000000000- <1>
   402 00003684 000000000000000000- <1>
   402 0000368D 000000000000000000- <1>
   402 00003696 000000000000000000- <1>
   402 0000369F 000000000000000000- <1>
   402 000036A8 000000000000000000- <1>
   402 000036B1 000000000000000000- <1>
   402 000036BA 000000000000000000- <1>
   402 000036C3 000000000000000000- <1>
   402 000036CC 000000000000000000- <1>
   402 000036D5 000000000000        <1>
   403                              <1> 
   404                              <1> endptr equ $
    42                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    43                                  ;Paragraph alignment
    44                                  %include "./Source/BSS/dosDynaDataArea.asm"
    45                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    46                              <1> ; the MCB chain!
    47                              <1> ddaStart:
    48 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    49                              <1> 
    50                              <1> ;Create DPB chain of first 5 available DPB slots
    51                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    52 00000010 <res 35h>           <1> firstDPB        resb dpb_size
    53 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    54                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    55                              <1> ;Always jettison this space
    56 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    57 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    58 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    59                              <1> 
    60 00000119 <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    61 00000139 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    62                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    63                              <1> dynamicDataAreaLength equ $ - ddaStart
    63          ------------------  <1>  info: assembly required 1+5+2 passes

