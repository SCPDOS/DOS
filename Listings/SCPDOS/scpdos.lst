     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvExtFun   equ 40h ;If set, functions 13, 17, 18 supported (must be)
    73                              <1>     devDrvIOCTL2   equ 80h ;If set, IOCTL function 19 supported
    74                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported (must)
    75                              <1>     devDrvIOCTL    equ 4000h ;If set, Generic IOCTL supported
    76                              <1>     devDrvChar     equ 8000h ;If set, Char device
    77                              <1> ;Bit 0 1=console input
    78                              <1> ;    1 1=console output (character devices)
    79                              <1> ;    2 1=NUL device
    80                              <1> ;    3 1=CLOCK device
    81                              <1> ;    4 1=INT 49 output (CON)
    82                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    83                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    84                              <1> ;   11 1=open/close/removable media supported (3.0+)
    85                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    86                              <1> ;      1=media descriptor in FAT required (block devices)
    87                              <1> ;   14 1=IOCTL supported
    88                              <1> ;   15 0=block device
    89                              <1> ;      1=character device
    90                              <1> 
    91                              <1> ;Driver structures
    92                              <1> 
    93                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    94                              <1> 
    95                              <1>     .hdrlen resb 1  ;Length of the request header
    96                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    97                              <1>     .cmdcde resb 1  ;Command code
    98                              <1>     .status resw 1  ;Status word
    99                              <1>     .devptr resq 1  ;Device queue pointer field
   100                              <1> 
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> struc drvReqHdr
   104                              <1>     drvReqHdrM
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   105                              <1> endstruc
   106                              <1> 
   107                              <1> struc initReqPkt  ;Init Request Packet
   108                              <1> 
   109                              <1>     drvReqHdrM   ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   110 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   111 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   112 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   113 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   118                              <1> 
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   120 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   121 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   122 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   129 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   130 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   131 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   132                              <1> 
   133                              <1> endstruc
   134                              <1> 
   135                              <1> struc ioReqPkt   ;IO Request Packet
   136                              <1> 
   137                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   138 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   139 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   140 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   141 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   142 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   143                              <1> 
   144                              <1> endstruc
   145                              <1> 
   146                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   147                              <1>     
   148                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   149 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc statusReqPkt   ;Status Request Packet
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   156                              <1> 
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc openReqPkt ;Open Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc closeReqPkt ;Close Device Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   180                              <1>      
   181                              <1> endstruc
   182                              <1> 
   183                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   184                              <1> 
   185                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   186 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   187 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   188 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   189 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   190 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   201                              <1>     
   202                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   203                              <1> 
   204                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   138                              <1> 
   139                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   140                              <1> 
   141 00000000 ??????              <1>     .jmpBoot                resb 3 
   142 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   143 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   144 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   145 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   146 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   147 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   148 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   149 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   150 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   151 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   152 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   153 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   154 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   155 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   156 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   157 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   158 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   159 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   160                              <1> 
   161                              <1> endstruc
   162                              <1> 
   163                              <1> struc FSInfo
   164                              <1> 
   165 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   166 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   167 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   168 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   169 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   170 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   171 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   172                              <1> 
   173                              <1> endstruc
     8                                  %include "./Source/Include/dosStruc.inc"
     9                              <1> 
    10                              <1> ;-------------------------------------------------------;
    11                              <1> ; This include file contains miscellaneous internal     ;
    12                              <1> ; SCP/DOS structures.                                   ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> 
    15                              <1> ;------------------------------------------------------------------------;
    16                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    17                              <1> ; its file system structure. This is used to locate files and structures
    18                              <1> ; on the device itself and to translate file requests to cluster chains
    19                              <1> ; to LBAs to pass to the disk driver..
    20                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    21                              <1> ; drivers Initialise routine has been called.
    22                              <1> ;------------------------------------------------------------------------;
    23                              <1> struc dpb        ;Drive Parameter Block
    24                              <1> 
    25 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    26 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    27 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    28 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    29 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    30 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    31 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    32 00000009 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    33 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    34 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    35 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    36 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    37                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    38 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    39 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    40 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    41 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    42 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    43 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    44                              <1> 
    45                              <1> endstruc
    46                              <1> 
    47                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    48                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    49                              <1> ;------------------------------------------------------------------------;
    50                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    51                              <1> ; All disk pathing requests go via the CDS for that drive.
    52                              <1> ; The default drive is the last accessed drive, this number is stored
    53                              <1> ; in the DOS data area.
    54                              <1> ; The CDS is stored as an array with the offset into the array being 
    55                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    56                              <1> ;
    57                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> struc cds       ;Current Directory structure
    60 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    61 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    62 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    63 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    64 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    65 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    66                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    67                              <1> ; another, we save the number of chars to skip to that deep level).
    68                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    69                              <1> ; Only affects for SUBST drives, not JOIN
    70                              <1> ; Flags: Bit 15 set = Network drive
    71                              <1> ;        Bit 14 set = Physical drive
    72                              <1> ;        Bit 13 set = JOIN'ed drive
    73                              <1> ;        Bit 12 set = SUBST'ed drive
    74                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    75                              <1> endstruc
    76                              <1> ;CDS equates
    77                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    78                              <1> cdsPhysDrive    equ 4000h   ;CDS initialised 
    79                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    80                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    81                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    82                              <1> ;------------------------------------------------------------------------;
    83                              <1> ; The SFT is a way to allow applications to open file handles to files 
    84                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    85                              <1> ; under the first header, and then a second header will be linked to the 
    86                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    87                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    88                              <1> ; using the FCBS= command. Default FCBS=5.
    89                              <1> ;
    90                              <1> ; A file handle describes the file, and the location within the file that
    91                              <1> ; we are reading. The file handle can be manipulated without the file
    92                              <1> ; being in memory, thus allowing the user to access data without needing 
    93                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    94                              <1> ; accessing devices, by treating them as files with their drivers 
    95                              <1> ; responding and translating the manipulations of the file handle itself.
    96                              <1> ; Neither the driver nor the application should see or use the SFT for
    97                              <1> ; the handle, as it is subject to change (and will change when file 
    98                              <1> ; sharing provisions are included). The DOS will make requests to the 
    99                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   100                              <1> ; track of the information in the SFT entry for that handle. 
   101                              <1> ;
   102                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   103                              <1> ; can point to the same file. It all depends on what the applications 
   104                              <1> ; want to do with the File.
   105                              <1> ;
   106                              <1> ; !!!!IMPORTANT!!!!
   107                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   108                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   109                              <1> ;
   110                              <1> ;Each SFT may look like this:
   111                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   112                              <1> ;            |                |
   113                              <1> ;       wNumFiles*sft    wNumFiles*sft
   114                              <1> ;
   115                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   116                              <1> ; System FCBs.
   117                              <1> ;
   118                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   119                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   120                              <1> ;
   121                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   122                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   123                              <1> ;------------------------------------------------------------------------;
   124                              <1> struc sfth   ;System file table header
   125                              <1> ; This is the SFT header.
   126                              <1> ; This structure comes before the start of the first file in the array/table.
   127 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   128 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc sft
   132                              <1> ;This is the file struc itself
   133 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   134 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   135 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   136 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   137 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   138 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   139 00000013 ????                <1>     .wTime       resw 1    ;File Time
   140 00000015 ????                <1>     .wDate       resw 1    ;File Date
   141 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   142 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   143 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   144 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   145 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   146 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   147 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   148 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   149 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   150 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   151 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   152                              <1> ;                           0 means no record
   153                              <1> endstruc
   154                              <1> ;Open Mode equates
   155                              <1> ;Access modes   Bits[2:0]
   156                              <1> ReadAccess      equ 0h
   157                              <1> WriteAccess     equ 1h
   158                              <1> RWAccess        equ 2h
   159                              <1> ;Bit 3 reserved 0
   160                              <1> ;Sharing modes  Bits[6:4]
   161                              <1> CompatShare     equ 0h
   162                              <1> denyRWShare     equ 10h
   163                              <1> denyWriteShare  equ 20h
   164                              <1> denyReadShare   equ 30h
   165                              <1> denyNoneShare   equ 40h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> ;Critical Error handling
   169                              <1> critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> ;------------------------------------------------------------------------;
   198                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   199                              <1> ; to an internal buffer, and then copying it to the specified location
   200                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   201                              <1> ; another request for the same sector from the same device is made, so 
   202                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   203                              <1> ; size, selected according to the largest detected sector size during 
   204                              <1> ; the initial loadup.
   205                              <1> ;
   206                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   207                              <1> ;
   208                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   209                              <1> ;------------------------------------------------------------------------;
   210                              <1> 
   211                              <1> struc bufferHdr
   212 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   213 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> ;Note! A buffer is marked as referenced IF it has been accessed via 
   230                              <1> ; a Read or Write call. 
   231                              <1> ; When a buffer is used temporarily for internal purposes (as when DOS
   232                              <1> ; gives a driver a buffer) and then DOS reads data from that buffer (such as
   233                              <1> ; a BUILD BPB situation), the data is left as unreferenced as the use for that 
   234                              <1> ; buffer goes away before the end of the DOS call, and there is no danger of.
   235                              <1> ; of misbehaviour.
   236                              <1> ;------------------------------------------------------------------------;
   237                              <1> ; Memory control block for each memory arena
   238                              <1> ;------------------------------------------------------------------------;
   239                              <1> struc mcb
   240 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   241 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   242 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   243 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   244                              <1>     .program:
   245                              <1> endstruc
   246                              <1> ;MCB equates
   247                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   248                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   249                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   250                              <1> mcbMarkCtn      equ "M"
   251                              <1> mcbMarkEnd      equ "Z"
   252                              <1> 
   253                              <1> memFirstFit     equ 0   ;First free block goes to application
   254                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   255                              <1> memLastFit      equ 2   ;Last free block goes to application
   256                              <1> 
   257                              <1> ;Owner = Para aligned address => Owning application PSP
   258                              <1> ;...To consider...
   259                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   260                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   261                              <1> ;------------------------------------------------------------------------;
   262                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   263                              <1> ; following order, thus allowing for return values to be placed in the 
   264                              <1> ; registers by accessing the caller register stack frame.
   265                              <1> ;------------------------------------------------------------------------;
   266                              <1> struc callerFrame
   267 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   268 00000008 ????????????????    <1>     .rbx    resq 1    
   269 00000010 ????????????????    <1>     .rcx    resq 1
   270 00000018 ????????????????    <1>     .rdx    resq 1
   271 00000020 ????????????????    <1>     .rsi    resq 1
   272 00000028 ????????????????    <1>     .rdi    resq 1
   273 00000030 ????????????????    <1>     .rbp    resq 1
   274 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   275 00000040 ????????????????    <1>     .r9     resq 1
   276                              <1> ;Pushed by Processor when invoked via Interrupt
   277 00000048 ????????????????    <1>     .rip    resq 1
   278 00000050 ????????????????    <1>     .cs     resq 1
   279 00000058 ????????????????    <1>     .flags  resq 1
   280                              <1> endstruc
   281                              <1> 
   282                              <1> struc fcb
   283                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   284 00000000 ??                  <1>     .driveNum   resb 1
   285 00000001 ????????????????    <1>     .filename   resb 8
   286 00000009 ??????              <1>     .fileext    resb 3
   287 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   288                              <1> ;One block consists of 128 records, of size denoted in the below
   289 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   290 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   291 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   292 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   293 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   294 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   295 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   296 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   297 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   298                              <1>     ;If record size > 64, high byte is ignored.
   299                              <1>     ;Used for random read and write operations to find the right record
   300                              <1> endstruc
   301                              <1> 
   302                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   303 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   304 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   305 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   306 0000000D ????????            <1>     .dirOffset  resd 1  ;Entry within dir (made a dword but will never be so)
   307 00000011 ????????            <1>     .parCluster resd 1  ;Parent cluster number
   308 00000015 ??                  <1>     .atrribFnd  resb 1  ;Attrib of file found
   309 00000016 ????                <1>     .fileTime   resw 1  ;File time
   310 00000018 ????                <1>     .fileDate   resw 1  ;File date
   311 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   312 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   313                              <1> endstruc
   314                              <1> 
   315                              <1> struc psp
   316 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   317 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   318 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   319 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   320 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   321 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   322 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   323 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   324 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   325 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   326 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   327 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   328 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   329 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   330                              <1> ;Extra handle arrays are grouped into a linked list
   331                              <1> ;The below are in the same place as in DOS
   332 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   333 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   334                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   335 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   336 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   337                              <1> endstruc
   338                              <1> 
   339                              <1> struc clkStruc
   340 00000000 ????                <1>     .dateWord   resw 1
   341 00000002 ??                  <1>     .minutes    resb 1
   342 00000003 ??                  <1>     .hours      resb 1
   343 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   344 00000005 ??                  <1>     .seconds    resb 1
   345                              <1> endstruc
   346                              <1> 
   347                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   348                              <1> ;for a space of 64Gb
   349                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   350                              <1> 
   351                              <1> ;Critical Error AH bitfield equates
   352                              <1> critRead    equ 0h
   353                              <1> critWrite   equ 1h
   354                              <1> critDOS     equ 0h
   355                              <1> critFAT     equ 2h
   356                              <1> critDir     equ 4h
   357                              <1> critData    equ 6h
   358                              <1> critFailOK  equ 8h
   359                              <1> critRetryOK equ 10h
   360                              <1> critIgnorOK equ 20h
   361                              <1> critCharDev equ 80h
   362                              <1> 
   363                              <1> critIgnore  equ 0
   364                              <1> critRetry   equ 1
   365                              <1> critAbort   equ 2
   366                              <1> critFail    equ 3
   367                              <1> 
   368                              <1> ;MISC ASCII control chars
   369                              <1> NUL equ 00h ;^@         | ASCII Null
   370                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   371                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   372                              <1> BEL equ 07h ;^G         | ASCII Bell
   373                              <1> BSP equ 08h ;^H         | ASCII Backspace
   374                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   375                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   376                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   377                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   378                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   379                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   380                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   381                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   382                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   383                              <1> SPC equ 20h ;Printable  | ASCII Space
   384                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   385                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   386                              <1> 
   387                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   388                              <1> ;Extended Ascii Codes
   389                              <1> eF1     equ 3Bh ;F1 second byte
   390                              <1> eF2     equ 3Ch ;F2 second byte
   391                              <1> eF3     equ 3Dh ;F3 second byte
   392                              <1> eF4     equ 3Eh ;F4 second byte
   393                              <1> eF5     equ 3Fh ;F5 second byte
   394                              <1> eF6     equ 40h ;F6 second byte
   395                              <1> eF7     equ 41h ;F7 second byte
   396                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   397                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   398                              <1> eIns    equ 52h ;Insert second byte
   399                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
     9                                  %include "./Source/Debug/debSym.inc"
    10                              <1> ;This file will include the debuging symbols
    11                              <1> 
    12                              <1> %define true 1
    13                              <1> %define false 0
    14                              <1> 
    15                              <1> ;Switch the DEBUG to false in production!
    16                              <1> %define DEBUG false
    17                              <1> %define DPBINFO false
    18                              <1> %define REGS false
    19                              <1> %define ENDSTATUS true
    20                              <1> %define ALLOCTEST false
    21                              <1> 
    22                              <1> 
    23                              <1> ;Use this space as the debug stack
    24                              <1> %define debStackTop 80000h
    10                                  %include "./Source/Include/dosError.inc"
    11                              <1> ;DOS Error codes
    12                              <1> 
    13                              <1> ;Extended Error Codes
    14                              <1> errInvFnc   equ 1   ;Invalid function number
    15                              <1> errFnf      equ 2   ;File not found
    16                              <1> errPnf      equ 3   ;Path not found
    17                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    18                              <1> errAccDen   equ 5   ;Access denied (to resource)
    19                              <1> errBadHdl   equ 6   ;Invalid handle
    20                              <1> errMCBbad   equ 7   ;MCB's destroyed
    21                              <1> errNoMem    equ 8   ;Insufficient memory
    22                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    23                              <1> errBadEnv   equ 10  ;Invalid environment
    24                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    25                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    26                              <1> errInvDat   equ 13  ;Invalid data
    27                              <1> ;           equ 14  ;Reserved
    28                              <1> errBadDrv   equ 15  ;Invalid drive specified
    29                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    30                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    31                              <1> errNoFil    equ 18  ;No more files
    32                              <1> ;The following are Driver error codes + 19
    33                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    34                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    35                              <1> errUnkUnt   equ 20  ;Unknown Unit
    36                              <1> errDrvNR    equ 21  ;Drive not ready
    37                              <1> errUnkCmd   equ 22  ;Unknown Command
    38                              <1> errCRCerr   equ 23  ;Data (CRC) error
    39                              <1> errBadRLn   equ 24  ;Bad request structure length
    40                              <1> errSekErr   equ 25  ;Seek error
    41                              <1> errUnkMed   equ 26  ;Unknown media type
    42                              <1> errSecNF    equ 27  ;Sector not Found
    43                              <1> errNoPap    equ 28  ;Printer out of paper
    44                              <1> errWF       equ 29  ;Write fault
    45                              <1> errRF       equ 30  ;Read fault
    46                              <1> errGF       equ 31  ;General fault
    47                              <1> ;----------------------------------------------
    48                              <1> ;The following two go inbetween the Disk errors
    49                              <1> errShrVio   equ 32  ;Sharing violations
    50                              <1> errLokVio   equ 33  ;File Lock violation
    51                              <1> ;----------------------------------------------
    52                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    53                              <1> errNoFCB    equ 35  ;FCB unavailable
    54                              <1> errShrFul   equ 36  ;Sharing buffer full
    55                              <1> 
    56                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    57                              <1> 
    58                              <1> errFilExist equ 80  ;File already exists
    59                              <1> errDirExist equ 82  ;Directory already exists
    60                              <1> errFI44     equ 83  ;Fail on INT 44h
    61                              <1> errRedir    equ 84  ;Too many levels of redirection
    62                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    63                              <1> errBadPass  equ 86  ;Bad password
    64                              <1> errBadParam equ 87  ;Bad parameter passed to request
    65                              <1> errNetWrite equ 88  ;Network Write Fault
    66                              <1> ;-----------------------------------------------------------------------------
    67                              <1> ;Error Loci
    68                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    69                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    70                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    71                              <1> eLocChr     equ 4   ;Serial/Character Device error
    72                              <1> eLocMem     equ 5   ;Related to RAM
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error Actions
    75                              <1> eActRet     equ 1   ;Retry
    76                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    77                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    78                              <1> eActAbt     equ 4   ;Abort with cleanup
    79                              <1> eActKil     equ 5   ;Abort without cleanup
    80                              <1> eActIgn     equ 6   ;Ignore error
    81                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    82                              <1> ;-----------------------------------------------------------------------------
    83                              <1> ;Error classes
    84                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    85                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    86                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    87                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    88                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    89                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    90                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    91                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    92                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    93                              <1> eClsLocked  equ 10  ;Resource Locked
    94                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    95                              <1> eClsClash   equ 12  ;Resource already exists!
    96                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  Segment .text align=1   ;Init code
    12                                  %define currSegVBase 0
    13                                  %include "./Source/Sysinit/sysInit.asm"
    14                              <1> ; We arrive here with the following values in the registers.
    15                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    16                              <1> ; dx  = Int 33h boot device number
    17                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    18                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    19 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    20 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    20 0000000B 909090909090909090- <1>
    20 00000014 909090909090909090- <1>
    20 0000001D 909090909090909090- <1>
    20 00000026 909090909090909090- <1>
    20 0000002F 909090909090909090- <1>
    20 00000038 909090909090909090- <1>
    20 00000041 909090909090909090- <1>
    20 0000004A 909090909090909090- <1>
    20 00000053 909090909090909090- <1>
    20 0000005C 909090909090909090- <1>
    20 00000065 909090909090909090- <1>
    20 0000006E 909090909090909090- <1>
    20 00000077 909090909090909090- <1>
    20 00000080 909090909090909090- <1>
    20 00000089 909090909090909090- <1>
    20 00000092 909090909090909090- <1>
    20 0000009B 909090909090909090- <1>
    20 000000A4 909090909090909090- <1>
    20 000000AD 909090909090909090- <1>
    20 000000B6 909090909090909090- <1>
    20 000000BF 909090909090909090- <1>
    20 000000C8 909090909090909090- <1>
    20 000000D1 909090909090909090- <1>
    20 000000DA 909090909090909090- <1>
    20 000000E3 909090909090909090- <1>
    20 000000EC 909090909090909090- <1>
    20 000000F5 909090909090909090- <1>
    20 000000FE 9090                <1>
    21                              <1> ;First move the alignment of the DOSSEG to 4Kb
    22 00000100 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    23 00000101 52                  <1>     push rdx    ;Save dl on stack briefly
    24 00000102 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    25 00000107 0F32                <1>     rdmsr
    26 00000109 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    27 0000010B 48C1E720            <1>     shl rdi, 20h        ;Shift high
    28 0000010F 89C7                <1>     mov edi, eax        ;Get the low dword in
    29 00000111 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    30 00000114 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    31 0000011B 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    32 00000122 89F8                <1>     mov eax, edi
    33 00000124 4889FA              <1>     mov rdx, rdi
    34 00000127 48C1EA20            <1>     shr rdx, 20h
    35 0000012B 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    36 0000012D 5A                  <1>     pop rdx
    37                              <1> ;------------------------------------------------;
    38                              <1> ;              Connect Debugger                  ;
    39                              <1> ;------------------------------------------------;
    40                              <1> %if DEBUG
    41                              <1> ;Only connect if in debug mode
    42                              <1>     mov eax, 0C501h ;Connect debugger
    43                              <1>     int 35h
    44                              <1> %endif
    45                              <1> ;------------------------------------------------;
    46                              <1> ;           Sanitise the data area               ;
    47                              <1> ;------------------------------------------------;
    48                              <1> ; This call initialises ALL fields in the DOS    ;
    49                              <1> ; data area with 0's. Thus any fields, which     ;
    50                              <1> ; need to be initialised with a 0 value, are     ;
    51                              <1> ; initialised for free.                          ;
    52                              <1> ;------------------------------------------------;
    53 0000012E B9[8DD80300]        <1>     mov ecx, dSegLen
    54 00000133 30C0                <1>     xor al, al
    55 00000135 57                  <1>     push rdi    ;Temp save rdi on the stack
    56 00000136 F3AA                <1>     rep stosb
    57 00000138 5F                  <1>     pop rdi
    58                              <1> ;------------------------------------------------;
    59                              <1> ;          Start saving Basic DOS data           ;
    60                              <1> ;------------------------------------------------;
    61 00000139 64881425[10C00300]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    62                              <1> ;Copy DOS to its final resting place
    63 00000141 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    63 00000146 [00C00300]          <1>
    64 0000014A 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    64 0000014F [08C00300]          <1>
    65 00000153 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    66 00000156 4881C7[8DD80300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    67 0000015D 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    68 00000164 B900100000          <1>     mov ecx, 1000h
    69 00000169 F348A5              <1>     rep movsq
    70                              <1> 
    71 0000016C CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    72 0000016E 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    73 00000172 664489C0            <1>     mov ax, r8w
    74 00000176 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
    75 0000017E 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    76 00000186 64C60425[70C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    76 0000018E 05                  <1>
    77                              <1>     ;mov byte fs:[numPhysVol], 0    ;Number of logical drives
    78 0000018F 6466C70425-         <1>     mov word fs:[numFiles], 5      ;Default 8 files, at start 5
    78 00000194 [96C00300]0500      <1>
    79 0000019A 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
    79 0000019F [98C00300]1400      <1>
    80 000001A5 64C60425[71C00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
    80 000001AD 01                  <1>
    81                              <1>     ;If no detected Int 33h devices, halt 
    82 000001AE 49C1E810            <1>     shr r8, 2*8
    83 000001B2 4584C0              <1>     test r8b, r8b
    84 000001B5 0F84970A0000        <1>     jz errorInit
    85                              <1> ;------------------------------------------------;
    86                              <1> ;          Add additional page tables            ;
    87                              <1> ;------------------------------------------------;
    88                              <1> ;This will allow for up to 64Gb of addressible space
    89 000001BB 4889EF              <1>     mov rdi, rbp
    90                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    91 000001BE B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
    92 000001C3 57                  <1>     push rdi
    93 000001C4 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    93 000001CD 00                  <1>
    94                              <1> pdtLoop:
    95 000001CE 48AB                <1>     stosq
    96 000001D0 480500002000        <1>     add rax, 200000h
    97 000001D6 FFC9                <1>     dec ecx
    98 000001D8 75F4                <1>     jnz pdtLoop
    99 000001DA 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   100                              <1> ;Now we add every 4kb page to the page directory pointer table
   101                              <1> ;15 4kb pages to consider
   102 000001DB 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   103 000001DE 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   104 000001E1 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   105 000001E8 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   106 000001EF B93C000000          <1>     mov ecx, 60
   107 000001F4 480D03000000        <1>     or rax, 3h      ;present and r/w
   108                              <1> pdptLoop:
   109 000001FA 48AB                <1>     stosq
   110 000001FC 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   111 00000202 FFC9                <1>     dec ecx
   112 00000204 75F4                <1>     jnz pdptLoop
   113 00000206 0F20DF              <1>     mov rdi, cr3
   114 00000209 0F22DF              <1>     mov cr3, rdi
   115                              <1> 
   116                              <1> ;------------------------------------------------;
   117                              <1> ;                   MCB inits                    ;
   118                              <1> ;------------------------------------------------;
   119                              <1> mcbInit:
   120 0000020C B820E80000          <1>     mov eax, 0E820h
   121 00000211 CD35                <1>     int 35h
   122                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   123 00000213 E804010000          <1>     call .mcbFindAddress
   124 00000218 7349                <1>     jnc .mcbi1  ;If found, proceed
   125                              <1>     ;Here, we try use E801h
   126 0000021A B801E80000          <1>     mov eax, 0E801h
   127 0000021F CD35                <1>     int 35h
   128 00000221 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   129 00000224 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   130 00000227 85C0                <1>     test eax, eax
   131 00000229 741B                <1>     jz .worst
   132 0000022B C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   133 0000022E C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   134 00000231 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   135 00000239 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   136 00000241 E909010000          <1>     jmp mcbBuild
   137                              <1> .worst:
   138                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   139 00000246 B800002000          <1>     mov eax, 200000h
   140 0000024B 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   140 00000250 [08C00300]          <1>
   141 00000254 29D8                <1>     sub eax, ebx
   142 00000256 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   143 0000025E E9EC000000          <1>     jmp mcbBuild 
   144                              <1> .mcbi1:
   145 00000263 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   146 00000266 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   146 0000026F 00                  <1>
   147 00000270 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   148 00000274 0F85C2000000        <1>     jne .mcbFail
   149 0000027A 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   150                              <1>     ;PCI hole always exists so this value will always be a dword
   151 0000027E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   152 00000286 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   153 00000289 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   154 0000028C 4881FB00000001      <1>     cmp rbx, 1000000h  
   155 00000293 773C                <1>     ja .skipISA
   156                              <1> ;Here we deal with ISA hole issues
   157 00000295 B820E80000          <1>     mov eax, 0E820h
   158 0000029A CD35                <1>     int 35h
   159 0000029C 48B800000001000000- <1>     mov rax, 1000000h
   159 000002A5 00                  <1>
   160 000002A6 E871000000          <1>     call .mcbFindAddress
   161 000002AB 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   162 000002B1 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   162 000002BA 00                  <1>
   163 000002BB 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   164 000002BF 0F858A000000        <1>     jne mcbBuild  
   165 000002C5 488B5808            <1>     mov rbx, qword [rax + 8]
   166 000002C9 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   167                              <1> .skipISA:
   168 000002D1 B820E80000          <1>     mov eax, 0E820h
   169 000002D6 CD35                <1>     int 35h
   170 000002D8 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   170 000002E1 00                  <1>
   171 000002E2 E835000000          <1>     call .mcbFindAddress
   172 000002E7 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   173 000002E9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   173 000002F2 00                  <1>
   174 000002F3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   175 000002F7 7556                <1>     jne mcbBuild   
   176 000002F9 488B5808            <1>     mov rbx, qword [rax + 8]
   177                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   178 000002FD 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   178 00000306 00                  <1>
   179 00000307 4839CB              <1>     cmp rbx, rcx
   180 0000030A 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   181 0000030E 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   181 00000313 [1BC00300]          <1>
   182 00000317 E933000000          <1>     jmp mcbBuild
   183                              <1> .mcbFindAddress:
   184                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   185                              <1> ;Entry: rax = Address of arena to search for
   186                              <1> ;       rsi = Pointer to memory map
   187                              <1> ;       ecx = Number of 24 byte entries
   188                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   189                              <1> ;       CF=CY : value in rax not found
   190 0000031C 56                  <1>     push rsi
   191 0000031D 51                  <1>     push rcx
   192 0000031E 50                  <1>     push rax
   193                              <1> .mfa0:
   194 0000031F 483B06              <1>     cmp rax, qword [rsi]
   195 00000322 7410                <1>     je .mcbAddressFound
   196 00000324 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   197 0000032B FFC9                <1>     dec ecx
   198 0000032D 79F0                <1>     jns .mfa0
   199                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   200 0000032F 58                  <1>     pop rax
   201 00000330 59                  <1>     pop rcx
   202 00000331 5E                  <1>     pop rsi
   203 00000332 F9                  <1>     stc
   204 00000333 C3                  <1>     ret
   205                              <1> .mcbAddressFound:
   206 00000334 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   207 00000337 59                  <1>     pop rcx ;Pop old rax value off
   208 00000338 59                  <1>     pop rcx
   209 00000339 5E                  <1>     pop rsi
   210 0000033A F8                  <1>     clc
   211 0000033B C3                  <1>     ret
   212                              <1> .mcbFail:
   213 0000033C 488D2D36090000      <1>     lea rbp, mcbFailmsg
   214 00000343 B804130000          <1>     mov eax, 1304h
   215 00000348 CD30                <1>     int 30h
   216 0000034A E903090000          <1>     jmp errorInit
   217                              <1> 
   218                              <1> mcbBuild:
   219                              <1> ;Actually build the MCB chain here
   220                              <1> ;Start by computing the difference between userbase and DOS area
   221                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   222 0000034F 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   222 00000354 [08C00300]          <1>
   223 00000358 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   224 0000035F 56                  <1>     push rsi    ;Save ptr
   225 00000360 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   226 00000367 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   227 0000036A 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   228 00000372 5B                  <1>     pop rbx
   229 00000373 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   230 00000376 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   231 0000037E 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   232 00000386 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   233 00000389 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   234 0000038C 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   234 00000391 [2BC00300]          <1>
   235                              <1> 
   236                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   237 00000395 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   237 0000039D 00000000            <1>
   238 000003A1 746E                <1>     jz .skipISA
   239                              <1>     ;Here if an ISA hole exists, place a MCB around it
   240 000003A3 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   241                              <1>     ;Remove one MCB worth of space from alloc
   242 000003AA 31C9                <1>     xor ecx, ecx
   243 000003AC 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   244 000003AF 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   245 000003B5 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   246 000003B8 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   247 000003BB 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   248 000003BE C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   249 000003C1 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   250 000003C9 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   250 000003D2 00                  <1>
   251 000003D3 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   252 000003D6 480510000000        <1>     add rax, mcb_size
   253 000003DC 4829C1              <1>     sub rcx, rax    ;Take their difference
   254 000003DF C1E904              <1>     shr ecx, 4
   255 000003E2 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   256 000003E5 C1E104              <1>     shl ecx, 4  ;Get bytes again
   257 000003E8 4881C310000000      <1>     add rbx, mcb_size
   258 000003EF 4801CB              <1>     add rbx, rcx
   259                              <1>     ;RBX should now be at 16Mb
   260 000003F2 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   261 000003F5 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   262 000003FD 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   263 00000405 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   264 00000408 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   265 0000040E 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   266                              <1> .skipISA:
   267                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   268                              <1>     ;rbx points to a block with "Z" marker
   269 00000411 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   269 00000419 00000000            <1>
   270 0000041D 7470                <1>     jz .exit
   271                              <1>     ;Add PCI hole MCB
   272 0000041F 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   273                              <1>     ;Remove one MCB worth of space from alloc
   274 00000426 31C9                <1>     xor ecx, ecx
   275 00000428 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   276 0000042B 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   277 00000431 C1E104              <1>     shl ecx, 4  ;Get bytes
   278 00000434 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   279 00000437 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   280 0000043A C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   281 0000043D 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   282 00000445 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   282 0000044E 00                  <1>
   283 0000044F 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   284 00000452 480510000000        <1>     add rax, mcb_size
   285 00000458 4829C1              <1>     sub rcx, rax    ;Take their difference
   286 0000045B C1E904              <1>     shr ecx, 4
   287 0000045E 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   288 00000461 C1E104              <1>     shl ecx, 4  ;Get bytes again
   289 00000464 4881C310000000      <1>     add rbx, mcb_size
   290 0000046B 4801CB              <1>     add rbx, rcx
   291                              <1>     ;RBX should now be at 4Gb
   292 0000046E C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   293 00000471 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   294 00000479 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   294 0000047E [1BC00300]          <1>
   295 00000482 48C1E904            <1>     shr rcx, 4
   296 00000486 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   297 0000048C 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   298                              <1> .exit:
   299                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   300 0000048F 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   301                              <1> ;------------------------------------------------;
   302                              <1> ;          Kernel inits and adjustments          ;
   303                              <1> ;------------------------------------------------;
   304                              <1> ;Adjust Interrupt Entries Int 40h-49h
   305                              <1> adjInts:
   306 00000496 B340                <1>     mov bl, 40h
   307 00000498 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   308 0000049D CD35                <1>     int 35h
   309 0000049F B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   310 000004A4 488D3D43080000      <1>     lea rdi, intData
   311 000004AB 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   312                              <1> .ai0:
   313 000004AD B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   314 000004B2 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   315 000004B5 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   316                              <1> .ai1:
   317 000004B8 CD35                <1>     int 35h
   318 000004BA 4881C708000000      <1>     add rdi, 8
   319 000004C1 FFC1                <1>     inc ecx
   320 000004C3 81F950000000        <1>     cmp ecx, 50h
   321 000004C9 75E2                <1>     jne .ai0
   322                              <1> 
   323                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   324                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   325                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   326                              <1>     %if DEBUG
   327                              <1> debugPopUpMsg:
   328                              <1>     push rbx
   329                              <1>     push rbp
   330                              <1>     push rcx
   331                              <1>     push rdx
   332                              <1>     mov ecx, 53 ;A large number of lines
   333                              <1>     xor edx, edx    ;COM 1
   334                              <1> .cls:
   335                              <1>     mov eax, 010Ah ;Transmit Line feed
   336                              <1>     int 34h
   337                              <1>     dec ecx
   338                              <1>     jnz .cls
   339                              <1>     lea rbx, qword [debPrintNullString + rbp]
   340                              <1>     lea rbp, .msg
   341                              <1>     call rbx
   342                              <1>     jmp short .exit
   343                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   344                              <1> .exit:
   345                              <1>     pop rdx
   346                              <1>     pop rcx
   347                              <1>     pop rbp
   348                              <1>     pop rbx
   349                              <1>     %endif
   350                              <1> 
   351                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   352 000004CB 488D1580070000      <1>     lea rdx, errorInit ;Get segment start address
   353 000004D2 B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   354 000004D7 CD41                <1>     int 41h
   355 000004D9 488D1572070000      <1>     lea rdx, errorInit ;Get segment start address
   356 000004E0 B844250000          <1>     mov eax, 2544h
   357 000004E5 CD41                <1>     int 41h
   358                              <1> ;------------------------------------------------;
   359                              <1> ;          Driver Adjustments and inits          ;
   360                              <1> ;------------------------------------------------;
   361                              <1> ;Modify the pointers in nData before putting them in the data area
   362 000004E7 48012D80080000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   363 000004EE 48012D83080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   364 000004F5 48012D84080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   365                              <1> ;Copy the Null driver to its location in Sysvars
   366 000004FC B922000000          <1>     mov ecx, drvHdr_size
   367 00000501 488D3566080000      <1>     lea rsi, qword [nData]
   368 00000508 488DBD[73C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   369 0000050F F3A4                <1>     rep movsb   
   370                              <1> 
   371                              <1> ;Adjust the addresses in the other driver headers 
   372 00000511 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   372 00000513 [2E32000000000000]  <1>
   373 0000051B B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   374 00000520 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   375                              <1> adjDrivers:
   376 00000524 E816070000          <1>     call adjustDrvHdr
   377 00000529 E2F9                <1>     loop adjDrivers
   378                              <1> 
   379                              <1> ;Open NUL
   380                              <1> ;NUL opened
   381                              <1> ;Open CON
   382                              <1> conInit:    ;Rather than keeping this resident... do it here
   383                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   384 0000052B 488D95[15350000]    <1>     lea rdx, qword [rbp + fastOutput]
   385 00000532 B849250000          <1>     mov eax, 2549h
   386 00000537 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   387 00000539 488D95[1D350000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   388 00000540 B83B250000          <1>     mov eax, 253Bh
   389 00000545 CD41                <1>     int 41h ;Hook int 3Bh
   390                              <1> .ci0:
   391 00000547 B401                <1>     mov ah, 01      ;Get buffer status
   392 00000549 CD36                <1>     int 36h
   393 0000054B 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   394 0000054D 30E4                <1>     xor ah, ah
   395 0000054F CD36                <1>     int 36h ;Read key to flush from buffer
   396 00000551 EBF4                <1>     jmp short .ci0
   397                              <1> .ci1:
   398 00000553 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   399 00000558 CD30                <1>     int 30h
   400 0000055A B402                <1>     mov ah, 02h
   401 0000055C 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   402 0000055E 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   403 00000560 CD30                <1>     int 30h
   404 00000562 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   405 00000564 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   406 00000569 CD30                <1>     int 30h
   407                              <1> 
   408                              <1>     ;Save ptr to ConHdr in Sysvars
   409 0000056B 488D85[2E320000]    <1>     lea rax, qword [rbp + conHdr]
   410 00000572 6448890425-         <1>     mov qword fs:[vConPtr], rax
   410 00000577 [4BC00300]          <1>
   411                              <1> 
   412                              <1>     ;Fix the ext ESC function handler address
   413 0000057B 488D85[24150000]    <1>     lea rax, qword [rbp + editKeys]
   414 00000582 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   414 00000587 [59000000]          <1>
   415                              <1> 
   416                              <1> ;CLOCK init prock
   417                              <1> ;Set the time and date using the RTC (if present)
   418                              <1> clkInit:
   419                              <1>    ;Save ptr to ClkHdr in Sysvars first
   420 0000058B 488D85[94320000]    <1>     lea rax, qword [rbp + clkHdr]
   421 00000592 6448890425-         <1>     mov qword fs:[clockPtr], rax
   421 00000597 [43C00300]          <1>
   422                              <1> ;CH - Hours, in BCD
   423                              <1> ;CL - Minutes, in BCD
   424                              <1> ;DH - Seconds, in BCD
   425 0000059B B402                <1>     mov ah, 02  ;Read RTC Time
   426 0000059D CD3A                <1>     int 3Ah
   427 0000059F 7271                <1>     jc .clkEnd  ;if error, just exit
   428                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   429 000005A1 0FB6C5              <1>     movzx eax, ch   ;Hours
   430 000005A4 E84D000000          <1>     call .bcd2Bin
   431 000005A9 88C5                <1>     mov ch, al
   432 000005AB 0FB6C1              <1>     movzx eax, cl     ;Mins
   433 000005AE E843000000          <1>     call .bcd2Bin
   434 000005B3 88C1                <1>     mov cl, al
   435 000005B5 0FB6C6              <1>     movzx eax, dh   ;Seconds
   436 000005B8 E839000000          <1>     call .bcd2Bin
   437 000005BD 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   438 000005BF 89C2                <1>     mov edx, eax
   439 000005C1 B42D                <1>     mov ah, 2Dh ;DOS Set Time
   440 000005C3 CD41                <1>     int 41h
   441                              <1> ;Now get the date from RTC
   442                              <1> ;CL - Year, in BCD
   443                              <1> ;DH - Month, in BCD
   444                              <1> ;DL - Day, in BCD
   445 000005C5 B404                <1>     mov ah, 04  ;Read RTC Date
   446 000005C7 CD3A                <1>     int 3Ah
   447 000005C9 7247                <1>     jc .clkEnd
   448                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   449 000005CB 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   450 000005CE E823000000          <1>     call .bcd2Bin
   451 000005D3 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   452 000005D6 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   453 000005DC 0FB6C6              <1>     movzx eax, dh   ;Get Months
   454 000005DF E812000000          <1>     call .bcd2Bin
   455 000005E4 88C6                <1>     mov dh, al  
   456 000005E6 0FB6C2              <1>     movzx eax, dl   ;Get day
   457 000005E9 E808000000          <1>     call .bcd2Bin
   458 000005EE 88C2                <1>     mov dl, al
   459 000005F0 B42B                <1>     mov ah, 2Bh ;DOS Set Date
   460 000005F2 CD41                <1>     int 41h
   461 000005F4 EB1C                <1>     jmp short .clkEnd
   462                              <1> .bcd2Bin:
   463                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   464 000005F6 51                  <1>     push rcx
   465 000005F7 89C1                <1>     mov ecx, eax
   466 000005F9 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   467 000005FE 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   468 00000604 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   469 00000607 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   470                              <1> .b2blp:
   471 0000060A 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   472 0000060C FFC9                <1>     dec ecx
   473 0000060E 75FA                <1>     jnz .b2blp
   474                              <1> .b2bexit:
   475 00000610 59                  <1>     pop rcx
   476 00000611 C3                  <1>     ret
   477                              <1> .clkEnd:
   478                              <1> ;------------------------------------------------;
   479                              <1> ;         Link DOS to temporary Buffer           ;
   480                              <1> ;------------------------------------------------;
   481                              <1> tempBufferInit:
   482 00000612 488DBD[19010000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   483 00000619 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   483 0000061E [55C00300]          <1>
   484 00000622 31C0                <1>     xor eax, eax
   485 00000624 48FFC8              <1>     dec rax
   486 00000627 48AB                <1>     stosq   ;.nextBufPtr, end of list
   487 00000629 AA                  <1>     stosb   ;.driveNumber, Free entry
   488 0000062A 48FFC0              <1>     inc rax
   489 0000062D AA                  <1>     stosb   ;.bufferFlags, No flags
   490                              <1> ;------------------------------------------------;
   491                              <1> ;         Init msd driver, create DPB            ;
   492                              <1> ;------------------------------------------------;
   493                              <1> storageInits:
   494                              <1> ;First save dpb pointer in sysvars
   495 0000062E 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   496 00000635 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   496 0000063A [33C00300]          <1>
   497                              <1> ;Open Mass Storage
   498                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   499                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   500                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   501                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   502                              <1>     ;mov al, byte fs:[numPhysVol]
   503                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   504                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   505                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   506                              <1>     ;Check if it returned OK first!
   507                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   508                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   509                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   510                              <1>     ;mov byte fs:[numPhysVol], al
   511                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   512                              <1> 
   513                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   514 0000063E E84D070000          <1>     call diskInit
   515 00000643 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   516 00000646 648A0425[6FC00300]  <1>     mov al, byte fs:[numPhysVol]
   517 0000064E 488D95[B03B0000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   518 00000655 30C9                <1>     xor cl, cl  ;Clear counter
   519 00000657 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   519 0000065C [33C00300]          <1>
   520                              <1> .si0:   
   521 00000660 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   522 00000663 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   523 00000665 CD41                <1>     int 41h
   524                              <1> ;Add other data to DPB
   525 00000667 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   526 0000066A 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   527 0000066D 50                  <1>     push rax
   528 0000066E 488D87[B6320000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   529 00000675 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   530 00000679 58                  <1>     pop rax
   531 0000067A FEC1                <1>     inc cl
   532 0000067C 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   533 0000067E 7416                <1>     je .si1
   534 00000680 50                  <1>     push rax
   535 00000681 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   536 00000685 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   537 00000689 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   538 0000068C 58                  <1>     pop rax
   539 0000068D 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   540 00000694 EBCA                <1>     jmp short .si0
   541                              <1> .si1:
   542                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   543 00000696 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   544 0000069E 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   545                              <1> ;------------------------------------------------;
   546                              <1> ;          Find largest sector size              ;
   547                              <1> ;------------------------------------------------;
   548                              <1> sectorSizeSearch:
   549                              <1> ;Done by reading BPB's for each drive
   550 000006A1 488D9D[B03B0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   551                              <1>     
   552                              <1>     ;Go thru each block individually
   553 000006A8 31C0                <1>     xor eax, eax
   554 000006AA 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   555                              <1> .findLargest:
   556 000006AD 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   557 000006B1 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   558 000006B6 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   559 000006BD 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   560 000006C0 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   561 000006C3 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   562 000006C5 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   562 000006CA [53C00300]          <1>
   563                              <1>     
   564                              <1> ;------------------------------------------------;
   565                              <1> ;                 Temp CDS inits                 ;
   566                              <1> ;------------------------------------------------;
   567                              <1> tempCDS:
   568                              <1> ;Build a temporary CDS for Drive A to use it for booting
   569 000006CE 488DBD[9DC50300]    <1>     lea rdi, qword [rbp + tmpCDS]  ;Use Temp CDS in the SDA
   570 000006D5 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   570 000006DA [5DC00300]          <1>
   571                              <1>     ;"A:\"+NULL char (in rev order because LITTLE ENDIAN!!)
   572 000006DE C707413A5C00        <1>     mov dword [rdi + cds.sCurrentPath], 005C3A41h  
   573 000006E4 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   574 000006EA 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   574 000006EF [33C00300]          <1>
   575 000006F3 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   576 000006F7 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   577                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   578                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   579                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   580                              <1>     ;cds.dStartCluster is 0 since we zero-ed the data area earlier
   581                              <1> ;------------------------------------------------;
   582                              <1> ;     Set up general PSP areas and DOS vars      ;
   583                              <1> ;------------------------------------------------;
   584                              <1> ;Additional DOS Vars init
   585                              <1>     ;xor eax, eax
   586                              <1>     ;mov byte fs:[currentDrv], al ;Current Drive = Drive A
   587                              <1>     ;mov byte fs:[breakFlag], al  ;Break off
   588                              <1>     ;mov byte fs:[verifyFlag], al ;Write only
   589                              <1>     ;mov byte fs:[singleDrv], al  ;Only used on single drive systems
   590                              <1>     ;mov byte fs:[critErrFlag], al   ;Not in critical error
   591                              <1>     ;mov byte fs:[inDOS], al      ;Not in DOS
   592 000006FD 64C60425[6CC30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   592 00000705 FF                  <1>
   593                              <1>     ;mov word fs:[errorLevel], ax   ;Last return code is 0, no error
   594                              <1>     ;mov byte fs:[allocStrat], al    ;First Fit
   595 00000706 64C60425[34C30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   595 0000070E 2F                  <1>
   596                              <1>     ;mov byte fs:[vConUnread], al   ;vCon has no unread data!
   597                              <1> 
   598                              <1> ;Set network machine name to... nothing!
   599 0000070F 488DBD[39C30300]    <1>     lea rdi, qword [rbp + machineName]
   600 00000716 B910000000          <1>     mov ecx, 10h    ;16 chars long
   601 0000071B B020                <1>     mov al, SPC ;Space char
   602 0000071D F3AA                <1>     rep stosb   ;Fill with space chars
   603                              <1>     ;xor al, al
   604                              <1>     ;mov byte fs:[serverCnt], al ;Set server call count to zero
   605                              <1>     ;mov word fs:[machineNum], ax   ;Clear machine number
   606                              <1> 
   607                              <1> ;Patch Data Table init
   608 0000071F 488DBD[49C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   609 00000726 488D85[602B0000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   610 0000072D 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   611 0000072F 488D85[6A2B0000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   612 00000736 48AB                <1>     stosq
   613 00000738 488D85[742B0000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   614 0000073F 48AB                <1>     stosq
   615 00000741 488D85[7E2B0000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   616 00000748 48AB                <1>     stosq
   617                              <1> 
   618                              <1> ;Initial PSP Init
   619 0000074A 488D1DAFF8FFFF      <1>     lea rbx, qword [tempPSP]
   620 00000751 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   620 00000756 [82C30300]          <1>
   621 0000075A 53                  <1>     push rbx
   622 0000075B 4881C380000000      <1>     add rbx, psp.dta
   623 00000762 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   623 00000767 [7AC30300]          <1>
   624 0000076B 5B                  <1>     pop rbx
   625 0000076C 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   626 00000771 C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   627 00000778 48C7430200000000    <1>     mov qword [rbx + psp.allocSize], 0    ;Size of allocation (dummy value)
   628 00000780 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   629 00000784 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   630 00000788 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   631 0000078C 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   631 00000795 FF                  <1>
   632 00000796 48AB                <1>     stosq   ;8 bytes
   633 00000798 31C0                <1>     xor eax, eax
   634 0000079A 50                  <1>     push rax    ;Save 0 on the stack
   635 0000079B 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   636 0000079E 48AB                <1>     stosq   ;16 bytes
   637 000007A0 AB                  <1>     stosd   ;20 bytes
   638 000007A1 58                  <1>     pop rax ;Get 0 back
   639 000007A2 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   640 000007AA 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   641 000007AE C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   642 000007B2 4889DA              <1>     mov rdx, rbx
   643 000007B5 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   644 000007BA CD41                <1>     int 41h
   645 000007BC 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   646 000007C0 B843350000          <1>     mov eax, 3543h
   647 000007C5 CD41                <1>     int 41h
   648 000007C7 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   649 000007CB B844350000          <1>     mov eax, 3544h
   650 000007D0 CD41                <1>     int 41h
   651 000007D2 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   652                              <1> 
   653 000007D6 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   654 000007DB 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   655 000007DF F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   656                              <1> ;------------------------------------------------;
   657                              <1> ;          Default File Handle Creation          ;
   658                              <1> ;                                                ;
   659                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   660                              <1> ;------------------------------------------------;
   661                              <1> defaultFileHandles:
   662                              <1> ;Fill in the default file table entries
   663 000007E1 488D9D[9AC00300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   664 000007E8 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   665 000007EF 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   666 000007F5 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   666 000007FA [3BC00300]          <1>
   667 000007FE 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   667 00000807 20                  <1>
   668                              <1> ;GOTO FIRST FILE 
   669 00000808 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   670                              <1> ;Write AUX
   671 0000080F 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   672 00000814 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   673 0000081A C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   674 0000081E C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   675                              <1>     ;No EOF when reading from the device
   676 00000822 488B85[50320000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   677 00000829 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   678                              <1>     ;Ignore disk related fields and Date/Time of open
   679 0000082D 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   680                              <1>     ;11 chars in 8.3 name
   681 00000831 488D3590040000      <1>     lea rsi, auxName
   682 00000838 B903000000          <1>     mov ecx, 3
   683 0000083D F3A4                <1>     rep movsb   ;Move the three bytes
   684 0000083F 4889D0              <1>     mov rax, rdx
   685 00000842 48AB                <1>     stosq   ;Eight spaces left to print
   686 00000844 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   686 00000849 [82C30300]          <1>
   687 0000084D 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   688                              <1> ;GOTO NEXT ENTRY
   689 00000851 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   690                              <1>     ;Write CON
   691 00000858 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   692 0000085D 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   693 00000863 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   694 00000867 C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   695                              <1>     ;No EOF when reading from the device
   696 0000086B 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   696 00000870 [4BC00300]          <1>
   697 00000874 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   698                              <1>     ;Ignore disk related fields and Date/Time of open
   699 00000878 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   700                              <1>     ;11 chars in 8.3 name
   701 0000087C 488D3541040000      <1>     lea rsi, conName
   702 00000883 B903000000          <1>     mov ecx, 3
   703 00000888 F3A4                <1>     rep movsb   ;Move the three bytes
   704 0000088A 4889D0              <1>     mov rax, rdx
   705 0000088D 48AB                <1>     stosq   ;Eight spaces left to print
   706 0000088F 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   706 00000894 [82C30300]          <1>
   707 00000898 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   708                              <1> ;GOTO NEXT ENTRY
   709 0000089C 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   710                              <1> ;Write PRN
   711 000008A3 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   712 000008A8 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   713 000008AE C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   714 000008B2 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   715                              <1>     ;Want EOF when reading from to the device
   716 000008B6 488B85[72320000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   717 000008BD 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   718                              <1>     ;Ignore disk related fields and Date/Time of open
   719 000008C1 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   720                              <1>     ;11 chars in 8.3 name
   721 000008C5 488D3500040000      <1>     lea rsi, prnName
   722 000008CC B903000000          <1>     mov ecx, 3
   723 000008D1 F3A4                <1>     rep movsb   ;Move the three bytes
   724 000008D3 4889D0              <1>     mov rax, rdx
   725 000008D6 48AB                <1>     stosq   ;Eight spaces left to print
   726 000008D8 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   726 000008DD [82C30300]          <1>
   727 000008E1 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   728                              <1> ;Zero word 0 of entry 4 and 5
   729 000008E5 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   730 000008EC 31C0                <1>     xor eax, eax
   731                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   732                              <1>     ; which is ok as these are empty entries, ready to be used)
   733 000008EE 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   734 000008F0 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   735 000008F7 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   736                              <1> ;------------------------------------------------;
   737                              <1> ;               Load CONFIG.SYS                  ;
   738                              <1> ;------------------------------------------------;
   739                              <1> ;------------------------------------------------;
   740                              <1> ;              Process CONFIG.SYS                ;
   741                              <1> ;------------------------------------------------;
   742                              <1> ;------------------------------------------------;
   743                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   744                              <1> ;------------------------------------------------;
   745                              <1> ;------------------------------------------------;
   746                              <1> ;   Setup Final Data Areas With Overrides from   ;
   747                              <1> ;                  CONFIG.SYS                    ;
   748                              <1> ;------------------------------------------------;
   749                              <1> ;------------------------------------------------;
   750                              <1> ;           Load Command interpreter             ;
   751                              <1> ;------------------------------------------------;
   752 000008F9 488D1563030000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   753 00000900 B409                <1>     mov ah, 09h
   754 00000902 CD41                <1>     int 41h
   755                              <1> ;Resize DOS allocation before loading COMMAND.COM
   756 00000904 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   756 00000909 [2BC00300]          <1>
   757 0000090D 4981C010000000      <1>     add r8, mcb.program
   758 00000914 BB39110000          <1>     mov ebx, dynamicDataAreaLength
   759 00000919 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   760 0000091C FFC3                <1>     inc ebx
   761 0000091E B44A                <1>     mov ah, 4Ah
   762 00000920 CD41                <1>     int 41h
   763                              <1>     
   764                              <1>     %if DEBUG && ALLOCTEST
   765                              <1> ;Test Allocation, Growth and Deallocation
   766                              <1>     mov r15, qword fs:[currentPSP]
   767                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   768                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   769                              <1>     mov ah, 48h ;Allocate
   770                              <1>     int 41h
   771                              <1> 
   772                              <1>     mov byte [rax - 10h], 0 ;Trash chain
   773                              <1>     mov r8, rax ;Move the pointer to r8
   774                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   775                              <1>     mov ah, 4Ah
   776                              <1>     int 41h
   777                              <1> 
   778                              <1>     mov ah, 49h ;Free r8
   779                              <1>     int 41h
   780                              <1>     mov qword fs:[currentPSP], r15
   781                              <1>     %endif
   782                              <1> 
   783                              <1>     %if ENDSTATUS
   784                              <1> debugFinal:
   785                              <1>     ;Print system state
   786 00000922 55                  <1>     push rbp    ;Only rbp really matters here
   787 00000923 4989E8              <1>     mov r8, rbp
   788                              <1> 
   789 00000926 488D2DD0020000      <1>     lea rbp, .msg2
   790 0000092D 4D8D88[49030000]    <1>     lea r9, qword [r8 + debPrintNullString]
   791 00000934 41FFD1              <1>     call r9
   792                              <1> 
   793 00000937 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   794 0000093E 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   794 00000943 [08C00300]          <1>
   795                              <1> 
   796 00000947 4D8D88[84060000]    <1>     lea r9, qword [r8 + overlayQword]
   797 0000094E 41FFD1              <1>     call r9
   798                              <1> 
   799 00000951 4881C31B000000      <1>     add rbx, 19+8
   800 00000958 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   800 0000095D [00C00300]          <1>
   801 00000961 41FFD1              <1>     call r9
   802                              <1> 
   803 00000964 4881C31B000000      <1>     add rbx, 19+8
   804 0000096B 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   804 00000970 [2BC00300]          <1>
   805 00000974 41FFD1              <1>     call r9
   806                              <1> 
   807 00000977 4881C31C000000      <1>     add rbx, 20+8
   808 0000097E 4D8D88[41060000]    <1>     lea r9, qword [r8 + overlayDword]
   809 00000985 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   810 0000098D 41FFD1              <1>     call r9
   811                              <1> 
   812 00000990 4881C312000000      <1>     add rbx, 10+8
   813 00000997 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   814 0000099F 41FFD1              <1>     call r9
   815                              <1> 
   816 000009A2 4881C312000000      <1>     add rbx, 10+8
   817 000009A9 64488B0425-         <1>     mov rax, qword fs:[longMem]
   817 000009AE [1BC00300]          <1>
   818 000009B2 4D8D88[84060000]    <1>     lea r9, qword [r8 + overlayQword]
   819 000009B9 41FFD1              <1>     call r9
   820                              <1> 
   821 000009BC 4881C31B000000      <1>     add rbx, 19+8
   822 000009C3 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   822 000009C8 [33C00300]          <1>
   823 000009CC 41FFD1              <1>     call r9
   824                              <1> 
   825 000009CF 4881C31B000000      <1>     add rbx, 19+8
   826 000009D6 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   826 000009DB [3BC00300]          <1>
   827 000009DF 41FFD1              <1>     call r9
   828                              <1> 
   829 000009E2 4881C31B000000      <1>     add rbx, 19+8
   830 000009E9 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   830 000009EE [55C00300]          <1>
   831 000009F2 41FFD1              <1>     call r9
   832                              <1> 
   833 000009F5 4881C31B000000      <1>     add rbx, 19+8
   834 000009FC 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   834 00000A01 [5DC00300]          <1>
   835 00000A05 41FFD1              <1>     call r9
   836                              <1> 
   837 00000A08 4D8D88[CF050000]    <1>     lea r9, qword [r8 + overlayByte]
   838                              <1> 
   839 00000A0F 4881C32C000000      <1>     add rbx, 25+19
   840 00000A16 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
   840 00000A1C [6FC00300]          <1>
   841 00000A20 41FFD1              <1>     call r9
   842                              <1> 
   843 00000A23 4881C31E000000      <1>     add rbx, 30
   844 00000A2A 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   844 00000A30 [12C00300]          <1>
   845 00000A34 41FFD1              <1>     call r9
   846                              <1> 
   847 00000A37 4881C31E000000      <1>     add rbx, 30
   848 00000A3E 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   848 00000A44 [11C00300]          <1>
   849 00000A48 41FFD1              <1>     call r9
   850                              <1> 
   851 00000A4B 4881C310000000      <1>     add rbx, 16
   852 00000A52 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   852 00000A58 [10C00300]          <1>
   853 00000A5C 0441                <1>     add al, "A"
   854 00000A5E 8803                <1>     mov byte [rbx], al
   855                              <1> 
   856 00000A60 488D2D10000000      <1>     lea rbp, .msg
   857 00000A67 4D8D88[49030000]    <1>     lea r9, qword [r8 + debPrintNullString]
   858 00000A6E 41FFD1              <1>     call r9
   859 00000A71 5D                  <1>     pop rbp
   860 00000A72 E99E010000          <1>     jmp l1
   861 00000A77 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   861 00000A80 206261736520464646- <1>
   861 00000A89 464646464646464646- <1>
   861 00000A92 46464646680A0D      <1>
   862 00000A99 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   862 00000AA2 464646464646464646- <1>
   862 00000AAB 464646464646680A0D  <1>
   863 00000AB4 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   863 00000ABD 464646464646464646- <1>
   863 00000AC6 46464646464668200A- <1>
   863 00000ACF 0D                  <1>
   864 00000AD0 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   864 00000AD9 464646464646466820  <1>
   865 00000AE2 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   865 00000AEB 464646464646466820  <1>
   866 00000AF4 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   866 00000AFD 464646464646464646- <1>
   866 00000B06 464646464646680A0D  <1>
   867 00000B0F 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   867 00000B18 464646464646464646- <1>
   867 00000B21 464646464646680A0D  <1>
   868 00000B2A 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   868 00000B33 464646464646464646- <1>
   868 00000B3C 464646464646680A0D  <1>
   869 00000B45 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   869 00000B4E 464646464646464646- <1>
   869 00000B57 464646464646680A0D  <1>
   870 00000B60 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   870 00000B69 464646464646464646- <1>
   870 00000B72 464646464646680A0D  <1>
   871 00000B7B 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   871 00000B84 204C6F676963616C20- <1>
   871 00000B8D 447269766573204646- <1>
   871 00000B96 680A0D              <1>
   872 00000B99 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   872 00000BA2 204669786564204472- <1>
   872 00000BAB 697665732020204646- <1>
   872 00000BB4 680A0D              <1>
   873 00000BB7 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   873 00000BC0 2052656D6F7661626C- <1>
   873 00000BC9 652044727673204646- <1>
   873 00000BD2 680A0D              <1>
   874 00000BD5 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   874 00000BDE 65205A3A0A0D        <1>
   875 00000BE4 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   875 00000BED 4F4D4D414E442E434F- <1>
   875 00000BF6 4D2E2E2E0A0D00      <1>
   876 00000BFD 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   876 00000C06 626F6F742073756D6D- <1>
   876 00000C0F 6172790A0D00        <1>
   877                              <1>     %endif
   878                              <1> l1:
   879 00000C15 B402                <1>     mov ah, 02h
   880 00000C17 B20A                <1>     mov dl, 0Ah
   881 00000C19 CD41                <1>     int 41h
   882 00000C1B B409                <1>     mov ah, 09h
   883 00000C1D 488D1516000000      <1>     lea rdx, .str
   884 00000C24 CD41                <1>     int 41h
   885                              <1>     ;lea rdx, tmpBuffer
   886                              <1>     ;mov ah, 0Ah  ;Buffered input
   887 00000C26 B980000000          <1>     mov ecx, 80h
   888 00000C2B 488D15E2020000      <1>     lea rdx, tmpBuffer
   889 00000C32 31DB                <1>     xor ebx, ebx
   890 00000C34 B43F                <1>     mov ah, 3fh
   891 00000C36 CD41                <1>     int 41h
   892 00000C38 EBDB                <1>     jmp short l1
   893 00000C3A 433A5C3E24          <1> .str: db "C:\>$"
   894                              <1> ;--------------------------------
   895                              <1> ;       PROCS FOR SYSINIT       :
   896                              <1> ;--------------------------------
   897                              <1> adjustDrvHdr:
   898                              <1> ;Input: rsi = Effective address of driver in DOS segment
   899                              <1> ;       rbp = Ptr to the start of the DOS segment
   900                              <1> ;Output: rsi = EA of next header in DOS segment
   901 00000C3F 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   902 00000C42 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   903 00000C46 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   904 00000C4A 4881C622000000      <1>     add rsi, drvHdr_size
   905 00000C51 C3                  <1>     ret
   906                              <1> errorInit:
   907                              <1> ;If a critical error occurs during sysinit, fail through here
   908                              <1> ;Int 42h, 43h and 44h point here during sysinit
   909 00000C52 488D2D3A000000      <1>     lea rbp, hltmsg
   910 00000C59 B804130000          <1>     mov eax, 1304h
   911 00000C5E CD30                <1>     int 30h
   912                              <1>     ;cli ;Clear interrupts
   913                              <1>     ;mov al, -1
   914                              <1>     ;mov dx, 0A1h    ;PIC2 data
   915                              <1>     ;out dx, al      ;Mask all lines
   916                              <1>     ;mov dx, 21h     ;PIC1 data
   917                              <1>     ;out dx, al      ;Mask all lines
   918                              <1> .ei0:
   919 00000C60 F4                  <1>     hlt
   920 00000C61 EBFD                <1>     jmp short .ei0
   921                              <1> ;--------------------------------
   922                              <1> ;       DATA FOR SYSINIT        :
   923                              <1> ;--------------------------------
   924 00000C63 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   924 00000C6C 5343502F444F532E2E- <1>
   924 00000C75 2E0A0D24            <1>
   925 00000C79 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   925 00000C82 6C6F636174696F6E20- <1>
   925 00000C8B 4572726F720A0D00    <1>
   926 00000C93 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   926 00000C9C 7469616C6973696E67- <1>
   926 00000CA5 20534350444F532E53- <1>
   926 00000CAE 59532E205379737465- <1>
   926 00000CB7 6D2068616C74696E67- <1>
   926 00000CC0 2E2E2E00            <1>
   927 00000CC4 434F4E00            <1> conName db "CON",0
   928 00000CC8 41555800            <1> auxName db "AUX",0
   929 00000CCC 50524E00            <1> prnName db "PRN",0
   930                              <1> 
   931 00000CD0 003A5C4155544F4558- <1> aexec   db 0,":\AUTOEXEC.BAT",0 ;ASCIIZ for AUTOEXEC (with space for drvletter)
   931 00000CD9 45432E42415400      <1>
   932 00000CE0 003A5C434F4E464947- <1> cfgspec db 0,":\CONFIG.SYS",0 ;ASCIIZ for CONFIG (with space for drive letter)
   932 00000CE9 2E53595300          <1>
   933                              <1> 
   934                              <1> intData:
   935 00000CEE [4021000000000000]  <1>     dq terminateProcess ;Int 40h
   936 00000CF6 [D829000000000000]  <1>     dq functionDispatch ;Int 41h
   937 00000CFE [520C000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   938 00000D06 [302B000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
   939 00000D0E [E224000000000000]  <1>     dq dosDefCritErrHdlr 
   940 00000D16 [B225000000000000]  <1>     dq absDiskRead      ;Int 45h
   941 00000D1E [9325000000000000]  <1>     dq absDiskWrite     ;Int 46h
   942 00000D26 [4721000000000000]  <1>     dq terminateRes     ;Int 47h
   943 00000D2E [302B000000000000]  <1>     dq defaultIretq     ;Int 48h
   944 00000D36 [302B000000000000]  <1>     dq defaultIretq     ;Int 49h
   945 00000D3E [302B000000000000]  <1>     dq defaultIretq     ;Int 4Ah
   946 00000D46 [302B000000000000]  <1>     dq defaultIretq     ;Int 4Bh
   947 00000D4E [302B000000000000]  <1>     dq defaultIretq     ;Int 4Ch
   948 00000D56 [302B000000000000]  <1>     dq defaultIretq     ;Int 4Dh
   949 00000D5E [302B000000000000]  <1>     dq defaultIretq     ;Int 4Eh
   950 00000D66 [772F000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
   951                              <1> nData:
   952 00000D6E [2E32000000000000]  <1>     dq conHdr
   953 00000D76 0480                <1>     dw 08004h
   954 00000D78 [D633000000000000]  <1>     dq nulStrat
   955 00000D80 [DC33000000000000]  <1>     dq nulIntr
   956 00000D88 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   957                              <1> 
   958                              <1> diskInit:
   959                              <1>     ;We create a function to deal with BPB parsing etc
   960                              <1>     ;Start with the first primary partition on each hard disk (until max)
   961                              <1>     ;   They dont have to be bootable
   962                              <1>     ;Then go back and look for other partitions partitions. 
   963                              <1>     ;   Add each other primary or logical ptn (until max)
   964                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   965                              <1>     ;Use r8 as device counter
   966 00000D90 488DBD[D83B0000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
   967 00000D97 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
   967 00000D9F 00                  <1>
   968 00000DA0 0F84C6000000        <1>     jz .remInit ;No? Go to removables
   969 00000DA6 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   969 00000DAF 00                  <1>
   970 00000DB0 B280                <1>     mov dl, 80h ;Start with HDD 0
   971                              <1> .primary:
   972 00000DB2 64803C25[6FC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
   972 00000DBA 03                  <1>
   973 00000DBB 0F84AB000000        <1>     je .remInit
   974 00000DC1 31C9                <1>     xor ecx, ecx    ;Sector 0
   975 00000DC3 E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   976 00000DC8 0F8289000000        <1>     jc .primaryEpilog
   977                              <1>     ;Here, check MBR or BPB
   978 00000DCE 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   979 00000DD7 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   980                              <1>     ;Now check if BPB or MBR
   981 00000DD9 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   982 00000DDB 8A6302              <1>     mov ah, byte [rbx + 2]
   983 00000DDE 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   984 00000DE2 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   985                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   986                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   987 00000DE4 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   988 00000DEB B104                <1>     mov cl, 4
   989                              <1> .checkPrimary:
   990 00000DED 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   991 00000DF0 3C01                <1>     cmp al, 01
   992 00000DF2 7421                <1>     je .primaryFound
   993 00000DF4 3C04                <1>     cmp al, 04
   994 00000DF6 741D                <1>     je .primaryFound
   995 00000DF8 3C06                <1>     cmp al, 06
   996 00000DFA 7419                <1>     je .primaryFound
   997 00000DFC 3C0B                <1>     cmp al, 0Bh
   998 00000DFE 7415                <1>     je .primaryFound
   999 00000E00 3C0C                <1>     cmp al, 0Ch
  1000 00000E02 7411                <1>     je .primaryFound
  1001 00000E04 3C0E                <1>     cmp al, 0Eh
  1002 00000E06 740D                <1>     je .primaryFound
  1003 00000E08 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1004 00000E0F FEC9                <1>     dec cl
  1005 00000E11 7444                <1>     jz .primaryEpilog
  1006 00000E13 EBD8                <1>     jmp short .checkPrimary
  1007                              <1> .primaryFound:
  1008                              <1>     ;Copy the first sector of this partition into memory
  1009 00000E15 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1010 00000E18 E8E9000000          <1>     call .initReadSector
  1011 00000E1D 7238                <1>     jc .primaryEpilog
  1012                              <1>     ;Now verify this is a BPB
  1013 00000E1F 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1014 00000E21 8A6302              <1>     mov ah, byte [rbx + 2]
  1015 00000E24 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1016 00000E28 752D                <1>     jne .primaryEpilog   ;If not, skip
  1017                              <1>     ;Now copy data to internal tables
  1018 00000E2A 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1019 00000E2D B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1020 00000E32 57                  <1>     push rdi
  1021 00000E33 F348A5              <1>     rep movsq   ;Copy the BPB
  1022 00000E36 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1023                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1024 00000E37 4A8D9C05[A63B0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1025                              <1>     ;Add device count to rbx to point to correct entry
  1026 00000E3F 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1027 00000E41 4A8D9CC5[B03B0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1028 00000E49 488933              <1>     mov qword [rbx], rsi
  1029 00000E4C 49FFC0              <1>     inc r8  ;Goto next logical drive
  1030 00000E4F 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1031                              <1> .primaryEpilog:
  1032 00000E57 FEC2                <1>     inc dl  ;Goto next BIOS drive
  1033 00000E59 88D6                <1>     mov dh, dl
  1034 00000E5B 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1035 00000E5E 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1036 00000E66 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1037                              <1> .extended:
  1038                              <1> ;We have gone through all the devices once
  1039                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1040                              <1>     ;je .remInit ;If yes, get removable devices
  1041                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1042                              <1>     ;xor ecx, ecx    ;Get MBR back
  1043                              <1>     ;call .initReadSector
  1044                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1045                              <1> .remInit:
  1046                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1047 00000E6C 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1048 00000E6F 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1049 00000E71 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1050                              <1>     ;rdi points to the space for the subsequent bpb's
  1051                              <1> .removables:
  1052 00000E74 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1053 00000E76 E88B000000          <1>     call .initReadSector
  1054 00000E7B 7238                <1>     jc .removableEpilogue   ;Goto next device
  1055                              <1>     ;Now verify this is a BPB
  1056 00000E7D 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1057 00000E7F 8A6302              <1>     mov ah, byte [rbx + 2]
  1058 00000E82 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1059 00000E86 752D                <1>     jne .removableEpilogue   ;If not, skip
  1060                              <1>     ;Now copy data to internal tables
  1061 00000E88 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1062 00000E8B B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1063 00000E90 57                  <1>     push rdi
  1064 00000E91 F348A5              <1>     rep movsq   ;Copy the BPB
  1065 00000E94 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1066                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1067 00000E95 4A8D9C05[A63B0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1068                              <1>     ;Add device count to rbx to point to correct entry
  1069 00000E9D 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1070 00000E9F 4A8D9CC5[B03B0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1071 00000EA7 488933              <1>     mov qword [rbx], rsi
  1072 00000EAA 49FFC0              <1>     inc r8  ;Goto next logical drive
  1073 00000EAD 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1074                              <1> .removableEpilogue:
  1075 00000EB5 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1076 00000EB7 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1077 00000EBF 7412                <1>     je .end
  1078 00000EC1 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1079 00000EC8 7403                <1>     je .re0
  1080 00000ECA 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1081                              <1> .re0:
  1082 00000ECD 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1083 00000ED1 72A1                <1>     jb .removables
  1084                              <1> .end:
  1085 00000ED3 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1085 00000EDB 01                  <1>
  1086 00000EDC 7401                <1>     je .singleRemDev
  1087 00000EDE C3                  <1>     ret
  1088                              <1> .singleRemDev:
  1089                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1090 00000EDF 488D9D[A63B0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1091 00000EE6 8A95[A63B0000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1092 00000EEC 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1093 00000EEF 488D9D[B03B0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1094 00000EF6 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1095 00000EF9 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1096 00000EFD 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1097 00000F05 C3                  <1>     ret
  1098                              <1> .initReadSector:
  1099                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1100 00000F06 B482                <1>     mov ah, 82h ;Read
  1101 00000F08 B001                <1>     mov al, 1   ;One sector
  1102 00000F0A 488D9D[39010000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1103 00000F11 CD33                <1>     int 33h
  1104 00000F13 C3                  <1>     ret
  1105 00000F14 80                  <1> tmpBuffer db 80h    ;Just overwrite the next bytes as they get copied high
    14                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    15                                  %include "./Source/BSS/dosSeg.asm"
    16                              <1> ;This file contains the main DOS data segment
    17                              <1> dosAPT: ;Additional Page tables
    18 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    19                              <1> dosDataArea:
    20 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    21 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    22 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    23 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    24 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    25 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    26 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    27 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    28                              <1> ;Above is the system stats
    29                              <1> ;Below is the DOS vars
    30 0003C023 ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    31                              <1>     ;   A value of 0 means no chars buffered.
    32 0003C02B ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    33                              <1> sysVarsPtr:
    34 0003C033 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    35 0003C03B ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    36 0003C043 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    37                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    38 0003C04B ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    39                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    40 0003C053 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    41 0003C055 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    42 0003C05D ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    43 0003C065 ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    44 0003C06D ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    45                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    46 0003C06F ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    47 0003C070 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    48 0003C071 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    49 0003C072 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    50 0003C073 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    51                              <1> ;Additional internal variables
    52                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    53 0003C095 ??                  <1>     singleDrv   resb 1    ;Set if last drive accessed was drive B x
    54 0003C096 ????                <1>     numFiles    resw 1    ;FILES=5 default
    55 0003C098 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    56                              <1> ;Create SFT header and corresponding array of five default sft entries
    57 0003C09A <res Ah>            <1>     firstSftHeader  resb sfth_size
    58 0003C0A4 <res 4Fh>           <1>     firstSft    resb sft_size
    59 0003C0F3 <res 4Fh>           <1>     secondSft   resb sft_size
    60 0003C142 <res 4Fh>           <1>     thirdSft    resb sft_size
    61 0003C191 <res 4Fh>           <1>     fourthSft   resb sft_size
    62 0003C1E0 <res 4Fh>           <1>     fifthSft    resb sft_size
    63                              <1> 
    64                              <1> ;Virtual CONsole Buffers
    65 0003C22F ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
    66                              <1>     ;Only incremented when CON device runs vCon
    67                              <1> vConBuf:    ;Proper buffer symbol
    68 0003C230 ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
    69 0003C231 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
    70                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
    71 0003C2B1 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
    72 0003C331 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
    73                              <1> 
    74 0003C332 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
    75 0003C333 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    76 0003C334 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
    77 0003C335 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
    78                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
    79                              <1> 
    80 0003C336 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    81                              <1> ;Server stuff. Default to all zeros (blank)
    82 0003C337 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
    83                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
    84 0003C338 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
    85 0003C339 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
    86                              <1> ;Swappable Data Area
    87 0003C349 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    88 0003C369 ??                  <1>                 resb 1  ;Alignment byte
    89                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    90 0003C36A ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    91 0003C36B ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    92 0003C36C ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    93 0003C36D ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    94 0003C36E ????                <1>     errorExCde  resw 1  ;Extended Error Code
    95 0003C370 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    96 0003C371 ??                  <1>     errorClass  resb 1  ;Error Class
    97 0003C372 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
    98 0003C37A ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    99 0003C382 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   100                              <1> 
   101 0003C38A ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   102 0003C392 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   103                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   104                              <1>     ;Lower byte: User Specified
   105 0003C394 ??                  <1>     currentDrv  resb 1  ;Default drive x
   106 0003C395 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   107                              <1> ;SDA, needs to be replaced between processes
   108                              <1> sdaMainSwap:
   109 0003C396 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   110 0003C39E ????????????????    <1>     sharePSP    resq 1  ;PSP of the share program
   111 0003C3A6 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   112 0003C3A8 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   113 0003C3B0 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   114 0003C3B8 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   115                              <1> 
   116 0003C3C0 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   117 0003C3C8 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   118 0003C3C9 ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   119                              <1> 
   120 0003C3CA ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   121 0003C3D2 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   122 0003C3DA ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   123 0003C3E2 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   124 0003C3EA ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   125                              <1> ;The below flag tells DOS to print ^C in the termination function
   126 0003C3EB ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   127                              <1> 
   128                              <1> ;Time stuff
   129                              <1> ;Read the below two as a word
   130 0003C3EC ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   131 0003C3ED ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   132 0003C3EE ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   133 0003C3EF ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   134 0003C3F1 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   135                              <1> 
   136 0003C3F2 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   137 0003C3F3 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   138 0003C3F4 ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   139                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   140                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   141                              <1> ; without forcing to re-build the whole primary request block.
   142                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   143                              <1> ; with secondary char output going through the secondary header
   144                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   145                              <1> ; for output)
   146                              <1> ;ioReqPkt is the largest possible packet
   147 0003C3F5 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   148 0003C41F <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   149 0003C449 <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   150 0003C473 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   151                              <1> ;Swappable Buffers
   152 0003C474 <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   153 0003C4F4 <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   154 0003C574 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   155                              <1>     ;We add an additional byte to save ah too
   156 0003C57A ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   157                              <1> ;Misc bookkeeping flags and vars
   158                              <1>     ;secClusConv resb 1  ;For networking, do we convert sector to cluster?
   159 0003C57C ??                  <1>     rwFlag      resb 1  ;00h=Read, 01h=Write
   160 0003C57D ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   161 0003C57E ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   162 0003C57F ??                  <1>     typePSPcopy resb 1  ;00=Simple copy, -1=Make Child process
   163 0003C580 ??                  <1>     spliceFlag  resb 1  ;01 = file name and directory name together
   164 0003C581 ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   165                              <1> 
   166 0003C582 ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   167 0003C583 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlelv
   168 0003C584 ??                  <1>     workingDrv  resb 1  ;Working drive number
   169                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   170                              <1> workingDD:  ;Create a symbol for the working device driver too
   171 0003C585 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   172 0003C58D ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   173                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   174                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   175 0003C595 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   176 0003C59D <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need tmp CDS
   177 0003C5F8 ????????????????    <1>     curJFTNum   resq 1  ;Ptr to JFT num in caller PSP of file being accessed
   178 0003C600 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   179 0003C608 ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   180 0003C60A ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   181                              <1> ;Temp vars, used when walking FAT or changing sectors
   182 0003C612 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   183 0003C61A ????                <1>     entries     resw 1  ;FAT entries per FAT sector
   184                              <1> ;***************************************************|
   185                              <1> ; Needs to be set up before any file access         |
   186                              <1> ; These vars keep track of file access properties   |
   187                              <1> ;   and must be used only for such purposes.        |
   188                              <1> ;***************************************************|
   189 0003C61C ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   190 0003C620 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   191                              <1> 
   192 0003C624 ??                  <1>     clustFact   resb 1  ;NUMBER of sectors per cluster
   193                              <1> 
   194 0003C625 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   195 0003C629 ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   196 0003C62A ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   197                              <1> 
   198 0003C632 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   199 0003C634 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   200                              <1> ;***************************************************|
   201 0003C638 ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   202 0003C63C ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   203 0003C640 ????????            <1>     bytesAdded  resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   204 0003C644 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   205 0003C648 ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   206                              <1> ;Directory stuff
   207 0003C64C ????????            <1>     dirClust    resd 1  ;Cluster number of current directory
   208 0003C650 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   209 0003C654 ??                  <1>     dirSect     resb 1  ;Sector of current directory
   210 0003C655 ??                  <1>     dirEntry    resb 1  ;32 byte offset in dir sect for file being searched for
   211                              <1> ;Error DPB 
   212 0003C656 ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   213 0003C65E ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   214                              <1> ;Stacks and scratch SFT
   215 0003C65F <res 528h>          <1>     critStack   resq 165
   216 0003CB87 ????????????????    <1>     critStakTop resq 1
   217                              <1> 
   218 0003CB8F <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   219                              <1> 
   220 0003CBDE <res 638h>          <1>     AuxStack    resq 199
   221 0003D216 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   222 0003D21E <res 638h>          <1>     DiskStack   resq 199
   223 0003D856 ????????????????    <1>     DiskStakTop resq 1
   224                              <1> 
   225 0003D85E ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   226 0003D85F ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls!  
   227                              <1>     sdaLen      equ     $ - sda 
   228                              <1>     sdaMSLen    equ     $ - sda
   229                              <1> 
   230                              <1> ;Additional variables NOT in the SDA
   231 0003D860 <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   232                              <1>     ;for saving the current header when quickly doing a second request
   233                              <1> 
   234                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   235                              <1> inExtASCII:
   236 0003D88A ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   237 0003D88B ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   238                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   239                              <1>     ; copy of the date/time record
   240                              <1>     dSegLen     equ     $
    16                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    17                                  %define currSegVBase section.resSeg.vstart
    18                                  %include "./Source/Data/staticData.asm"
    19                              <1> 
    20                              <1> ;-----------------------------------:
    21                              <1> ;       Static Data Variables       :
    22                              <1> ;-----------------------------------:
    23 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    24 00000001 01                  <1> dosMinor    db 01h      ;.01
    25 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    25 0000000B 535953              <1>
    26 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    26 00000017 535953              <1>
    27                              <1> 
    28                              <1> ;-----------------------------------:
    29                              <1> ;        Static Data Tables         :
    30                              <1> ;-----------------------------------:
    31                              <1> ctryTbl:
    32                              <1> ;Country Table (defaulting to UK)
    33 0000001A 0100                <1> .dtfmt:     dw 1            ;Date time format (2 bytes)
    34                              <1>                             ;0 = month day year hh:mm:ss
    35                              <1>                             ;1 = day month year hh:mm:ss
    36                              <1>                             ;2 = year month day hh:mm:ss
    37 0000001C C2A300000000        <1> .curr:      db "£",0,0,0,0  ;ASCIIZ Currency symbol (5 chars)
    38 00000022 2C00                <1> .thouSep:   db ",",0        ;ASCIIZ Thousands separator
    39 00000024 2E00                <1> .dcmlSep:   db ".",0        ;ASCIIZ Decimal separator
    40 00000026 2D00                <1> .dateSep:   db "-",0        ;ASCIIZ Date separator
    41 00000028 3A00                <1> .timeSep:   db ":",0        ;ASCIIZ Time separator
    42 0000002A 00                  <1> .currFmt:   db 0            ;Currency Format
    43                              <1>                 ;0 = Symbol leads, without space
    44                              <1>                 ;1 = Symbol follows, without space
    45                              <1>                 ;2 = Symbol leads, one space
    46                              <1>                 ;3 = Symbol follows, one space
    47                              <1>                 ;4 = Symbol replace decimal separator
    48 0000002B 02                  <1> .digtdpt:   db 2 ;Number of digits after the decimal point
    49 0000002C 00                  <1> .timefmt:   db 0 ;Time format, Bit 0 = 0 => 12 hour clock, = 1 => 24 hour clock
    50 0000002D 0000000000000000    <1> .mapaddr:   dq 0 ;Case map address (0 is nulptr)
    51 00000035 2C00                <1> .dataSep:   db ",",0    ;Data list separator
    52 00000037 000000000000000000- <1> .resv:      db 0,0,0,0,0,0,0,0,0,0  ;Reserve 10 bytes
    52 00000040 00                  <1>
    53                              <1> 
    54                              <1> ;IO Char table
    55                              <1> ;This table has Request header length, command code and error flags
    56                              <1> ; as a packed DWORD entry
    57                              <1> ioRqCmdErrTbl:
    58                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    59                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    60 00000041 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    61 00000045 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    62 00000049 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    63 0000004D 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    64 00000051 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    65 00000055 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    66                              <1> 
    67                              <1> 
    68                              <1> 
    69                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    70                              <1> ; wish to install their own custom logic.
    71 00000059 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    72 00000061 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    73 00000062 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    74                              <1> ;Extended ASCII keys with special meanings
    75 00000063 3B                  <1> extKeyTbl   db eF1
    76 00000064 0D14                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    77 00000066 3C                  <1>             db eF2
    78 00000067 FF13                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    79 00000069 3D                  <1>             db eF3
    80 0000006A 0614                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    81 0000006C 3E                  <1>             db eF4
    82 0000006D 3B14                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    83 0000006F 3F                  <1>             db eF5
    84 00000070 8014                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    85 00000072 40                  <1>             db eF6
    86 00000073 9614                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    87 00000075 41                  <1>             db eF7
    88 00000076 9D14                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    89 00000078 4B                  <1>             db eCursL
    90 00000079 6413                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    91 0000007B 4D                  <1>             db eCursR
    92 0000007C 0D14                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    93 0000007E 52                  <1>             db eIns
    94 0000007F A814                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    95 00000081 53                  <1>             db eDel
    96 00000082 AF14                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    97                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    98                              <1> 
    99                              <1> ;When counting the number of days, first compute the number of years since
   100                              <1> ; 1980 and your year. 
   101                              <1> ;Then, using the table below, find the number of leap years between 1980
   102                              <1> ; and (YourYear - 1). 
   103                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   104                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   105                              <1> ;
   106                              <1> ;Use the months table to get the number of days in a normal month as leap 
   107                              <1> ; years are added using the previous comment.
   108                              <1> 
   109                              <1> ;This table is the number of days in the month
   110                              <1> ;The function which updates the days in Feb writes the number to this table
   111                              <1> monthsTbl:  
   112 00000084 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   112 0000008D 1F1E1F              <1>
   113                              <1> 
   114                              <1> ;Error tables
   115                              <1> errXlatTbl:
   116                              <1> ;Each entry is n bytes long, defined as
   117                              <1> ; Byte 0      : DOS function number for which translation will occur
   118                              <1> ; Byte 1      : Length of the table entry - 2
   119                              <1> ; Bytes n - 3 : Acceptable Error codes
   120                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   121                              <1> ;The table is terminated with a single -1 byte
   122                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   123                              <1> ; only on entry to a disk function
   124 00000090 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   125 00000094 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   126 00000099 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   127 0000009F 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   128 000000A3 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   129 000000A9 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   130 000000B0 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   131 000000B3 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   132 000000B7 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   133 000000BB 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   134 000000C0 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   135 000000C4 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   136 000000CA 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   137 000000D1 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   138 000000D5 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   139 000000D9 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   140 000000DC 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   141 000000E0 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   142 000000E4 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   143 000000E9 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   144 000000F1 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   145 000000F3 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   146 000000F8 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   147 000000FB 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   148 00000101 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   149 00000105 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   150 00000108 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   151 0000010E 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   152 00000115 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   153 0000011B 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   154 0000011F 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   155 00000123 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   156 00000126 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   157 0000012B FF                  <1>     db -1   ;End Of Table marker
   158                              <1> 
   159                              <1> 
   160                              <1> extErrTbl:
   161                              <1> ;This table contains the default values for how to respond
   162                              <1> ; to particular errors. Fields with -1 need to be filled in before
   163                              <1> ; setting variables using this table.
   164                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   165                              <1> ; Byte 0: Extended Error Code as a byte
   166                              <1> ; Byte 1: Error Class
   167                              <1> ; Byte 2: Error Suggested Action
   168                              <1> ; Byte 3: Error Locus
   169                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   170                              <1> ;
   171                              <1> ;Error 01: Invalid function number
   172 0000012C 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   173                              <1> ;Error 02: File not found
   174 00000130 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   175                              <1> ;Error 03: Path not found
   176 00000134 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   177                              <1> ;Error 04: Too many open handles, and no handles are left
   178 00000138 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   179                              <1> ;Error 05: Access being denied
   180 0000013C 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   181                              <1> ;Error 06: Invalid File handle being provided
   182 00000140 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   183                              <1> ;Error 07: MCB chain destroyed
   184 00000144 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   185                              <1> ;Error 08: No Memory remaining
   186 00000148 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   187                              <1> ;Error 09: Invalid MCB block Address
   188 0000014C 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   189                              <1> ;Error 0A: Bad Environment block
   190 00000150 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   191                              <1> ;Error 0B: Data provided in a bad format
   192 00000154 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   193                              <1> ;Error 0C: Access Code Invalid
   194 00000158 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   195                              <1> ;Error 0D: Error due to Invalid Data provided
   196 0000015C 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   197                              <1> ;Error 0F: Error due to a bad drive letter being provided
   198 00000160 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   199                              <1> ;Error 10: Error due to attempting to delete the CWD
   200 00000164 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   201                              <1> ;Error 11: Error due to a unknown device being used
   202 00000168 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   203                              <1> ;Error 12: No more file handles available
   204 0000016C 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   205                              <1> ;Error 50: Network request not supported
   206 00000170 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   207                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   208 00000174 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   209                              <1> ;Error 21: File Locking Violation
   210 00000178 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   211                              <1> ;Error 54: Too many levels of redirection error
   212 0000017C 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   213                              <1> ;Error 56: Bad resource password provided
   214 00000180 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   215                              <1> ;Error 52: Directory already exists
   216 00000184 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   217                              <1> ;Error 32: Network request not supported by DOS
   218 00000188 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   219                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   220 0000018C 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   221                              <1> ;Error 57: Bad parameter in request
   222 00000190 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   223                              <1> ;Error 53: Fail was returned from Int 44h
   224 00000194 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   225                              <1> ;Error 24: Sharing Buffer Full
   226 00000198 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   227 0000019C FFFFFFFF            <1>     dd -1   ;End of table signature
    19                                  %include "./Source/Data/dispTbl.asm"
    20                              <1> ;Kernel Dispatch Function Table
    21                              <1> 
    22                              <1> kDispTbl:
    23 000001A0 7920                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    24 000001A2 C30C                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    25 000001A4 D00C                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    26 000001A6 8D0D                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    27 000001A8 B60D                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    28 000001AA BE0D                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    29 000001AC D60D                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    30 000001AE 090E                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    31 000001B0 2E0E                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    32 000001B2 8D0E                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    33 000001B4 4011                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    34 000001B6 9C0E                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    35 000001B8 A80E                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    36 000001BA F22A                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    37 000001BC 242B                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    38 000001BE 1F16                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    39 000001C0 1F16                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    40 000001C2 1F16                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    41 000001C4 1F16                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    42 000001C6 1F16                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    43 000001C8 1F16                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    44 000001CA 1F16                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    45 000001CC 1F16                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    46 000001CE 1F16                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    47 000001D0 D62D                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    48 000001D2 3D2B                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    49 000001D4 2016                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    50 000001D6 442B                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    51 000001D8 462B                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    52 000001DA D62D                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    53 000001DC D62D                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    54 000001DE F02B                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    55 000001E0 D62D                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    56 000001E2 3316                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    57 000001E4 3316                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    58 000001E6 3316                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    59 000001E8 3316                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    60 000001EA 9D2B                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    61 000001EC CD1F                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    62 000001EE 3316                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    63 000001F0 3316                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    64 000001F2 3316                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    65 000001F4 B613                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    66 000001F6 DD13                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    67 000001F8 E313                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    68 000001FA 0414                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    69 000001FC CD2B                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    70 000001FE 3416                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    71 00000200 DB2B                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    72 00000202 4B20                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    73 00000204 F22B                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    74 00000206 A72A                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    75 00000208 382C                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    76 0000020A 492C                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    77 0000020C 5A2C                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    78 0000020E A221                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    79 00000210 CB21                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    80 00000212 F107                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    81 00000214 F107                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    82 00000216 F107                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    83 00000218 4716                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    84 0000021A 4816                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    85 0000021C 4916                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    86 0000021E 4A16                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    87 00000220 8A16                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    88 00000222 9616                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    89 00000224 9716                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    90 00000226 0217                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    91 00000228 0217                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    92 0000022A 0217                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    93 0000022C 0217                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    94 0000022E F107                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    95 00000230 801A                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    96 00000232 9B1C                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    97 00000234 901D                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    98 00000236 A121                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    99 00000238 8320                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   100 0000023A AC2C                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   101 0000023C 0217                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   102 0000023E 0217                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   103 00000240 D52A                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   104 00000242 DE2A                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   105 00000244 C22C                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   106 00000246 D32C                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   107 00000248 A52D                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   108 0000024A BA1F                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   109 0000024C 0217                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   110 0000024E F107                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   111 00000250 191F                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   112 00000252 AC2D                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   113 00000254 0217                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   114 00000256 0217                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   115 00000258 0217                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   116 0000025A D52D                <1>     dw getCritErrorInfo - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   117 0000025C D52D                <1>     dw networkServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   118 0000025E D52D                <1>     dw networkRedirection - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   119 00000260 F107                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   120 00000262 D62D                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   121 00000264 E72A                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   122 00000266 D62D                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   123 00000268 F02A                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   124 0000026A CB21                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   125 0000026C CB21                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   126 0000026E 0217                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   127 00000270 0217                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   128 00000272 D62D                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   129                              <1> kDispTblL  equ $ - kDispTbl 
   130                              <1> 
   131                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   132 00000274 242D                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   133                              <1> mDispTblL   equ     $ - mDispTbl
    20                                  %include "./Source/Debug/debug.asm"
    21                              <1> ;This file contains debugging macros, procs and strings
    22                              <1> ; that we can use to output to COM1 bypassing the operating system.
    23                              <1> ;A serial terminal must be connected for this to work.
    24                              <1> 
    25                              <1> ;Variables and equates
    26                              <1> 
    27 00000276 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    28                              <1> 
    29 0000027E 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    29 00000287 39414243444546      <1>
    30                              <1> ;Common procedures
    31                              <1> debMakeDebuggerRespond:
    32 0000028E 488D2D26000000      <1>     lea rbp, .msg
    33 00000295 E8AF000000          <1>     call debPrintNullString
    34 0000029A B900001000          <1>     mov ecx, 100000h
    35                              <1> .waiting:
    36 0000029F FFC9                <1>     dec ecx
    37 000002A1 740C                <1>     jz .timeout
    38 000002A3 B402                <1>     mov ah, 02h ;Blocking recieve!
    39 000002A5 31D2                <1>     xor edx, edx
    40 000002A7 CD34                <1>     int 34h
    41 000002A9 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    42 000002AC 75F1                <1>     jnz .waiting
    43 000002AE C3                  <1>     ret
    44                              <1> .timeout:
    45 000002AF 488D2D47000000      <1>     lea rbp, .msg2
    46 000002B6 E98E000000          <1>     jmp debPrintNullString
    47 000002BB 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    47 000002C4 6B6579206174207468- <1>
    47 000002CD 65207465726D696E61- <1>
    47 000002D6 6C20746F20636F6E74- <1>
    47 000002DF 696E7565206F722077- <1>
    47 000002E8 61697420666F722074- <1>
    47 000002F1 696D656F75742E2E2E- <1>
    47 000002FA 0A0D00              <1>
    48 000002FD 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    48 00000306 436F6E74696E75696E- <1>
    48 0000030F 672E2E2E0A0D00      <1>
    49                              <1> debPrintHexByte:
    50                              <1> ;Print the hex byte in al as a hex value
    51 00000316 52                  <1>     push rdx
    52 00000317 53                  <1>     push rbx
    53 00000318 50                  <1>     push rax
    54                              <1> 
    55 00000319 88C2                <1>     mov dl, al           ;save byte in dl
    56 0000031B 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    57 0000031F 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    58 00000324 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    59 00000328 E80C000000          <1>     call .wrchar
    60 0000032D 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    61 00000330 E804000000          <1>     call .wrchar
    62                              <1> 
    63 00000335 58                  <1>     pop rax
    64 00000336 5B                  <1>     pop rbx
    65 00000337 5A                  <1>     pop rdx
    66 00000338 C3                  <1>     ret
    67                              <1> .wrchar:
    68 00000339 6687DB              <1>     xchg bx, bx
    69 0000033C 488D1D3BFFFFFF      <1>     lea rbx, debascii
    70 00000343 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    71 00000344 B401                <1>     mov ah, 01h
    72 00000346 CD34                <1>     int 34h  ;print char
    73 00000348 C3                  <1>     ret
    74                              <1> 
    75                              <1> debPrintNullString:
    76                              <1> ;Print a null terminated string pointed to by rbp
    77 00000349 56                  <1>     push rsi
    78 0000034A 50                  <1>     push rax
    79 0000034B 52                  <1>     push rdx
    80 0000034C 31D2                <1>     xor edx, edx    ;Select COM1
    81 0000034E 4889EE              <1>     mov rsi, rbp
    82                              <1> .getChar:
    83 00000351 AC                  <1>     lodsb
    84 00000352 84C0                <1>     test al, al
    85 00000354 7406                <1>     jz .exit
    86 00000356 B401                <1>     mov ah, 01h
    87 00000358 CD34                <1>     int 34h
    88 0000035A EBF5                <1>     jmp short .getChar
    89                              <1> .exit:
    90 0000035C 5A                  <1>     pop rdx
    91 0000035D 58                  <1>     pop rax
    92 0000035E 5E                  <1>     pop rsi
    93 0000035F C3                  <1>     ret
    94                              <1> 
    95                              <1> debPrintDOSStack:
    96                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    97                              <1> ;Shows me which function, and parameters passed and returned
    98 00000360 488D2DA5010000      <1>     lea rbp, .a1
    99 00000367 E8DDFFFFFF          <1>     call debPrintNullString
   100 0000036C 488B15(DAC30300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   101 00000373 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   102 0000037A 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   103 0000037D E802030000          <1>     call overlayQword
   104 00000382 4881C316000000      <1>     add rbx, 22
   105 00000389 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   106 0000038D E8F2020000          <1>     call overlayQword
   107 00000392 4881C316000000      <1>     add rbx, 22
   108 00000399 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   109 0000039D E8E2020000          <1>     call overlayQword
   110 000003A2 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   111 000003A9 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   112 000003AD E8D2020000          <1>     call overlayQword
   113 000003B2 4881C316000000      <1>     add rbx, 22 
   114 000003B9 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   115 000003BD E8C2020000          <1>     call overlayQword
   116 000003C2 4881C316000000      <1>     add rbx, 22
   117 000003C9 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   118 000003CD E8B2020000          <1>     call overlayQword
   119 000003D2 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   120 000003D9 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   121 000003DD E8A2020000          <1>     call overlayQword
   122 000003E2 4881C316000000      <1>     add rbx, 22
   123 000003E9 488B05(DAC30300)    <1>     mov rax, qword [oldRSP]
   124 000003F0 480560000000        <1>     add rax, callerFrame_size
   125 000003F6 E889020000          <1>     call overlayQword
   126 000003FB 4881C316000000      <1>     add rbx, 22
   127 00000402 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   128 00000406 E879020000          <1>     call overlayQword
   129 0000040B 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   130 00000412 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   131 00000416 E869020000          <1>     call overlayQword
   132 0000041B 488D2D06000000      <1>     lea rbp, .a0
   133 00000422 E822FFFFFF          <1>     call debPrintNullString
   134 00000427 C3                  <1>     ret
   135                              <1> 
   136 00000428 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   136 00000431 303030303030303030- <1>
   136 0000043A 30306820            <1>
   137 0000043E 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   137 00000447 303030303030303030- <1>
   137 00000450 30306820            <1>
   138 00000454 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   138 0000045D 303030303030303030- <1>
   138 00000466 30306820            <1>
   139 0000046A 0A0D                <1>     db  0Ah,0Dh
   140 0000046C 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   140 00000475 303030303030303030- <1>
   140 0000047E 30306820            <1>
   141 00000482 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   141 0000048B 303030303030303030- <1>
   141 00000494 30306820            <1>
   142 00000498 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   142 000004A1 303030303030303030- <1>
   142 000004AA 30306820            <1>
   143 000004AE 0A0D                <1>     db 0Ah, 0Dh
   144 000004B0 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   144 000004B9 303030303030303030- <1>
   144 000004C2 30306820            <1>
   145 000004C6 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   145 000004CF 303030303030303030- <1>
   145 000004D8 30306820            <1>
   146 000004DC 7269703D3030303030- <1>     db "rip=0000000000000000h"
   146 000004E5 303030303030303030- <1>
   146 000004EE 303068              <1>
   147 000004F1 0A0D                <1>     db 0Ah, 0Dh
   148 000004F3 666C673D3030303030- <1>     db "flg=0000000000000000h "
   148 000004FC 303030303030303030- <1>
   148 00000505 30306820            <1>
   149 00000509 0A0D00              <1>     db 0Ah,0Dh,0
   150 0000050C 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   150 00000515 206F6E20496E742034- <1>
   150 0000051E 316820737461636B0A- <1>
   150 00000527 0D00                <1>
   151                              <1> 
   152                              <1> debDPBptr:
   153                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   154 00000529 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   155 00000530 4889E8              <1>     mov rax, rbp
   156 00000533 E84C010000          <1>     call overlayQword
   157 00000538 488D2D06000000      <1>     lea rbp, .dpb
   158 0000053F E805FEFFFF          <1>     call debPrintNullString
   159 00000544 C3                  <1>     ret
   160                              <1> .dpb: 
   161 00000545 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   161 0000054E 203030303030303030- <1>
   161 00000557 303030303030303068- <1>
   161 00000560 200A0D00            <1>
   162                              <1> 
   163                              <1> debDPBBPBptr:
   164                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   165                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   166 00000564 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   167 0000056B 4889E8              <1>     mov rax, rbp
   168 0000056E E811010000          <1>     call overlayQword
   169 00000573 4881C321000000      <1>     add rbx, 33
   170 0000057A 4889F0              <1>     mov rax, rsi
   171 0000057D E802010000          <1>     call overlayQword
   172 00000582 488D2D06000000      <1>     lea rbp, .dpb
   173 00000589 E8BBFDFFFF          <1>     call debPrintNullString
   174 0000058E C3                  <1>     ret
   175                              <1> .dpb: 
   176 0000058F 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   176 00000598 203030303030303030- <1>
   176 000005A1 303030303030303068- <1>
   176 000005AA 2066726F6D20        <1>
   177 000005B0 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   177 000005B9 203030303030303030- <1>
   177 000005C2 303030303030303068- <1>
   177 000005CB 200A0D00            <1>
   178                              <1> overlayByte:
   179                              <1>     ;Called with number in rax
   180                              <1>     ;pointer to START of 16 byte space for number in rbx
   181 000005CF 53                  <1>     push rbx
   182 000005D0 51                  <1>     push rcx
   183 000005D1 52                  <1>     push rdx
   184 000005D2 55                  <1>     push rbp
   185 000005D3 4889DD              <1>     mov rbp, rbx
   186 000005D6 4889C2              <1>     mov rdx, rax
   187 000005D9 48FFC5              <1>     inc rbp ;Go to end of number
   188                              <1> 
   189 000005DC 488D1D9BFCFFFF      <1>     lea rbx, debascii
   190 000005E3 88D0                <1>     mov al, dl  ;Go low nybble first
   191 000005E5 240F                <1>     and al, 0Fh
   192 000005E7 D7                  <1>     xlatb
   193 000005E8 884500              <1>     mov byte [rbp], al
   194 000005EB 48FFCD              <1>     dec rbp ;Go down one char pos
   195 000005EE 88D0                <1>     mov al, dl
   196 000005F0 24F0                <1>     and al, 0F0h    ;Hi nybble next
   197 000005F2 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   198 000005F5 D7                  <1>     xlatb
   199 000005F6 884500              <1>     mov byte [rbp], al  ;Store char
   200                              <1> 
   201 000005F9 5D                  <1>     pop rbp
   202 000005FA 5A                  <1>     pop rdx
   203 000005FB 59                  <1>     pop rcx
   204 000005FC 5B                  <1>     pop rbx
   205 000005FD C3                  <1>     ret
   206                              <1> 
   207                              <1> overlayWord:
   208                              <1>     ;Called with number in rax
   209                              <1>     ;pointer to START of 16 byte space for number in rbx
   210 000005FE 53                  <1>     push rbx
   211 000005FF 51                  <1>     push rcx
   212 00000600 52                  <1>     push rdx
   213 00000601 55                  <1>     push rbp
   214 00000602 4889DD              <1>     mov rbp, rbx
   215 00000605 4889C2              <1>     mov rdx, rax
   216 00000608 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   217 0000060F B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   218 00000614 488D1D63FCFFFF      <1>     lea rbx, debascii
   219                              <1> .ow0:
   220 0000061B 88D0                <1>     mov al, dl  ;Go low nybble first
   221 0000061D 240F                <1>     and al, 0Fh
   222 0000061F D7                  <1>     xlatb
   223 00000620 884500              <1>     mov byte [rbp], al
   224 00000623 48FFCD              <1>     dec rbp ;Go down one char pos
   225 00000626 88D0                <1>     mov al, dl
   226 00000628 24F0                <1>     and al, 0F0h    ;Hi nybble next
   227 0000062A C0E804              <1>     shr al, 4   ;Shift hi nybble low
   228 0000062D D7                  <1>     xlatb
   229 0000062E 884500              <1>     mov byte [rbp], al  ;Store char
   230 00000631 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   231 00000635 48FFCD              <1>     dec rbp
   232 00000638 FFC9                <1>     dec ecx
   233 0000063A 75DF                <1>     jnz .ow0
   234 0000063C 5D                  <1>     pop rbp
   235 0000063D 5A                  <1>     pop rdx
   236 0000063E 59                  <1>     pop rcx
   237 0000063F 5B                  <1>     pop rbx
   238 00000640 C3                  <1>     ret
   239                              <1> 
   240                              <1> overlayDword:
   241                              <1>     ;Called with number in rax
   242                              <1>     ;pointer to START of 16 byte space for number in rbx
   243 00000641 53                  <1>     push rbx
   244 00000642 51                  <1>     push rcx
   245 00000643 52                  <1>     push rdx
   246 00000644 55                  <1>     push rbp
   247 00000645 4889DD              <1>     mov rbp, rbx
   248 00000648 4889C2              <1>     mov rdx, rax
   249 0000064B 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   250 00000652 B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   251 00000657 488D1D20FCFFFF      <1>     lea rbx, debascii
   252                              <1> .od0:
   253 0000065E 88D0                <1>     mov al, dl  ;Go low nybble first
   254 00000660 240F                <1>     and al, 0Fh
   255 00000662 D7                  <1>     xlatb
   256 00000663 884500              <1>     mov byte [rbp], al
   257 00000666 48FFCD              <1>     dec rbp ;Go down one char pos
   258 00000669 88D0                <1>     mov al, dl
   259 0000066B 24F0                <1>     and al, 0F0h    ;Hi nybble next
   260 0000066D C0E804              <1>     shr al, 4   ;Shift hi nybble low
   261 00000670 D7                  <1>     xlatb
   262 00000671 884500              <1>     mov byte [rbp], al  ;Store char
   263 00000674 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   264 00000678 48FFCD              <1>     dec rbp
   265 0000067B FFC9                <1>     dec ecx
   266 0000067D 75DF                <1>     jnz .od0
   267 0000067F 5D                  <1>     pop rbp
   268 00000680 5A                  <1>     pop rdx
   269 00000681 59                  <1>     pop rcx
   270 00000682 5B                  <1>     pop rbx
   271 00000683 C3                  <1>     ret
   272                              <1> 
   273                              <1> overlayQword:
   274                              <1>     ;Called with number in rax
   275                              <1>     ;pointer to START of 16 byte space for number in rbx
   276 00000684 53                  <1>     push rbx
   277 00000685 51                  <1>     push rcx
   278 00000686 52                  <1>     push rdx
   279 00000687 55                  <1>     push rbp
   280 00000688 4889DD              <1>     mov rbp, rbx
   281 0000068B 4889C2              <1>     mov rdx, rax
   282 0000068E 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   283 00000695 B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   284 0000069A 488D1DDDFBFFFF      <1>     lea rbx, debascii
   285                              <1> .oq0:
   286 000006A1 88D0                <1>     mov al, dl  ;Go low nybble first
   287 000006A3 240F                <1>     and al, 0Fh
   288 000006A5 D7                  <1>     xlatb
   289 000006A6 884500              <1>     mov byte [rbp], al
   290 000006A9 48FFCD              <1>     dec rbp ;Go down one char pos
   291 000006AC 88D0                <1>     mov al, dl
   292 000006AE 24F0                <1>     and al, 0F0h    ;Hi nybble next
   293 000006B0 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   294 000006B3 D7                  <1>     xlatb
   295 000006B4 884500              <1>     mov byte [rbp], al  ;Store char
   296 000006B7 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   297 000006BB 48FFCD              <1>     dec rbp
   298 000006BE FFC9                <1>     dec ecx
   299 000006C0 75DF                <1>     jnz .oq0
   300 000006C2 5D                  <1>     pop rbp
   301 000006C3 5A                  <1>     pop rdx
   302 000006C4 59                  <1>     pop rcx
   303 000006C5 5B                  <1>     pop rbx
   304 000006C6 C3                  <1>     ret
   305                              <1> 
   306                              <1> debPrintFunctionName:
   307                              <1> ;Prints the DOS function that has been entered
   308                              <1> ;Entered with ah = Function number
   309 000006C7 88E0                <1>     mov al, ah  ;Get dos function number
   310 000006C9 488D1DAEFBFFFF      <1>     lea rbx, debascii
   311 000006D0 488D1535000000      <1>     lea rdx, .number
   312 000006D7 24F0                <1>     and al, 0F0h    ;Get high nybble first
   313 000006D9 C0E804              <1>     shr al, 4
   314 000006DC D7                  <1>     xlatb
   315 000006DD 8802                <1>     mov byte [rdx], al
   316 000006DF 88E0                <1>     mov al, ah
   317 000006E1 240F                <1>     and al, 0Fh
   318 000006E3 D7                  <1>     xlatb
   319 000006E4 884201              <1>     mov byte [rdx + 1], al
   320 000006E7 488D2D06000000      <1>     lea rbp, .dosString
   321 000006EE E856FCFFFF          <1>     call debPrintNullString
   322 000006F3 C3                  <1>     ret
   323 000006F4 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   323 000006FD 696F6E20496E742034- <1>
   323 00000706 31682F41483D        <1>
   324 0000070C 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   325                              <1> 
   326                              <1> ;----------------:
   327                              <1> ;!!!! MACROS !!!!:
   328                              <1> ;----------------:
   329                              <1> ;Insert macro when entering a debug block
   330                              <1> %macro debugEnterM 0
   331                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   332                              <1>     mov rsp, debStackTop
   333                              <1> ;Push all registers except rsp on stack
   334                              <1>     push rax
   335                              <1>     push rbx
   336                              <1>     push rcx
   337                              <1>     push rdx
   338                              <1>     push rsi
   339                              <1>     push rdi
   340                              <1>     push rbp
   341                              <1>     push r8
   342                              <1>     push r9
   343                              <1>     push r10
   344                              <1>     push r11
   345                              <1>     push r12
   346                              <1>     push r13
   347                              <1>     push r14
   348                              <1>     push r15
   349                              <1>     pushfq
   350                              <1> %endmacro
   351                              <1> ;Insert macro when exiting a debug block
   352                              <1> %macro debugExitM 0
   353                              <1>     popfq
   354                              <1>     pop r15
   355                              <1>     pop r14
   356                              <1>     pop r13
   357                              <1>     pop r12
   358                              <1>     pop r11
   359                              <1>     pop r10
   360                              <1>     pop r9
   361                              <1>     pop r8
   362                              <1>     pop rbp
   363                              <1>     pop rdi
   364                              <1>     pop rsi
   365                              <1>     pop rdx
   366                              <1>     pop rcx
   367                              <1>     pop rbx
   368                              <1>     pop rax
   369                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   370                              <1> %endmacro
    21                                  %include "./Source/Kernel/FAT/buffun.asm"
    22                              <1> ;This file contains FAT disk buffer related functions that
    23                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    24                              <1> ;----------------------------------------------------
    25                              <1> ;           Externally referenced functions         :
    26                              <1> ;----------------------------------------------------
    27                              <1> 
    28                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    29                              <1> ;Sets the buffer in rdi to the head of the chain
    30                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    31                              <1> ;Output: Buffer header set to the head of the chain
    32 00000712 48393D(55C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    33 00000719 7428                <1>     je .exit
    34 0000071B 56                  <1>     push rsi
    35 0000071C 488B35(55C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    36                              <1> .mainlp:
    37 00000723 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    38 00000726 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    39 00000728 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    40 0000072B EBF6                <1>     jmp short .mainlp
    41                              <1> .fnd:
    42 0000072D 57                  <1>     push rdi
    43 0000072E 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    44 00000731 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    45 00000734 5F                  <1>     pop rdi ;Get original buf back
    46 00000735 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    47 00000738 488735(55C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    48 0000073F 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    49 00000742 5E                  <1>     pop rsi
    50                              <1> .exit:
    51                              <1>     return
    18                              <2> %%_ret:
    19 00000743 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    52                              <1> 
    53                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h
    54 00000744 E846000000          <1>     call flushBuffer
    55 00000749 7306                <1>     jnc .exit
    56                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    57 0000074B 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    58                              <1> .exit:
    59                              <1>     return
    18                              <2> %%_ret:
    19 00000751 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    62                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    63                              <1> ;Output: rdi = First disk buffer
    64 00000752 488B3D(55C00300)    <1>     mov rdi, [bufHeadPtr]
    65 00000759 57                  <1>     push rdi
    66                              <1> .lp:
    67 0000075A 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    68 0000075E 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    69 00000761 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    70 00000768 75F0                <1>     jne .lp
    71 0000076A 5F                  <1>     pop rdi
    72                              <1>     return
    18                              <2> %%_ret:
    19 0000076B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    73                              <1> 
    74                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    75                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    76                              <1> ; second buffer in the chain in rdi
    77                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    78                              <1> ;Output: rdi = Second buffer in the chain
    79 0000076C E8A1FFFFFF          <1>     call makeBufferMostRecentlyUsed
    80 00000771 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
    81 00000778 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    82                              <1>     return
    18                              <2> %%_ret:
    19 0000077B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    83                              <1> 
    84                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    85                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    86                              <1> ;Input: rdi = Buffer header to start searching at
    87                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    88                              <1> ;        ZF=ZE => No unreferenced buffer found
    89 0000077C F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    90 00000780 750C                <1>     jnz .exit
    91 00000782 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    92 00000785 4881FFFFFFFFFF      <1>     cmp rdi, -1
    93 0000078C 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    94                              <1> .exit:
    95                              <1>     return
    18                              <2> %%_ret:
    19 0000078E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    96                              <1> 
    97                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
    98                              <1> ;Flushes the data in a sector buffer to disk!
    99                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   100                              <1> ;Exit:  CF=NC : Success
   101                              <1> ;       CF=CY : Fail, terminate the request
   102                              <1> ;First make request to device driver
   103 0000078F 50                  <1>     push rax
   104 00000790 53                  <1>     push rbx
   105 00000791 51                  <1>     push rcx
   106 00000792 52                  <1>     push rdx
   107 00000793 56                  <1>     push rsi
   108 00000794 55                  <1>     push rbp
   109 00000795 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   110 00000799 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   111                              <1> .fbRequest0:
   112 0000079B BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   113 000007A0 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   114 000007A4 7406                <1>     jz .fbRequest1
   115 000007A6 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   116                              <1> .fbRequest1:
   117 000007AC 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   118 000007AF B901000000          <1>     mov ecx, 1  ;One sector to copy
   119 000007B4 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   120 000007B8 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   121 000007BC 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   122 000007C0 E8991F0000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   123 000007C5 E8451E0000          <1>     call absDiskDriverCall    ;Make Driver Request
   124 000007CA 7525                <1>     jnz .fbFail
   125                              <1> ;Now check if the buffer was a FAT, to write additional copies
   126 000007CC F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   127 000007D0 7417                <1>     jz .fbFreeExit  ;If not, exit
   128 000007D2 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   129 000007D5 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   130 000007D7 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   131 000007DA 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   132 000007DE E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   133                              <1> .fbFreeExit1:
   134 000007E3 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   135 000007E6 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   136                              <1> .fbFreeExit:
   137 000007E9 F8                  <1>     clc
   138                              <1> .fbExitFail:
   139 000007EA 5D                  <1>     pop rbp
   140 000007EB 5E                  <1>     pop rsi
   141 000007EC 5A                  <1>     pop rdx
   142 000007ED 59                  <1>     pop rcx
   143 000007EE 5B                  <1>     pop rbx
   144 000007EF 58                  <1>     pop rax
   145                              <1>     return
    18                              <2> %%_ret:
    19 000007F0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   146                              <1> .fbFail:
   147                              <1> ;Enter here only if the request failed
   148 000007F1 FFCE                <1>     dec esi
   149 000007F3 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   150                              <1> ;Request failed thrice, critical error call
   151 000007F5 C605(C8C30300)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   152 000007FC E86B1B0000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   153 00000801 3C01                <1>     cmp al, critRetry
   154 00000803 7496                <1>     je .fbRequest0
   155                              <1>     ;Else we fail (Ignore=Fail here)
   156 00000805 F9                  <1>     stc ;Set error flag to indicate fail
   157 00000806 E9DFFFFFFF          <1>     jmp .fbExitFail
   158                              <1> 
   159                              <1> 
   160                              <1> testDirtyBufferForDrive:    ;External linkage
   161                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   162                              <1> ;Input: al = Drive number (0 based)
   163                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   164                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   165 0000080B 53                  <1>     push rbx
   166 0000080C 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   167                              <1> .tdbfdCheckBuffer:
   168 00000813 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   169 00000816 7509                <1>     jne .tdbfdGotoNextBuffer
   170 00000818 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   171 0000081C 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   172 0000081E F9                  <1>     stc ;Else dirty buffer found, set carry flag
   173                              <1> .tdbfdExit:
   174 0000081F 5B                  <1>     pop rbx
   175                              <1>     return
    18                              <2> %%_ret:
    19 00000820 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   176                              <1> .tdbfdGotoNextBuffer:
   177 00000821 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   178 00000824 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   179 0000082B 74F2                <1>     je .tdbfdExit
   180 0000082D EBE4                <1>     jmp short .tdbfdCheckBuffer
   181                              <1> 
   182                              <1> freeBuffersForDPB:
   183                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   184                              <1> ; to have a drive number of -1, thus freeing it
   185                              <1> ;Given DPB is in rbp
   186 0000082F 53                  <1>     push rbx
   187 00000830 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   188                              <1> .i0:
   189 00000837 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   190 0000083B 7506                <1>     jne .i1 ;If no, skip freeing
   191 0000083D 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   192                              <1> .i1:
   193 00000843 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   194 00000846 4881FBFFFFFFFF      <1>     cmp rbx, -1
   195 0000084D 75E8                <1>     jne .i0
   196                              <1> .exit:
   197 0000084F 5B                  <1>     pop rbx
   198                              <1>     return
    18                              <2> %%_ret:
    19 00000850 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   199                              <1> 
   200                              <1> getBuffer: ;External Linkage (dosPrim.asm, fat.asm)
   201                              <1> ;
   202                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   203                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   204                              <1> ;Flushes if not in disk change mode. 
   205                              <1> ;If in disk change mode, will check to see if the selected buffer 
   206                              <1> ; has data referring a device using the same DPB as we are changing.
   207                              <1> ; If it is, skip flushing, if not, flush first!
   208                              <1> ;
   209                              <1> ;This function will return a pointer to the desired data sector OR 
   210                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   211                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   212                              <1> ;Entry: rax = Sector to read
   213                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   214                              <1> ;       qword [workingDPB] = DPB to use for transaction
   215                              <1> ;Exit:  CF=NC => 
   216                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   217                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   218 00000851 51                  <1>     push rcx
   219 00000852 52                  <1>     push rdx
   220 00000853 56                  <1>     push rsi
   221 00000854 57                  <1>     push rdi
   222 00000855 488B35(85C50300)    <1>     mov rsi, qword [workingDPB]  ;Get DPB of transacting device
   223 0000085C 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   224 0000085E E80D010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   225 00000863 4881FFFFFFFFFF      <1>     cmp rdi, -1
   226 0000086A 740D                <1>     je .rbReadNewSector
   227                              <1> .rbExit:
   228 0000086C F8                  <1>     clc
   229                              <1> .rbExitNoFlag:
   230 0000086D 5F                  <1>     pop rdi
   231 0000086E 5E                  <1>     pop rsi
   232 0000086F 5A                  <1>     pop rdx
   233 00000870 59                  <1>     pop rcx
   234 00000871 488B1D(0AC60300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   235                              <1>     return
    18                              <2> %%_ret:
    19 00000878 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   236                              <1> .rbReadNewSector:
   237 00000879 E89B000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   238 0000087E 803D(5ED80300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   239 00000885 7506                <1>     jne .flush  ;We are not, flush buffer
   240 00000887 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   241 0000088B 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used
   242                              <1> .flush:
   243 0000088D E8B2FEFFFF          <1>     call flushAndFreeBuffer
   244 00000892 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   245                              <1> .skipFlush:
   246                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   247 00000894 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   248 00000897 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
   249 0000089A 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   250 0000089E 80F902              <1>     cmp cl, fatBuffer
   251 000008A1 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   252 000008A3 7503                <1>     jne .rbNonFATbuffer
   253 000008A5 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   254                              <1> .rbNonFATbuffer:
   255 000008A8 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   256 000008AB 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   257 000008AE 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   258 000008B1 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   259 000008B5 C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   260 000008B9 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   261 000008BE EBAD                <1>     jmp short .rbExitNoFlag
   262                              <1> 
   263                              <1> readSectorBuffer:   ;Internal Linkage
   264                              <1> ;Reads a sector into a built sector buffer
   265                              <1> ;Entry: rdi = Pointer to buffer header
   266                              <1> ;Exit:  CF=NC : Success
   267                              <1> ;       CF=CY : Fail, terminate the request
   268                              <1> ;       rbx pointing to buffer header
   269                              <1> ;First make request to device driver
   270 000008C0 50                  <1>     push rax
   271 000008C1 53                  <1>     push rbx
   272 000008C2 51                  <1>     push rcx
   273 000008C3 52                  <1>     push rdx
   274 000008C4 56                  <1>     push rsi
   275 000008C5 55                  <1>     push rbp
   276                              <1> .rsRequest0:
   277 000008C6 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   278 000008CB F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   279 000008CF 7406                <1>     jz .rsRequest1
   280 000008D1 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   281                              <1> .rsRequest1:
   282 000008D7 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   283 000008DA B901000000          <1>     mov ecx, 1  ;One sector to copy
   284 000008DF 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   285 000008E3 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   286 000008E7 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   287 000008EB E8791E0000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   288 000008F0 E81A1D0000          <1>     call absDiskDriverCall    ;Make Driver Request
   289 000008F5 7508                <1>     jnz .rsFail
   290                              <1> .rsExit:
   291 000008F7 F8                  <1>     clc
   292                              <1> .rsExitFail:
   293 000008F8 5D                  <1>     pop rbp
   294 000008F9 5E                  <1>     pop rsi
   295 000008FA 5A                  <1>     pop rdx
   296 000008FB 59                  <1>     pop rcx
   297 000008FC 5B                  <1>     pop rbx
   298 000008FD 58                  <1>     pop rax
   299                              <1>     return
    18                              <2> %%_ret:
    19 000008FE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   300                              <1> .rsFail:
   301                              <1> ;Enter here only if the request failed
   302 000008FF FFCE                <1>     dec esi
   303 00000901 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   304                              <1> ;Request failed thrice, critical error call
   305 00000903 C605(C8C30300)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   306 0000090A E85D1A0000          <1>     call diskDevErr
   307 0000090F 3C01                <1>     cmp al, critRetry
   308 00000911 74B3                <1>     je .rsRequest0
   309                              <1>     ;Else we fail (Ignore=Fail here)
   310 00000913 F9                  <1>     stc ;Set error flag to indicate fail
   311 00000914 E9DFFFFFFF          <1>     jmp .rsExitFail
   312                              <1>     
   313                              <1> findLRUBuffer: ;Internal Linkage
   314                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   315                              <1> ; in rbx and the currBuff variable
   316                              <1> ;Input: Nothing
   317                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   318                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   319 00000919 52                  <1>     push rdx
   320 0000091A 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   321 00000921 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   322 00000925 7436                <1>     je .flbExit 
   323 00000927 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   324 0000092E 742D                <1>     je .flbExit
   325                              <1> .flbWalk:
   326 00000930 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   327 00000933 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   328 00000936 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   329 0000093A 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   330 0000093C 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   331 00000943 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   332 00000945 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   333                              <1> .flbHeadLink:
   334 0000094C 488B15(55C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   335 00000953 48893D(55C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   336 0000095A 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   337                              <1> .flbExit:
   338 0000095D 5A                  <1>     pop rdx
   339 0000095E 48893D(0AC60300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   340                              <1>     return
    18                              <2> %%_ret:
    19 00000965 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   341                              <1> .flbFreeLink:
   342 00000966 51                  <1>     push rcx
   343 00000967 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   344 0000096A 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   345 0000096D 59                  <1>     pop rcx
   346 0000096E EBDC                <1>     jmp short .flbHeadLink
   347                              <1> 
   348                              <1> findSectorInBuffer:     ;Internal linkage
   349                              <1> ;Finds the Buffer for a sector
   350                              <1> ;If the sector is not in a buffer, returns with a -1
   351                              <1> ;Input: rax = Sector number
   352                              <1> ;        dl = Drive number
   353                              <1> ;Output: rdi = Buffer hdr pointer or -1
   354 00000970 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   355                              <1> .fsiCheckBuffer:
   356 00000977 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   357 0000097A 7507                <1>     jne .fsiGotoNextBuffer
   358 0000097C 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   359 00000980 7501                <1>     jne .fsiGotoNextBuffer
   360                              <1> .fsiExit:
   361                              <1>     return
    18                              <2> %%_ret:
    19 00000982 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   362                              <1> .fsiGotoNextBuffer:
   363 00000983 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   364 00000986 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   365 0000098D 74F3                <1>     je .fsiExit
   366 0000098F EBE6                <1>     jmp short .fsiCheckBuffer
    22                                  %include "./Source/Kernel/FAT/fat.asm"
    23                              <1> ;---------------------------------------------------:
    24                              <1> ;                   KERNEL FUNCTIONS                :
    25                              <1> ;---------------------------------------------------:
    26                              <1> makeDIR:           ;ah = 39h
    27                              <1> removeDIR:         ;ah = 3Ah
    28                              <1> setCurrentDIR:     ;ah = 3Bh, set dir for current drive (or drive in path)
    29                              <1> getCurrentDIR:     ;ah = 47h
    30                              <1> getSetFileDateTime:;ah = 57h
    31                              <1> trueName:          ;ah = 60h, get fully qualified name
    32                              <1>     return
    18                              <2> %%_ret:
    19 00000991 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    33                              <1> 
    34                              <1> 
    35                              <1> ;-----------------------------------:
    36                              <1> ;       File System routines        :
    37                              <1> ;-----------------------------------:
    38                              <1> getFATtype:
    39                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    40                              <1> ;Entry: rbp = DPB to ascertain FAT
    41                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    42 00000992 53                  <1>     push rbx
    43 00000993 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    44 00000996 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    45 0000099B 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    46 000009A1 730F                <1>     jae .exit
    47 000009A3 FFC9                <1>     dec ecx     ;FAT 12 marker
    48 000009A5 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    49 000009AB 7205                <1>     jb .exit
    50 000009AD B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    51                              <1> .exit:
    52 000009B2 5B                  <1>     pop rbx
    53                              <1>     return
    18                              <2> %%_ret:
    19 000009B3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> 
    55                              <1> clust2FATEntry:
    56                              <1> ;Converts a cluster number to a offset in the FAT
    57                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    58                              <1> ;        eax = Cluster number to look for
    59                              <1> ;Exit:   eax = Sector on disk of FAT 
    60                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    61                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    62 000009B4 53                  <1>     push rbx
    63 000009B5 55                  <1>     push rbp
    64 000009B6 488B2D(85C50300)    <1>     mov rbp, qword [workingDPB]
    65 000009BD 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    66 000009C0 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    67 000009C6 731E                <1>     jae .fat32
    68 000009C8 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    69 000009CE 7209                <1>     jb .fat12
    70                              <1> ;FAT16
    71 000009D0 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    72 000009D2 6801000000          <1>     push qword 1
    73 000009D7 EB15                <1>     jmp short .common
    74                              <1> .fat12:
    75 000009D9 89C1                <1>     mov ecx, eax    ;ecx = eax
    76 000009DB D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    77 000009DD 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    78 000009DF 6800000000          <1>     push qword 0
    79 000009E4 EB08                <1>     jmp short .common
    80                              <1> .fat32:
    81 000009E6 6802000000          <1>     push qword 2
    82 000009EB C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    83                              <1> .common:
    84                              <1> ;eax has the FAToffset
    85 000009EE 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    86 000009F2 31D2                <1>     xor edx, edx    ;edx = 0
    87 000009F4 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    88 000009F6 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    89 000009FA 01D8                <1>     add eax, ebx
    90 000009FC 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    91 000009FD 5D                  <1>     pop rbp
    92 000009FE 5B                  <1>     pop rbx
    93                              <1>     return
    18                              <2> %%_ret:
    19 000009FF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    94                              <1> 
    95                              <1> getStartSectorOfCluster:
    96                              <1> ;Input: eax = Cluster Number
    97                              <1> ;       rbp = dpb pointer
    98                              <1> ;Output: rax = Starting Sector number for cluster
    99                              <1> ;Gives the data sector we are at in the current cluster
   100                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
   101 00000A00 51                  <1>     push rcx
   102 00000A01 09C0                <1>     or eax, eax ;Zero upper dword
   103 00000A03 482D02000000        <1>     sub rax, 2
   104 00000A09 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   105 00000A0C 48D3E0              <1>     shl rax, cl
   106 00000A0F 31C9                <1>     xor ecx, ecx
   107 00000A11 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
   108 00000A14 4801C8              <1>     add rax, rcx
   109                              <1>     ;rax now has the first sector of the current cluster
   110 00000A17 59                  <1>     pop rcx
   111                              <1>     return
    18                              <2> %%_ret:
    19 00000A18 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   112                              <1> 
   113                              <1> findFreeClusterData:
   114                              <1> ;Walks the FAT to find a free cluster and returns the 
   115                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   116                              <1> ;Also finds NumberOfFreeCLusters. Both fields get filled in the workingDPB
   117                              <1> ;Works on the workingDPB
   118                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   119 00000A19 53                  <1>     push rbx
   120 00000A1A 51                  <1>     push rcx
   121 00000A1B 52                  <1>     push rdx
   122 00000A1C 57                  <1>     push rdi
   123 00000A1D 55                  <1>     push rbp
   124 00000A1E 488B2D(85C50300)    <1>     mov rbp, qword [workingDPB]
   125 00000A25 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   126 00000A29 488905(12C60300)    <1>     mov qword [tempSect], rax   ;Save the sector number temporarily
   127                              <1>     ;Mark dFirstFreeCluster as -1 and dNumberOfFreeClusters as 0
   128 00000A30 31D2                <1>     xor edx, edx
   129 00000A32 895531              <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], edx ;Zero this field
   130 00000A35 FFCA                <1>     dec edx
   131 00000A37 89552D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], edx ;Set to -1, unknown (i.e. none)
   132                              <1>     ;Use edx as sector counter
   133 00000A3A 8B5513              <1>     mov edx, dword [rbp + dpb.dFATlength]
   134                              <1> ;Get Sector Size in bytes in ebx
   135 00000A3D 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
   136                              <1> ;Get FAT type
   137 00000A41 E84CFFFFFF          <1>     call getFATtype ;Gets FAT type (for number of elements in sector)
   138 00000A46 0F84BF000000        <1>     jz .fat12
   139 00000A4C F6C101              <1>     test cl, 1
   140 00000A4F 7562                <1>     jnz .fat16
   141                              <1> ;FAT32 proceeds here
   142 00000A51 C1EB02              <1>     shr ebx, 2  ;Divide by 4 to get number of FAT entries in a sector buffer
   143 00000A54 66891D(1AC60300)    <1>     mov word [entries], bx
   144                              <1> .fat32Search:
   145 00000A5B B102                <1>     mov cl, fatBuffer
   146 00000A5D 488B05(12C60300)    <1>     mov rax, qword [tempSect]
   147 00000A64 E8E8FDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   148 00000A69 7242                <1>     jc .exitFail
   149 00000A6B 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   150 00000A6F 31C0                <1>     xor eax, eax
   151 00000A71 0FB70D(1AC60300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   152                              <1> .fat32Continue:
   153 00000A78 F2AF                <1>     repne scasd ;Look for the zero dword 
   154 00000A7A 740D                <1>     je .fat32Found  ;If found, report cluster number (offset into FAT)
   155 00000A7C FFCA                <1>     dec edx ;Dec number of sectors left to search
   156 00000A7E 7429                <1>     jz .exit    ;Once we have none left, we exit
   157 00000A80 48FF05(12C60300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   158 00000A87 EBD2                <1>     jmp short .fat32Search
   159                              <1> .fat32Found:
   160 00000A89 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   161 00000A8C 48817D2DFFFFFFFF    <1>     cmp qword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   162 00000A94 75E2                <1>     jne .fat32Continue  ;If so, keep searching sectors for more free clusters
   163 00000A96 81EF04000000        <1>     sub edi, 4  ;edi is one dword past the entry
   164 00000A9C E816010000          <1>     call .computeEntry  ;Add field to dpb
   165 00000AA1 81C704000000        <1>     add edi, 4  ;Put rdi now back onto the next FAT entry
   166 00000AA7 EBCF                <1>     jmp short .fat32Continue
   167                              <1> .exit:
   168 00000AA9 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   169 00000AAC F8                  <1>     clc
   170                              <1> .exitFail:      ;Keep carry flag
   171 00000AAD 5D                  <1>     pop rbp
   172 00000AAE 5F                  <1>     pop rdi
   173 00000AAF 5A                  <1>     pop rdx
   174 00000AB0 59                  <1>     pop rcx
   175 00000AB1 5B                  <1>     pop rbx
   176                              <1>     return
    18                              <2> %%_ret:
    19 00000AB2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   177                              <1> .fat16:
   178 00000AB3 D1EB                <1>     shr ebx, 1  ;Divide by 2 to get number of FAT entries in a sector buffer
   179 00000AB5 66891D(1AC60300)    <1>     mov word [entries], bx
   180                              <1> .fat16Search:
   181 00000ABC B102                <1>     mov cl, fatBuffer
   182 00000ABE 488B05(12C60300)    <1>     mov rax, qword [tempSect]
   183 00000AC5 E887FDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   184 00000ACA 72E1                <1>     jc .exitFail
   185 00000ACC 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   186 00000AD0 31C0                <1>     xor eax, eax
   187 00000AD2 0FB70D(1AC60300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   188                              <1> .fat16Continue:
   189 00000AD9 F266AF              <1>     repne scasw ;Look for the zero word 
   190 00000ADC 740D                <1>     je .fat16Found  ;If found, report cluster number (offset into FAT)
   191 00000ADE FFCA                <1>     dec edx ;Dec number of sectors left to search
   192 00000AE0 74C7                <1>     jz .exit    ;Once we have none left, exit
   193 00000AE2 48FF05(12C60300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   194 00000AE9 EBD1                <1>     jmp short .fat16Search
   195                              <1> .fat16Found:
   196 00000AEB FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   197 00000AEE 48817D2DFFFFFFFF    <1>     cmp qword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   198 00000AF6 75E1                <1>     jne .fat16Continue
   199 00000AF8 81EF02000000        <1>     sub edi, 2  ;edi is one word past the entry
   200 00000AFE E8B4000000          <1>     call .computeEntry
   201 00000B03 81C702000000        <1>     add edi, 2  ;Put rdi back to the next entry
   202 00000B09 EBCE                <1>     jmp short .fat16Continue
   203                              <1> .fat12:
   204 00000B0B 89D8                <1>     mov eax, ebx    ;Get sectorsize in ax
   205 00000B0D D1E0                <1>     shl eax, 1  ;Multiply by 2
   206 00000B0F B903000000          <1>     mov ecx, 3  ;1.5 bytes per FAT entry *2
   207 00000B14 52                  <1>     push rdx    ;Preserve number of sectors in FAT counter
   208 00000B15 31D2                <1>     xor edx, edx
   209 00000B17 F7F1                <1>     div ecx
   210 00000B19 5A                  <1>     pop rdx
   211 00000B1A 668905(1AC60300)    <1>     mov word [entries], ax ;Get quotient (number of whole entries in sector) 
   212                              <1>     ;The value is rounded down so we can read the next sector for the 
   213                              <1>     ;last entry manually (thus buffering it if it not already buffered)
   214 00000B21 B102                <1>     mov cl, fatBuffer
   215 00000B23 488B05(12C60300)    <1>     mov rax, qword [tempSect]
   216 00000B2A E822FDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   217 00000B2F 0F8278FFFFFF        <1>     jc .exitFail
   218 00000B35 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   219                              <1> .fat12SearchNewSector:
   220 00000B39 0FB70D(1AC60300)    <1>     movzx ecx, word [entries]   ;This is total entries in Sector rounded down
   221                              <1> .fat12Search:
   222 00000B40 0FB707              <1>     movzx eax, word [rdi]   ;Get first word (EVEN ENTRY)
   223 00000B43 25FF0F0000          <1>     and eax, 0FFFh   ;Clear upper nybble
   224 00000B48 7505                <1>     jnz .getOddEntry    ;Skip denoting entry if not 0
   225 00000B4A E854000000          <1>     call .fat12EntryFound
   226                              <1> .getOddEntry:
   227 00000B4F 48FFC7              <1>     inc rdi ;Goto next byte
   228 00000B52 FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   229 00000B54 0FB707              <1>     movzx eax, word [rdi]  ;Get second word (ODD ENTRY)
   230 00000B57 C1E804              <1>     shr eax, 4  ;Shift down by 4
   231 00000B5A 7505                <1>     jnz .getNextSector
   232 00000B5C E842000000          <1>     call .fat12EntryFound
   233                              <1> .getNextSector:
   234 00000B61 48FFC7              <1>     inc rdi ;Goto next entry
   235 00000B64 FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   236 00000B66 75D8                <1>     jnz .fat12Search
   237                              <1> ;We arrive here when we are at the last entry in the sector
   238 00000B68 48FF05(12C60300)    <1>     inc qword [tempSect]    ;Get next Sector
   239 00000B6F 488B05(12C60300)    <1>     mov rax, qword [tempSect]   ;Get this sector in rax
   240 00000B76 B102                <1>     mov cl, fatBuffer
   241 00000B78 E8D4FCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   242 00000B7D 0F822AFFFFFF        <1>     jc .exitFail
   243 00000B83 0FB607              <1>     movzx eax, byte [rdi]  ;Get last byte in old buffer (rdi still points there)
   244 00000B86 488D4B20            <1>     lea rcx, qword [rbx + bufferHdr.dataarea]   ;Go to data area (preserve rdi)
   245 00000B8A 8A21                <1>     mov ah, byte [rcx]  ;Get first byte in new sector
   246 00000B8C C1E804              <1>     shr eax, 4  ;Clear out bottom nybble
   247 00000B8F 7505                <1>     jnz .noXcluster
   248 00000B91 E80D000000          <1>     call .fat12EntryFound   ;Found a free cluster!
   249                              <1> .noXcluster:
   250                              <1>     ;Empty cluster not found in sector
   251 00000B96 FFCA                <1>     dec edx ;Decrement sector count
   252 00000B98 0F840BFFFFFF        <1>     jz .exit    ;Once all sectors have been processed, exit
   253 00000B9E 4889CF              <1>     mov rdi, rcx    ;Set rdi to point at start of next sector
   254 00000BA1 EB96                <1>     jmp short .fat12SearchNewSector ;Reload the number of entries and search
   255                              <1> .fat12EntryFound:
   256 00000BA3 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   257 00000BA6 48817D2DFFFFFFFF    <1>     cmp qword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   258                              <1>     retne
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00000BAE 7401                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00000BB0 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   259 00000BB1 E801000000          <1>     call .computeEntry  ;Compute the first cluster if this is -1
   260                              <1>     return
    18                              <2> %%_ret:
    19 00000BB6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   261                              <1> .computeEntry:
   262                              <1> ;We only call this to compute the first entry cluster number
   263                              <1> ;We preserve ALL registers when doing so
   264 00000BB7 50                  <1>     push rax
   265 00000BB8 51                  <1>     push rcx
   266 00000BB9 52                  <1>     push rdx
   267 00000BBA 57                  <1>     push rdi
   268 00000BBB 480FB74D06          <1>     movzx rcx, word [rbp + dpb.wFAToffset] ;Get start sector number of FAT 
   269 00000BC0 488B05(12C60300)    <1>     mov rax, qword [tempSect]   ;Get disk sector number of FAT into rax
   270 00000BC7 4829C8              <1>     sub rax, rcx   ;Get Offset into FAT in rax
   271 00000BCA 0FB70D(1AC60300)    <1>     movzx ecx, word [entries] ;Get number of entries in a FAT sector
   272 00000BD1 52                  <1>     push rdx
   273 00000BD2 48F7E1              <1>     mul rcx ;Multiply rax with rcx (technically eax with ecx)
   274 00000BD5 5A                  <1>     pop rdx
   275                              <1> ;rbx points to current buffer header
   276 00000BD6 488D5320            <1>     lea rdx, qword [rbx + bufferHdr.dataarea]
   277 00000BDA 4829D7              <1>     sub rdi, rdx
   278 00000BDD 4801F8              <1>     add rax, rdi    ;Add the offset into the sector to rax to get cluster number
   279 00000BE0 89452D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], eax    ;Store this zx value in dpb
   280 00000BE3 5F                  <1>     pop rdi
   281 00000BE4 5A                  <1>     pop rdx
   282 00000BE5 59                  <1>     pop rcx
   283 00000BE6 58                  <1>     pop rax
   284                              <1>     return
    18                              <2> %%_ret:
    19 00000BE7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   285                              <1> 
   286                              <1> getDataSector:
   287                              <1> ;This function will request the sector of data in [currSectD].
   288                              <1> ;This call can only be used for DATA sectors.
   289                              <1> ;Preserves all registers
   290                              <1> ;On ret: CF=NC => currBuff = Buffer with data
   291                              <1> ;        CF=CY => Critical error occurred and was FAILed
   292 00000BE8 50                  <1>     push rax
   293 00000BE9 53                  <1>     push rbx
   294 00000BEA 51                  <1>     push rcx
   295 00000BEB 488B05(2AC60300)    <1>     mov rax, qword [currSectD]  ;Get the disk sector number to read
   296 00000BF2 BB01000000          <1>     mov ebx, dosBuffer
   297 00000BF7 B908000000          <1>     mov ecx, dataBuffer 
   298 00000BFC 4885C0              <1>     test rax, rax
   299 00000BFF 0F44CB              <1>     cmovz ecx, ebx  ;If sector 0, change to DOS buffer
   300                              <1> .getSectorRead:
   301 00000C02 E84AFCFFFF          <1>     call getBuffer  ;Get ptr to buffer header in [currBuff] (and rbx but ignore)
   302 00000C07 59                  <1>     pop rcx
   303 00000C08 5B                  <1>     pop rbx
   304 00000C09 58                  <1>     pop rax
   305                              <1>     return
    18                              <2> %%_ret:
    19 00000C0A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   306                              <1> 
   307                              <1> getNextSectorOfFile:
   308                              <1> ;This function will read the next sector for a file into a buffer.
   309                              <1> ;If the next sector to be read lives in the next cluster, it will update
   310                              <1> ; the file handle of the file being read/written to the new cluster
   311                              <1> ;
   312                              <1> ;Input: rbp = dpb pointer
   313                              <1> ;Output:
   314                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   315                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File
   316                              <1> ;       CF=CY => Critical error occurred and was FAILed
   317                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   318                              <1> ; next cluster and read first sector 
   319                              <1>     ;Check if we need to go to next cluster
   320 00000C0B 8A05(29C60300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   321 00000C11 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   322 00000C14 7416                <1>     je .gotoNextCluster
   323                              <1>     ;Goto next sector in same cluster
   324 00000C16 FE05(29C60300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   325 00000C1C 48FF05(2AC60300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk
   326 00000C23 488B05(2AC60300)    <1>     mov rax, qword [currSectD]
   327                              <1> .exitOK:
   328 00000C2A F8                  <1>     clc
   329                              <1> .exitFail:
   330                              <1>     return
    18                              <2> %%_ret:
    19 00000C2B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   331                              <1> .gotoNextCluster:
   332 00000C2C 8B05(20C60300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   333 00000C32 E82A000000          <1>     call walkFAT
   334 00000C37 72F2                <1>     jc .exitFail
   335                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   336 00000C39 3DFFFFFFFF          <1>     cmp eax, -1
   337 00000C3E 74EA                <1>     je .exitOK
   338                              <1> ;Update the new cluster and sector information
   339 00000C40 8905(20C60300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   340 00000C46 FF05(1CC60300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   341 00000C4C E8AFFDFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster
   342 00000C51 488905(2AC60300)    <1>     mov qword [currSectD], rax  ;Save it
   343 00000C58 C605(29C60300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   344 00000C5F EBC9                <1>     jmp short .exitOK
   345                              <1> 
   346                              <1> 
   347                              <1> walkFAT:
   348                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   349                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   350                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   351                              <1> ;       rbp = DPB number
   352                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   353                              <1> ;If carry set, getBuffer failed!
   354 00000C61 53                  <1>     push rbx
   355 00000C62 51                  <1>     push rcx
   356 00000C63 52                  <1>     push rdx
   357 00000C64 57                  <1>     push rdi
   358 00000C65 55                  <1>     push rbp
   359 00000C66 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   360 00000C68 E847FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   361                              <1>     ;and FAT type in ecx
   362 00000C6D 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]
   363 00000C71 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   364 00000C73 51                  <1>     push rcx    ;Move FAT signature onto stack
   365 00000C74 B102                <1>     mov cl, fatBuffer
   366 00000C76 E8D6FBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   367 00000C7B 59                  <1>     pop rcx
   368 00000C7C 722D                <1>     jc .exitFail
   369                              <1>     ;Check if FAT 12, 16, 32
   370 00000C7E 85C9                <1>     test ecx, ecx
   371 00000C80 742F                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   372 00000C82 F7C101000000        <1>     test ecx, 1
   373 00000C88 7410                <1>     jz .goToNextClusterFat32
   374                              <1>     ;Here we handle FAT16
   375 00000C8A 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   376 00000C8F 663DFFFF            <1>     cmp ax, -1
   377 00000C93 7515                <1>     jne .exit
   378 00000C95 0FBEC0              <1>     movsx eax, al
   379 00000C98 EB10                <1>     jmp short .exit
   380                              <1> .goToNextClusterFat32:
   381 00000C9A 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   382 00000C9E 3DFFFFFFFF          <1>     cmp eax, -1
   383 00000CA3 7405                <1>     je .exit   ;If EOC, skip zeroing nybble
   384 00000CA5 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   385                              <1> .exit:
   386 00000CAA F8                  <1>     clc
   387                              <1> .exitFail:
   388 00000CAB 5D                  <1>     pop rbp
   389 00000CAC 5F                  <1>     pop rdi
   390 00000CAD 5A                  <1>     pop rdx
   391 00000CAE 59                  <1>     pop rcx
   392 00000CAF 5B                  <1>     pop rbx
   393                              <1>     return
    18                              <2> %%_ret:
    19 00000CB0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   394                              <1> .gotoNextClusterFat12:
   395                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   396                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   397                              <1> 
   398 00000CB1 57                  <1>     push rdi    ;Save the cluster number on the stack
   399 00000CB2 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   400 00000CB5 FFC0                <1>     inc eax ;Get next sector
   401 00000CB7 B102                <1>     mov cl, fatBuffer
   402 00000CB9 E893FBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   403 00000CBE 59                  <1>     pop rcx ;Return the cluster number in rcx
   404 00000CBF 72EA                <1>     jc .exitFail
   405                              <1>     ;rdi has first buffer header, rbx has second buffer header
   406                              <1>     ;rdx has offset into first header for entry
   407 00000CC1 F7C101000000        <1>     test ecx, 1  ;Check if cluster is odd
   408 00000CC7 7422                <1>     jz .gotoNextClusterFat12Even
   409                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   410 00000CC9 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   411 00000CCD 29D0                <1>     sub eax, edx
   412 00000CCF FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   413 00000CD1 750E                <1>     jnz .gotoNextClusterFat12NoCross
   414                              <1>     ;Boundary cross, build entry properly
   415 00000CD3 31C0                <1>     xor eax, eax
   416 00000CD5 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   417 00000CD9 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   418 00000CDC C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   419 00000CDF EB14                <1>     jmp short .checkIfLastFAT12Cluster
   420                              <1> .gotoNextClusterFat12NoCross:
   421 00000CE1 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   422 00000CE6 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   423 00000CE9 EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   424                              <1> .gotoNextClusterFat12Even:
   425                              <1>     ;Here the cluster is even and can't cross a sector boundary
   426 00000CEB 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   427 00000CF0 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   428                              <1> .checkIfLastFAT12Cluster:
   429 00000CF5 663DFF0F            <1>     cmp ax, 0FFFh
   430 00000CF9 75AF                <1>     jne .exit
   431 00000CFB B8FFFFFFFF          <1>     mov eax, -1
   432 00000D00 E9A5FFFFFF          <1>     jmp .exit
    23                                  %include "./Source/Kernel/FAT/findfile.asm"
    24                              <1> ;Generic Find First and Find Next functions here
    25                              <1> 
    26                              <1> genericFindFirst:
    27 00000D05 C3                  <1>     ret
    28                              <1> genericFindNext:
    29 00000D06 C3                  <1>     ret
    24                                  %include "./Source/Kernel/FileIO/devio.asm"
    25                              <1> ;This file contains the primitive dev io function, which will be called 
    26                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    27                              <1> ; make requests for device IO.
    28                              <1> 
    29                              <1> mainCharIO:
    30                              <1> ;This is the main IO clearing function for Char IO.
    31                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    32                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    33                              <1> ;
    34                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    35                              <1> ;       ah = {0,..., 5}, a subfunction number
    36                              <1> ;       Function 0: Read Char (drvREAD)
    37                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    38                              <1> ;       Function 2: Write Char (drvWrite)
    39                              <1> ; In the case the below functions are called for Disk/Net files
    40                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    41                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    42                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    43                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    44                              <1> ;
    45                              <1> ; If and only if ah = 02h, al = Char to write to device
    46                              <1> ;
    47                              <1> ;
    48                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    49                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    50                              <1> ;                                           ZF = NZ => Device ready (not busy)
    51                              <1> ;                                               If ND read, AL = Next Char
    52                              <1> ; For Files/Net:
    53                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    54                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    55                              <1> ;           For Read and ND Read:
    56                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    57                              <1> ;               Read returns ^Z on EOF.
    58                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    59                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    60                              <1> ;
    61                              <1> ;All registers preserved EXCEPT for ax and flags
    62                              <1> 
    63                              <1> ;Reference Request Header
    64                              <1> ;Common Section:
    65                              <1> ;    .hdrlen resb 1  ;Length of the request header
    66                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    67                              <1> ;    .cmdcde resb 1  ;Command code
    68                              <1> ;    .status resw 1  ;Status word
    69                              <1> ;    .devptr resq 1  ;Reserved. Unused
    70                              <1> ;Below used by calls 0,1,2,5
    71                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    72                              <1> ;Below used by calls 0,2
    73                              <1> ;    .bufptr resq 1
    74                              <1> ;    .tfrlen resd 1
    75                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    76                              <1> ;    .strtsc resq 1
    77                              <1> ;    .desptr resq 1
    78                              <1> 
    79                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    80 00000D07 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    81 00000D08 488D1D(7AC50300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    82 00000D0F 48891D(03C40300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    83 00000D16 5B                  <1>     pop rbx
    84 00000D17 C705(0BC40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    84 00000D1F 0000                <1>
    85 00000D21 668905(7AC50300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    86 00000D28 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    87 00000D2E 0F85A1000000        <1>     jnz .notChar
    88 00000D34 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    89 00000D3A 0F8495000000        <1>     jz .notChar
    90                              <1> ;Char devices only here
    91 00000D40 E8041E0000          <1>     call dosPushRegs    ;Save context here
    92 00000D45 488D1DF5F2FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    93 00000D4C 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    94 00000D4F C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    95 00000D52 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    96 00000D55 890D(F5C30300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    97                              <1>     ;Now set up cx for status word
    98 00000D5B 31C9                <1>     xor ecx, ecx
    99 00000D5D 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   100 00000D60 7506                <1>     jne .skipBsySet
   101 00000D62 81C900020000        <1>     or ecx, drvBsyStatus
   102                              <1> .skipBsySet:
   103 00000D68 66870D(F8C30300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   104                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   105 00000D6F 488D1D(F5C30300)    <1>     lea rbx, secdReqHdr
   106 00000D76 E86B170000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   107 00000D7B 668B3D(F8C30300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   108 00000D82 F7C700800000        <1>     test edi, drvErrStatus
   109 00000D88 752D                <1>     jnz .error
   110                              <1> .ignoreRet:
   111 00000D8A 803D(F7C30300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   112 00000D91 750C                <1>     jne .notNDRead
   113 00000D93 8A05(02C40300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   114 00000D99 8805(7AC50300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   115                              <1> .notNDRead:
   116 00000D9F 8A25(F9C30300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   117 00000DA5 F6D4                <1>     not ah
   118 00000DA7 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   119 00000DAA E8831D0000          <1>     call dosPopRegs ;Get back the context
   120 00000DAF 668B05(7AC50300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   121                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 00000DB6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   122                              <1> .error:
   123                              <1>     ;cl has flags
   124 00000DB7 88CC                <1>     mov ah, cl
   125 00000DB9 E801160000          <1>     call charDevErr
   126 00000DBE 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   127 00000DC0 750A                <1>     jne .errorIgnore
   128                              <1>     ;Fallthrough => Retry
   129 00000DC2 E86B1D0000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   130 00000DC7 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   131                              <1> .errorIgnore:
   132                              <1>     ;Clear the busy bit in the status word
   133 00000DCC 8025(F9C30300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   134 00000DD3 EBB5                <1>     jmp short .ignoreRet
   135                              <1> .notChar:
   136                              <1> ;Just return with ZF=NZ for now
   137 00000DD5 50                  <1>     push rax
   138 00000DD6 31C0                <1>     xor eax, eax
   139 00000DD8 FEC0                <1>     inc al
   140 00000DDA 58                  <1>     pop rax
   141                              <1>     return
    18                              <2> %%_ret:
    19 00000DDB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   142                              <1> 
   143                              <1> openSFT:
   144                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   145                              <1> ;Input: rdi = SFT pointer
   146 00000DDC E8681D0000          <1>     call dosPushRegs
   147 00000DE1 B00D                <1>     mov al, drvOPEN
   148 00000DE3 EB07                <1>     jmp short openCloseCommon
   149                              <1> closeSFT:
   150                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   151 00000DE5 E85F1D0000          <1>     call dosPushRegs
   152 00000DEA B00E                <1>     mov al, drvCLOSE
   153                              <1> openCloseCommon:
   154                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   155 00000DEC 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   156 00000DF2 7469                <1>     jz .exit    ;Exit if so
   157 00000DF4 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   158 00000DF8 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   159 00000DFC 7512                <1>     jnz .charDev
   160                              <1>     ;Here a disk drive, rdi is a DPB ptr
   161 00000DFE 803D(37C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   162 00000E05 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   163 00000E07 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   164 00000E0A 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   165 00000E0C 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   166                              <1> .charDev:
   167 00000E10 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   168 00000E16 7445                <1>     jz .exit    ;No, exit!
   169 00000E18 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   170 00000E1B 488D1D(1FC40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   171 00000E22 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   172                              <1> .retryEP:
   173 00000E25 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   174 00000E28 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   175 00000E2B 50                  <1>     push rax    ;Save the dword
   176 00000E2C E8B9160000          <1>     call goDriver
   177 00000E31 0FB73D(22C40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   178 00000E38 F7C700800000        <1>     test edi, drvErrStatus
   179 00000E3E 741C                <1>     jz .exitPop
   180                              <1>     ;Error here, check if char or block drive
   181 00000E40 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   182 00000E46 7404                <1>     jz .blockError
   183                              <1>     ;Char error here
   184 00000E48 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   185 00000E4A EB04                <1>     jmp short .errorCmn
   186                              <1> .blockError:
   187 00000E4C 88C8                <1>     mov al, cl  ;Move drive number into al
   188 00000E4E B406                <1>     mov ah, critData    ;Data on block dev error
   189                              <1> .errorCmn:
   190                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   191 00000E50 E86A150000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   192 00000E55 B001                <1>     mov al, critRetry   ;al returns user response
   193 00000E57 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   194 00000E59 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   195 00000E5A EBC9                <1>     jmp short .retryEP  ;Reset
   196                              <1> .exitPop:
   197 00000E5C 58                  <1>     pop rax    
   198                              <1> .exit:
   199 00000E5D E8D01C0000          <1>     call dosPopRegs
   200                              <1>     return
    18                              <2> %%_ret:
    19 00000E62 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    25                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    26                              <1> ;-----------------------------------------------------------------------:
    27                              <1> ;                  DOS default char functions live here                 :
    28                              <1> ;                                                                       :
    29                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    30                              <1> ;                                                                       :
    31                              <1> ;Rules for the naming of the DOS functions                              :
    32                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    33                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    34                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    35                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    36                              <1> ;                                                                       :
    37                              <1> ;-----------------------------------------------------------------------:
    38                              <1> 
    39                              <1> charIn_BE:     ;ah = 01h
    40                              <1> ;Return char that has been read and echoed in al
    41 00000E63 E866010000          <1>     call charIn_B
    42 00000E68 50                  <1>     push rax
    43 00000E69 E804000000          <1>     call charOut_B.in    ;Output it to screen
    44 00000E6E 58                  <1>     pop rax
    45                              <1>     return
    18                              <2> %%_ret:
    19 00000E6F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> 
    47                              <1> charOut_B:       ;ah = 02h
    48                              <1> ;Bspace is regular cursor left, does not insert a blank
    49 00000E70 88D0                <1>     mov al, dl
    50                              <1> .in:  ;Internal function Entry Point, with char in al
    51 00000E72 3C20                <1>     cmp al, asciiCaret
    52 00000E74 7277                <1>     jb .control
    53 00000E76 3C7F                <1>     cmp al, DEL ;DEL char?
    54 00000E78 7406                <1>     je .skipCurs
    55 00000E7A FE05(2FC20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    56                              <1> .skipCurs:
    57 00000E80 FE05(35C30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    58 00000E86 8025(35C30300)03    <1>     and byte [vConErr], 3
    59 00000E8D 56                  <1>     push rsi
    60 00000E8E 7507                <1>     jnz .skipErrorCheck
    61 00000E90 50                  <1>     push rax
    62 00000E91 E884020000          <1>     call vConCtrlCheck
    63 00000E96 58                  <1>     pop rax
    64                              <1> .skipErrorCheck:
    65 00000E97 E80C020000          <1>     call outputOnStdout
    66 00000E9C 5E                  <1>     pop rsi
    67 00000E9D F605(32C30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    68                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000EA4 74C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    69 00000EA6 53                  <1>     push rbx
    70 00000EA7 56                  <1>     push rsi
    71 00000EA8 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    72 00000EAD E82F030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    73 00000EB2 7236                <1>     jc .exitPrintEcho
    74                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    75 00000EB4 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    76 00000EB8 F7C300800000        <1>     test ebx, devRedirDev
    77 00000EBE 752A                <1>     jnz .exitPrintEcho  ;Exit if STDOUT is redir
    78 00000EC0 F7C380000000        <1>     test ebx, devCharDev
    79 00000EC6 7422                <1>     jz .exitPrintEcho
    80 00000EC8 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    81 00000ECD E80F030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    82 00000ED2 7216                <1>     jc .exitPrintEcho   ;Exit if handle closed
    83 00000ED4 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    84 00000EDA 7407                <1>     jz .netSpool
    85 00000EDC E8FB010000          <1>     call outputOnSFT
    86 00000EE1 EB07                <1>     jmp short .exitPrintEcho
    87                              <1> .netSpool:
    88 00000EE3 C605(32C30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    89                              <1> .exitPrintEcho:
    90 00000EEA 5E                  <1>     pop rsi
    91 00000EEB 5B                  <1>     pop rbx
    92                              <1>     return
    18                              <2> %%_ret:
    19 00000EEC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    93                              <1> .control:
    94 00000EED 3C0D                <1>     cmp al, CR
    95 00000EEF 7425                <1>     je .newline
    96 00000EF1 3C08                <1>     cmp al, BSP
    97 00000EF3 742D                <1>     je .back
    98 00000EF5 3C09                <1>     cmp al, TAB
    99 00000EF7 7587                <1>     jne .skipCurs   ;Treat as normal
   100                              <1>     ;TAB key here
   101                              <1> .tab:
   102 00000EF9 51                  <1>     push rcx
   103 00000EFA 0FB60D(2FC20300)    <1>     movzx ecx, byte [vConCursPos]
   104 00000F01 80C9F8              <1>     or cl, ~7
   105 00000F04 F6D9                <1>     neg cl
   106 00000F06 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   107                              <1> .tabloop:
   108 00000F09 B020                <1>     mov al, SPC
   109 00000F0B E862FFFFFF          <1>     call charOut_B.in   ;Output the char
   110 00000F10 FEC9                <1>     dec cl
   111 00000F12 75F5                <1>     jnz .tabloop
   112                              <1> .stopTab:
   113 00000F14 59                  <1>     pop rcx
   114                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 00000F15 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   115                              <1> .newline:
   116 00000F16 C605(2FC20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   117 00000F1D E95EFFFFFF          <1>     jmp .skipCurs   ;And echo 
   118                              <1> .back:
   119 00000F22 FE0D(2FC20300)      <1>     dec byte [vConCursPos]
   120 00000F28 E953FFFFFF          <1>     jmp .skipCurs   ;And echo
   121                              <1> 
   122                              <1> auxIn_B:        ;ah = 03h
   123 00000F2D E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   124 00000F32 BB03000000          <1>     mov ebx, 3
   125 00000F37 E8A5020000          <1>     call getCharDevSFT
   126                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000F3C 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   127                              <1> .auxloop:
   128 00000F3E B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   129 00000F40 E8C2FDFFFF          <1>     call mainCharIO
   130 00000F45 7408                <1>     jz .signalLoop
   131 00000F47 30E4                <1>     xor ah, ah  ;Read the char in
   132 00000F49 E8B9FDFFFF          <1>     call mainCharIO
   133                              <1>     return
    18                              <2> %%_ret:
    19 00000F4E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   134                              <1> .signalLoop:
   135 00000F4F E8A3010000          <1>     call callInt48h
   136 00000F54 EBE8                <1>     jmp short .auxloop
   137                              <1> 
   138                              <1> auxOut_B:       ;ah = 04h
   139 00000F56 53                  <1>     push rbx
   140 00000F57 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   141 00000F5C EB06                <1>     jmp short auxOutCmn
   142                              <1> prnOut_B:       ;ah = 05h
   143 00000F5E 53                  <1>     push rbx
   144 00000F5F BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   145                              <1> auxOutCmn: ;Auxilliary output device common 
   146 00000F64 88D0                <1>     mov al, dl  ;Get the char into al
   147 00000F66 50                  <1>     push rax
   148 00000F67 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   149 00000F6C 58                  <1>     pop rax
   150 00000F6D 56                  <1>     push rsi
   151 00000F6E E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   152 00000F73 5E                  <1>     pop rsi
   153 00000F74 5B                  <1>     pop rbx
   154                              <1>     return
    18                              <2> %%_ret:
    19 00000F75 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   155                              <1> 
   156                              <1> directConIO:    ;ah = 06h
   157 00000F76 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   158 00000F78 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   159 00000F7A 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   160                              <1> ;Here is the read char direct function
   161 00000F80 31DB                <1>     xor ebx, ebx    
   162 00000F82 E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   163                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000F87 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   164 00000F89 488B2D(DAC30300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   165 00000F90 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   166 00000F92 E870FDFFFF          <1>     call mainCharIO
   167 00000F97 E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   168 00000F9C 7507                <1>     jnz .readChar
   169 00000F9E 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   170 00000FA2 30C0                <1>     xor al, al  ;Set caller return code to 0
   171                              <1>     return
    18                              <2> %%_ret:
    19 00000FA4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   172                              <1> .readChar:
   173 00000FA5 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   174                              <1>     ;Fallthrough here to get the char at STDIN
   175                              <1> charIn:         ;ah = 07h
   176                              <1> ;Return char in al from STDIN without waiting
   177 00000FA9 31DB                <1>     xor ebx, ebx
   178 00000FAB E831020000          <1>     call getCharDevSFT
   179                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000FB0 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   180 00000FB2 B401                <1>     mov ah, 01  ;ND read for char
   181 00000FB4 E84EFDFFFF          <1>     call mainCharIO
   182 00000FB9 750B                <1>     jnz .getChar
   183 00000FBB B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   184 00000FBD CD4A                <1>     int 4Ah
   185 00000FBF E833010000          <1>     call callInt48h
   186 00000FC4 EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   187                              <1> .getChar:
   188                              <1>     ;Get the char in al and exit
   189 00000FC6 30E4                <1>     xor ah, ah
   190 00000FC8 E83AFDFFFF          <1>     call mainCharIO
   191                              <1>     return
    18                              <2> %%_ret:
    19 00000FCD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   192                              <1> charIn_B:       ;ah = 08h
   193                              <1> ;Return char in al from STDIN
   194 00000FCE 56                  <1>     push rsi
   195                              <1> .readAgain:
   196 00000FCF E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   197                              <1>     ;Also sets rsi to point to the device SFT for 
   198 00000FD4 7543                <1>     jnz .pullChar
   199 00000FD6 803D(5FD80300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   200 00000FDD 7507                <1>     jne .skiplookahead
   201 00000FDF B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   202 00000FE1 E821FDFFFF          <1>     call mainCharIO
   203                              <1> .skiplookahead:
   204 00000FE6 B484                <1>     mov ah, 84h
   205 00000FE8 CD4A                <1>     int 4ah ;Multitasking keyboard loop
   206 00000FEA 66813D(8BD80300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   206 00000FF2 FF                  <1>
   207 00000FF3 751B                <1>     jne .skipClockRead
   208 00000FF5 E84F1B0000          <1>     call dosPushRegs
   209 00000FFA F8                  <1>     clc ;Clear CF, write primary header to backup
   210 00000FFB E882000000          <1>     call swapPrimaryHeader
   211 00001000 E8CF060000          <1>     call readDateTimeRecord
   212 00001005 F9                  <1>     stc ;Set CF, write backup to primary header
   213 00001006 E877000000          <1>     call swapPrimaryHeader
   214 0000100B E8221B0000          <1>     call dosPopRegs
   215                              <1> .skipClockRead:
   216 00001010 66FF05(8BD80300)    <1>     inc word [keybTicks]
   217 00001017 EBB6                <1>     jmp short .readAgain
   218                              <1> .pullChar:
   219 00001019 30E4                <1>     xor ah, ah
   220 0000101B E8E7FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   221 00001020 5E                  <1>     pop rsi
   222 00001021 3C00                <1>     cmp al, NUL ;Is this the null char?
   223 00001023 7507                <1>     jne .exit
   224                              <1>     ;We are mid extended ascii, prevent printer toggling
   225 00001025 C605(8AD80300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   226                              <1> .exit:
   227                              <1>     return
    18                              <2> %%_ret:
    19 0000102C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   228                              <1> 
   229                              <1> printString_B:      ;ah = 09h
   230 0000102D 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   231                              <1> .ps0:
   232 00001030 AC                  <1>     lodsb   ;Get char in al and inc rsi
   233 00001031 3C24                <1>     cmp al, "$" ;End of string char?
   234                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001033 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   235 00001035 E838FEFFFF          <1>     call charOut_B.in
   236 0000103A EBF4                <1>     jmp short .ps0
   237                              <1> 
   238                              <1> checkStdinStatus:  ;ah = 0Bh
   239                              <1> ;Returns the status of the driver controlling vCon
   240 0000103C E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   241 00001041 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   242                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001043 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   243 00001045 FEC8                <1>     dec al  ;Set al to -1 if char available
   244                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 00001047 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   245                              <1> clearbuffDoFunc:   ;ah = 0Ch
   246                              <1> ;Clears any buffers and issues a console read command (the command in al)
   247                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   248 00001048 50                  <1>     push rax
   249 00001049 52                  <1>     push rdx
   250 0000104A 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   251 0000104C E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   252 00001051 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   253 00001053 B404                <1>     mov ah, 04h ;Flush input buffers
   254 00001055 E8ADFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   255                              <1> .skipFlush:
   256 0000105A 5A                  <1>     pop rdx
   257 0000105B 58                  <1>     pop rax
   258 0000105C 88C4                <1>     mov ah, al  ;Move function number into ah
   259 0000105E 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   260 00001060 7507                <1>     jne .others
   261 00001062 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   262 00001065 7412                <1>     jz .bad ;Yes, exit
   263 00001067 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   264                              <1> .others:
   265 00001069 3C01                <1>     cmp al, 01h
   266 0000106B 740F                <1>     je .callFunction
   267 0000106D 3C07                <1>     cmp al, 07h
   268 0000106F 740B                <1>     je .callFunction
   269 00001071 3C08                <1>     cmp al, 08h
   270 00001073 7407                <1>     je .callFunction
   271 00001075 3C0A                <1>     cmp al, 0Ah
   272 00001077 7403                <1>     je .callFunction
   273                              <1> .bad:
   274 00001079 30C0                <1>     xor al, al
   275                              <1>     return
    18                              <2> %%_ret:
    19 0000107B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   276                              <1> .callFunction:
   277 0000107C FA                  <1>     cli ;Prepare to swap stack pointer
   278                              <1>     ;The below address avoids "properly" reentering DOS
   279                              <1>     ;We simply reuse the function dispatch aspect. 
   280                              <1>     ;this means we dont trash the caller's register frame 
   281 0000107D E9DF190000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   282                              <1> ;------------------------
   283                              <1> ;  Primitive functions  :
   284                              <1> ;------------------------
   285                              <1> swapPrimaryHeader:
   286                              <1> ;Will swap the primary header to the backup or vice-versa, depending on
   287                              <1> ; CF. CF = NC, write to backup, CF=CY, read from backup
   288 00001082 56                  <1>     push rsi
   289 00001083 57                  <1>     push rdi
   290 00001084 51                  <1>     push rcx
   291 00001085 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   291 0000108E 00                  <1>
   292 0000108F 488D35(1FC40300)    <1>     lea rsi, primReqHdr
   293 00001096 488D3D(60D80300)    <1>     lea rdi, bkupReqHdr
   294 0000109D 7303                <1>     jnc .read
   295 0000109F 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   296                              <1> .read:
   297 000010A2 F3A4                <1>     rep movsb   ;Swap
   298 000010A4 59                  <1>     pop rcx
   299 000010A5 5F                  <1>     pop rdi
   300 000010A6 5E                  <1>     pop rsi
   301                              <1>     return
    18                              <2> %%_ret:
    19 000010A7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   302                              <1> outputOnStdout:
   303                              <1> ;Input: al = Char to output
   304                              <1> ;Output: CF=CY, all good
   305 000010A8 53                  <1>     push rbx
   306 000010A9 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   307 000010AE E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   308 000010B3 7217                <1>     jc .exit
   309 000010B5 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   310 000010BB 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   311 000010BD 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   312 000010C1 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   313 000010C7 7405                <1>     jz .notCharDevOrFast
   314 000010C9 CD49                <1>     int 49h ;Fast output
   315                              <1> .exitOk:
   316 000010CB F8                  <1>     clc
   317                              <1> .exit:
   318 000010CC 5B                  <1>     pop rbx
   319                              <1>     return
    18                              <2> %%_ret:
    19 000010CD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   320                              <1> .notCharDevOrFast:
   321 000010CE E809000000          <1>     call outputOnSFT
   322 000010D3 5B                  <1>     pop rbx
   323                              <1>     return
    18                              <2> %%_ret:
    19 000010D4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   324                              <1> 
   325                              <1> outputToHandle:
   326                              <1> ;Char to output must be in al
   327 000010D5 E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   328                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000010DA 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   329                              <1> outputOnSFT:
   330                              <1> ;Output char in al to SFT in rsi
   331                              <1> ;Waits until device is not busy to send char.
   332                              <1> ;Calls int 48h if device busy
   333 000010DC 50                  <1>     push rax
   334 000010DD B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   335 000010DF E823FCFFFF          <1>     call mainCharIO
   336 000010E4 58                  <1>     pop rax
   337 000010E5 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   338 000010E7 B402                <1>     mov ah, 02h ;Output char in al
   339 000010E9 E819FCFFFF          <1>     call mainCharIO
   340 000010EE F8                  <1>     clc
   341                              <1>     return
    18                              <2> %%_ret:
    19 000010EF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   342                              <1> .signalLoop:
   343 000010F0 E802000000          <1>     call callInt48h
   344 000010F5 EBE5                <1>     jmp short outputOnSFT
   345                              <1> 
   346                              <1> callInt48h:
   347                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   348 000010F7 9C                  <1>     pushfq
   349 000010F8 F605(F3C30300)FF    <1>     test byte [int48Flag], -1
   350 000010FF 7417                <1>     jz .exit    ;If zero, not safe
   351 00001101 F605(6AC30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   352 00001108 750E                <1>     jnz .exit
   353                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   354 0000110A FF35(F3C30300)      <1>     push qword [int48Flag] 
   355 00001110 CD48                <1>     int 48h
   356 00001112 8F05(F3C30300)      <1>     pop qword [int48Flag]    ;Return original value
   357                              <1> .exit:
   358 00001118 9D                  <1>     popfq
   359                              <1>     return
    18                              <2> %%_ret:
    19 00001119 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   360                              <1> 
   361                              <1> 
   362                              <1> vConCtrlCheck:
   363                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   364                              <1> ; the processing. 
   365                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   366                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   367                              <1> ;
   368                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   369                              <1> ;^S will pause screen processing until another key is processed by vCon input
   370                              <1> ;^P will toggle the printer echo feature of the vConsole
   371                              <1> ;
   372                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   373                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   374                              <1> ;
   375                              <1> ;Output: 
   376                              <1> ;   CF=CY : Error
   377                              <1> ;   CF=NC : ...
   378                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   379                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   380 0000111A E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   381 0000111F 53                  <1>     push rbx
   382 00001120 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   383 00001122 E8BA000000          <1>     call getCharDevSFT
   384 00001127 5B                  <1>     pop rbx
   385                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001128 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   386 0000112A B401                <1>     mov ah, 01  ;Non destructively read CON
   387 0000112C E8D6FBFFFF          <1>     call mainCharIO
   388 00001131 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   389                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   390 00001133 3C13                <1>     cmp al, DC3 ;^S ?
   391 00001135 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   392 00001137 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   393 00001139 E8C9FBFFFF          <1>     call mainCharIO
   394 0000113E E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   395                              <1> .checkPrintOrExit:
   396 00001143 3C10                <1>     cmp al, DLE ;Do we have ^P?
   397 00001145 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   398 00001147 3C03                <1>     cmp al, ETX ;Do we have ^C?
   399 00001149 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   400                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   401                              <1>     return 
    18                              <2> %%_ret:
    19 0000114B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   402                              <1> .printToggle:
   403 0000114C F615(32C30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   404 00001152 53                  <1>     push rbx
   405 00001153 BB04000000          <1>     mov ebx, 4  ;PRN handle
   406 00001158 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   407 0000115D 5B                  <1>     pop rbx
   408                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000115E 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   409 00001160 57                  <1>     push rdi
   410 00001161 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   411 00001164 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   412 0000116A 741D                <1>     jz .notNet
   413 0000116C 50                  <1>     push rax
   414 0000116D B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   415 00001172 CD4F                <1>     int 4Fh
   416 00001174 58                  <1>     pop rax
   417 00001175 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   418                              <1>     ;If something went wrong, turn off echo
   419 00001177 C605(32C30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   420 0000117E 50                  <1>     push rax
   421 0000117F B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   422 00001184 CD4F                <1>     int 4Fh
   423 00001186 58                  <1>     pop rax
   424 00001187 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   425                              <1> .notNet:
   426                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   427                              <1> ; 0Dh or 0Eh
   428 00001189 803D(32C30300)00    <1>     cmp byte [printEcho], 00
   429 00001190 7507                <1>     jnz .echoOn
   430 00001192 E84EFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   431 00001197 EB05                <1>     jmp short .printExit
   432                              <1> .echoOn:
   433 00001199 E83EFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   434                              <1> .printExit:
   435 0000119E 5F                  <1>     pop rdi
   436                              <1>     return
    18                              <2> %%_ret:
    19 0000119F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   437                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   438 000011A0 E852FFFFFF          <1>     call callInt48h
   439                              <1> .waitNextChar:   ;Here get next char
   440 000011A5 B401                <1>     mov ah, 01h ;ND read
   441 000011A7 E85BFBFFFF          <1>     call mainCharIO
   442 000011AC 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   443                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   444 000011AE 53                  <1>     push rbx
   445 000011AF 31DB                <1>     xor ebx, ebx
   446 000011B1 E82B000000          <1>     call getCharDevSFT
   447 000011B6 5B                  <1>     pop rbx
   448                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000011B7 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   449 000011B9 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   450 000011BB E847FBFFFF          <1>     call mainCharIO
   451 000011C0 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   452 000011C2 7514                <1>     jnz .checkBreak2
   453 000011C4 803D(8AD80300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   454 000011CB 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   455 000011D1 C605(8AD80300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   456                              <1> .checkBreak2:
   457 000011D8 3C03                <1>     cmp al, ETX
   458                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000011DA 75C3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   459 000011DC E99C120000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   460                              <1> 
   461                              <1> 
   462                              <1> getCharDevSFT:
   463                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   464                              <1> ;Input: bx = zero extended handle number
   465                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   466                              <1> ;        CF=CY => al = Error code, abort operation
   467 000011E1 F605(F2C30300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   468 000011E8 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   469                              <1> .getSFT:
   470 000011EA 57                  <1>     push rdi
   471 000011EB E8E9090000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   472 000011F0 4889FE              <1>     mov rsi, rdi
   473 000011F3 5F                  <1>     pop rdi
   474                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 000011F4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   475                              <1> .swap:
   476                              <1> ;workingSFT is only set for CON calls
   477 000011F5 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   478 000011FB 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   479 000011FD 488B35(95C50300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   480 00001204 F8                  <1>     clc
   481                              <1>     return
    18                              <2> %%_ret:
    19 00001205 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   482                              <1> 
   483                              <1> ;------------------------
   484                              <1> ;   Utility functions   :
   485                              <1> ;------------------------
   486                              <1> printCaretASCII:
   487                              <1> ;Input: al = Char to print with a caret
   488                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   489                              <1> ;First check if the char should be careted, and then print normally if so
   490 00001206 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   491 00001208 0F8364FCFFFF        <1>     jae charOut_B.in
   492 0000120E 3C09                <1>     cmp al, TAB
   493 00001210 0F845CFCFFFF        <1>     je charOut_B.in
   494 00001216 3C15                <1>     cmp al, NAK
   495 00001218 0F8454FCFFFF        <1>     je charOut_B.in
   496 0000121E 3C14                <1>     cmp al, DC4
   497 00001220 0F844CFCFFFF        <1>     je charOut_B.in
   498 00001226 50                  <1>     push rax
   499 00001227 B05E                <1>     mov al, "^" ;Get caret in place
   500 00001229 E844FCFFFF          <1>     call charOut_B.in
   501 0000122E 58                  <1>     pop rax
   502 0000122F 0440                <1>     add al, "@" ;Turn into an ASCII Char
   503 00001231 E93CFCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   504                              <1> printCRLF:
   505 00001236 B00D                <1>     mov al, CR
   506 00001238 E835FCFFFF          <1>     call charOut_B.in
   507 0000123D B00A                <1>     mov al, LF
   508 0000123F E92EFCFFFF          <1>     jmp charOut_B.in
   509                              <1> 
   510                              <1> checkBreak:
   511                              <1> ;Reads bytes from CON if there are any bytes to read and 
   512                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   513 00001244 803D(6BC30300)01    <1>     cmp byte [inDOS], 1
   514                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000124B 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   515                              <1> ;Returns in al the keystroke that is available IF one is available
   516                              <1> ; or al=0 if no keystroke available
   517 0000124D 53                  <1>     push rbx
   518 0000124E 56                  <1>     push rsi
   519 0000124F 488B35(4BC00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   520                              <1>     ;Place command code and a zero status word at the same time
   521 00001256 C705(4BC40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   521 0000125E 0000                <1>
   522                              <1>     ;Place the packet size in the hdrlen field
   523 00001260 C605(49C40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   524 00001267 488D1D(49C40300)    <1>     lea rbx, critReqHdr
   525 0000126E E877120000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   526                              <1>     ;Check if the busy bit is set (No keystroke available)
   527 00001273 66F705(4CC40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   527 0000127B 02                  <1>
   528 0000127C 7405                <1>     jz .charFound
   529                              <1> .exit:
   530 0000127E 30C0                <1>     xor al, al
   531 00001280 5E                  <1>     pop rsi
   532 00001281 5B                  <1>     pop rbx
   533                              <1>     return
    18                              <2> %%_ret:
    19 00001282 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   534                              <1> .charFound:
   535                              <1> ;Keystroke available, proceed
   536 00001283 8A05(56C40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   537 00001289 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   538 0000128B 75F1                <1>     jne .exit   ;If not equal exit
   539                              <1> ;Now we pull the char out of the buffer
   540 0000128D C705(4BC40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   540 00001295 0000                <1>
   541 00001297 C605(49C40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   542                              <1>     ;Place pointers and number of chars
   543 0000129E C705(5FC40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   543 000012A6 0000                <1>
   544                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   545 000012A8 488D05(56C40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   546 000012AF 488905(57C40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   547 000012B6 E82F120000          <1>     call goDriver   ;RSI and RBX as before
   548 000012BB E9BD110000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   549                              <1> 
   550                              <1> vConSwapDriver:
   551                              <1> ;Sets up the vCon to use the alternative SFT pointer
   552 000012C0 57                  <1>     push rdi
   553 000012C1 C605(F2C30300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   554 000012C8 488B3D(00C60300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   555 000012CF 48893D(95C50300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   556 000012D6 5F                  <1>     pop rdi
   557                              <1>     return
    18                              <2> %%_ret:
    19 000012D7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   558                              <1> 
   559                              <1> vConRetDriver:
   560                              <1> ;Returns the original driver (sets flag down)
   561 000012D8 C605(F2C30300)00    <1>     mov byte [vConDrvSwp], 0
   562                              <1>     return
    18                              <2> %%_ret:
    19 000012DF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> ;--------------------------------------------------
   565                              <1> ;      Main Keyboard Buffered Input Function      :
   566                              <1> ;--------------------------------------------------
   567                              <1> buffCharInput_BE:  ;ah = 0Ah
   568                              <1> ;Buffer pointer in rdx
   569                              <1> ; byte [rdx + 0], buffer length
   570                              <1> ; byte [rdx + 1], number of chars in buffer
   571                              <1> ; byte [rdx + 2], buffer start
   572                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   573                              <1> ;Register use
   574                              <1> ; dh = Char offset in internal buffer
   575                              <1> ; dl = Buffer length
   576                              <1> ; bh = Char offset in user buffer
   577                              <1> ; bl = Number of chars already in the buffer
   578                              <1> ; rdi = Internal buffer
   579                              <1> ; rsi = User buffer
   580 000012E0 4889D6              <1>     mov rsi, rdx
   581 000012E3 66AD                <1>     lodsw   ;Get buffer metadata in ax
   582 000012E5 84C0                <1>     test al, al
   583                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000012E7 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   584 000012E9 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   585 000012EC 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   586 000012EE 7606                <1>     jbe .avoidcheck
   587 000012F0 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   588 000012F4 7402                <1>     je .functionKeyOk
   589                              <1> .avoidcheck:
   590 000012F6 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   591                              <1> .functionKeyOk:
   592 000012F8 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   593 000012FB FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   594                              <1> .breakEP:
   595 000012FD 8A05(2FC20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   596 00001303 8805(30C20300)      <1>     mov byte [vConCurCnt], al
   597 00001309 56                  <1>     push rsi    ;Push user buffer address
   598 0000130A 488D3D(31C20300)    <1>     lea rdi, vConBuffer
   599 00001311 C605(82C50300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   600                              <1> .mainLoop:
   601 00001318 E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   602 0000131D 3C0A                <1>     cmp al, LF
   603 0000131F 7505                <1>     jne .checkControlChars
   604                              <1> .mainLoop2:
   605 00001321 E8A8FCFFFF          <1>     call charIn_B
   606                              <1> .checkControlChars:
   607 00001326 3C06                <1>     cmp al, ACK
   608 00001328 74F7                <1>     je .mainLoop2   ;Get another char
   609 0000132A 3A0531EDFFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   610 00001330 0F8426010000        <1>     je .escape
   611 00001336 3C7F                <1>     cmp al, DEL
   612 00001338 0F8489000000        <1>     je .delete
   613 0000133E 3C08                <1>     cmp al, BSP
   614 00001340 0F8481000000        <1>     je .delete
   615 00001346 3C17                <1>     cmp al, ETB
   616                              <1>     ;Add space for patched jump instructions
   617 00001348 9090909090          <1>     db 5 dup (90h)  ;NOP
   618 0000134D 3C15                <1>     cmp al, NAK
   619 0000134F 9090909090          <1>     db 5 dup (90h)
   620 00001354 3C0D                <1>     cmp al, CR
   621 00001356 744C                <1>     je .carriageReturn
   622 00001358 3C0A                <1>     cmp al, LF
   623 0000135A 7461                <1>     je .lineFeed
   624 0000135C 3A0500EDFFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   625 00001362 7429                <1>     je .break
   626                              <1> .checkIfCanInsert:
   627 00001364 38D6                <1>     cmp dh, dl
   628 00001366 731C                <1>     jae .bufOflw
   629 00001368 AA                  <1>     stosb   ;Store the byte and increment rdi!
   630 00001369 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   631 0000136B E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   632 00001370 803D(82C50300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   633 00001377 75A8                <1>     jne .mainLoop2
   634                              <1>     ;IF not in insert mode, we fall here
   635                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   636                              <1>     ; or insert chars if needed.
   637 00001379 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   638 0000137B 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   639 0000137D 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   640 00001380 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   641 00001382 EB9D                <1>     jmp short .mainLoop2
   642                              <1> .bufOflw:
   643                              <1> ;Buffer overflow
   644 00001384 B007                <1>     mov al, BEL ;Sound the bell
   645 00001386 E8E7FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   646 0000138B EB94                <1>     jmp short .mainLoop2
   647                              <1> .break:
   648                              <1> ;Break, Place a "\", and do a CRLF
   649 0000138D B05C                <1>     mov al, "\"
   650 0000138F E8DEFAFFFF          <1>     call charOut_B.in
   651 00001394 5E                  <1>     pop rsi ;Realign stack
   652                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   653 00001395 E89CFEFFFF          <1>     call printCRLF
   654                              <1>     ;Align to next tabstop
   655 0000139A E85AFBFFFF          <1>     call charOut_B.tab
   656 0000139F E959FFFFFF          <1>     jmp .breakEP
   657                              <1> .carriageReturn:
   658 000013A4 AA                  <1>     stosb
   659 000013A5 E8C8FAFFFF          <1>     call charOut_B.in
   660 000013AA 5F                  <1>     pop rdi ;User buffer address was pushed 
   661 000013AB 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   662 000013AE FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   663                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   664 000013B0 488D35(31C20300)    <1>     lea rsi, vConBuffer
   665 000013B7 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   666 000013BA F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   667                              <1>     return
    18                              <2> %%_ret:
    19 000013BC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   668                              <1> .lineFeed:
   669 000013BD E874FEFFFF          <1>     call printCRLF
   670 000013C2 E95AFFFFFF          <1>     jmp .mainLoop2
   671                              <1> .delete:
   672 000013C7 E805000000          <1>     call .removeChar
   673 000013CC E950FFFFFF          <1>     jmp .mainLoop2
   674                              <1> .removeChar:
   675 000013D1 84F6                <1>     test dh, dh ;Is char count 0?
   676 000013D3 741C                <1>     jz .normalChar   ;If so, skip going back!
   677 000013D5 E868000000          <1>     call .vConErase
   678 000013DA 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   679 000013DC 3C20                <1>     cmp al, SPC
   680 000013DE 7311                <1>     jae .normalChar
   681 000013E0 3C09                <1>     cmp al, TAB
   682 000013E2 7420                <1>     je .eraTab
   683 000013E4 3C15                <1>     cmp al, NAK
   684 000013E6 7409                <1>     je .normalChar
   685 000013E8 3C14                <1>     cmp al, DC4
   686 000013EA 7405                <1>     je .normalChar
   687 000013EC E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   688                              <1> .normalChar:
   689 000013F1 803D(82C50300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   690                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013F8 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   691 000013FA 84FF                <1>     test bh, bh ;Beginning of user buffer?
   692                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013FC 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   693 000013FE 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   694 00001401 FECF                <1>     dec bh
   695                              <1>     return
    18                              <2> %%_ret:
    19 00001403 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   696                              <1> .eraTab:
   697                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   698                              <1> ; up to a tab stop worth of space chars printed
   699 00001404 57                  <1>     push rdi
   700 00001405 48FFCF              <1>     dec rdi
   701 00001408 FD                  <1>     std ;Go backwards
   702 00001409 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   703 0000140C B020                <1>     mov al, SPC
   704 0000140E 53                  <1>     push rbx
   705 0000140F BB07000000          <1>     mov ebx, 7
   706 00001414 67E30D              <1>     jecxz .onTabstop
   707                              <1> .scanString:
   708 00001417 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   709 00001418 7608                <1>     jbe .notChar    ;No, skip handling
   710 0000141A 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   711 0000141E 740A                <1>     je .tabChar
   712 00001420 FECB                <1>     dec bl
   713                              <1> .notChar:
   714 00001422 E2F3                <1>     loop .scanString
   715                              <1> .onTabstop:
   716 00001424 2A1D(30C20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   717                              <1> .tabChar:
   718 0000142A 28F3                <1>     sub bl, dh  ;Same on tabstop
   719 0000142C 00D9                <1>     add cl, bl
   720 0000142E 80E107              <1>     and cl, 7
   721 00001431 5B                  <1>     pop rbx
   722 00001432 5F                  <1>     pop rdi
   723 00001433 FC                  <1>     cld
   724 00001434 74BB                <1>     jz .normalChar
   725                              <1>     ;Now erase all the spaces placed on the vCon
   726                              <1> .vConDelTab:
   727 00001436 E80C000000          <1>     call .vConEraseNoDec
   728 0000143B E2F9                <1>     loop .vConDelTab
   729 0000143D E9AFFFFFFF          <1>     jmp .normalChar
   730                              <1> .vConErase:
   731                              <1> ;Erase the char on the vCon
   732                              <1> ;Return through the output function
   733 00001442 48FFCF              <1>     dec rdi ;Go back a space in the 
   734 00001445 FECE                <1>     dec dh  ;Decrement char count in the buffer
   735                              <1> .vConEraseNoDec:
   736 00001447 B008                <1>     mov al, BSP ;Move cursor back
   737 00001449 E824FAFFFF          <1>     call charOut_B.in
   738 0000144E B020                <1>     mov al, SPC ;Replace with a space
   739 00001450 E81DFAFFFF          <1>     call charOut_B.in
   740 00001455 B008                <1>     mov al, BSP ;Move cursor back again
   741 00001457 E916FAFFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   742                              <1> .escape:
   743                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   744                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   745                              <1> ; including the function keys.
   746 0000145C FF25F7EBFFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   747                              <1> .f2:
   748 00001462 E846000000          <1>     call .fCommon2
   749 00001467 EB0C                <1>     jmp short .fCommon
   750                              <1> .f3:
   751 00001469 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   752 0000146C 28F9                <1>     sub cl, bh  ;Sub our current position
   753 0000146E EB05                <1>     jmp short .fCommon
   754                              <1> .f1:
   755 00001470 B901000000          <1>     mov ecx, 1  ;Get one char
   756                              <1> .fCommon:
   757 00001475 C605(82C50300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   758 0000147C 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   759 0000147E 0F849DFEFFFF        <1>     je .mainLoop2
   760 00001484 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   761 00001486 0F8495FEFFFF        <1>     je .mainLoop2
   762                              <1>     ;Else, copy byte by byte, and retain char in al
   763 0000148C AC                  <1>     lodsb
   764 0000148D AA                  <1>     stosb
   765 0000148E E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   766 00001493 FEC7                <1>     inc bh
   767 00001495 FEC6                <1>     inc dh
   768 00001497 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   769 00001499 E983FEFFFF          <1>     jmp .mainLoop2
   770                              <1> .f4:
   771 0000149E E80A000000          <1>     call .fCommon2
   772 000014A3 4801CE              <1>     add rsi, rcx
   773 000014A6 00CF                <1>     add bh, cl
   774 000014A8 E974FEFFFF          <1>     jmp .mainLoop2
   775                              <1> .fCommon2:
   776 000014AD E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   777 000014B2 3A05A9EBFFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   778 000014B8 750B                <1>     jne .fnotEscape
   779                              <1>     ;Get another char if they typed escape and force it in the buffer
   780                              <1>     ; Do not return to caller
   781 000014BA E80FFBFFFF          <1>     call charIn_B
   782                              <1> .fforceExit:
   783 000014BF 59                  <1>     pop rcx ;Get original return address from stack
   784 000014C0 E95CFEFFFF          <1>     jmp .mainLoop2
   785                              <1> .fnotEscape:
   786 000014C5 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   787 000014C8 28F9                <1>     sub cl, bh
   788 000014CA 74F3                <1>     jz .fforceExit
   789 000014CC FFC9                <1>     dec ecx
   790 000014CE 74EF                <1>     jz .fforceExit
   791 000014D0 57                  <1>     push rdi
   792 000014D1 4889F7              <1>     mov rdi, rsi
   793 000014D4 48FFC7              <1>     inc rdi
   794 000014D7 F2AE                <1>     repne scasb ;Search for the char to start printing from
   795 000014D9 5F                  <1>     pop rdi
   796 000014DA 75E3                <1>     jne .fforceExit ;If char not found, return
   797 000014DC F6D1                <1>     not cl
   798 000014DE 00D9                <1>     add cl, bl
   799 000014E0 28F9                <1>     sub cl, bh
   800                              <1>     return
    18                              <2> %%_ret:
    19 000014E2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   801                              <1> .f5:
   802 000014E3 B040                <1>     mov al, "@"
   803 000014E5 E888F9FFFF          <1>     call charOut_B.in   ;Print the char
   804 000014EA 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   805 000014EB 57                  <1>     push rdi
   806 000014EC E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   807 000014F1 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   808 000014F2 88F3                <1>     mov bl, dh
   809 000014F4 E99CFEFFFF          <1>     jmp .breakAlt
   810                              <1> .f6:
   811                              <1> ;If the user wants to insert a EOF, they can use F6
   812 000014F9 B01A                <1>     mov al, EOF
   813 000014FB E964FEFFFF          <1>     jmp .checkIfCanInsert
   814                              <1> .f7:
   815                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   816 00001500 8A055BEBFFFF        <1>     mov al, byte [extESC]
   817 00001506 E959FEFFFF          <1>     jmp .checkIfCanInsert
   818                              <1> .toggleIns:
   819 0000150B F615(82C50300)      <1>     not byte [vConInsert]   ;Toggle
   820                              <1>     return
    18                              <2> %%_ret:
    19 00001511 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   821                              <1> .eDel:
   822 00001512 38DF                <1>     cmp bh, bl
   823 00001514 0F8407FEFFFF        <1>     je .mainLoop2
   824 0000151A FEC7                <1>     inc bh
   825 0000151C 48FFC6              <1>     inc rsi
   826 0000151F E9FDFDFFFF          <1>     jmp .mainLoop2
   827                              <1> 
   828                              <1> editKeys:
   829                              <1> ;Our Default Extended keys handler
   830 00001524 E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   831 00001529 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   832 0000152E 57                  <1>     push rdi    ;Preserve rdi
   833 0000152F 488D3D2DEBFFFF      <1>     lea rdi, extKeyTbl
   834 00001536 57                  <1>     push rdi
   835                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   836                              <1>     ; offset of function from extKeyTbl
   837                              <1> .lp:
   838 00001537 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   839 00001538 7411                <1>     je .charFound
   840 0000153A FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   841 0000153C 0F84DFFDFFFF        <1>     jz buffCharInput_BE.mainLoop2
   842 00001542 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   843 00001549 EBEC                <1>     jmp short .lp
   844                              <1> .charFound:
   845 0000154B 59                  <1>     pop rcx ;Pop back the effective address of the table
   846 0000154C 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   847 00001550 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   848 00001553 5F                  <1>     pop rdi
   849 00001554 FFE1                <1>     jmp rcx
    26                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    27                              <1> ;Major kernel date time functions and subroutines
    28                              <1> 
    29                              <1> getDate:           ;ah = 2Ah
    30 00001556 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
    31 0000155B E848130000          <1>     call getUserRegs
    32 00001560 668B15(ECC30300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
    33                              <1> ;    mov dh, byte [monthOfYear]
    34 00001567 0FB60D(EEC30300)    <1>     movzx ecx, byte [years]
    35 0000156E 8A05(F1C30300)      <1>     mov al, byte [dayOfWeek]
    36 00001574 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    37 00001578 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    38                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 0000157C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    39                              <1> setDate:           ;ah = 2Bh
    40                              <1> ;	CX = year (1980-2099)
    41                              <1> ;   DH = month (1-12)
    42                              <1> ;	DL = day (1-31)
    43 0000157D E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    44                              <1>     return
    18                              <2> %%_ret:
    19 00001582 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    45                              <1> getTime:           ;ah = 2Ch
    46 00001583 E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    47 00001588 E81B130000          <1>     call getUserRegs
    48 0000158D 668B0D(77C50300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.hours]
    49 00001594 668B15(78C50300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    50 0000159B 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    51 0000159F 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    52                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 000015A3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    53                              <1> setTime:           ;ah = 2Dh
    54                              <1> ;   CH = hour (0-23)
    55                              <1> ;	CL = minutes (0-59)
    56                              <1> ;	DH = seconds (0-59)
    57                              <1> ;	DL = hundredths (0-99)
    58 000015A4 80FD17              <1>     cmp ch, 23
    59 000015A7 7749                <1>     ja .exitBad
    60 000015A9 80F93B              <1>     cmp cl, 59
    61 000015AC 7744                <1>     ja .exitBad
    62 000015AE 80FE3B              <1>     cmp dh, 59
    63 000015B1 773F                <1>     ja .exitBad
    64 000015B3 80FA63              <1>     cmp dl, 99
    65 000015B6 773A                <1>     ja .exitBad
    66                              <1> ;Now we read date (updating internal count if necessary)
    67 000015B8 E817010000          <1>     call readDateTimeRecord
    68 000015BD 488D1D(74C50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    69 000015C4 0FB705(EFC30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    70 000015CB 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    71 000015CE 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    72 000015D2 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    73 000015D6 B906000000          <1>     mov ecx, 6
    74 000015DB 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    75 000015DE E87B110000          <1>     call primReqWriteSetup   ;rbx now points to request header
    76 000015E3 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    77 000015EA E8FB0E0000          <1>     call goDriver
    78 000015EF 30C0                <1>     xor al, al
    79                              <1>     return
    18                              <2> %%_ret:
    19 000015F1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    80                              <1> .exitBad:
    81 000015F2 B0FF                <1>     mov al, -1
    82                              <1>     return
    18                              <2> %%_ret:
    19 000015F4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    83                              <1> ;------------------------
    84                              <1> ;   Utility functions   :
    85                              <1> ;------------------------
    86                              <1> writeDate:
    87 000015F5 6681F97800          <1>     cmp cx, 120
    88 000015FA 0F83D1000000        <1>     jae .exitBad
    89 00001600 80FE0C              <1>     cmp dh, 12
    90 00001603 0F87C8000000        <1>     ja .exitBad
    91 00001609 80FA1F              <1>     cmp dl, 31
    92 0000160C 0F87BF000000        <1>     ja .exitBad
    93 00001612 668915(ECC30300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    94                              <1>     ;mov byte [monthOfYear], dh
    95 00001619 880D(EEC30300)      <1>     mov byte [years], cl    ;Save the years count
    96 0000161F E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    97 00001624 88CD                <1>     mov ch, cl ;Get years count in ch
    98 00001626 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
    99 00001629 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
   100 0000162C 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
   101 0000162F BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
   102 00001634 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
   103                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
   104 00001636 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
   105 00001639 67E316              <1>     jecxz .addDay    ;Skip adding years
   106 0000163C 056E010000          <1>     add eax, 366    ;First add for a leap year
   107                              <1> .addYears:
   108 00001641 FFC9                <1>     dec ecx
   109 00001643 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
   110 00001646 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   111 0000164B EBF4                <1>     jmp short .addYears
   112                              <1> .addLeap:
   113 0000164D 056E010000          <1>     add eax, 366    ;Add the days in the leap year
   114                              <1> .addDay:
   115 00001652 89C2                <1>     mov edx, eax    ;Save this number in edx
   116                              <1>     ;Now to add day offset
   117 00001654 0FB60D(EDC30300)    <1>     movzx ecx, byte [monthOfYear]
   118 0000165B 488D3522EAFFFF      <1>     lea rsi, monthsTbl
   119                              <1> .addDaysInMonth:
   120 00001662 FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   121 00001664 67E308              <1>     jecxz .addMonthOffset
   122 00001667 AC                  <1>     lodsb   ;Get the number of days in the month in al
   123 00001668 0FB6C0              <1>     movzx eax, al
   124 0000166B 01C2                <1>     add edx, eax
   125 0000166D EBF3                <1>     jmp short .addDaysInMonth
   126                              <1> .addMonthOffset:
   127 0000166F 0FB60D(ECC30300)    <1>     movzx ecx, byte [dayOfMonth]
   128 00001676 FFC9                <1>     dec ecx
   129 00001678 01CA                <1>     add edx, ecx    ;Add month offset
   130                              <1>     ;edx has the number of days since 01/01/1980
   131 0000167A 668915(EFC30300)    <1>     mov word [daysOffset], dx   ;Store!
   132                              <1> ;Now read and then write CLOCKrecrd
   133 00001681 488D1D(74C50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   134 00001688 B906000000          <1>     mov ecx, 6
   135 0000168D 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   136 00001690 E8D4100000          <1>     call primReqReadSetup   ;rbx now points to request header
   137 00001695 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   138 0000169C E8490E0000          <1>     call goDriver
   139                              <1> ;Now we change daycount and write it back
   140 000016A1 0FB705(EFC30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   141 000016A8 488D1D(74C50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   142 000016AF 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   143 000016B2 B906000000          <1>     mov ecx, 6
   144 000016B7 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   145 000016BA E89F100000          <1>     call primReqWriteSetup   ;rbx now points to request header
   146 000016BF 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   147 000016C6 E81F0E0000          <1>     call goDriver
   148 000016CB E8AE000000          <1>     call setDayofWeek
   149                              <1>     return
    18                              <2> %%_ret:
    19 000016D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   150                              <1> .exitBad:
   151 000016D1 B0FF                <1>     mov al, -1
   152                              <1>     return
    18                              <2> %%_ret:
    19 000016D3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   153                              <1> 
   154                              <1> readDateTimeRecord:
   155                              <1> ;Will read the clock using the primary request header
   156                              <1> ;Preserves all regs except eax and flags
   157 000016D4 53                  <1>     push rbx
   158 000016D5 51                  <1>     push rcx
   159 000016D6 52                  <1>     push rdx
   160 000016D7 56                  <1>     push rsi
   161 000016D8 55                  <1>     push rbp
   162                              <1> 
   163 000016D9 66C705(8BD80300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   163 000016E1 00                  <1>
   164 000016E2 488D1D(74C50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   165 000016E9 B906000000          <1>     mov ecx, 6
   166 000016EE 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   167                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   168                              <1> ; rbx = Data storage buffer ptr
   169                              <1> ; ecx = Number of sectors to transfer
   170                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   171 000016F1 E873100000          <1>     call primReqReadSetup   ;rbx now points to request header
   172 000016F6 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   173 000016FD E8E80D0000          <1>     call goDriver
   174 00001702 0FB705(74C50300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   175                              <1> ;Here we have:  ax = Days since 1/1/1980
   176                              <1> ;Updates the internal date fields
   177                              <1> ;Internal time fields are in the clock record
   178                              <1> ;So now we check if the number of days since 1980 are the same.
   179                              <1> ;If so, we can skip updating.
   180 00001709 663B05(EFC30300)    <1>     cmp ax, word [daysOffset]
   181 00001710 7466                <1>     je .exit    ;Return if equal
   182 00001712 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   183 00001717 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   184 00001719 668905(EFC30300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   185                              <1>     ;Now want to update years, month and day fields
   186                              <1>     ;ax has the number of days since 01/01/1980
   187                              <1>     ;Get days in a 4 year period
   188 00001720 BBB5050000          <1>     mov ebx, 365*4 + 1
   189 00001725 31D2                <1>     xor edx, edx
   190 00001727 89D1                <1>     mov ecx, edx  ;Zero ecx
   191 00001729 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   192                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   193                              <1>     ;edx has offset into current 4 year bunch
   194 0000172B BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   195 00001730 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   196 00001732 7210                <1>     jb .foundBunch
   197 00001734 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   198 00001736 FFC1                <1>     inc ecx
   199 00001738 FFCB                <1>     dec ebx ;Number of days in a normal year
   200                              <1> .findBunch:
   201 0000173A 39DA                <1>     cmp edx, ebx
   202 0000173C 7206                <1>     jb .foundBunch
   203 0000173E 29DA                <1>     sub edx, ebx
   204 00001740 FFC1                <1>     inc ecx
   205 00001742 EBF6                <1>     jmp short .findBunch
   206                              <1> .foundBunch:
   207                              <1>     ;If ecx = 0, february has 29 days!
   208                              <1>     ;eax has number of four year bunches elapsed since 1980
   209 00001744 C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   210 00001747 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   211                              <1>     ;ecx now has the number of years since 1980
   212 00001749 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   213                              <1> ;edx has number of days into the year we are in
   214                              <1> ;eax has number of days in Feb for this year
   215 0000174E 488D352FE9FFFF      <1>     lea rsi, monthsTbl
   216 00001755 31C9                <1>     xor ecx, ecx    ;Use as month counter
   217                              <1> .monthSearch:
   218 00001757 FFC1                <1>     inc ecx ;Start from 1
   219 00001759 AC                  <1>     lodsb   ;Get value in al and inc rsi
   220 0000175A 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   221 0000175D 39C2                <1>     cmp edx, eax
   222 0000175F 7204                <1>     jb .monthFound
   223 00001761 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   224 00001763 EBF2                <1>     jmp short .monthSearch
   225                              <1> .monthFound:
   226                              <1>     ;cl has the month (01h-0Ch)
   227                              <1>     ;dl has the day of the month - 1
   228 00001765 FFC2                <1>     inc edx
   229 00001767 880D(EDC30300)      <1>     mov byte [monthOfYear], cl
   230 0000176D 8815(ECC30300)      <1>     mov byte [dayOfMonth], dl
   231 00001773 E806000000          <1>     call setDayofWeek
   232                              <1> .exit:
   233 00001778 5D                  <1>     pop rbp
   234 00001779 5E                  <1>     pop rsi
   235 0000177A 5A                  <1>     pop rdx
   236 0000177B 59                  <1>     pop rcx
   237 0000177C 5B                  <1>     pop rbx
   238                              <1>     return  ;Return with ZF is date set, or same day
    18                              <2> %%_ret:
    19 0000177D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> setDayofWeek:
   241                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   242 0000177E 0FB705(EFC30300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   243 00001785 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   244                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   245 0000178A 31D2                <1>     xor edx, edx
   246 0000178C B907000000          <1>     mov ecx, 7   
   247 00001791 F7F1                <1>     div ecx  ;Get remainder in dl
   248 00001793 8815(F1C30300)      <1>     mov byte [dayOfWeek], dl
   249                              <1> ;Set ZF to indicate all ok
   250 00001799 31C0                <1>     xor eax, eax
   251                              <1>     return
    18                              <2> %%_ret:
    19 0000179B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   252                              <1> 
   253                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   254                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   255                              <1> ;Input: cl = Year - 1980
   256                              <1> ;Output: al = Number of days in February
   257 0000179C 880D(EEC30300)      <1>     mov byte [years], cl    ;Save this figure
   258 000017A2 F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   259 000017A5 51                  <1>     push rcx
   260 000017A6 57                  <1>     push rdi
   261 000017A7 B81C000000          <1>     mov eax, 28  ;Usual days in february
   262 000017AC B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   263 000017B1 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   264 000017B4 488D3DCAE8FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   265 000017BB AA                  <1>     stosb   ;Store the word in rdi
   266 000017BC 5F                  <1>     pop rdi
   267 000017BD 59                  <1>     pop rcx
   268                              <1>     return
    18                              <2> %%_ret:
    19 000017BE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    27                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    28                              <1> openFileFCB:       ;ah = 0Fh
    29                              <1> closeFileFCB:      ;ah = 10h
    30                              <1> findFirstFileFCB:  ;ah = 11h
    31                              <1> findNextFileFCB:   ;ah = 12h
    32                              <1> deleteFileFCB:     ;ah = 13h
    33                              <1> sequentialReadFCB: ;ah = 14h
    34                              <1> sequentialWriteFCB:;ah = 15h
    35                              <1> createFileFCB:     ;ah = 16h
    36                              <1> renameFileFCB:     ;ah = 17h
    37 000017BF C3                  <1>     ret
    38                              <1> setDTA:            ;ah = 1Ah
    39                              <1> ;Called with:
    40                              <1> ;   rdx = Pointer to the new default DTA
    41 000017C0 488B1D(DAC30300)    <1>     mov rbx, qword [oldRSP]
    42 000017C7 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    43 000017CB 488915(7AC30300)    <1>     mov qword [currentDTA], rdx
    44 000017D2 C3                  <1>     ret
    45                              <1> randomReadFCB:     ;ah = 21h
    46                              <1> randomWriteFCB:    ;ah = 22h
    47                              <1> getFileSizeFCB:    ;ah = 23h
    48                              <1> setRelRecordFCB:   ;ah = 24h
    49                              <1> randBlockReadFCB:  ;ah = 27h
    50                              <1> randBlockWriteFCB: ;ah = 28h
    51                              <1> parseFilenameFCB:  ;ah = 29h
    52 000017D3 C3                  <1>     ret
    53                              <1> getDTA:            ;ah = 2Fh
    54 000017D4 488B15(DAC30300)    <1>     mov rdx, qword [oldRSP]
    55 000017DB 488B1D(7AC30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    56 000017E2 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    57 000017E6 C3                  <1>     ret
    28                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    29                              <1> ;-----------------------------------:
    30                              <1> ;    File Handle Kernel routines    :
    31                              <1> ;-----------------------------------:
    32                              <1> 
    33                              <1> createFileHdl:     ;ah = 3Ch, handle function
    34                              <1>     return 
    18                              <2> %%_ret:
    19 000017E7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    35                              <1> openFileHdl:       ;ah = 3Dh, handle function
    36                              <1>     return 
    18                              <2> %%_ret:
    19 000017E8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    37                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    38                              <1>     return 
    18                              <2> %%_ret:
    19 000017E9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    39                              <1> readFileHdl:       ;ah = 3Fh, handle function
    40 000017EA 488D35B2000000      <1>     lea rsi, readBytes
    41                              <1> .common:
    42 000017F1 E8C9030000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
    43 000017F6 0F828C130000        <1>     jc extErrExit   ;Error code in al and exit
    44 000017FC E8B1020000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
    45 00001801 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
    46 00001803 FF35(7AC30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
    47 00001809 488915(7AC30300)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
    48 00001810 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
    49 00001812 8F05(7AC30300)      <1>     pop qword [currentDTA]
    50 00001818 0F826A130000        <1>     jc extErrExit   ;Error code in al and exit
    51 0000181E E885100000          <1>     call getUserRegs
    52 00001823 890E                <1>     mov dword [rsi + callerFrame.rax], ecx  ;Put actual number of bytes tfrd
    53 00001825 806658FE            <1>     and byte [rsi + callerFrame.flags], 0FEh    ;Clear CF
    54                              <1>     return 
    18                              <2> %%_ret:
    19 00001829 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    55                              <1> writeFileHdl:      ;ah = 40h, handle function
    56 0000182A 488D354D020000      <1>     lea rsi, writeBytes
    57 00001831 E9BBFFFFFF          <1>     jmp readFileHdl.common
    58                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    59                              <1>     return 
    18                              <2> %%_ret:
    19 00001836 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    60                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
    61                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
    62 00001837 E883030000          <1>     call getSFTPtr
    63 0000183C 7305                <1>     jnc .sftValid
    64                              <1>     ;al (eax) has error code for bad file handle
    65 0000183E E945130000          <1>     jmp extErrExit ;Error code and exit
    66                              <1> .sftValid:
    67 00001843 3C03                <1>     cmp al, 3
    68 00001845 720A                <1>     jb .validFunction
    69 00001847 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
    70 0000184C E937130000          <1>     jmp extErrExit
    71                              <1> .validFunction:
    72 00001851 3C01                <1>     cmp al, 1
    73 00001853 7713                <1>     ja .seekend
    74 00001855 7203                <1>     jb .seekset
    75                              <1> ;Here we are at seekcur, seek from current (signed)
    76 00001857 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
    77                              <1> .seekset:
    78                              <1> ;Seek from the start (unsigned)
    79 0000185A 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
    80 0000185D E846100000          <1>     call getUserRegs    ;Get user regs in rsi
    81 00001862 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
    82                              <1> .seekExit:
    83 00001865 30C0                <1>     xor al, al  ;Return OK!
    84                              <1>     return 
    18                              <2> %%_ret:
    19 00001867 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    85                              <1> .seekend:
    86                              <1> ;Here we are at seekend, seek from end (signed)
    87 00001868 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
    88 0000186E 7505                <1>     jnz .netCheck
    89                              <1> .proceedDisk:
    90 00001870 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
    91 00001873 EBE5                <1>     jmp short .seekset
    92                              <1> .netCheck:
    93 00001875 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
    94 0000187B 75F3                <1>     jnz .proceedDisk
    95 0000187D 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
    96                              <1>     ;Check it's share mode
    97 00001881 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
    98 00001886 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
    99 0000188B 7407                <1>     je .netSeek
   100 0000188D 3D30000000          <1>     cmp eax, denyReadShare
   101 00001892 75DC                <1>     jne .proceedDisk
   102                              <1> .netSeek:
   103 00001894 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   104 00001899 CD4F                <1>     int 4fh
   105 0000189B 73C8                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   106 0000189D E9E6120000          <1>     jmp extErrExit
   107                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   108                              <1> ioctrl:            ;ah = 44h, handle function
   109                              <1> duplicateHandle:   ;ah = 45h, handle function
   110                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   111                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   112                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   113                              <1> renameFile:        ;ah = 56h
   114                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   115                              <1> createNewFile:     ;ah = 5Bh
   116                              <1> lockUnlockFile:    ;ah = 5Ch
   117                              <1> setHandleCount:    ;ah = 67h
   118                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   119                              <1>     return 
    18                              <2> %%_ret:
    19 000018A2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   120                              <1> ;-----------------------------------:
   121                              <1> ;       Main File IO Routines       :
   122                              <1> ;-----------------------------------:
   123                              <1> readBytes:
   124                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
   125                              <1> ;Input: ecx = Number of bytes to read
   126                              <1> ;Output: ecx = Number of bytes read
   127                              <1> ;Number of bytes read 
   128                              <1> ;If CF=CY, return with error code in ax
   129 000018A3 E812020000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   130 000018A8 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   131 000018AC 240F                <1>     and al, 0Fh ;Eliminate except access mode
   132 000018AE 3C01                <1>     cmp al, WriteAccess
   133 000018B0 7509                <1>     jne .readable
   134 000018B2 B805000000          <1>     mov eax, errAccDen
   135 000018B7 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
   136 000018B9 F9                  <1>     stc
   137                              <1>     return
    18                              <2> %%_ret:
    19 000018BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   138                              <1> .readable:
   139 000018BB E83B020000          <1>     call setupVarsForTransfer
   140 000018C0 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
   141 000018C3 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   142 000018C9 740A                <1>     jz .notRedir
   143 000018CB B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
   144 000018D0 CD4F                <1>     int 4fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
   145                              <1>     return 
    18                              <2> %%_ret:
    19 000018D2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   146                              <1> .exitOk:
   147 000018D3 F8                  <1>     clc
   148                              <1>     return 
    18                              <2> %%_ret:
    19 000018D4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   149                              <1> .notRedir:
   150 000018D5 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   151 000018DB 7510                <1>     jnz readCharDev
   152 000018DD E87E120000          <1>     call dosCrit1Enter
   153 000018E2 E890010000          <1>     call readDiskFile
   154 000018E7 E87E120000          <1>     call dosCrit1Exit
   155                              <1>     return 
    18                              <2> %%_ret:
    19 000018EC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   156                              <1> readCharDev:
   157                              <1> ;rdi points to sft for char dev to read
   158                              <1> ;ecx has the number of bytes to transfer
   159                              <1> ;Vars have been set up and DTA has the transfer address
   160                              <1> ;Returns in ecx, the actual bytes transferred
   161                              <1> ;If CF=CY, return with error code in ax
   162 000018ED C605(6DC30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
   163 000018F4 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
   164 000018F8 488B3D(7AC30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
   165 000018FF F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
   166 00001902 0F8493010000        <1>     jz rwExitOk    ;If it does, jump to exit as if EOF has been hit
   167 00001908 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
   168 0000190B 7407                <1>     jz .notNul
   169                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
   170                              <1>     ;NUL never transfers bytes 
   171 0000190D 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
   172 0000190F E987010000          <1>     jmp rwExitOk    ;Goto exit
   173                              <1> .notNul:
   174 00001914 F6C320              <1>     test bl, charDevBinary
   175 00001917 757F                <1>     jnz .binary
   176                              <1>     ;Here if the device is in ASCII mode
   177 00001919 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
   178 0000191C 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
   179                              <1> .consoleInput:
   180                              <1>     ;Console input here
   181 00001922 E899F9FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
   182                              <1>     ;Get current offset into buffer (if one exists)
   183 00001927 488B35(23C00300)    <1>     mov rsi, qword [vConHdlOff]
   184 0000192E 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
   185 00001931 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
   186 00001933 803D(B1C20300)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
   187 0000193A 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
   188                              <1>     ;Else, reset the buffer
   189 0000193C 66C705(B1C20300)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
   189 00001944 FF                  <1>
   190                              <1> .oldBuf:
   191                              <1> ;Preserve the dta and number of chars to tfr
   192 00001945 51                  <1>     push rcx
   193 00001946 57                  <1>     push rdi
   194 00001947 488D15(B1C20300)    <1>     lea rdx, vConInBuf
   195 0000194E E88DF9FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
   196 00001953 5F                  <1>     pop rdi
   197 00001954 59                  <1>     pop rcx
   198 00001955 488D35(B3C20300)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
   199 0000195C 803E1A              <1>     cmp byte [rsi], EOF
   200 0000195F 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
   201 00001961 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
   202 00001964 B00A                <1>     mov al, LF
   203 00001966 E807F5FFFF          <1>     call charOut_B.in   ;Echo CRLF
   204 0000196B 31F6                <1>     xor esi, esi    ;Set ZF = ZE
   205 0000196D EB18                <1>     jmp short .exit
   206                              <1> .tfrBuf:
   207 0000196F AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
   208 00001970 AA                  <1>     stosb
   209 00001971 3C0D                <1>     cmp al, CR 
   210 00001973 7503                <1>     jne .noCRLF
   211 00001975 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
   212                              <1> .noCRLF:
   213 00001978 3C0A                <1>     cmp al, LF  ;Compare if al is LF
   214 0000197A E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
   215 0000197C 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
   216                              <1>     ;This only applies if the reason for exiting the loop is al=LF
   217 0000197E E8EFF4FFFF          <1>     call charOut_B.in   ;Echo CRLF
   218 00001983 31F6                <1>     xor esi, esi
   219 00001985 0C01                <1>     or al, 1    ;Set ZF = NZ
   220                              <1> .exit:
   221 00001987 E84CF9FFFF          <1>     call vConRetDriver
   222 0000198C 488935(23C00300)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
   223 00001993 E903010000          <1>     jmp rwExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
   224                              <1> 
   225                              <1> .binary:
   226                              <1>     ;Setup registers for transfer
   227 00001998 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
   228 0000199B 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
   229                              <1>     ;ecx has the number of bytes to transfer directly
   230 0000199E E8C60D0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
   231 000019A3 488B35(85C50300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
   232 000019AA E83B0B0000          <1>     call goDriver   ;Make the request
   233 000019AF 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
   234 000019B2 0FB73D(22C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   235 000019B9 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   236 000019BF 7422                <1>     jz .binNoError
   237                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
   238 000019C1 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
   239 000019C3 E8F7090000          <1>     call charDevErr   ;ah = has part of the error 
   240                              <1>     ;al now has the response
   241 000019C8 3C00                <1>     cmp al, critIgnore
   242 000019CA 7417                <1>     je .binNoError ;Simply proceed as normal
   243 000019CC 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
   244 000019CF 3C03                <1>     cmp al, critFail
   245 000019D1 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
   246                              <1>     ;Fallthrough here for fail!
   247                              <1> .failExit:
   248 000019D3 488B3D(00C60300)    <1>     mov rdi, qword [currentSFT]
   249 000019DA 31C9                <1>     xor ecx, ecx
   250 000019DC B805000000          <1>     mov eax, errAccDen
   251 000019E1 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
   252                              <1>     return
    18                              <2> %%_ret:
    19 000019E2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   253                              <1> .binNoError:
   254                              <1>     ;Get number of bytes transferred into 
   255 000019E3 8B05(35C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
   256 000019E9 F7D8                <1>     neg eax ;make it into -eax
   257 000019EB 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
   258                              <1>     ;ecx now has bytes left to transfer
   259 000019EF 50                  <1>     push rax    ;Save value on stack
   260 000019F0 31C0                <1>     xor eax, eax ;Set ZF
   261 000019F2 FFC0                <1>     inc eax ;Clear ZF
   262 000019F4 58                  <1>     pop rax ;Get back the original value
   263 000019F5 E9A1000000          <1>     jmp rwExitOk    ;GoExit with ecx=Bytes left to read
   264                              <1> .generalASCII:
   265                              <1>     ;ecx has bytes to transfer here
   266                              <1>     ;Setup registers for transfer
   267 000019FA 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
   268 000019FD 51                  <1>     push rcx
   269 000019FE B901000000          <1>     mov ecx, 1  ;Get one char
   270 00001A03 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
   271 00001A06 E85E0D0000          <1>     call primReqReadSetup   ;Setup request
   272 00001A0B 59                  <1>     pop rcx
   273                              <1>     ;rbx now has request header ptr
   274 00001A0C 488B35(85C50300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
   275                              <1> .asciiReadChar:
   276 00001A13 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
   277 00001A16 E829F8FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
   278 00001A1B E8CA0A0000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
   279 00001A20 0FB73D(22C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   280 00001A27 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   281 00001A2D 741E                <1>     jz .asciiNoError
   282 00001A2F E88B090000          <1>     call charDevErr    ;Call Int 44h
   283                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
   284 00001A34 C705(35C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
   284 00001A3C 0000                <1>
   285 00001A3E 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   286 00001A41 3C03                <1>     cmp al, critFail
   287 00001A43 748E                <1>     je .failExit
   288 00001A45 3C01                <1>     cmp al, critRetry
   289 00001A47 74CA                <1>     je .asciiReadChar
   290                              <1>     ;Ignore here, pretend NULL CHAR was read
   291 00001A49 30C0                <1>     xor al, al
   292 00001A4B EB11                <1>     jmp short .asciiIgnoreEP
   293                              <1> .asciiNoError:
   294                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
   295                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
   296                              <1> ;Preserve RBX, RSI
   297                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
   298 00001A4D 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   299 00001A50 813D(35C40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
   299 00001A58 0000                <1>
   300 00001A5A 753F                <1>     jne rwExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
   301 00001A5C 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
   302                              <1> .asciiIgnoreEP:
   303 00001A5E 48FF05(2DC40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
   304 00001A65 48FFC7              <1>     inc rdi ;Also advance register pointer
   305 00001A68 3C1A                <1>     cmp al, EOF ;Was this char EOF?
   306 00001A6A 742F                <1>     je rwExitOk
   307 00001A6C 3C0D                <1>     cmp al, CR  ;Was this char CR?
   308 00001A6E E0A3                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
   309                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
   310 00001A70 FEC0                <1>     inc al  ;make ZF=NZ
   311 00001A72 E924000000          <1>     jmp rwExitOk    ;Called with ecx = Number of bytes LEFT to transfer
   312                              <1> 
   313                              <1> readDiskFile:
   314 00001A77 C605(6DC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
   315                              <1>     ;We have the following vars setup:
   316                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
   317                              <1>     ;currClustF
   318                              <1>     ;Now convert currSectC to disk sector by using currClustF
   319                              <1> 
   320                              <1> 
   321                              <1> writeBytes:
   322                              <1> ;Writes the bytes from the user buffer
   323 00001A7E E837000000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   324 00001A83 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   325 00001A87 240F                <1>     and al, 0Fh ;Eliminate except access mode
   326 00001A89 3C00                <1>     cmp al, ReadAccess
   327 00001A8B 7509                <1>     jne .writeable
   328 00001A8D B805000000          <1>     mov eax, errAccDen
   329 00001A92 31C9                <1>     xor ecx, ecx
   330 00001A94 F9                  <1>     stc
   331 00001A95 C3                  <1>     ret
   332                              <1> .writeable:
   333 00001A96 E860000000          <1>     call setupVarsForTransfer
   334                              <1> 
   335                              <1> rwExitOk:
   336                              <1> ;Input: ecx = Number of bytes left to transfer!
   337                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
   338 00001A9B 890D(48C60300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
   339 00001AA1 7509                <1>     jnz .skipbitClear
   340 00001AA3 E812000000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
   341                              <1>     ;The disk transfer must've flushed by now. 
   342 00001AA8 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokDevNotFlush|charDevNoEOF) ;OR
   343                              <1>     ;Next char dev read should give EOF.
   344                              <1> .skipbitClear:  ;Or skip that entirely
   345 00001AAC E811000000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
   346                              <1>     return 
    18                              <2> %%_ret:
    19 00001AB1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   347                              <1> rwExitBad:
   348                              <1> ;-----------------------------------:
   349                              <1> ;        File Handle routines       :
   350                              <1> ;-----------------------------------:
   351                              <1> 
   352                              <1> setCurrentSFT:
   353                              <1> ;Set the pointer in rdi as current SFT 
   354 00001AB2 48893D(00C60300)    <1>     mov qword [currentSFT], rdi
   355                              <1>     return 
    18                              <2> %%_ret:
    19 00001AB9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   356                              <1> getCurrentSFT:
   357                              <1> ;Get the current SFT pointer in rdi
   358 00001ABA 488B3D(00C60300)    <1>     mov rdi, qword [currentSFT]
   359                              <1>     return 
    18                              <2> %%_ret:
    19 00001AC1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   360                              <1> updateCurrentSFT:
   361                              <1> ;Updates the Current SFT fields before returning from a file handle operation
   362                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
   363 00001AC2 57                  <1>     push rdi
   364 00001AC3 488B3D(00C60300)    <1>     mov rdi, qword [currentSFT]
   365 00001ACA 8B0D(44C60300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
   366 00001AD0 2B0D(48C60300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
   367                              <1>     ;ecx has bytes transferred
   368 00001AD6 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
   369 00001ADC 751A                <1>     jnz .exit
   370 00001ADE 50                  <1>     push rax
   371 00001ADF 8B05(20C60300)      <1>     mov eax, dword [currClustD]
   372 00001AE5 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
   373 00001AE8 8B05(1CC60300)      <1>     mov eax, dword [currClustF]
   374 00001AEE 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
   375 00001AF1 58                  <1>     pop rax
   376 00001AF2 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
   377 00001AF5 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
   378                              <1> .exit:
   379 00001AF8 5F                  <1>     pop rdi
   380 00001AF9 F8                  <1>     clc
   381                              <1>     return 
    18                              <2> %%_ret:
    19 00001AFA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   382                              <1> setupVarsForTransfer:
   383                              <1> ;Computes the actual bytes to be transferred and 
   384                              <1> ; sets up internal variables for the transfer. 
   385                              <1> ;Works for both reading and writing
   386                              <1> ;Input: ecx = User desired Bytes to transfer
   387                              <1> ;       rdi = SFT pointer for the file
   388                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   389                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
   390                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
   391                              <1> ;
   392                              <1> ;Note: Does not account for a FULL disk. When writing,
   393                              <1> ; if the disk will get full as a result of the write,
   394                              <1> ; stop at the last byte before the transfer. If the 
   395                              <1> ; file pointer is past the last free byte, write 0
   396 00001AFB 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
   397 00001AFF 488935(85C50300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
   398 00001B06 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
   399 00001B09 8905(34C60300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
   400 00001B0F 890D(44C60300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
   401 00001B15 890D(48C60300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
   402 00001B1B 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev ;If not disk...
   403 00001B21 7402                <1>     jz setupVarsForDiskTransfer
   404 00001B23 F8                  <1>     clc
   405                              <1>     return ;Else just exit here
    18                              <2> %%_ret:
    19 00001B24 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   406                              <1> setupVarsForDiskTransfer:
   407                              <1> ;Extension of the above, but for Disk files only
   408                              <1> ;Input: ecx = User desired Bytes to transfer
   409                              <1> ;       rdi = SFT pointer for the file
   410                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   411 00001B25 488B2D(85C50300)    <1>     mov rbp, qword [workingDPB] ;Get the workingDPB (the same as qPtr)
   412 00001B2C 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
   413 00001B2F 881D(84C50300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
   414 00001B35 8B05(34C60300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
   415 00001B3B 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   416 00001B3F 31D2                <1>     xor edx, edx    ;Zero rdx
   417 00001B41 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
   418                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
   419                              <1>     ;edx has the offset into that sector
   420 00001B43 8905(25C60300)      <1>     mov dword [currSectF], eax
   421 00001B49 668915(32C60300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
   422 00001B50 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
   423 00001B52 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
   424 00001B55 8805(29C60300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
   425 00001B5B 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
   426 00001B5D 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   427 00001B60 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
   428 00001B62 8915(1CC60300)      <1>     mov dword [currClustF], edx ;Save in var
   429 00001B68 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in eax
   430 00001B6A F8                  <1>     clc
   431                              <1>     return 
    18                              <2> %%_ret:
    19 00001B6B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   432                              <1> 
   433                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216
   434                              <1> ;Return a pointer to the SFT entry in rdi
   435                              <1> ;Input: rbx = Valid SFT ndx number (word)
   436                              <1> ;Output: rdi = SFT pointer
   437 00001B6C 488B3D(3BC00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
   438                              <1> .walk:
   439 00001B73 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
   440 00001B77 7212                <1>     jb .thisTable
   441 00001B79 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
   442 00001B7D 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
   443 00001B80 4881FFFFFFFFFF      <1>     cmp rdi, -1
   444 00001B87 75EA                <1>     jne .walk
   445 00001B89 F9                  <1>     stc
   446                              <1>     return
    18                              <2> %%_ret:
    19 00001B8A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   447                              <1> .thisTable:
   448 00001B8B 50                  <1>     push rax
   449 00001B8C 52                  <1>     push rdx
   450 00001B8D B84F000000          <1>     mov eax, sft_size
   451 00001B92 F7E3                <1>     mul ebx
   452 00001B94 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
   453 00001B97 5A                  <1>     pop rdx
   454 00001B98 58                  <1>     pop rax
   455 00001B99 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
   456                              <1>     return
    18                              <2> %%_ret:
    19 00001BA0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   457                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
   458                              <1> ;Return a zero extended value in rdi for the SFT entry
   459                              <1> ;Input: bx = JFT handle (we zero extend)
   460                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
   461                              <1> ;        CF=CY => al = Error code, Fail
   462 00001BA1 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
   463 00001BA4 663B1D(98C00300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
   464 00001BAB 7204                <1>     jb .ok
   465 00001BAD B006                <1>     mov al, errBadHdl
   466 00001BAF F9                  <1>     stc
   467                              <1>     return
    18                              <2> %%_ret:
    19 00001BB0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   468                              <1> .ok:
   469 00001BB1 488B3D(82C30300)    <1>     mov rdi, qword [currentPSP]
   470 00001BB8 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
   471 00001BBD F8                  <1>     clc
   472                              <1>     return
    18                              <2> %%_ret:
    19 00001BBE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   473                              <1> 
   474                              <1> getSFTPtr:
   475                              <1> ;This gets the SFT pointer and checks it was opened by this machine
   476                              <1> ;Input: bx = JFT handle
   477                              <1> ;Output: CF=NC: rdi = SFT pointer
   478                              <1> ;        CF=CY: Error, ax=Error code
   479 00001BBF E815000000          <1>     call derefSFTPtr
   480                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001BC4 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   481 00001BC6 50                  <1>     push rax
   482 00001BC7 0FB705(A6C30300)    <1>     movzx eax, word [machineNum]
   483 00001BCE 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
   484 00001BD2 58                  <1>     pop rax
   485                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001BD3 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   486 00001BD5 B006                <1>     mov al, errBadHdl   ;Error code
   487 00001BD7 F9                  <1>     stc         ;Reset CF
   488                              <1>     return
    18                              <2> %%_ret:
    19 00001BD8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   489                              <1> 
   490                              <1> derefSFTPtr:
   491                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
   492                              <1> ;Input: bx = File handle (gets zero extended)
   493                              <1> ;Output: CF=NC: rdi = SFT pointer
   494                              <1> ;        CF=CY: Error, ax=Error code
   495 00001BD9 E8C3FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
   496 00001BDE 7205                <1>     jb .fail
   497 00001BE0 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
   498 00001BE3 7504                <1>     jne .ok
   499                              <1> .fail:
   500 00001BE5 B006                <1>     mov al, errBadHdl
   501 00001BE7 F9                  <1>     stc
   502                              <1>     return
    18                              <2> %%_ret:
    19 00001BE8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   503                              <1> .ok:
   504 00001BE9 53                  <1>     push rbx    ;Preserve the JFT handle
   505 00001BEA 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
   506 00001BED E87AFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
   507 00001BF2 5B                  <1>     pop rbx 
   508                              <1>     return
    18                              <2> %%_ret:
    19 00001BF3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   509                              <1> 
   510                              <1> getBytesTransferred:
   511 00001BF4 8B0D(48C60300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
   512 00001BFA F7D9                <1>     neg ecx ;Multiply by -1
   513 00001BFC 030D(44C60300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
   514                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 00001C02 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   515                              <1> 
   516                              <1> readWriteBytesBinary:
   517                              <1> ;Input: ecx = number of bytes to read in Binary mode
   518                              <1> ;       rdi = Points to where in caller buffer to place bytes
   519                              <1> ;       rsi = Points to where in DOS buffer to place pointer
   520                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
   521                              <1> ;Preserve rcx so we know how many bytes transferred
   522                              <1> ;Update the currByteA variable
   523                              <1> ;Returns (rsi and rdi) + (ecx on entry)
   524 00001C03 51                  <1>     push rcx
   525 00001C04 F605(7CC50300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
   526 00001C0B 7403                <1>     jz .noSwap
   527 00001C0D 4887FE              <1>     xchg rdi, rsi
   528                              <1> .noSwap:
   529 00001C10 F3A4                <1>     rep movsb
   530 00001C12 59                  <1>     pop rcx
   531 00001C13 010D(34C60300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
   532 00001C19 290D(48C60300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
   533                              <1>     return
    18                              <2> %%_ret:
    19 00001C1F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    29                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    30                              <1> ;Memory related functions
    31                              <1> 
    32                              <1> ;-----------------------------------:
    33                              <1> ;  Memory related Kernel routines   :
    34                              <1> ;-----------------------------------:
    35                              <1> allocateMemory:    ;ah = 48h
    36                              <1> ;Input: ebx = Number of paragraphs requested
    37                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    38                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    39 00001C20 31D2                <1>     xor edx, edx
    40                              <1>     ;Clear the pointers
    41 00001C22 488915(A8C30300)    <1>     mov qword [firstMCB], rdx
    42 00001C29 488915(B0C30300)    <1>     mov qword [bestMCB], rdx
    43 00001C30 488915(B8C30300)    <1>     mov qword [lastMCB], rdx
    44 00001C37 31ED                <1>     xor ebp, ebp    
    45 00001C39 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    46 00001C3B 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    47                              <1> .walk:
    48 00001C42 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    49 00001C45 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    50 00001C48 7409                <1>     je .walk1
    51 00001C4A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    52 00001C4D 0F85D9040000        <1>     jne badMCBChain
    53                              <1> .walk1:
    54                              <1>     ;Here if valid but not the last block
    55 00001C53 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    56 00001C5B 0F8582000000        <1>     jne .walk2
    57                              <1>     ;Here we consolidate adjacent free blocks if there are any
    58                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    59                              <1>     ;End consolidation at first non free block or at last block in chain
    60 00001C61 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    61 00001C64 744A                <1>     je .det0    ;Determine if this block is useful
    62 00001C66 31C9                <1>     xor ecx, ecx
    63 00001C68 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    64 00001C6B 4881C610000000      <1>     add rsi, mcb.program
    65                              <1> .cons0:
    66 00001C72 48C1E104            <1>     shl rcx, 4
    67 00001C76 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    68 00001C79 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    69 00001C7C 7409                <1>     je .cons1
    70 00001C7E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    71 00001C81 0F85A5040000        <1>     jne badMCBChain 
    72                              <1> .cons1:
    73 00001C87 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    74 00001C8F 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    75                              <1>     ;Here rsi, points to a free block, add it to rdi
    76 00001C91 31C9                <1>     xor ecx, ecx
    77 00001C93 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    78 00001C96 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    79 00001C9C 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    80 00001C9F 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    81 00001CA1 31D2                <1>     xor edx, edx
    82 00001CA3 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    83 00001CA6 48895608            <1>     mov qword [rsi + 8], rdx
    84 00001CAA 3C5A                <1>     cmp al, mcbMarkEnd
    85 00001CAC 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    86                              <1>     ;Here we deal with if the block was the last one 
    87 00001CAE 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    88                              <1> .det0:  ;Now determine if pointer in rdi is useful
    89 00001CB0 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    90                              <1> ;ebx must be less than the arena size for the arena to be useful!
    91 00001CB3 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    92 00001CB6 39D9                <1>     cmp ecx, ebx
    93 00001CB8 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    94 00001CBA 488935(B8C30300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    95 00001CC1 488B05(A8C30300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    96 00001CC8 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    97 00001CCB 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    98 00001CCD 488935(A8C30300)    <1>     mov qword [firstMCB], rsi
    99                              <1> .det1:
   100                              <1>     ;Now test for best fit.
   101 00001CD4 29D9                <1>     sub ecx, ebx    ;Block - ebx
   102 00001CD6 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   103 00001CD8 7209                <1>     jb .walk2
   104 00001CDA 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   105 00001CDC 488935(B0C30300)    <1>     mov qword [bestMCB], rsi
   106                              <1> .walk2:
   107 00001CE3 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   108 00001CE6 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   109 00001CE8 31C9                <1>     xor ecx, ecx
   110 00001CEA 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   111 00001CED 48C1E104            <1>     shl rcx, 4
   112 00001CF1 4881C610000000      <1>     add rsi, mcb.program
   113 00001CF8 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   114 00001CFB E942FFFFFF          <1>     jmp .walk
   115                              <1> .allocate:
   116                              <1>     ;Allocation fails IF the pointer is the null pointer
   117 00001D00 803D(36C30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   118 00001D07 7261                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   119                              <1>     ;Fall thru if last fit
   120 00001D09 488B35(B8C30300)    <1>     mov rsi, qword [lastMCB]
   121 00001D10 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   122 00001D13 0F84CE000000        <1>     jz .allocFail
   123 00001D19 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   124 00001D1B C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   125 00001D1E 31C9                <1>     xor ecx, ecx
   126 00001D20 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   127 00001D23 29D9                <1>     sub ecx, ebx
   128 00001D25 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   129 00001D2B 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   130 00001D2E 48C1E104            <1>     shl rcx, 4
   131 00001D32 4881C610000000      <1>     add rsi, mcb.program
   132 00001D39 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   133 00001D3C 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   134 00001D3E 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   135 00001D41 488B15(82C30300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   136 00001D48 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   137 00001D4C 488B15(DAC30300)    <1>     mov rdx, qword [oldRSP]
   138 00001D53 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   139 00001D5A 4889F0              <1>     mov rax, rsi
   140 00001D5D 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   141 00001D60 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   142 00001D64 E896030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   143                              <1>     return
    18                              <2> %%_ret:
    19 00001D69 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> .bfCommon:
   145 00001D6A 488B35(A8C30300)    <1>     mov rsi, qword [firstMCB]
   146 00001D71 803D(36C30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   147 00001D78 480F4435(B0C30300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   148 00001D80 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   149 00001D83 7462                <1>     jz .allocFail
   150 00001D85 8A06                <1>     mov al, byte [rsi + mcb.marker]
   151 00001D87 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   152 00001D8A 31C9                <1>     xor ecx, ecx
   153 00001D8C 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   154 00001D8F 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   155 00001D91 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   156 00001D97 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   157 00001D9A 488B15(82C30300)    <1>     mov rdx, qword [currentPSP]
   158 00001DA1 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   159 00001DA5 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   160 00001DA8 4881C610000000      <1>     add rsi, mcb.program
   161 00001DAF 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   162 00001DB5 48C1E304            <1>     shl rbx, 4
   163 00001DB9 4801DE              <1>     add rsi, rbx
   164 00001DBC 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   165 00001DBE 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   166 00001DC6 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   167 00001DC9 488B15(DAC30300)    <1>     mov rdx, qword [oldRSP]
   168 00001DD0 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   169 00001DD7 4889F8              <1>     mov rax, rdi
   170 00001DDA 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   171 00001DDD 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   172 00001DE1 E819030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   173                              <1>     return
    18                              <2> %%_ret:
    19 00001DE6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   174                              <1> .allocFail:
   175                              <1>     ;Walk the MCB chain to determine the biggest block size
   176 00001DE7 488B35(2BC00300)    <1>     mov rsi, [mcbChainPtr]
   177 00001DEE 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   178                              <1> .af0:
   179 00001DF0 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   180 00001DF3 7409                <1>     je .af1
   181 00001DF5 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   182 00001DF8 0F852E030000        <1>     jne badMCBChain
   183                              <1> .af1:
   184 00001DFE 31C9                <1>     xor ecx, ecx
   185 00001E00 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   186 00001E03 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   187 00001E0B 7505                <1>     jne .af2
   188 00001E0D 39D9                <1>     cmp ecx, ebx
   189 00001E0F 0F47D9              <1>     cmova ebx, ecx
   190                              <1> .af2:
   191 00001E12 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   192 00001E15 7410                <1>     je .afExit
   193 00001E17 48C1E104            <1>     shl rcx, 4
   194 00001E1B 4881C610000000      <1>     add rsi, mcb.program
   195 00001E22 4801CE              <1>     add rsi, rcx
   196 00001E25 EBD7                <1>     jmp short .af1
   197                              <1> .afExit:
   198 00001E27 B808000000          <1>     mov eax, errNoMem
   199 00001E2C 488B15(DAC30300)    <1>     mov rdx, qword [oldRSP]
   200 00001E33 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   201 00001E36 E9F3020000          <1>     jmp mcbErrHdlr
   202                              <1> freeMemory:        ;ah = 49h
   203                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   204                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   205                              <1> ;Always skip the first block as this is the anchor for DOS
   206 00001E3B 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   207 00001E42 31C9                <1>     xor ecx, ecx
   208 00001E44 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   209 00001E4B 4889F7              <1>     mov rdi, rsi
   210 00001E4E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   211 00001E51 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   212 00001E55 4881C610000000      <1>     add rsi, mcb.program
   213 00001E5C 4801CE              <1>     add rsi, rcx    ;Go to next block
   214                              <1> .mainLoop:
   215 00001E5F 31C9                <1>     xor ecx, ecx
   216 00001E61 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   217 00001E64 7409                <1>     je .valid
   218 00001E66 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   219 00001E69 0F85BD020000        <1>     jne badMCBChain
   220                              <1> .valid:
   221 00001E6F 4939F0              <1>     cmp r8, rsi
   222 00001E72 741C                <1>     je .blockFound
   223                              <1>     ;Not valid, check if last block in chain
   224 00001E74 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   225 00001E77 0F849C000000        <1>     je .blockError
   226 00001E7D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   227 00001E80 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   228 00001E84 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   229 00001E8B 4801CE              <1>     add rsi, rcx    ;Go to next block
   230 00001E8E EBCF                <1>     jmp short .mainLoop
   231                              <1> .blockFound:
   232                              <1>     ;If hole, error.
   233                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   234 00001E90 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   235 00001E98 747F                <1>     je .blockError
   236 00001E9A 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   237 00001EA2 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   238 00001EAA 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   239                              <1>     ;It is, let it absorb this space
   240 00001EAC 31C9                <1>     xor ecx, ecx
   241 00001EAE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   242 00001EB1 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   243 00001EB7 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   244                              <1>     ;Replace block marker
   245 00001EBA 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   246 00001EBC 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   247 00001EBE 31C9                <1>     xor ecx, ecx
   248 00001EC0 48890E              <1>     mov qword [rsi], rcx
   249 00001EC3 48894E08            <1>     mov qword [rsi + 8], rcx
   250 00001EC7 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   251                              <1> .blockFoundCheckFollowing:
   252                              <1>     ;First check if we are the last block in chain
   253 00001ECA 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   254 00001ECD 7439                <1>     je .blockFoundExit  ;If yes, exit!
   255 00001ECF 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   256 00001ED2 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   257 00001ED5 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   258 00001ED9 4881C110000000      <1>     add rcx, mcb.program
   259 00001EE0 4801CE              <1>     add rsi, rcx    ;Go to next block
   260 00001EE3 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   261 00001EEB 751B                <1>     jne .blockFoundExit ;If not free, exit
   262                              <1>     ;If free, absorb into block pointed to by rdi
   263 00001EED 31C9                <1>     xor ecx, ecx
   264 00001EEF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   265 00001EF2 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   266 00001EF8 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   267                              <1>     ;Replace block marker
   268 00001EFB 8A06                <1>     mov al, byte [rsi + mcb.marker]
   269 00001EFD 8807                <1>     mov byte [rdi + mcb.marker], al
   270 00001EFF 31C9                <1>     xor ecx, ecx
   271 00001F01 48890E              <1>     mov qword [rsi], rcx
   272 00001F04 48894E08            <1>     mov qword [rsi + 8], rcx
   273                              <1> .blockFoundExit:
   274 00001F08 E8F2010000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   275 00001F0D 488B1D(DAC30300)    <1>     mov rbx, qword [oldRSP]
   276 00001F14 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   277                              <1>     return
    18                              <2> %%_ret:
    19 00001F18 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   278                              <1> .blockError:
   279 00001F19 C605(6CC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   280 00001F20 B809000000          <1>     mov eax, errMemAddr
   281 00001F25 E85E0C0000          <1>     call extErrExit ;Error thru the unified error handler
   282 00001F2A E8D0010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   283                              <1>     return
    18                              <2> %%_ret:
    19 00001F2F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   284                              <1> reallocMemory:     ;ah = 4Ah
   285                              <1> ;Input: r8 = address of the block to be realloc'ed
   286                              <1> ;       ebx = How many paras this block should contain after realloc. 
   287                              <1> ;               If ebx = 0, jump to free memory
   288 00001F30 85DB                <1>     test ebx, ebx
   289 00001F32 0F8403FFFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   290 00001F38 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   291 00001F3F 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   292 00001F42 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   293 00001F45 7409                <1>     je .ctn
   294 00001F47 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   295 00001F4A 0F855F010000        <1>     jne .badAddrGiven
   296                              <1> .ctn:
   297                              <1>     ;Provided block is valid and not a hole
   298                              <1>     ;Check if Growth or Shrink
   299 00001F50 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   300 00001F58 74BF                <1>     je freeMemory.blockError
   301 00001F5A 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   302 00001F5D 31C9                <1>     xor ecx, ecx
   303 00001F5F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   304 00001F62 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   305 00001F64 0F8786000000        <1>     ja .growth
   306 00001F6A 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   307                              <1> ;We can always shrink
   308 00001F70 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   309 00001F72 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   310 00001F78 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   311 00001F7B 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   312 00001F81 48C1E304            <1>     shl rbx, 4
   313 00001F85 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   314 00001F8C 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   315 00001F8F 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   316 00001F91 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   317 00001F94 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   318 00001F96 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   319 00001F9E 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   320 00001FA1 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   321 00001FA3 0F84DB000000        <1>     je .exit
   322                              <1> ;Else, now see if the block following is also free and absorb it
   323 00001FA9 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   324 00001FAC 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   325 00001FB0 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   326 00001FB7 4801CE              <1>     add rsi, rcx    ;Goto next arena
   327 00001FBA 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   328 00001FBD 7409                <1>     je .shrinkAbsorb
   329 00001FBF 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   330 00001FC2 0F8564010000        <1>     jne badMCBChain
   331                              <1> .shrinkAbsorb:
   332 00001FC8 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   333 00001FD0 0F85AE000000        <1>     jne .exit
   334                              <1>     ;It is free, absorb it
   335 00001FD6 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   336 00001FD9 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   337 00001FDF 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   338 00001FE2 31C9                <1>     xor ecx, ecx
   339                              <1>     ;Clear absorbed MCB
   340 00001FE4 48890E              <1>     mov qword [rsi], rcx
   341 00001FE7 48894E08            <1>     mov qword [rsi + 8], rcx
   342 00001FEB E994000000          <1>     jmp .exit
   343                              <1> .growth:
   344                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   345 00001FF0 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   346 00001FF3 0F84A0000000        <1>     je .notEnuffMem
   347                              <1> ;Now check the following space is free. If not, not enuff mem err
   348 00001FF9 31C9                <1>     xor ecx, ecx
   349 00001FFB 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   350 00001FFE 48C1E104            <1>     shl rcx, 4
   351 00002002 4889F7              <1>     mov rdi, rsi    
   352 00002005 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   353 0000200C 4801CE              <1>     add rsi, rcx
   354 0000200F 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   355 00002012 7409                <1>     je .growthOK
   356 00002014 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   357 00002017 0F850F010000        <1>     jne badMCBChain
   358                              <1> .growthOK:
   359                              <1>     ;rdi points to block we are growing
   360 0000201D 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   361 00002025 7572                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   362                              <1>     ;rsi must own all memory up to the next owned arena
   363 00002027 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   364 00002029 31C9                <1>     xor ecx, ecx
   365 0000202B 31D2                <1>     xor edx, edx
   366 0000202D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   367 00002030 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   368 00002036 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   369 00002039 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   370 0000203B 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   371 0000203D 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   372 00002040 7759                <1>     ja .notEnuffMem1
   373 00002042 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   374 00002044 81FA01000000        <1>     cmp edx, 1
   375 0000204A 7449                <1>     je .notEnuffMem2
   376 0000204C 31C9                <1>     xor ecx, ecx
   377 0000204E 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   378 00002051 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   379 00002055 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   380 00002058 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   381 0000205B 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   382 00002062 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   383 00002066 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   384 00002069 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   385 0000206D 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   386                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   387                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   388 0000206F 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   389 00002071 7411                <1>     jz .exit
   390 00002073 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   391 00002079 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   392 0000207C 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   393                              <1> .exit:
   394 00002084 E876000000          <1>     call verifyIntegrityOfMCBChain
   395 00002089 488B1D(DAC30300)    <1>     mov rbx, qword [oldRSP]
   396 00002090 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   397                              <1>     return
    18                              <2> %%_ret:
    19 00002094 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   398                              <1> .notEnuffMem2:
   399 00002095 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   400 00002097 EB02                <1>     jmp short .notEnuffMem1
   401                              <1> .notEnuffMem:
   402 00002099 31DB                <1>     xor ebx, ebx    ;No space to grow
   403                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   404 0000209B B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   405 000020A0 488B15(DAC30300)    <1>     mov rdx, qword [oldRSP]
   406 000020A7 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   407 000020AA E97F000000          <1>     jmp mcbErrHdlr
   408                              <1> .badAddrGiven:
   409 000020AF B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   410 000020B4 E975000000          <1>     jmp mcbErrHdlr
   411                              <1> getsetMallocStrat: ;ah = 58h
   412 000020B9 84C0                <1>     test al, al
   413 000020BB 741F                <1>     jz .get
   414 000020BD 3C02                <1>     cmp al, 2
   415 000020BF 7337                <1>     jae .bad
   416                              <1> ;Set here
   417 000020C1 488B1D(DAC30300)    <1>     mov rbx, qword [oldRSP]
   418 000020C8 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   419 000020CC 8805(36C30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   420 000020D2 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   421 000020D6 E824000000          <1>     call verifyIntegrityOfMCBChain
   422                              <1>     return
    18                              <2> %%_ret:
    19 000020DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   423                              <1> .get:
   424 000020DC 488B1D(DAC30300)    <1>     mov rbx, qword [oldRSP]
   425 000020E3 31C0                <1>     xor eax, eax
   426 000020E5 8A05(36C30300)      <1>     mov al, byte [allocStrat]
   427 000020EB 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   428 000020EE 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   429 000020F2 E808000000          <1>     call verifyIntegrityOfMCBChain
   430                              <1>     return
    18                              <2> %%_ret:
    19 000020F7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   431                              <1> .bad:
   432 000020F8 B801000000          <1>     mov eax, errInvFnc
   433 000020FD EB2F                <1>     jmp short mcbErrHdlr
   434                              <1> ;-----------------------------------:
   435                              <1> ;      Memory related routines      :
   436                              <1> ;-----------------------------------:
   437                              <1> verifyIntegrityOfMCBChain:
   438 000020FF 50                  <1>     push rax
   439 00002100 53                  <1>     push rbx
   440 00002101 488B1D(2BC00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   441                              <1> .ok:
   442 00002108 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   443 0000210B 7408                <1>     je .ok1
   444 0000210D 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   445 00002110 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   446                              <1> .exit:
   447 00002112 5B                  <1>     pop rbx
   448 00002113 58                  <1>     pop rax
   449                              <1>     return ;We have reached the end of the chain, return all good!
    18                              <2> %%_ret:
    19 00002114 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   450                              <1> .ok1:
   451 00002115 31C0                <1>     xor eax, eax
   452 00002117 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   453 0000211A 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   454 0000211E 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   455 00002125 4801C3              <1>     add rbx, rax
   456 00002128 EBDE                <1>     jmp short .ok
   457                              <1> .bmcbPrep:
   458 0000212A 5B                  <1>     pop rbx ;Pop off the stack first!
   459 0000212B 58                  <1>     pop rax
   460                              <1> badMCBChain:
   461 0000212C B007                <1>     mov al, errMCBbad   ;Yikes!
   462                              <1> mcbErrHdlr:
   463                              <1>     ;Jumped to with eax = error code
   464 0000212E C605(6CC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   465 00002135 E84E0A0000          <1>     call extErrExit ;Error thru the unified error handler
   466 0000213A 3C07                <1>     cmp al, errMCBbad
   467                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000213C 74D6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   468 0000213E EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    30                                  %include "./Source/Kernel/MemExec/execTerm.asm"
    31                              <1> ;EXEC and all default terminates are here
    32                              <1> 
    33                              <1> ;========================
    34                              <1> ;   Interrupt handlers
    35                              <1> ;========================
    36                              <1> terminateProcess:   ;Int 40h
    37 00002140 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
    38 00002142 E991080000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
    39                              <1> terminateRes:       ;Int 47h
    40                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    41 00002147 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    42 0000214D C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    43 00002150 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    44 00002155 E97E080000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    45                              <1> ;========================
    46                              <1> ;    Int 21h functions
    47                              <1> ;========================
    48                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    49                              <1> ;Input:
    50                              <1> ;rdx = Pointer to new PSP in memory.
    51                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    52                              <1> ;   Officially document that this MUST be paragraph aligned.
    53                              <1> ;rsi = alloc size for new psp block
    54 0000215A C605(73C40300)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    55 00002161 4C8B05(82C30300)    <1>     mov r8, qword [currentPSP]
    56 00002168 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    57 0000216A 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    58 0000216B EB0C                <1>     jmp short copyPSP.pspCommon
    59                              <1> copyPSP:      ;ah = 26h
    60                              <1> ;Input:
    61                              <1> ;rdx = Pointer to new PSP in memory.
    62                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    63                              <1> ;   Officially document that this MUST be paragraph aligned.
    64 0000216D 4C8B05(82C30300)    <1>     mov r8, qword [currentPSP]
    65 00002174 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    66 00002178 53                  <1>     push rbx    ;Save this value for PSP allocsize
    67                              <1> .pspCommon:
    68 00002179 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    69 00002180 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    70 00002184 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    71                              <1> ;r8 is current PSP, now copy psp to rdx
    72                              <1> ;Preserve rdx and r8 until the end
    73 00002188 4C89C6              <1>     mov rsi, r8
    74 0000218B 4889D7              <1>     mov rdi, rdx
    75 0000218E B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    76 00002193 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    77 00002196 F605(73C40300)FF    <1>     test byte [pspCopyFlg], -1
    78 0000219D 7400                <1>     jz .copy
    79                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    80                              <1> .copy:
    81 0000219F C605(73C40300)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    82 000021A6 58                  <1>     pop rax ;Pop the allocsize back into rax
    83 000021A7 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    84                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    85 000021AA 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
    86 000021AE B042                <1>     mov al, 42h
    87 000021B0 E8E5060000          <1>     call muxGetIntVector    ;Get vector in rbx
    88 000021B5 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    89 000021B8 48AB                <1>     stosq   ;Move rdi to next entry and store
    90 000021BA B043                <1>     mov al, 43h
    91 000021BC E8D9060000          <1>     call muxGetIntVector    ;Get vector in rbx
    92 000021C1 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    93 000021C4 48AB                <1>     stosq   ;Move rdi to next entry and store
    94 000021C6 B044                <1>     mov al, 44h
    95 000021C8 E8CD060000          <1>     call muxGetIntVector    ;Get vector in rbx
    96 000021CD 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    97 000021D0 48AB                <1>     stosq   ;Move rdi to next entry and store
    98                              <1>     ;Now we add the additional useful bits... just in case they are damaged
    99 000021D2 66C70240CD          <1>     mov word [rdx + psp.return], 0CD40h  ;Int 40h
   100 000021D7 C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Overlay next byte for prevPSP
   101 000021DE 48C74353FFFFFFFF    <1>     mov qword [rbx + psp.prevPSP], -1  
   102 000021E6 4C894322            <1>     mov qword [rbx + psp.parentPtr], r8 ;The Current PSP is parent
   103                              <1>     return
    18                              <2> %%_ret:
    19 000021EA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   104                              <1> 
   105                              <1> terminateStayRes:  ;ah = 31h
   106                              <1> ;Input: al  = Error code
   107                              <1> ;       edx = Number of paragraphs to keep resident
   108 000021EB C605(83C50300)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   109                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   110 000021F2 81FA06000000        <1>     cmp edx, 6
   111 000021F8 7305                <1>     jae .aboveMinimum
   112 000021FA BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   113                              <1> .aboveMinimum:
   114                              <1> ;Now we setup a call to Realloc 
   115                              <1> ;Setup regs with: 
   116                              <1> ;   r8 = address of the block to be realloc'ed
   117                              <1> ;   ebx = How many paras this block should contain after realloc.
   118 000021FF 4C8B05(82C30300)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   119 00002206 89D3                <1>     mov ebx, edx
   120 00002208 50                  <1>     push rax    ;Preserve errorlevel across call
   121 00002209 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   122 0000220A E821FDFFFF          <1>     call reallocMemory
   123 0000220F 5B                  <1>     pop rbx
   124 00002210 58                  <1>     pop rax
   125 00002211 7228                <1>     jc terminateClean.skipCtrlC ;If an error, return w/o editing psp seg. size
   126 00002213 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   127                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   128 00002217 EB22                <1>     jmp short terminateClean.skipCtrlC    ;Terminate as normal
   129                              <1> 
   130                              <1> simpleTerminate:   ;ah = 00h
   131 00002219 31C0                <1>     xor eax, eax
   132 0000221B 8805(83C50300)      <1>     mov byte [exitType], al ;Normal Exit Type
   133 00002221 EB18                <1>     jmp short terminateClean.skipCtrlC  ;Jump here with errorlevel = 0
   134                              <1> terminateClean:    ;ah = 4Ch, EXIT
   135                              <1> ;Here we must:
   136                              <1> ;0) Build errorlevel and adjust variables accordingly
   137                              <1> ;1) Check if the program is it's own parent. If so, return.
   138                              <1> ;2) Swap the console back to the original driver if it is swapped.
   139                              <1> ;2.5) If we are exiting due to TSR, jump to 5
   140                              <1> ;3) Free all file handles associated to the current process.
   141                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   142                              <1> ;4) Free all memory blocks that have the signature of current PSP
   143                              <1> ;5) Set current PSP to parent PSP
   144                              <1> ;6) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   145                              <1> ;7) Call Network Termination hook.
   146                              <1> ;8) Set old old rsp as old rsp
   147                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   148                              <1> ;10) Flush all buffers and Return!
   149                              <1> ;
   150                              <1> ; Step 0
   151                              <1> ;For now, just adjust error level in var
   152 00002223 30E4                <1>     xor ah, ah
   153 00002225 8625(83C50300)      <1>     xchg ah, byte [exitType]    ;Reset exitType byte and get it in ah
   154 0000222B F605(EBC30300)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   155 00002232 7407                <1>     jz .skipCtrlC   ;Jump if we are here due to normal exit or Abort
   156 00002234 C605(83C50300)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   157                              <1> .skipCtrlC:
   158 0000223B 8A25(83C50300)      <1>     mov ah, byte [exitType] ;Get the exitType
   159 00002241 668905(92C30300)    <1>     mov word [errorLevel], ax   ;Store word
   160                              <1> ; Step 1
   161                              <1> .step1:
   162 00002248 488B3D(82C30300)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   163 0000224F 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   164 00002252 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   165 00002256 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   166                              <1>     rete            ;If it is, simply return (al has errorLevel)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002259 748F                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   167                              <1> ; Step 2
   168 0000225B E878F0FFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   169                              <1> ; Step 2.5
   170 00002260 803D(83C50300)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   171 00002267 0F8480000000        <1>     je .step5   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   172                              <1> ; Step 3
   173 0000226D 803D(83C50300)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   174 00002274 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   175 00002276 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   176 0000227B CD4F                <1>     int 4Fh
   177                              <1> .skipAbortNetClose:
   178 0000227D 4881C72A000000      <1>     add rdi, psp.jobFileTbl ;Move rdi to point to the start of the JFT
   179 00002284 4889FE              <1>     mov rsi, rdi    ;Point rsi to jft too
   180 00002287 0FB70D(98C00300)    <1>     movzx ecx, word [maxHndls] ;Number of entries in JFT
   181                              <1> .s3lp:
   182 0000228E AC                  <1>     lodsb   ;Inc rsi, get the SFT number in al
   183 0000228F 3CFF                <1>     cmp al, -1  ;End of open JFT entries?
   184 00002291 7421                <1>     je .step4
   185 00002293 0FB6D8              <1>     movzx ebx, al   ;Move the file handle number into ebx
   186                              <1>     ;Replace with a call to close the handle eventually
   187 00002296 57                  <1>     push rdi
   188 00002297 E83DF9FFFF          <1>     call derefSFTPtr    ;Ret in rdi the SFT pointer
   189 0000229C 720E                <1>     jc .badHdl  ;If a bad handle, skip the decrementing of the handle count
   190 0000229E 66FF0F              <1>     dec word [rdi + sft.wNumHandles]    ;Decrement the count
   191 000022A1 48395745            <1>     cmp qword [rdi + sft.qPSPOwner], rdx
   192 000022A5 7505                <1>     jne .badHdl
   193                              <1>     ;Skip zeroing
   194 000022A7 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0 ;Free SFT (Temp until we can close)
   195                              <1> .badHdl:
   196 000022AC 5F                  <1>     pop rdi
   197 000022AD B0FF                <1>     mov al, -1
   198 000022AF AA                  <1>     stosb   ;Store a -1 in it's place (not strictly necessary)
   199 000022B0 FFC9                <1>     dec ecx ;Zoom Zoom \mu-op!
   200 000022B2 75DA                <1>     jnz .s3lp   ;Keep looping for all entries in the JFT 
   201                              <1> ;Step 4
   202                              <1> .step4:
   203 000022B4 488B1D(82C30300)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   204                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   205                              <1>     ; with the currentPSP signature and free them.
   206 000022BB 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   207                              <1> .s4lp:  ;And walk the chain
   208                              <1> ;First verify the address in rsi is a valid mcb
   209 000022C2 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   210 000022C4 80F94D              <1>     cmp cl, mcbMarkCtn
   211 000022C7 7405                <1>     je .checkToFree
   212 000022C9 80F95A              <1>     cmp cl, mcbMarkEnd
   213 000022CC 751F                <1>     jne .step5  ;Something wrong so stop freeing
   214                              <1> .checkToFree:
   215 000022CE 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   216 000022D2 7508                <1>     jne .noFree
   217 000022D4 4989F0              <1>     mov r8, rsi ;Move pointer to r8
   218 000022D7 E85FFBFFFF          <1>     call freeMemory ;Free this memory block
   219                              <1>     ;If an error occured, the internal vars will be set.
   220                              <1> .noFree:
   221 000022DC 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   222 000022DF 740C                <1>     je .step5   ;Skip if we are
   223 000022E1 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   224 000022E4 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   225 000022E8 4801C6              <1>     add rsi, rax    ;Goto next mcb block
   226 000022EB EBD5                <1>     jmp short .s4lp
   227                              <1> ;Step 5
   228                              <1> .step5:
   229 000022ED 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   230 000022F1 488905(82C30300)    <1>     mov qword [currentPSP], rax
   231                              <1> ;Step 6
   232                              <1>     ;rbx points to current PSP
   233                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   234 000022F8 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   235 000022FC B044                <1>     mov al, 44h
   236 000022FE E83A0A0000          <1>     call setIntVector
   237 00002303 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   238 00002307 B043                <1>     mov al, 43h
   239 00002309 E82F0A0000          <1>     call setIntVector
   240 0000230E 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   241 00002312 B042                <1>     mov al, 42h
   242 00002314 E8240A0000          <1>     call setIntVector
   243                              <1> ;Step 7
   244 00002319 B822110000          <1>     mov eax, 1122h  ;Network Termination Hook
   245 0000231E CD4F                <1>     int 4fh ;Beep it out
   246                              <1> ;Step 8
   247 00002320 488B05(CAC30300)    <1>     mov rax, qword [oldoldRSP]  ;Make the parent register frame the current one
   248 00002327 488905(DAC30300)    <1>     mov qword [oldRSP], rax
   249                              <1> ;Step 9
   250 0000232E 488B2D(DAC30300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to parent stack register frame in rbp
   251 00002335 48895548            <1>     mov qword [rbp + callerFrame.rip], rdx  ;Store return address vector here
   252                              <1> ;Step 10
   253 00002339 30C0                <1>     xor al, al    ;Set al to 0
   254 0000233B E852090000          <1>     call diskReset  ;Flush all buffers
   255                              <1>     return
    18                              <2> %%_ret:
    19 00002340 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   256                              <1> 
   257                              <1> loadExecChild:     ;ah = 4Bh, EXEC
   258                              <1>     return
    18                              <2> %%_ret:
    19 00002341 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    31                                  %include "./Source/Kernel/Local/Local.asm"
    32                              <1> ;Localisation based functions live here
    33                              <1> 
    34                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    35                              <1> ;al = 0 => Get the switch char
    36                              <1> ;al = 1 => Set the switch char to whats in DL
    37                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
    38                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
    39                              <1> ;       Always returns -1 => /DEV/ optional
    40                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    41                              <1> ;       Input value is ignored
    42 00002342 3C01                <1>     cmp al, 01
    43 00002344 7412                <1>     je .getSC
    44 00002346 7209                <1>     jb .setSC
    45 00002348 3C03                <1>     cmp al, 03
    46 0000234A 7214                <1>     jb .getDev
    47 0000234C 741C                <1>     je .setDev
    48 0000234E B0FF                <1>     mov al, -1
    49                              <1>     return
    18                              <2> %%_ret:
    19 00002350 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    50                              <1> .setSC:
    51 00002351 8815(34C30300)      <1>     mov byte [switchChar], dl
    52                              <1>     return
    18                              <2> %%_ret:
    19 00002357 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    53                              <1> .getSC:
    54 00002358 8A15(34C30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    55 0000235E EB02                <1>     jmp short .getRet
    56                              <1> .getDev:
    57 00002360 B2FF                <1>     mov dl, -1
    58                              <1> .getRet:
    59 00002362 E841050000          <1>     call getUserRegs
    60 00002367 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    61                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    62                              <1>     return
    18                              <2> %%_ret:
    19 0000236A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> 
    65                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    66                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    67                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    68 0000236B C3                  <1>     ret
    32                                  %include "./Source/Kernel/ctrlc.asm"
    33                              <1> diskDevErr:
    34                              <1> ;Called, NOT Jumped to. 
    35                              <1> ;Input: rdi = Disk Buffer pointer
    36                              <1> ;       eax = Status word (Zero Extended)
    37                              <1> ;       rbp = Disk DPB pointer
    38                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    39                              <1> ;Output: al = Int 44h response (0-3)
    40                              <1> ; All other registers preserved
    41 0000236C 48893D(72C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    42 00002373 89C7                <1>     mov edi, eax    ;Store status word in rdi
    43 00002375 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    44 00002378 8A25(C8C30300)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    45 0000237E 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    46                              <1>     ;Test for correct buffer data type
    47 00002381 53                  <1>     push rbx    ;Save rbx temporarily
    48 00002382 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    49 00002385 F6C301              <1>     test bl, dosBuffer
    50 00002388 7505                <1>     jnz .df0
    51 0000238A 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    52 0000238D EB17                <1>     jmp short .df3
    53                              <1> .df0:
    54 0000238F F6C302              <1>     test bl, fatBuffer
    55 00002392 7505                <1>     jnz .df1
    56 00002394 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    57 00002397 EB0D                <1>     jmp short .df3
    58                              <1> .df1:
    59 00002399 F6C304              <1>     test bl, dirBuffer
    60 0000239C 7505                <1>     jnz .df2
    61 0000239E 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    62 000023A1 EB03                <1>     jmp short .df3
    63                              <1> .df2:
    64 000023A3 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    65                              <1> .df3:
    66 000023A6 5B                  <1>     pop rbx
    67 000023A7 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    68 000023AB E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    69 000023B0 488B2D(56C60300)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    70 000023B7 488B3D(72C30300)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    71                              <1>     return
    18                              <2> %%_ret:
    19 000023BE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    72                              <1> 
    73                              <1> charDevErr:
    74                              <1> ;Called with ah with additional bits
    75 000023BF 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
    76                              <1> criticalErrorSetup:
    77 000023C2 8825(C8C30300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    78 000023C8 48892D(56C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    79 000023CF 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    80                              <1>     ;For now, fall through, but need much work to change it later! 
    81                              <1> 
    82                              <1> 
    83                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    84                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    85                              <1> ; to the critical error handler.
    86                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    87                              <1> ; and with Int44Bitfield set
    88                              <1> ;               AH = Critical Error Bitfield
    89                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    90                              <1> ;               Bit 6 - Reserved
    91                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    92                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    93                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    94                              <1> ;               Bits [2-1] = Affected Disk Error
    95                              <1> ;                     0 0   DOS area
    96                              <1> ;                     0 1   FAT area
    97                              <1> ;                     1 0   Directory area
    98                              <1> ;                     1 1   Data area
    99                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   100                              <1> ;               AL  = Failing drive number if AH[7] = 0
   101                              <1> ;               DIL = Error code for errorMsg
   102                              <1> ;               RSI = EA of Device Header for which device the error occured
   103                              <1> ;Return:
   104                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   105                              <1> ;                  = 1 - Retry the Operation    (Retry)
   106                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   107                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   108                              <1> ; Return response from int 44h in al
   109                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   110                              <1> ; This function will terminate the program if an abort was requested!
   111                              <1> ; This function also destroys RBP
   112 000023D5 803D(6AC30300)01    <1>     cmp byte [critErrFlag], 1
   113 000023DC 7204                <1>     jb .noIntError  ;If not 0, enter
   114 000023DE B003                <1>     mov al, critFail    ;Else, return Fail always
   115 000023E0 EB4F                <1>     jmp short .exit     ;Don't translate fail to abort
   116                              <1> .noIntError:
   117 000023E2 FA                  <1>     cli ;Disable Interrupts
   118 000023E3 FE05(6AC30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   119 000023E9 FE0D(6BC30300)      <1>     dec byte [inDOS]    ;Exiting DOS
   120 000023EF 488925(C0C30300)    <1>     mov qword [xInt44hRSP], rsp
   121 000023F6 488B25(DAC30300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   122 000023FD 31ED                <1>     xor ebp, ebp    ;Always zeroed
   123 000023FF CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   124 00002401 488B25(C0C30300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   125 00002408 C605(6AC30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   126 0000240F FE05(6BC30300)      <1>     inc byte [inDOS]    ;Reenter DOS
   127 00002415 FB                  <1>     sti ;Reenable Interrupts
   128                              <1>     ;Now we check that the response given was allowed, and translate if needed
   129                              <1> .checkResponse:
   130 00002416 3C01                <1>     cmp al, critRetry
   131 00002418 721F                <1>     jb .checkIgnore
   132 0000241A 7428                <1>     je .checkRetry
   133 0000241C 3C03                <1>     cmp al, critFail
   134 0000241E 752F                <1>     jne .abort   ;Must be abort
   135                              <1> .setFail:   ;Here is for fail
   136 00002420 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   137 00002422 FE05(C9C30300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   138 00002428 F605(C8C30300)08    <1>     test byte [Int44bitfld], critFailOK
   139 0000242F 751E                <1>     jnz .abort  ;If fail not permitted, abort
   140                              <1> .exit:
   141 00002431 C605(6CC30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   142                              <1>     return
    18                              <2> %%_ret:
    19 00002438 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   143                              <1> .checkIgnore:
   144 00002439 F605(C8C30300)20    <1>     test byte [Int44bitfld], critIgnorOK
   145 00002440 75EF                <1>     jnz .exit
   146 00002442 EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   147                              <1> .checkRetry:
   148 00002444 F605(C8C30300)10    <1>     test byte [Int44bitfld], critRetryOK
   149 0000244B 75E4                <1>     jnz .exit   
   150 0000244D EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   151                              <1> .abort:
   152                              <1> ;Prepare to abort. We abort from within!
   153                              <1>     ;First check if the process is it's own parent.
   154                              <1>     ;If it is, we exit fail and return to the process
   155 0000244F 488B05(82C30300)    <1>     mov rax, qword [currentPSP] ;Get the current psp
   156 00002456 53                  <1>     push rbx
   157 00002457 488B5822            <1>     mov rbx, qword [rax + psp.parentPtr]
   158 0000245B 4839C3              <1>     cmp rbx, rax    ;Check if the process is it's own parent
   159 0000245E 5B                  <1>     pop rbx
   160 0000245F 7509                <1>     jne .kill   ;If the process is not it's own parent, we kill the process
   161 00002461 C605(F4C30300)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   162 00002468 EBB6                <1>     jmp short .setFail
   163                              <1> .kill:
   164 0000246A 66893D(6EC30300)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   165 00002471 C605(83C50300)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   166 00002478 E9A6FDFFFF          <1>     jmp terminateClean
   167                              <1> 
   168                              <1> ctrlBreakHdlr:
   169 0000247D B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   170 0000247F E882EDFFFF          <1>     call printCaretASCII
   171 00002484 E8ADEDFFFF          <1>     call printCRLF
   172                              <1>     ;Reset the console back to 0
   173 00002489 C605(F2C30300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   174                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   175 00002490 FA                  <1> 	cli
   176 00002491 488B25(DAC30300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   177 00002498 E895060000          <1> 	call dosPopRegs ;Get user state back
   178 0000249D 488925(8AC30300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   179 000024A4 F8                  <1>     clc
   180 000024A5 CD43                <1>     int 43h ;Call critical error handler
   181 000024A7 FA                  <1>     cli ;Clear interrupts again
   182 000024A8 488905(96C30300)    <1>     mov qword [oldRAX], rax ;Save rax
   183 000024AF 9C                  <1>     pushfq  ;Get flags in rax
   184 000024B0 58                  <1>     pop rax 
   185 000024B1 483B25(8AC30300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   186 000024B8 750C                <1>     jne .checkCF
   187                              <1> .returnToDOS:
   188 000024BA 488B05(96C30300)    <1>     mov rax, qword [oldRAX]
   189 000024C1 E912050000          <1>     jmp functionDispatch    ;Goto int 41h
   190                              <1> .checkCF:
   191 000024C6 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   192 000024CD A801                <1>     test al, 1  ;CF set?
   193 000024CF 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   194 000024D1 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   195 000024D6 C605(EBC30300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   196 000024DD E9F6040000          <1>     jmp functionDispatch
   197                              <1> 
    33                                  %include "./Source/Kernel/dosPrim.asm"
    34                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    35                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    36                              <1> 
    37                              <1> dosDefCritErrHdlr:
    38                              <1> ;The DOS default critical error handler always returns FAIL
    39 000024E2 B003                <1>     mov al, critFail
    40 000024E4 48CF                <1>     iretq
    41                              <1> goDriverChar:
    42                              <1> ;Shortcut for Char requests, make a driver request
    43                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    44 000024E6 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    45                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    46                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    47                              <1> ;       rbx = Ptr to the request header for the driver call!
    48 000024EA E885060000          <1>     call dosCrit2Enter
    49 000024EF FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    50 000024F2 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    51 000024F5 E884060000          <1>     call dosCrit2Exit
    52                              <1>     return
    18                              <2> %%_ret:
    19 000024FA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    53                              <1> 
    54                              <1> setupPhysicalDiskRequest:
    55                              <1> ;Ensure that al has valid disk number
    56                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    57                              <1> ;If CF=NC, rbp = DPB ptr.
    58                              <1> ;If CF=CY, exit error
    59 000024FB 84C0                <1>     test al, al
    60 000024FD 723F                <1>     jc .diskError
    61 000024FF 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
    62 00002505 7337                <1>     jae .diskError
    63 00002507 50                  <1>     push rax
    64 00002508 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    65 0000250A E826040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    66 0000250F 58                  <1>     pop rax
    67 00002510 7235                <1>     jc .error
    68 00002512 8805(84C50300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    69 00002518 488B2D(8DC50300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    70 0000251F 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    71 00002527 750A                <1>     jnz .netError
    72 00002529 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    73 0000252D E8FE020000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    74                              <1>     return
    18                              <2> %%_ret:
    19 00002532 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    75                              <1> .netError:
    76 00002533 66C705(6EC30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    76 0000253B 00                  <1>
    77 0000253C EB09                <1>     jmp short .error
    78                              <1> .diskError:
    79 0000253E 66C705(6EC30300)0F- <1>     mov word [errorExCde], errBadDrv
    79 00002546 00                  <1>
    80                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    81 00002547 C605(6DC30300)02    <1>     mov byte [errorLocus], eLocDsk
    82 0000254E C605(70C30300)07    <1>     mov byte [errorAction], eActRetUsr
    83 00002555 C605(71C30300)09    <1>     mov byte [errorClass], eClsBadFmt
    84 0000255C F9                  <1>     stc
    85                              <1>     return
    18                              <2> %%_ret:
    19 0000255D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> setupAbsDiskEntry:
    88                              <1> ;Prepares to sets up the CDS and DPB for the request
    89 0000255E FE05(6BC30300)      <1>     inc byte [inDOS]
    90 00002564 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    91 00002565 FC                  <1>     cld ;Set string ops in the right direction
    92 00002566 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    93 0000256B 7223                <1>     jc .exit    ;Error exit
    94 0000256D C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    95 00002574 56                  <1>     push rsi
    96 00002575 50                  <1>     push rax
    97 00002576 488D35(74C40300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    98 0000257D 8806                <1>     mov byte [rsi], al  ;Construct a path
    99 0000257F 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   100 00002582 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   101 00002586 F8                  <1>     clc
   102                              <1> ;++++++++++++++++++++++++++++
   103                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   104                              <1> ;Entered with path in rsi (ah=03h)
   105 00002587 B800030000          <1>     mov eax, 0300h  
   106 0000258C CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   107                              <1> ;++++++++++++++++++++++++++++
   108 0000258E 58                  <1>     pop rax
   109 0000258F 5E                  <1>     pop rsi
   110                              <1> .exit:
   111 00002590 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   112                              <1>     return
    18                              <2> %%_ret:
    19 00002592 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> absDiskWrite:       ;Int 46h
   115                              <1> ;al = Drive number
   116                              <1> ;rbx = Memory Buffer address to read from
   117                              <1> ;ecx = Number of sectors to write
   118                              <1> ;rdx = Start LBA to write to
   119 00002593 FA                  <1>     cli
   120 00002594 488925(DAC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   121 0000259B 488D25(56D80300)    <1>     lea rsp, DiskStakTop
   122 000025A2 55                  <1>     push rbp
   123 000025A3 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   124 000025A4 E8B5FFFFFF          <1>     call setupAbsDiskEntry
   125 000025A9 7252                <1>     jc absDiskExit
   126 000025AB E8AE010000          <1>     call primReqWriteSetup
   127 000025B0 EB1D                <1>     jmp short absDiskReadWriteCommon
   128                              <1> absDiskRead:        ;Int 45h
   129                              <1> ;al = Drive number
   130                              <1> ;rbx = Memory Buffer address to write to
   131                              <1> ;ecx = Number of sectors to read
   132                              <1> ;rdx = Start LBA to read from
   133 000025B2 FA                  <1>     cli 
   134 000025B3 488925(DAC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   135 000025BA 488D25(56D80300)    <1>     lea rsp, DiskStakTop
   136 000025C1 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   137 000025C2 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   138 000025C3 E896FFFFFF          <1>     call setupAbsDiskEntry
   139 000025C8 7233                <1>     jc absDiskExit
   140 000025CA E89A010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   141                              <1> absDiskReadWriteCommon:
   142                              <1> ;Entered with the appropriate function number in ah
   143                              <1> ; and primary request header in rbx
   144 000025CF E83B000000          <1>     call absDiskDriverCall
   145 000025D4 7427                <1>     jz absDiskExit  ;Skip error code checking
   146 000025D6 8A05(22C40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   147                              <1>     ;DOS uses the following pairs in a table
   148                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   149 000025DC B480                <1>     mov ah, 80h ;Attachment failure
   150 000025DE 3C0C                <1>     cmp al, 0Ch ;Gen error
   151 000025E0 741A                <1>     je .absExit
   152 000025E2 B440                <1>     mov ah, 40h ;Seek error
   153 000025E4 3C06                <1>     cmp al, 06h
   154 000025E6 7414                <1>     je .absExit
   155 000025E8 B408                <1>     mov ah, 08h ;Bad CRC
   156 000025EA 3C04                <1>     cmp al, 04h
   157 000025EC 740E                <1>     je .absExit
   158 000025EE B404                <1>     mov ah, 04h ;Sector not found
   159 000025F0 3C08                <1>     cmp al, 08h
   160 000025F2 7408                <1>     je .absExit
   161 000025F4 30E4                <1>     xor ah, ah  ;Write Protect Violation
   162 000025F6 84C0                <1>     test al, al
   163 000025F8 7402                <1>     je .absExit
   164 000025FA B402                <1>     mov ah, 02h ;Other Error
   165                              <1> .absExit:
   166 000025FC F9                  <1>     stc
   167                              <1> absDiskExit:
   168 000025FD 5B                  <1>     pop rbx
   169 000025FE 5D                  <1>     pop rbp
   170 000025FF FA                  <1>     cli
   171 00002600 FE0D(6BC30300)      <1>     dec byte [inDOS]
   172 00002606 488B25(DAC30300)    <1>     mov rsp, qword [oldRSP]
   173 0000260D FB                  <1>     sti ;Reenable interrupts
   174                              <1>     return ;Return from interrupt without popping flags!
    18                              <2> %%_ret:
    19 0000260E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   175                              <1> absDiskDriverCall:
   176                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   177                              <1> ;       rbx = Request header address
   178                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   179                              <1> ;       eax = Status word from request
   180                              <1> ;       ecx = Number of sectors transferred
   181 0000260F 56                  <1>     push rsi
   182                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   183 00002610 8B0D(35C40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   184                              <1>     ;Prepare for goDriver now
   185 00002616 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   186 0000261A E8CBFEFFFF          <1>     call goDriver   ;Make request
   187 0000261F 5E                  <1>     pop rsi
   188 00002620 8B05(35C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   189 00002626 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   190 00002628 0FB705(22C40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   191 0000262F 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   192                              <1>     return
    18                              <2> %%_ret:
    19 00002633 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   193                              <1> 
   194                              <1> getDiskDPB:
   195                              <1> ;Gets the disk DPB if the Disk is physical
   196                              <1> ;Otherwise will return a pointer to the drive DPB
   197                              <1> ;Called with rdi pointing to the CDS
   198                              <1> ;CF=NC => RBP=DPBptr, CF=CY => Error exit
   199 00002634 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   200 00002638 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   201 0000263B 8805(84C50300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   202 00002641 E8EA010000          <1>     call setWorkingDPB
   203 00002646 57                  <1>     push rdi    ;Save the CDS ptr
   204 00002647 E838000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   205 0000264C 5F                  <1>     pop rdi
   206 0000264D 7234                <1>     jc .exitBad ;Preserve CF
   207 0000264F 7531                <1>     jnz .exit
   208                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   209 00002651 8A0D(70C00300)      <1>     mov cl, byte [lastdrvNum]
   210 00002657 4831C0              <1>     xor rax, rax
   211 0000265A 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   212 0000265D 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   213 00002661 488B3D(5DC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   214                              <1> .checkCDS:
   215 00002668 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   216 0000266C 7509                <1>     jne .next
   217 0000266E 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   218 00002672 7403                <1>     jz .next    ;IF yes, skip it
   219 00002674 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   220                              <1> .next:
   221 00002677 4881C75B000000      <1>     add rdi, cds_size
   222 0000267E FEC9                <1>     dec cl
   223 00002680 75E6                <1>     jnz .checkCDS
   224                              <1> .exit:
   225 00002682 F8                  <1>     clc
   226                              <1> .exitBad:
   227                              <1>     return
    18                              <2> %%_ret:
    19 00002683 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   228                              <1> 
   229                              <1> ensureDiskValid:
   230                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   231                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   232                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   233                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   234                              <1> .medChk:
   235 00002684 E829010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   236                              <1> ;Return in rbx the req hdr address
   237 00002689 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   238 0000268D E858FEFFFF          <1>     call goDriver   ;Request!
   239 00002692 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   240 00002696 F7C700800000        <1>     test edi, drvErrStatus
   241 0000269C 756C                <1>     jnz .diskDrvCritErrMedChk
   242                              <1> .medChkIgnore:
   243 0000269E 8A05(84C50300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   244 000026A4 30E4                <1>     xor ah, ah
   245 000026A6 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   246 000026A9 84630E              <1>     test byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   247 000026AC 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   248 000026AE 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   249 000026B0 E856E1FFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   250 000026B5 F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   251 000026B6 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   252                              <1>     ;ZF=NZ from test for dirty buffers
   253                              <1> .exit:
   254                              <1>     return
    18                              <2> %%_ret:
    19 000026B8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   255                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   256 000026B9 C605(5ED80300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   257 000026C0 E86AE1FFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   258                              <1>     ;Get a buffer to read BPB into in rdi
   259 000026C5 B101                <1>     mov cl, dosBuffer
   260 000026C7 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   261 000026C9 E883E1FFFF          <1>     call getBuffer ;Get a disk buffer
   262 000026CE 72E8                <1>     jc .exit    ;Immediately exit with the carry flag set
   263 000026D0 4889DF              <1>     mov rdi, rbx
   264                              <1> .repeatEP:
   265 000026D3 E806010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   266 000026D8 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   267 000026DC E809FEFFFF          <1>     call goDriver   ;Request!
   268 000026E1 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   269 000026E5 A900800000          <1>     test eax, drvErrStatus
   270 000026EA 755C                <1>     jnz .diskDrvCritErrBPB
   271                              <1>     ;Now rebuild the dpb fields for this drive
   272 000026EC 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   273 000026F0 E87E070000          <1>     call createDPB  
   274                              <1>     ;Adjust the buffer header information
   275 000026F5 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   276 000026F8 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   277 000026FB 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   278 000026FE 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   279 00002701 30E4                <1>     xor ah, ah
   280 00002703 8825(5ED80300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   281                              <1>     return
    18                              <2> %%_ret:
    19 00002709 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   282                              <1> .diskDrvCritErrMedChk:
   283                              <1> ;Critical Errors fall through here
   284                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   285 0000270A 48893D(72C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   286 00002711 48892D(56C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   287 00002718 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   288 0000271B B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   289 0000271D 8825(C8C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   290 00002723 E8ADFCFFFF          <1>     call criticalDOSError
   291 00002728 488B3D(72C30300)    <1>     mov rdi, qword [xInt44RDI]
   292 0000272F 488B2D(56C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   293 00002736 3C01                <1>     cmp al, critRetry
   294 00002738 0F8446FFFFFF        <1>     je .medChk
   295 0000273E 3C00                <1>     cmp al, critIgnore
   296 00002740 0F8458FFFFFF        <1>     je .medChkIgnore
   297 00002746 F9                  <1>     stc ;Set error flag to indicate fail
   298                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00002747 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   299                              <1> 
   300                              <1> .diskDrvCritErrBPB:
   301                              <1>     ;eax has status word, rbp has dpb ptr
   302                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   303 00002748 C605(C8C30300)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   304 0000274F E818FCFFFF          <1>     call diskDevErr
   305 00002754 3C01                <1>     cmp al, critRetry
   306 00002756 0F8477FFFFFF        <1>     je .repeatEP
   307                              <1>     ;Else we fail (Ignore=Fail here)
   308 0000275C F9                  <1>     stc ;Set error flag to indicate fail
   309                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 0000275D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   310                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   311                              <1> ;           Primitive Driver Requests
   312                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   313                              <1> ;First are Disk requests, then Char device requests
   314                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   315                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   316                              <1> 
   317                              <1> primReqWriteSetup:
   318 0000275E 50                  <1>     push rax
   319 0000275F B408                <1>     mov ah, drvWRITE    ;Command code
   320 00002761 0225(33C30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   321 00002767 EB03                <1>     jmp short primReqRWCommon
   322                              <1> primReqReadSetup:
   323 00002769 50                  <1>     push rax
   324 0000276A B404                <1>     mov ah, drvREAD
   325                              <1> primReqRWCommon:
   326                              <1> ;Sets up the IO request packet with:
   327                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   328                              <1> ; rbx = Data storage buffer ptr
   329                              <1> ; ecx = Number of sectors to transfer
   330                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   331                              <1> ; ~~~~ Set by entry function ~~~~ 
   332                              <1> ; ah = Command code
   333                              <1> ; All regs preserved EXCEPT rbx.
   334                              <1> ; Return: rbx = Transfer Address
   335 0000276C 48891D(2DC40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   336 00002773 890D(35C40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   337 00002779 C605(1FC40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   338 00002780 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   339 00002785 8905(20C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   340 0000278B 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   341 0000278E 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   342                              <1>     ;Disk operations only here!
   343 00002790 488915(39C40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   344 00002797 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   345 0000279A 8805(2CC40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   346 000027A0 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   347 000027A3 8805(20C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   348                              <1> primReqCommonExit:
   349                              <1> ;Returns in rbx the primary request header as these functions
   350                              <1> ; setup the request in the primary request header space
   351 000027A9 58                  <1>     pop rax
   352 000027AA 488D1D(1FC40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   353                              <1>     return
    18                              <2> %%_ret:
    19 000027B1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   354                              <1> 
   355                              <1> primReqMedCheckSetup:
   356                              <1> ;Prepare the diskIO packet for mediacheck
   357                              <1> ;rbp has DPB pointer for device to check media on
   358 000027B2 50                  <1>     push rax
   359 000027B3 C605(1FC40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   360 000027BA 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   361 000027BD 8805(2CC40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   362 000027C3 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   363 000027C6 8805(20C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   364 000027CC C605(21C40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   365 000027D3 66C705(22C40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   365 000027DB 00                  <1>
   366 000027DC EBCB                <1>     jmp short primReqCommonExit
   367                              <1> 
   368                              <1> primReqGetBPBSetup:
   369                              <1> ;rbp has DPB pointer for device
   370                              <1> ;rdi has sector buffer header pointer for transfer
   371 000027DE 50                  <1>     push rax
   372 000027DF 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   373 000027E3 48893D(2DC40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   374 000027EA C605(1FC40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   375 000027F1 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   376 000027F4 8805(2CC40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   377 000027FA 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   378 000027FD 8805(20C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   379 00002803 C605(21C40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   380 0000280A 66C705(22C40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   380 00002812 00                  <1>
   381 00002813 EB94                <1>     jmp short primReqCommonExit
   382                              <1> 
   383                              <1> secdReqCharIOReq:
   384                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   385                              <1> ;Input:
   386                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   387                              <1> ; ecx = Length of buffer
   388                              <1> ; rdi = Buffer pointer
   389                              <1> ;Output: 
   390                              <1> ; rbx = Transfer Address 
   391 00002815 488D1D(F5C30300)    <1>     lea rbx, secdReqHdr
   392 0000281C C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   393 0000281F 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   394 00002822 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   395 00002828 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   396 0000282C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   397                              <1>     return
    18                              <2> %%_ret:
    19 0000282F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   398                              <1> ;If the device which will process this request is a disk device
   399                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   400                              <1> ;Then we will read the appropriate byte from that buffer to the 
   401                              <1> ; singleIOByt buffer.
   402                              <1> ;Such a request will require additional setup with the following fields:
   403                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    34                                  %include "./Source/Kernel/dosUtils.asm"
    35                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    36                              <1> 
    37                              <1> ;Basic Drive related Utilities
    38                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    39                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    40                              <1> ; that gets set up)
    41                              <1> 
    42                              <1> setWorkingDPB:
    43                              <1> ;Gets dpb in rbp and saves to workingDPB
    44 00002830 48892D(85C50300)    <1>     mov qword [workingDPB], rbp
    45                              <1>     return
    18                              <2> %%_ret:
    19 00002837 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> 
    47                              <1> testCDSNet:
    48                              <1> ;Checks if the workingCDS is a redirector drive
    49                              <1> ;Return: rdi = workingCDS
    50                              <1> ;        CF=NC => Net
    51                              <1> ;        CF=CY => Not net or invalid CDS
    52 00002838 488B3D(8DC50300)    <1>     mov rdi, qword [workingCDS]
    53 0000283F 4881FFFFFFFFFF      <1>     cmp rdi, -1
    54 00002846 7409                <1>     je .notNet
    55 00002848 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    56 0000284E 7501                <1>     jnz .notNet ;Carry flag will always be clear
    57                              <1>     return
    18                              <2> %%_ret:
    19 00002850 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    58                              <1> .notNet:
    59 00002851 F9                  <1>     stc
    60                              <1>     return
    18                              <2> %%_ret:
    19 00002852 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    61                              <1> 
    62                              <1> getDiskData:
    63                              <1> ;This function returns:
    64                              <1> ;al = sectors per cluster
    65                              <1> ;ah = media ID byte
    66                              <1> ;ebx = total clusters
    67                              <1> ;cx = bytes per sector
    68                              <1> ;edx = number of available clusters
    69                              <1> ;
    70                              <1> ;If CF=CY on exit, al contains the error code
    71 00002853 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    72 00002858 7308                <1>     jnc .physical
    73                              <1>     ;Beep a redir request out
    74 0000285A B80C110000          <1>     mov eax, 110Ch 
    75 0000285F CD4F                <1>     int 4Fh
    76                              <1>     return
    18                              <2> %%_ret:
    19 00002861 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    77                              <1> .physical:
    78                              <1> ;Now we must lock the structures
    79 00002862 C605(6DC30300)02    <1>     mov byte [errorLocus], eLocDsk
    80 00002869 E8F2020000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    81 0000286E E8C1FDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    82 00002873 7224                <1>     jc .exit
    83 00002875 E8B6FFFFFF          <1>     call setWorkingDPB  ;Set rbp to be the working dpb
    84 0000287A E89AE1FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    85 0000287F 7218                <1>     jc .exit
    86 00002881 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    87 00002884 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    88 00002886 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    89 00002889 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    90 0000288C 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    91 00002890 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    92 00002893 E8D2020000          <1>     call dosCrit1Exit
    93 00002898 F8                  <1>     clc
    94                              <1> .exit:
    95                              <1>     return
    18                              <2> %%_ret:
    19 00002899 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    96                              <1> 
    97                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
    98                              <1> ;Input: al = Interrupt number
    99                              <1> ;Output: rbx = Interrupt Vector
   100 0000289A 50                  <1>     push rax    ;Preserve rax, segment selector returned by call
   101 0000289B 52                  <1>     push rdx    ;Preserve rdx, Attribute Word returned by call
   102 0000289C 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   103 0000289E B807F00000          <1>     mov eax, 0F007h
   104 000028A3 CD35                <1>     int 35h
   105 000028A5 5A                  <1>     pop rdx
   106 000028A6 58                  <1>     pop rax
   107                              <1>     return
    18                              <2> %%_ret:
    19 000028A7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> getUserRegs:   ;Int 4Fh AX=1218h
   110                              <1> ;Returns ptr to user regs in rsi
   111 000028A8 488B35(DAC30300)    <1>     mov rsi, qword [oldRSP]
   112                              <1>     return
    18                              <2> %%_ret:
    19 000028AF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> walkDPBchain:
   115                              <1> ;Called with al = 0 based drive number
   116                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
   117 000028B0 488B35(3BC00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
   118                              <1> .walk:
   119 000028B7 4881FEFFFFFFFF      <1>     cmp rsi, -1
   120 000028BE 740A                <1>     je .exitBad
   121 000028C0 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   122 000028C2 7407                <1>     je .exit    ;Drive found
   123 000028C4 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   124 000028C8 EBED                <1>     jmp short .walk
   125                              <1> .exitBad:
   126 000028CA F9                  <1>     stc
   127                              <1> .exit:
   128                              <1>     return
    18                              <2> %%_ret:
    19 000028CB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   129                              <1> setDrive:   
   130                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
   131                              <1> ;Input: al = 1-based drive number
   132                              <1> ;Output: al = 0-based drive number
   133                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   134                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   135                              <1> ;            set.
   136 000028CC E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   137 000028D1 7212                <1>     jc .exit    ;Carry the CF flag if not Physical
   138 000028D3 56                  <1>     push rsi
   139 000028D4 488B35(8DC50300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   140 000028DB 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   141 000028E1 5E                  <1>     pop rsi
   142 000028E2 7401                <1>     jz .exit
   143 000028E4 F9                  <1>     stc
   144                              <1> .exit:
   145                              <1>     return
    18                              <2> %%_ret:
    19 000028E5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   146                              <1> 
   147                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   148                              <1> ;Allows a redirector or subst/join to build a CDS
   149                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   150                              <1> ; volumes, that are made at system boot.
   151                              <1> ;Input: al = Drive Letter for drive
   152                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   153                              <1> ;Output: rdi = newly filled in workingCDS
   154                              <1> ;CF=NC => CDS valid and has a DPB
   155                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   156 000028E6 50                  <1>     push rax
   157 000028E7 2C40                <1>     sub al, "A"-1
   158 000028E9 3A05(6FC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   159 000028EF 488B3D(8DC50300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   160 000028F6 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   161 000028FC 58                  <1>     pop rax
   162 000028FD 7235                <1>     jb .exit    ;Exit with CF=CY
   163 000028FF 50                  <1>     push rax
   164 00002900 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   165 00002905 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   166 00002907 58                  <1>     pop rax
   167 00002908 66814F430040        <1>     or word [rdi + cds.wFlags], cdsPhysDrive    ;Config bit set
   168 0000290E C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   169 00002915 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   170 0000291D 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   171                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   172 00002923 50                  <1>     push rax
   173 00002924 56                  <1>     push rsi
   174 00002925 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   175 00002927 E884FFFFFF          <1>     call walkDPBchain
   176 0000292C 7204                <1>     jb .skipSettingDPB
   177 0000292E 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   178                              <1> .skipSettingDPB:
   179 00002932 5E                  <1>     pop rsi
   180 00002933 58                  <1>     pop rax
   181                              <1> .exit:
   182                              <1>     return
    18                              <2> %%_ret:
    19 00002934 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   183                              <1> 
   184                              <1> getCDS:     ;Int 4Fh AX=1219h
   185                              <1> ;Gets the device DPB and saves it in the DOS variable
   186                              <1> ;This can be called to get CDS for network drives too!
   187                              <1> ;Input: al = 1 based drive number
   188                              <1> ;Sets workingCDS var with the CDS for the device. 
   189                              <1> ;   If device on a network, sets CF
   190                              <1> ;Returns al with 0-based drive number
   191 00002935 84C0                <1>     test al, al
   192 00002937 7508                <1>     jnz .skip
   193 00002939 8A05(94C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   194 0000293F FEC0                <1>     inc al
   195                              <1> .skip:
   196 00002941 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   197 00002943 56                  <1>     push rsi
   198 00002944 C605(6DC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   199 0000294B F605(81C50300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   200 00002952 7423                <1>     jz .physDrive
   201                              <1>     ;Invokation via 21/5D00, not yet fully supported
   202                              <1>     ;If returned with CF=CY, consider it an error for now
   203 00002954 50                  <1>     push rax
   204 00002955 57                  <1>     push rdi
   205 00002956 488D3D(9DC50300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   206 0000295D 48893D(8DC50300)    <1>     mov qword [workingCDS], rdi ;Make it current
   207 00002964 0441                <1>     add al, "A" ;Convert to a drive letter
   208 00002966 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   209 0000296B 66F747430040        <1>     test word [rdi + cds.wFlags], cdsPhysDrive  ;Is the CDS valid?
   210 00002971 5F                  <1>     pop rdi
   211 00002972 58                  <1>     pop rax
   212 00002973 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   213 00002975 EB17                <1>     jmp short .exitOk   ;All oki
   214                              <1> .physDrive:
   215 00002977 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   216 0000297C 7208                <1>     jc .exitBad
   217 0000297E 66F746430040        <1>     test word [rsi + cds.wFlags], cdsPhysDrive
   218 00002984 7508                <1>     jnz .exitOk ;Exit with flag cleared
   219                              <1>     ;Else Return to unknown error locus
   220                              <1> .exitBad:
   221 00002986 C605(6DC30300)01    <1>     mov byte [errorLocus], eLocUnk
   222                              <1> .exitBad1:
   223 0000298D F9                  <1>     stc
   224                              <1> .exitOk:
   225 0000298E 5E                  <1>     pop rsi
   226                              <1>     return
    18                              <2> %%_ret:
    19 0000298F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   229                              <1>     ;Gets the CDS for the current drive in al
   230                              <1>     ;Input: al = Drive number, 0 = A ...
   231                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   232                              <1>     ;        CF=CY => al not valid
   233 00002990 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
   234 00002996 7202                <1>     jb .ctn
   235 00002998 F9                  <1>     stc 
   236                              <1>     return
    18                              <2> %%_ret:
    19 00002999 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   237                              <1> .ctn:
   238 0000299A 50                  <1>     push rax
   239 0000299B 52                  <1>     push rdx
   240 0000299C 0FB6C0              <1>     movzx eax, al
   241 0000299F 48BE5B000000000000- <1>     mov rsi, cds_size
   241 000029A8 00                  <1>
   242 000029A9 31D2                <1>     xor edx, edx
   243 000029AB F7E6                <1>     mul esi ;Get the multiples of CDS's to skip
   244 000029AD 488D05(5DC00300)    <1>     lea rax, qword [cdsHeadPtr] ;Get the first CDS
   245 000029B4 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   246 000029B7 488935(8DC50300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   247 000029BE 5A                  <1>     pop rdx
   248 000029BF 58                  <1>     pop rax
   249 000029C0 F8                  <1>     clc
   250                              <1>     return
    18                              <2> %%_ret:
    19 000029C1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   251                              <1> 
   252                              <1> 
   253                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   254                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   255                              <1> ;Input: AL = Char to normalise.
   256                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   257                              <1> ;If path separator, set ZF=ZE
   258 000029C2 3C5C                <1>     cmp al, "\"
   259 000029C4 7406                <1>     je .exit
   260 000029C6 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   261 000029C8 7502                <1>     jne .exit
   262 000029CA B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   263                              <1> .exit:
   264                              <1>     return
    18                              <2> %%_ret:
    19 000029CC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   265                              <1> 
   266                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   267                              <1> ;Convert a lowercase char to uppercase
   268                              <1> ; Leave alone uppercase chars and invalid chars
   269                              <1> ;Input: al = Char to convert to uppercase
   270                              <1> ;Output: al = Processed char
   271 000029CD 3C7A                <1>     cmp al, "z"
   272 000029CF 7706                <1>     ja .exit
   273 000029D1 3C61                <1>     cmp al, "a"
   274 000029D3 7202                <1>     jb .exit
   275 000029D5 2C20                <1>     sub al, "a" - "A"   ;Convert the char
   276                              <1> .exit:
   277                              <1>     return
    18                              <2> %%_ret:
    19 000029D7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    35                                  %include "./Source/Kernel/dosMain.asm"
    36                              <1> ;-----------------------------------:
    37                              <1> ;        Main Kernel dispatch       :
    38                              <1> ;            and routines           :
    39                              <1> ;-----------------------------------:
    40                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    41                              <1> ;ah = Function number, all other registers have various meanings
    42                              <1>  %if DEBUG
    43                              <1>     ;Entry function
    44                              <1>     debugEnterM
    45                              <1>     lea rbp, .l0000
    46                              <1>     call debPrintNullString
    47                              <1>     call debPrintFunctionName
    48                              <1>     jmp short .l0001
    49                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    50                              <1> .l0001:    
    51                              <1>     debugExitM
    52                              <1>     %endif
    53 000029D8 FA                  <1>     cli ;Halt external interrupts
    54 000029D9 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    55 000029DA 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    56 000029DD 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    57                              <1>     ;Cherry pick functions
    58 000029E3 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    59 000029E6 722C                <1>     jb .fsbegin   ;If below skip these checks
    60 000029E8 0F8459020000        <1>     je ctrlBreakCheck
    61 000029EE 80FC64              <1>     cmp ah, 64h
    62 000029F1 0F8499020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    63 000029F7 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    64 000029F9 80FC51              <1>     cmp ah, 51h
    65 000029FC 0F847C020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    66 00002A02 80FC62              <1>     cmp ah, 62h
    67 00002A05 0F847C020000        <1>     je getPSPaddr          ;Calls the above function
    68 00002A0B 80FC50              <1>     cmp ah, 50h
    69 00002A0E 0F8461020000        <1>     je setCurrProcessID
    70                              <1> .fsbegin:
    71 00002A14 E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    72 00002A19 48891D(E2C30300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    73 00002A20 66C705(A6C30300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    73 00002A28 00                  <1>
    74 00002A29 488B05(DAC30300)    <1>     mov rax, qword [oldRSP]
    75 00002A30 488905(CAC30300)    <1>     mov qword [oldoldRSP], rax
    76 00002A37 FE05(6BC30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    77 00002A3D 488925(DAC30300)    <1>     mov qword [oldRSP], rsp
    78                              <1> ;Network related variable resetting
    79 00002A44 C605(81C50300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    80                              <1> ;Here, we want to save oldRSP in the callers PSP
    81 00002A4B 803D(6BC30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    82 00002A52 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    83 00002A54 488B05(82C30300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    84 00002A5B 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    85                              <1> .fsb1:
    86 00002A5F 58                  <1>     pop rax     ;Get old rax back
    87 00002A60 50                  <1>     push rax    ;and push it back onto the stack
    88                              <1> .abortEP:
    89                              <1> .charFun0CEP:
    90 00002A61 488D25(87CB0300)    <1>     lea rsp, critStakTop
    91 00002A68 FB                  <1>     sti         ;Reenable interrupts
    92                              <1> 
    93 00002A69 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    94 00002A6B 881D(F2C30300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    95 00002A71 C605(F3C30300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    96 00002A78 881D(C9C30300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
    97 00002A7E 881D(EAC30300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    98                              <1> 
    99 00002A84 50                  <1>     push rax        ;Save rax to use temporarily as table base 
   100 00002A85 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   101 00002A87 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   102 00002A89 488D0510D7FFFF      <1>     lea rax, kDispTbl
   103 00002A90 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   104 00002A93 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   105 00002A97 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   106 00002A9A 58                  <1>     pop rax
   107                              <1> 
   108 00002A9B 84E4                <1>     test ah, ah     ;Simple Terminate function?
   109 00002A9D 741C                <1>     jz .fddiskOp
   110 00002A9F 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   111 00002AA2 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   112 00002AA4 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   113 00002AA7 7712                <1>     ja .fddiskOp
   114                              <1> ;Char operations here
   115 00002AA9 F605(6AC30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   116 00002AB0 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   117 00002AB2 488D25(16D20300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   118 00002AB9 EB40                <1>     jmp short .fdGoToFunction
   119                              <1> .fddiskOp:
   120                              <1>     ;Disk operations go here
   121                              <1>     ;Save rax on entry to a disk funciton
   122 00002ABB 488905(96C30300)    <1>     mov qword [oldRAX], rax
   123                              <1>     ;Clear up error info
   124 00002AC2 C605(6DC30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   125 00002AC9 C605(6AC30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   126 00002AD0 C605(6CC30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   127                              <1> 
   128 00002AD7 50                  <1>     push rax
   129 00002AD8 B482                <1>     mov ah, 82h ;Cancel all critical section!
   130 00002ADA CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   131 00002ADC 58                  <1>     pop rax
   132                              <1> 
   133 00002ADD C605(F3C30300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   134 00002AE4 488D25(56D80300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   135 00002AEB F605(95C30300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   136 00002AF2 7407                <1>     jz .fdGoToFunction
   137                              <1> ; HANDLE CTRL+BREAK HERE!
   138 00002AF4 50                  <1>     push rax
   139 00002AF5 E84AE7FFFF          <1>     call checkBreak   ; Check for a ^C
   140 00002AFA 58                  <1>     pop rax
   141                              <1> .fdGoToFunction:
   142 00002AFB 48871D(E2C30300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   143                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   144                              <1>     ;
   145                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   146                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   147                              <1>     ;
   148                              <1>     %if DEBUG && REGS
   149                              <1>     ;Print stack if necessary function
   150                              <1>     debugEnterM
   151                              <1>     call debPrintDOSStack
   152                              <1>     debugExitM
   153                              <1>     %endif
   154 00002B02 FF15(E2C30300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   155                              <1>     %if DEBUG
   156                              <1>     ;Entry function
   157                              <1>     debugEnterM
   158                              <1>     lea rbp, .l0002
   159                              <1>     call debPrintNullString
   160                              <1>     jmp short .l0003
   161                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   162                              <1> .l0003:    
   163                              <1>     debugExitM
   164                              <1>     %endif
   165                              <1>     %if DEBUG && REGS
   166                              <1>     ;Exit function
   167                              <1>     debugEnterM
   168                              <1>     call debPrintDOSStack
   169                              <1>     debugExitM
   170                              <1>     %endif
   171                              <1> .fdExit:
   172 00002B08 FA                  <1>     cli     ;Redisable interrupts
   173 00002B09 FE0D(6BC30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   174 00002B0F 488B25(DAC30300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   175 00002B16 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   176 00002B19 488B05(CAC30300)    <1>     mov rax, qword [oldoldRSP]
   177 00002B20 488905(DAC30300)    <1>     mov qword [oldRSP], rax
   178 00002B27 E806000000          <1>     call dosPopRegs  ;Pop the frame
   179 00002B2C 48CF                <1>     iretq
   180                              <1> .fdExitBad:
   181 00002B2E 30C0                <1>     xor al, al
   182                              <1> defaultIretq:
   183 00002B30 48CF                <1>     iretq
   184                              <1> dosPopRegs:
   185 00002B32 8F05(D2C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   186 00002B38 58                  <1>     pop rax
   187 00002B39 5B                  <1>     pop rbx
   188 00002B3A 59                  <1>     pop rcx
   189 00002B3B 5A                  <1>     pop rdx
   190 00002B3C 5E                  <1>     pop rsi
   191 00002B3D 5F                  <1>     pop rdi
   192 00002B3E 5D                  <1>     pop rbp
   193 00002B3F 4158                <1>     pop r8
   194 00002B41 4159                <1>     pop r9
   195 00002B43 FF25(D2C30300)      <1>     jmp qword [dosReturn]
   196                              <1> dosPushRegs:
   197 00002B49 8F05(D2C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   198 00002B4F 4151                <1>     push r9
   199 00002B51 4150                <1>     push r8
   200 00002B53 55                  <1>     push rbp
   201 00002B54 57                  <1>     push rdi
   202 00002B55 56                  <1>     push rsi
   203 00002B56 52                  <1>     push rdx
   204 00002B57 51                  <1>     push rcx
   205 00002B58 53                  <1>     push rbx
   206 00002B59 50                  <1>     push rax
   207 00002B5A FF25(D2C30300)      <1>     jmp qword [dosReturn]
   208                              <1> dosCrit1Enter:
   209                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    18                              <2> %%_ret:
    19 00002B60 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   210 00002B61 B801800000          <1>     mov eax, 8001h
   211 00002B66 CD4A                <1>     int 4ah
   212 00002B68 58                  <1>     pop rax
   213                              <1>     return
    18                              <2> %%_ret:
    19 00002B69 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   214                              <1> dosCrit1Exit:
   215                              <1>     return
    18                              <2> %%_ret:
    19 00002B6A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   216 00002B6B B801810000          <1>     mov eax, 8101h
   217 00002B70 CD4A                <1>     int 4ah
   218 00002B72 58                  <1>     pop rax
   219                              <1>     return
    18                              <2> %%_ret:
    19 00002B73 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   220                              <1> dosCrit2Enter:
   221                              <1>     return
    18                              <2> %%_ret:
    19 00002B74 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   222 00002B75 B802800000          <1>     mov eax, 8002h
   223 00002B7A CD4A                <1>     int 4ah
   224 00002B7C 58                  <1>     pop rax
   225                              <1>     return
    18                              <2> %%_ret:
    19 00002B7D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   226                              <1> dosCrit2Exit:
   227                              <1>     return
    18                              <2> %%_ret:
    19 00002B7E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   228 00002B7F B802810000          <1>     mov eax, 8102h
   229 00002B84 CD4A                <1>     int 4ah
   230 00002B86 58                  <1>     pop rax
   231                              <1>     return
    18                              <2> %%_ret:
    19 00002B87 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   232                              <1> extErrExit:
   233                              <1> ;The extended error exit from DOS
   234                              <1> ;Jumped to with AL=Extended error code
   235                              <1> ;Can be called too.
   236                              <1> ;Input: al = Extended error code
   237                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   238                              <1> ;   Returns with: eax = xLat Error
   239                              <1> ;                 rsi = callerFrame
   240 00002B88 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   241 00002B8B E813000000          <1>     call xLatError
   242 00002B90 E891000000          <1>     call checkFail
   243 00002B95 E80EFDFFFF          <1>     call getUserRegs
   244 00002B9A 668906              <1>     mov word [rsi + callerFrame.rax], ax
   245 00002B9D 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   246 00002BA1 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   247                              <1>     return
    18                              <2> %%_ret:
    19 00002BA2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   248                              <1> xLatError:
   249                              <1> ;Translates the error code given in ax and sets error code in the var
   250                              <1> ; Input: ax = Extended Error Code
   251                              <1> ; Output: ax = Potentially translated Error Code
   252                              <1> ;         [errorExCde] = Original Error Code
   253                              <1> ;Preserves all registers except ax
   254                              <1> ;AH is always returned as 0
   255 00002BA3 53                  <1>     push rbx
   256 00002BA4 51                  <1>     push rcx
   257 00002BA5 56                  <1>     push rsi
   258 00002BA6 668905(6EC30300)    <1>     mov word [errorExCde], ax
   259 00002BAD 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   260 00002BAF 488D35DAD4FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   261                              <1> .readEntry:
   262 00002BB6 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   263 00002BB8 3CFF                <1>     cmp al, -1
   264 00002BBA 741F                <1>     je .skipXlat
   265 00002BBC 3A05(97C30300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   266 00002BC2 7408                <1>     je .found
   267                              <1>     ;Here, entry not found, goto next entry
   268 00002BC4 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   269 00002BC7 4801C6              <1>     add rsi, rax    ;Goto next entry
   270 00002BCA EBEA                <1>     jmp short .readEntry
   271                              <1> .found:
   272                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   273 00002BCC 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   274                              <1> .mainSearch:
   275 00002BCF AC                  <1>     lodsb   ;Get one byte into al
   276 00002BD0 38C3                <1>     cmp bl, al  ;Check against the error code
   277 00002BD2 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   278 00002BD4 FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   279 00002BD6 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   280                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   281 00002BD8 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   282                              <1> .skipXlat:
   283 00002BDB 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   284 00002BDD 5E                  <1>     pop rsi
   285 00002BDE 59                  <1>     pop rcx
   286 00002BDF 5B                  <1>     pop rbx
   287                              <1>     return
    18                              <2> %%_ret:
    19 00002BE0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   288                              <1> setErrorVars:
   289                              <1> ;Looks up the error code in the variable and sets the other error vars
   290                              <1> ;Called with the lookup table in rsi
   291                              <1> ;All regs preserved
   292 00002BE1 50                  <1>     push rax
   293 00002BE2 53                  <1>     push rbx
   294 00002BE3 51                  <1>     push rcx
   295 00002BE4 56                  <1>     push rsi
   296 00002BE5 0FB71D(6EC30300)    <1>     movzx ebx, word [errorExCde]
   297 00002BEC B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   298                              <1> .readEntry:
   299 00002BF1 AD                  <1>     lodsd   ;Read the dword table entry into eax
   300 00002BF2 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   301 00002BF7 7428                <1>     je .exit    
   302 00002BF9 38D8                <1>     cmp al, bl  ;Compare the error codes
   303 00002BFB 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   304 00002BFD D3E8                <1>     shr eax, cl
   305 00002BFF 3CFF                <1>     cmp al, -1
   306 00002C01 7406                <1>     je .skipClass
   307 00002C03 8805(71C30300)      <1>     mov byte [errorClass], al
   308                              <1> .skipClass:
   309 00002C09 D3E8                <1>     shr eax, cl
   310 00002C0B 3CFF                <1>     cmp al, -1
   311 00002C0D 7406                <1>     je .skipAct
   312 00002C0F 8805(70C30300)      <1>     mov byte [errorAction], al
   313                              <1> .skipAct:
   314 00002C15 D3E8                <1>     shr eax, cl
   315 00002C17 3CFF                <1>     cmp al, -1
   316 00002C19 7406                <1>     je .exit
   317 00002C1B 8805(6DC30300)      <1>     mov byte [errorLocus], al
   318                              <1> .exit:
   319 00002C21 5E                  <1>     pop rsi
   320 00002C22 59                  <1>     pop rcx
   321 00002C23 5B                  <1>     pop rbx
   322 00002C24 58                  <1>     pop rax
   323                              <1>     return
    18                              <2> %%_ret:
    19 00002C25 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   324                              <1> checkFail:
   325                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   326                              <1> ; and swaps the var error code if so
   327 00002C26 803D(C9C30300)00    <1>     cmp byte [Int44Fail], 0
   328 00002C2D 7509                <1>     jnz .skipFail
   329 00002C2F 66C705(6EC30300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   329 00002C37 00                  <1>
   330                              <1> .skipFail:
   331 00002C38 56                  <1>     push rsi
   332 00002C39 488D35ECD4FFFF      <1>     lea rsi, extErrTbl
   333 00002C40 E89CFFFFFF          <1>     call setErrorVars
   334 00002C45 5E                  <1>     pop rsi
   335                              <1>     return
    18                              <2> %%_ret:
    19 00002C46 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   336                              <1> ;========================================:
   337                              <1> ;      Reentrant Kernel Functions        :
   338                              <1> ;========================================:
   339                              <1> ctrlBreakCheck:    ;ah = 33h
   340 00002C47 84C0                <1>     test al, al
   341 00002C49 7508                <1>     jnz .cbcget  ;Get the state or other functions
   342 00002C4B 8A15(95C30300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   343 00002C51 48CF                <1>     iretq
   344                              <1> .cbcget:
   345 00002C53 3C02                <1>     cmp al, 02h
   346 00002C55 771A                <1>     ja .cbcBad
   347 00002C57 740D                <1>     jz .cbcxchg ;Function 2
   348 00002C59 52                  <1>     push rdx
   349 00002C5A 80E201              <1>     and dl, 1   ;Get only the bottom bit
   350 00002C5D 8815(95C30300)      <1>     mov byte [breakFlag], dl    ;Set the state
   351 00002C63 5A                  <1>     pop rdx
   352 00002C64 48CF                <1>     iretq
   353                              <1> .cbcxchg:
   354 00002C66 80E201              <1>     and dl, 1
   355 00002C69 8615(95C30300)      <1>     xchg byte [breakFlag], dl
   356 00002C6F 48CF                <1>     iretq
   357                              <1> .cbcBad:
   358 00002C71 B0FF                <1>     mov al, -1
   359 00002C73 48CF                <1>     iretq
   360                              <1> 
   361                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   362 00002C75 48891D(82C30300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   363 00002C7C 48CF                <1>     iretq
   364                              <1> 
   365                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   366 00002C7E 488B15(82C30300)    <1>     mov rdx, qword [currentPSP]
   367 00002C85 48CF                <1>     iretq
   368                              <1> 
   369                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   370 00002C87 488B15(82C30300)    <1>     mov rdx, qword [currentPSP]
   371 00002C8E 48CF                <1>     iretq
   372                              <1> 
   373                              <1> setDriverLookahead:;ah = 64h, reserved
   374 00002C90 48CF                <1>     iretq
   375                              <1> 
   376                              <1> ;========================================:
   377                              <1> ;            Kernel Functions            :
   378                              <1> ;========================================:
   379                              <1> diskReset:         ;ah = 0Dh
   380                              <1> ;Flush all dirty buffers to disk
   381 00002C92 E8C9FEFFFF          <1>     call dosCrit1Enter
   382 00002C97 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   383                              <1> .drCheckBuffer:
   384 00002C9E F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   385 00002CA2 7407                <1>     jz .drGotoNextBuffer
   386                              <1> .drFlushBuffer:
   387 00002CA4 E89BDAFFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   388 00002CA9 720C                <1>     jc .drExit
   389                              <1> .drGotoNextBuffer:
   390 00002CAB 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   391 00002CAE 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   392 00002CB5 75E7                <1>     jne .drCheckBuffer
   393                              <1> .drExit:
   394 00002CB7 E8AEFEFFFF          <1>     call dosCrit1Exit
   395 00002CBC B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   396 00002CC1 CD4F                <1>     int 4fh
   397                              <1>     return
    18                              <2> %%_ret:
    19 00002CC3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> selectDisk:        ;ah = 0Eh
   400                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   401 00002CC4 88D0                <1>     mov al, dl
   402 00002CC6 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   403 00002CC8 E8FFFBFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   404 00002CCD 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   405 00002CCF 8805(94C30300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   406                              <1> .skipSettingCurrent:
   407 00002CD5 0FB605(70C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   408                              <1>     return
    18                              <2> %%_ret:
    19 00002CDC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   409                              <1> 
   410                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   411 00002CDD 8A05(94C30300)      <1>     mov al, byte [currentDrv]
   412                              <1>     return
    18                              <2> %%_ret:
    19 00002CE3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   413                              <1> 
   414                              <1> FATinfoDefault:    ;ah = 1Bh
   415 00002CE4 30D2                <1>     xor dl, dl
   416                              <1> FATinfoDevice:     ;ah = 1Ch
   417                              <1> ;Input: dl = 1 based drive number
   418                              <1> ;Output:
   419                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   420                              <1> ;cx = bytes per sector
   421                              <1> ;edx = total number of clusters
   422                              <1> ;rbx = Ptr to media ID byte
   423 00002CE6 84D2                <1>     test dl, dl
   424 00002CE8 7508                <1>     jnz .fidSkipdefault
   425 00002CEA 8A15(94C30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   426 00002CF0 FEC2                <1>     inc dl
   427                              <1> .fidSkipdefault:
   428 00002CF2 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   429                              <1> ;Walk the dpb chain manually
   430 00002CF4 88D0                <1>     mov al, dl  ;Move drive number into al
   431 00002CF6 E83AFCFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   432 00002CFB 7307                <1>     jnc .fidCDSFound
   433 00002CFD B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   434 00002D02 EB2E                <1>     jmp short .error 
   435                              <1> .fidCDSFound:
   436 00002D04 E84AFBFFFF          <1>     call getDiskData
   437 00002D09 7227                <1>     jc .error
   438                              <1> ;Now we have that:
   439                              <1> ;al = sectors per cluster
   440                              <1> ;ah = media ID byte
   441                              <1> ;ebx = total clusters
   442                              <1> ;cx = bytes per sector
   443                              <1> ;edx = number of available clusters
   444 00002D0B E898FBFFFF          <1>     call getUserRegs
   445 00002D10 8825(5EC60300)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   446 00002D16 30E4                <1>     xor ah, ah
   447 00002D18 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   448 00002D1B 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   449 00002D1F 488D1D(5EC60300)    <1>     lea rbx, mediaByte
   450 00002D26 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   451 00002D2A 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   452                              <1> .badExit:
   453 00002D2E 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   454                              <1>     return
    18                              <2> %%_ret:
    19 00002D31 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   455                              <1> .error:
   456 00002D32 E851FEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   457 00002D37 66B8FFFF            <1>     mov ax, -1
   458 00002D3B EBF1                <1>     jmp short .badExit
   459                              <1> 
   460                              <1> setIntVector:      ;ah = 25h
   461                              <1> ;Called with:
   462                              <1> ;   rdx = Pointer to interrupt handler
   463                              <1> ;   al = Interrupt number
   464 00002D3D 50                  <1>     push rax    ;Preserve all registers in call
   465 00002D3E 51                  <1>     push rcx
   466 00002D3F 52                  <1>     push rdx
   467 00002D40 56                  <1>     push rsi
   468 00002D41 55                  <1>     push rbp
   469 00002D42 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   470 00002D44 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   471                              <1> ;First call to get default BIOS segement selector and attribute word
   472 00002D4A 88C3                <1>     mov bl, al  ;Set interrupt number 
   473 00002D4C B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   474 00002D51 CD35                <1>     int 35h
   475 00002D53 E850FBFFFF          <1>     call getUserRegs
   476 00002D58 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   477 00002D5C 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   478 00002D5E 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   479                              <1> ;dx preserves the attribute word
   480 00002D60 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   481 00002D65 CD35                <1>     int 35h
   482 00002D67 5D                  <1>     pop rbp
   483 00002D68 5E                  <1>     pop rsi
   484 00002D69 5A                  <1>     pop rdx
   485 00002D6A 59                  <1>     pop rcx
   486 00002D6B 58                  <1>     pop rax
   487                              <1>     return
    18                              <2> %%_ret:
    19 00002D6C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   488                              <1> 
   489                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   490 00002D6D 8805(33C30300)      <1>     mov byte [verifyFlag], al
   491 00002D73 8025(33C30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   492                              <1>     return
    18                              <2> %%_ret:
    19 00002D7A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   493                              <1> getDOSversion:     ;ah = 30h
   494 00002D7B E828FBFFFF          <1>     call getUserRegs
   495 00002D80 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   496 00002D82 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   497 00002D85 668B0574D2FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   498 00002D8C 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   499                              <1>     return
    18                              <2> %%_ret:
    19 00002D8F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   502                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   503 00002D90 30D2                <1>     xor dl, dl
   504                              <1> getDeviceDPBptr:   ;ah = 32h
   505                              <1> ;On entry: dl = Drive number
   506                              <1> ;On exit: rbx = DPB pointer
   507 00002D92 84D2                <1>     test dl, dl
   508 00002D94 7508                <1>     jnz .gddpskipdefault
   509 00002D96 8A15(94C30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   510 00002D9C FEC2                <1>     inc dl
   511                              <1> .gddpskipdefault:
   512                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   513 00002D9E FECA                <1>     dec dl
   514 00002DA0 88D0                <1>     mov al, dl
   515 00002DA2 E88EFBFFFF          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   516 00002DA7 722C                <1>     jc .bad
   517 00002DA9 488B3D(8DC50300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   518 00002DB0 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   519 00002DB6 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   520                              <1>     ;Here ONLY if accessing critical Disk data structures
   521 00002DB8 E8A3FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   522 00002DBD E872F8FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   523 00002DC2 E8A3FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   524 00002DC7 720C                <1>     jc .bad
   525 00002DC9 E8DAFAFFFF          <1>     call getUserRegs
   526 00002DCE 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   527 00002DD2 30C0                <1>     xor al, al
   528                              <1>     return
    18                              <2> %%_ret:
    19 00002DD4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   529                              <1> .bad:
   530 00002DD5 B0FF                <1>     mov al, -1
   531                              <1>     return
    18                              <2> %%_ret:
    19 00002DD7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   532                              <1> 
   533                              <1> getInDOSflagPtr:   ;ah = 34h
   534 00002DD8 488D15(6BC30300)    <1>     lea rdx, inDOS
   535 00002DDF E8C4FAFFFF          <1>     call getUserRegs
   536 00002DE4 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   537                              <1>     return
    18                              <2> %%_ret:
    19 00002DE8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   538                              <1> 
   539                              <1> getIntVector:      ;ah = 35h
   540                              <1> ;Called with:
   541                              <1> ;   al = Interrupt Number
   542                              <1> ;Returns:
   543                              <1> ;   rbx = Pointer to interrupt handler
   544 00002DE9 E8ACFAFFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   545 00002DEE E8B5FAFFFF          <1>     call getUserRegs
   546 00002DF3 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   547 00002DF7 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   548                              <1>     return
    18                              <2> %%_ret:
    19 00002DF9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   549                              <1> 
   550                              <1> getDiskFreeSpace:  ;ah = 36h
   551                              <1> ;Input: Drive number in dl (0 = Current)
   552                              <1> ;Output:    ax = sectors per cluster
   553                              <1> ;           ebx = number of free clusters
   554                              <1> ;           cx = bytes per sector
   555                              <1> ;           edx = total clusters on drive
   556 00002DFA 84D2                <1>     test dl, dl
   557 00002DFC 7508                <1>     jnz .gdfsSkipdefault
   558 00002DFE 8A15(94C30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   559 00002E04 FEC2                <1>     inc dl
   560                              <1> .gdfsSkipdefault:
   561 00002E06 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   562 00002E08 88D0                <1>     mov al, dl
   563 00002E0A E826FBFFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   564 00002E0F 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   565                              <1> ;Else, we at an error.
   566                              <1> ;Simply return with CY set and error code in al with extended error info
   567 00002E11 B80F000000          <1>     mov eax, errBadDrv
   568 00002E16 E86DFDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   569                              <1>     ;extErrExit sets rsi to caller regs
   570 00002E1B 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   571                              <1>     return
    18                              <2> %%_ret:
    19 00002E20 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   572                              <1> .gdfsCDSFound:
   573 00002E21 E82DFAFFFF          <1>     call getDiskData
   574 00002E26 7219                <1>     jc .error
   575                              <1> ;Now we have that:
   576                              <1> ;al = sectors per cluster
   577                              <1> ;ah = media ID byte
   578                              <1> ;ebx = total clusters
   579                              <1> ;cx = bytes per sector
   580                              <1> ;edx = number of available clusters
   581 00002E28 E87BFAFFFF          <1>     call getUserRegs
   582 00002E2D 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   583 00002E2F 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   584 00002E32 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   585 00002E36 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   586 00002E39 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   587                              <1> .badExit:
   588 00002E3D 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   589                              <1>     return
    18                              <2> %%_ret:
    19 00002E40 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   590                              <1> .error:
   591 00002E41 E842FDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   592 00002E46 66B8FFFF            <1>     mov ax, -1
   593 00002E4A EBF1                <1>     jmp short .badExit
   594                              <1> 
   595                              <1> 
   596                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   597 00002E4C 31C0                <1>     xor eax, eax
   598 00002E4E 668705(92C30300)    <1>     xchg ax, word [errorLevel]
   599 00002E55 E84EFAFFFF          <1>     call getUserRegs
   600 00002E5A 668906              <1>     mov word [rsi + callerFrame.rax], ax
   601 00002E5D 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  
   602                              <1>     return
    18                              <2> %%_ret:
    19 00002E61 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   603                              <1> 
   604                              <1> getSysVarsPtr:     ;ah = 52h
   605 00002E62 488D15(33C00300)    <1>     lea rdx, sysVarsPtr
   606 00002E69 E83AFAFFFF          <1>     call getUserRegs
   607 00002E6E 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   608                              <1>     return
    18                              <2> %%_ret:
    19 00002E72 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   609                              <1> 
   610                              <1> 
   611                              <1> ;AH = 53h - CREATE DPB
   612                              <1> createDPB:         ;generates a DPB from a given BPB
   613                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   614                              <1> ;This is done so that the other fields of the DPB can be recycled
   615                              <1> ;Input: rsi = ptr to the BPB
   616                              <1> ;       rbp = ptr to the DPB
   617                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   618                              <1> ;bMediaDescriptor
   619 00002E73 8A4615              <1>     mov al, byte [rsi + bpb.media]
   620 00002E76 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   621                              <1> ;dFirstFreeCluster
   622 00002E79 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   623                              <1> ;dNumberOfFreeClusters
   624 00002E80 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   625                              <1> ;wBytesPerSector
   626 00002E87 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   627 00002E8B 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   628                              <1> ;bMaxSectorInCluster
   629 00002E8F 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   630 00002E92 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   631 00002E94 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   632                              <1> ;bSectorsPerClusterShift
   633 00002E97 FEC0                <1>     inc al
   634 00002E99 30C9                <1>     xor cl, cl
   635                              <1> .cd2:
   636 00002E9B D0E8                <1>     shr al, 1
   637 00002E9D 7404                <1>     jz .cd3
   638 00002E9F FEC1                <1>     inc cl
   639 00002EA1 EBF8                <1>     jmp short .cd2
   640                              <1> .cd3:
   641 00002EA3 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   642                              <1> ;wFAToffset, number of reserved sectors in partition
   643 00002EA6 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   644 00002EAA 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   645                              <1> ;bNumberOfFATs
   646 00002EAE 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   647 00002EB1 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   648                              <1> ;wNumberRootDirSectors
   649 00002EB4 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   650 00002EB8 C1E005              <1>     shl eax, 5  ;Multiply by 32
   651 00002EBB 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   652 00002EBF FFC9                <1>     dec ecx
   653 00002EC1 01C8                <1>     add eax, ecx
   654 00002EC3 31D2                <1>     xor edx, edx    ;Clear for divide
   655 00002EC5 F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   656 00002EC7 66894509            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   657                              <1> ;dFATlength, get the FAT length
   658 00002ECB 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   659 00002ECF 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   660 00002ED2 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   661 00002ED4 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   662 00002ED7 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   663                              <1> ;Complex cases below...
   664                              <1> ;dClusterHeapOffset, start sector of the data area
   665 00002EDA 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   666 00002EDE 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   667 00002EE1 85C0                <1>     test eax, eax
   668 00002EE3 0F44C3              <1>     cmovz eax, ebx
   669                              <1> ;eax = FATsz
   670 00002EE6 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   671 00002EEA 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   672 00002EED 85DB                <1>     test ebx, ebx
   673 00002EEF 0F44D9              <1>     cmovz ebx, ecx 
   674                              <1> ;ebx = TotSec
   675 00002EF2 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   676 00002EF5 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   677                              <1> .cd4:
   678 00002EF7 01C2                <1>     add edx, eax
   679 00002EF9 FEC9                <1>     dec cl
   680 00002EFB 75FA                <1>     jnz .cd4
   681 00002EFD 89D0                <1>     mov eax, edx    ;Store product in eax
   682 00002EFF 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   683 00002F03 01D0                <1>     add eax, edx
   684 00002F05 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   685 00002F09 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   686                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   687                              <1>     ;aka eax = Start sector of the data area in volume
   688 00002F0B 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   689                              <1> ;dClusterCount
   690 00002F0E 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   691 00002F10 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   692 00002F12 31D2                <1>     xor edx, edx
   693 00002F14 BB01000000          <1>     mov ebx, 1
   694 00002F19 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   695 00002F1C D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   696 00002F1E F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   697 00002F20 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   698 00002F22 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   699                              <1> ;dFirstUnitOfRootDir
   700 00002F25 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   701 00002F2A 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   702 00002F2D 7709                <1>     ja .cd5
   703                              <1>     ;Else, we need to find the first sector of the root directory
   704                              <1>     ;Get the start sector of data area in volume 
   705                              <1>     ; and sub the number of sectors in the root directory
   706 00002F2F 8B450B              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   707 00002F32 0FB75D09            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   708 00002F36 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   709                              <1> .cd5:
   710 00002F38 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   711                              <1> ;Exit epilogue
   712 00002F3B 488B1D(DAC30300)    <1>     mov rbx, qword [oldRSP]
   713 00002F42 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   714                              <1>     %if DEBUG && DPBINFO
   715                              <1>     ;Print DPB 
   716                              <1>     debugEnterM
   717                              <1>     push rbp
   718                              <1>     lea rbp, .l0000
   719                              <1>     call debPrintNullString
   720                              <1>     pop rbp
   721                              <1>     call debDPBBPBptr
   722                              <1>     call debMakeDebuggerRespond
   723                              <1>     jmp short .l0001
   724                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   725                              <1> .l0001:
   726                              <1>     debugExitM
   727                              <1>     %endif
   728                              <1>     return
    18                              <2> %%_ret:
    19 00002F44 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   729                              <1> 
   730                              <1> getVerifySetting:  ;ah = 54h
   731 00002F45 8A05(33C30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   732                              <1>     return
    18                              <2> %%_ret:
    19 00002F4B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   733                              <1> 
   734                              <1> getExtendedError:  ;ah = 59h
   735 00002F4C E857F9FFFF          <1>     call getUserRegs
   736 00002F51 668B05(6EC30300)    <1>     mov ax, word [errorExCde]
   737 00002F58 8A2D(6DC30300)      <1>     mov ch, byte [errorLocus]
   738 00002F5E 8A3D(71C30300)      <1>     mov bh, byte [errorClass]
   739 00002F64 8A1D(70C30300)      <1>     mov bl, byte [errorAction]
   740 00002F6A 668906              <1>     mov word [rsi + callerFrame.rax], ax
   741 00002F6D 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   742 00002F71 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   743                              <1>     return
    18                              <2> %%_ret:
    19 00002F74 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   744                              <1> getCritErrorInfo:  ;ah = 5Dh
   745                              <1> networkServices:   ;ah = 5Eh, do nothing
   746                              <1> networkRedirection:;ah = 5Fh, do nothing
   747                              <1>     return
    18                              <2> %%_ret:
    19 00002F75 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   748                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   749                              <1> noOp:
   750                              <1>     return
    18                              <2> %%_ret:
    19 00002F76 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    36                                  %include "./Source/Kernel/multiplx.asm"
    37                              <1> ;Default multiplexer. Current only installed function is ah=12h
    38                              <1> 
    39                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    40 00002F77 80FC12              <1>     cmp ah, 12h
    41 00002F7A 751A                <1>     jne .exit       ;Exit if not for us
    42 00002F7C 3C01                <1>     cmp al, mDispTblL / 2
    43 00002F7E 7316                <1>     jae .exit   ;If above or equal, exit
    44 00002F80 53                  <1>     push rbx
    45 00002F81 51                  <1>     push rcx
    46 00002F82 31C9                <1>     xor ecx, ecx
    47 00002F84 488D1DE9D2FFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    48 00002F8B 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    49 00002F8D D1E1                <1>     shl ecx, 1   ;multiply by 2
    50 00002F8F 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    51 00002F92 FFD3                <1>     call rbx
    52 00002F94 59                  <1>     pop rcx
    53 00002F95 5B                  <1>     pop rbx
    54                              <1> .exit:
    55 00002F96 48CF                <1>     iretq
    56                              <1> multiplexTest:
    57 00002F98 B0FF                <1>     mov al, -1
    58 00002F9A C3                  <1>     ret
    37                                  %include "./Source/Misc/int44h.asm"
    38                              <1> critErrorHandler:   ;Int 44h
    39                              <1> ;User Stack in usage here, must be swapped to before this is called
    40                              <1> ;Entered with:  
    41                              <1> ;               AH = Critical Error Bitfield
    42                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    43                              <1> ;               Bit 6 - Reserved
    44                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    45                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    46                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    47                              <1> ;               Bits [2-1] = Affected Disk Error
    48                              <1> ;                     0 0   DOS area
    49                              <1> ;                     0 1   FAT area
    50                              <1> ;                     1 0   Directory area
    51                              <1> ;                     1 1   Data area
    52                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    53                              <1> ;               AL  = Failing drive number if AH[7] = 0
    54                              <1> ;               DIL = Error code for errorMsg
    55                              <1> ;               RSI = EA of Device Header for which device the error occured
    56                              <1> ;Return:
    57                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    58                              <1> ;                  = 1 - Retry the Operation    (Retry)
    59                              <1> ;                  = 2 - Terminate the Program  (Abort)
    60                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    61 00002F9B 53                  <1>     push rbx
    62 00002F9C 51                  <1>     push rcx
    63 00002F9D 52                  <1>     push rdx
    64 00002F9E 57                  <1>     push rdi
    65 00002F9F 56                  <1>     push rsi
    66 00002FA0 FC                  <1>     cld         ;Make String ops go forward
    67                              <1> 
    68 00002FA1 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    69 00002FA4 488D155E020000      <1>     lea rdx, qword [.crlf]
    70 00002FAB B409                <1>     mov ah, 09h ;Print String
    71 00002FAD CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    72                              <1> 
    73 00002FAF 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    74 00002FB5 B90C000000          <1>     mov ecx, 0Ch
    75 00002FBA 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    76 00002FBC 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    77 00002FBF 480FB7FF            <1>     movzx rdi, di
    78 00002FC3 4889FA              <1>     mov rdx, rdi    ;Copy error code
    79 00002FC6 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    80 00002FCA 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    81 00002FCD 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    82 00002FD0 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    83 00002FD7 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    84 00002FDB B409                <1>     mov ah, 09h ;Print String
    85 00002FDD CD41                <1>     int 41h     ;Call DOS to print first part of message
    86                              <1> 
    87 00002FDF 488D1505020000      <1>     lea rdx, qword [.readmsg]
    88 00002FE6 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    89 00002FED F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    90 00002FF0 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    91 00002FF4 B409                <1>     mov ah, 09h ;Print String
    92 00002FF6 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    93                              <1> 
    94 00002FF8 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    95 00002FFB 0F85DF000000        <1>     jnz .charError
    96                              <1> ;Disk error continues here
    97 00003001 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    98 00003008 B409                <1>     mov ah, 09h
    99 0000300A CD41                <1>     int 41h
   100 0000300C 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   101 0000300E 80C241              <1>     add dl, "A" ;Add ASCII code
   102 00003011 B402                <1>     mov ah, 02h ;Print char in dl
   103 00003013 CD41                <1>     int 41h
   104                              <1> .userInput:
   105 00003015 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   106 0000301C B409                <1>     mov ah, 09h
   107 0000301E CD41                <1>     int 41h
   108                              <1> ;Abort, Retry, Ignore, Fail is word order
   109                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   110                              <1> .userAbort:
   111                              <1> ;Abort is always an option
   112 00003020 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   113 00003027 B409                <1>     mov ah, 09h
   114 00003029 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   115                              <1> .userRetry:
   116 0000302B F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   117 0000302E 7416                <1>     jz .userIgnore    ;If clear, dont print message
   118 00003030 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   119 00003037 B409                <1>     mov ah, 09h
   120 00003039 CD41                <1>     int 41h
   121 0000303B 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   122 00003042 B409                <1>     mov ah, 09h
   123 00003044 CD41                <1>     int 41h
   124                              <1> .userIgnore:
   125 00003046 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   126 00003049 7416                <1>     jz .userFail
   127 0000304B 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   128 00003052 B409                <1>     mov ah, 09h
   129 00003054 CD41                <1>     int 41h
   130 00003056 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   131 0000305D B409                <1>     mov ah, 09h
   132 0000305F CD41                <1>     int 41h
   133                              <1> .userFail:
   134 00003061 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   135 00003064 7416                <1>     jz .userMsgEnd
   136 00003066 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   137 0000306D B409                <1>     mov ah, 09h
   138 0000306F CD41                <1>     int 41h
   139 00003071 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   140 00003078 B409                <1>     mov ah, 09h
   141 0000307A CD41                <1>     int 41h
   142                              <1> .userMsgEnd:
   143 0000307C 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   144 00003083 B409                <1>     mov ah, 09h
   145 00003085 CD41                <1>     int 41h
   146                              <1> ;Get user input now 
   147 00003087 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   148 00003089 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   149 00003090 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   150 00003092 CD41                <1>     int 41h ;Get char in al
   151 00003094 3C61                <1>     cmp al, "a" ;Chack if lowercase
   152 00003096 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   153 00003098 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   154                              <1> .uip1:
   155 0000309A AE                  <1>     scasb   ;Compare char to list, offset gives return code
   156 0000309B 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   157 0000309D FFC1                <1>     inc ecx
   158 0000309F 81F904000000        <1>     cmp ecx, 4
   159 000030A5 75F3                <1>     jne .uip1
   160 000030A7 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   161                              <1> .validInput:
   162 000030AC 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   163                              <1> ;Now check if the input is permitted
   164 000030AE 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   165 000030B0 7427                <1>     je .cehExit
   166 000030B2 84C0                <1>     test al, al ;Check if 0 => Ignore
   167 000030B4 740F                <1>     je .viIgnore
   168 000030B6 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   169 000030B8 7416                <1>     je .viRetry
   170                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   171 000030BA F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   172 000030BD 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   173 000030C3 EB14                <1>     jmp short .cehExit
   174                              <1> .viIgnore:
   175 000030C5 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   176 000030C8 0F8447FFFFFF        <1>     jz .userInput
   177 000030CE EB09                <1>     jmp short .cehExit
   178                              <1> .viRetry:
   179 000030D0 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   180 000030D3 0F843CFFFFFF        <1>     jz .userInput
   181                              <1> .cehExit:
   182 000030D9 5E                  <1>     pop rsi
   183 000030DA 5F                  <1>     pop rdi
   184 000030DB 5A                  <1>     pop rdx
   185 000030DC 59                  <1>     pop rcx
   186 000030DD 5B                  <1>     pop rbx
   187 000030DE 48CF                <1>     iretq
   188                              <1> .charError:
   189 000030E0 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   190 000030E5 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   191                              <1> .ce1:
   192 000030EC AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   193 000030ED 88C2                <1>     mov dl, al  ;Move char into dl
   194 000030EF B402                <1>     mov ah, 02h
   195 000030F1 CD41                <1>     int 41h ;Print char
   196 000030F3 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   197 000030F5 E91BFFFFFF          <1>     jmp .userInput
   198                              <1> 
   199                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   200 000030FA 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   200 00003103 746563742024202020  <1>
   201 0000310C 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   201 00003115 6E6974202420202020  <1>
   202 0000311E 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   202 00003127 202420202020202020  <1>
   203 00003130 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   203 00003139 6F6D6D616E64202420  <1>
   204 00003142 446174612024202020- <1>             db "Data $            "       ;Error 4
   204 0000314B 202020202020202020  <1>
   205 00003154 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   205 0000315D 737420242020202020  <1>
   206 00003166 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   206 0000316F 202020202020202020  <1>
   207 00003178 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   207 00003181 656469612024202020  <1>
   208 0000318A 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   208 00003193 7420466F756E642024  <1>
   209 0000319C 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   209 000031A5 706572202420202020  <1>
   210 000031AE 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   210 000031B7 6C7420242020202020  <1>
   211 000031C0 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   211 000031C9 742024202020202020  <1>
   212 000031D2 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   212 000031DB 61696C757265202420  <1>
   213                              <1> 
   214 000031E4 64726976652024      <1> .drive      db "drive $"
   215 000031EB 6572726F7220726561- <1> .readmsg    db "error reading $"
   215 000031F4 64696E672024        <1>
   216 000031FA 6572726F7220777269- <1> .writemsg   db "error writing $"
   216 00003203 74696E672024        <1>
   217 00003209 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   218 0000320C 41626F727424        <1> .abortmsg   db "Abort$" 
   219 00003212 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   220 00003219 526574727924        <1> .retrymsg   db "Retry$"
   221 0000321F 4661696C24          <1> .failmsg    db "Fail$"
   222 00003224 2C2024              <1> .betweenMsg db ", $"
   223 00003227 3F2024              <1> .endMsg     db "? $"
   224 0000322A 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    38                                  %include "./Source/Drivers/drvData.asm"
    39                              <1> ;-----------------------------------:
    40                              <1> ;          Driver routines          :
    41                              <1> ;-----------------------------------:
    42                              <1> drivers:
    43                              <1> conHdr:
    44 0000322E [5032000000000000]  <1>     dq auxHdr
    45 00003236 1308                <1>     dw 0813h
    46 00003238 [CE33000000000000]  <1>     dq commonStrat
    47 00003240 [DD33000000000000]  <1>     dq conDriver
    48 00003248 434F4E2020202020    <1>     db "CON     "
    49                              <1> auxHdr:
    50 00003250 [7232000000000000]  <1>     dq prnHdr
    51 00003258 0080                <1>     dw 08000h
    52 0000325A [CE33000000000000]  <1>     dq commonStrat
    53 00003262 [8E36000000000000]  <1>     dq com1Intr
    54 0000326A 4155582020202020    <1>     db "AUX     "
    55                              <1> prnHdr:
    56 00003272 [9432000000000000]  <1>     dq clkHdr
    57 0000327A 40A0                <1>     dw 0A040h
    58 0000327C [D633000000000000]  <1>     dq nulStrat
    59 00003284 [DC33000000000000]  <1>     dq nulIntr
    60 0000328C 50524E2020202020    <1>     db "PRN     "
    61                              <1> clkHdr:
    62 00003294 [B632000000000000]  <1>     dq msdHdr
    63 0000329C 0880                <1>     dw 08008h
    64 0000329E [CE33000000000000]  <1>     dq commonStrat
    65 000032A6 [2635000000000000]  <1>     dq clkDriver
    66 000032AE 434C4F434B242020    <1>     db "CLOCK$  "
    67                              <1> msdHdr:
    68 000032B6 [D832000000000000]  <1>     dq com1Hdr
    69 000032BE 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    70 000032C0 [CE33000000000000]  <1>     dq commonStrat
    71 000032C8 [3338000000000000]  <1>     dq msdDriver
    72 000032D0 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    73                              <1> com1Hdr:
    74 000032D8 [FA32000000000000]  <1>     dq com2Hdr
    75 000032E0 0080                <1>     dw 08000h
    76 000032E2 [CE33000000000000]  <1>     dq commonStrat
    77 000032EA [8E36000000000000]  <1>     dq com1Intr
    78 000032F2 434F4D3120202020    <1>     db "COM1    "
    79                              <1> com2Hdr:
    80 000032FA [1C33000000000000]  <1>     dq com3Hdr
    81 00003302 0080                <1>     dw 08000h
    82 00003304 [CE33000000000000]  <1>     dq commonStrat
    83 0000330C [9736000000000000]  <1>     dq com2Intr
    84 00003314 434F4D3220202020    <1>     db "COM2    "
    85                              <1> com3Hdr:
    86 0000331C [3E33000000000000]  <1>     dq com4Hdr
    87 00003324 0080                <1>     dw 08000h
    88 00003326 [CE33000000000000]  <1>     dq commonStrat
    89 0000332E [A036000000000000]  <1>     dq com3Intr
    90 00003336 434F4D3320202020    <1>     db "COM3    "
    91                              <1> com4Hdr:
    92 0000333E [6033000000000000]  <1>     dq lpt1Hdr
    93 00003346 0080                <1>     dw 08000h
    94 00003348 [CE33000000000000]  <1>     dq commonStrat
    95 00003350 [A936000000000000]  <1>     dq com4Intr
    96 00003358 434F4D3420202020    <1>     db "COM4    "
    97                              <1> lpt1Hdr:
    98 00003360 [8233000000000000]  <1>     dq lpt2Hdr
    99 00003368 40A0                <1>     dw 0A040h
   100 0000336A [D633000000000000]  <1>     dq nulStrat
   101 00003372 [DC33000000000000]  <1>     dq nulIntr
   102 0000337A 4C50543120202020    <1>     db "LPT1    "
   103                              <1> lpt2Hdr:
   104 00003382 [A433000000000000]  <1>     dq lpt3Hdr
   105 0000338A 40A0                <1>     dw 0A040h
   106 0000338C [D633000000000000]  <1>     dq nulStrat
   107 00003394 [DC33000000000000]  <1>     dq nulIntr
   108 0000339C 4C50543220202020    <1>     db "LPT2    "
   109                              <1> lpt3Hdr:
   110 000033A4 FFFFFFFFFFFFFFFF    <1>     dq -1
   111 000033AC 40A0                <1>     dw 0A040h
   112 000033AE [D633000000000000]  <1>     dq nulStrat
   113 000033B6 [DC33000000000000]  <1>     dq nulIntr
   114 000033BE 4C50543320202020    <1>     dq "LPT3    "
   115 000033C6 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    39                                  %include "./Source/Drivers/charDrv.asm"
    40                              <1> commonStrat:
    41                              <1> ;DOS calls this function with rbx=Ptr to request header
    42 000033CE 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    43 000033D5 C3                  <1>     ret
    44                              <1> nulStrat:
    45 000033D6 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    46                              <1> nulIntr:
    47 000033DC C3                  <1>     ret
    48                              <1> conDriver:
    49 000033DD 50                  <1>     push rax
    50 000033DE 53                  <1>     push rbx
    51 000033DF 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    52 000033E6 B003                <1>     mov al, 03h ;Unknown Command
    53 000033E8 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    54 000033EC 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    55                              <1> 
    56 000033EE 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    57 000033F1 3C04                <1>     cmp al, 4
    58 000033F3 743D                <1>     jz .conRead
    59 000033F5 3C05                <1>     cmp al, 5
    60 000033F7 747F                <1>     jz .conNondestructiveRead
    61 000033F9 3C06                <1>     cmp al, 6
    62 000033FB 0F84A8000000        <1>     jz .conInputStatus
    63 00003401 3C07                <1>     cmp al, 7
    64 00003403 0F84B0000000        <1>     jz .conFlushInputBuffers
    65 00003409 3C08                <1>     cmp al, 8
    66 0000340B 0F84CA000000        <1>     jz .conWrite
    67 00003411 3C09                <1>     cmp al, 9
    68 00003413 0F84C2000000        <1>     jz .conWrite
    69 00003419 3C0A                <1>     cmp al, 0Ah
    70 0000341B 0F84E3000000        <1>     jz .conOutputStatus
    71 00003421 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    72                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    73 00003423 B480                <1>     mov ah, 80h ;Set error bit
    74 00003425 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    75                              <1> .conExit:
    76 00003429 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    77 0000342F 5B                  <1>     pop rbx
    78 00003430 58                  <1>     pop rax
    79 00003431 C3                  <1>     ret
    80                              <1> .conRead:    ;Function 4
    81 00003432 B005                <1>     mov al, 05h ;Bad request structure length?
    82 00003434 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    83 00003437 75EA                <1>     jne .conWriteErrorCode
    84                              <1> 
    85 00003439 57                  <1>     push rdi
    86 0000343A 51                  <1>     push rcx
    87 0000343B 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    88 0000343F 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    89                              <1> .cre1:
    90 00003441 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    91 00003444 741C                <1>     je .cre2
    92 00003446 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    93 0000344D 751A                <1>     jnz .cre3   ;No, get the buffer value
    94 0000344F 31C0                <1>     xor eax, eax
    95 00003451 CD36                <1>     int 36h
    96                              <1> .cre11:
    97 00003453 AA                  <1>     stosb
    98 00003454 84C0                <1>     test al, al ;Was the ascii code stored 0?
    99 00003456 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   100 00003458 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   101                              <1> .cre12:
   102 0000345E FFC1                <1>     inc ecx ;Inc chars stored in buffer
   103 00003460 EBDF                <1>     jmp short .cre1
   104                              <1> .cre2:
   105 00003462 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   106 00003465 59                  <1>     pop rcx
   107 00003466 5F                  <1>     pop rdi
   108 00003467 EBC0                <1>     jmp short .conExit
   109                              <1> .cre3:
   110 00003469 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   111 0000346F C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   112 00003476 EBDB                <1>     jmp short .cre11
   113                              <1> 
   114                              <1> .conNondestructiveRead:  ;Function 5
   115 00003478 B005                <1>     mov al, 05h ;Bad request structure length?
   116 0000347A 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   117 0000347D 75A4                <1>     jne .conWriteErrorCode
   118 0000347F 803D8E00000000      <1>     cmp byte [.conBuf], 0
   119 00003486 7519                <1>     jnz .cnr2
   120 00003488 B401                <1>     mov ah, 01h     ;Get key if exists
   121 0000348A CD36                <1>     int 36h
   122 0000348C 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   123                              <1>     ;Keystroke available
   124                              <1> .cnr0:
   125 0000348E 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   126 00003491 E993FFFFFF          <1>     jmp .conExit
   127                              <1> .cnr1: ;No keystroke available
   128 00003496 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   129 0000349C E988FFFFFF          <1>     jmp .conExit
   130                              <1> .cnr2:
   131 000034A1 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   132 000034A7 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   133                              <1> 
   134                              <1> .conInputStatus:         ;Function 6
   135 000034A9 B005                <1>     mov al, 05h ;Bad request structure length?
   136 000034AB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   137 000034AE 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   138 000034B4 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   139                              <1> 
   140                              <1> .conFlushInputBuffers:   ;Function 7
   141 000034B9 B005                <1>     mov al, 05h ;Bad request structure length?
   142 000034BB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   143 000034BE 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   144 000034C4 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   145                              <1> .cfib0:
   146 000034CB B401                <1>     mov ah, 01      ;Get buffer status
   147 000034CD CD36                <1>     int 36h
   148 000034CF 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   149 000034D5 30E4                <1>     xor ah, ah
   150 000034D7 CD36                <1>     int 36h ;Read key to flush from buffer
   151 000034D9 EBF0                <1>     jmp short .cfib0
   152                              <1> 
   153                              <1> .conWrite:   ;Function 8 and 9
   154 000034DB B005                <1>     mov al, 05h ;Bad request structure length?
   155 000034DD 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   156 000034E0 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   157                              <1> 
   158 000034E6 56                  <1>     push rsi
   159 000034E7 51                  <1>     push rcx
   160 000034E8 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   161 000034EC 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   162                              <1> .cw1: 
   163 000034EE 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   164 000034F1 7407                <1>     je .cw2
   165 000034F3 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   166 000034F4 CD49                <1>     int 49h ;Fast print char
   167 000034F6 FFC1                <1>     inc ecx
   168 000034F8 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   169                              <1> .cw2:
   170 000034FA 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   171 000034FD 59                  <1>     pop rcx
   172 000034FE 5E                  <1>     pop rsi
   173 000034FF E925FFFFFF          <1>     jmp .conExit
   174                              <1> .conOutputStatus:   ;Function 0Ah
   175 00003504 B005                <1>     mov al, 05h ;Bad request structure length?
   176 00003506 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   177 00003509 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   178 0000350F E915FFFFFF          <1>     jmp .conExit
   179                              <1> 
   180 00003514 00                  <1> .conBuf db 0    ;Single byte buffer
   181                              <1> fastOutput:         ;This CON driver supports Int 49h
   182                              <1> ;Called with char to transfer in al
   183 00003515 50                  <1>     push rax
   184 00003516 B40E                <1>     mov ah, 0Eh
   185 00003518 CD30                <1>     int 30h
   186 0000351A 58                  <1>     pop rax
   187 0000351B 48CF                <1>     iretq
   188                              <1> ctrlBreak:
   189                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   190 0000351D C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   191 00003524 48CF                <1>     iretq
   192                              <1> 
   193                              <1> clkDriver:
   194 00003526 50                  <1>     push rax
   195 00003527 53                  <1>     push rbx
   196 00003528 51                  <1>     push rcx
   197 00003529 52                  <1>     push rdx
   198 0000352A 56                  <1>     push rsi
   199 0000352B 55                  <1>     push rbp
   200 0000352C 488B1D93FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   201 00003533 B003                <1>     mov al, 03h ;Unknown Command
   202 00003535 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   203 00003539 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   204                              <1> 
   205 0000353B 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   206 0000353E 3C04                <1>     cmp al, 04h
   207 00003540 7437                <1>     jz .clkRead
   208 00003542 3C06                <1>     cmp al, 06h
   209 00003544 0F8494000000        <1>     jz .clkInputStatus
   210 0000354A 3C07                <1>     cmp al, 07h
   211 0000354C 0F8498000000        <1>     jz .clkFlushInputBuffers
   212 00003552 3C08                <1>     cmp al, 08h
   213 00003554 0F84A0000000        <1>     jz .clkWrite
   214 0000355A 3C09                <1>     cmp al, 09h
   215 0000355C 0F8498000000        <1>     jz .clkWrite
   216 00003562 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   217                              <1> .clkNotFunctioning:
   218 00003564 B002                <1>     mov al, 02h ;Device not ready error
   219                              <1> .clkWriteErrorCode:
   220 00003566 B480                <1>     mov ah, 80h ;Set error bit
   221 00003568 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   222                              <1> .clkExit:
   223 0000356C 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   224 00003572 5D                  <1>     pop rbp
   225 00003573 5E                  <1>     pop rsi
   226 00003574 5A                  <1>     pop rdx
   227 00003575 59                  <1>     pop rcx
   228 00003576 5B                  <1>     pop rbx
   229 00003577 58                  <1>     pop rax
   230 00003578 C3                  <1>     ret
   231                              <1> 
   232                              <1> .clkRead:           ;Function 4
   233 00003579 B005                <1>     mov al, 05h ;Bad request structure length?
   234 0000357B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   235 0000357E 75E6                <1>     jne .clkWriteErrorCode
   236                              <1> 
   237 00003580 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   238 00003583 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   239 00003587 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   240 0000358E 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   241 00003592 30E4                <1>     xor ah, ah
   242 00003594 CD3A                <1>     int 3Ah         ;Read the system timer
   243 00003596 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   244 00003598 740D                <1>     jz .clkr1       ;Nope, now just time 
   245 0000359A 30E4                <1>     xor ah, ah
   246                              <1>     ;This works as al should keep count of the # of days passed since last read
   247 0000359C 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   248 000035A0 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   249                              <1> .clkr1:
   250 000035A7 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   251 000035AA 0FB7D2              <1>     movzx edx, dx
   252 000035AD 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   253 000035AF 89D0                <1>     mov eax, edx
   254 000035B1 31D2                <1>     xor edx, edx
   255 000035B3 89D8                <1>     mov eax, ebx
   256 000035B5 B944040000          <1>     mov ecx, 1092   
   257 000035BA F7F1                <1>     div ecx
   258 000035BC 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   259 000035BF 89D0                <1>     mov eax, edx    ;Get remainder in eax
   260 000035C1 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   261 000035C5 31D2                <1>     xor edx, edx
   262 000035C7 B95B000000          <1>     mov ecx, 91 ;5*18.2
   263 000035CC F7F1                <1>     div ecx
   264 000035CE 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   265 000035D1 89D0                <1>     mov eax, edx    ;Get remainder in eax
   266                              <1>     ;lea eax, dword [eax + 4*eax]
   267                              <1>     ;add eax, edx    ;Essentially multiply by 6
   268 000035D3 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   269 000035D6 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   270 000035D9 E98EFFFFFF          <1>     jmp .clkExit
   271                              <1> 
   272                              <1> .clkInputStatus:    ;Function 6
   273                              <1> ;Always return ready
   274 000035DE B005                <1>     mov al, 05h ;Bad request structure length?
   275 000035E0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   276 000035E3 7581                <1>     jne .clkWriteErrorCode
   277 000035E5 E982FFFFFF          <1>     jmp .clkExit
   278                              <1> .clkFlushInputBuffers:  ;Function 7
   279                              <1> ;Always return done immediately
   280 000035EA B005                <1>     mov al, 05h ;Bad request structure length?
   281 000035EC 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   282 000035EF 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   283 000035F5 E972FFFFFF          <1>     jmp .clkExit
   284                              <1> 
   285                              <1> .clkWrite:          ;Functions 8 and 9
   286 000035FA B005                <1>     mov al, 05h ;Bad request structure length?
   287 000035FC 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   288 000035FF 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   289                              <1> 
   290 00003605 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   291 00003608 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   292 0000360C 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   293 00003610 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   294                              <1> 
   295 00003617 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   296 00003619 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   297 0000361D B105                <1>     mov cl, 5
   298 0000361F F6F1                <1>     div cl          ;Divide al by 5
   299 00003621 30E4                <1>     xor ah, ah      ;Remove the remainder
   300 00003623 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   301                              <1> ;Using the decimal part of this formula for the low count
   302                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   303 00003625 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   304 00003628 B912000000          <1>     mov ecx, 18
   305 0000362D F7E1                <1>     mul ecx  
   306 0000362F 01C3                <1>     add ebx, eax
   307                              <1> 
   308 00003631 31D2                <1>     xor edx, edx
   309 00003633 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   310 00003637 B944040000          <1>     mov ecx, 1092
   311 0000363C F7E1                <1>     mul ecx
   312 0000363E 01C3                <1>     add ebx, eax
   313 00003640 89DA                <1>     mov edx, ebx    ;edx now has low count
   314 00003642 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   315 00003646 B401                <1>     mov ah, 01h     ;Set the system time
   316 00003648 CD3A                <1>     int 3Ah
   317                              <1> 
   318 0000364A 4889F3              <1>     mov rbx, rsi
   319 0000364D E91AFFFFFF          <1>     jmp .clkExit
   320                              <1> 
   321                              <1> .clkBCDtoHex:
   322                              <1> ;Converts a BCD value to a Hex byte
   323                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   324 00003652 51                  <1>     push rcx
   325 00003653 0FB6C0              <1>     movzx eax, al   ;Zero extend
   326 00003656 89C1                <1>     mov ecx, eax    ;Save al in ecx
   327 00003658 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   328 0000365D 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   329 00003663 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   330                              <1> .cbth0:
   331 00003666 050A000000          <1>     add eax, 10
   332 0000366B E2F9                <1>     loop .cbth0
   333 0000366D 59                  <1>     pop rcx
   334 0000366E C3                  <1>     ret
   335                              <1> 
   336                              <1> .clkHexToBCD:
   337                              <1> ;Converts a Hex byte into two BCD digits
   338                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   339 0000366F 51                  <1>     push rcx
   340 00003670 0FB6C0              <1>     movzx eax, al   ;Zero extend
   341 00003673 31C9                <1>     xor ecx, ecx
   342                              <1> .chtb0:
   343 00003675 3D0A000000          <1>     cmp eax, 10
   344 0000367A 7209                <1>     jb .chtb1
   345 0000367C 2D0A000000          <1>     sub eax, 10
   346 00003681 FFC1                <1>     inc ecx
   347 00003683 EBF0                <1>     jmp short .chtb0
   348                              <1> .chtb1:
   349 00003685 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   350 00003688 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   351 0000368A 59                  <1>     pop rcx
   352 0000368B C3                  <1>     ret
   353 0000368C 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   354                              <1> 
   355                              <1> ;COM Driver headers and main interrupt strat
   356                              <1> com1Intr:
   357 0000368E C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   358 00003695 EB19                <1>     jmp short comIntr
   359                              <1> com2Intr:
   360 00003697 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   361 0000369E EB10                <1>     jmp short comIntr
   362                              <1> com3Intr:
   363 000036A0 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   364 000036A7 EB07                <1>     jmp short comIntr
   365                              <1> com4Intr:
   366 000036A9 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   367                              <1> comIntr:
   368 000036B0 50                  <1>     push rax
   369 000036B1 53                  <1>     push rbx
   370 000036B2 51                  <1>     push rcx
   371 000036B3 52                  <1>     push rdx
   372 000036B4 56                  <1>     push rsi
   373 000036B5 57                  <1>     push rdi
   374 000036B6 488B1D09FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   375 000036BD B003                <1>     mov al, 03h ;Unknown Command
   376 000036BF 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   377 000036C3 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   378                              <1> 
   379 000036C5 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   380 000036C8 3C04                <1>     cmp al, 4   ;Read Character(s)
   381 000036CA 7462                <1>     jz .comRead
   382 000036CC 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   383 000036CE 0F849B000000        <1>     jz .comNondestructiveRead   
   384 000036D4 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   385 000036D6 0F8484000000        <1>     jz .comReadInputStatus
   386 000036DC 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   387 000036DE 0F84B9000000        <1>     jz .comFlushInputBuffers
   388 000036E4 3C08                <1>     cmp al, 8
   389 000036E6 0F84DB000000        <1>     jz .comWrite
   390 000036EC 3C09                <1>     cmp al, 9
   391 000036EE 0F84D3000000        <1>     jz .comWrite
   392 000036F4 3C0A                <1>     cmp al, 0Ah
   393 000036F6 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   394 000036FC EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   395                              <1> .comErrorNoCount:
   396 000036FE B002                <1>     mov al, 02h ;Unknown device
   397 00003700 EB19                <1>     jmp short .comWriteErrorCode
   398                              <1> .comReadError:
   399 00003702 BA0B000000          <1>     mov edx, 0Bh
   400                              <1> .comWriteError:
   401 00003707 BA0A000000          <1>     mov edx, 0Ah
   402                              <1> .comError:
   403 0000370C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   404 0000370F B902000000          <1>     mov ecx, 02h    ;Unknown device
   405 00003714 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   406 00003716 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   407 00003719 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   408                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   409 0000371B B480                <1>     mov ah, 80h ;Set error bit
   410 0000371D 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   411                              <1> .comExit:
   412 00003721 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   413 00003727 5F                  <1>     pop rdi
   414 00003728 5E                  <1>     pop rsi
   415 00003729 5A                  <1>     pop rdx
   416 0000372A 59                  <1>     pop rcx
   417 0000372B 5B                  <1>     pop rbx
   418 0000372C 58                  <1>     pop rax
   419 0000372D C3                  <1>     ret
   420                              <1> 
   421                              <1> .comRead:
   422 0000372E B005                <1>     mov al, 05h ;Bad request structure length?
   423 00003730 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   424 00003733 75E6                <1>     jne .comWriteErrorCode
   425                              <1> 
   426 00003735 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   427 00003739 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   428                              <1> .cr1:
   429 0000373B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   430 0000373E 741B                <1>     je .cre2
   431                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   432 00003740 B802000000          <1>     mov eax, 02h    ;Recieve 
   433 00003745 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   434 0000374B 6698                <1>     cbw     ;Zero extend to upper byte
   435 0000374D CD34                <1>     int 34h ;Recieve Char
   436 0000374F 72BB                <1>     jc .comError
   437 00003751 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   438 00003754 74EA                <1>     je .cr11
   439 00003756 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   440 00003757 FFC1                <1>     inc ecx
   441 00003759 EBE0                <1>     jmp short .cr1
   442                              <1> .cre2:
   443 0000375B 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   444 0000375E EBC1                <1>     jmp short .comExit
   445                              <1> 
   446                              <1> .comReadInputStatus:
   447 00003760 B005                <1>     mov al, 05h ;Bad request structure length?
   448 00003762 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   449 00003765 75B4                <1>     jne .comWriteErrorCode
   450 00003767 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   451 0000376D EBB2                <1>     jmp short .comExit
   452                              <1> 
   453                              <1> .comNondestructiveRead:
   454                              <1> ;Acts like a "read one character if there is one" function
   455 0000376F B005                <1>     mov al, 05h ;Bad request structure length?
   456 00003771 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   457 00003774 75A5                <1>     jne .comWriteErrorCode
   458                              <1> .cndr1:
   459 00003776 B802000000          <1>     mov eax, 02h    ;Recieve 
   460 0000377B 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   461 00003781 6698                <1>     cbw     ;Zero extend to upper byte
   462 00003783 CD34                <1>     int 34h ;Recieve Char
   463 00003785 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   464 0000378B 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   465 0000378E 7405                <1>     je .cndr2
   466 00003790 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Get next char
   467 00003793 EB8C                <1>     jmp short .comExit
   468                              <1> .cndr2:
   469 00003795 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 200h ;Busy bit set
   470 0000379B EB84                <1>     jmp short .comExit
   471                              <1> 
   472                              <1> .comFlushInputBuffers:
   473 0000379D B005                <1>     mov al, 05h ;Bad request structure length?
   474 0000379F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   475 000037A2 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   476                              <1> .cfib0:
   477 000037A8 8A1584000000        <1>     mov dl, byte [.comDevice]
   478 000037AE 6698                <1>     cbw
   479 000037B0 B802000000          <1>     mov eax, 02h    ;Recieve
   480 000037B5 CD34                <1>     int 34h
   481 000037B7 0F8241FFFFFF        <1>     jc .comErrorNoCount
   482 000037BD 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   483 000037C0 75E6                <1>     jne .cfib0
   484 000037C2 E95AFFFFFF          <1>     jmp .comExit
   485                              <1> 
   486                              <1> .comWrite:
   487 000037C7 B005                <1>     mov al, 05h ;Bad request structure length?
   488 000037C9 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   489 000037CC 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   490                              <1> 
   491 000037D2 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   492 000037D6 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   493                              <1> .cw1: 
   494 000037D8 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   495 000037DB 7417                <1>     je .cw2
   496 000037DD AC                  <1>     lodsb   ;Get char into al, and inc rsi
   497 000037DE B401                <1>     mov ah, 01h ;Move function number into ah
   498 000037E0 8A154C000000        <1>     mov dl, byte [.comDevice]
   499 000037E6 6698                <1>     cbw     ;Zero extend to upper byte
   500 000037E8 CD34                <1>     int 34h ;Transmit char
   501 000037EA 0F821CFFFFFF        <1>     jc .comError
   502 000037F0 FFC1                <1>     inc ecx
   503 000037F2 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   504                              <1> .cw2:
   505 000037F4 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   506 000037F7 E925FFFFFF          <1>     jmp .comExit
   507                              <1> 
   508                              <1> .comOutputStatus:
   509                              <1> ;Read MODEM status
   510 000037FC B005                <1>     mov al, 05h ;Bad request structure length?
   511 000037FE 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   512 00003801 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   513                              <1> 
   514 00003807 8A1525000000        <1>     mov dl, byte [.comDevice]
   515 0000380D 6698                <1>     cbw     ;Zero extend to upper byte
   516 0000380F B403                <1>     mov ah, 03h     ;Get status
   517 00003811 CD34                <1>     int 34h
   518 00003813 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   519 00003819 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   520 0000381E C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   521 00003821 F7D0                <1>     not eax      ;Bitwise inversion
   522 00003823 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   523 00003828 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   524 0000382D E9EFFEFFFF          <1>     jmp .comExit
   525 00003832 00                  <1> .comDevice   db 0
    40                                  %include "./Source/Drivers/diskDrv.asm"
    41                              <1> msdDriver:
    42 00003833 50                  <1>     push rax
    43 00003834 53                  <1>     push rbx
    44 00003835 51                  <1>     push rcx
    45 00003836 52                  <1>     push rdx
    46 00003837 56                  <1>     push rsi
    47 00003838 57                  <1>     push rdi
    48 00003839 55                  <1>     push rbp
    49 0000383A 4150                <1>     push r8
    50 0000383C 488B1D83FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    51 00003843 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    52 00003847 B003                <1>     mov al, drvBadCmd
    53 00003849 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    54 0000384F B001                <1>     mov al, drvBadUnit 
    55 00003851 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    56 00003855 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    57 0000385B 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    58 00003862 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    59 00003866 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    60 00003869 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    61 0000386D 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    62 00003871 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    63 00003873 488D0D9A000000      <1>     lea rcx, .msdTable
    64 0000387A 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    65 0000387E 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    66 00003880 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    67 00003882 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    68 00003885 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    69                              <1> .msdDriverExit:
    70 00003887 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    71 0000388D 4158                <1>     pop r8
    72 0000388F 5D                  <1>     pop rbp
    73 00003890 5F                  <1>     pop rdi
    74 00003891 5E                  <1>     pop rsi
    75 00003892 5A                  <1>     pop rdx
    76 00003893 59                  <1>     pop rcx
    77 00003894 5B                  <1>     pop rbx
    78 00003895 58                  <1>     pop rax
    79 00003896 C3                  <1>     ret
    80                              <1> 
    81                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    82 00003897 4889FB              <1>     mov rbx, rdi
    83 0000389A 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    84 0000389D 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    85 0000389F 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    86                              <1> ;Now fall through to general error
    87                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    88 000038A2 B401                <1>     mov ah, 01h
    89 000038A4 CD33                <1>     int 33h ;Read status of last operation
    90 000038A6 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    91 000038A9 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    92 000038AB 7460                <1>     je .msdWriteErrorCode 
    93 000038AD B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    94 000038AF 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    95 000038B2 7459                <1>     je .msdWriteErrorCode 
    96 000038B4 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    97 000038B7 7454                <1>     je .msdWriteErrorCode
    98                              <1> ;Device Not Ready
    99 000038B9 B002                <1>     mov al, 02h  ;Device not ready code
   100 000038BB 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   101 000038BE 744D                <1>     je .msdWriteErrorCode
   102 000038C0 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   103 000038C4 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   104                              <1> ;Write Protected
   105 000038C8 30C0                <1>     xor al, al
   106 000038CA 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   107 000038CF 743C                <1>     je .msdWriteErrorCode
   108                              <1> ;CRC Error
   109 000038D1 B004                <1>     mov al, 04h     ;CRC error code
   110 000038D3 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   111 000038D8 7433                <1>     je .msdWriteErrorCode
   112 000038DA 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   113 000038DF 742C                <1>     je .msdWriteErrorCode
   114 000038E1 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   115 000038E6 7425                <1>     je .msdWriteErrorCode
   116                              <1> ;Seek Error
   117 000038E8 B006                <1>     mov al, 06h     ;Seek error code
   118 000038EA 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   119 000038ED 741E                <1>     je .msdWriteErrorCode
   120                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   121                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   122 000038EF B007                <1>     mov al, 07h
   123 000038F1 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   124 000038F4 7417                <1>     je .msdWriteErrorCode
   125                              <1> ;Sector Not Found
   126 000038F6 B008                <1>     mov al, 08h     ;Sector not found code
   127 000038F8 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   128 000038FB 7410                <1>     je .msdWriteErrorCode
   129                              <1> ;Write faults
   130 000038FD B00A                <1>     mov al, 0Ah     ;Write fault
   131 000038FF 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   132 00003902 7409                <1>     je .msdWriteErrorCode
   133                              <1> ;Read faults
   134 00003904 B00B                <1>     mov al, 0Bh     ;Read fault
   135 00003906 80F911              <1>     cmp cl, 11h     ;Read error
   136 00003909 7402                <1>     je .msdWriteErrorCode
   137                              <1> ;General Errors
   138 0000390B B00C                <1>     mov al, 0Ch     ;Everything else is general error
   139                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   140 0000390D B480                <1>     mov ah, 80h ;Set error bit
   141 0000390F 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   142 00003913 C3                  <1>     ret ;Return to set done bit
   143                              <1> .msdTable:
   144 00003914 0000                <1>     dw 0                            ;Function 0
   145 00003916 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   146 00003918 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   147 0000391A 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   148 0000391C 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   149 0000391E 0000                <1>     dw 0                            ;Function 5
   150 00003920 0000                <1>     dw 0                            ;Function 6
   151 00003922 0000                <1>     dw 0                            ;Function 7
   152 00003924 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   153 00003926 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   154 00003928 0000                <1>     dw 0                            ;Function 10
   155 0000392A 0000                <1>     dw 0                            ;Function 11
   156 0000392C C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   157 0000392E D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   158 00003930 ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   159 00003932 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   160 00003934 0000                <1>     dw 0                            ;Function 16
   161 00003936 0000                <1>     dw 0                            ;Function 17
   162 00003938 0000                <1>     dw 0                            ;Function 18
   163 0000393A 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   164 0000393C 0000                <1>     dw 0                            ;Function 20
   165 0000393E 0000                <1>     dw 0                            ;Function 21
   166 00003940 0000                <1>     dw 0                            ;Function 22
   167 00003942 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   168 00003944 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   169                              <1> 
   170                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   171                              <1> .msdMedChk:          ;Function 1
   172 00003946 B005                <1>     mov al, 05h ;Bad request structure length
   173 00003948 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   174 0000394B 75C0                <1>     jne .msdWriteErrorCode
   175                              <1> 
   176 0000394D 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   177 00003952 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   178 00003959 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   179 0000395C F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   180 0000395F 753F                <1>     jnz .mmcNoChange
   181                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   182 00003961 B416                <1>     mov ah, 16h 
   183 00003963 CD33                <1>     int 33h
   184 00003965 0F8237FFFFFF        <1>     jc .msdGenDiskError
   185 0000396B 80FC80              <1>     cmp ah, 80h
   186 0000396E 740E                <1>     je .mmcNoChangeLine
   187 00003970 80FC86              <1>     cmp ah, 86h
   188 00003973 7409                <1>     je .mmcNoChangeLine
   189 00003975 84E4                <1>     test ah, ah ;No change?
   190 00003977 7427                <1>     jz .mmcNoChange
   191 00003979 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   192 0000397C 750D                <1>     jnz .mmcChange
   193                              <1> ;If nothing, fall through and test manually, should never happen though
   194                              <1> .mmcNoChangeLine:
   195                              <1> ;Now we test Media Descriptor
   196 0000397E 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   197 00003983 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   198 00003986 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   199 00003989 7410                <1>     je .mmcUnsure
   200                              <1> .mmcChange:
   201 0000398B C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   202 0000398F 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   203 00003996 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   204                              <1>     ;Check here if there were any open handles on the device when it was changed
   205 0000399A C3                  <1>     ret
   206                              <1> .mmcUnsure:
   207 0000399B C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   208 0000399F C3                  <1>     ret
   209                              <1> .mmcNoChange:
   210 000039A0 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   211 000039A4 C3                  <1>     ret
   212                              <1> 
   213                              <1> 
   214                              <1> .msdBuildBPB:        ;Function 2
   215 000039A5 B005                <1>     mov al, 05h ;Bad request structure length
   216 000039A7 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   217 000039AA 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   218                              <1> 
   219 000039B0 4889DE              <1>     mov rsi, rbx
   220 000039B3 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   221 000039B8 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   222 000039BF 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   223 000039C2 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   224 000039C6 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   225 000039C8 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   226 000039CB B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   227 000039D0 CD33                <1>     int 33h
   228 000039D2 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   229                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   230 000039D8 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   231 000039DC 7418                <1>     je .mbbpb0
   232 000039DE 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   233 000039E2 7412                <1>     je .mbbpb0
   234 000039E4 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   235 000039E8 740C                <1>     je .mbbpb0
   236 000039EA 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   237 000039EE B007                <1>     mov al, 07h ;Unknown media error code
   238 000039F0 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   239                              <1> .mbbpb0:
   240 000039F6 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   241 000039F9 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   242 000039FE 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   243 00003A05 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   244 00003A09 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   245 00003A0C 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   246 00003A10 B90F000000          <1>     mov ecx, bpbEx_size/8
   247 00003A15 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   248 00003A18 C3                  <1>     ret
   249                              <1> .msdIOCTLRead:       ;Function 3, returns done
   250 00003A19 B005                <1>     mov al, drvBadDrvReq
   251 00003A1B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   252 00003A1E 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   253 00003A24 C3                  <1>     ret
   254                              <1> .msdRead:            ;Function 4
   255                              <1> ;Will read one sector at a time.
   256 00003A25 B005                <1>     mov al, 05h ;Bad request structure length
   257 00003A27 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   258 00003A2A 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   259                              <1> 
   260 00003A30 4889DF              <1>     mov rdi, rbx
   261 00003A33 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   262                              <1> .msdr0:
   263 00003A35 B682                <1>     mov dh, 82h ;LBA Read Sectors
   264 00003A37 E841010000          <1>     call .msdBlkIOCommon
   265 00003A3C 0F8255FEFFFF        <1>     jc .msdIOError
   266 00003A42 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   267 00003A4A 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   268 00003A52 FFC6                <1>     inc esi
   269 00003A54 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   270 00003A57 75DC                <1>     jne .msdr0
   271 00003A59 4889FB              <1>     mov rbx, rdi
   272 00003A5C C3                  <1>     ret
   273                              <1> .msdWrite:           ;Function 8
   274                              <1> ;Will write one sector at a time.
   275 00003A5D B005                <1>     mov al, 05h ;Bad request structure length
   276 00003A5F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   277 00003A62 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   278                              <1> 
   279 00003A68 4889DF              <1>     mov rdi, rbx
   280 00003A6B 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   281                              <1> .msdw0:
   282 00003A6D B683                <1>     mov dh, 83h ;LBA Write Sectors
   283 00003A6F E809010000          <1>     call .msdBlkIOCommon
   284 00003A74 0F821DFEFFFF        <1>     jc .msdIOError
   285 00003A7A 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   286 00003A82 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   287 00003A8A FFC6                <1>     inc esi
   288 00003A8C 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   289 00003A8F 75DC                <1>     jne .msdw0
   290 00003A91 4889FB              <1>     mov rbx, rdi
   291 00003A94 C3                  <1>     ret
   292                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   293                              <1> ;Will write one sector at a time and then verify it.
   294 00003A95 B005                <1>     mov al, 05h ;Bad request structure length
   295 00003A97 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   296 00003A9A 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   297                              <1> 
   298 00003AA0 4889DF              <1>     mov rdi, rbx
   299 00003AA3 31F6                <1>     xor esi, esi  ;Set counter to zero
   300                              <1> .msdwv0:
   301 00003AA5 B683                <1>     mov dh, 83h ;LBA Write Sectors
   302 00003AA7 E8D1000000          <1>     call .msdBlkIOCommon
   303 00003AAC 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   304 00003AB2 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   305 00003AB4 E8C4000000          <1>     call .msdBlkIOCommon
   306 00003AB9 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   307 00003ABF 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   308 00003AC7 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   309 00003ACF FFC6                <1>     inc esi
   310 00003AD1 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   311 00003AD4 75CF                <1>     jne .msdwv0
   312 00003AD6 4889FB              <1>     mov rbx, rdi
   313 00003AD9 C3                  <1>     ret
   314                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   315 00003ADA B005                <1>     mov al, drvBadDrvReq
   316 00003ADC 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   317 00003ADF 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   318                              <1> 
   319 00003AE5 C3                  <1>     ret
   320                              <1> .msdDevOpen:         ;Function 13
   321 00003AE6 B005                <1>     mov al, drvBadDrvReq
   322 00003AE8 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   323 00003AEB 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   324                              <1> 
   325 00003AF1 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   326 00003AF6 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   327 00003AFD FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   328 00003B00 C3                  <1>     ret
   329                              <1> .msdDevClose:        ;Function 14
   330 00003B01 B005                <1>     mov al, drvBadDrvReq
   331 00003B03 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   332 00003B06 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   333                              <1> 
   334 00003B0C 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   335 00003B11 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   336 00003B18 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   337 00003B1B C3                  <1>     ret
   338                              <1> .msdRemovableMedia:  ;Function 15
   339 00003B1C B005                <1>     mov al, drvBadDrvReq
   340 00003B1E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   341 00003B21 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   342                              <1> 
   343 00003B27 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   344 00003B2C 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   345 00003B33 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   346 00003B36 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   347 00003B3B 31D2                <1>     xor edx, edx    ;Busy bit clear
   348 00003B3D A880                <1>     test al, 80h
   349 00003B3F 0F44CA              <1>     cmovz ecx, edx
   350 00003B42 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   351 00003B46 C3                  <1>     ret
   352                              <1> .msdGenericIOCTL:    ;Function 19
   353 00003B47 B005                <1>     mov al, drvBadDrvReq
   354 00003B49 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   355 00003B4C 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   356                              <1> 
   357 00003B52 C3                  <1>     ret
   358                              <1> .msdGetLogicalDev:   ;Function 23
   359 00003B53 B005                <1>     mov al, drvBadDrvReq
   360 00003B55 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   361 00003B58 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   362                              <1> 
   363 00003B5E 8A0541000000        <1>     mov al, byte [.msdCurDev]
   364 00003B64 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   365 00003B67 C3                  <1>     ret
   366                              <1> .msdSetLogicalDev:   ;Function 24
   367 00003B68 B005                <1>     mov al, drvBadDrvReq
   368 00003B6A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   369 00003B6D 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   370                              <1> 
   371 00003B73 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   372 00003B76 880529000000        <1>     mov byte [.msdCurDev], al
   373 00003B7C C3                  <1>     ret
   374                              <1> 
   375                              <1> .msdBlkIOCommon:  ;Does block IO
   376                              <1> ;Called with rdi containing old rbx value and ah with function number
   377                              <1> ;rbp points to bpb
   378                              <1> ;Error handled by caller
   379                              <1> ;Sector count handled by caller
   380                              <1> ;Called with dh = BIOS function number
   381 00003B7D 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   382 00003B82 8A90[A63B0000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   383 00003B88 31C9                <1>     xor ecx, ecx
   384 00003B8A 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   385 00003B8D 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   386 00003B91 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   387 00003B95 88F4                <1>     mov ah, dh
   388 00003B97 B001                <1>     mov al, 01h ;Do one sector at a time 
   389 00003B99 CD33                <1>     int 33h
   390 00003B9B C3                  <1>     ret
   391                              <1> 
   392 00003B9C 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   393                              <1> ;LASTDRIVE default is 5
   394                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   395                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   396 00003BA5 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   397                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   398 00003BA6 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   399 00003BAB 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   400 00003BB0 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   400 00003BB9 000000000000000000- <1>
   400 00003BC2 000000000000000000- <1>
   400 00003BCB 000000000000000000- <1>
   400 00003BD4 00000000            <1>
   401 00003BD8 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   401 00003BE1 000000000000000000- <1>
   401 00003BEA 000000000000000000- <1>
   401 00003BF3 000000000000000000- <1>
   401 00003BFC 000000000000000000- <1>
   401 00003C05 000000000000000000- <1>
   401 00003C0E 000000000000000000- <1>
   401 00003C17 000000000000000000- <1>
   401 00003C20 000000000000000000- <1>
   401 00003C29 000000000000000000- <1>
   401 00003C32 000000000000000000- <1>
   401 00003C3B 000000000000000000- <1>
   401 00003C44 000000000000000000- <1>
   401 00003C4D 000000000000000000- <1>
   401 00003C56 000000000000000000- <1>
   401 00003C5F 000000000000000000- <1>
   401 00003C68 000000000000000000- <1>
   401 00003C71 000000000000000000- <1>
   401 00003C7A 000000000000000000- <1>
   401 00003C83 000000000000000000- <1>
   401 00003C8C 000000000000000000- <1>
   401 00003C95 000000000000000000- <1>
   401 00003C9E 000000000000000000- <1>
   401 00003CA7 000000000000000000- <1>
   401 00003CB0 000000000000000000- <1>
   401 00003CB9 000000000000000000- <1>
   401 00003CC2 000000000000000000- <1>
   401 00003CCB 000000000000000000- <1>
   401 00003CD4 000000000000000000- <1>
   401 00003CDD 000000000000000000- <1>
   401 00003CE6 000000000000000000- <1>
   401 00003CEF 000000000000000000- <1>
   401 00003CF8 000000000000000000- <1>
   401 00003D01 000000000000000000- <1>
   401 00003D0A 000000000000000000- <1>
   401 00003D13 000000000000000000- <1>
   401 00003D1C 000000000000000000- <1>
   401 00003D25 000000000000000000- <1>
   401 00003D2E 000000000000000000- <1>
   401 00003D37 000000000000000000- <1>
   401 00003D40 000000000000000000- <1>
   401 00003D49 000000000000000000- <1>
   401 00003D52 000000000000000000- <1>
   401 00003D5B 000000000000000000- <1>
   401 00003D64 000000000000000000- <1>
   401 00003D6D 000000000000000000- <1>
   401 00003D76 000000000000000000- <1>
   401 00003D7F 000000000000000000- <1>
   401 00003D88 000000000000000000- <1>
   401 00003D91 000000000000000000- <1>
   401 00003D9A 000000000000000000- <1>
   401 00003DA3 000000000000000000- <1>
   401 00003DAC 000000000000000000- <1>
   401 00003DB5 000000000000000000- <1>
   401 00003DBE 000000000000000000- <1>
   401 00003DC7 000000000000000000- <1>
   401 00003DD0 000000000000000000- <1>
   401 00003DD9 000000000000000000- <1>
   401 00003DE2 000000000000000000- <1>
   401 00003DEB 000000000000000000- <1>
   401 00003DF4 000000000000000000- <1>
   401 00003DFD 000000000000000000- <1>
   401 00003E06 000000000000000000- <1>
   401 00003E0F 000000000000000000- <1>
   401 00003E18 000000000000000000- <1>
   401 00003E21 000000000000000000- <1>
   401 00003E2A 000000000000        <1>
   402                              <1> 
   403                              <1> endptr equ $
    41                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    42                                  ;Paragraph alignment
    43                                  %include "./Source/BSS/dosDynaDataArea.asm"
    44                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    45                              <1> ; the MCB chain!
    46                              <1> ddaStart:
    47 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    48                              <1> 
    49                              <1> ;Create DPB chain of first 5 available DPB slots
    50                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    51 00000010 <res 35h>           <1> firstDPB        resb dpb_size
    52 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    53                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    54                              <1> ;Always jettison this space
    55 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    56 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    57 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    58                              <1> 
    59 00000119 <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    60 00000139 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    61                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    62                              <1> dynamicDataAreaLength equ $ - ddaStart
    62          ------------------  <1>  info: assembly required 1+6+2 passes

