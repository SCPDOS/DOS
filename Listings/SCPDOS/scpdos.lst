     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro breakpoint 0
    78                              <1> xchg bx, bx
    79                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvExtFun   equ 40h ;If set, functions 13, 17, 18 supported (must be)
    73                              <1>     devDrvIOCTL2   equ 80h ;If set, IOCTL function 19 supported
    74                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    75                              <1>     devDrvIOCTL    equ 4000h ;If set, Generic IOCTL supported
    76                              <1>     devDrvChar     equ 8000h ;If set, Char device
    77                              <1> ;Bit 0 1=console input
    78                              <1> ;    1 1=console output (character devices)
    79                              <1> ;    2 1=NUL device
    80                              <1> ;    3 1=CLOCK device
    81                              <1> ;    4 1=INT 49 output (CON)
    82                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    83                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    84                              <1> ;   11 1=open/close/removable media supported (3.0+)
    85                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    86                              <1> ;      1=media descriptor in FAT required (block devices)
    87                              <1> ;   14 1=IOCTL supported
    88                              <1> ;   15 0=block device
    89                              <1> ;      1=character device
    90                              <1> 
    91                              <1> ;Driver structures
    92                              <1> 
    93                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    94                              <1> 
    95                              <1>     .hdrlen resb 1  ;Length of the request header
    96                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    97                              <1>     .cmdcde resb 1  ;Command code
    98                              <1>     .status resw 1  ;Status word
    99                              <1>     .devptr resq 1  ;Device queue pointer field
   100                              <1> 
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> struc drvReqHdr
   104                              <1>     drvReqHdrM
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   105                              <1> endstruc
   106                              <1> 
   107                              <1> struc initReqPkt  ;Init Request Packet
   108                              <1> 
   109                              <1>     drvReqHdrM   ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   110 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   111 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   112 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   113 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   118                              <1> 
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   120 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   121 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   122 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   129 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   130 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   131 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   132                              <1> 
   133                              <1> endstruc
   134                              <1> 
   135                              <1> struc ioReqPkt   ;IO Request Packet
   136                              <1> 
   137                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   138 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   139 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   140 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   141 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   142 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   143                              <1> 
   144                              <1> endstruc
   145                              <1> 
   146                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   147                              <1>     
   148                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   149 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc statusReqPkt   ;Status Request Packet
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   156                              <1> 
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc openReqPkt ;Open Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc closeReqPkt ;Close Device Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   180                              <1>      
   181                              <1> endstruc
   182                              <1> 
   183                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   184                              <1> 
   185                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   186 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   187 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   188 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   189 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   190 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   201                              <1>     
   202                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   203                              <1> 
   204                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   138                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   139                              <1>     ;If any of the three bits are set, then ALL three bits are set
   140                              <1>     ; in addition to whatever the user passed to search for.
   141                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   142                              <1>     dirIncFiles     equ dirHidden | dirSystem
   143                              <1> 
   144                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   145                              <1> 
   146 00000000 ??????              <1>     .jmpBoot                resb 3 
   147 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   148 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   149 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   150 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   151 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   152 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   153 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   154 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   155 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   156 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   157 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   158 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   159 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   160 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   161 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   162 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   163 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   164 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   165                              <1> 
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc FSInfo
   169                              <1> 
   170 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   171 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   172 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   173 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   174 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   175 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   176 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   177                              <1> 
   178                              <1> endstruc
     8                                  %include "./Source/Include/dosStruc.inc"
     9                              <1> 
    10                              <1> ;-------------------------------------------------------;
    11                              <1> ; This include file contains miscellaneous internal     ;
    12                              <1> ; SCP/DOS structures.                                   ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> 
    15                              <1> ;------------------------------------------------------------------------;
    16                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    17                              <1> ; its file system structure. This is used to locate files and structures
    18                              <1> ; on the device itself and to translate file requests to cluster chains
    19                              <1> ; to LBAs to pass to the disk driver..
    20                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    21                              <1> ; drivers Initialise routine has been called.
    22                              <1> ;------------------------------------------------------------------------;
    23                              <1> struc dpb        ;Drive Parameter Block
    24                              <1> 
    25 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    26 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    27 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    28 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    29 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    30 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    31 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    32 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    33 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    34 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    35 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    36 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    37                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    38 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    39 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    40 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    41 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    42 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    43 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    44                              <1> 
    45                              <1> endstruc
    46                              <1> 
    47                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    48                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    49                              <1> ;------------------------------------------------------------------------;
    50                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    51                              <1> ; All disk pathing requests go via the CDS for that drive.
    52                              <1> ; The default drive is the last accessed drive, this number is stored
    53                              <1> ; in the DOS data area.
    54                              <1> ; The CDS is stored as an array with the offset into the array being 
    55                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    56                              <1> ;
    57                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> struc cds       ;Current Directory structure
    60 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    61 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    62 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    63 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    64 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    65 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    66                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    67                              <1> ; another, we save the number of chars to skip to that deep level).
    68                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    69                              <1> ; Only affects for SUBST drives, not JOIN
    70                              <1> ; Flags: Bit 15 set = Network drive
    71                              <1> ;        Bit 14 set = Physical drive
    72                              <1> ;        Bit 13 set = JOIN'ed drive
    73                              <1> ;        Bit 12 set = SUBST'ed drive
    74                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    75                              <1> endstruc
    76                              <1> ;CDS equates
    77                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    78                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    79                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    80                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    81                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    82                              <1> ;------------------------------------------------------------------------;
    83                              <1> ; The SFT is a way to allow applications to open file handles to files 
    84                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    85                              <1> ; under the first header, and then a second header will be linked to the 
    86                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    87                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    88                              <1> ; using the FCBS= command. Default FCBS=5.
    89                              <1> ;
    90                              <1> ; A file handle describes the file, and the location within the file that
    91                              <1> ; we are reading. The file handle can be manipulated without the file
    92                              <1> ; being in memory, thus allowing the user to access data without needing 
    93                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    94                              <1> ; accessing devices, by treating them as files with their drivers 
    95                              <1> ; responding and translating the manipulations of the file handle itself.
    96                              <1> ; Neither the driver nor the application should see or use the SFT for
    97                              <1> ; the handle, as it is subject to change (and will change when file 
    98                              <1> ; sharing provisions are included). The DOS will make requests to the 
    99                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   100                              <1> ; track of the information in the SFT entry for that handle. 
   101                              <1> ;
   102                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   103                              <1> ; can point to the same file. It all depends on what the applications 
   104                              <1> ; want to do with the File.
   105                              <1> ;
   106                              <1> ; !!!!IMPORTANT!!!!
   107                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   108                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   109                              <1> ;
   110                              <1> ;Each SFT may look like this:
   111                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   112                              <1> ;            |                |
   113                              <1> ;       wNumFiles*sft    wNumFiles*sft
   114                              <1> ;
   115                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   116                              <1> ; System FCBs.
   117                              <1> ;
   118                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   119                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   120                              <1> ;
   121                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   122                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   123                              <1> ;------------------------------------------------------------------------;
   124                              <1> struc sfth   ;System file table header
   125                              <1> ; This is the SFT header.
   126                              <1> ; This structure comes before the start of the first file in the array/table.
   127 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   128 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc sft
   132                              <1> ;This is the file struc itself
   133 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   134 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   135 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   136 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   137 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   138 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   139 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   140 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   141 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   142 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   143 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   144 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   145 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   146 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   147 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   148 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   149 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   150 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   151 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   152                              <1> ;                           0 means no record
   153                              <1> endstruc
   154                              <1> ;Open Mode equates
   155                              <1> ;Access modes   Bits[2:0]
   156                              <1> ReadAccess      equ 0h
   157                              <1> WriteAccess     equ 1h
   158                              <1> RWAccess        equ 2h
   159                              <1> ;Bit 3 reserved 0
   160                              <1> ;Sharing modes  Bits[6:4]
   161                              <1> CompatShare     equ 0h
   162                              <1> denyRWShare     equ 10h
   163                              <1> denyWriteShare  equ 20h
   164                              <1> denyReadShare   equ 30h
   165                              <1> denyNoneShare   equ 40h
   166                              <1> netFCBShare     equ 70h
   167                              <1> ;Bit 7 reserved 0
   168                              <1> ;Bits 8-12 reserved 0
   169                              <1> 
   170                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   171                              <1> ;Buffering on writes
   172                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   173                              <1> ;FCB opened file?
   174                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   175                              <1> ;Attribute Byte
   176                              <1> readOnlyFile    equ 1h
   177                              <1> hiddenFile      equ 2h
   178                              <1> systemFile      equ 4h
   179                              <1> volumeLabel     equ 8h
   180                              <1> directoryFile   equ 10h ;Directory entry
   181                              <1> archiveFile     equ 20h
   182                              <1> ;Device Info equates
   183                              <1> ;For a block device, bits [5:0] contain the drive number
   184                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   185                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   186                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   187                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   188                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   189                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   190                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   191                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   192                              <1> devCharDev      equ 80h ;If set, it is a char device!
   193                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   194                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   195                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   196                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   197                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   198                              <1> 
   199                              <1> ;openAddress   equ DOSSEG:367Ah   
   200                              <1> ;createAddress equ DOSSEG:35E3h   
   201                              <1> ;------------------------------------------------------------------------;
   202                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   203                              <1> ; to an internal buffer, and then copying it to the specified location
   204                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   205                              <1> ; another request for the same sector from the same device is made, so 
   206                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   207                              <1> ; size, selected according to the largest detected sector size during 
   208                              <1> ; the initial loadup.
   209                              <1> ;
   210                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   211                              <1> ;
   212                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   213                              <1> ;------------------------------------------------------------------------;
   214                              <1> 
   215                              <1> struc bufferHdr
   216 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   217 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   218 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   219 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   220 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   221 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   222 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   223 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   224 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   225                              <1>     .dataarea:             ;Points to the start of the data area
   226                              <1> endstruc
   227                              <1> ;Buffer Flag equates
   228                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   229                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   230                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   231                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   232                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   233                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   234                              <1> ;Note! A buffer is marked as referenced only when the application 
   235                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   236                              <1> ;------------------------------------------------------------------------;
   237                              <1> ; Memory control block for each memory arena
   238                              <1> ;------------------------------------------------------------------------;
   239                              <1> struc mcb
   240 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   241 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   242 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   243 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   244                              <1>     .program:
   245                              <1> endstruc
   246                              <1> ;MCB equates
   247                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   248                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   249                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   250                              <1> mcbMarkCtn      equ "M"
   251                              <1> mcbMarkEnd      equ "Z"
   252                              <1> 
   253                              <1> memFirstFit     equ 0   ;First free block goes to application
   254                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   255                              <1> memLastFit      equ 2   ;Last free block goes to application
   256                              <1> 
   257                              <1> ;Owner = Para aligned address => Owning application PSP
   258                              <1> ;...To consider...
   259                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   260                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   261                              <1> ;------------------------------------------------------------------------;
   262                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   263                              <1> ; following order, thus allowing for return values to be placed in the 
   264                              <1> ; registers by accessing the caller register stack frame.
   265                              <1> ;------------------------------------------------------------------------;
   266                              <1> struc callerFrame
   267 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   268 00000008 ????????????????    <1>     .rbx    resq 1    
   269 00000010 ????????????????    <1>     .rcx    resq 1
   270 00000018 ????????????????    <1>     .rdx    resq 1
   271 00000020 ????????????????    <1>     .rsi    resq 1
   272 00000028 ????????????????    <1>     .rdi    resq 1
   273 00000030 ????????????????    <1>     .rbp    resq 1
   274 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   275 00000040 ????????????????    <1>     .r9     resq 1
   276                              <1> ;Pushed by Processor when invoked via Interrupt
   277 00000048 ????????????????    <1>     .rip    resq 1
   278 00000050 ????????????????    <1>     .cs     resq 1
   279 00000058 ????????????????    <1>     .flags  resq 1
   280                              <1> endstruc
   281                              <1> 
   282                              <1> struc dpl
   283                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   284                              <1> ; server calls
   285 00000000 ????????????????    <1>     .rax    resq 1
   286 00000008 ????????????????    <1>     .rbx    resq 1
   287 00000010 ????????????????    <1>     .rcx    resq 1
   288 00000018 ????????????????    <1>     .rdx    resq 1
   289 00000020 ????????????????    <1>     .rsi    resq 1
   290 00000028 ????????????????    <1>     .rdi    resq 1
   291 00000030 ????????????????    <1>     .r8     resq 1
   292 00000038 ????????????????    <1>     .r9     resq 1
   293 00000040 ????????????????    <1>     .align  resq 1
   294 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   295 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   296                              <1> endstruc
   297                              <1> 
   298                              <1> struc fcb
   299                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   300 00000000 ??                  <1>     .driveNum   resb 1
   301 00000001 ????????????????    <1>     .filename   resb 8
   302 00000009 ??????              <1>     .fileext    resb 3
   303 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   304                              <1> ;One block consists of 128 records, of size denoted in the below
   305 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   306 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   307 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   308 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   309 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   310 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   311 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   312 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   313 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   314                              <1>     ;If record size > 64, high byte is ignored.
   315                              <1>     ;Used for random read and write operations to find the right record
   316                              <1> endstruc
   317                              <1> 
   318                              <1> struc filename
   319                              <1> ;8.3 File name struct
   320 00000000 ????????????????    <1>     .fName  resb 8
   321 00000008 ??????              <1>     .fExt   resb 3
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   325 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   326 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   327 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   328 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   329 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   330 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   331 00000016 ????                <1>     .fileTime   resw 1  ;File time
   332 00000018 ????                <1>     .fileDate   resw 1  ;File date
   333 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   334 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc psp
   338 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   339 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   340 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   341 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   342 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   343 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   344 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   345 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   346 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   347 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   348 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   349 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   350 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   351 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   352                              <1> ;Extra handle arrays are grouped into a linked list
   353                              <1> ;The below are in the same place as in DOS
   354 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   355 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   356                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   357 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   358 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   359                              <1> endstruc
   360                              <1> 
   361                              <1> struc clkStruc
   362 00000000 ????                <1>     .dateWord   resw 1
   363 00000002 ??                  <1>     .minutes    resb 1
   364 00000003 ??                  <1>     .hours      resb 1
   365 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   366 00000005 ??                  <1>     .seconds    resb 1
   367                              <1> endstruc
   368                              <1> 
   369                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   370                              <1> ;for a space of 64Gb
   371                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   372                              <1> 
   373                              <1> ;Critical Error AH bitfield equates
   374                              <1> critRead    equ 0h
   375                              <1> critWrite   equ 1h
   376                              <1> critDOS     equ 0h
   377                              <1> critFAT     equ 2h
   378                              <1> critDir     equ 4h
   379                              <1> critData    equ 6h
   380                              <1> critFailOK  equ 8h
   381                              <1> critRetryOK equ 10h
   382                              <1> critIgnorOK equ 20h
   383                              <1> critCharDev equ 80h
   384                              <1> 
   385                              <1> critIgnore  equ 0
   386                              <1> critRetry   equ 1
   387                              <1> critAbort   equ 2
   388                              <1> critFail    equ 3
   389                              <1> 
   390                              <1> ;MISC ASCII control chars
   391                              <1> NUL equ 00h ;^@         | ASCII Null
   392                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   393                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   394                              <1> BEL equ 07h ;^G         | ASCII Bell
   395                              <1> BSP equ 08h ;^H         | ASCII Backspace
   396                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   397                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   398                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   399                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   400                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   401                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   402                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   403                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   404                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   405                              <1> SPC equ 20h ;Printable  | ASCII Space
   406                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   407                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   408                              <1> 
   409                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   410                              <1> ;Extended Ascii Codes
   411                              <1> eF1     equ 3Bh ;F1 second byte
   412                              <1> eF2     equ 3Ch ;F2 second byte
   413                              <1> eF3     equ 3Dh ;F3 second byte
   414                              <1> eF4     equ 3Eh ;F4 second byte
   415                              <1> eF5     equ 3Fh ;F5 second byte
   416                              <1> eF6     equ 40h ;F6 second byte
   417                              <1> eF7     equ 41h ;F7 second byte
   418                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   419                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   420                              <1> eIns    equ 52h ;Insert second byte
   421                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
     9                                  %include "./Source/Debug/debSym.inc"
    10                              <1> ;This file will include the debuging symbols
    11                              <1> 
    12                              <1> %define true 1
    13                              <1> %define false 0
    14                              <1> 
    15                              <1> ;Switch the DEBUG to false in production!
    16                              <1> %define DEBUG false
    17                              <1> %define DPBINFO false
    18                              <1> %define REGS false
    19                              <1> %define ENDSTATUS true
    20                              <1> %define ALLOCTEST false
    21                              <1> 
    22                              <1> 
    23                              <1> ;Use this space as the debug stack
    24                              <1> %define debStackTop 80000h
    10                                  %include "./Source/Include/dosError.inc"
    11                              <1> ;DOS Error codes
    12                              <1> 
    13                              <1> ;Extended Error Codes
    14                              <1> errInvFnc   equ 1   ;Invalid function number
    15                              <1> errFnf      equ 2   ;File not found
    16                              <1> errPnf      equ 3   ;Path not found
    17                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    18                              <1> errAccDen   equ 5   ;Access denied (to resource)
    19                              <1> errBadHdl   equ 6   ;Invalid handle
    20                              <1> errMCBbad   equ 7   ;MCB's destroyed
    21                              <1> errNoMem    equ 8   ;Insufficient memory
    22                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    23                              <1> errBadEnv   equ 10  ;Invalid environment
    24                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    25                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    26                              <1> errInvDat   equ 13  ;Invalid data
    27                              <1> ;           equ 14  ;Reserved
    28                              <1> errBadDrv   equ 15  ;Invalid drive specified
    29                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    30                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    31                              <1> errNoFil    equ 18  ;No more files
    32                              <1> ;The following are Driver error codes + 19
    33                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    34                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    35                              <1> errUnkUnt   equ 20  ;Unknown Unit
    36                              <1> errDrvNR    equ 21  ;Drive not ready
    37                              <1> errUnkCmd   equ 22  ;Unknown Command
    38                              <1> errCRCerr   equ 23  ;Data (CRC) error
    39                              <1> errBadRLn   equ 24  ;Bad request structure length
    40                              <1> errSekErr   equ 25  ;Seek error
    41                              <1> errUnkMed   equ 26  ;Unknown media type
    42                              <1> errSecNF    equ 27  ;Sector not Found
    43                              <1> errNoPap    equ 28  ;Printer out of paper
    44                              <1> errWF       equ 29  ;Write fault
    45                              <1> errRF       equ 30  ;Read fault
    46                              <1> errGF       equ 31  ;General fault
    47                              <1> ;----------------------------------------------
    48                              <1> ;The following two go inbetween the Disk errors
    49                              <1> errShrVio   equ 32  ;Sharing violations
    50                              <1> errLokVio   equ 33  ;File Lock violation
    51                              <1> ;----------------------------------------------
    52                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    53                              <1> errNoFCB    equ 35  ;FCB unavailable
    54                              <1> errShrFul   equ 36  ;Sharing buffer full
    55                              <1> 
    56                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    57                              <1> 
    58                              <1> errFilExist equ 80  ;File already exists
    59                              <1> errDirExist equ 82  ;Directory already exists
    60                              <1> errFI44     equ 83  ;Fail on INT 44h
    61                              <1> errRedir    equ 84  ;Too many levels of redirection
    62                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    63                              <1> errBadPass  equ 86  ;Bad password
    64                              <1> errBadParam equ 87  ;Bad parameter passed to request
    65                              <1> errNetWrite equ 88  ;Network Write Fault
    66                              <1> ;-----------------------------------------------------------------------------
    67                              <1> ;Error Loci
    68                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    69                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    70                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    71                              <1> eLocChr     equ 4   ;Serial/Character Device error
    72                              <1> eLocMem     equ 5   ;Related to RAM
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error Actions
    75                              <1> eActRet     equ 1   ;Retry
    76                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    77                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    78                              <1> eActAbt     equ 4   ;Abort with cleanup
    79                              <1> eActKil     equ 5   ;Abort without cleanup
    80                              <1> eActIgn     equ 6   ;Ignore error
    81                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    82                              <1> ;-----------------------------------------------------------------------------
    83                              <1> ;Error classes
    84                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    85                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    86                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    87                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    88                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    89                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    90                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    91                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    92                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    93                              <1> eClsLocked  equ 10  ;Resource Locked
    94                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    95                              <1> eClsClash   equ 12  ;Resource already exists!
    96                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  %include "./Source/Include/dosExec.inc"
    12                              <1> ;This include file contains structures related to the EXE format
    13                              <1> ; and the exec frame used when setting up the EXE in memory by 41h/4Bh
    14                              <1> 
    15                              <1> ;Int 41h/4Bh stack frame, used to store values whilst processing a EXE or COM
    16                              <1> ; file.
    17                              <1> execLoadGo  equ 0
    18                              <1> execLoad    equ 1
    19                              <1> execInvld   equ 2
    20                              <1> execOverlay equ 3
    21                              <1> 
    22                              <1> struc execFrame
    23 00000000 ??                  <1>     .bSubFunc   resb 1  ;Subfunction number
    24 00000001 ????                <1>     .wProgHdl   resb 2  ;File handle number for executable file
    25 00000003 ????                <1>     .wEnvSize   resb 2  ;Size of the environment block
    26 00000005 ????                <1>     .wNameLen   resb 2  ;Needs to be less than 64 but welp
    27 00000007 ??                  <1>                 resb 1  ;Alignment byte
    28                              <1>     .rbx:
    29 00000008 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    30                              <1>     .rdx:
    31 00000010 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    32                              <1> 
    33 00000018 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    34 00000020 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    35 00000028 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to new Program Base address (consider removing)
    36 00000030 ????????            <1>     .dProgSize  resd 1  ;Program size is saved here, PSP included.
    37                              <1> .pProgEP:   ;Program EP, recycle this qword
    38 00000034 ????????            <1>     .dCOFFhdr   resd 1  ;Offset in file to COFF header. Set to 0 for COM
    39 00000038 ????                <1>     .wNumSeg    resw 1  ;Number of segments, consider reusing NameLen
    40 0000003A ????                <1>                 resw 1  ;Alignment reservation
    41                              <1> .qRelocVal:  ;Used when computing relocations, Rebasing factor
    42 0000003C ????????            <1>     .dFilePtr   resd 1  ;Keep of track of where in file we are
    43 00000040 ????????            <1>                 resd 1  ;Alignment reservation, DO NOT USE FOR ANYTHING
    44                              <1> endstruc
    45                              <1> 
    46                              <1> ;Possible blocks to be pointed to by rbx
    47                              <1> 
    48                              <1> struc execProg 
    49 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    50 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    51 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    52 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    53                              <1> endstruc
    54                              <1> 
    55                              <1> struc loadProg
    56 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    57 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    58 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    59 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    60 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    61 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    62                              <1> endstruc
    63                              <1> 
    64                              <1> struc loadOvly
    65 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    66 00000008 ????????            <1>     .dRelocFct  resd 1  ;Relocation factor for 
    67                              <1> endstruc
    68                              <1> 
    69                              <1> ;----------------------------
    70                              <1> ;   EXE header structures   :
    71                              <1> ;----------------------------
    72                              <1> 
    73                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    74                              <1> dosMagicSignature   equ "MZ"
    75                              <1> dosMagicSignature2  equ "ZM"
    76                              <1> struc imageDosHdr
    77 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    78 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    79 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    80 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    81 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    82 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    83 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    84 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    85 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    86 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    87 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    88 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    89 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    90 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    91 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    92 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    93 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    94 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    95 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    96                              <1> endstruc
    97                              <1> 
    98                              <1> ;Pssobile signatures pointed to by e_lfanew
    99                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
   100                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
   101                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
   102                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
   103                              <1> 
   104                              <1> ;COFF File header, immadiately follows the signature so @ [e_lfanew + 4]
   105                              <1> 
   106                              <1> struc imageFileHeader
   107 00000000 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
   108 00000002 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
   109 00000004 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
   110 00000008 ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
   111 0000000C ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   112 00000010 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   113 00000012 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   114                              <1> endstruc
   115                              <1> 
   116                              <1> ;The only valid values in the .machineType field
   117                              <1> 
   118                              <1> imageFileMachineUnknown equ 0
   119                              <1> imageFileMachineAMD64   equ 08664h 
   120                              <1> 
   121                              <1> ;Optional header, immediately follows COFF header
   122                              <1> 
   123                              <1> struc imageFileOptionalHeader
   124 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   125 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   126 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   127 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   128 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   129 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   130 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   131 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   132 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   133 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   134 00000024 ????????            <1> 	.dFileAlignment             resd 1
   135 00000028 ????                <1> 	.wMajOSVer                  resw 1
   136 0000002A ????                <1> 	.wMinOSVer                  resw 1
   137 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   138 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   139 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   140 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   141 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   142 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   143 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   144 00000040 ????????            <1> 	.dCheckSum                  resd 1
   145 00000044 ????                <1> 	.wSubsystem                 resw 1
   146 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   147 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   148 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   149 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   150 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   151 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   152 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   153                              <1> endstruc
   154                              <1> 
   155                              <1> romMagicNum     equ 0107h
   156                              <1> pe32MagicNum    equ 010Bh
   157                              <1> pe64MagicNum    equ 020Bh
   158                              <1> 
   159                              <1> ;Data directory header structure
   160                              <1> 
   161                              <1> struc imageDataDirectory
   162 00000000 ????????            <1>     .virtualAddress  resd 1
   163 00000004 ????????            <1>     .size    resd 1
   164                              <1> endstruc
   165                              <1> 
   166                              <1> struc baseRelocBlock
   167 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   168 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   169                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   170                              <1> endstruc
   171                              <1> ;Section headers that form the Section Table.
   172                              <1> ;There are wNumberOfSections many entries in this table.
   173                              <1> ;Each entry is one imageSectionHdr
   174                              <1> 
   175                              <1> struc imageSectionHdr       ;size 40 bytes
   176 00000000 ????????????????    <1>     .name                   resb 8
   177 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   178 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   179 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   180 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   181 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   182 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   183 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   184 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   185 00000024 ????????            <1> 	.dCharacteristics       resd 1
   186                              <1> endstruc
   187                              <1> 
   188                              <1> ;Section Hdr characteristics flags 
   189                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   190                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   191                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    12                                  Segment .text align=1   ;Init code
    13                                  %define currSegVBase 0
    14                                  %include "./Source/Sysinit/sysInit.asm"
    15                              <1> ; We arrive here with the following values in the registers.
    16                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    17                              <1> ; dx  = Int 33h boot device number
    18                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    19                              <1> 
    20 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    21 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
    22 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
    23 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    24 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    25 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    26 0000001A F348A5              <1>     rep movsq   ;Copy over
    27 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    28 00000022 50                  <1>     push rax
    29 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    30                              <1> sysInitldr:
    31                              <1> ;Now the tough part, load DOS to 800
    32 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    33                              <1> .read:
    34 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    35 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    35 00000035 00                  <1>
    36 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    37 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    38 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    39 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    40 0000003F CD33                <1>     int 33h
    41 00000041 0F83B9010000        <1>     jnc initBegin   ;No error? Yay, DOS loaded.
    42 00000047 FFCE                <1>     dec esi
    43 00000049 75DE                <1>     jnz .read
    44 0000004B 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    45 00000052 B804130000          <1>     mov eax, 1304h
    46 00000057 CD30                <1>     int 30h
    47 00000059 CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    48 0000005B 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    48 00000064 6F6164204572726F72- <1>
    48 0000006D 0A0D00              <1>
    49 00000070 000000000000000000- <1>     db 100h-($-$$) dup 00h ;Fill with nulls  
    49 00000079 000000000000000000- <1>
    49 00000082 000000000000000000- <1>
    49 0000008B 000000000000000000- <1>
    49 00000094 000000000000000000- <1>
    49 0000009D 000000000000000000- <1>
    49 000000A6 000000000000000000- <1>
    49 000000AF 000000000000000000- <1>
    49 000000B8 000000000000000000- <1>
    49 000000C1 000000000000000000- <1>
    49 000000CA 000000000000000000- <1>
    49 000000D3 000000000000000000- <1>
    49 000000DC 000000000000000000- <1>
    49 000000E5 000000000000000000- <1>
    49 000000EE 000000000000000000- <1>
    49 000000F7 000000000000000000  <1>
    50                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    51                              <1>     ;Store space for a static PSP
    52 00000100 000000000000000000- <1>     db 100h dup 00h
    52 00000109 000000000000000000- <1>
    52 00000112 000000000000000000- <1>
    52 0000011B 000000000000000000- <1>
    52 00000124 000000000000000000- <1>
    52 0000012D 000000000000000000- <1>
    52 00000136 000000000000000000- <1>
    52 0000013F 000000000000000000- <1>
    52 00000148 000000000000000000- <1>
    52 00000151 000000000000000000- <1>
    52 0000015A 000000000000000000- <1>
    52 00000163 000000000000000000- <1>
    52 0000016C 000000000000000000- <1>
    52 00000175 000000000000000000- <1>
    52 0000017E 000000000000000000- <1>
    52 00000187 000000000000000000- <1>
    52 00000190 000000000000000000- <1>
    52 00000199 000000000000000000- <1>
    52 000001A2 000000000000000000- <1>
    52 000001AB 000000000000000000- <1>
    52 000001B4 000000000000000000- <1>
    52 000001BD 000000000000000000- <1>
    52 000001C6 000000000000000000- <1>
    52 000001CF 000000000000000000- <1>
    52 000001D8 000000000000000000- <1>
    52 000001E1 000000000000000000- <1>
    52 000001EA 000000000000000000- <1>
    52 000001F3 000000000000000000- <1>
    52 000001FC 00000000            <1>
    53                              <1> ;END OF FIRST SECTOR!!
    54                              <1> ;DOS SYSINIT BEGINS HERE
    55                              <1> ;First move the alignment of the DOSSEG to 4Kb
    56                              <1> initBegin:
    57 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    58 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    59 00000206 0F32                <1>     rdmsr
    60 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    61 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    62 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    63 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    64 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    65 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    66 00000221 89F8                <1>     mov eax, edi
    67 00000223 4889FA              <1>     mov rdx, rdi
    68 00000226 48C1EA20            <1>     shr rdx, 20h
    69 0000022A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    70                              <1> ;------------------------------------------------;
    71                              <1> ;              Connect Debugger                  ;
    72                              <1> ;------------------------------------------------;
    73                              <1> %if DEBUG
    74                              <1> ;Only connect if in debug mode
    75                              <1>     mov eax, 0C501h ;Connect debugger
    76                              <1>     int 35h
    77                              <1> %endif
    78                              <1> ;------------------------------------------------;
    79                              <1> ;           Sanitise the data area               ;
    80                              <1> ;------------------------------------------------;
    81                              <1> ; This call initialises ALL fields in the DOS    ;
    82                              <1> ; data area with 0's. Thus any fields, which     ;
    83                              <1> ; need to be initialised with a 0 value, are     ;
    84                              <1> ; initialised for free.                          ;
    85                              <1> ;------------------------------------------------;
    86 0000022C B9[B2D90300]        <1>     mov ecx, dSegLen
    87 00000231 30C0                <1>     xor al, al
    88 00000233 57                  <1>     push rdi    ;Temp save rdi on the stack
    89 00000234 F3AA                <1>     rep stosb
    90 00000236 5F                  <1>     pop rdi
    91                              <1> ;------------------------------------------------;
    92                              <1> ;          Start saving Basic DOS data           ;
    93                              <1> ;------------------------------------------------;
    94 00000237 6444883C25-         <1>     mov byte fs:[bootDrive], r15b ;Save the boot drive in memory
    94 0000023C [10C00300]          <1>
    95                              <1> ;Copy DOS to its final resting place
    96 00000240 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    96 00000245 [00C00300]          <1>
    97 00000249 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    97 0000024E [08C00300]          <1>
    98 00000252 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    99 00000255 4881C7[B2D90300]    <1>     add rdi, dSegLen ;Move destination past end of data area
   100 0000025C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
   101 00000263 B900100000          <1>     mov ecx, 1000h
   102 00000268 F348A5              <1>     rep movsq
   103                              <1> 
   104 0000026B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   105 0000026D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   106 00000271 664489C0            <1>     mov ax, r8w
   107 00000275 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
   108 0000027D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
   109 00000285 64C60425[70C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
   109 0000028D 05                  <1>
   110                              <1>     ;mov byte fs:[numPhysVol], 0    ;Number of logical drives
   111 0000028E 64C60425[96C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 8 files, at start 5
   111 00000296 05                  <1>
   112 00000297 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
   112 0000029C [97C00300]1400      <1>
   113 000002A2 64C60425[71C00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
   113 000002AA 01                  <1>
   114                              <1>     ;If no detected Int 33h devices, halt 
   115 000002AB 49C1E810            <1>     shr r8, 2*8
   116 000002AF 4584C0              <1>     test r8b, r8b
   117 000002B2 0F84690B0000        <1>     jz errorInit
   118                              <1> ;------------------------------------------------;
   119                              <1> ;          Add additional page tables            ;
   120                              <1> ;------------------------------------------------;
   121                              <1> ;This will allow for up to 64Gb of addressible space
   122 000002B8 4889EF              <1>     mov rdi, rbp
   123                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
   124 000002BB B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
   125 000002C0 57                  <1>     push rdi
   126 000002C1 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
   126 000002CA 00                  <1>
   127                              <1> pdtLoop:
   128 000002CB 48AB                <1>     stosq
   129 000002CD 480500002000        <1>     add rax, 200000h
   130 000002D3 FFC9                <1>     dec ecx
   131 000002D5 75F4                <1>     jnz pdtLoop
   132 000002D7 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   133                              <1> ;Now we add every 4kb page to the page directory pointer table
   134                              <1> ;15 4kb pages to consider
   135 000002D8 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   136 000002DB 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   137 000002DE 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   138 000002E5 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   139 000002EC B93C000000          <1>     mov ecx, 60
   140 000002F1 480D03000000        <1>     or rax, 3h      ;present and r/w
   141                              <1> pdptLoop:
   142 000002F7 48AB                <1>     stosq
   143 000002F9 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   144 000002FF FFC9                <1>     dec ecx
   145 00000301 75F4                <1>     jnz pdptLoop
   146 00000303 0F20DF              <1>     mov rdi, cr3
   147 00000306 0F22DF              <1>     mov cr3, rdi
   148                              <1> ;------------------------------------------------;
   149                              <1> ;                   MCB inits                    ;
   150                              <1> ;------------------------------------------------;
   151                              <1> mcbInit:
   152 00000309 B820E80000          <1>     mov eax, 0E820h
   153 0000030E CD35                <1>     int 35h
   154                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   155 00000310 E804010000          <1>     call .mcbFindAddress
   156 00000315 7349                <1>     jnc .mcbi1  ;If found, proceed
   157                              <1>     ;Here, we try use E801h
   158 00000317 B801E80000          <1>     mov eax, 0E801h
   159 0000031C CD35                <1>     int 35h
   160 0000031E 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   161 00000321 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   162 00000324 85C0                <1>     test eax, eax
   163 00000326 741B                <1>     jz .worst
   164 00000328 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   165 0000032B C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   166 0000032E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   167 00000336 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   168 0000033E E909010000          <1>     jmp mcbBuild
   169                              <1> .worst:
   170                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   171 00000343 B800002000          <1>     mov eax, 200000h
   172 00000348 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   172 0000034D [08C00300]          <1>
   173 00000351 29D8                <1>     sub eax, ebx
   174 00000353 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   175 0000035B E9EC000000          <1>     jmp mcbBuild 
   176                              <1> .mcbi1:
   177 00000360 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   178 00000363 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   178 0000036C 00                  <1>
   179 0000036D 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   180 00000371 0F85C2000000        <1>     jne .mcbFail
   181 00000377 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   182                              <1>     ;PCI hole always exists so this value will always be a dword
   183 0000037B 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   184 00000383 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   185 00000386 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   186 00000389 4881FB00000001      <1>     cmp rbx, 1000000h  
   187 00000390 773C                <1>     ja .skipISA
   188                              <1> ;Here we deal with ISA hole issues
   189 00000392 B820E80000          <1>     mov eax, 0E820h
   190 00000397 CD35                <1>     int 35h
   191 00000399 48B800000001000000- <1>     mov rax, 1000000h
   191 000003A2 00                  <1>
   192 000003A3 E871000000          <1>     call .mcbFindAddress
   193 000003A8 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   194 000003AE 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   194 000003B7 00                  <1>
   195 000003B8 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   196 000003BC 0F858A000000        <1>     jne mcbBuild  
   197 000003C2 488B5808            <1>     mov rbx, qword [rax + 8]
   198 000003C6 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   199                              <1> .skipISA:
   200 000003CE B820E80000          <1>     mov eax, 0E820h
   201 000003D3 CD35                <1>     int 35h
   202 000003D5 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   202 000003DE 00                  <1>
   203 000003DF E835000000          <1>     call .mcbFindAddress
   204 000003E4 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   205 000003E6 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   205 000003EF 00                  <1>
   206 000003F0 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   207 000003F4 7556                <1>     jne mcbBuild   
   208 000003F6 488B5808            <1>     mov rbx, qword [rax + 8]
   209                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   210 000003FA 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   210 00000403 00                  <1>
   211 00000404 4839CB              <1>     cmp rbx, rcx
   212 00000407 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   213 0000040B 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   213 00000410 [1BC00300]          <1>
   214 00000414 E933000000          <1>     jmp mcbBuild
   215                              <1> .mcbFindAddress:
   216                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   217                              <1> ;Entry: rax = Address of arena to search for
   218                              <1> ;       rsi = Pointer to memory map
   219                              <1> ;       ecx = Number of 24 byte entries
   220                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   221                              <1> ;       CF=CY : value in rax not found
   222 00000419 56                  <1>     push rsi
   223 0000041A 51                  <1>     push rcx
   224 0000041B 50                  <1>     push rax
   225                              <1> .mfa0:
   226 0000041C 483B06              <1>     cmp rax, qword [rsi]
   227 0000041F 7410                <1>     je .mcbAddressFound
   228 00000421 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   229 00000428 FFC9                <1>     dec ecx
   230 0000042A 79F0                <1>     jns .mfa0
   231                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   232 0000042C 58                  <1>     pop rax
   233 0000042D 59                  <1>     pop rcx
   234 0000042E 5E                  <1>     pop rsi
   235 0000042F F9                  <1>     stc
   236 00000430 C3                  <1>     ret
   237                              <1> .mcbAddressFound:
   238 00000431 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   239 00000434 59                  <1>     pop rcx ;Pop old rax value off
   240 00000435 59                  <1>     pop rcx
   241 00000436 5E                  <1>     pop rsi
   242 00000437 F8                  <1>     clc
   243 00000438 C3                  <1>     ret
   244                              <1> .mcbFail:
   245 00000439 488D2D080A0000      <1>     lea rbp, mcbFailmsg
   246 00000440 B804130000          <1>     mov eax, 1304h
   247 00000445 CD30                <1>     int 30h
   248 00000447 E9D5090000          <1>     jmp errorInit
   249                              <1> 
   250                              <1> mcbBuild:
   251                              <1> ;Actually build the MCB chain here
   252                              <1> ;Start by computing the difference between userbase and DOS area
   253                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   254 0000044C 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   254 00000451 [08C00300]          <1>
   255 00000455 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   256 0000045C 56                  <1>     push rsi    ;Save ptr
   257 0000045D 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   258 00000464 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   259 00000467 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   260 0000046F 5B                  <1>     pop rbx
   261 00000470 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   262 00000473 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   263 0000047B 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   264 00000483 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   265 00000486 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   266 00000489 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   266 0000048E [2BC00300]          <1>
   267                              <1> 
   268                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   269 00000492 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   269 0000049A 00000000            <1>
   270 0000049E 746E                <1>     jz .skipISA
   271                              <1>     ;Here if an ISA hole exists, place a MCB around it
   272 000004A0 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   273                              <1>     ;Remove one MCB worth of space from alloc
   274 000004A7 31C9                <1>     xor ecx, ecx
   275 000004A9 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   276 000004AC 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   277 000004B2 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   278 000004B5 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   279 000004B8 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   280 000004BB C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   281 000004BE 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   282 000004C6 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   282 000004CF 00                  <1>
   283 000004D0 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   284 000004D3 480510000000        <1>     add rax, mcb_size
   285 000004D9 4829C1              <1>     sub rcx, rax    ;Take their difference
   286 000004DC C1E904              <1>     shr ecx, 4
   287 000004DF 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   288 000004E2 C1E104              <1>     shl ecx, 4  ;Get bytes again
   289 000004E5 4881C310000000      <1>     add rbx, mcb_size
   290 000004EC 4801CB              <1>     add rbx, rcx
   291                              <1>     ;RBX should now be at 16Mb
   292 000004EF C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   293 000004F2 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   294 000004FA 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   295 00000502 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   296 00000505 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   297 0000050B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   298                              <1> .skipISA:
   299                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   300                              <1>     ;rbx points to a block with "Z" marker
   301 0000050E 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   301 00000516 00000000            <1>
   302 0000051A 7470                <1>     jz .exit
   303                              <1>     ;Add PCI hole MCB
   304 0000051C 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   305                              <1>     ;Remove one MCB worth of space from alloc
   306 00000523 31C9                <1>     xor ecx, ecx
   307 00000525 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   308 00000528 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   309 0000052E C1E104              <1>     shl ecx, 4  ;Get bytes
   310 00000531 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   311 00000534 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   312 00000537 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   313 0000053A 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   314 00000542 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   314 0000054B 00                  <1>
   315 0000054C 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   316 0000054F 480510000000        <1>     add rax, mcb_size
   317 00000555 4829C1              <1>     sub rcx, rax    ;Take their difference
   318 00000558 C1E904              <1>     shr ecx, 4
   319 0000055B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   320 0000055E C1E104              <1>     shl ecx, 4  ;Get bytes again
   321 00000561 4881C310000000      <1>     add rbx, mcb_size
   322 00000568 4801CB              <1>     add rbx, rcx
   323                              <1>     ;RBX should now be at 4Gb
   324 0000056B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   325 0000056E 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   326 00000576 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   326 0000057B [1BC00300]          <1>
   327 0000057F 48C1E904            <1>     shr rcx, 4
   328 00000583 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   329 00000589 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   330                              <1> .exit:
   331                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   332 0000058C 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   333                              <1> ;------------------------------------------------;
   334                              <1> ;          Kernel inits and adjustments          ;
   335                              <1> ;------------------------------------------------;
   336                              <1> ;Adjust Interrupt Entries Int 40h-49h
   337                              <1> adjInts:
   338 00000593 B340                <1>     mov bl, 40h
   339 00000595 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   340 0000059A CD35                <1>     int 35h
   341 0000059C B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   342 000005A1 488D3D34090000      <1>     lea rdi, intData
   343 000005A8 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   344                              <1> .ai0:
   345 000005AA B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   346 000005AF 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   347 000005B2 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   348                              <1> .ai1:
   349 000005B5 CD35                <1>     int 35h
   350 000005B7 4881C708000000      <1>     add rdi, 8
   351 000005BE FFC1                <1>     inc ecx
   352 000005C0 81F950000000        <1>     cmp ecx, 50h
   353 000005C6 75E2                <1>     jne .ai0
   354                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   355                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   356                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   357                              <1>     %if DEBUG
   358                              <1> debugPopUpMsg:
   359                              <1>     push rbx
   360                              <1>     push rbp
   361                              <1>     push rcx
   362                              <1>     push rdx
   363                              <1>     mov ecx, 53 ;A large number of lines
   364                              <1>     xor edx, edx    ;COM 1
   365                              <1> .cls:
   366                              <1>     mov eax, 010Ah ;Transmit Line feed
   367                              <1>     int 34h
   368                              <1>     dec ecx
   369                              <1>     jnz .cls
   370                              <1>     lea rbx, qword [debPrintNullString + rbp]
   371                              <1>     lea rbp, .msg
   372                              <1>     call rbx
   373                              <1>     jmp short .exit
   374                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   375                              <1> .exit:
   376                              <1>     pop rdx
   377                              <1>     pop rcx
   378                              <1>     pop rbp
   379                              <1>     pop rbx
   380                              <1>     %endif
   381                              <1> 
   382                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   383 000005C8 488D1552080000      <1>     lea rdx, errorInit ;Get segment start address
   384 000005CF B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   385 000005D4 CD41                <1>     int 41h
   386 000005D6 488D1544080000      <1>     lea rdx, errorInit ;Get segment start address
   387 000005DD B844250000          <1>     mov eax, 2544h
   388 000005E2 CD41                <1>     int 41h
   389                              <1> ;------------------------------------------------;
   390                              <1> ;          Driver Adjustments and inits          ;
   391                              <1> ;------------------------------------------------;
   392                              <1> ;Modify the pointers in nData before putting them in the data area
   393 000005E4 48012D71090000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   394 000005EB 48012D74090000      <1>     add qword [nData + drvHdr.strPtr], rbp
   395 000005F2 48012D75090000      <1>     add qword [nData + drvHdr.intPtr], rbp
   396                              <1> ;Copy the Null driver to its location in Sysvars
   397 000005F9 B922000000          <1>     mov ecx, drvHdr_size
   398 000005FE 488D3557090000      <1>     lea rsi, qword [nData]
   399 00000605 488DBD[73C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   400 0000060C F3A4                <1>     rep movsb   
   401                              <1> 
   402                              <1> ;Adjust the addresses in the other driver headers 
   403 0000060E 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   403 00000610 [8A57000000000000]  <1>
   404 00000618 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   405 0000061D 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   406                              <1> adjDrivers:
   407 00000621 E8DF070000          <1>     call adjustDrvHdr
   408 00000626 E2F9                <1>     loop adjDrivers
   409                              <1> ;Open NUL
   410                              <1> ;NUL opened
   411                              <1> ;Open CON
   412                              <1> conInit:    ;Rather than keeping this resident... do it here
   413                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   414 00000628 488D95[755A0000]    <1>     lea rdx, qword [rbp + fastOutput]
   415 0000062F B849250000          <1>     mov eax, 2549h
   416 00000634 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   417 00000636 488D95[7D5A0000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   418 0000063D B83B250000          <1>     mov eax, 253Bh
   419 00000642 CD41                <1>     int 41h ;Hook int 3Bh
   420                              <1> .ci0:
   421 00000644 B401                <1>     mov ah, 01      ;Get buffer status
   422 00000646 CD36                <1>     int 36h
   423 00000648 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   424 0000064A 30E4                <1>     xor ah, ah
   425 0000064C CD36                <1>     int 36h ;Read key to flush from buffer
   426 0000064E EBF4                <1>     jmp short .ci0
   427                              <1> .ci1:
   428 00000650 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   429 00000655 CD30                <1>     int 30h
   430 00000657 B402                <1>     mov ah, 02h
   431 00000659 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   432 0000065B 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   433 0000065D CD30                <1>     int 30h
   434 0000065F B707                <1>     mov bh, 07h     ;Grey/Black attribs
   435 00000661 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   436 00000666 CD30                <1>     int 30h
   437                              <1> 
   438                              <1>     ;Save ptr to ConHdr in Sysvars
   439 00000668 488D85[8A570000]    <1>     lea rax, qword [rbp + conHdr]
   440 0000066F 6448890425-         <1>     mov qword fs:[vConPtr], rax
   440 00000674 [4BC00300]          <1>
   441                              <1> 
   442                              <1>     ;Fix the ext ESC function handler address
   443 00000678 488D85[72230000]    <1>     lea rax, qword [rbp + editKeys]
   444 0000067F 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   444 00000684 [59000000]          <1>
   445                              <1> 
   446                              <1> ;CLOCK init prock
   447                              <1> ;Set the time and date using the RTC (if present)
   448                              <1> clkInit:
   449                              <1>    ;Save ptr to ClkHdr in Sysvars first
   450 00000688 488D85[F0570000]    <1>     lea rax, qword [rbp + clkHdr]
   451 0000068F 6448890425-         <1>     mov qword fs:[clockPtr], rax
   451 00000694 [43C00300]          <1>
   452                              <1> ;CH - Hours, in BCD
   453                              <1> ;CL - Minutes, in BCD
   454                              <1> ;DH - Seconds, in BCD
   455 00000698 B402                <1>     mov ah, 02  ;Read RTC Time
   456 0000069A CD3A                <1>     int 3Ah
   457 0000069C 7271                <1>     jc .clkEnd  ;if error, just exit
   458                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   459 0000069E 0FB6C5              <1>     movzx eax, ch   ;Hours
   460 000006A1 E84D000000          <1>     call .bcd2Bin
   461 000006A6 88C5                <1>     mov ch, al
   462 000006A8 0FB6C1              <1>     movzx eax, cl     ;Mins
   463 000006AB E843000000          <1>     call .bcd2Bin
   464 000006B0 88C1                <1>     mov cl, al
   465 000006B2 0FB6C6              <1>     movzx eax, dh   ;Seconds
   466 000006B5 E839000000          <1>     call .bcd2Bin
   467 000006BA 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   468 000006BC 89C2                <1>     mov edx, eax
   469 000006BE B42D                <1>     mov ah, 2Dh ;DOS Set Time
   470 000006C0 CD41                <1>     int 41h
   471                              <1> ;Now get the date from RTC
   472                              <1> ;CL - Year, in BCD
   473                              <1> ;DH - Month, in BCD
   474                              <1> ;DL - Day, in BCD
   475 000006C2 B404                <1>     mov ah, 04  ;Read RTC Date
   476 000006C4 CD3A                <1>     int 3Ah
   477 000006C6 7247                <1>     jc .clkEnd
   478                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   479 000006C8 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   480 000006CB E823000000          <1>     call .bcd2Bin
   481 000006D0 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   482 000006D3 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   483 000006D9 0FB6C6              <1>     movzx eax, dh   ;Get Months
   484 000006DC E812000000          <1>     call .bcd2Bin
   485 000006E1 88C6                <1>     mov dh, al  
   486 000006E3 0FB6C2              <1>     movzx eax, dl   ;Get day
   487 000006E6 E808000000          <1>     call .bcd2Bin
   488 000006EB 88C2                <1>     mov dl, al
   489 000006ED B42B                <1>     mov ah, 2Bh ;DOS Set Date
   490 000006EF CD41                <1>     int 41h
   491 000006F1 EB1C                <1>     jmp short .clkEnd
   492                              <1> .bcd2Bin:
   493                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   494 000006F3 51                  <1>     push rcx
   495 000006F4 89C1                <1>     mov ecx, eax
   496 000006F6 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   497 000006FB 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   498 00000701 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   499 00000704 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   500                              <1> .b2blp:
   501 00000707 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   502 00000709 FFC9                <1>     dec ecx
   503 0000070B 75FA                <1>     jnz .b2blp
   504                              <1> .b2bexit:
   505 0000070D 59                  <1>     pop rcx
   506 0000070E C3                  <1>     ret
   507                              <1> .clkEnd:
   508                              <1> ;------------------------------------------------;
   509                              <1> ;         Link DOS to temporary Buffer           ;
   510                              <1> ;------------------------------------------------;
   511                              <1> tempBufferInit:
   512 0000070F 488DBD[19010000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   513 00000716 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   513 0000071B [55C00300]          <1>
   514 0000071F 31C0                <1>     xor eax, eax
   515 00000721 48FFC8              <1>     dec rax
   516 00000724 48AB                <1>     stosq   ;.nextBufPtr, end of list
   517 00000726 AA                  <1>     stosb   ;.driveNumber, Free entry
   518 00000727 48FFC0              <1>     inc rax
   519 0000072A AA                  <1>     stosb   ;.bufferFlags, No flags
   520                              <1> ;------------------------------------------------;
   521                              <1> ;         Init msd driver, create DPB            ;
   522                              <1> ;------------------------------------------------;
   523                              <1> storageInits:
   524                              <1> ;First save dpb pointer in sysvars
   525 0000072B 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   526 00000732 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   526 00000737 [33C00300]          <1>
   527                              <1> ;Open Mass Storage
   528 0000073B E83E080000          <1>     call diskInit
   529 00000740 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   530 00000743 648A0425[6FC00300]  <1>     mov al, byte fs:[numPhysVol]
   531 0000074B 488D95[10610000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   532 00000752 30C9                <1>     xor cl, cl  ;Clear counter
   533 00000754 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   533 00000759 [33C00300]          <1>
   534                              <1> .si0:   
   535 0000075D 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   536 00000760 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   537 00000762 CD41                <1>     int 41h
   538                              <1> ;Add other data to DPB
   539 00000764 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   540 00000767 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   541 0000076A 50                  <1>     push rax
   542 0000076B 488D87[12580000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   543 00000772 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   544 00000776 58                  <1>     pop rax
   545 00000777 FEC1                <1>     inc cl
   546 00000779 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   547 0000077B 7416                <1>     je .si1
   548 0000077D 50                  <1>     push rax
   549 0000077E 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   550 00000782 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   551 00000786 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   552 00000789 58                  <1>     pop rax
   553 0000078A 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   554 00000791 EBCA                <1>     jmp short .si0
   555                              <1> .si1:
   556                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   557 00000793 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   558 0000079B 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   559                              <1> ;------------------------------------------------;
   560                              <1> ;          Find largest sector size              ;
   561                              <1> ;------------------------------------------------;
   562                              <1> sectorSizeSearch:
   563                              <1> ;Done by reading BPB's for each drive
   564 0000079E 488D9D[10610000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   565                              <1>     
   566                              <1>     ;Go thru each block individually
   567 000007A5 31C0                <1>     xor eax, eax
   568 000007A7 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   569                              <1> .findLargest:
   570 000007AA 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   571 000007AE 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   572 000007B3 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   573 000007BA 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   574 000007BD 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   575 000007C0 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   576 000007C2 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   576 000007C7 [53C00300]          <1>
   577                              <1> ;------------------------------------------------;
   578                              <1> ;                 Temp CDS inits                 ;
   579                              <1> ;------------------------------------------------;
   580                              <1> tempCDS:
   581                              <1> ;Build a temporary CDS for Drive A to use it for booting
   582 000007CB 488DBD[FBC50300]    <1>     lea rdi, qword [rbp + tmpCDS]  ;Use Temp CDS in the SDA
   583 000007D2 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   583 000007D7 [5DC00300]          <1>
   584                              <1>     ;"A:\"+NULL char (in rev order because LITTLE ENDIAN!!)
   585 000007DB C707413A5C00        <1>     mov dword [rdi + cds.sCurrentPath], 005C3A41h  
   586 000007E1 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsValidDrive   ;Set the drive to be valid!
   587 000007E7 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   587 000007EC [33C00300]          <1>
   588 000007F0 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   589 000007F4 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   590                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   591                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   592                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   593                              <1>     ;cds.dStartCluster is 0 since we zero-ed the data area earlier
   594                              <1> ;------------------------------------------------;
   595                              <1> ;     Set up general PSP areas and DOS vars      ;
   596                              <1> ;------------------------------------------------;
   597                              <1> ;Additional DOS Vars init
   598 000007FA 64C60425[6BC30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   598 00000802 FF                  <1>
   599 00000803 64C60425[33C30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   599 0000080B 2F                  <1>
   600                              <1> 
   601                              <1> ;Set network machine name to... nothing!
   602 0000080C 488DBD[38C30300]    <1>     lea rdi, qword [rbp + machineName]
   603 00000813 B910000000          <1>     mov ecx, 10h    ;16 chars long
   604 00000818 B020                <1>     mov al, SPC ;Space char
   605 0000081A F3AA                <1>     rep stosb   ;Fill with space chars
   606                              <1> 
   607                              <1> 
   608                              <1> ;Patch Data Table init
   609 0000081C 488DBD[48C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   610 00000823 488D85[4B500000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   611 0000082A 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   612 0000082C 488D85[55500000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   613 00000833 48AB                <1>     stosq
   614 00000835 488D85[5F500000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   615 0000083C 48AB                <1>     stosq
   616 0000083E 488D85[69500000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   617 00000845 48AB                <1>     stosq
   618                              <1> 
   619                              <1> ;Initial PSP Init
   620 00000847 488D1DB2F8FFFF      <1>     lea rbx, qword [tempPSP]
   621 0000084E 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   621 00000853 [81C30300]          <1>
   622 00000857 53                  <1>     push rbx
   623 00000858 4881C380000000      <1>     add rbx, psp.dta
   624 0000085F 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   624 00000864 [79C30300]          <1>
   625 00000868 5B                  <1>     pop rbx
   626 00000869 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   627 0000086E C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   628 00000875 48C7430200000000    <1>     mov qword [rbx + psp.allocSize], 0    ;Size of allocation (dummy value)
   629 0000087D 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   630 00000881 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   631 00000885 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   632 00000889 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   632 00000892 FF                  <1>
   633 00000893 48AB                <1>     stosq   ;8 bytes
   634 00000895 31C0                <1>     xor eax, eax
   635 00000897 50                  <1>     push rax    ;Save 0 on the stack
   636 00000898 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   637 0000089B 48AB                <1>     stosq   ;16 bytes
   638 0000089D AB                  <1>     stosd   ;20 bytes
   639 0000089E 58                  <1>     pop rax ;Get 0 back
   640 0000089F 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   641 000008A7 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   642 000008AB C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   643 000008AF 4889DA              <1>     mov rdx, rbx
   644 000008B2 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   645 000008B7 CD41                <1>     int 41h
   646 000008B9 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   647 000008BD B843350000          <1>     mov eax, 3543h
   648 000008C2 CD41                <1>     int 41h
   649 000008C4 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   650 000008C8 B844350000          <1>     mov eax, 3544h
   651 000008CD CD41                <1>     int 41h
   652 000008CF 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   653                              <1> 
   654 000008D3 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   655 000008D8 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   656 000008DC F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   657                              <1> ;------------------------------------------------;
   658                              <1> ;          Default File Handle Creation          ;
   659                              <1> ;                                                ;
   660                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   661                              <1> ;------------------------------------------------;
   662                              <1> defaultFileHandles:
   663                              <1> ;Fill in the default file table entries
   664 000008DE 488D9D[99C00300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   665 000008E5 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   666 000008EC 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   667 000008F2 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   667 000008F7 [3BC00300]          <1>
   668 000008FB 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   668 00000904 20                  <1>
   669                              <1> ;GOTO FIRST FILE 
   670 00000905 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   671                              <1> ;Write AUX
   672 0000090C 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   673 00000911 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   674 00000917 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   675 0000091B C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   676                              <1>     ;No EOF when reading from the device
   677 0000091F 488B85[AC570000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   678 00000926 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   679                              <1>     ;Ignore disk related fields and Date/Time of open
   680 0000092A 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   681                              <1>     ;11 chars in 8.3 name
   682 0000092E 488D3587050000      <1>     lea rsi, auxName
   683 00000935 B903000000          <1>     mov ecx, 3
   684 0000093A F3A4                <1>     rep movsb   ;Move the three bytes
   685 0000093C 4889D0              <1>     mov rax, rdx
   686 0000093F 48AB                <1>     stosq   ;Eight spaces left to print
   687 00000941 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   687 00000946 [81C30300]          <1>
   688 0000094A 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   689                              <1> ;GOTO NEXT ENTRY
   690 0000094E 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   691                              <1>     ;Write CON
   692 00000955 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   693 0000095A 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   694 00000960 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   695 00000964 C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   696                              <1>     ;No EOF when reading from the device
   697 00000968 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   697 0000096D [4BC00300]          <1>
   698 00000971 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   699                              <1>     ;Ignore disk related fields and Date/Time of open
   700 00000975 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   701                              <1>     ;11 chars in 8.3 name
   702 00000979 488D3538050000      <1>     lea rsi, conName
   703 00000980 B903000000          <1>     mov ecx, 3
   704 00000985 F3A4                <1>     rep movsb   ;Move the three bytes
   705 00000987 4889D0              <1>     mov rax, rdx
   706 0000098A 48AB                <1>     stosq   ;Eight spaces left to print
   707 0000098C 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   707 00000991 [81C30300]          <1>
   708 00000995 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   709                              <1> ;GOTO NEXT ENTRY
   710 00000999 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   711                              <1> ;Write PRN
   712 000009A0 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   713 000009A5 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   714 000009AB C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   715 000009AF C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   716                              <1>     ;Want EOF when reading from to the device
   717 000009B3 488B85[CE570000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   718 000009BA 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   719                              <1>     ;Ignore disk related fields and Date/Time of open
   720 000009BE 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   721                              <1>     ;11 chars in 8.3 name
   722 000009C2 488D35F7040000      <1>     lea rsi, prnName
   723 000009C9 B903000000          <1>     mov ecx, 3
   724 000009CE F3A4                <1>     rep movsb   ;Move the three bytes
   725 000009D0 4889D0              <1>     mov rax, rdx
   726 000009D3 48AB                <1>     stosq   ;Eight spaces left to print
   727 000009D5 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   727 000009DA [81C30300]          <1>
   728 000009DE 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   729                              <1> ;Zero word 0 of entry 4 and 5
   730 000009E2 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   731 000009E9 31C0                <1>     xor eax, eax
   732                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   733                              <1>     ; which is ok as these are empty entries, ready to be used)
   734 000009EB 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   735 000009ED 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   736 000009F4 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   737                              <1> ;------------------------------------------------;
   738                              <1> ;               Load CONFIG.SYS                  ;
   739                              <1> ;------------------------------------------------;
   740                              <1> ;------------------------------------------------;
   741                              <1> ;              Process CONFIG.SYS                ;
   742                              <1> ;------------------------------------------------;
   743                              <1> ;------------------------------------------------;
   744                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   745                              <1> ;------------------------------------------------;
   746                              <1> ;------------------------------------------------;
   747                              <1> ;   Setup Final Data Areas With Overrides from   ;
   748                              <1> ;                  CONFIG.SYS                    ;
   749                              <1> ;------------------------------------------------;
   750                              <1> ;------------------------------------------------;
   751                              <1> ;           Load Command interpreter             ;
   752                              <1> ;------------------------------------------------;
   753 000009F6 488D1535040000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   754 000009FD B409                <1>     mov ah, 09h
   755 000009FF CD41                <1>     int 41h
   756                              <1> ;Resize DOS allocation before loading COMMAND.COM
   757 00000A01 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   757 00000A06 [2BC00300]          <1>
   758 00000A0A 4981C010000000      <1>     add r8, mcb.program
   759 00000A11 BB49110000          <1>     mov ebx, dynamicDataAreaLength
   760 00000A16 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   761 00000A19 FFC3                <1>     inc ebx
   762 00000A1B B44A                <1>     mov ah, 4Ah
   763 00000A1D CD41                <1>     int 41h
   764                              <1>     
   765                              <1>     %if DEBUG && ALLOCTEST
   766                              <1> ;Test Allocation, Growth and Deallocation
   767                              <1>     mov r15, qword fs:[currentPSP]
   768                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   769                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   770                              <1>     mov ah, 48h ;Allocate
   771                              <1>     int 41h
   772                              <1> 
   773                              <1>     mov byte [rax - 10h], 0 ;Trash chain
   774                              <1>     mov r8, rax ;Move the pointer to r8
   775                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   776                              <1>     mov ah, 4Ah
   777                              <1>     int 41h
   778                              <1> 
   779                              <1>     mov ah, 49h ;Free r8
   780                              <1>     int 41h
   781                              <1>     mov qword fs:[currentPSP], r15
   782                              <1>     %endif
   783                              <1> 
   784                              <1>     %if ENDSTATUS
   785                              <1> debugFinal:
   786                              <1>     ;Print system state
   787 00000A1F 55                  <1>     push rbp    ;Only rbp really matters here
   788 00000A20 4989E8              <1>     mov r8, rbp
   789                              <1> 
   790 00000A23 488D2DD0020000      <1>     lea rbp, .msg2
   791 00000A2A 4D8D88[84040000]    <1>     lea r9, qword [r8 + debPrintNullString]
   792 00000A31 41FFD1              <1>     call r9
   793                              <1> 
   794 00000A34 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   795 00000A3B 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   795 00000A40 [08C00300]          <1>
   796                              <1> 
   797 00000A44 4D8D88[BF070000]    <1>     lea r9, qword [r8 + overlayQword]
   798 00000A4B 41FFD1              <1>     call r9
   799                              <1> 
   800 00000A4E 4881C31B000000      <1>     add rbx, 19+8
   801 00000A55 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   801 00000A5A [00C00300]          <1>
   802 00000A5E 41FFD1              <1>     call r9
   803                              <1> 
   804 00000A61 4881C31B000000      <1>     add rbx, 19+8
   805 00000A68 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   805 00000A6D [2BC00300]          <1>
   806 00000A71 41FFD1              <1>     call r9
   807                              <1> 
   808 00000A74 4881C31C000000      <1>     add rbx, 20+8
   809 00000A7B 4D8D88[7C070000]    <1>     lea r9, qword [r8 + overlayDword]
   810 00000A82 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   811 00000A8A 41FFD1              <1>     call r9
   812                              <1> 
   813 00000A8D 4881C312000000      <1>     add rbx, 10+8
   814 00000A94 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   815 00000A9C 41FFD1              <1>     call r9
   816                              <1> 
   817 00000A9F 4881C312000000      <1>     add rbx, 10+8
   818 00000AA6 64488B0425-         <1>     mov rax, qword fs:[longMem]
   818 00000AAB [1BC00300]          <1>
   819 00000AAF 4D8D88[BF070000]    <1>     lea r9, qword [r8 + overlayQword]
   820 00000AB6 41FFD1              <1>     call r9
   821                              <1> 
   822 00000AB9 4881C31B000000      <1>     add rbx, 19+8
   823 00000AC0 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   823 00000AC5 [33C00300]          <1>
   824 00000AC9 41FFD1              <1>     call r9
   825                              <1> 
   826 00000ACC 4881C31B000000      <1>     add rbx, 19+8
   827 00000AD3 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   827 00000AD8 [3BC00300]          <1>
   828 00000ADC 41FFD1              <1>     call r9
   829                              <1> 
   830 00000ADF 4881C31B000000      <1>     add rbx, 19+8
   831 00000AE6 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   831 00000AEB [55C00300]          <1>
   832 00000AEF 41FFD1              <1>     call r9
   833                              <1> 
   834 00000AF2 4881C31B000000      <1>     add rbx, 19+8
   835 00000AF9 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   835 00000AFE [5DC00300]          <1>
   836 00000B02 41FFD1              <1>     call r9
   837                              <1> 
   838 00000B05 4D8D88[0A070000]    <1>     lea r9, qword [r8 + overlayByte]
   839                              <1> 
   840 00000B0C 4881C32C000000      <1>     add rbx, 25+19
   841 00000B13 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
   841 00000B19 [6FC00300]          <1>
   842 00000B1D 41FFD1              <1>     call r9
   843                              <1> 
   844 00000B20 4881C31E000000      <1>     add rbx, 30
   845 00000B27 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   845 00000B2D [12C00300]          <1>
   846 00000B31 41FFD1              <1>     call r9
   847                              <1> 
   848 00000B34 4881C31E000000      <1>     add rbx, 30
   849 00000B3B 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   849 00000B41 [11C00300]          <1>
   850 00000B45 41FFD1              <1>     call r9
   851                              <1> 
   852 00000B48 4881C310000000      <1>     add rbx, 16
   853 00000B4F 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   853 00000B55 [10C00300]          <1>
   854 00000B59 0441                <1>     add al, "A"
   855 00000B5B 8803                <1>     mov byte [rbx], al
   856                              <1> 
   857 00000B5D 488D2D10000000      <1>     lea rbp, .msg
   858 00000B64 4D8D88[84040000]    <1>     lea r9, qword [r8 + debPrintNullString]
   859 00000B6B 41FFD1              <1>     call r9
   860 00000B6E 5D                  <1>     pop rbp
   861 00000B6F E99E010000          <1>     jmp l1
   862 00000B74 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   862 00000B7D 206261736520464646- <1>
   862 00000B86 464646464646464646- <1>
   862 00000B8F 46464646680A0D      <1>
   863 00000B96 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   863 00000B9F 464646464646464646- <1>
   863 00000BA8 464646464646680A0D  <1>
   864 00000BB1 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   864 00000BBA 464646464646464646- <1>
   864 00000BC3 46464646464668200A- <1>
   864 00000BCC 0D                  <1>
   865 00000BCD 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   865 00000BD6 464646464646466820  <1>
   866 00000BDF 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   866 00000BE8 464646464646466820  <1>
   867 00000BF1 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   867 00000BFA 464646464646464646- <1>
   867 00000C03 464646464646680A0D  <1>
   868 00000C0C 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   868 00000C15 464646464646464646- <1>
   868 00000C1E 464646464646680A0D  <1>
   869 00000C27 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   869 00000C30 464646464646464646- <1>
   869 00000C39 464646464646680A0D  <1>
   870 00000C42 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   870 00000C4B 464646464646464646- <1>
   870 00000C54 464646464646680A0D  <1>
   871 00000C5D 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   871 00000C66 464646464646464646- <1>
   871 00000C6F 464646464646680A0D  <1>
   872 00000C78 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   872 00000C81 204C6F676963616C20- <1>
   872 00000C8A 447269766573204646- <1>
   872 00000C93 680A0D              <1>
   873 00000C96 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   873 00000C9F 204669786564204472- <1>
   873 00000CA8 697665732020204646- <1>
   873 00000CB1 680A0D              <1>
   874 00000CB4 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   874 00000CBD 2052656D6F7661626C- <1>
   874 00000CC6 652044727673204646- <1>
   874 00000CCF 680A0D              <1>
   875 00000CD2 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   875 00000CDB 65205A3A0A0D        <1>
   876 00000CE1 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   876 00000CEA 4F4D4D414E442E434F- <1>
   876 00000CF3 4D2E2E2E0A0D00      <1>
   877 00000CFA 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   877 00000D03 626F6F742073756D6D- <1>
   877 00000D0C 6172790A0D00        <1>
   878                              <1>     %endif
   879                              <1> l1:
   880 00000D12 B436                <1>     mov ah, 36h
   881 00000D14 B200                <1>     mov dl, 0
   882 00000D16 CD41                <1>     int 41h
   883 00000D18 488D1506040000      <1>     lea rdx, tmpDTA
   884 00000D1F B41A                <1>     mov ah, 1Ah
   885 00000D21 CD41                <1>     int 41h ;Set tempDTA to current DTA
   886 00000D23 B44E                <1>     mov ah, 4Eh
   887 00000D25 488D15DB030000      <1>     lea rdx, tmpName
   888 00000D2C 0FB60DD3030000      <1>     movzx ecx, byte [tmpAttr] ;Get the search attribute
   889 00000D33 CD41                <1>     int 41h
   890 00000D35 B44F                <1>     mov ah, 4Fh
   891 00000D37 CD41                <1>     int 41h
   892 00000D39 B43D                <1>     mov ah, 3Dh
   893 00000D3B B002                <1>     mov al, RWAccess
   894 00000D3D CD41                <1>     int 41h
   895                              <1> 
   896 00000D3F B43C                <1>     mov ah, 3ch
   897 00000D41 66B90000            <1>     mov cx, 00  ;Normal attributes
   898 00000D45 488D1559050000      <1>     lea rdx, tmpName3
   899 00000D4C CD41                <1>     int 41h
   900 00000D4E 6689055B050000      <1>     mov word [hdl], ax
   901                              <1>     ;breakpoint
   902 00000D55 B90B000000          <1>     mov ecx, testString1L
   903 00000D5A 488D1551050000      <1>     lea rdx, testString1
   904 00000D61 668B1D48050000      <1>     mov bx, word [hdl]  ;Get the handle in bx
   905 00000D68 B440                <1>     mov ah, 40h
   906 00000D6A CD41                <1>     int 41h
   907 00000D6C B918000000          <1>     mov ecx, testString2L
   908 00000D71 488D1545050000      <1>     lea rdx, testString2
   909 00000D78 668B1D31050000      <1>     mov bx, word [hdl]  ;Get the handle in bx
   910 00000D7F B440                <1>     mov ah, 40h
   911 00000D81 CD41                <1>     int 41h
   912                              <1>     ;breakpoint
   913 00000D83 B43E                <1>     mov ah, 3eh
   914 00000D85 CD41                <1>     int 41h
   915                              <1>     ;breakpoint
   916                              <1> 
   917 00000D87 B43D                <1>     mov ah, 3dh
   918 00000D89 B002                <1>     mov al, RWAccess
   919 00000D8B 488D1513050000      <1>     lea rdx, tmpName3
   920 00000D92 CD41                <1>     int 41h
   921 00000D94 66890515050000      <1>     mov word [hdl], ax
   922                              <1>     ;breakpoint
   923 00000D9B B90B000000          <1>     mov ecx, testString1L
   924 00000DA0 488D157E030000      <1>     lea rdx, tmpDTA
   925 00000DA7 668B1D02050000      <1>     mov bx, word [hdl]  ;Get the handle in bx
   926 00000DAE B43F                <1>     mov ah, 3fh
   927 00000DB0 CD41                <1>     int 41h
   928                              <1> 
   929                              <1>     ;breakpoint
   930 00000DB2 B918000000          <1>     mov ecx, testString2L
   931 00000DB7 488D1567040000      <1>     lea rdx, tmpBuf2
   932 00000DBE 668B1DEB040000      <1>     mov bx, word [hdl]  ;Get the handle in bx
   933 00000DC5 B43F                <1>     mov ah, 3fh
   934 00000DC7 CD41                <1>     int 41h
   935                              <1> 
   936 00000DC9 B460                <1>     mov ah, 60h
   937 00000DCB 488D353C030000      <1>     lea rsi, tmpName2
   938 00000DD2 488D3D4C040000      <1>     lea rdi, tmpBuf2
   939 00000DD9 CD41                <1>     int 41h
   940                              <1> 
   941                              <1> l11:
   942 00000DDB B402                <1>     mov ah, 02h
   943 00000DDD B20A                <1>     mov dl, 0Ah
   944 00000DDF CD41                <1>     int 41h
   945 00000DE1 B409                <1>     mov ah, 09h
   946 00000DE3 488D1516000000      <1>     lea rdx, .str
   947 00000DEA CD41                <1>     int 41h
   948                              <1>     ;lea rdx, tmpBuffer
   949                              <1>     ;mov ah, 0Ah  ;Buffered input
   950 00000DEC B980000000          <1>     mov ecx, 80h
   951 00000DF1 488D15AD030000      <1>     lea rdx, tmpBuffer
   952 00000DF8 31DB                <1>     xor ebx, ebx
   953 00000DFA B43F                <1>     mov ah, 3fh
   954 00000DFC CD41                <1>     int 41h
   955 00000DFE EBDB                <1>     jmp short l11
   956 00000E00 433A5C3E24          <1> .str: db "C:\>$"
   957                              <1> ;--------------------------------
   958                              <1> ;       PROCS FOR SYSINIT       :
   959                              <1> ;--------------------------------
   960                              <1> adjustDrvHdr:
   961                              <1> ;Input: rsi = Effective address of driver in DOS segment
   962                              <1> ;       rbp = Ptr to the start of the DOS segment
   963                              <1> ;Output: rsi = EA of next header in DOS segment
   964 00000E05 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   965 00000E09 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   966 00000E0D 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
   967 00000E14 740A                <1>     je .exit
   968 00000E16 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   969 00000E19 4881C622000000      <1>     add rsi, drvHdr_size
   970                              <1> .exit:
   971 00000E20 C3                  <1>     ret
   972                              <1> errorInit:
   973                              <1> ;If a critical error occurs during sysinit, fail through here
   974                              <1> ;Int 42h, 43h and 44h point here during sysinit
   975 00000E21 488D2D3A000000      <1>     lea rbp, hltmsg
   976 00000E28 B804130000          <1>     mov eax, 1304h
   977 00000E2D CD30                <1>     int 30h
   978                              <1>     ;cli ;Clear interrupts
   979                              <1>     ;mov al, -1
   980                              <1>     ;mov dx, 0A1h    ;PIC2 data
   981                              <1>     ;out dx, al      ;Mask all lines
   982                              <1>     ;mov dx, 21h     ;PIC1 data
   983                              <1>     ;out dx, al      ;Mask all lines
   984                              <1> .ei0:
   985 00000E2F F4                  <1>     hlt
   986 00000E30 EBFD                <1>     jmp short .ei0
   987                              <1> ;--------------------------------
   988                              <1> ;       DATA FOR SYSINIT        :
   989                              <1> ;--------------------------------
   990 00000E32 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   990 00000E3B 5343502F444F532E2E- <1>
   990 00000E44 2E0A0D24            <1>
   991 00000E48 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   991 00000E51 6C6F636174696F6E20- <1>
   991 00000E5A 4572726F720A0D00    <1>
   992 00000E62 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   992 00000E6B 7469616C6973696E67- <1>
   992 00000E74 20534350444F532E53- <1>
   992 00000E7D 59532E205379737465- <1>
   992 00000E86 6D2068616C74696E67- <1>
   992 00000E8F 2E2E2E00            <1>
   993 00000E93 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
   993 00000E9C 7373696E6720436F6D- <1>
   993 00000EA5 6D616E6420696E7465- <1>
   993 00000EAE 727072657465720A0D- <1>
   993 00000EB7 24                  <1>
   994 00000EB8 434F4E00            <1> conName db "CON",0
   995 00000EBC 41555800            <1> auxName db "AUX",0
   996 00000EC0 50524E00            <1> prnName db "PRN",0
   997                              <1> 
   998 00000EC4 4155544F455845432E- <1> aexec   db "AUTOEXEC.BAT",0 ;ASCIIZ for AUTOEXEC
   998 00000ECD 42415400            <1>
   999 00000ED1 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
   999 00000EDA 5300                <1>
  1000                              <1> 
  1001                              <1> intData:
  1002 00000EDC [6B3E000000000000]  <1>     dq terminateProcess ;Int 40h
  1003 00000EE4 [C34E000000000000]  <1>     dq functionDispatch ;Int 41h
  1004 00000EEC [210E000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
  1005 00000EF4 [1B50000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
  1006 00000EFC [2848000000000000]  <1>     dq dosDefCritErrHdlr 
  1007 00000F04 [F848000000000000]  <1>     dq absDiskRead      ;Int 45h
  1008 00000F0C [D948000000000000]  <1>     dq absDiskWrite     ;Int 46h
  1009 00000F14 [723E000000000000]  <1>     dq terminateRes     ;Int 47h
  1010 00000F1C [1B50000000000000]  <1>     dq defaultIretq     ;Int 48h
  1011 00000F24 [1B50000000000000]  <1>     dq defaultIretq     ;Int 49h
  1012 00000F2C [1B50000000000000]  <1>     dq defaultIretq     ;Int 4Ah
  1013 00000F34 [1B50000000000000]  <1>     dq defaultIretq     ;Int 4Bh
  1014 00000F3C [1B50000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1015 00000F44 [1B50000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1016 00000F4C [1B50000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1017 00000F54 [C454000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1018                              <1> nData:
  1019 00000F5C [8A57000000000000]  <1>     dq conHdr
  1020 00000F64 0480                <1>     dw 08004h
  1021 00000F66 [3259000000000000]  <1>     dq nulStrat
  1022 00000F6E [3859000000000000]  <1>     dq nulIntr
  1023 00000F76 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1024                              <1> 
  1025                              <1> diskInit:
  1026                              <1>     ;We create a function to deal with BPB parsing etc
  1027                              <1>     ;Start with the first primary partition on each hard disk (until max)
  1028                              <1>     ;   They dont have to be bootable
  1029                              <1>     ;Then go back and look for other partitions partitions. 
  1030                              <1>     ;   Add each other primary or logical ptn (until max)
  1031                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
  1032                              <1>     ;Use r8 as device counter
  1033 00000F7E 488DBD[38610000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
  1034 00000F85 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
  1034 00000F8D 00                  <1>
  1035 00000F8E 0F84CA000000        <1>     jz .remInit ;No? Go to removables
  1036 00000F94 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
  1036 00000F9D 00                  <1>
  1037 00000F9E B280                <1>     mov dl, 80h ;Start with HDD 0
  1038                              <1> .primary:
  1039 00000FA0 64803C25[6FC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1039 00000FA8 03                  <1>
  1040 00000FA9 0F84AF000000        <1>     je .remInit
  1041 00000FAF 31C9                <1>     xor ecx, ecx    ;Sector 0
  1042 00000FB1 E842010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
  1043 00000FB6 0F828D000000        <1>     jc .primaryEpilog
  1044                              <1>     ;Here, check MBR or BPB
  1045 00000FBC 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
  1046 00000FC5 0F857E000000        <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
  1047                              <1>     ;Now check if BPB or MBR
  1048 00000FCB 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1049 00000FCD 8A6302              <1>     mov ah, byte [rbx + 2]
  1050 00000FD0 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1051 00000FD4 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
  1052                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
  1053                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
  1054 00000FD6 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
  1055 00000FDD B104                <1>     mov cl, 4
  1056                              <1> .checkPrimary:
  1057 00000FDF 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
  1058 00000FE2 3C01                <1>     cmp al, 01
  1059 00000FE4 7421                <1>     je .primaryFound
  1060 00000FE6 3C04                <1>     cmp al, 04
  1061 00000FE8 741D                <1>     je .primaryFound
  1062 00000FEA 3C06                <1>     cmp al, 06
  1063 00000FEC 7419                <1>     je .primaryFound
  1064 00000FEE 3C0B                <1>     cmp al, 0Bh
  1065 00000FF0 7415                <1>     je .primaryFound
  1066 00000FF2 3C0C                <1>     cmp al, 0Ch
  1067 00000FF4 7411                <1>     je .primaryFound
  1068 00000FF6 3C0E                <1>     cmp al, 0Eh
  1069 00000FF8 740D                <1>     je .primaryFound
  1070 00000FFA 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1071 00001001 FEC9                <1>     dec cl
  1072 00001003 7444                <1>     jz .primaryEpilog
  1073 00001005 EBD8                <1>     jmp short .checkPrimary
  1074                              <1> .primaryFound:
  1075                              <1>     ;Copy the first sector of this partition into memory
  1076 00001007 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1077 0000100A E8E9000000          <1>     call .initReadSector
  1078 0000100F 7238                <1>     jc .primaryEpilog
  1079                              <1>     ;Now verify this is a BPB
  1080 00001011 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1081 00001013 8A6302              <1>     mov ah, byte [rbx + 2]
  1082 00001016 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1083 0000101A 752D                <1>     jne .primaryEpilog   ;If not, skip
  1084                              <1>     ;Now copy data to internal tables
  1085 0000101C 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1086 0000101F B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1087 00001024 57                  <1>     push rdi
  1088 00001025 F348A5              <1>     rep movsq   ;Copy the BPB
  1089 00001028 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1090                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1091 00001029 4A8D9C05[06610000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1092                              <1>     ;Add device count to rbx to point to correct entry
  1093 00001031 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1094 00001033 4A8D9CC5[10610000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1095 0000103B 488933              <1>     mov qword [rbx], rsi
  1096 0000103E 49FFC0              <1>     inc r8  ;Goto next logical drive
  1097 00001041 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1098                              <1> .primaryEpilog:
  1099 00001049 FEC2                <1>     inc dl  ;Goto next BIOS drive
  1100 0000104B 88D6                <1>     mov dh, dl
  1101 0000104D 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1102 00001050 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1103 00001058 0F8542FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1104                              <1> .extended:
  1105                              <1> ;We have gone through all the devices once
  1106                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1107                              <1>     ;je .remInit ;If yes, get removable devices
  1108                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1109                              <1>     ;xor ecx, ecx    ;Get MBR back
  1110                              <1>     ;call .initReadSector
  1111                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1112                              <1> .remInit:
  1113                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1114 0000105E 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1115 00001061 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1116 00001063 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1117                              <1>     ;rdi points to the space for the subsequent bpb's
  1118                              <1> .removables:
  1119 00001066 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1120 00001068 E88B000000          <1>     call .initReadSector
  1121 0000106D 7238                <1>     jc .removableEpilogue   ;Goto next device
  1122                              <1>     ;Now verify this is a BPB
  1123 0000106F 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1124 00001071 8A6302              <1>     mov ah, byte [rbx + 2]
  1125 00001074 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1126 00001078 752D                <1>     jne .removableEpilogue   ;If not, skip
  1127                              <1>     ;Now copy data to internal tables
  1128 0000107A 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1129 0000107D B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1130 00001082 57                  <1>     push rdi
  1131 00001083 F348A5              <1>     rep movsq   ;Copy the BPB
  1132 00001086 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1133                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1134 00001087 4A8D9C05[06610000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1135                              <1>     ;Add device count to rbx to point to correct entry
  1136 0000108F 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1137 00001091 4A8D9CC5[10610000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1138 00001099 488933              <1>     mov qword [rbx], rsi
  1139 0000109C 49FFC0              <1>     inc r8  ;Goto next logical drive
  1140 0000109F 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1141                              <1> .removableEpilogue:
  1142 000010A7 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1143 000010A9 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1144 000010B1 7412                <1>     je .end
  1145 000010B3 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1146 000010BA 7403                <1>     je .re0
  1147 000010BC 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1148                              <1> .re0:
  1149 000010BF 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1150 000010C3 72A1                <1>     jb .removables
  1151                              <1> .end:
  1152 000010C5 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1152 000010CD 01                  <1>
  1153 000010CE 7401                <1>     je .singleRemDev
  1154 000010D0 C3                  <1>     ret
  1155                              <1> .singleRemDev:
  1156                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1157 000010D1 488D9D[06610000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1158 000010D8 8A95[06610000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1159 000010DE 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1160 000010E1 488D9D[10610000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1161 000010E8 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1162 000010EB 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1163 000010EF 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1164 000010F7 C3                  <1>     ret
  1165                              <1> .initReadSector:
  1166                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1167 000010F8 B482                <1>     mov ah, 82h ;Read
  1168 000010FA B001                <1>     mov al, 1   ;One sector
  1169 000010FC 488D9D[49010000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1170 00001103 CD33                <1>     int 33h
  1171 00001105 C3                  <1>     ret
  1172 00001106 16                  <1> tmpAttr     db dirInclusive ;Search for all files
  1173 00001107 7363702A2E2A00      <1> tmpName     db "scp*.*",0
  1174 0000110E 2F746573742F746573- <1> tmpName2    db "/test/test2/../another",0
  1174 00001117 74322F2E2E2F616E6F- <1>
  1174 00001120 7468657200          <1>
  1175 00001125 000000000000000000- <1> tmpDTA      db 80h dup 00h
  1175 0000112E 000000000000000000- <1>
  1175 00001137 000000000000000000- <1>
  1175 00001140 000000000000000000- <1>
  1175 00001149 000000000000000000- <1>
  1175 00001152 000000000000000000- <1>
  1175 0000115B 000000000000000000- <1>
  1175 00001164 000000000000000000- <1>
  1175 0000116D 000000000000000000- <1>
  1175 00001176 000000000000000000- <1>
  1175 0000117F 000000000000000000- <1>
  1175 00001188 000000000000000000- <1>
  1175 00001191 000000000000000000- <1>
  1175 0000119A 000000000000000000- <1>
  1175 000011A3 0000                <1>
  1176 000011A5 500000000000000000- <1> tmpBuffer   db 80, 0, 126 dup 00h 
  1176 000011AE 000000000000000000- <1>
  1176 000011B7 000000000000000000- <1>
  1176 000011C0 000000000000000000- <1>
  1176 000011C9 000000000000000000- <1>
  1176 000011D2 000000000000000000- <1>
  1176 000011DB 000000000000000000- <1>
  1176 000011E4 000000000000000000- <1>
  1176 000011ED 000000000000000000- <1>
  1176 000011F6 000000000000000000- <1>
  1176 000011FF 000000000000000000- <1>
  1176 00001208 000000000000000000- <1>
  1176 00001211 000000000000000000- <1>
  1176 0000121A 000000000000000000- <1>
  1176 00001223 0000                <1>
  1177 00001225 000000000000000000- <1> tmpBuf2     db 80h dup 00h
  1177 0000122E 000000000000000000- <1>
  1177 00001237 000000000000000000- <1>
  1177 00001240 000000000000000000- <1>
  1177 00001249 000000000000000000- <1>
  1177 00001252 000000000000000000- <1>
  1177 0000125B 000000000000000000- <1>
  1177 00001264 000000000000000000- <1>
  1177 0000126D 000000000000000000- <1>
  1177 00001276 000000000000000000- <1>
  1177 0000127F 000000000000000000- <1>
  1177 00001288 000000000000000000- <1>
  1177 00001291 000000000000000000- <1>
  1177 0000129A 000000000000000000- <1>
  1177 000012A3 0000                <1>
  1178                              <1> 
  1179                              <1> 
  1180 000012A5 6D7966696C652E7473- <1> tmpName3    db "myfile.tst",0
  1180 000012AE 7400                <1>
  1181 000012B0 0000                <1> hdl dw 0
  1182 000012B2 546573742053747269- <1> testString1  db "Test String"
  1182 000012BB 6E67                <1>
  1183                              <1> testString1L equ $ - testString1
  1184 000012BD 204D6F726520537472- <1> testString2  db " More String, Less Space"
  1184 000012C6 696E672C204C657373- <1>
  1184 000012CF 205370616365        <1>
  1185                              <1> testString2L equ $ - testString2
    15                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    16                                  %include "./Source/BSS/dosSeg.asm"
    17                              <1> ;This file contains the main DOS data segment
    18                              <1> dosAPT: ;Additional Page tables
    19 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    20                              <1> dosDataArea:
    21 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    22 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    23 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    24 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    25 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    26 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    27 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    28 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    29                              <1> ;Above is the system stats
    30                              <1> ;Below is the DOS vars
    31 0003C023 ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    32                              <1>     ;   A value of 0 means no chars buffered.
    33 0003C02B ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    34                              <1> sysVarsPtr:
    35 0003C033 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    36 0003C03B ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    37 0003C043 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    38                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    39 0003C04B ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    40                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    41 0003C053 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    42 0003C055 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    43 0003C05D ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    44 0003C065 ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    45 0003C06D ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    46                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    47 0003C06F ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    48 0003C070 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    49 0003C071 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    50 0003C072 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    51 0003C073 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    52                              <1> ;Additional internal variables
    53                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    54 0003C095 ??                  <1>     singleDrv   resb 1    ;Set if last drive accessed was drive B x
    55 0003C096 ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    56 0003C097 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    57                              <1>     ;Share hook functions here
    58                              <1> ;Create SFT header and corresponding array of five default sft entries
    59 0003C099 <res Ah>            <1>     firstSftHeader  resb sfth_size
    60 0003C0A3 <res 4Fh>           <1>     firstSft    resb sft_size
    61 0003C0F2 <res 4Fh>           <1>     secondSft   resb sft_size
    62 0003C141 <res 4Fh>           <1>     thirdSft    resb sft_size
    63 0003C190 <res 4Fh>           <1>     fourthSft   resb sft_size
    64 0003C1DF <res 4Fh>           <1>     fifthSft    resb sft_size
    65                              <1> 
    66                              <1> ;Virtual CONsole Buffers
    67 0003C22E ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
    68                              <1>     ;Only incremented when CON device runs vCon
    69                              <1> vConBuf:    ;Proper buffer symbol
    70 0003C22F ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
    71 0003C230 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
    72                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
    73 0003C2B0 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
    74 0003C330 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
    75                              <1> 
    76 0003C331 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
    77 0003C332 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    78 0003C333 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
    79 0003C334 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
    80                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
    81                              <1> 
    82 0003C335 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    83                              <1> ;Server stuff. Default to all zeros (blank)
    84 0003C336 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
    85                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
    86 0003C337 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
    87 0003C338 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
    88                              <1> ;Swappable Data Area
    89 0003C348 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    90 0003C368 ??                  <1>                 resb 1  ;Alignment byte
    91                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    92 0003C369 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    93 0003C36A ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    94 0003C36B ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    95 0003C36C ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    96 0003C36D ????                <1>     errorExCde  resw 1  ;Extended Error Code
    97 0003C36F ??                  <1>     errorAction resb 1  ;Suggested action for error  
    98 0003C370 ??                  <1>     errorClass  resb 1  ;Error Class
    99 0003C371 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
   100 0003C379 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   101 0003C381 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   102                              <1> 
   103 0003C389 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   104 0003C391 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   105                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   106                              <1>     ;Lower byte: User Specified
   107 0003C393 ??                  <1>     currentDrv  resb 1  ;Default drive x
   108 0003C394 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   109                              <1> ;SDA, needs to be replaced between processes
   110                              <1> sdaMainSwap:
   111 0003C395 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   112 0003C39D ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   113 0003C3A5 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   114 0003C3A7 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   115 0003C3AF ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   116 0003C3B7 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   117 0003C3BF ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   118 0003C3C1 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   119 0003C3C9 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   120 0003C3CA ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   121 0003C3CB ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   122                              <1> 
   123 0003C3CC ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   124 0003C3D4 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   125 0003C3DC ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   126 0003C3E4 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   127 0003C3EC ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   128                              <1> ;The below flag tells DOS to print ^C in the termination function
   129 0003C3ED ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   130 0003C3EE ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   131                              <1> ;Time stuff
   132                              <1> ;Read the below two as a word
   133 0003C3EF ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   134 0003C3F0 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   135 0003C3F1 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   136 0003C3F2 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   137 0003C3F4 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   138                              <1> 
   139 0003C3F5 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   140 0003C3F6 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   141 0003C3F7 ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   142                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   143                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   144                              <1> ; without forcing to re-build the whole primary request block.
   145                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   146                              <1> ; with secondary char output going through the secondary header
   147                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   148                              <1> ; for output)
   149                              <1> ;ioReqPkt is the largest possible packet
   150 0003C3F8 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   151 0003C422 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   152 0003C44C <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   153 0003C476 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   154                              <1> ;Swappable Buffers
   155 0003C477 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   156                              <1>     ;We add an additional byte to save ah too
   157 0003C47D ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   158 0003C47F <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   159 0003C4FF <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   160 0003C57F ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   161 0003C587 ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   162 0003C58F ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   163                              <1> ;Misc bookkeeping flags and vars
   164 0003C590 <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal searching block
   165 0003C5BB <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   166 0003C5DB <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   167 0003C5E7 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards in fcbName
   168 0003C5F3 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   169 0003C5FB <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need tmp CDS
   170 0003C656 ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   171 0003C657 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   172 0003C658 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   173 0003C659 ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   174 0003C65A ??                  <1>     rwFlag      resb 1  ;00h=Read, -1=Write
   175 0003C65B ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   176 0003C65C ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   177                              <1> 
   178 0003C65D ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   179 0003C65E ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   180 0003C65F ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   181 0003C660 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   182 0003C661 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   183 0003C662 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   184 0003C663 ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   185                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   186                              <1> workingDD:  ;Create a symbol for the working device driver too
   187 0003C664 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   188 0003C66C ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   189                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   190                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   191 0003C674 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   192 0003C67C ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   193 0003C684 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   194 0003C68C ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   195 0003C68E ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   196 0003C690 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   197                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   198                              <1> ; and 32 byte offset into the sector for directory
   199 0003C698 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   200                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   201 0003C6A0 ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   202                              <1> ;***************************************************|
   203                              <1> ; Needs to be set up before any file access         |
   204                              <1> ; These vars keep track of file access properties   |
   205                              <1> ;   and must be used only for such purposes.        |
   206                              <1> ;***************************************************|
   207 0003C6A2 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   208 0003C6A6 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   209                              <1> 
   210 0003C6AA ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   211 0003C6AE ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   212 0003C6AF ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   213                              <1> 
   214 0003C6B7 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   215 0003C6B9 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   216                              <1> ;***************************************************|
   217 0003C6BD ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   218 0003C6C1 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   219 0003C6C5 ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   220 0003C6C6 ????????            <1>     bytesAppend resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   221 0003C6CA ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   222 0003C6CE ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   223                              <1> ;Directory stuff
   224 0003C6D2 ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   225 0003C6D6 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   226 0003C6DA ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   227 0003C6DC ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   228                              <1> ;Error DPB 
   229 0003C6E0 ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   230 0003C6E8 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   231                              <1> ;Stacks and scratch SFT
   232 0003C6E9 <res 528h>          <1>     critStack   resq 165
   233 0003CC11 ????????????????    <1>     critStakTop resq 1
   234                              <1> 
   235 0003CC19 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   236                              <1> 
   237 0003CC68 <res 638h>          <1>     AuxStack    resq 199
   238 0003D2A0 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   239 0003D2A8 <res 638h>          <1>     DiskStack   resq 199
   240 0003D8E0 ????????????????    <1>     DiskStakTop resq 1
   241                              <1> 
   242 0003D8E8 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   243 0003D8E9 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls! 
   244                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   245 0003D8EA <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   246 0003D95A <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   247                              <1>     sdaLen      equ     $ - sda 
   248                              <1>     sdaMSLen    equ     $ - sda
   249                              <1> 
   250                              <1> ;Additional variables NOT in the SDA
   251 0003D982 <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   252                              <1>     ;for saving the current header when quickly doing a second request
   253                              <1> 
   254 0003D9AC ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   255 0003D9AD ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   256                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   257                              <1> inExtASCII:
   258 0003D9AF ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   259 0003D9B0 ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   260                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   261                              <1>     ; copy of the date/time record
   262                              <1>     dSegLen     equ     $
    17                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    18                                  %define currSegVBase section.resSeg.vstart
    19                                  %include "./Source/Data/staticData.asm"
    20                              <1> 
    21                              <1> ;-----------------------------------:
    22                              <1> ;       Static Data Variables       :
    23                              <1> ;-----------------------------------:
    24 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    25 00000001 01                  <1> dosMinor    db 01h      ;.01
    26 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    26 0000000B 535953              <1>
    27 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    27 00000017 535953              <1>
    28                              <1> 
    29                              <1> ;-----------------------------------:
    30                              <1> ;        Static Data Tables         :
    31                              <1> ;-----------------------------------:
    32                              <1> ctryTbl:
    33                              <1> ;Country Table (defaulting to UK)
    34 0000001A 0100                <1> .dtfmt:     dw 1            ;Date time format (2 bytes)
    35                              <1>                             ;0 = month day year hh:mm:ss
    36                              <1>                             ;1 = day month year hh:mm:ss
    37                              <1>                             ;2 = year month day hh:mm:ss
    38 0000001C C2A300000000        <1> .curr:      db "£",0,0,0,0  ;ASCIIZ Currency symbol (5 chars)
    39 00000022 2C00                <1> .thouSep:   db ",",0        ;ASCIIZ Thousands separator
    40 00000024 2E00                <1> .dcmlSep:   db ".",0        ;ASCIIZ Decimal separator
    41 00000026 2D00                <1> .dateSep:   db "-",0        ;ASCIIZ Date separator
    42 00000028 3A00                <1> .timeSep:   db ":",0        ;ASCIIZ Time separator
    43 0000002A 00                  <1> .currFmt:   db 0            ;Currency Format
    44                              <1>                 ;0 = Symbol leads, without space
    45                              <1>                 ;1 = Symbol follows, without space
    46                              <1>                 ;2 = Symbol leads, one space
    47                              <1>                 ;3 = Symbol follows, one space
    48                              <1>                 ;4 = Symbol replace decimal separator
    49 0000002B 02                  <1> .digtdpt:   db 2 ;Number of digits after the decimal point
    50 0000002C 00                  <1> .timefmt:   db 0 ;Time format, Bit 0 = 0 => 12 hour clock, = 1 => 24 hour clock
    51 0000002D 0000000000000000    <1> .mapaddr:   dq 0 ;Case map address (0 is nulptr)
    52 00000035 2C00                <1> .dataSep:   db ",",0    ;Data list separator
    53 00000037 000000000000000000- <1> .resv:      db 0,0,0,0,0,0,0,0,0,0  ;Reserve 10 bytes
    53 00000040 00                  <1>
    54                              <1> 
    55                              <1> ;IO Char table
    56                              <1> ;This table has Request header length, command code and error flags
    57                              <1> ; as a packed DWORD entry
    58                              <1> ioRqCmdErrTbl:
    59                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    60                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    61 00000041 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    62 00000045 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    63 00000049 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    64 0000004D 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    65 00000051 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    66 00000055 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    67                              <1> 
    68                              <1> 
    69                              <1> 
    70                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    71                              <1> ; wish to install their own custom logic.
    72 00000059 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    73 00000061 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    74 00000062 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    75                              <1> ;Extended ASCII keys with special meanings
    76 00000063 3B                  <1> extKeyTbl   db eF1
    77 00000064 5B22                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    78 00000066 3C                  <1>             db eF2
    79 00000067 4D22                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    80 00000069 3D                  <1>             db eF3
    81 0000006A 5422                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    82 0000006C 3E                  <1>             db eF4
    83 0000006D 8922                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    84 0000006F 3F                  <1>             db eF5
    85 00000070 CE22                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    86 00000072 40                  <1>             db eF6
    87 00000073 E422                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    88 00000075 41                  <1>             db eF7
    89 00000076 EB22                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    90 00000078 4B                  <1>             db eCursL
    91 00000079 B221                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    92 0000007B 4D                  <1>             db eCursR
    93 0000007C 5B22                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    94 0000007E 52                  <1>             db eIns
    95 0000007F F622                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    96 00000081 53                  <1>             db eDel
    97 00000082 FD22                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    98                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    99                              <1> 
   100                              <1> ;When counting the number of days, first compute the number of years since
   101                              <1> ; 1980 and your year. 
   102                              <1> ;Then, using the table below, find the number of leap years between 1980
   103                              <1> ; and (YourYear - 1). 
   104                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   105                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   106                              <1> ;
   107                              <1> ;Use the months table to get the number of days in a normal month as leap 
   108                              <1> ; years are added using the previous comment.
   109                              <1> 
   110                              <1> ;This table is the number of days in the month
   111                              <1> ;The function which updates the days in Feb writes the number to this table
   112                              <1> monthsTbl:  
   113 00000084 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   113 0000008D 1F1E1F              <1>
   114                              <1> 
   115                              <1> ;Error tables
   116                              <1> errXlatTbl:
   117                              <1> ;Each entry is n bytes long, defined as
   118                              <1> ; Byte 0      : DOS function number for which translation will occur
   119                              <1> ; Byte 1      : Length of the table entry - 2
   120                              <1> ; Bytes n - 3 : Acceptable Error codes
   121                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   122                              <1> ;The table is terminated with a single -1 byte
   123                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   124                              <1> ; only on entry to a disk function
   125 00000090 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   126 00000094 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   127 00000099 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   128 0000009F 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   129 000000A3 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   130 000000A9 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   131 000000B0 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   132 000000B3 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   133 000000B7 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   134 000000BB 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   135 000000C0 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   136 000000C4 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   137 000000CA 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   138 000000D1 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   139 000000D5 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   140 000000D9 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   141 000000DC 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   142 000000E0 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   143 000000E4 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   144 000000E9 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   145 000000F1 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   146 000000F3 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   147 000000F8 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   148 000000FB 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   149 00000101 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   150 00000105 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   151 00000108 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   152 0000010E 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   153 00000115 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   154 0000011B 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   155 0000011F 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   156 00000123 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   157 00000126 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   158 0000012B FF                  <1>     db -1   ;End Of Table marker
   159                              <1> 
   160                              <1> 
   161                              <1> extErrTbl:
   162                              <1> ;This table contains the default values for how to respond
   163                              <1> ; to particular errors. Fields with -1 need to be filled in before
   164                              <1> ; setting variables using this table.
   165                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   166                              <1> ; Byte 0: Extended Error Code as a byte
   167                              <1> ; Byte 1: Error Class
   168                              <1> ; Byte 2: Error Suggested Action
   169                              <1> ; Byte 3: Error Locus
   170                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   171                              <1> ;
   172                              <1> ;Error 01: Invalid function number
   173 0000012C 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   174                              <1> ;Error 02: File not found
   175 00000130 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   176                              <1> ;Error 03: Path not found
   177 00000134 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   178                              <1> ;Error 04: Too many open handles, and no handles are left
   179 00000138 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   180                              <1> ;Error 05: Access being denied
   181 0000013C 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   182                              <1> ;Error 06: Invalid File handle being provided
   183 00000140 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   184                              <1> ;Error 07: MCB chain destroyed
   185 00000144 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   186                              <1> ;Error 08: No Memory remaining
   187 00000148 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   188                              <1> ;Error 09: Invalid MCB block Address
   189 0000014C 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   190                              <1> ;Error 0A: Bad Environment block
   191 00000150 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   192                              <1> ;Error 0B: Data provided in a bad format
   193 00000154 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   194                              <1> ;Error 0C: Access Code Invalid
   195 00000158 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   196                              <1> ;Error 0D: Error due to Invalid Data provided
   197 0000015C 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   198                              <1> ;Error 0F: Error due to a bad drive letter being provided
   199 00000160 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   200                              <1> ;Error 10: Error due to attempting to delete the CWD
   201 00000164 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   202                              <1> ;Error 11: Error due to a unknown device being used
   203 00000168 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   204                              <1> ;Error 12: No more file handles available
   205 0000016C 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   206                              <1> ;Error 50: Network request not supported
   207 00000170 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   208                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   209 00000174 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   210                              <1> ;Error 21: File Locking Violation
   211 00000178 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   212                              <1> ;Error 54: Too many levels of redirection error
   213 0000017C 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   214                              <1> ;Error 56: Bad resource password provided
   215 00000180 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   216                              <1> ;Error 52: Directory already exists
   217 00000184 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   218                              <1> ;Error 32: Network request not supported by DOS
   219 00000188 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   220                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   221 0000018C 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   222                              <1> ;Error 57: Bad parameter in request
   223 00000190 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   224                              <1> ;Error 53: Fail was returned from Int 44h
   225 00000194 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   226                              <1> ;Error 24: Sharing Buffer Full
   227 00000198 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   228 0000019C FFFFFFFF            <1>     dd -1   ;End of table signature
   229                              <1> 
   230                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   231 000001A0 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   231 000001A9 090A0B0C0D0E0F      <1>
   232 000001B0 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   232 000001B9 191A1B1C1D1E1F      <1>
   233 000001C0 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   233 000001C9 3D3E3F5B5C5D7C      <1>
   234                              <1> badDirNameCharL equ $ - badDirNameChar
   235                              <1> ;The chars * ? . \ / need to always be handled separately
   236                              <1> 
   237                              <1> extAsciiTbl:    ;This table needs to be replaced in other Codepages
   238 000001D0 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   238 000001D9 4545494949          <1>
   239 000001DE 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   239 000001E7 5559999A9B          <1>
   240 000001EC 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   240 000001F5 A5A6A7A8            <1>
   241 000001F9 A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   241 00000202 B2B3B4              <1>
   242 00000205 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   242 0000020E BEBFC0              <1>
   243 00000211 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   243 0000021A CACBCC              <1>
   244 0000021D CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   244 00000226 D6D7D8              <1>
   245 00000229 D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   245 00000232 E2E3E4              <1>
   246 00000235 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   246 0000023E EEEFF0              <1>
   247 00000241 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   247 0000024A FAFBFC              <1>
   248 0000024D FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   249                              <1> 
   250                              <1> extAsciiSig:   ;This table needs to replaces in other Codepages
   251 00000250 F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   251 00000259 F0F6F6              <1>
   252 0000025C F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   252 00000265 F6F6F6              <1>
   253 00000268 F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   253 00000271 FFF6FF              <1>
   254 00000274 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   254 0000027D FFFEF6              <1>
   255 00000280 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   255 00000289 FFF4F4              <1>
   256 0000028C F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   256 00000295 FFFFFF              <1>
   257 00000298 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   257 000002A1 FFFFFF              <1>
   258 000002A4 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   258 000002AD F6FFFF              <1>
   259 000002B0 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   259 000002B9 FFFFFF              <1>
   260 000002BC FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   260 000002C5 FFFFFF              <1>
   261 000002C8 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
    20                                  %include "./Source/Data/dispTbl.asm"
    21                              <1> ;Kernel Dispatch Function Table
    22                              <1> 
    23                              <1> kDispTbl:
    24 000002D0 B93C                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    25 000002D2 E119                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    26 000002D4 EE19                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    27 000002D6 AB1A                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    28 000002D8 D41A                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    29 000002DA DC1A                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    30 000002DC F41A                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    31 000002DE 271B                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    32 000002E0 4C1B                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    33 000002E2 AB1B                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    34 000002E4 5E1E                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    35 000002E6 BA1B                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    36 000002E8 C61B                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    37 000002EA C44E                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    38 000002EC F64E                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    39 000002EE 9A23                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    40 000002F0 9A23                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    41 000002F2 9A23                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    42 000002F4 9A23                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    43 000002F6 9A23                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    44 000002F8 9A23                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    45 000002FA 9A23                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    46 000002FC 9A23                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    47 000002FE 9A23                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    48 00000300 7F51                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    49 00000302 0F4F                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    50 00000304 9B23                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    51 00000306 164F                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    52 00000308 184F                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    53 0000030A 7F51                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    54 0000030C 7F51                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    55 0000030E B64F                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    56 00000310 7F51                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    57 00000312 AE23                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    58 00000314 AE23                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    59 00000316 AE23                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    60 00000318 AE23                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    61 0000031A 614F                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    62 0000031C C83B                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    63 0000031E AE23                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    64 00000320 AE23                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    65 00000322 AE23                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    66 00000324 D420                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    67 00000326 FB20                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    68 00000328 0121                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    69 0000032A 2221                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    70 0000032C 934F                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    71 0000032E AF23                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    72 00000330 A14F                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    73 00000332 8B3C                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    74 00000334 B84F                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    75 00000336 794E                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    76 00000338 F04F                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    77 0000033A 0150                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    78 0000033C 1250                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    79 0000033E B643                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    80 00000340 DF43                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    81 00000342 BF15                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    82 00000344 FE15                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    83 00000346 FE15                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    84 00000348 C223                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    85 0000034A D323                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    86 0000034C E124                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    87 0000034E 2025                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    88 00000350 5B25                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    89 00000352 6725                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    90 00000354 4326                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    91 00000356 B226                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    92 00000358 1D36                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    93 0000035A 9C27                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    94 0000035C DA27                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    95 0000035E CD16                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    96 00000360 4F36                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    97 00000362 7938                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    98 00000364 8139                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    99 00000366 003E                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
   100 00000368 BB3C                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   101 0000036A 5650                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   102 0000036C FA27                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   103 0000036E 6328                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   104 00000370 A74E                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   105 00000372 B04E                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   106 00000374 6450                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   107 00000376 7550                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   108 00000378 4F51                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   109 0000037A B53B                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   110 0000037C 9328                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   111 0000037E 0617                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   112 00000380 143B                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   113 00000382 5651                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   114 00000384 A828                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   115 00000386 A828                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   116 00000388 A828                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   117 0000038A 8051                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   118 0000038C F351                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   119 0000038E F351                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   120 00000390 0617                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   121 00000392 7F51                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   122 00000394 B94E                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   123 00000396 7F51                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   124 00000398 C24E                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   125 0000039A DF43                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   126 0000039C DF43                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   127 0000039E AD28                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   128 000003A0 B228                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   129 000003A2 7F51                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   130                              <1> kDispTblL  equ $ - kDispTbl 
   131                              <1> 
   132                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   133 000003A4 4851                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   134 000003A6 7F2B                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   135 000003A8 7748                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   136 000003AA 4B51                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   137 000003AC 9F49                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   138                              <1> mDispTblL   equ     $ - mDispTbl
   139                              <1> 
   140                              <1> serverDispTbl:  ;Server Dispatch functions
   141 000003AE 01                  <1>     db 01h  ;Number of entries needs to be 0Bh, but for now, 01h
   142 000003AF C350                <1>     dw serverDispatch - serverDispTbl
    21                                  %include "./Source/Debug/debug.asm"
    22                              <1> ;This file contains debugging macros, procs and strings
    23                              <1> ; that we can use to output to COM1 bypassing the operating system.
    24                              <1> ;A serial terminal must be connected for this to work.
    25                              <1> 
    26                              <1> ;Variables and equates
    27                              <1> 
    28 000003B1 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    29                              <1> 
    30 000003B9 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    30 000003C2 39414243444546      <1>
    31                              <1> ;Common procedures
    32                              <1> debMakeDebuggerRespond:
    33 000003C9 488D2D26000000      <1>     lea rbp, .msg
    34 000003D0 E8AF000000          <1>     call debPrintNullString
    35 000003D5 B900001000          <1>     mov ecx, 100000h
    36                              <1> .waiting:
    37 000003DA FFC9                <1>     dec ecx
    38 000003DC 740C                <1>     jz .timeout
    39 000003DE B402                <1>     mov ah, 02h ;Blocking recieve!
    40 000003E0 31D2                <1>     xor edx, edx
    41 000003E2 CD34                <1>     int 34h
    42 000003E4 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    43 000003E7 75F1                <1>     jnz .waiting
    44 000003E9 C3                  <1>     ret
    45                              <1> .timeout:
    46 000003EA 488D2D47000000      <1>     lea rbp, .msg2
    47 000003F1 E98E000000          <1>     jmp debPrintNullString
    48 000003F6 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    48 000003FF 6B6579206174207468- <1>
    48 00000408 65207465726D696E61- <1>
    48 00000411 6C20746F20636F6E74- <1>
    48 0000041A 696E7565206F722077- <1>
    48 00000423 61697420666F722074- <1>
    48 0000042C 696D656F75742E2E2E- <1>
    48 00000435 0A0D00              <1>
    49 00000438 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    49 00000441 436F6E74696E75696E- <1>
    49 0000044A 672E2E2E0A0D00      <1>
    50                              <1> debPrintHexByte:
    51                              <1> ;Print the hex byte in al as a hex value
    52 00000451 52                  <1>     push rdx
    53 00000452 53                  <1>     push rbx
    54 00000453 50                  <1>     push rax
    55                              <1> 
    56 00000454 88C2                <1>     mov dl, al           ;save byte in dl
    57 00000456 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    58 0000045A 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    59 0000045F 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    60 00000463 E80C000000          <1>     call .wrchar
    61 00000468 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    62 0000046B E804000000          <1>     call .wrchar
    63                              <1> 
    64 00000470 58                  <1>     pop rax
    65 00000471 5B                  <1>     pop rbx
    66 00000472 5A                  <1>     pop rdx
    67 00000473 C3                  <1>     ret
    68                              <1> .wrchar:
    69 00000474 6687DB              <1>     xchg bx, bx
    70 00000477 488D1D3BFFFFFF      <1>     lea rbx, debascii
    71 0000047E D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    72 0000047F B401                <1>     mov ah, 01h
    73 00000481 CD34                <1>     int 34h  ;print char
    74 00000483 C3                  <1>     ret
    75                              <1> 
    76                              <1> debPrintNullString:
    77                              <1> ;Print a null terminated string pointed to by rbp
    78 00000484 56                  <1>     push rsi
    79 00000485 50                  <1>     push rax
    80 00000486 52                  <1>     push rdx
    81 00000487 31D2                <1>     xor edx, edx    ;Select COM1
    82 00000489 4889EE              <1>     mov rsi, rbp
    83                              <1> .getChar:
    84 0000048C AC                  <1>     lodsb
    85 0000048D 84C0                <1>     test al, al
    86 0000048F 7406                <1>     jz .exit
    87 00000491 B401                <1>     mov ah, 01h
    88 00000493 CD34                <1>     int 34h
    89 00000495 EBF5                <1>     jmp short .getChar
    90                              <1> .exit:
    91 00000497 5A                  <1>     pop rdx
    92 00000498 58                  <1>     pop rax
    93 00000499 5E                  <1>     pop rsi
    94 0000049A C3                  <1>     ret
    95                              <1> 
    96                              <1> debPrintDOSStack:
    97                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    98                              <1> ;Shows me which function, and parameters passed and returned
    99 0000049B 488D2DA5010000      <1>     lea rbp, .a1
   100 000004A2 E8DDFFFFFF          <1>     call debPrintNullString
   101 000004A7 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   102 000004AE 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   103 000004B5 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   104 000004B8 E802030000          <1>     call overlayQword
   105 000004BD 4881C316000000      <1>     add rbx, 22
   106 000004C4 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   107 000004C8 E8F2020000          <1>     call overlayQword
   108 000004CD 4881C316000000      <1>     add rbx, 22
   109 000004D4 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   110 000004D8 E8E2020000          <1>     call overlayQword
   111 000004DD 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   112 000004E4 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   113 000004E8 E8D2020000          <1>     call overlayQword
   114 000004ED 4881C316000000      <1>     add rbx, 22 
   115 000004F4 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   116 000004F8 E8C2020000          <1>     call overlayQword
   117 000004FD 4881C316000000      <1>     add rbx, 22
   118 00000504 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   119 00000508 E8B2020000          <1>     call overlayQword
   120 0000050D 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   121 00000514 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   122 00000518 E8A2020000          <1>     call overlayQword
   123 0000051D 4881C316000000      <1>     add rbx, 22
   124 00000524 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
   125 0000052B 480560000000        <1>     add rax, callerFrame_size
   126 00000531 E889020000          <1>     call overlayQword
   127 00000536 4881C316000000      <1>     add rbx, 22
   128 0000053D 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   129 00000541 E879020000          <1>     call overlayQword
   130 00000546 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   131 0000054D 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   132 00000551 E869020000          <1>     call overlayQword
   133 00000556 488D2D06000000      <1>     lea rbp, .a0
   134 0000055D E822FFFFFF          <1>     call debPrintNullString
   135 00000562 C3                  <1>     ret
   136                              <1> 
   137 00000563 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   137 0000056C 303030303030303030- <1>
   137 00000575 30306820            <1>
   138 00000579 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   138 00000582 303030303030303030- <1>
   138 0000058B 30306820            <1>
   139 0000058F 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   139 00000598 303030303030303030- <1>
   139 000005A1 30306820            <1>
   140 000005A5 0A0D                <1>     db  0Ah,0Dh
   141 000005A7 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   141 000005B0 303030303030303030- <1>
   141 000005B9 30306820            <1>
   142 000005BD 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   142 000005C6 303030303030303030- <1>
   142 000005CF 30306820            <1>
   143 000005D3 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   143 000005DC 303030303030303030- <1>
   143 000005E5 30306820            <1>
   144 000005E9 0A0D                <1>     db 0Ah, 0Dh
   145 000005EB 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   145 000005F4 303030303030303030- <1>
   145 000005FD 30306820            <1>
   146 00000601 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   146 0000060A 303030303030303030- <1>
   146 00000613 30306820            <1>
   147 00000617 7269703D3030303030- <1>     db "rip=0000000000000000h"
   147 00000620 303030303030303030- <1>
   147 00000629 303068              <1>
   148 0000062C 0A0D                <1>     db 0Ah, 0Dh
   149 0000062E 666C673D3030303030- <1>     db "flg=0000000000000000h "
   149 00000637 303030303030303030- <1>
   149 00000640 30306820            <1>
   150 00000644 0A0D00              <1>     db 0Ah,0Dh,0
   151 00000647 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   151 00000650 206F6E20496E742034- <1>
   151 00000659 316820737461636B0A- <1>
   151 00000662 0D00                <1>
   152                              <1> 
   153                              <1> debDPBptr:
   154                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   155 00000664 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   156 0000066B 4889E8              <1>     mov rax, rbp
   157 0000066E E84C010000          <1>     call overlayQword
   158 00000673 488D2D06000000      <1>     lea rbp, .dpb
   159 0000067A E805FEFFFF          <1>     call debPrintNullString
   160 0000067F C3                  <1>     ret
   161                              <1> .dpb: 
   162 00000680 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   162 00000689 203030303030303030- <1>
   162 00000692 303030303030303068- <1>
   162 0000069B 200A0D00            <1>
   163                              <1> 
   164                              <1> debDPBBPBptr:
   165                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   166                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   167 0000069F 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   168 000006A6 4889E8              <1>     mov rax, rbp
   169 000006A9 E811010000          <1>     call overlayQword
   170 000006AE 4881C321000000      <1>     add rbx, 33
   171 000006B5 4889F0              <1>     mov rax, rsi
   172 000006B8 E802010000          <1>     call overlayQword
   173 000006BD 488D2D06000000      <1>     lea rbp, .dpb
   174 000006C4 E8BBFDFFFF          <1>     call debPrintNullString
   175 000006C9 C3                  <1>     ret
   176                              <1> .dpb: 
   177 000006CA 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   177 000006D3 203030303030303030- <1>
   177 000006DC 303030303030303068- <1>
   177 000006E5 2066726F6D20        <1>
   178 000006EB 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   178 000006F4 203030303030303030- <1>
   178 000006FD 303030303030303068- <1>
   178 00000706 200A0D00            <1>
   179                              <1> overlayByte:
   180                              <1>     ;Called with number in rax
   181                              <1>     ;pointer to START of 16 byte space for number in rbx
   182 0000070A 53                  <1>     push rbx
   183 0000070B 51                  <1>     push rcx
   184 0000070C 52                  <1>     push rdx
   185 0000070D 55                  <1>     push rbp
   186 0000070E 4889DD              <1>     mov rbp, rbx
   187 00000711 4889C2              <1>     mov rdx, rax
   188 00000714 48FFC5              <1>     inc rbp ;Go to end of number
   189                              <1> 
   190 00000717 488D1D9BFCFFFF      <1>     lea rbx, debascii
   191 0000071E 88D0                <1>     mov al, dl  ;Go low nybble first
   192 00000720 240F                <1>     and al, 0Fh
   193 00000722 D7                  <1>     xlatb
   194 00000723 884500              <1>     mov byte [rbp], al
   195 00000726 48FFCD              <1>     dec rbp ;Go down one char pos
   196 00000729 88D0                <1>     mov al, dl
   197 0000072B 24F0                <1>     and al, 0F0h    ;Hi nybble next
   198 0000072D C0E804              <1>     shr al, 4   ;Shift hi nybble low
   199 00000730 D7                  <1>     xlatb
   200 00000731 884500              <1>     mov byte [rbp], al  ;Store char
   201                              <1> 
   202 00000734 5D                  <1>     pop rbp
   203 00000735 5A                  <1>     pop rdx
   204 00000736 59                  <1>     pop rcx
   205 00000737 5B                  <1>     pop rbx
   206 00000738 C3                  <1>     ret
   207                              <1> 
   208                              <1> overlayWord:
   209                              <1>     ;Called with number in rax
   210                              <1>     ;pointer to START of 16 byte space for number in rbx
   211 00000739 53                  <1>     push rbx
   212 0000073A 51                  <1>     push rcx
   213 0000073B 52                  <1>     push rdx
   214 0000073C 55                  <1>     push rbp
   215 0000073D 4889DD              <1>     mov rbp, rbx
   216 00000740 4889C2              <1>     mov rdx, rax
   217 00000743 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   218 0000074A B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   219 0000074F 488D1D63FCFFFF      <1>     lea rbx, debascii
   220                              <1> .ow0:
   221 00000756 88D0                <1>     mov al, dl  ;Go low nybble first
   222 00000758 240F                <1>     and al, 0Fh
   223 0000075A D7                  <1>     xlatb
   224 0000075B 884500              <1>     mov byte [rbp], al
   225 0000075E 48FFCD              <1>     dec rbp ;Go down one char pos
   226 00000761 88D0                <1>     mov al, dl
   227 00000763 24F0                <1>     and al, 0F0h    ;Hi nybble next
   228 00000765 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   229 00000768 D7                  <1>     xlatb
   230 00000769 884500              <1>     mov byte [rbp], al  ;Store char
   231 0000076C 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   232 00000770 48FFCD              <1>     dec rbp
   233 00000773 FFC9                <1>     dec ecx
   234 00000775 75DF                <1>     jnz .ow0
   235 00000777 5D                  <1>     pop rbp
   236 00000778 5A                  <1>     pop rdx
   237 00000779 59                  <1>     pop rcx
   238 0000077A 5B                  <1>     pop rbx
   239 0000077B C3                  <1>     ret
   240                              <1> 
   241                              <1> overlayDword:
   242                              <1>     ;Called with number in rax
   243                              <1>     ;pointer to START of 16 byte space for number in rbx
   244 0000077C 53                  <1>     push rbx
   245 0000077D 51                  <1>     push rcx
   246 0000077E 52                  <1>     push rdx
   247 0000077F 55                  <1>     push rbp
   248 00000780 4889DD              <1>     mov rbp, rbx
   249 00000783 4889C2              <1>     mov rdx, rax
   250 00000786 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   251 0000078D B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   252 00000792 488D1D20FCFFFF      <1>     lea rbx, debascii
   253                              <1> .od0:
   254 00000799 88D0                <1>     mov al, dl  ;Go low nybble first
   255 0000079B 240F                <1>     and al, 0Fh
   256 0000079D D7                  <1>     xlatb
   257 0000079E 884500              <1>     mov byte [rbp], al
   258 000007A1 48FFCD              <1>     dec rbp ;Go down one char pos
   259 000007A4 88D0                <1>     mov al, dl
   260 000007A6 24F0                <1>     and al, 0F0h    ;Hi nybble next
   261 000007A8 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   262 000007AB D7                  <1>     xlatb
   263 000007AC 884500              <1>     mov byte [rbp], al  ;Store char
   264 000007AF 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   265 000007B3 48FFCD              <1>     dec rbp
   266 000007B6 FFC9                <1>     dec ecx
   267 000007B8 75DF                <1>     jnz .od0
   268 000007BA 5D                  <1>     pop rbp
   269 000007BB 5A                  <1>     pop rdx
   270 000007BC 59                  <1>     pop rcx
   271 000007BD 5B                  <1>     pop rbx
   272 000007BE C3                  <1>     ret
   273                              <1> 
   274                              <1> overlayQword:
   275                              <1>     ;Called with number in rax
   276                              <1>     ;pointer to START of 16 byte space for number in rbx
   277 000007BF 53                  <1>     push rbx
   278 000007C0 51                  <1>     push rcx
   279 000007C1 52                  <1>     push rdx
   280 000007C2 55                  <1>     push rbp
   281 000007C3 4889DD              <1>     mov rbp, rbx
   282 000007C6 4889C2              <1>     mov rdx, rax
   283 000007C9 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   284 000007D0 B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   285 000007D5 488D1DDDFBFFFF      <1>     lea rbx, debascii
   286                              <1> .oq0:
   287 000007DC 88D0                <1>     mov al, dl  ;Go low nybble first
   288 000007DE 240F                <1>     and al, 0Fh
   289 000007E0 D7                  <1>     xlatb
   290 000007E1 884500              <1>     mov byte [rbp], al
   291 000007E4 48FFCD              <1>     dec rbp ;Go down one char pos
   292 000007E7 88D0                <1>     mov al, dl
   293 000007E9 24F0                <1>     and al, 0F0h    ;Hi nybble next
   294 000007EB C0E804              <1>     shr al, 4   ;Shift hi nybble low
   295 000007EE D7                  <1>     xlatb
   296 000007EF 884500              <1>     mov byte [rbp], al  ;Store char
   297 000007F2 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   298 000007F6 48FFCD              <1>     dec rbp
   299 000007F9 FFC9                <1>     dec ecx
   300 000007FB 75DF                <1>     jnz .oq0
   301 000007FD 5D                  <1>     pop rbp
   302 000007FE 5A                  <1>     pop rdx
   303 000007FF 59                  <1>     pop rcx
   304 00000800 5B                  <1>     pop rbx
   305 00000801 C3                  <1>     ret
   306                              <1> 
   307                              <1> debPrintFunctionName:
   308                              <1> ;Prints the DOS function that has been entered
   309                              <1> ;Entered with ah = Function number
   310 00000802 88E0                <1>     mov al, ah  ;Get dos function number
   311 00000804 488D1DAEFBFFFF      <1>     lea rbx, debascii
   312 0000080B 488D1535000000      <1>     lea rdx, .number
   313 00000812 24F0                <1>     and al, 0F0h    ;Get high nybble first
   314 00000814 C0E804              <1>     shr al, 4
   315 00000817 D7                  <1>     xlatb
   316 00000818 8802                <1>     mov byte [rdx], al
   317 0000081A 88E0                <1>     mov al, ah
   318 0000081C 240F                <1>     and al, 0Fh
   319 0000081E D7                  <1>     xlatb
   320 0000081F 884201              <1>     mov byte [rdx + 1], al
   321 00000822 488D2D06000000      <1>     lea rbp, .dosString
   322 00000829 E856FCFFFF          <1>     call debPrintNullString
   323 0000082E C3                  <1>     ret
   324 0000082F 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   324 00000838 696F6E20496E742034- <1>
   324 00000841 31682F41483D        <1>
   325 00000847 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   326                              <1> 
   327                              <1> ;----------------:
   328                              <1> ;!!!! MACROS !!!!:
   329                              <1> ;----------------:
   330                              <1> ;Insert macro when entering a debug block
   331                              <1> %macro debugEnterM 0
   332                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   333                              <1>     mov rsp, debStackTop
   334                              <1> ;Push all registers except rsp on stack
   335                              <1>     push rax
   336                              <1>     push rbx
   337                              <1>     push rcx
   338                              <1>     push rdx
   339                              <1>     push rsi
   340                              <1>     push rdi
   341                              <1>     push rbp
   342                              <1>     push r8
   343                              <1>     push r9
   344                              <1>     push r10
   345                              <1>     push r11
   346                              <1>     push r12
   347                              <1>     push r13
   348                              <1>     push r14
   349                              <1>     push r15
   350                              <1>     pushfq
   351                              <1> %endmacro
   352                              <1> ;Insert macro when exiting a debug block
   353                              <1> %macro debugExitM 0
   354                              <1>     popfq
   355                              <1>     pop r15
   356                              <1>     pop r14
   357                              <1>     pop r13
   358                              <1>     pop r12
   359                              <1>     pop r11
   360                              <1>     pop r10
   361                              <1>     pop r9
   362                              <1>     pop r8
   363                              <1>     pop rbp
   364                              <1>     pop rdi
   365                              <1>     pop rsi
   366                              <1>     pop rdx
   367                              <1>     pop rcx
   368                              <1>     pop rbx
   369                              <1>     pop rax
   370                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   371                              <1> %endmacro
    22                                  %include "./Source/Kernel/FAT/buffun.asm"
    23                              <1> ;This file contains FAT disk buffer related functions that
    24                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    25                              <1> ;----------------------------------------------------
    26                              <1> ;           Externally referenced functions         :
    27                              <1> ;----------------------------------------------------
    28                              <1> 
    29                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    30                              <1> ;Sets the buffer in rdi to the head of the chain
    31                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    32                              <1> ;Output: Buffer header set to the head of the chain
    33 0000084D 48393D(55C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    34 00000854 7428                <1>     je .exit
    35 00000856 56                  <1>     push rsi
    36 00000857 488B35(55C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    37                              <1> .mainlp:
    38 0000085E 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    39 00000861 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    40 00000863 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    41 00000866 EBF6                <1>     jmp short .mainlp
    42                              <1> .fnd:
    43 00000868 57                  <1>     push rdi
    44 00000869 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    45 0000086C 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    46 0000086F 5F                  <1>     pop rdi ;Get original buf back
    47 00000870 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    48 00000873 488735(55C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    49 0000087A 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    50 0000087D 5E                  <1>     pop rsi
    51                              <1> .exit:
    52                              <1>     return
    18                              <2> %%_ret:
    19 0000087E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    53                              <1> 
    54                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    55                              <1> ;1 External reference
    56                              <1> ;Input: rdi = Buffer header to flush and free
    57 0000087F E844000000          <1>     call flushBuffer
    58 00000884 7306                <1>     jnc .exit
    59                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    60 00000886 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    61                              <1> .exit:
    62                              <1>     return
    18                              <2> %%_ret:
    19 0000088C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    65                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    66                              <1> ;Output: rdi = First disk buffer
    67 0000088D 488B3D(55C00300)    <1>     mov rdi, [bufHeadPtr]
    68 00000894 57                  <1>     push rdi
    69                              <1> .lp:
    70 00000895 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    71 00000899 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    72 0000089C 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    73 000008A3 75F0                <1>     jne .lp
    74 000008A5 5F                  <1>     pop rdi
    75                              <1>     return
    18                              <2> %%_ret:
    19 000008A6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    78                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    79                              <1> ; second buffer in the chain in rdi
    80                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    81                              <1> ;Output: rdi = Second buffer in the chain
    82 000008A7 52                  <1>     push rdx
    83 000008A8 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    84 000008AB E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    85 000008B0 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    86 000008B3 5A                  <1>     pop rdx
    87                              <1>     return
    18                              <2> %%_ret:
    19 000008B4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    90                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    91                              <1> ;Input: rdi = Buffer header to start searching at
    92                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    93                              <1> ;        ZF=ZE => No unreferenced buffer found
    94 000008B5 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    95 000008B9 750C                <1>     jnz .exit
    96 000008BB 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    97 000008BE 4881FFFFFFFFFF      <1>     cmp rdi, -1
    98 000008C5 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    99                              <1> .exit:
   100                              <1>     return
    18                              <2> %%_ret:
    19 000008C7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   101                              <1> 
   102                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
   103                              <1> ;Flushes the data in a sector buffer to disk!
   104                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   105                              <1> ;Exit:  CF=NC : Success
   106                              <1> ;       CF=CY : Fail, terminate the request
   107                              <1> ;First make request to device driver
   108 000008C8 50                  <1>     push rax
   109 000008C9 53                  <1>     push rbx
   110 000008CA 51                  <1>     push rcx
   111 000008CB 52                  <1>     push rdx
   112 000008CC 56                  <1>     push rsi
   113 000008CD 55                  <1>     push rbp
   114                              <1> ;If the buffer is freed, skip flushing to avoid issues
   115 000008CE 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
   116 000008D2 7454                <1>     je .fbFreeExit  ;If it is free exit
   117 000008D4 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   118 000008D8 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   119                              <1> .fbRequest0:
   120 000008DA BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   121 000008DF F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   122 000008E3 7406                <1>     jz .fbRequest1
   123 000008E5 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   124                              <1> .fbRequest1:
   125 000008EB 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   126 000008EE B901000000          <1>     mov ecx, 1  ;One sector to copy
   127 000008F3 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   128 000008F7 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   129 000008FB 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   130 000008FF E8C5410000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   131 00000904 E84C400000          <1>     call absDiskDriverCall    ;Make Driver Request
   132 00000909 7525                <1>     jnz .fbFail
   133                              <1> ;Now check if the buffer was a FAT, to write additional copies
   134 0000090B F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   135 0000090F 7417                <1>     jz .fbFreeExit  ;If not, exit
   136 00000911 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   137 00000914 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   138 00000916 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   139 00000919 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   140 0000091D E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   141                              <1> .fbFreeExit1:
   142 00000922 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   143 00000925 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   144                              <1> .fbFreeExit:
   145 00000928 F8                  <1>     clc
   146                              <1> .fbExitFail:
   147 00000929 5D                  <1>     pop rbp
   148 0000092A 5E                  <1>     pop rsi
   149 0000092B 5A                  <1>     pop rdx
   150 0000092C 59                  <1>     pop rcx
   151 0000092D 5B                  <1>     pop rbx
   152 0000092E 58                  <1>     pop rax
   153                              <1>     return
    18                              <2> %%_ret:
    19 0000092F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   154                              <1> .fbFail:
   155                              <1> ;Enter here only if the request failed
   156 00000930 FFCE                <1>     dec esi
   157 00000932 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   158                              <1> ;Request failed thrice, critical error call
   159 00000934 C605(C9C30300)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   160 0000093B E8703D0000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   161 00000940 3C01                <1>     cmp al, critRetry
   162 00000942 7496                <1>     je .fbRequest0
   163                              <1>     ;Else we fail (Ignore=Fail here)
   164 00000944 F9                  <1>     stc ;Set error flag to indicate fail
   165 00000945 E9DFFFFFFF          <1>     jmp .fbExitFail
   166                              <1> 
   167                              <1> testDirtyBufferForDrive:    ;External linkage
   168                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   169                              <1> ;Input: al = Drive number (0 based)
   170                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   171                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   172 0000094A 53                  <1>     push rbx
   173 0000094B 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   174                              <1> .tdbfdCheckBuffer:
   175 00000952 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   176 00000955 7509                <1>     jne .tdbfdGotoNextBuffer
   177 00000957 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   178 0000095B 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   179 0000095D F9                  <1>     stc ;Else dirty buffer found, set carry flag
   180                              <1> .tdbfdExit:
   181 0000095E 5B                  <1>     pop rbx
   182                              <1>     return
    18                              <2> %%_ret:
    19 0000095F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   183                              <1> .tdbfdGotoNextBuffer:
   184 00000960 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   185 00000963 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   186 0000096A 74F2                <1>     je .tdbfdExit
   187 0000096C EBE4                <1>     jmp short .tdbfdCheckBuffer
   188                              <1> 
   189                              <1> freeBuffersForDPB:
   190                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   191                              <1> ; to have a drive number of -1, thus freeing it
   192                              <1> ;Given DPB is in rbp
   193 0000096E 53                  <1>     push rbx
   194 0000096F 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   195                              <1> .i0:
   196 00000976 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   197 0000097A 7506                <1>     jne .i1 ;If no, skip freeing
   198 0000097C 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   199                              <1> .i1:
   200 00000982 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   201 00000985 4881FBFFFFFFFF      <1>     cmp rbx, -1
   202 0000098C 75E8                <1>     jne .i0
   203                              <1> .exit:
   204 0000098E 5B                  <1>     pop rbx
   205                              <1>     return
    18                              <2> %%_ret:
    19 0000098F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   206                              <1> setBufferDirty:
   207 00000990 55                  <1>     push rbp
   208 00000991 9C                  <1>     pushfq
   209 00000992 488B2D(90C60300)    <1>     mov rbp, qword [currBuff]
   210 00000999 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   211 0000099D EB1C                <1>     jmp short clearBufferReferenced.exit
   212                              <1> setBufferReferenced:
   213                              <1> ;Sets the current buffer in the buffer variable as referenced.
   214                              <1> ; AKA DOS is done with it.
   215                              <1> ;Saves flag state too 
   216 0000099F 55                  <1>     push rbp
   217 000009A0 9C                  <1>     pushfq
   218 000009A1 488B2D(90C60300)    <1>     mov rbp, qword [currBuff]
   219 000009A8 804D0920            <1>     or byte [rbp + bufferHdr.bufferFlags], refBuffer
   220 000009AC EB0D                <1>     jmp short clearBufferReferenced.exit
   221                              <1> clearBufferReferenced:
   222                              <1> ;Clears the referenced bit, if the buffer becomes referenced again
   223                              <1> ; Called if DOS is not quite done with this buffer.
   224 000009AE 55                  <1>     push rbp
   225 000009AF 9C                  <1>     pushfq
   226 000009B0 488B2D(90C60300)    <1>     mov rbp, qword [currBuff]
   227 000009B7 806509DF            <1>     and byte [rbp + bufferHdr.bufferFlags], ~refBuffer
   228                              <1> .exit:
   229 000009BB 9D                  <1>     popfq
   230 000009BC 5D                  <1>     pop rbp
   231                              <1>     return
    18                              <2> %%_ret:
    19 000009BD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> 
   234                              <1> getBuffer: ;Internal Linkage ONLY
   235                              <1> ;
   236                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   237                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   238                              <1> ;Flushes if not in disk change mode. 
   239                              <1> ;If in disk change mode, will check to see if the selected buffer 
   240                              <1> ; has data referring a device using the same DPB as we are changing.
   241                              <1> ; If it is, skip flushing, if not, flush first!
   242                              <1> ;
   243                              <1> ;This function will return a pointer to the desired data sector OR 
   244                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   245                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   246                              <1> ;Entry: rax = Sector to read
   247                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   248                              <1> ;       rsi = DPB to use for transaction
   249                              <1> ;Exit:  CF=NC => 
   250                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   251                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   252 000009BE 51                  <1>     push rcx
   253 000009BF 52                  <1>     push rdx
   254 000009C0 56                  <1>     push rsi
   255 000009C1 57                  <1>     push rdi
   256 000009C2 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   257 000009C4 E831010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   258 000009C9 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   259 000009D0 7419                <1>     je .rbReadNewSector
   260 000009D2 48893D(90C60300)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   261 000009D9 E8D0FFFFFF          <1>     call clearBufferReferenced  ;Set buffer to unref again if it was referenced
   262                              <1> .rbExit:
   263 000009DE F8                  <1>     clc
   264                              <1> .rbExitNoFlag:
   265 000009DF 5F                  <1>     pop rdi
   266 000009E0 5E                  <1>     pop rsi
   267 000009E1 5A                  <1>     pop rdx
   268 000009E2 59                  <1>     pop rcx
   269 000009E3 488B1D(90C60300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   270                              <1>     return
    18                              <2> %%_ret:
    19 000009EA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   271                              <1> .rbReadNewSector:
   272 000009EB E8B3000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   273 000009F0 803D(E8D80300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   274 000009F7 7506                <1>     jne .flush  ;We are not, flush buffer
   275 000009F9 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   276 000009FD 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   277                              <1> .flush:
   278 000009FF E87BFEFFFF          <1>     call flushAndFreeBuffer
   279 00000A04 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   280                              <1> .skipFlush:
   281                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   282                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   283                              <1>     ; is no longer owned by that File so we mark the owner as none
   284 00000A06 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   285 00000A0E 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   286 00000A11 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   287 00000A14 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   288 00000A18 80F902              <1>     cmp cl, fatBuffer
   289 00000A1B B201                <1>     mov dl, 1   ;Default values if not fat buffer
   290 00000A1D 7503                <1>     jne .rbNonFATbuffer
   291 00000A1F 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   292                              <1> .rbNonFATbuffer:
   293 00000A22 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   294 00000A25 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   295 00000A28 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   296 00000A2B 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   297 00000A2F C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   298 00000A33 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   299 00000A38 EBA5                <1>     jmp short .rbExitNoFlag
   300                              <1> 
   301                              <1> readSectorBuffer:   ;Internal Linkage
   302                              <1> ;Reads a sector into a built sector buffer
   303                              <1> ;Entry: rdi = Pointer to buffer header
   304                              <1> ;Exit:  CF=NC : Success
   305                              <1> ;       CF=CY : Fail, terminate the request
   306                              <1> ;       rbx pointing to buffer header
   307                              <1> ;First make request to device driver
   308 00000A3A 50                  <1>     push rax
   309 00000A3B 53                  <1>     push rbx
   310 00000A3C 51                  <1>     push rcx
   311 00000A3D 52                  <1>     push rdx
   312 00000A3E 56                  <1>     push rsi
   313 00000A3F 55                  <1>     push rbp
   314                              <1> .rsRequest0:
   315 00000A40 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   316 00000A45 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   317 00000A49 7406                <1>     jz .rsRequest1
   318 00000A4B 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   319                              <1> .rsRequest1:
   320 00000A51 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   321 00000A54 B901000000          <1>     mov ecx, 1  ;One sector to copy
   322 00000A59 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   323 00000A5D 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   324 00000A61 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   325 00000A65 E86A400000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   326 00000A6A E8E63E0000          <1>     call absDiskDriverCall    ;Make Driver Request
   327 00000A6F 7508                <1>     jnz .rsFail
   328                              <1> .rsExit:
   329 00000A71 F8                  <1>     clc
   330                              <1> .rsExitFail:
   331 00000A72 5D                  <1>     pop rbp
   332 00000A73 5E                  <1>     pop rsi
   333 00000A74 5A                  <1>     pop rdx
   334 00000A75 59                  <1>     pop rcx
   335 00000A76 5B                  <1>     pop rbx
   336 00000A77 58                  <1>     pop rax
   337                              <1>     return
    18                              <2> %%_ret:
    19 00000A78 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   338                              <1> .rsFail:
   339                              <1> ;Enter here only if the request failed
   340 00000A79 FFCE                <1>     dec esi
   341 00000A7B 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   342                              <1> ;Request failed thrice, critical error call
   343                              <1> ;First free the buffer if we failed to read data into it 
   344 00000A7D 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   345 00000A81 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   346 00000A87 C605(C9C30300)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   347 00000A8E E81D3C0000          <1>     call diskDevErr
   348 00000A93 3C01                <1>     cmp al, critRetry
   349 00000A95 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   350 00000A97 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   351 00000A9B EBA3                <1>     jmp short .rsRequest0
   352                              <1> .fail:
   353 00000A9D F9                  <1>     stc ;Set error flag to indicate fail
   354 00000A9E E9CFFFFFFF          <1>     jmp .rsExitFail
   355                              <1>     
   356                              <1> findLRUBuffer: ;Internal Linkage
   357                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   358                              <1> ; in rbx and the currBuff variable
   359                              <1> ;Input: Nothing
   360                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   361                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   362 00000AA3 52                  <1>     push rdx
   363 00000AA4 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   364 00000AAB 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   365 00000AAF 7436                <1>     je .flbExit 
   366 00000AB1 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   367 00000AB8 742D                <1>     je .flbExit
   368                              <1> .flbWalk:
   369 00000ABA 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   370 00000ABD 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   371 00000AC0 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   372 00000AC4 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   373 00000AC6 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   374 00000ACD 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   375 00000ACF 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   376                              <1> .flbHeadLink:
   377 00000AD6 488B15(55C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   378 00000ADD 48893D(55C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   379 00000AE4 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   380                              <1> .flbExit:
   381 00000AE7 5A                  <1>     pop rdx
   382 00000AE8 48893D(90C60300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   383                              <1>     return
    18                              <2> %%_ret:
    19 00000AEF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   384                              <1> .flbFreeLink:
   385 00000AF0 51                  <1>     push rcx
   386 00000AF1 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   387 00000AF4 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   388 00000AF7 59                  <1>     pop rcx
   389 00000AF8 EBDC                <1>     jmp short .flbHeadLink
   390                              <1> 
   391                              <1> findSectorInBuffer:     ;Internal linkage
   392                              <1> ;Finds the Buffer for a sector
   393                              <1> ;If the sector is not in a buffer, returns with a -1
   394                              <1> ;Input: rax = Sector number
   395                              <1> ;        dl = Drive number
   396                              <1> ;Output: rdi = Buffer hdr pointer or -1
   397 00000AFA 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   398                              <1> .fsiCheckBuffer:
   399 00000B01 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   400 00000B04 7507                <1>     jne .fsiGotoNextBuffer
   401 00000B06 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   402 00000B0A 7501                <1>     jne .fsiGotoNextBuffer
   403                              <1> .fsiExit:
   404                              <1>     return
    18                              <2> %%_ret:
    19 00000B0C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   405                              <1> .fsiGotoNextBuffer:
   406 00000B0D 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   407 00000B10 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   408 00000B17 74F3                <1>     je .fsiExit
   409 00000B19 EBE6                <1>     jmp short .fsiCheckBuffer
   410                              <1> ;-----------------------------------------------------------------------------
   411                              <1> ;SPECIAL BUFFER FUNCTIONS
   412                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   413                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   414                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   415                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   416                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   417                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   418                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   419                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   420                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   421                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   422                              <1> ;-----------------------------------------------------------------------------
   423                              <1> getBufForFat:
   424                              <1> ;Returns a buffer to use for fat data in rbx
   425                              <1> ;Input: [workingDPB] = DPB to transact on
   426                              <1> ;       rax = Sector to transfer
   427                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   428 00000B1B 51                  <1>     push rcx
   429 00000B1C B102                <1>     mov cl, fatBuffer
   430 00000B1E EB03                <1>     jmp short getBufCommon2
   431                              <1> getBufForDOS:
   432                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   433                              <1> ;Input: [workingDPB] = DPB to transact on
   434                              <1> ;       rax = Sector to transfer
   435                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   436 00000B20 51                  <1>     push rcx
   437 00000B21 B101                <1>     mov cl, dosBuffer
   438                              <1> getBufCommon2:
   439 00000B23 56                  <1>     push rsi
   440 00000B24 57                  <1>     push rdi    ;Push rdi to preserve it
   441 00000B25 488B35(64C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   442 00000B2C EB15                <1>     jmp short getBufCommon.makeReq
   443                              <1> getBufForDir:
   444                              <1> ;Returns a buffer to use for disk directory data in rbx
   445                              <1> ;Input: [currentSFT] = File to manipulate
   446                              <1> ;       rax = Sector to transfer
   447                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   448 00000B2E 51                  <1>     push rcx
   449 00000B2F B104                <1>     mov cl, dirBuffer
   450 00000B31 EB03                <1>     jmp short getBufCommon
   451                              <1> getBufForData:
   452                              <1> ;Returns a buffer to use for disk data in rbx
   453                              <1> ;Requires a File Handle.
   454                              <1> ;Input: [currentSFT] = File to manipulate
   455                              <1> ;       rax = Sector to transfer
   456                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   457 00000B33 51                  <1>     push rcx
   458 00000B34 B108                <1>     mov cl, dataBuffer
   459                              <1> getBufCommon:
   460 00000B36 56                  <1>     push rsi
   461 00000B37 57                  <1>     push rdi
   462 00000B38 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   463 00000B3F 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   464                              <1> .makeReq:
   465 00000B43 E876FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   466 00000B48 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   467                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   468                              <1>     ; flushed to the file!
   469                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   470                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   471                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   472 00000B4A F6C103              <1>     test cl, dosBuffer | fatBuffer
   473 00000B4D 7504                <1>     jnz .exit
   474 00000B4F 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   475                              <1> .exit:
   476 00000B53 5F                  <1>     pop rdi
   477 00000B54 5E                  <1>     pop rsi
   478 00000B55 59                  <1>     pop rcx
   479                              <1>     return
    18                              <2> %%_ret:
    19 00000B56 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   480                              <1> 
   481                              <1> flushFile:
   482                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   483                              <1> ; FAT/DOS buffers to flush
   484                              <1> ; We flush and free, and set to head of chain before continuing to search
   485                              <1> ;Input: rdi = is the file (sft) we wish to flush
   486                              <1> ;Output: CF=NC => All ok
   487                              <1> ;        CF=CY => A sector failed, exit. 
   488 00000B57 57                  <1>     push rdi
   489 00000B58 56                  <1>     push rsi
   490                              <1>     ;First check if the file has been written to?
   491 00000B59 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   492 00000B5F 742A                <1>     jz .exitNoFlush ;Exit without flushing
   493 00000B61 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   494 00000B64 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   495                              <1> .ffLoop:
   496 00000B6B 4881FFFFFFFFFF      <1>     cmp rdi, -1
   497 00000B72 7411                <1>     je .exit
   498 00000B74 F6470907            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer | dirBuffer
   499 00000B78 7514                <1>     jnz .found  ;Flush if either bit is set
   500 00000B7A 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   501 00000B7E 740E                <1>     je .found
   502 00000B80 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   503 00000B83 EBE6                <1>     jmp short .ffLoop
   504                              <1> .exit:
   505                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   506 00000B85 66816605BFFF        <1>     and word [rsi + sft.wDeviceInfo], ~blokFileToFlush  ;Clear that bit!
   507                              <1> .exitNoFlush:
   508 00000B8B 5E                  <1>     pop rsi
   509 00000B8C 5F                  <1>     pop rdi
   510                              <1>     return
    18                              <2> %%_ret:
    19 00000B8D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   511                              <1> .found:
   512                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   513                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   514 00000B8E E8ECFCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   515 00000B93 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   516                              <1>     ;If the sector has been successfully flushed, then it
   517                              <1>     ; is no longer owned by that File so we mark the owner as none
   518 00000B95 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   519 00000B9D E805FDFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   520 00000BA2 EBC7                <1>     jmp short .ffLoop
    23                                  %include "./Source/Kernel/FAT/fat.asm"
    24                              <1> ;-----------------------------------:
    25                              <1> ;       File System routines        :
    26                              <1> ;-----------------------------------:
    27                              <1> getFATtype:
    28                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    29                              <1> ;Entry: rbp = DPB to ascertain FAT
    30                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    31 00000BA4 53                  <1>     push rbx
    32 00000BA5 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    33 00000BA8 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    34 00000BAD 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    35 00000BB3 730F                <1>     jae .exit
    36 00000BB5 FFC9                <1>     dec ecx     ;FAT 12 marker
    37 00000BB7 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    38 00000BBD 7205                <1>     jb .exit
    39 00000BBF B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    40                              <1> .exit:
    41 00000BC4 5B                  <1>     pop rbx
    42                              <1>     return
    18                              <2> %%_ret:
    19 00000BC5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    43                              <1> 
    44                              <1> clust2FATEntry:
    45                              <1> ;Converts a cluster number to a offset in the FAT
    46                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    47                              <1> ;        eax = Cluster number to look for
    48                              <1> ;Exit:   eax = Sector on disk of FAT 
    49                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    50                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    51 00000BC6 53                  <1>     push rbx
    52 00000BC7 55                  <1>     push rbp
    53 00000BC8 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    54 00000BCF 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    55 00000BD2 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    56 00000BD8 731E                <1>     jae .fat32
    57 00000BDA 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    58 00000BE0 7209                <1>     jb .fat12
    59                              <1> ;FAT16
    60 00000BE2 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    61 00000BE4 6801000000          <1>     push qword 1
    62 00000BE9 EB15                <1>     jmp short .common
    63                              <1> .fat12:
    64 00000BEB 89C1                <1>     mov ecx, eax    ;ecx = eax
    65 00000BED D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    66 00000BEF 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    67 00000BF1 6800000000          <1>     push qword 0
    68 00000BF6 EB08                <1>     jmp short .common
    69                              <1> .fat32:
    70 00000BF8 6802000000          <1>     push qword 2
    71 00000BFD C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    72                              <1> .common:
    73                              <1> ;eax has the FAToffset
    74 00000C00 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    75 00000C04 31D2                <1>     xor edx, edx    ;edx = 0
    76 00000C06 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    77 00000C08 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    78 00000C0C 01D8                <1>     add eax, ebx
    79 00000C0E 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    80 00000C0F 5D                  <1>     pop rbp
    81 00000C10 5B                  <1>     pop rbx
    82                              <1>     return
    18                              <2> %%_ret:
    19 00000C11 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    83                              <1> 
    84                              <1> getStartSectorOfCluster:
    85                              <1> ;Input: eax = Cluster Number
    86                              <1> ;       rbp = dpb pointer
    87                              <1> ;Output: rax = Starting Sector number for cluster
    88                              <1> ;Gives the data sector we are at in the current cluster
    89                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    90 00000C12 51                  <1>     push rcx
    91 00000C13 09C0                <1>     or eax, eax ;Zero upper dword
    92 00000C15 482D02000000        <1>     sub rax, 2
    93 00000C1B 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    94 00000C1E 48D3E0              <1>     shl rax, cl
    95 00000C21 31C9                <1>     xor ecx, ecx
    96 00000C23 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    97 00000C26 4801C8              <1>     add rax, rcx
    98                              <1>     ;rax now has the first sector of the current cluster
    99 00000C29 59                  <1>     pop rcx
   100                              <1>     return
    18                              <2> %%_ret:
    19 00000C2A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   101                              <1> 
   102                              <1> getLastClusterInChain:
   103                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
   104                              <1> ;Input: eax = Cluster to start searching at
   105                              <1> ;Output: eax = Last cluster in chain
   106                              <1> ;If input eax = 0, output eax = 0
   107 00000C2B 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   108                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C2D 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   109 00000C2F 53                  <1>     push rbx
   110                              <1> .lp:
   111 00000C30 89C3                <1>     mov ebx, eax
   112 00000C32 E8A7010000          <1>     call walkFAT
   113 00000C37 7209                <1>     jc .exit
   114 00000C39 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   115 00000C3E 75F0                <1>     jne .lp
   116 00000C40 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   117                              <1> .exit: 
   118 00000C42 5B                  <1>     pop rbx
   119                              <1>     return
    18                              <2> %%_ret:
    19 00000C43 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   120                              <1> 
   121                              <1> getNumberOfClustersInChain:
   122                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   123                              <1> ;Input: eax = Cluster to start searching at
   124                              <1> ;Output: eax = Number of clusters in the chain
   125                              <1> ;If input eax = 0, output eax = 0
   126 00000C44 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   127                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C46 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   128 00000C48 51                  <1>     push rcx
   129 00000C49 31C9                <1>     xor ecx, ecx
   130                              <1> .lp:
   131 00000C4B FFC1                <1>     inc ecx
   132 00000C4D E88C010000          <1>     call walkFAT
   133 00000C52 7209                <1>     jc .exit
   134 00000C54 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   135 00000C59 75F0                <1>     jne .lp
   136 00000C5B 89C8                <1>     mov eax, ecx    ;Get the count
   137                              <1> .exit: 
   138 00000C5D 59                  <1>     pop rcx
   139                              <1>     return
    18                              <2> %%_ret:
    19 00000C5E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   140                              <1> 
   141                              <1> getClusterInChain:
   142                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   143                              <1> ;If an EOC is encountered, then ecx will not be 
   144                              <1> ;Input: eax = Start Cluster to start searching from
   145                              <1> ;       ecx = Number of clusters to go forwards by;
   146                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   147                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   148                              <1> ;Also usual CF babble.
   149 00000C5F 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   150                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C61 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   151 00000C63 53                  <1>     push rbx
   152 00000C64 67E30F              <1>     jecxz .exit
   153                              <1> .lp:
   154 00000C67 89C3                <1>     mov ebx, eax
   155 00000C69 E870010000          <1>     call walkFAT
   156 00000C6E 7206                <1>     jc .exit
   157 00000C70 FFC9                <1>     dec ecx
   158 00000C72 75F3                <1>     jnz .lp
   159 00000C74 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   160                              <1> .exit:
   161 00000C76 5B                  <1>     pop rbx
   162                              <1>     return
    18                              <2> %%_ret:
    19 00000C77 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> startNewChain:
   165                              <1> ;Working dpb must be set
   166                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   167                              <1> ;If CF=CY, hard error
   168 00000C78 53                  <1>     push rbx
   169 00000C79 56                  <1>     push rsi
   170 00000C7A E853000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   171 00000C7F 7215                <1>     jc .exit    ;Disk read error?
   172 00000C81 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   173 00000C86 740E                <1>     je .exit
   174 00000C88 BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   175 00000C8D 89C3                <1>     mov ebx, eax
   176 00000C8F E8F3010000          <1>     call writeFAT   ;Propagate the CF 
   177 00000C94 89D8                <1>     mov eax, ebx
   178                              <1> .exit:
   179 00000C96 5E                  <1>     pop rsi
   180 00000C97 5B                  <1>     pop rbx
   181                              <1>     return
    18                              <2> %%_ret:
    19 00000C98 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> allocateClusters:
   184                              <1> ;Working dpb must be set. 
   185                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   186                              <1> ;       ebx = Cluster to link to the new cluster
   187                              <1> ;Output:    
   188                              <1> ;   CF=NC => Complete.
   189                              <1> ;   If eax = -1, then no more free clusters. 
   190                              <1> ;   CF=CY => Hard error, exit
   191                              <1> ; ecx always has number of allocated clusters
   192 00000C99 53                  <1>     push rbx
   193 00000C9A 56                  <1>     push rsi
   194 00000C9B 51                  <1>     push rcx    ;Save tfr count on stack
   195 00000C9C 67E32B              <1>     jecxz .exit ;Allocating nothing? Exit
   196                              <1> .allocateLoop:
   197 00000C9F E82E000000          <1>     call findFreeCluster
   198 00000CA4 7224                <1>     jc .exit
   199 00000CA6 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   200 00000CAB 741D                <1>     je .exit    ;If the cluster number is -1, return immediately
   201                              <1>     ;eax has first free cluster value to use
   202                              <1>     ;First we link the previous cluster to this cluster
   203 00000CAD BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   204 00000CB2 E8D0010000          <1>     call writeFAT   ;Allocate this cluster first
   205 00000CB7 7211                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   206                              <1>     ;eax points to this allocated cluster
   207                              <1>     ;ebx points to the previous last cluster
   208 00000CB9 89C6                <1>     mov esi, eax    ;New cluster as "value"
   209 00000CBB 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   210 00000CBD E8C5010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   211 00000CC2 7206                <1>     jc .exit
   212 00000CC4 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   213 00000CC6 FFC9                <1>     dec ecx ;One less cluster allocated
   214 00000CC8 75D5                <1>     jnz .allocateLoop
   215                              <1> .exit:
   216 00000CCA 5E                  <1>     pop rsi ;Pop the tfr count into esi
   217 00000CCB F7D9                <1>     neg ecx
   218 00000CCD 01F1                <1>     add ecx, esi
   219 00000CCF 5E                  <1>     pop rsi
   220 00000CD0 5B                  <1>     pop rbx
   221                              <1>     return
    18                              <2> %%_ret:
    19 00000CD1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   222                              <1> 
   223                              <1> findFreeCluster:
   224                              <1> ;Walks the FAT to find a free cluster and returns the 
   225                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   226                              <1> ;Works on the workingDPB
   227                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   228 00000CD2 53                  <1>     push rbx
   229 00000CD3 52                  <1>     push rdx
   230 00000CD4 55                  <1>     push rbp
   231 00000CD5 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   232 00000CDC 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   233                              <1>     ;Use WALKFAT
   234                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   235                              <1>     ;If WALKFAT returns 0 then its a free cluster
   236 00000CE0 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   237 00000CE5 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   238                              <1> .fatLoop:
   239 00000CE8 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   240 00000CEA E8EF000000          <1>     call walkFAT
   241 00000CEF 720F                <1>     jc .exitFail    ;If something goes wrong, just return
   242 00000CF1 85C0                <1>     test eax, eax   ;Is this cluster free?
   243 00000CF3 7408                <1>     jz .exit    ;If yes, exit
   244 00000CF5 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   245 00000CF9 39D0                <1>     cmp eax, edx
   246 00000CFB 76EB                <1>     jbe .fatLoop
   247                              <1> .exit:
   248 00000CFD 89D8                <1>     mov eax, ebx
   249 00000CFF F8                  <1>     clc
   250                              <1> .exitFail:      ;Keep carry flag
   251 00000D00 5D                  <1>     pop rbp
   252 00000D01 5A                  <1>     pop rdx
   253 00000D02 5B                  <1>     pop rbx
   254                              <1>     return
    18                              <2> %%_ret:
    19 00000D03 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   255                              <1> 
   256                              <1> findFreeClusterData:
   257                              <1> ;Walks the FAT to find a free cluster and returns the 
   258                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   259                              <1> ;Also finds NumberOfFreeCLusters. Both fields get filled in the workingDPB
   260                              <1> ;Works on the workingDPB
   261                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   262 00000D04 53                  <1>     push rbx
   263 00000D05 52                  <1>     push rdx
   264 00000D06 55                  <1>     push rbp
   265 00000D07 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   266 00000D0E 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   267                              <1>     ;Mark dFirstFreeCluster as -1 and dNumberOfFreeClusters as 0
   268 00000D12 31D2                <1>     xor edx, edx
   269 00000D14 895531              <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], edx ;Zero this field
   270 00000D17 FFCA                <1>     dec edx
   271 00000D19 89552D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], edx ;Set to -1, unknown (i.e. none)
   272                              <1>     ;Use WALKFAT
   273                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   274                              <1>     ;If WALKFAT returns 0 then its a free cluster
   275 00000D1C B802000000          <1>     mov eax, 2  ;Start with cluster 2
   276 00000D21 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   277                              <1> .fatLoop:
   278 00000D24 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   279 00000D26 E8B3000000          <1>     call walkFAT
   280 00000D2B 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   281 00000D2D 85C0                <1>     test eax, eax   ;Is this cluster free?
   282 00000D2F 750C                <1>     jne .fatProceed
   283 00000D31 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   284 00000D34 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   285 00000D3B 7410                <1>     je .fatFirst
   286                              <1> .fatProceed:
   287 00000D3D 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   288 00000D41 39D0                <1>     cmp eax, edx
   289 00000D43 76DF                <1>     jbe .fatLoop
   290                              <1> .exit:
   291 00000D45 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   292 00000D48 F8                  <1>     clc
   293                              <1> .exitFail:      ;Keep carry flag
   294 00000D49 5D                  <1>     pop rbp
   295 00000D4A 5A                  <1>     pop rdx
   296 00000D4B 5B                  <1>     pop rbx
   297                              <1>     return
    18                              <2> %%_ret:
    19 00000D4C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   298                              <1> .fatFirst:
   299 00000D4D 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   300 00000D50 EBEB                <1>     jmp short .fatProceed
   301                              <1> 
   302                              <1> getNextSectorOfFile:
   303                              <1> ;This function will read the next sector for a file into a buffer.
   304                              <1> ;If the next sector to be read lives in the next cluster, it will update
   305                              <1> ; the vars appropriately
   306                              <1> ;
   307                              <1> ;Input: rbp = dpb pointer
   308                              <1> ;Output:
   309                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   310                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   311                              <1> ;       CF=CY => Critical error occurred and was FAILed
   312                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   313                              <1> ; next cluster and read first sector 
   314                              <1>     ;Check if we need to go to next cluster
   315 00000D52 8A05(AEC60300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   316 00000D58 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   317 00000D5B 7416                <1>     je .gotoNextCluster
   318                              <1>     ;Goto next sector in same cluster
   319 00000D5D FE05(AEC60300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   320 00000D63 48FF05(AFC60300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   321 00000D6A 488B05(AFC60300)    <1>     mov rax, qword [currSectD]
   322                              <1> .exitOK:
   323 00000D71 F8                  <1>     clc
   324                              <1> .exitFail:
   325                              <1>     return
    18                              <2> %%_ret:
    19 00000D72 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   326                              <1> .gotoNextCluster:
   327 00000D73 8B05(A6C60300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   328 00000D79 E860000000          <1>     call walkFAT
   329 00000D7E 72F2                <1>     jc .exitFail
   330                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   331 00000D80 3DFFFFFFFF          <1>     cmp eax, -1
   332 00000D85 74EA                <1>     je .exitOK
   333                              <1> ;Update the new cluster and sector information
   334 00000D87 8905(A6C60300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   335 00000D8D FF05(A2C60300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   336 00000D93 E87AFEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   337 00000D98 488905(AFC60300)    <1>     mov qword [currSectD], rax  ;Save it
   338 00000D9F C605(AEC60300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   339 00000DA6 EBC9                <1>     jmp short .exitOK
   340                              <1> 
   341                              <1> unlinkFAT:
   342                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   343                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   344                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   345                              <1> ; cluster must be set to EOC before this proc is called.
   346                              <1> ;Stops at first invalid cluster number.
   347                              <1> ;
   348                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   349                              <1> ;       rbp = Current DPB to use for disk
   350                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   351                              <1> 
   352 00000DA8 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   353 00000DA9 56                  <1>     push rsi
   354 00000DAA E80A000000          <1>     call truncateFAT    ;Preserved eax
   355 00000DAF 31F6                <1>     xor esi, esi  ;Free first cluster too
   356 00000DB1 E8D1000000          <1>     call writeFAT
   357 00000DB6 5E                  <1>     pop rsi
   358 00000DB7 58                  <1>     pop rax
   359                              <1>     return
    18                              <2> %%_ret:
    19 00000DB8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   360                              <1> 
   361                              <1> truncateFAT:
   362                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   363                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   364                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   365                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   366                              <1> ;Stops at first invalid cluster number.
   367                              <1> ;
   368                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   369                              <1> ;       rbp = Current DPB to use for disk
   370                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   371 00000DB9 50                  <1>     push rax
   372 00000DBA 53                  <1>     push rbx
   373 00000DBB 56                  <1>     push rsi
   374 00000DBC 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   375                              <1> .lp:
   376 00000DBE E81B000000          <1>     call walkFAT    ;Get the value of the cluster at this location in eax
   377 00000DC3 7215                <1>     jc .exit    ;Error exit
   378 00000DC5 3DFFFFFFFF          <1>     cmp eax, -1 ;End of chain?
   379 00000DCA 740E                <1>     je .exit
   380 00000DCC 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   381 00000DCD 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   382 00000DCF E8B3000000          <1>     call writeFAT
   383 00000DD4 7204                <1>     jc .exit    ;Error exit
   384 00000DD6 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   385 00000DD8 EBE4                <1>     jmp short .lp
   386                              <1> .exit:
   387 00000DDA 5E                  <1>     pop rsi
   388 00000DDB 5B                  <1>     pop rbx
   389 00000DDC 58                  <1>     pop rax
   390                              <1>     return
    18                              <2> %%_ret:
    19 00000DDD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   391                              <1> walkFAT:
   392                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   393                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   394                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   395                              <1> ;       rbp = DPB
   396                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   397                              <1> ;If carry set, getBuffer failed!
   398 00000DDE 53                  <1>     push rbx
   399 00000DDF 51                  <1>     push rcx
   400 00000DE0 52                  <1>     push rdx
   401 00000DE1 57                  <1>     push rdi
   402 00000DE2 55                  <1>     push rbp
   403 00000DE3 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   404 00000DE5 E8DCFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   405                              <1>     ;and FAT type in ecx
   406 00000DEA E82CFDFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   407 00000DEF 7237                <1>     jc .exitFail
   408                              <1>     ;Check if FAT 12, 16, 32
   409 00000DF1 85C9                <1>     test ecx, ecx
   410 00000DF3 743E                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   411 00000DF5 F7C101000000        <1>     test ecx, 1
   412 00000DFB 7413                <1>     jz .goToNextClusterFat32
   413                              <1>     ;Here we handle FAT16
   414 00000DFD 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   415 00000E02 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   416 00000E07 721E                <1>     jb .exit
   417 00000E09 B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   418 00000E0E EB17                <1>     jmp short .exit
   419                              <1> .goToNextClusterFat32:
   420 00000E10 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   421 00000E14 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   422 00000E19 7207                <1>     jb .validCluster32   
   423 00000E1B B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   424 00000E20 EB05                <1>     jmp short .exit
   425                              <1> .validCluster32:
   426 00000E22 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   427                              <1> .exit:
   428 00000E27 F8                  <1>     clc
   429                              <1> .exitFail:
   430 00000E28 E872FBFFFF          <1>     call setBufferReferenced    ;We are done with the disk buffer
   431 00000E2D 5D                  <1>     pop rbp
   432 00000E2E 5F                  <1>     pop rdi
   433 00000E2F 5A                  <1>     pop rdx
   434 00000E30 59                  <1>     pop rcx
   435 00000E31 5B                  <1>     pop rbx
   436                              <1>     return
    18                              <2> %%_ret:
    19 00000E32 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   437                              <1> .gotoNextClusterFat12:
   438                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   439                              <1> ;eax has the sector number of the FAT
   440                              <1> ;edx has byte offset into the sector
   441                              <1> ;edi has current cluster number
   442                              <1> ;rbx has ptr to buffer header
   443 00000E33 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   444 00000E39 7431                <1>     jz .gotoNextClusterFat12Even
   445                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   446 00000E3B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   447 00000E3F 29D1                <1>     sub ecx, edx
   448 00000E41 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   449 00000E43 751D                <1>     jnz .gotoNextClusterFat12NoCross
   450                              <1>     ;Boundary cross, build entry properly
   451 00000E45 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   452 00000E4A E850FBFFFF          <1>     call setBufferReferenced  ;We are done with the current buffer
   453 00000E4F FFC0                <1>     inc eax ;Get next FAT sector
   454 00000E51 53                  <1>     push rbx
   455 00000E52 E8C4FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   456 00000E57 72CF                <1>     jc .exitFail
   457 00000E59 58                  <1>     pop rax ;Get bl in al, the last entry from the previous buffer
   458 00000E5A 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   459 00000E5D C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   460 00000E60 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   461                              <1> .gotoNextClusterFat12NoCross:
   462 00000E62 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   463 00000E67 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   464 00000E6A EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   465                              <1> .gotoNextClusterFat12Even:
   466                              <1>     ;Here the cluster is even and can't cross a sector boundary
   467 00000E6C 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   468 00000E71 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   469                              <1> .checkIfLastFAT12Cluster:
   470 00000E76 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   471 00000E7B 72AA                <1>     jb .exit         ;If so, exit with it in eax
   472 00000E7D B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   473 00000E82 E9A0FFFFFF          <1>     jmp .exit
   474                              <1> 
   475                              <1> writeFAT:
   476                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   477                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   478                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   479                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   480                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   481 00000E87 53                  <1>     push rbx
   482 00000E88 51                  <1>     push rcx
   483 00000E89 52                  <1>     push rdx
   484 00000E8A 56                  <1>     push rsi
   485 00000E8B 57                  <1>     push rdi
   486 00000E8C 55                  <1>     push rbp
   487 00000E8D 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   488 00000E8F E832FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   489                              <1>     ;and FAT type in ecx
   490 00000E94 E882FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   491 00000E99 721E                <1>     jc .exitFail
   492                              <1>     ;Check if FAT 12, 16, 32
   493 00000E9B 85C9                <1>     test ecx, ecx
   494 00000E9D 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   495 00000E9F F7C101000000        <1>     test ecx, 1
   496 00000EA5 7407                <1>     jz .goToNextClusterFat32
   497                              <1>     ;Here we handle FAT16
   498 00000EA7 66897C1330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], di ;Store the value
   499 00000EAC EB0A                <1>     jmp short .exit
   500                              <1> .goToNextClusterFat32:
   501 00000EAE 81E7FFFFFF0F        <1>     and edi, 0FFFFFFFh  ;Zero upper nybble
   502 00000EB4 897C1330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], edi
   503                              <1> .exit:
   504 00000EB8 F8                  <1>     clc
   505                              <1> .exitFail:
   506 00000EB9 E8E1FAFFFF          <1>     call setBufferReferenced    ;We are done with the disk buffer
   507 00000EBE 5D                  <1>     pop rbp
   508 00000EBF 5F                  <1>     pop rdi
   509 00000EC0 5E                  <1>     pop rsi
   510 00000EC1 5A                  <1>     pop rdx
   511 00000EC2 59                  <1>     pop rcx
   512 00000EC3 5B                  <1>     pop rbx
   513                              <1>     return
    18                              <2> %%_ret:
    19 00000EC4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   514                              <1> .gotoNextClusterFat12:
   515                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   516                              <1> ;eax has the sector number of the FAT
   517                              <1> ;edx has byte offset into the sector
   518                              <1> ;edi has current cluster number
   519                              <1> ;rbx has ptr to buffer header
   520 00000EC5 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   521 00000ECB F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   522 00000ED1 7445                <1>     jz .gotoNextClusterFat12Even
   523                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   524 00000ED3 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   525 00000ED7 29D1                <1>     sub ecx, edx
   526 00000ED9 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   527 00000EDB 752C                <1>     jnz .gotoNextClusterFat12NoCross
   528                              <1>     ;Boundary cross, build entry properly
   529                              <1>     ;Replace the high nybble of the low byte 
   530 00000EDD 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   531 00000EE2 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   532 00000EE8 C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   533 00000EEB 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   534 00000EED C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   535 00000EF0 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   536 00000EF4 E8A6FAFFFF          <1>     call setBufferReferenced  ;We are done with the current buffer
   537 00000EF9 FFC0                <1>     inc eax ;Get next FAT sector
   538 00000EFB E81BFCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   539 00000F00 72B7                <1>     jc .exitFail
   540 00000F02 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   541 00000F04 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   542 00000F07 EBAF                <1>     jmp short .exit
   543                              <1> .gotoNextClusterFat12NoCross:
   544 00000F09 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   545 00000F0E 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   546 00000F13 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   547 00000F16 EB0A                <1>     jmp short .fat12common
   548                              <1> .gotoNextClusterFat12Even:
   549                              <1>     ;Here the cluster is even and can't cross a sector boundary
   550 00000F18 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   551 00000F1D 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   552                              <1> .fat12common:
   553 00000F22 09F0                <1>     or eax, esi     ;Add the new entry bits
   554 00000F24 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   555 00000F29 E98AFFFFFF          <1>     jmp .exit
    24                                  %include "./Source/Kernel/FAT/findfile.asm"
    25                              <1> ;Generic Find First and Find Next functions here
    26                              <1> findNextMain:
    27 00000F2E 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
    28 00000F35 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
    29 00000F38 7408                <1>     jz .notNet
    30 00000F3A B81C110000          <1>     mov eax, 0111Ch ;Netowrk find next
    31 00000F3F CD4F                <1>     int 4Fh
    32                              <1>     return  ;Return propagating the error code
    18                              <2> %%_ret:
    19 00000F41 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    33                              <1> .notNet:
    34 00000F42 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    35 00000F44 FEC0                <1>     inc al  ;Convert into 1 based number
    36 00000F46 E800410000          <1>     call dosCrit1Enter
    37 00000F4B E8FD3C0000          <1>     call setDrive   ;Set CDS and current drive vars
    38 00000F50 720C                <1>     jc .critError   ;Return error if this fails
    39 00000F52 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] 
    40 00000F59 E81C3A0000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    41                              <1> .critError:
    42 00000F5E E8F2400000          <1>     call dosCrit1Exit
    43                              <1>     retc    ;Return error if this fails
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000F63 72DC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    44 00000F65 E801000000          <1>     call searchMoreDir
    45                              <1>     return
    18                              <2> %%_ret:
    19 00000F6A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> searchMoreDir:
    47                              <1> ;The three directory variables are set up from the ffblock. 
    48                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    49                              <1> ;Current DTA is also used to contain the ff block address
    50                              <1> ;All registers can be trashed
    51 00000F6B 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    52                              <1>     ;First setup dirClustA and dirSect vars
    53 00000F72 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
    54 00000F79 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    55 00000F7C 8805(56C60300)      <1>     mov byte [searchAttr], al   ;And save it
    56 00000F82 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    57 00000F85 8905(D6C60300)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    58 00000F8B 8905(D2C60300)      <1>     mov dword [dirClustPar], eax
    59                              <1>     ;Get number of 32 byte entries in a sector
    60 00000F91 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    61                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    62 00000F94 C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    63                              <1>     ;Now get bytes per cluster
    64 00000F97 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    65 00000F99 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    66 00000F9D 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    67 00000FA1 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    68 00000FA3 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    69 00000FA5 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    70 00000FA7 31D2                <1>     xor edx, edx
    71 00000FA9 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    72                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    73                              <1>     ;edx has byte offset into cluster (or Root dir)
    74 00000FAB 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    75                              <1>     ;Now compute sector offset into cluster
    76 00000FAD 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    77 00000FB1 89D0                <1>     mov eax, edx    ;Move offset into cluster
    78 00000FB3 31D2                <1>     xor edx, edx
    79 00000FB5 F7F1                <1>     div ecx 
    80                              <1>     ;eax now has sector offset into cluster (or root dir)
    81                              <1>     ;edx has byte offset into sector 
    82 00000FB7 668905(DAC60300)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    83 00000FBE C1EA05              <1>     shr edx, 5 ;Divide edx by 32 to get Dir Entry
    84 00000FC1 8915(DCC60300)      <1>     mov dword [dirEntry], edx
    85 00000FC7 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    86 00000FCD 85C0                <1>     test eax, eax   ;If we at cluster 0, we are in old style root dir
    87 00000FCF 7461                <1>     jz .oldFat
    88                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    89 00000FD1 89D9                <1>     mov ecx, ebx
    90 00000FD3 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    91                              <1> .fatlp:
    92 00000FD6 E803FEFFFF          <1>     call walkFAT
    93 00000FDB 3DFFFFFFFF          <1>     cmp eax, -1
    94 00000FE0 7464                <1>     je .errorExit
    95 00000FE2 FFC9                <1>     dec ecx
    96 00000FE4 75F0                <1>     jnz .fatlp
    97 00000FE6 8905(D6C60300)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    98                              <1> .skipFatWalk:
    99 00000FEC 488D05A0000000      <1>     lea rax, searchDir.nextEp
   100 00000FF3 50                  <1>     push rax    ;Push the return address onto stack
   101 00000FF4 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]
   102 00000FFA E813FCFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   103 00000FFF 0FB71D(DAC60300)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   104 00001006 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   105                              <1> .common:
   106 00001009 E812FBFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   107 0000100E 0F8218010000        <1>     jc searchDir.hardError
   108 00001014 E816010000          <1>     call adjustDosDirBuffer  ;rbx has the buffer ptr for this dir sector
   109 00001019 8B05(DCC60300)      <1>     mov eax, dword [dirEntry]
   110 0000101F 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
   111 00001021 C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
   112 00001024 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
   113                              <1>     ;We continue AS IF this entry was bad
   114                              <1>     ;Now setup al as upon normal entry 
   115 00001027 8A05(56C60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   116 0000102D E960010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
   117                              <1>     ;The return address on the stack will return to the ep's pushed
   118                              <1> .oldFat:
   119                              <1> ;Old FAT 12/16 root dirs fall thru here only
   120 00001032 488D05D9000000      <1>     lea rax, searchDir.oldNextEP
   121 00001039 50                  <1>     push rax    ;Push return address onto the stack
   122 0000103A 0FB705(DAC60300)    <1>     movzx eax, word [dirSect]   ;Get the root directory sector offset
   123 00001041 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   124 00001044 EBC3                <1>     jmp short .common
   125                              <1> .errorExit:
   126 00001046 F9                  <1>     stc
   127                              <1>     return
    18                              <2> %%_ret:
    19 00001047 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   128                              <1> searchDir:
   129                              <1> ;Called in a level 1 critical section. 
   130                              <1> ;The directory variables are set and fcbName has the pattern to match
   131                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   132                              <1> ;All registers can be trashed
   133                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   134                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   135                              <1> 
   136                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   137                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   138 00001048 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   139 0000104F 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   140 00001055 7408                <1>     jz .notNet
   141 00001057 B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   142 0000105C CD4F                <1>     int 4fh
   143                              <1>     return
    18                              <2> %%_ret:
    19 0000105E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> .notNet:
   145 0000105F 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   146 00001066 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   147 0000106C 85C0                <1>     test eax, eax
   148 0000106E 0F847E000000        <1>     jz .oldRoot
   149 00001074 E899FBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   150                              <1> .sectorLoop:
   151 00001079 E8A2FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   152 0000107E 0F82A8000000        <1>     jc .hardError
   153 00001084 E8A6000000          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   154 00001089 E8B5000000          <1>     call findInBuffer
   155 0000108E E80CF9FFFF          <1>     call setBufferReferenced    ;We are done with the current buffer
   156                              <1> .nextEp:
   157                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001093 73C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   158                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   159                              <1>     ;IF however, the next cluster is -1, then we return fail
   160 00001095 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   161 0000109B 8905(A6C60300)      <1>     mov dword [currClustD], eax
   162 000010A1 668B05(DAC60300)    <1>     mov ax, word [dirSect]
   163 000010A8 8805(AEC60300)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   164 000010AE 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   165 000010B2 488905(AFC60300)    <1>     mov qword [currSectD], rax  
   166 000010B9 C705(A2C60300)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   166 000010C1 0000                <1>
   167 000010C3 E88AFCFFFF          <1>     call getNextSectorOfFile
   168 000010C8 7262                <1>     jc .hardError
   169 000010CA 483DFFFFFFFF        <1>     cmp rax, -1
   170 000010D0 7456                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   171 000010D2 66FF05(DAC60300)    <1>     inc word [dirSect]  ;Goto next sector
   172 000010D9 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   173 000010DF 3B05(A6C60300)      <1>     cmp eax, dword [currClustD] ;Did it change?
   174 000010E5 7492                <1>     je .sectorLoop  ;If not, we advanced sectors only
   175 000010E7 66C705(DAC60300)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   175 000010EF 00                  <1>
   176 000010F0 EB87                <1>     jmp short .sectorLoop 
   177                              <1> 
   178                              <1> .oldRoot:
   179                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   180                              <1> ; one large contiguous cluster.
   181                              <1> ;   ecx = Number of entries per sector
   182                              <1> .oldSectorLp:
   183 000010F2 0FB705(DAC60300)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   184 000010F9 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   185 000010FC E81FFAFFFF          <1>     call getBufForDOS
   186 00001101 7229                <1>     jc .hardError
   187 00001103 E827000000          <1>     call adjustDosDirBuffer      ;rbx has the buffer pointer for this dir sector
   188 00001108 E836000000          <1>     call findInBuffer
   189 0000110D E88DF8FFFF          <1>     call setBufferReferenced    ;We are done with this buffer
   190                              <1> .oldNextEP:
   191                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00001112 7201                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00001114 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   192 00001115 66FF05(DAC60300)    <1>     inc word [dirSect]  ;Goto next sector in directory
   193 0000111C 8B4509              <1>     mov eax, dword [rbp + dpb.wNumberRootDirEntries]
   194 0000111F 663905(DCC60300)    <1>     cmp word [dirEntry], ax ;Have we reached the last dir entry?
   195 00001126 72CA                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   196                              <1> .fnfError:
   197 00001128 B012                <1>     mov al, errNoFil
   198 0000112A F9                  <1>     stc
   199                              <1>     return
    18                              <2> %%_ret:
    19 0000112B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   200                              <1> .hardError:
   201 0000112C B0FF                <1>     mov al, -1
   202                              <1>     return
    18                              <2> %%_ret:
    19 0000112E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   203                              <1> adjustDosDirBuffer:
   204 0000112F 804B0904            <1>     or byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   205 00001133 806309FE            <1>     and byte [rbx + bufferHdr.bufferFlags], ~dosBuffer
   206 00001137 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   207 0000113B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   208 0000113F C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   209                              <1>     return
    18                              <2> %%_ret:
    19 00001142 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> findInBuffer:
   212                              <1> ;Input: ecx = Number of entries in sector buffer to look for
   213                              <1> ;       rsi = Sector buffer data area
   214                              <1> ;Output: CF=CY => No entries found
   215                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   216                              <1> ;        rsi = Points to start of the disk buffer directory entry
   217 00001143 8A05(56C60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   218 00001149 E893000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   219                              <1> .searchMainLp:
   220                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   221 0000114E 8A25(62C60300)      <1>     mov ah, byte [delChar]
   222 00001154 803E00              <1>     cmp byte [rsi], 00h
   223 00001157 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   224 00001159 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   225 0000115B 750D                <1>     jne .notLookingForEmpty
   226                              <1> .emptySlot:
   227                              <1> ;Here we check if we are looking for an empty directory entry or
   228                              <1> ; we have reached the end of the file (if the first byte is 00h)
   229                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   230 0000115D 3A25(DBC50300)      <1>     cmp ah, byte [fcbName] 
   231                              <1>     rete    ;Return if equal (CF=NC too)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001163 74DD                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   232                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   233 00001165 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   234 00001168 7439                <1>     je .badExit
   235                              <1> .notLookingForEmpty:
   236 0000116A 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   237 0000116D 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   238 00001170 803D(CAC30300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   239 00001177 742C                <1>     je .exclusiveDir
   240 00001179 80FC08              <1>     cmp ah, dirVolumeID
   241 0000117C 742E                <1>     je .volFile
   242 0000117E 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   243 00001180 7710                <1>     ja .nextEntry
   244                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   245                              <1> .scanName:
   246 00001182 56                  <1>     push rsi
   247 00001183 488D3D(DBC50300)    <1>     lea rdi, fcbName ;Goto name template to search for
   248 0000118A E83A000000          <1>     call .nameCompare
   249 0000118F 5E                  <1>     pop rsi
   250 00001190 7420                <1>     je .searchEntryFound
   251                              <1> .nextEntry:
   252                              <1> ;Go to next entry
   253 00001192 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   254 00001199 FF05(DCC60300)      <1>     inc dword [dirEntry] ;And denote that in variable
   255 0000119F FFC9                <1>     dec ecx
   256 000011A1 75AB                <1>     jnz .searchMainLp
   257                              <1> .badExit:
   258 000011A3 F9                  <1>     stc
   259                              <1>     return
    18                              <2> %%_ret:
    19 000011A4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   260                              <1> .exclusiveDir:
   261                              <1> ;Used when going down a path, dir bit simply need be set
   262 000011A5 F6C410              <1>     test ah, dirDirectory
   263 000011A8 75D8                <1>     jnz .scanName
   264 000011AA EBE6                <1>     jmp short .nextEntry
   265                              <1> 
   266                              <1> .volFile:
   267 000011AC 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   268 000011AE 74D2                <1>     je .scanName       ;If so, scan the name agrees
   269 000011B0 EBE0                <1>     jmp short .nextEntry    ;Else, goto next entry
   270                              <1> 
   271                              <1> .searchEntryFound:
   272                              <1> ;Here a good entry was found!
   273 000011B2 56                  <1>     push rsi
   274 000011B3 57                  <1>     push rdi
   275 000011B4 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   276 000011B6 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   277 000011BD B904000000          <1>     mov ecx, 32/8
   278 000011C2 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   279 000011C5 5F                  <1>     pop rdi
   280 000011C6 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   281 000011C7 F8                  <1>     clc
   282                              <1>     return
    18                              <2> %%_ret:
    19 000011C8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   283                              <1> 
   284                              <1> .nameCompare:
   285                              <1> ;Input: rsi = source string
   286                              <1> ;       rdi = string template to compare against
   287                              <1> ;Output: ZF=ZE => Strings are ok
   288                              <1> ;        ZF=NZ => Strings not ok
   289                              <1> ;Accepts wildcards. Trashes al
   290 000011C9 51                  <1>     push rcx
   291 000011CA 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   292                              <1> .ncLp:
   293 000011CC 81F90B000000        <1>     cmp ecx, 11
   294 000011D2 740B                <1>     je .ncExit
   295 000011D4 FFC1                <1>     inc ecx
   296 000011D6 A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   297 000011D7 74F3                <1>     je .ncLp    ;If equal, keep going
   298 000011D9 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   299 000011DD 74ED                <1>     je .ncLp
   300                              <1> .ncExit:
   301 000011DF 59                  <1>     pop rcx
   302                              <1>     return
    18                              <2> %%_ret:
    19 000011E0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   303                              <1> 
   304                              <1> adjustSearchAttr:
   305                              <1> ;Converts the byte to a system only if the bit is set
   306                              <1> ;Input: eax = User selected search mask
   307                              <1> ;Output: eax = Modified search mask
   308 000011E1 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   309 000011E6 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   310                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000011EB 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   311 000011ED B808000000          <1>     mov eax, dirVolumeID
   312                              <1>     return
    18                              <2> %%_ret:
    19 000011F2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   313                              <1> 
   314                              <1> asciiToFCB:
   315                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   316                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   317                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   318                              <1> ;Name is space padded.
   319                              <1> ;Input: rsi = ASCII string buffer
   320                              <1> ;       rdi = FCB name buffer
   321                              <1> ;Output: al = Char that terminated the source string 
   322 000011F3 53                  <1>     push rbx    
   323 000011F4 57                  <1>     push rdi
   324 000011F5 B90B000000          <1>     mov ecx, 11
   325 000011FA B020                <1>     mov al, " "
   326 000011FC F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   327 000011FE 5F                  <1>     pop rdi
   328 000011FF 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   329                              <1> .processName:
   330 00001202 AC                  <1>     lodsb   ;Get the char in al
   331 00001203 E8463B0000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   332 00001208 84C0                <1>     test al, al
   333 0000120A 742D                <1>     jz .exit
   334                              <1>     ;Test if the char is valid
   335 0000120C E86E3C0000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   336 00001211 7426                <1>     jz .exit    ;If the char invalid, consider it a terminator
   337 00001213 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   338 00001215 7407                <1>     je .extSpace
   339 00001217 3C2E                <1>     cmp al, "."
   340 00001219 740C                <1>     je .ext
   341 0000121B AA                  <1>     stosb   ;Store the char
   342 0000121C EBE4                <1>     jmp short .processName
   343                              <1> .extSpace:
   344                              <1> ;Now we scan for a period in the name
   345 0000121E AC                  <1>     lodsb   ;Get a char and increase rsi
   346 0000121F 84C0                <1>     test al, al
   347 00001221 7416                <1>     jz .exit
   348 00001223 3C2E                <1>     cmp al, "."     ;If al is not a period...
   349 00001225 75F7                <1>     jne .extSpace   ; keep searching
   350                              <1> .ext:
   351 00001227 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   352                              <1> .processExt:
   353 0000122B AC                  <1>     lodsb
   354 0000122C 84C0                <1>     test al, al
   355 0000122E 7409                <1>     jz .exit
   356 00001230 3C20                <1>     cmp al, " "
   357 00001232 7405                <1>     je .exit
   358 00001234 AA                  <1>     stosb
   359 00001235 EBF4                <1>     jmp short .processExt
   360                              <1> .exitBadChar:
   361 00001237 30C0                <1>     xor al, al  ;Return a null terminator
   362                              <1> .exit:
   363 00001239 5B                  <1>     pop rbx
   364                              <1>     return
    18                              <2> %%_ret:
    19 0000123A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   365                              <1> 
   366                              <1> FCBToAsciiz:
   367                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   368                              <1> ;Name is space padded too
   369                              <1> ;Input: rsi = FCB name buffer
   370                              <1> ;       rdi = ASCIIZ string buffer
   371 0000123B B908000000          <1>     mov ecx, 8
   372 00001240 F3A4                <1>     rep movsb   ;Move the name over
   373                              <1> .scanNameSpace:
   374 00001242 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   375 00001246 750D                <1>     jne .ext
   376 00001248 48FFCF              <1>     dec rdi
   377 0000124B FFC1                <1>     inc ecx
   378 0000124D 81F908000000        <1>     cmp ecx, 8
   379 00001253 72ED                <1>     jb .scanNameSpace
   380                              <1> .ext:
   381 00001255 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   382 0000125A 7506                <1>     jne .validExt
   383 0000125C 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   384 00001260 7415                <1>     je .exit
   385                              <1> .validExt:
   386 00001262 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   387 00001264 AA                  <1>     stosb
   388 00001265 B903000000          <1>     mov ecx, 3
   389 0000126A F3A4                <1>     rep movsb   ;Move the three extension chars over
   390                              <1> .scanExtSpace:
   391 0000126C 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   392 00001270 7505                <1>     jne .exit
   393 00001272 48FFCF              <1>     dec rdi
   394 00001275 EBF5                <1>     jmp short .scanExtSpace
   395                              <1> .exit:
   396 00001277 31C0                <1>     xor eax, eax
   397 00001279 AA                  <1>     stosb   ;Store a null at the end
   398                              <1>     return
    18                              <2> %%_ret:
    19 0000127A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   399                              <1> 
   400                              <1> setupFFBlock:
   401                              <1> ;Sets up the find first block for the search
   402                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   403 0000127B 50                  <1>     push rax
   404 0000127C 53                  <1>     push rbx
   405 0000127D 56                  <1>     push rsi
   406 0000127E 57                  <1>     push rdi
   407 0000127F 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   408 00001282 8A05(56C60300)      <1>     mov al, byte [searchAttr]
   409 00001288 243F                <1>     and al, 3Fh ;Clear upper two bits
   410 0000128A 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   411 0000128D 0FB605(63C60300)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   412 00001294 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   413                              <1>     ;xchg bx, bx
   414 00001296 488D35(DBC50300)    <1>     lea rsi, fcbName
   415 0000129D 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   416 000012A1 57                  <1>     push rdi
   417 000012A2 48B820202020202020- <1>     mov rax, "        "
   417 000012AB 20                  <1>
   418 000012AC 48AB                <1>     stosq
   419 000012AE 66AB                <1>     stosw
   420 000012B0 AA                  <1>     stosb
   421 000012B1 5F                  <1>     pop rdi
   422 000012B2 48A5                <1>     movsq   ;Move 8 chars
   423 000012B4 66A5                <1>     movsw   ;Move 2 chars
   424 000012B6 A4                  <1>     movsb   ;Move the final char
   425                              <1> 
   426 000012B7 8B05(DCC60300)      <1>     mov eax, dword [dirEntry]
   427 000012BD 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   428 000012C0 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]
   429 000012C6 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   430 000012C9 8A05(C6C50300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   431 000012CF 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   432 000012D2 8B05(D1C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   433 000012D8 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   434 000012DB 8B05(D7C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   435 000012E1 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   436 000012E4 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   437 000012E8 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   438 000012EF E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   439                              <1> 
   440 000012F4 5F                  <1>     pop rdi
   441 000012F5 5E                  <1>     pop rsi
   442 000012F6 5B                  <1>     pop rbx
   443 000012F7 58                  <1>     pop rax
   444                              <1>     return
    18                              <2> %%_ret:
    19 000012F8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   445                              <1> 
   446                              <1> getDrvLetterFromPath:
   447                              <1> ;Gets the drive letter for the path in al
   448                              <1> ;Input: rsi = Buffer to process
   449                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   450                              <1> ;       ZF=ZE and al = 0 => Null path
   451                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   452                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   453                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   454 000012F9 30C0                <1>     xor al, al
   455 000012FB 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   456                              <1>     retz    ;Return if a null path
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000012FE 74F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   457 00001300 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   458                              <1>     retne   ;If not equal, Relative path or network path
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001304 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   459 00001306 66AD                <1>     lodsw   ;Get first word, rsi += 2
   460                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   461 00001308 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   462 0000130A 2C60                <1>     sub al, 60h
   463                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000130C 75EA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   464 0000130E B0FF                <1>     mov al, -1  ;Else not a valid drive number
   465                              <1>     return
    18                              <2> %%_ret:
    19 00001310 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   466                              <1> canonicaliseFileName:
   467                              <1> ;Always trying to build and qualify a full pathname
   468                              <1> ;Does getPath without hitting the disk
   469 00001311 B0FF                <1>     mov al, -1
   470 00001313 8805(CAC30300)      <1>     mov byte [fileDirFlag], al  
   471 00001319 8805(5BC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   472 0000131F 48893D(7FC50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   473 00001326 FEC0                <1>     inc al  ;make al = 0
   474 00001328 8805(8FC50300)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   475 0000132E EB21                <1>     jmp short getPath.epAlt
   476                              <1> getDirPath:
   477 00001330 30C0                <1>     xor al, al   ;Set to Directory
   478 00001332 EB02                <1>     jmp short getPath
   479                              <1> getFilePath:
   480 00001334 B0FF                <1>     mov al, -1  ;Set to File
   481                              <1> getPath:
   482                              <1> ;Determines whether the path is spliced or not and transfers the chars
   483                              <1> ; from the user buffer into an internal buffer, normalising them.
   484                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   485                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   486                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   487                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   488                              <1> ; we let it do its thing and return.
   489                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   490                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   491                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   492                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   493                              <1> ; (converted from using machine name by the net client program).
   494                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   495                              <1> ; was good.
   496                              <1> ;Called with:
   497                              <1> ; rdi = SDA Buffer for filename
   498                              <1> ; rsi = Potentially unqualified filename
   499                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   500 00001336 8805(CAC30300)      <1>     mov byte [fileDirFlag], al  
   501 0000133C B0FF                <1>     mov al, -1
   502 0000133E 8805(5BC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   503 00001344 48893D(7FC50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   504 0000134B 8805(8FC50300)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   505                              <1> .epAlt:
   506 00001351 C605(5FC60300)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   507 00001358 C605(5EC60300)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   508 0000135F F605(5CC60300)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   509 00001366 7428                <1>     jz .notServer
   510                              <1>     ;In this case, the client network program will have correctly
   511                              <1>     ; substituted the drive letter for the path before making the request.
   512                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   513 00001368 E88CFFFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in X:    call getCDS ;Get the cds for the drive letter on the path
   515                              <1>     ;REMEMBER, FOR ALL THE LOGIC TO WORK, HERE WE MUST ENSURE THE PATH
   516                              <1>     ; CONTAINS NO . or .., NO INVALID CHARS OR MULTIPLE \\ AND IS 0 TERMINATED.
   517                              <1>     ;We do not scan for this criteria but the client program must adhere to 
   518                              <1>     ; these requirements.
   519                              <1>     ;When a server request is made, the request can ONLY be for a file on
   520                              <1>     ; a CDS drive.
   521 0000136D FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   522 0000136F 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   523 00001376 50                  <1>     push rax
   524 00001377 E8CF3C0000          <1>     call dosCrit1Enter
   525 0000137C E8F9350000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   526 00001381 E8CF3C0000          <1>     call dosCrit1Exit
   527 00001386 58                  <1>     pop rax
   528 00001387 0F8382000000        <1>     jnc .driveOk
   529                              <1> .serverExit:
   530 0000138D B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   531                              <1>     return
    18                              <2> %%_ret:
    19 0000138F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   532                              <1> .notServer:
   533                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   534 00001390 48C705(6CC60300)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   534 00001398 FFFFFF              <1>
   535 0000139B B823110000          <1>     mov eax, 1123h
   536 000013A0 CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   537                              <1>     retnc  ;Return if resolved
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013A2 73EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   538 000013A4 E850FFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   539 000013A9 9C                  <1>     pushfq  ;Save the flag state on stack
   540 000013AA 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   541 000013AB 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   542 000013AE E890390000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   543 000013B3 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   544 000013B5 E889390000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   545 000013BA 7543                <1>     jnz .notNet
   546 000013BC 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   547 000013BE 753F                <1>     jne .notNet
   548 000013C0 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   549 000013C1 9D                  <1>     popfq
   550 000013C2 66AD                <1>     lodsw
   551 000013C4 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   552 000013C8 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   553                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   554                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   555                              <1> ; redirector Find First Without CDS
   556                              <1> 
   557 000013CA 8A1D(8FC50300)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   558 000013D0 C605(8FC50300)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   559 000013D7 53                  <1>     push rbx
   560                              <1> .moveNetChars:
   561 000013D8 AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   562 000013D9 E870390000          <1>     call uppercaseChar  ;Make char in al uppercase
   563 000013DE 84C0                <1>     test al, al
   564 000013E0 740F                <1>     jz .netEnd
   565 000013E2 E85C390000          <1>     call swapPathSeparator  ;If path sep, swap it
   566 000013E7 AA                  <1>     stosb
   567 000013E8 75EE                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   568 000013EA E86A000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   569 000013EF EBE7                <1>     jmp short .moveNetChars
   570                              <1> .netEnd:
   571 000013F1 5B                  <1>     pop rbx
   572 000013F2 AA                  <1>     stosb
   573 000013F3 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   574                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013F5 7498                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   575 000013F7 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   576 000013FC CD4F                <1>     int 4Fh
   577                              <1>     return
    18                              <2> %%_ret:
    19 000013FE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   578                              <1> .notNet:
   579                              <1> ;This is the normal case; paths can be relative, or absolute.
   580 000013FF 58                  <1>     pop rax ;Get the drive letter back
   581 00001400 9D                  <1>     popfq   ;Get the flag state back
   582 00001401 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   583                              <1> .pnfErr:
   584 00001403 B003                <1>     mov al, errPnf  ;Null path error
   585 00001405 F9                  <1>     stc
   586                              <1>     return
    18                              <2> %%_ret:
    19 00001406 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   587                              <1> .notNull:
   588 00001407 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   589 00001409 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   590 0000140B B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   591 0000140D F9                  <1>     stc
   592                              <1>     return
    18                              <2> %%_ret:
    19 0000140E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   593                              <1> .driveOk:
   594 0000140F 84C0                <1>     test al, al
   595 00001411 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   596                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   597 00001413 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   598 00001416 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   599 00001418 50                  <1>     push rax    ;Save the drive letter
   600 00001419 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   601 0000141A 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   602 0000141D E821390000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   603                              <1>     ;If al is a path separator, then this path is absolute.
   604 00001422 58                  <1>     pop rax ;Get back the drive letter
   605 00001423 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   606                              <1> .absoPath:
   607                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   608 00001425 48FFC6              <1>     inc rsi
   609 00001428 EB1A                <1>     jmp short .commonDir
   610                              <1> .curPath:
   611                              <1> ;This is only jumped to if we are relative the current drive
   612                              <1> ;rsi points to first char in path
   613                              <1> ;If this char is \ or /, then it is an absolute path.
   614 0000142A 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   615 00001430 FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   616 00001432 50                  <1>     push rax    ;Save the current drive number
   617 00001433 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   618 00001435 E809390000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   619 0000143A 58                  <1>     pop rax ;Get back the current drive number
   620 0000143B 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   621                              <1> .relMain:
   622 0000143D C605(5BC60300)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   623                              <1> .commonDir:
   624                              <1> ;rsi points to the start of the string we will be appending
   625 00001444 E809000000          <1>     call pathWalk
   626 00001449 7201                <1>     jc .badDriveExit
   627                              <1>     return
    18                              <2> %%_ret:
    19 0000144B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   628                              <1> .badDriveExit:
   629 0000144C B812000000          <1>     mov eax, errNoFil ;No file for that spec found
   630                              <1>     return
    18                              <2> %%_ret:
    19 00001451 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   631                              <1> 
   632                              <1> pathWalk:
   633                              <1> ;Input: rsi must point to source buffer for path to expand
   634                              <1> ;       rdi must point to a destination buffer
   635                              <1> ;       al must contain the drive 1 based number
   636 00001452 E89E000000          <1>     call prepareDir    ;Prepare the dir if the drive is subst/join drive
   637 00001457 7265                <1>     jc .badDriveExit
   638                              <1>     ;If the user requests to .. to a point before rbx, we fail if a disk
   639                              <1>     ; resolution
   640                              <1> .netEp: ;For net path resolution (resolution ONLY) ptrs must point past "\\"
   641 00001459 4889FB              <1>     mov rbx, rdi
   642                              <1> .mainlp:
   643 0000145C E868010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   644 00001461 84C0                <1>     test al, al
   645 00001463 7507                <1>     jnz .notFile
   646 00001465 C605(5FC60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   647                              <1> .notFile:
   648 0000146C 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   649 0000146D E862030000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   650 00001472 58                  <1>     pop rax
   651 00001473 736B                <1>     jnc .deviceFound
   652 00001475 E824020000          <1>     call searchForPathspec  ;and search the directory
   653 0000147A 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   654 0000147C E873020000          <1>     call addPathspecToBuffer
   655 00001481 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   656 00001483 84C0                <1>     test al, al ;Exit if this pathspec was a file
   657 00001485 743D                <1>     jz .exitGood
   658                              <1>     ;Here I have to take the cluster data from the found directory entry
   659                              <1>     ; and setup the search for the next pathspec portion
   660                              <1>     ;Copy necessary data from the current directory copy
   661 00001487 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   662 0000148E 74CC                <1>     jz .mainlp
   663 00001490 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   664 00001497 C1E010              <1>     shl eax, 10h    ;Shift it high
   665 0000149A 668B05(D5C50300)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   666                              <1>     ;eax now has the cluster number of the search
   667 000014A1 8905(D6C60300)      <1>     mov dword [dirClustA], eax
   668 000014A7 8905(D2C60300)      <1>     mov dword [dirClustPar], eax
   669 000014AD 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   670 000014AF 8905(DCC60300)      <1>     mov dword [dirEntry], eax
   671 000014B5 668905(DAC60300)    <1>     mov word [dirSect], ax
   672 000014BC EB9E                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   673                              <1> .badDriveExit:
   674 000014BE B812000000          <1>     mov eax, errNoFil ;No file for that spec found
   675                              <1>     return
    18                              <2> %%_ret:
    19 000014C3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   676                              <1> .exitGood:
   677 000014C4 C605(5EC60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   678                              <1> .exit:
   679                              <1>     return
    18                              <2> %%_ret:
    19 000014CB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   680                              <1> .checkDev:
   681                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   682                              <1> ; we are in \DEV pseudo dir
   683 000014CC F605(CBC30300)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   684 000014D3 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   685                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   686 000014D5 56                  <1>     push rsi
   687 000014D6 57                  <1>     push rdi
   688 000014D7 E886020000          <1>     call checkDevPath
   689 000014DC 5F                  <1>     pop rdi
   690 000014DD 5E                  <1>     pop rsi
   691 000014DE 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   692                              <1> .deviceFound:
   693 000014E0 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   694 000014E2 C605(5FC60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   695 000014E9 C605(5EC60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   696 000014F0 EBD9                <1>     jmp short .exit   
   697                              <1> .nodev:
   698 000014F2 F9                  <1>     stc
   699 000014F3 EBD6                <1>     jmp short .exit
   700                              <1> 
   701                              <1> prepareDir:
   702                              <1> ;Used to transfer the current directory if it is necessary.
   703                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   704                              <1> ; relative
   705                              <1> ;Input: al = 1-based drive letter
   706                              <1> ;Output: rdi = Pointing at where to place chars from source string
   707                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   708 000014F5 56                  <1>     push rsi
   709 000014F6 E8503B0000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   710 000014FB E84D370000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   711 00001500 720D                <1>     jc .critExit    ;If the drive number in al is too great or drive invalid
   712 00001502 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] 
   713 00001509 57                  <1>     push rdi    ;Push CDS pointer on stack...
   714 0000150A E86B340000          <1>     call getDiskDPB  ;Update working DPB and drv before searching, dpbptr in rbp
   715                              <1> .critExit:
   716 0000150F E8413B0000          <1>     call dosCrit1Exit
   717 00001514 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   718 00001515 724A                <1>     jc .badDriveExit 
   719 00001517 488B3D(7FC50300)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   720                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   721                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   722                              <1>     ;   terminating char (\, / or Null)
   723                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   724                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   725 0000151E 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   726 00001524 753D                <1>     jnz .prepDirJoin
   727 00001526 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   728 0000152C 7556                <1>     jnz .prepDirSubst
   729                              <1> .prepMain:
   730                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   731 0000152E F605(5BC60300)FF    <1>     test byte [spliceFlag], -1
   732 00001535 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   733                              <1>     ;Else we copy the first two chars only (X:)
   734 00001537 66A5                <1>     movsw  
   735 00001539 B05C                <1>     mov al, "\"
   736 0000153B AA                  <1>     stosb   ;Store the path separator and increment rdi
   737 0000153C 31C0                <1>     xor eax, eax    ;Get cluster 0
   738 0000153E EB1B                <1>     jmp short .prepDirExitSkip
   739                              <1> .prepLoop:
   740 00001540 AC                  <1>     lodsb
   741 00001541 84C0                <1>     test al, al ;If al was null, then we stop
   742 00001543 7403                <1>     jz .prepDirExit
   743 00001545 AA                  <1>     stosb
   744 00001546 EBF8                <1>     jmp short .prepLoop
   745                              <1> .prepDirExit:
   746 00001548 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   747 0000154C 7403                <1>     je .prepDirExitSkipPathsep
   748 0000154E B05C                <1>     mov al, "\"
   749 00001550 AA                  <1>     stosb   ;Store the path separator and increment rdi
   750                              <1> .prepDirExitSkipPathsep:
   751 00001551 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   752 00001558 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   753                              <1> .prepDirExitSkip:
   754 0000155B E837000000          <1>     call .prepSetupDirSearchVars
   755 00001560 F8                  <1>     clc ;Clear carry before exiting
   756                              <1> .badDriveExit:
   757 00001561 5E                  <1>     pop rsi
   758                              <1>     return
    18                              <2> %%_ret:
    19 00001562 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   759                              <1> .prepDirJoin:
   760 00001563 51                  <1>     push rcx
   761 00001564 56                  <1>     push rsi
   762 00001565 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   763 0000156C B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   764                              <1> .prepDirJoin1:
   765 00001571 AC                  <1>     lodsb   ;Get the char
   766 00001572 84C0                <1>     test al, al ;Null char?
   767 00001574 740B                <1>     jz .prepDirJoin2
   768 00001576 E8C8370000          <1>     call swapPathSeparator
   769 0000157B 7404                <1>     jz .prepDirJoin2
   770 0000157D FFC1                <1>     inc ecx ;Accrue length to copy
   771 0000157F EBF0                <1>     jmp short .prepDirJoin1
   772                              <1> .prepDirJoin2:
   773 00001581 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   774 00001582 EB05                <1>     jmp short .prepDirCopy1
   775                              <1> .prepDirSubst:
   776 00001584 51                  <1>     push rcx
   777 00001585 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   778                              <1> .prepDirCopy1:
   779 00001589 F3A4                <1>     rep movsb   ;Copy the string over
   780 0000158B 59                  <1>     pop rcx
   781 0000158C F605(5BC60300)FF    <1>     test byte [spliceFlag], -1
   782 00001593 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   783 00001595 EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   784                              <1> .prepSetupDirSearchVars:
   785                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   786                              <1> ;       rbp = DPB pointer for the device which will do transaction
   787 00001597 51                  <1>     push rcx
   788 00001598 31C9                <1>     xor ecx, ecx
   789 0000159A 66890D(DAC60300)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   790 000015A1 890D(DCC60300)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   791 000015A7 E8F8F5FFFF          <1>     call getFATtype ;Get type of fat
   792 000015AC 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   793 000015B2 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   794                              <1>     ;FAT 32 here
   795 000015B4 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   796 000015B6 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   797 000015B8 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   798                              <1> .psdsvExit:
   799 000015BB 8905(D6C60300)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   800 000015C1 8905(D2C60300)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   801 000015C7 59                  <1>     pop rcx
   802                              <1>     return 
    18                              <2> %%_ret:
    19 000015C8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   803                              <1> 
   804                              <1> copyPathspec:
   805                              <1> ;1) Copies a path portion from the source buffer to the destination
   806                              <1> ;2) Advances rsi to the next null, \ or /
   807                              <1> ;3) Expands all * to ?'s
   808                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   809                              <1> ;    next path separator
   810                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   811                              <1> ;    with rsi moving to path separator
   812                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   813                              <1> ;
   814                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   815                              <1> ;           rdi = Points to where to store it
   816                              <1> ;
   817                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   818                              <1> ;           rdi = First char of next space to store next pathspec
   819                              <1> ;           al = Last char stored (either \ or NULL)
   820                              <1> ;           CF=NC = OK path
   821                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   822                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   823 000015C9 57                  <1>     push rdi    ;Save the pointer into the user buffer
   824 000015CA C605(EEC30300)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   825 000015D1 488D3D(DBC50300)    <1>     lea rdi, fcbName
   826 000015D8 57                  <1>     push rdi
   827 000015D9 B903000000          <1>     mov ecx, 3
   828 000015DE B820202020          <1>     mov eax, "    " ;Four spaces
   829 000015E3 F3AB                <1>     rep stosd   ;Store 12 spaces
   830 000015E5 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   831                              <1> 
   832 000015E6 B908000000          <1>     mov ecx, 8 ;8 chars to move over, when ecx = 0, the char must be . or term
   833 000015EB B501                <1>     mov ch, 1   ;Set that we are in name field
   834 000015ED AC                  <1>     lodsb   ;Get first char from user path in al
   835 000015EE 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   836 000015F0 7459                <1>     je .cpsDots
   837 000015F2 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   838                              <1> ;First char is not a dot, so now check if starts with E5h? 
   839                              <1> ;If so, store 05h in its place! KANJI SUPPORT WOOHOO!
   840 000015F5 3CE5                <1>     cmp al, 0E5h
   841 000015F7 7508                <1>     jne .cpsMainLoop
   842 000015F9 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   843 000015FC B005                <1>     mov al, 05h
   844 000015FE AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   845 000015FF FEC9                <1>     dec cl  ;One less char to tfr
   846                              <1> .cpsMainLoop:
   847 00001601 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   848 00001602 84C0                <1>     test al, al ;Is it the null char?
   849 00001604 0F848A000000        <1>     jz .cpsProcessName  ;If so, terminate immediately
   850 0000160A E834370000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   851 0000160F 7449                <1>     jz .cpsCharSkip2 ; and then exit with the final converted pathsep in al
   852 00001611 3C2E                <1>     cmp al, "." ;Filename extension separator
   853 00001613 7428                <1>     je .cpsExtension
   854 00001615 81F900010000        <1>     cmp ecx, 0100h  ;If ch = 1 and cl = 0, then look for either . or terminator
   855 0000161B 74E4                <1>     je .cpsMainLoop
   856 0000161D 67E333              <1>     jecxz .cpsCharSkip ;If ch = 0 and cl = 0, scan for next terminator
   857                              <1>     ;If we have space in the filename, we check to see if the next char is *
   858 00001620 3C2A                <1>     cmp al, "*" ;Wildcard?
   859 00001622 743D                <1>     je .cpsWildcard
   860 00001624 3C3F                <1>     cmp al, "?" ;Good wildcard?
   861 00001626 740C                <1>     je .store
   862 00001628 E821370000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   863 0000162D E84D380000          <1>     call checkCharValid ; and check it is a valid char
   864 00001632 7405                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   865                              <1> .store:
   866 00001634 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   867 00001635 FEC9                <1>     dec cl  ;One less char left to tfr
   868 00001637 EBC8                <1>     jmp short .cpsMainLoop
   869                              <1> .cpsInvalidChar:
   870 00001639 30C0                <1>     xor al, al
   871 0000163B EB57                <1>     jmp short .cpsProcessName
   872                              <1> .cpsExtension:
   873                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   874 0000163D B903000000          <1>     mov ecx, 3  ;Set to 3 chars left, in extension (ch = 0)
   875 00001642 488D3D(E3C50300)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   876 00001649 EBB6                <1>     jmp short .cpsMainLoop
   877                              <1> .cpsDots:
   878 0000164B AA                  <1>     stosb   ;Store the first dot
   879 0000164C 8A06                <1>     mov al, byte [rsi]
   880 0000164E 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   881 00001650 7501                <1>     jne .cpsCharSkip
   882 00001652 A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   883                              <1> .cpsCharSkip:
   884 00001653 E819000000          <1>     call .cpsPtrSkip    ;Now we are skipping any chars that arent terminators
   885 00001658 EB3A                <1>     jmp short .cpsProcessName
   886                              <1> .cpsCharSkip2:
   887 0000165A E81F000000          <1>     call .cpsPtrSkip2
   888 0000165F EB33                <1>     jmp short .cpsProcessName
   889                              <1> .cpsWildcard:
   890                              <1>     ;cl has the number of chars of ? to store 
   891 00001661 B03F                <1>     mov al, "?"
   892 00001663 51                  <1>     push rcx
   893 00001664 0FB6C9              <1>     movzx ecx, cl   ;Temporarily extend cl to ecx
   894 00001667 F3AA                <1>     rep stosb   ;Store that many ? in buffer and return cl to 0
   895 00001669 59                  <1>     pop rcx
   896 0000166A F6C501              <1>     test ch, 1  ;Is this bit set? If so, we jump to .cpsExtension
   897 0000166D 75CE                <1>     jnz .cpsExtension   ;Now fill the extension field
   898                              <1>     ;Else, we process filename
   899 0000166F EBE2                <1>     jmp short .cpsCharSkip
   900                              <1> .cpsPtrSkip:
   901                              <1> ;Now advance rsi past the next pathsep or null char
   902                              <1> ;If an invalid char is detected, it is considered to be a terminator
   903                              <1> ;Output: al = Terminator char (either \ or null)
   904                              <1> ;        rsi -> First char of next pathspec (if al = \)
   905 00001671 AC                  <1>     lodsb
   906 00001672 E8F0370000          <1>     call checkCharOk
   907 00001677 7418                <1>     je .cpsBadChar
   908 00001679 84C0                <1>     test al, al ;Is this null?
   909                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 0000167B 7501                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 0000167D C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   910                              <1> ;If the next char that will be read is a pathsep, inc rsi to it
   911                              <1> ;This is to avoid multiple successive pathseps
   912                              <1> .cpsPtrSkip2:
   913 0000167E 803E5C              <1>     cmp byte [rsi], "\"
   914 00001681 74EE                <1>     je .cpsPtrSkip 
   915 00001683 803E2F              <1>     cmp byte [rsi], "/"
   916 00001686 74E9                <1>     je .cpsPtrSkip 
   917                              <1>     ;If the current char is the final pathsep, exit
   918 00001688 E8B6360000          <1>     call swapPathSeparator
   919                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000168D 74EE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   920 0000168F EBE0                <1>     jmp short .cpsPtrSkip
   921                              <1> 
   922                              <1> .cpsBadChar:
   923 00001691 30C0                <1>     xor al, al  ;Convert the char to a terminator
   924                              <1>     return
    18                              <2> %%_ret:
    19 00001693 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   925                              <1> .cpsProcessName:
   926                              <1> ;Store the final char in the 12 space in the FCB name field
   927 00001694 488D3D(E6C50300)    <1>     lea rdi, fcbName+11
   928 0000169B AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   929 0000169C 5F                  <1>     pop rdi
   930                              <1>     return
    18                              <2> %%_ret:
    19 0000169D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   931                              <1> 
   932                              <1> searchForPathspec:
   933                              <1>     ;Now search the current directory for this filename
   934                              <1>     ;Find first using SDA ffBlock
   935                              <1>     ;If al = 0, we have final file name or directory name
   936                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   937                              <1>     ;Output: CF=CY => Error occured
   938                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   939                              <1>     ;                 FF block somewhat setup
   940                              <1>     ;Preserves rax, rbx, rsi,  rdi
   941 0000169E 50                  <1>     push rax
   942 0000169F 53                  <1>     push rbx
   943 000016A0 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   944 000016A1 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   945 000016A2 0FB61D(CAC30300)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
   946 000016A9 53                  <1>     push rbx    ;and push it onto the stack
   947                              <1> ;Evaluate whether we are searching for a file for a directory
   948 000016AA 84C0                <1>     test al, al
   949 000016AC 741D                <1>     jz .sfpPNfile
   950                              <1>     ;Fall if subdir
   951 000016AE 488D3D(DBC50300)    <1>     lea rdi, fcbName
   952 000016B5 B03F                <1>     mov al, "?" ;Search for wildcard
   953 000016B7 B90C000000          <1>     mov ecx, 12
   954 000016BC F2AE                <1>     repne scasb
   955 000016BE 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
   956 000016C0 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
   957 000016C2 C605(CAC30300)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
   958 000016C9 EB07                <1>     jmp short .sfpPNMain
   959                              <1> .sfpPNfile:
   960                              <1>     ;Here if we are searching for a file or directory as setup by search init
   961 000016CB 0FB605(56C60300)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
   962                              <1> .sfpPNMain:
   963 000016D2 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
   964 000016D9 7405                <1>     je .sfpPNNoDisk
   965 000016DB E868F9FFFF          <1>     call searchDir
   966                              <1> .sfpPNNoDisk:
   967 000016E0 5B                  <1>     pop rbx
   968 000016E1 881D(CAC30300)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
   969 000016E7 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
   970 000016E8 5E                  <1>     pop rsi
   971 000016E9 5B                  <1>     pop rbx
   972 000016EA 58                  <1>     pop rax
   973                              <1>     return
    18                              <2> %%_ret:
    19 000016EB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   974                              <1> .sfpPnf:
   975 000016EC B803000000          <1>     mov eax, errPnf
   976                              <1> .sfpErrExit:
   977 000016F1 F9                  <1>     stc ;Set carry
   978 000016F2 EBEC                <1>     jmp short .sfpPNNoDisk
   979                              <1> 
   980                              <1> addPathspecToBuffer:
   981                              <1> ;Input: fcbName = Qualified pathname portion
   982                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
   983                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
   984                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
   985                              <1> ;rbx points to the "head of the path"
   986 000016F4 803D(DBC50300)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
   987 000016FB 741F                <1>     je .aptbPNDots
   988                              <1>     ;Copy filename over to internal buffer
   989 000016FD 56                  <1>     push rsi    ;Save source pointer position
   990 000016FE 488D35(DBC50300)    <1>     lea rsi, fcbName
   991 00001705 E831FBFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   992 0000170A 48FFCF              <1>     dec rdi ;Go back to the copied Null char
   993 0000170D 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
   994                              <1> .aptbOkExit:
   995 0000170E 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
   996 00001711 E82D360000          <1>     call swapPathSeparator
   997 00001716 7402                <1>     jz .aptbPNexit
   998 00001718 30C0                <1>     xor al, al  ;Set al to 0 else (all other chars are terminators)
   999                              <1> .aptbPNexit:
  1000 0000171A AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
  1001                              <1>     return
    18                              <2> %%_ret:
    19 0000171B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1002                              <1> .aptbPNDots:
  1003                              <1> ;For one dot, we leave rdi where it is
  1004                              <1> ;For two dots, we search backwards for the previous "\"
  1005 0000171C 803D(DCC50300)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1006 00001723 F8                  <1>     clc ;Ensure we clear CF if we return via here
  1007 00001724 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the previous char in al if we return
  1008                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001727 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1009                              <1>     ;Here we have two dots
  1010                              <1>     ;Walk rdi backwards until a \ is found
  1011 00001729 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
  1012 0000172C 66817FFF3A5C        <1>     cmp word [rdi - 1], ":\" ;IF the char preceeding \ is :, then error out
  1013 00001732 7427                <1>     je .aptbPnf
  1014 00001734 66817FFF5C5C        <1>     cmp word [rdi - 1], "\\" ;Similar net name check
  1015 0000173A 741F                <1>     je .aptbPnf
  1016                              <1> .aptbPNDotsLp:
  1017 0000173C 48FFCF              <1>     dec rdi
  1018 0000173F 803F5C              <1>     cmp byte [rdi], "\"
  1019 00001742 75F8                <1>     jne .aptbPNDotsLp  ;Keep looping around until it is a "\"
  1020                              <1>     ;Don't go past the pathsep, since we may need to replace it with a null
  1021 00001744 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;Are we in name resolution mode?
  1022 0000174B 74C1                <1>     je .aptbOkExit    ;If clear, we are, so just return
  1023 0000174D 4839DF              <1>     cmp rdi, rbx    ;Are we before the start of the path? (i.e in subst?)
  1024 00001750 7209                <1>     jb .aptbPnf
  1025 00001752 EBBA                <1>     jmp short .aptbOkExit
  1026                              <1> .aptbSearchError:
  1027 00001754 B812000000          <1>     mov eax, errNoFil
  1028 00001759 EB05                <1>     jmp short .aptbErrExit
  1029                              <1> .aptbPnf:
  1030 0000175B B803000000          <1>     mov eax, errPnf
  1031                              <1> .aptbErrExit:
  1032 00001760 F9                  <1>     stc ;Set carry
  1033                              <1>     return
    18                              <2> %%_ret:
    19 00001761 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1034                              <1> 
  1035                              <1> checkDevPath:
  1036                              <1> ;Called only if the file/directory was not found on disk.
  1037                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1038                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1039                              <1> ; and check to see if it is a char device. If it is, build a directory
  1040                              <1> ; If it is not, proceed with the request fail.
  1041                              <1> ;
  1042                              <1> ;Input: rsi = Pointer to the next path spec
  1043                              <1> ;Output: CF=NC => Char device found, directory built
  1044                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1045 00001762 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1046                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001769 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1047 0000176B 803D(E6C50300)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1048 00001772 7459                <1>     je .notOk                      
  1049                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1050 00001774 50                  <1>     push rax
  1051 00001775 48B844455620202020- <1>     mov rax, "DEV     "
  1051 0000177E 20                  <1>
  1052 0000177F 483905(DBC50300)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1053 00001786 58                  <1>     pop rax
  1054 00001787 7544                <1>     jne .notOk
  1055 00001789 813D(E3C50300)2020- <1>     cmp dword [fcbName + 8], "   \"
  1055 00001791 205C                <1>
  1056 00001793 7538                <1>     jne .notOk
  1057                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1058                              <1>     ; looking for a device driver
  1059                              <1>     ;First append it to rdi 
  1060 00001795 B84445565C          <1>     mov eax, "DEV\" 
  1061 0000179A AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1062 0000179B 57                  <1>     push rdi
  1063 0000179C 488D3D(DBC50300)    <1>     lea rdi, fcbName
  1064 000017A3 E84BFAFFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1065                              <1>     ;Returns in al the terminating char of the source string
  1066 000017A8 5F                  <1>     pop rdi
  1067                              <1>     ;If al is a pathsep, fail
  1068 000017A9 E895350000          <1>     call swapPathSeparator
  1069 000017AE 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1070 000017B0 30C0                <1>     xor al, al
  1071 000017B2 8805(E6C50300)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1072 000017B8 53                  <1>     push rbx
  1073 000017B9 E844000000          <1>     call checkIfCharDevice
  1074 000017BE 5B                  <1>     pop rbx ;Don't need bh yet
  1075 000017BF 720C                <1>     jc .notOk
  1076 000017C1 E86D000000          <1>     call buildCharDir
  1077                              <1>     ;Here the device was determined to be a char device.
  1078                              <1>     ;A dummy directory entry was built for it.
  1079                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1080                              <1>     ; Do not Find Next!
  1081                              <1> .copyName:
  1082 000017C6 E870FAFFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1083 000017CB F8                  <1>     clc
  1084                              <1>     return
    18                              <2> %%_ret:
    19 000017CC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1085                              <1> .notOk:
  1086 000017CD B812000000          <1>     mov eax, errNoFil
  1087 000017D2 F9                  <1>     stc
  1088                              <1>     return
    18                              <2> %%_ret:
    19 000017D3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1089                              <1> .charDevSearch:
  1090 000017D4 53                  <1>     push rbx
  1091 000017D5 E828000000          <1>     call checkIfCharDevice
  1092 000017DA 5B                  <1>     pop rbx ;Dont need bh yet
  1093 000017DB 72F0                <1>     jc .notOk
  1094 000017DD E851000000          <1>     call buildCharDir
  1095 000017E2 803D(E6C50300)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1096 000017E9 750C                <1>     jne .cds2
  1097 000017EB 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1098 000017EF 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1099 000017F1 48FFCF              <1>     dec rdi
  1100 000017F4 B02F                <1>     mov al, "/" ;Replace \ with "/"
  1101 000017F6 AA                  <1>     stosb   ;Store that and let the dir write the filename
  1102                              <1> .cds2:
  1103 000017F7 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1104 000017FE 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1105 00001800 F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1106                              <1>     return
    18                              <2> %%_ret:
    19 00001801 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1107                              <1> 
  1108                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1109                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1110                              <1> ; device driver chain. 
  1111                              <1> ;Output: CF=CY if not found
  1112                              <1> ;        CF=NC if found
  1113                              <1> ;           BH = Low byte of the device attribute word
  1114 00001802 50                  <1>     push rax
  1115 00001803 57                  <1>     push rdi
  1116 00001804 488B05(DBC50300)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1117 0000180B 488D3D(73C00300)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1118                              <1> .checkName:
  1119 00001812 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1120 00001816 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1121 00001818 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1122 0000181B 7406                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1123 0000181D 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1124 00001821 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1125                              <1> .walkList:
  1126 00001823 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1127 00001826 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1128 0000182D 75E3                <1>     jne .checkName  ;If no, rdi points to char device
  1129 0000182F F9                  <1>     stc
  1130                              <1> .exit:
  1131 00001830 5F                  <1>     pop rdi
  1132 00001831 58                  <1>     pop rax
  1133                              <1>     return
    18                              <2> %%_ret:
    19 00001832 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1134                              <1> 
  1135                              <1> buildCharDir:
  1136                              <1> ;Build a dummy directory entry for the char device in FCBName
  1137                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1138 00001833 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1139                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000183A 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1140 0000183C 50                  <1>     push rax
  1141 0000183D 57                  <1>     push rdi
  1142 0000183E C605(E6C50300)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1143 00001845 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
  1144                              <1>     ;Zero the directory copy (32 bytes)
  1145 0000184C 50                  <1>     push rax
  1146 0000184D 51                  <1>     push rcx
  1147 0000184E 57                  <1>     push rdi
  1148 0000184F 31C0                <1>     xor eax, eax    ;Zero rax
  1149 00001851 B904000000          <1>     mov ecx, 4
  1150 00001856 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1151 00001859 5F                  <1>     pop rdi
  1152 0000185A 59                  <1>     pop rcx
  1153 0000185B 58                  <1>     pop rax
  1154 0000185C 488B05(DBC50300)    <1>     mov rax, qword [fcbName]
  1155 00001863 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1156 00001866 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1157 0000186B 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1158 0000186E C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1159                              <1>     ;Get date and time and set the write time in the directory entry
  1160 00001872 E8AB0C0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1161 00001877 E8910D0000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1162 0000187C 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1163 0000187F 31C0                <1>     xor eax, eax
  1164 00001881 5F                  <1>     pop rdi
  1165 00001882 58                  <1>     pop rax
  1166                              <1>     return
    18                              <2> %%_ret:
    19 00001883 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1167                              <1> 
  1168                              <1> checkFailingComp:
  1169                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1170                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1171                              <1> ;Returns: ZF=ZE => Last path componant
  1172                              <1> ;         ZF=NZ => Not last path componant
  1173 00001884 50                  <1>     push rax
  1174 00001885 8A05(E6C50300)      <1>     mov al, byte [fcbName + 11]
  1175 0000188B 84C0                <1>     test al, al
  1176 0000188D 58                  <1>     pop rax
  1177                              <1>     return
    18                              <2> %%_ret:
    19 0000188E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    25                                  %include "./Source/Kernel/FAT/dirfun.asm"
    26                              <1> ;---------------------------------------------------:
    27                              <1> ;                   KERNEL FUNCTIONS                :
    28                              <1> ;---------------------------------------------------:
    29                              <1> makeDIR:           ;ah = 39h
    30                              <1> ;For make, the path must exist but the final componant must not exist.
    31                              <1> ;Input: rdx = Pointer to ASCIIZ string
    32 0000188F 4889D7              <1>     mov rdi, rdx
    33                              <1> .okLength:
    34 00001892 4889D6              <1>     mov rsi, rdx
    35 00001895 E83E350000          <1>     call checkPathspecOK
    36 0000189A 7307                <1>     jnc .pathOk  ;Don't allow any malformed chars
    37                              <1> .badPath:
    38 0000189C B003                <1>     mov al, errPnf
    39 0000189E E9E7370000          <1>     jmp extErrExit
    40                              <1> .pathOk:
    41 000018A3 E8AC350000          <1>     call scanPathWC
    42 000018A8 72F2                <1>     jc .badPath ;Dont allow wildcards
    43 000018AA E8E7350000          <1>     call checkPathNet
    44 000018AF 74EB                <1>     jz .badPath ;or network paths
    45                              <1>     ;Path is ok, now proceed
    46 000018B1 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    47 000018B8 E873FAFFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
    48                              <1>     ;If the path exists, exit error
    49 000018BD 0F83C7370000        <1>     jnc extErrExit
    50                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    51 000018C3 E8BCFFFFFF          <1>     call checkFailingComp
    52 000018C8 0F85BC370000        <1>     jnz extErrExit
    53                              <1>     ;So all is well, the new subdirectories name is in fcbName
    54                              <1>     ;The parent dir's directory entry is in the curDirCopy
    55                              <1> 
    56                              <1> removeDIR:         ;ah = 3Ah
    57                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
    58                              <1> ;Input: rdx = Pointer to ASCIIZ string
    59 000018CE 4889D7              <1>     mov rdi, rdx
    60 000018D1 E89F340000          <1>     call strlen
    61 000018D6 81F940000000        <1>     cmp ecx, 64
    62 000018DC 7607                <1>     jbe .okLength
    63                              <1> .badPath:
    64 000018DE B003                <1>     mov al, errPnf
    65 000018E0 E9A5370000          <1>     jmp extErrExit
    66                              <1> .okLength:
    67 000018E5 4889D6              <1>     mov rsi, rdx
    68 000018E8 E8EB340000          <1>     call checkPathspecOK
    69 000018ED 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    70 000018EF E860350000          <1>     call scanPathWC
    71 000018F4 72E8                <1>     jc .badPath ;Or wildcards
    72 000018F6 E89B350000          <1>     call checkPathNet
    73 000018FB 74E1                <1>     jz .badPath ;Or Net paths
    74                              <1>     ;Path is ok, now proceed
    75 000018FD 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    76 00001904 E827FAFFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
    77 00001909 0F827B370000        <1>     jc extErrExit   ;Exit with error code in eax
    78                              <1>     ;The path must've been ok, so now copy the path into the CDS
    79                              <1>     ;The copy of the directory entry has the start cluster of this dir file
    80 0000190F 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Copy the CDS to the tmpCDS
    81 00001916 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
    82 0000191C 756D                <1>     jnz .net    ;This is done by the redirector for redirector drives
    83 0000191E 488D3D(FBC50300)    <1>     lea rdi, tmpCDS
    84 00001925 B95B000000          <1>     mov ecx, cds_size
    85 0000192A F3A4                <1>     rep movsb
    86                              <1>     ;If the path is longer than 67, call it an invalid path
    87 0000192C 488D3D(7FC40300)    <1>     lea rdi, buffer1
    88 00001933 E83D340000          <1>     call strlen ;Get the length of this path
    89 00001938 81F943000000        <1>     cmp ecx, 67
    90 0000193E 779E                <1>     ja .badPath
    91 00001940 4889FE              <1>     mov rsi, rdi    ;Move buffer source to rsi
    92 00001943 488D3D(FBC50300)    <1>     lea rdi, tmpCDS
    93 0000194A F3A4                <1>     rep movsb   ;Copy the path over
    94                              <1>     ;Now get the start cluster from the directory copy
    95 0000194C 0FB715(D5C50300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
    96 00001953 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
    97 0000195A C1E010              <1>     shl eax, 10h
    98 0000195D 09D0                <1>     or eax, edx ;Add low bits to eax
    99 0000195F 8905(48C60300)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   100 00001965 488D35(FBC50300)    <1>     lea rsi, tmpCDS
   101 0000196C 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   102 00001973 B95B000000          <1>     mov ecx, cds_size
   103 00001978 E8CE360000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   104 0000197D F3A4                <1>     rep movsb
   105 0000197F E8D1360000          <1>     call dosCrit1Exit
   106 00001984 31C0                <1>     xor eax, eax
   107 00001986 E9F1360000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   108                              <1> .net:
   109                              <1> ;SDA Vars are setup for this request
   110 0000198B B805110000          <1>     mov eax, 1105h
   111 00001990 CD4F                <1>     int 4fh
   112 00001992 0F82F2360000        <1>     jc extErrExit
   113 00001998 E9DF360000          <1>     jmp extGoodExit
   114                              <1> getCurrentDIR:     ;ah = 47h
   115                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   116                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   117 0000199D 88D0                <1>     mov al, dl  ;Move drive number into al
   118 0000199F E812330000          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   119 000019A4 0F82E0360000        <1>     jc extErrExit
   120                              <1> .okDrive:
   121 000019AA 4889F7              <1>     mov rdi, rsi    ;Save destination in rdi
   122 000019AD E899360000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   123 000019B2 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]  ;Get pointer to current CDS in rsi
   124 000019B9 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   125 000019BD FFC0                <1>     inc eax ;Go past the backslash
   126 000019BF 4801C6              <1>     add rsi, rax ;Add this many chars to rsi to point to first char to copy
   127 000019C2 E8BD330000          <1>     call strcpy
   128 000019C7 E889360000          <1>     call dosCrit1Exit
   129 000019CC B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   130 000019D1 E9A6360000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   131                              <1> 
   132                              <1> getSetFileDateTime:;ah = 57h
   133                              <1> trueName:          ;ah = 60h, get fully qualified name. Int 4Fh, AX=1221h
   134                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   135 000019D6 E8FD330000          <1>     call checkPathspecOK    ;This preserves rsi
   136 000019DB 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   137 000019DD 740A                <1>     jz .pathspecOk  ;If the last char in the path is malformed allow it here
   138                              <1> .badPath:
   139 000019DF B803000000          <1>     mov eax, errPnf
   140 000019E4 E9A1360000          <1>     jmp extErrExit
   141                              <1> .pathspecOk:
   142 000019E9 57                  <1>     push rdi    ;Save the destination
   143 000019EA 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   144 000019F1 E81BF9FFFF          <1>     call canonicaliseFileName
   145 000019F6 C60700              <1>     mov byte [rdi], 0   ;Store a terminating zero if necessary
   146 000019F9 5F                  <1>     pop rdi
   147 000019FA 0F828A360000        <1>     jc extErrExit
   148 00001A00 488D35(7FC40300)    <1>     lea rsi, buffer1
   149 00001A07 E878330000          <1>     call strcpy
   150 00001A0C 31C0                <1>     xor eax, eax
   151 00001A0E E969360000          <1>     jmp extGoodExit
   152                              <1> 
   153                              <1> ;-----------------------------------
   154                              <1> ;    General Directory Routines    :
   155                              <1> ;-----------------------------------
   156                              <1> 
   157                              <1> findFreeDiskDirEntry:
   158                              <1> ;Find a space in the directory we are searching for a directory entry
   159                              <1> ;Accept first entry starting with a 0E5h or 00h
   160                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   161                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   162                              <1> ; be called for CDS's that are NOT net CDS's).
   163                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   164                              <1> ;       Directory vars must be set up for the directory we are searching in
   165                              <1> ;Output: CF=CY => Error, eax has error code
   166                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   167 00001A13 8A05(62C60300)      <1>     mov al, byte [delChar]
   168 00001A19 8805(DBC50300)      <1>     mov byte [fcbName], al
   169 00001A1F E824F6FFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   170                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00001A24 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00001A26 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   171                              <1> ;Free entry found, dir variables are set for the free entry. 
   172                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   173                              <1> getDiskDirectoryEntry:
   174                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   175                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   176                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   177                              <1> ;        qword [tempSect] = Disk sector number of directory
   178                              <1> ;        word [entry] = 32 byte offset into sector
   179                              <1> ;        CF=CY => Error, exit 
   180 00001A27 53                  <1>     push rbx
   181 00001A28 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  
   182                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   183                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   184 00001A2E 0FB71D(DAC60300)    <1>     movzx ebx, word [dirSect]
   185 00001A35 85C0                <1>     test eax, eax
   186 00001A37 7407                <1>     jz .skipCluster
   187 00001A39 E8D4F1FFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   188 00001A3E EB0C                <1>     jmp short .skipOldFat
   189                              <1> .skipCluster:
   190 00001A40 55                  <1>     push rbp
   191 00001A41 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   192 00001A48 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   193 00001A4B 5D                  <1>     pop rbp
   194                              <1> .skipOldFat:
   195 00001A4C 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   196 00001A4F 488905(98C60300)    <1>     mov qword [tempSect], rax   ;Save this sector number
   197 00001A56 E8C5F0FFFF          <1>     call getBufForDOS   ;Get buffer for DOS in rbx
   198 00001A5B 5B                  <1>     pop rbx
   199                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001A5C 72C8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   200 00001A5E 53                  <1>     push rbx
   201 00001A5F 488B1D(90C60300)    <1>     mov rbx, qword [currBuff]
   202 00001A66 E8C4F6FFFF          <1>     call adjustDosDirBuffer ;Change buffer to Dir buffer
   203                              <1>     ;Above function gets data buffer ptr in rsi
   204 00001A6B 0FB705(DAC60300)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   205 00001A72 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   206 00001A76 F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   207                              <1>     ; the current sector
   208 00001A78 C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   209 00001A7B 8B1D(DCC60300)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   210 00001A81 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   211 00001A83 C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   212 00001A86 66891D(A0C60300)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   213 00001A8D 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   214 00001A90 5B                  <1>     pop rbx
   215                              <1>     return
    18                              <2> %%_ret:
    19 00001A91 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   216                              <1> 
   217                              <1> 
   218                              <1> updateDirectoryEntryForFile:    
   219                              <1> ;Updates the directory entry for disk files
   220                              <1> ;Called with:
   221                              <1> ;   [workingDPB] = DPB pointer for the disk device
   222                              <1> ;   [currentSFT] = Current SFT pointer
   223 00001A92 50                  <1>     push rax
   224 00001A93 53                  <1>     push rbx
   225 00001A94 57                  <1>     push rdi
   226 00001A95 55                  <1>     push rbp
   227                              <1> 
   228 00001A96 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   229 00001A9D 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   230 00001AA4 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   231 00001AAA 751D                <1>     jnz .skipDT
   232                              <1>     ;Get date and time words and add them to the directory entry
   233 00001AAC E8710A0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   234 00001AB1 7271                <1>     jc .exit  ;If we fail to get time/date, fail the request
   235                              <1>     ;Build date and time words
   236 00001AB3 E8550B0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   237                              <1>     ;Update SFT fields
   238 00001AB8 66894713            <1>     mov word [rdi + sft.wTime], ax
   239 00001ABC C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   240 00001ABF 66894715            <1>     mov word [rdi + sft.wDate], ax
   241 00001AC3 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush  ;We update DT, so flush
   242                              <1> .skipDT:
   243                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   244                              <1> ; we skip all of this
   245 00001AC9 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   246 00001ACF 7453                <1>     jz .exit ;If the file was never written to, don't bother updating DIR data
   247 00001AD1 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   248 00001AD5 E854F0FFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   249 00001ADA 7248                <1>     jc .exit    ;If an error is to be returned from, we skip the rest of this
   250                              <1>     ;Now we write the changes to the sector
   251                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   252 00001ADC E8AFEEFFFF          <1>     call setBufferDirty
   253 00001AE1 488D6B30            <1>     lea rbp, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   254 00001AE5 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   255 00001AE9 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   256 00001AEC 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   257 00001AEF 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   258 00001AF2 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   259 00001AF5 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   260 00001AF9 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   261 00001AFD 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   262 00001B01 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   263 00001B05 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   264 00001B09 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
   265 00001B0C 6689451A            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusLo], ax
   266 00001B10 C1E810              <1>     shr eax, 10h
   267 00001B13 66894514            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusHi], ax
   268                              <1>     ;Directory sector updated and marked to be flushed to disk!
   269                              <1>     ;Now mark that the file has sectors not yet flushed to disk
   270 00001B17 E883EEFFFF          <1>     call setBufferReferenced
   271 00001B1C 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   272 00001B1D 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush
   273 00001B23 9D                  <1>     popfq
   274                              <1> .exit:
   275 00001B24 5D                  <1>     pop rbp
   276 00001B25 5F                  <1>     pop rdi
   277 00001B26 5B                  <1>     pop rbx
   278 00001B27 58                  <1>     pop rax
   279                              <1>     return
    18                              <2> %%_ret:
    19 00001B28 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   280                              <1> 
   281                              <1> growDirectory:
   282                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   283                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   284                              <1> ;                 eax = New Cluster number
   285                              <1> ;               TWO NON CF ERROR CASES.
   286                              <1> ;               If eax = -1 => disk full!
   287                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   288                              <1> ;        CF=CY => Something went wrong. Rip. 
   289 00001B29 53                  <1>     push rbx
   290 00001B2A 51                  <1>     push rcx
   291 00001B2B 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   292 00001B31 85C0                <1>     test eax, eax
   293 00001B33 741D                <1>     jz .exit
   294 00001B35 E8F1F0FFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   295 00001B3A 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   296 00001B3C B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   297 00001B41 E853F1FFFF          <1>     call allocateClusters   ;ebx has last cluster value
   298 00001B46 720A                <1>     jc .exit
   299 00001B48 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   300 00001B4A E88FF2FFFF          <1>     call walkFAT
   301 00001B4F 7201                <1>     jc .exit
   302 00001B51 F8                  <1>     clc
   303                              <1> .exit:
   304 00001B52 59                  <1>     pop rcx
   305 00001B53 5B                  <1>     pop rbx
   306                              <1>     return   
    18                              <2> %%_ret:
    19 00001B54 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    26                                  %include "./Source/Kernel/FileIO/devio.asm"
    27                              <1> ;This file contains the primitive dev io function, which will be called 
    28                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    29                              <1> ; make requests for device IO.
    30                              <1> 
    31                              <1> mainCharIO:
    32                              <1> ;This is the main IO clearing function for Char IO.
    33                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    34                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    35                              <1> ;
    36                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    37                              <1> ;       ah = {0,..., 5}, a subfunction number
    38                              <1> ;       Function 0: Read Char (drvREAD)
    39                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    40                              <1> ;       Function 2: Write Char (drvWrite)
    41                              <1> ; In the case the below functions are called for Disk/Net files
    42                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    43                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    44                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    45                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    46                              <1> ;
    47                              <1> ; If and only if ah = 02h, al = Char to write to device
    48                              <1> ;
    49                              <1> ;
    50                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    51                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    52                              <1> ;                                           ZF = NZ => Device ready (not busy)
    53                              <1> ;                                               If ND read, AL = Next Char
    54                              <1> ; For Files/Net:
    55                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    56                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    57                              <1> ;           For Read and ND Read:
    58                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    59                              <1> ;               Read returns ^Z on EOF.
    60                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    61                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    62                              <1> ;
    63                              <1> ;All registers preserved EXCEPT for ax and flags
    64                              <1> 
    65                              <1> ;Reference Request Header
    66                              <1> ;Common Section:
    67                              <1> ;    .hdrlen resb 1  ;Length of the request header
    68                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    69                              <1> ;    .cmdcde resb 1  ;Command code
    70                              <1> ;    .status resw 1  ;Status word
    71                              <1> ;    .devptr resq 1  ;Reserved. Unused
    72                              <1> ;Below used by calls 0,1,2,5
    73                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    74                              <1> ;Below used by calls 0,2
    75                              <1> ;    .bufptr resq 1
    76                              <1> ;    .tfrlen resd 1
    77                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    78                              <1> ;    .strtsc resq 1
    79                              <1> ;    .desptr resq 1
    80                              <1> 
    81                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    82 00001B55 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    83 00001B56 488D1D(7DC40300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    84 00001B5D 48891D(06C40300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    85 00001B64 5B                  <1>     pop rbx
    86 00001B65 C705(0EC40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    86 00001B6D 0000                <1>
    87 00001B6F 668905(7DC40300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    88 00001B76 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    89 00001B7C 0F85A1000000        <1>     jnz .notChar
    90 00001B82 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    91 00001B88 0F8495000000        <1>     jz .notChar
    92                              <1> ;Char devices only here
    93 00001B8E E8A1340000          <1>     call dosPushRegs    ;Save context here
    94 00001B93 488D1DA7E4FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    95 00001B9A 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    96 00001B9D C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    97 00001BA0 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    98 00001BA3 890D(F8C30300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    99                              <1>     ;Now set up cx for status word
   100 00001BA9 31C9                <1>     xor ecx, ecx
   101 00001BAB 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   102 00001BAE 7506                <1>     jne .skipBsySet
   103 00001BB0 81C900020000        <1>     or ecx, drvBsyStatus
   104                              <1> .skipBsySet:
   105 00001BB6 66870D(FBC30300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   106                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   107 00001BBD 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   108 00001BC4 E8632C0000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   109 00001BC9 668B3D(FBC30300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   110 00001BD0 F7C700800000        <1>     test edi, drvErrStatus
   111 00001BD6 752D                <1>     jnz .error
   112                              <1> .ignoreRet:
   113 00001BD8 803D(FAC30300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   114 00001BDF 750C                <1>     jne .notNDRead
   115 00001BE1 8A05(05C40300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   116 00001BE7 8805(7DC40300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   117                              <1> .notNDRead:
   118 00001BED 8A25(FCC30300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   119 00001BF3 F6D4                <1>     not ah
   120 00001BF5 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   121 00001BF8 E820340000          <1>     call dosPopRegs ;Get back the context
   122 00001BFD 668B05(7DC40300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   123                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 00001C04 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   124                              <1> .error:
   125                              <1>     ;cl has flags
   126 00001C05 88CC                <1>     mov ah, cl
   127 00001C07 E8F72A0000          <1>     call charDevErr
   128 00001C0C 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   129 00001C0E 750A                <1>     jne .errorIgnore
   130                              <1>     ;Fallthrough => Retry
   131 00001C10 E808340000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   132 00001C15 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   133                              <1> .errorIgnore:
   134                              <1>     ;Clear the busy bit in the status word
   135 00001C1A 8025(FCC30300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   136 00001C21 EBB5                <1>     jmp short .ignoreRet
   137                              <1> .notChar:
   138                              <1> ;Just return with ZF=NZ for now
   139 00001C23 50                  <1>     push rax
   140 00001C24 31C0                <1>     xor eax, eax
   141 00001C26 FEC0                <1>     inc al
   142 00001C28 58                  <1>     pop rax
   143                              <1>     return
    18                              <2> %%_ret:
    19 00001C29 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> 
   145                              <1> openSFT:
   146                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   147                              <1> ;Input: rdi = SFT pointer
   148 00001C2A E805340000          <1>     call dosPushRegs
   149 00001C2F B00D                <1>     mov al, drvOPEN
   150 00001C31 EB07                <1>     jmp short openCloseCommon
   151                              <1> closeSFT:
   152                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   153 00001C33 E8FC330000          <1>     call dosPushRegs
   154 00001C38 B00E                <1>     mov al, drvCLOSE
   155                              <1> openCloseCommon:
   156                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   157 00001C3A 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   158 00001C40 7469                <1>     jz .exit    ;Exit if so
   159 00001C42 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   160 00001C46 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   161 00001C4A 7512                <1>     jnz .charDev
   162                              <1>     ;Here a disk drive, rdi is a DPB ptr
   163 00001C4C 803D(36C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   164 00001C53 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   165 00001C55 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   166 00001C58 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   167 00001C5A 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   168                              <1> .charDev:
   169 00001C5E 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   170 00001C64 7445                <1>     jz .exit    ;No, exit!
   171 00001C66 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   172 00001C69 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   173 00001C70 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   174                              <1> .retryEP:
   175 00001C73 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   176 00001C76 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   177 00001C79 50                  <1>     push rax    ;Save the dword
   178 00001C7A E8B12B0000          <1>     call goDriver
   179 00001C7F 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   180 00001C86 F7C700800000        <1>     test edi, drvErrStatus
   181 00001C8C 741C                <1>     jz .exitPop
   182                              <1>     ;Error here, check if char or block drive
   183 00001C8E 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   184 00001C94 7404                <1>     jz .blockError
   185                              <1>     ;Char error here
   186 00001C96 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   187 00001C98 EB04                <1>     jmp short .errorCmn
   188                              <1> .blockError:
   189 00001C9A 88C8                <1>     mov al, cl  ;Move drive number into al
   190 00001C9C B406                <1>     mov ah, critData    ;Data on block dev error
   191                              <1> .errorCmn:
   192                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   193 00001C9E E8602A0000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   194 00001CA3 B001                <1>     mov al, critRetry   ;al returns user response
   195 00001CA5 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   196 00001CA7 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   197 00001CA8 EBC9                <1>     jmp short .retryEP  ;Reset
   198                              <1> .exitPop:
   199 00001CAA 58                  <1>     pop rax    
   200                              <1> .exit:
   201 00001CAB E86D330000          <1>     call dosPopRegs
   202                              <1>     return
    18                              <2> %%_ret:
    19 00001CB0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    27                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    28                              <1> ;-----------------------------------------------------------------------:
    29                              <1> ;                  DOS default char functions live here                 :
    30                              <1> ;                                                                       :
    31                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    32                              <1> ;                                                                       :
    33                              <1> ;Rules for the naming of the DOS functions                              :
    34                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    35                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    36                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    37                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    38                              <1> ;                                                                       :
    39                              <1> ;-----------------------------------------------------------------------:
    40                              <1> 
    41                              <1> charIn_BE:     ;ah = 01h
    42                              <1> ;Return char that has been read and echoed in al
    43 00001CB1 E866010000          <1>     call charIn_B
    44 00001CB6 50                  <1>     push rax
    45 00001CB7 E804000000          <1>     call charOut_B.in    ;Output it to screen
    46 00001CBC 58                  <1>     pop rax
    47                              <1>     return
    18                              <2> %%_ret:
    19 00001CBD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    48                              <1> 
    49                              <1> charOut_B:       ;ah = 02h
    50                              <1> ;Bspace is regular cursor left, does not insert a blank
    51 00001CBE 88D0                <1>     mov al, dl
    52                              <1> .in:  ;Internal function Entry Point, with char in al
    53 00001CC0 3C20                <1>     cmp al, asciiCaret
    54 00001CC2 7277                <1>     jb .control
    55 00001CC4 3C7F                <1>     cmp al, DEL ;DEL char?
    56 00001CC6 7406                <1>     je .skipCurs
    57 00001CC8 FE05(2EC20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    58                              <1> .skipCurs:
    59 00001CCE FE05(34C30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    60 00001CD4 8025(34C30300)03    <1>     and byte [vConErr], 3
    61 00001CDB 56                  <1>     push rsi
    62 00001CDC 7507                <1>     jnz .skipErrorCheck
    63 00001CDE 50                  <1>     push rax
    64 00001CDF E884020000          <1>     call vConCtrlCheck
    65 00001CE4 58                  <1>     pop rax
    66                              <1> .skipErrorCheck:
    67 00001CE5 E80C020000          <1>     call outputOnStdout
    68 00001CEA 5E                  <1>     pop rsi
    69 00001CEB F605(31C30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    70                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001CF2 74C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    71 00001CF4 53                  <1>     push rbx
    72 00001CF5 56                  <1>     push rsi
    73 00001CF6 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    74 00001CFB E82F030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    75 00001D00 7236                <1>     jc .exitPrintEcho
    76                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    77 00001D02 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    78 00001D06 F7C300800000        <1>     test ebx, devRedirDev
    79 00001D0C 752A                <1>     jnz .exitPrintEcho  ;Exit if STDOUT is redir
    80 00001D0E F7C380000000        <1>     test ebx, devCharDev
    81 00001D14 7422                <1>     jz .exitPrintEcho
    82 00001D16 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    83 00001D1B E80F030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    84 00001D20 7216                <1>     jc .exitPrintEcho   ;Exit if handle closed
    85 00001D22 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    86 00001D28 7407                <1>     jz .netSpool
    87 00001D2A E8FB010000          <1>     call outputOnSFT
    88 00001D2F EB07                <1>     jmp short .exitPrintEcho
    89                              <1> .netSpool:
    90 00001D31 C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    91                              <1> .exitPrintEcho:
    92 00001D38 5E                  <1>     pop rsi
    93 00001D39 5B                  <1>     pop rbx
    94                              <1>     return
    18                              <2> %%_ret:
    19 00001D3A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    95                              <1> .control:
    96 00001D3B 3C0D                <1>     cmp al, CR
    97 00001D3D 7425                <1>     je .newline
    98 00001D3F 3C08                <1>     cmp al, BSP
    99 00001D41 742D                <1>     je .back
   100 00001D43 3C09                <1>     cmp al, TAB
   101 00001D45 7587                <1>     jne .skipCurs   ;Treat as normal
   102                              <1>     ;TAB key here
   103                              <1> .tab:
   104 00001D47 51                  <1>     push rcx
   105 00001D48 0FB60D(2EC20300)    <1>     movzx ecx, byte [vConCursPos]
   106 00001D4F 80C9F8              <1>     or cl, ~7
   107 00001D52 F6D9                <1>     neg cl
   108 00001D54 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   109                              <1> .tabloop:
   110 00001D57 B020                <1>     mov al, SPC
   111 00001D59 E862FFFFFF          <1>     call charOut_B.in   ;Output the char
   112 00001D5E FEC9                <1>     dec cl
   113 00001D60 75F5                <1>     jnz .tabloop
   114                              <1> .stopTab:
   115 00001D62 59                  <1>     pop rcx
   116                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 00001D63 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   117                              <1> .newline:
   118 00001D64 C605(2EC20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   119 00001D6B E95EFFFFFF          <1>     jmp .skipCurs   ;And echo 
   120                              <1> .back:
   121 00001D70 FE0D(2EC20300)      <1>     dec byte [vConCursPos]
   122 00001D76 E953FFFFFF          <1>     jmp .skipCurs   ;And echo
   123                              <1> 
   124                              <1> auxIn_B:        ;ah = 03h
   125 00001D7B E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   126 00001D80 BB03000000          <1>     mov ebx, 3
   127 00001D85 E8A5020000          <1>     call getCharDevSFT
   128                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001D8A 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   129                              <1> .auxloop:
   130 00001D8C B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   131 00001D8E E8C2FDFFFF          <1>     call mainCharIO
   132 00001D93 7408                <1>     jz .signalLoop
   133 00001D95 30E4                <1>     xor ah, ah  ;Read the char in
   134 00001D97 E8B9FDFFFF          <1>     call mainCharIO
   135                              <1>     return
    18                              <2> %%_ret:
    19 00001D9C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   136                              <1> .signalLoop:
   137 00001D9D E8A3010000          <1>     call callInt48h
   138 00001DA2 EBE8                <1>     jmp short .auxloop
   139                              <1> 
   140                              <1> auxOut_B:       ;ah = 04h
   141 00001DA4 53                  <1>     push rbx
   142 00001DA5 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   143 00001DAA EB06                <1>     jmp short auxOutCmn
   144                              <1> prnOut_B:       ;ah = 05h
   145 00001DAC 53                  <1>     push rbx
   146 00001DAD BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   147                              <1> auxOutCmn: ;Auxilliary output device common 
   148 00001DB2 88D0                <1>     mov al, dl  ;Get the char into al
   149 00001DB4 50                  <1>     push rax
   150 00001DB5 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   151 00001DBA 58                  <1>     pop rax
   152 00001DBB 56                  <1>     push rsi
   153 00001DBC E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   154 00001DC1 5E                  <1>     pop rsi
   155 00001DC2 5B                  <1>     pop rbx
   156                              <1>     return
    18                              <2> %%_ret:
    19 00001DC3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   157                              <1> 
   158                              <1> directConIO:    ;ah = 06h
   159 00001DC4 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   160 00001DC6 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   161 00001DC8 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   162                              <1> ;Here is the read char direct function
   163 00001DCE 31DB                <1>     xor ebx, ebx    
   164 00001DD0 E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   165                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001DD5 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   166 00001DD7 488B2D(DCC30300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   167 00001DDE B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   168 00001DE0 E870FDFFFF          <1>     call mainCharIO
   169 00001DE5 E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   170 00001DEA 7507                <1>     jnz .readChar
   171 00001DEC 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   172 00001DF0 30C0                <1>     xor al, al  ;Set caller return code to 0
   173                              <1>     return
    18                              <2> %%_ret:
    19 00001DF2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   174                              <1> .readChar:
   175 00001DF3 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   176                              <1>     ;Fallthrough here to get the char at STDIN
   177                              <1> charIn:         ;ah = 07h
   178                              <1> ;Return char in al from STDIN without waiting
   179 00001DF7 31DB                <1>     xor ebx, ebx
   180 00001DF9 E831020000          <1>     call getCharDevSFT
   181                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001DFE 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   182 00001E00 B401                <1>     mov ah, 01  ;ND read for char
   183 00001E02 E84EFDFFFF          <1>     call mainCharIO
   184 00001E07 750B                <1>     jnz .getChar
   185 00001E09 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   186 00001E0B CD4A                <1>     int 4Ah
   187 00001E0D E833010000          <1>     call callInt48h
   188 00001E12 EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   189                              <1> .getChar:
   190                              <1>     ;Get the char in al and exit
   191 00001E14 30E4                <1>     xor ah, ah
   192 00001E16 E83AFDFFFF          <1>     call mainCharIO
   193                              <1>     return
    18                              <2> %%_ret:
    19 00001E1B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   194                              <1> charIn_B:       ;ah = 08h
   195                              <1> ;Return char in al from STDIN
   196 00001E1C 56                  <1>     push rsi
   197                              <1> .readAgain:
   198 00001E1D E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   199                              <1>     ;Also sets rsi to point to the device SFT for 
   200 00001E22 7543                <1>     jnz .pullChar
   201 00001E24 803D(E9D80300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   202 00001E2B 7507                <1>     jne .skiplookahead
   203 00001E2D B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   204 00001E2F E821FDFFFF          <1>     call mainCharIO
   205                              <1> .skiplookahead:
   206 00001E34 B484                <1>     mov ah, 84h
   207 00001E36 CD4A                <1>     int 4ah ;Multitasking keyboard loop
   208 00001E38 66813D(B0D90300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   208 00001E40 FF                  <1>
   209 00001E41 751B                <1>     jne .skipClockRead
   210 00001E43 E8EC310000          <1>     call dosPushRegs
   211 00001E48 F8                  <1>     clc ;Clear CF, write primary header to backup
   212 00001E49 E882000000          <1>     call swapPrimaryHeader
   213 00001E4E E8CF060000          <1>     call readDateTimeRecord
   214 00001E53 F9                  <1>     stc ;Set CF, write backup to primary header
   215 00001E54 E877000000          <1>     call swapPrimaryHeader
   216 00001E59 E8BF310000          <1>     call dosPopRegs
   217                              <1> .skipClockRead:
   218 00001E5E 66FF05(B0D90300)    <1>     inc word [keybTicks]
   219 00001E65 EBB6                <1>     jmp short .readAgain
   220                              <1> .pullChar:
   221 00001E67 30E4                <1>     xor ah, ah
   222 00001E69 E8E7FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   223 00001E6E 5E                  <1>     pop rsi
   224 00001E6F 3C00                <1>     cmp al, NUL ;Is this the null char?
   225 00001E71 7507                <1>     jne .exit
   226                              <1>     ;We are mid extended ascii, prevent printer toggling
   227 00001E73 C605(AFD90300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   228                              <1> .exit:
   229                              <1>     return
    18                              <2> %%_ret:
    19 00001E7A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   230                              <1> 
   231                              <1> printString_B:      ;ah = 09h
   232 00001E7B 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   233                              <1> .ps0:
   234 00001E7E AC                  <1>     lodsb   ;Get char in al and inc rsi
   235 00001E7F 3C24                <1>     cmp al, "$" ;End of string char?
   236                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001E81 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   237 00001E83 E838FEFFFF          <1>     call charOut_B.in
   238 00001E88 EBF4                <1>     jmp short .ps0
   239                              <1> 
   240                              <1> checkStdinStatus:  ;ah = 0Bh
   241                              <1> ;Returns the status of the driver controlling vCon
   242 00001E8A E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   243 00001E8F B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   244                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001E91 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   245 00001E93 FEC8                <1>     dec al  ;Set al to -1 if char available
   246                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 00001E95 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   247                              <1> clearbuffDoFunc:   ;ah = 0Ch
   248                              <1> ;Clears any buffers and issues a console read command (the command in al)
   249                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   250 00001E96 50                  <1>     push rax
   251 00001E97 52                  <1>     push rdx
   252 00001E98 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   253 00001E9A E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   254 00001E9F 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   255 00001EA1 B404                <1>     mov ah, 04h ;Flush input buffers
   256 00001EA3 E8ADFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   257                              <1> .skipFlush:
   258 00001EA8 5A                  <1>     pop rdx
   259 00001EA9 58                  <1>     pop rax
   260 00001EAA 88C4                <1>     mov ah, al  ;Move function number into ah
   261 00001EAC 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   262 00001EAE 7507                <1>     jne .others
   263 00001EB0 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   264 00001EB3 7412                <1>     jz .bad ;Yes, exit
   265 00001EB5 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   266                              <1> .others:
   267 00001EB7 3C01                <1>     cmp al, 01h
   268 00001EB9 740F                <1>     je .callFunction
   269 00001EBB 3C07                <1>     cmp al, 07h
   270 00001EBD 740B                <1>     je .callFunction
   271 00001EBF 3C08                <1>     cmp al, 08h
   272 00001EC1 7407                <1>     je .callFunction
   273 00001EC3 3C0A                <1>     cmp al, 0Ah
   274 00001EC5 7403                <1>     je .callFunction
   275                              <1> .bad:
   276 00001EC7 30C0                <1>     xor al, al
   277                              <1>     return
    18                              <2> %%_ret:
    19 00001EC9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   278                              <1> .callFunction:
   279 00001ECA FA                  <1>     cli ;Prepare to swap stack pointer
   280                              <1>     ;The below address avoids "properly" reentering DOS
   281                              <1>     ;We simply reuse the function dispatch aspect. 
   282                              <1>     ;this means we dont trash the caller's register frame 
   283 00001ECB E97C300000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   284                              <1> ;------------------------
   285                              <1> ;  Primitive functions  :
   286                              <1> ;------------------------
   287                              <1> swapPrimaryHeader:
   288                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   289                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   290 00001ED0 56                  <1>     push rsi
   291 00001ED1 57                  <1>     push rdi
   292 00001ED2 51                  <1>     push rcx
   293 00001ED3 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   293 00001EDC 00                  <1>
   294 00001EDD 488D35(22C40300)    <1>     lea rsi, primReqHdr
   295 00001EE4 488D3D(82D90300)    <1>     lea rdi, bkupReqHdr
   296 00001EEB 7303                <1>     jnc .read
   297 00001EED 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   298                              <1> .read:
   299 00001EF0 F3A4                <1>     rep movsb   ;Swap
   300 00001EF2 59                  <1>     pop rcx
   301 00001EF3 5F                  <1>     pop rdi
   302 00001EF4 5E                  <1>     pop rsi
   303                              <1>     return
    18                              <2> %%_ret:
    19 00001EF5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   304                              <1> outputOnStdout:
   305                              <1> ;Input: al = Char to output
   306                              <1> ;Output: CF=CY, all good
   307 00001EF6 53                  <1>     push rbx
   308 00001EF7 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   309 00001EFC E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   310 00001F01 7217                <1>     jc .exit
   311 00001F03 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   312 00001F09 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   313 00001F0B 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   314 00001F0F 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   315 00001F15 7405                <1>     jz .notCharDevOrFast
   316 00001F17 CD49                <1>     int 49h ;Fast output
   317                              <1> .exitOk:
   318 00001F19 F8                  <1>     clc
   319                              <1> .exit:
   320 00001F1A 5B                  <1>     pop rbx
   321                              <1>     return
    18                              <2> %%_ret:
    19 00001F1B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   322                              <1> .notCharDevOrFast:
   323 00001F1C E809000000          <1>     call outputOnSFT
   324 00001F21 5B                  <1>     pop rbx
   325                              <1>     return
    18                              <2> %%_ret:
    19 00001F22 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   326                              <1> 
   327                              <1> outputToHandle:
   328                              <1> ;Char to output must be in al
   329 00001F23 E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   330                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001F28 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   331                              <1> outputOnSFT:
   332                              <1> ;Output char in al to SFT in rsi
   333                              <1> ;Waits until device is not busy to send char.
   334                              <1> ;Calls int 48h if device busy
   335 00001F2A 50                  <1>     push rax
   336 00001F2B B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   337 00001F2D E823FCFFFF          <1>     call mainCharIO
   338 00001F32 58                  <1>     pop rax
   339 00001F33 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   340 00001F35 B402                <1>     mov ah, 02h ;Output char in al
   341 00001F37 E819FCFFFF          <1>     call mainCharIO
   342 00001F3C F8                  <1>     clc
   343                              <1>     return
    18                              <2> %%_ret:
    19 00001F3D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   344                              <1> .signalLoop:
   345 00001F3E E802000000          <1>     call callInt48h
   346 00001F43 EBE5                <1>     jmp short outputOnSFT
   347                              <1> 
   348                              <1> callInt48h:
   349                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   350 00001F45 9C                  <1>     pushfq
   351 00001F46 F605(F6C30300)FF    <1>     test byte [int48Flag], -1
   352 00001F4D 7417                <1>     jz .exit    ;If zero, not safe
   353 00001F4F F605(69C30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   354 00001F56 750E                <1>     jnz .exit
   355                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   356 00001F58 FF35(F6C30300)      <1>     push qword [int48Flag] 
   357 00001F5E CD48                <1>     int 48h
   358 00001F60 8F05(F6C30300)      <1>     pop qword [int48Flag]    ;Return original value
   359                              <1> .exit:
   360 00001F66 9D                  <1>     popfq
   361                              <1>     return
    18                              <2> %%_ret:
    19 00001F67 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   362                              <1> 
   363                              <1> 
   364                              <1> vConCtrlCheck:
   365                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   366                              <1> ; the processing. 
   367                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   368                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   369                              <1> ;
   370                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   371                              <1> ;^S will pause screen processing until another key is processed by vCon input
   372                              <1> ;^P will toggle the printer echo feature of the vConsole
   373                              <1> ;
   374                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   375                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   376                              <1> ;
   377                              <1> ;Output: 
   378                              <1> ;   CF=CY : Error
   379                              <1> ;   CF=NC : ...
   380                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   381                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   382 00001F68 E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   383 00001F6D 53                  <1>     push rbx
   384 00001F6E 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   385 00001F70 E8BA000000          <1>     call getCharDevSFT
   386 00001F75 5B                  <1>     pop rbx
   387                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001F76 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   388 00001F78 B401                <1>     mov ah, 01  ;Non destructively read CON
   389 00001F7A E8D6FBFFFF          <1>     call mainCharIO
   390 00001F7F 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   391                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   392 00001F81 3C13                <1>     cmp al, DC3 ;^S ?
   393 00001F83 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   394 00001F85 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   395 00001F87 E8C9FBFFFF          <1>     call mainCharIO
   396 00001F8C E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   397                              <1> .checkPrintOrExit:
   398 00001F91 3C10                <1>     cmp al, DLE ;Do we have ^P?
   399 00001F93 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   400 00001F95 3C03                <1>     cmp al, ETX ;Do we have ^C?
   401 00001F97 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   402                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   403                              <1>     return 
    18                              <2> %%_ret:
    19 00001F99 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   404                              <1> .printToggle:
   405 00001F9A F615(31C30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   406 00001FA0 53                  <1>     push rbx
   407 00001FA1 BB04000000          <1>     mov ebx, 4  ;PRN handle
   408 00001FA6 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   409 00001FAB 5B                  <1>     pop rbx
   410                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001FAC 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   411 00001FAE 57                  <1>     push rdi
   412 00001FAF 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   413 00001FB2 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   414 00001FB8 741D                <1>     jz .notNet
   415 00001FBA 50                  <1>     push rax
   416 00001FBB B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   417 00001FC0 CD4F                <1>     int 4Fh
   418 00001FC2 58                  <1>     pop rax
   419 00001FC3 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   420                              <1>     ;If something went wrong, turn off echo
   421 00001FC5 C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   422 00001FCC 50                  <1>     push rax
   423 00001FCD B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   424 00001FD2 CD4F                <1>     int 4Fh
   425 00001FD4 58                  <1>     pop rax
   426 00001FD5 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   427                              <1> .notNet:
   428                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   429                              <1> ; 0Dh or 0Eh
   430 00001FD7 803D(31C30300)00    <1>     cmp byte [printEcho], 00
   431 00001FDE 7507                <1>     jnz .echoOn
   432 00001FE0 E84EFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   433 00001FE5 EB05                <1>     jmp short .printExit
   434                              <1> .echoOn:
   435 00001FE7 E83EFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   436                              <1> .printExit:
   437 00001FEC 5F                  <1>     pop rdi
   438                              <1>     return
    18                              <2> %%_ret:
    19 00001FED C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   439                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   440 00001FEE E852FFFFFF          <1>     call callInt48h
   441                              <1> .waitNextChar:   ;Here get next char
   442 00001FF3 B401                <1>     mov ah, 01h ;ND read
   443 00001FF5 E85BFBFFFF          <1>     call mainCharIO
   444 00001FFA 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   445                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   446 00001FFC 53                  <1>     push rbx
   447 00001FFD 31DB                <1>     xor ebx, ebx
   448 00001FFF E82B000000          <1>     call getCharDevSFT
   449 00002004 5B                  <1>     pop rbx
   450                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002005 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   451 00002007 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   452 00002009 E847FBFFFF          <1>     call mainCharIO
   453 0000200E 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   454 00002010 7514                <1>     jnz .checkBreak2
   455 00002012 803D(AFD90300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   456 00002019 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   457 0000201F C605(AFD90300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   458                              <1> .checkBreak2:
   459 00002026 3C03                <1>     cmp al, ETX
   460                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002028 75C3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   461 0000202A E994270000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   462                              <1> 
   463                              <1> 
   464                              <1> getCharDevSFT:
   465                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   466                              <1> ;Input: bx = zero extended handle number
   467                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   468                              <1> ;        CF=CY => al = Error code, abort operation
   469 0000202F F605(F5C30300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   470 00002036 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   471                              <1> .getSFT:
   472 00002038 57                  <1>     push rdi
   473 00002039 E814180000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   474 0000203E 4889FE              <1>     mov rsi, rdi
   475 00002041 5F                  <1>     pop rdi
   476                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 00002042 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   477                              <1> .swap:
   478                              <1> ;workingSFT is only set for CON calls
   479 00002043 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   480 00002049 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   481 0000204B 488B35(74C60300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   482 00002052 F8                  <1>     clc
   483                              <1>     return
    18                              <2> %%_ret:
    19 00002053 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   484                              <1> 
   485                              <1> ;------------------------
   486                              <1> ;   Utility functions   :
   487                              <1> ;------------------------
   488                              <1> printCaretASCII:
   489                              <1> ;Input: al = Char to print with a caret
   490                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   491                              <1> ;First check if the char should be careted, and then print normally if so
   492 00002054 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   493 00002056 0F8364FCFFFF        <1>     jae charOut_B.in
   494 0000205C 3C09                <1>     cmp al, TAB
   495 0000205E 0F845CFCFFFF        <1>     je charOut_B.in
   496 00002064 3C15                <1>     cmp al, NAK
   497 00002066 0F8454FCFFFF        <1>     je charOut_B.in
   498 0000206C 3C14                <1>     cmp al, DC4
   499 0000206E 0F844CFCFFFF        <1>     je charOut_B.in
   500 00002074 50                  <1>     push rax
   501 00002075 B05E                <1>     mov al, "^" ;Get caret in place
   502 00002077 E844FCFFFF          <1>     call charOut_B.in
   503 0000207C 58                  <1>     pop rax
   504 0000207D 0440                <1>     add al, "@" ;Turn into an ASCII Char
   505 0000207F E93CFCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   506                              <1> printCRLF:
   507 00002084 B00D                <1>     mov al, CR
   508 00002086 E835FCFFFF          <1>     call charOut_B.in
   509 0000208B B00A                <1>     mov al, LF
   510 0000208D E92EFCFFFF          <1>     jmp charOut_B.in
   511                              <1> 
   512                              <1> checkBreak:
   513                              <1> ;Reads bytes from CON if there are any bytes to read and 
   514                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   515 00002092 803D(6AC30300)01    <1>     cmp byte [inDOS], 1
   516                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002099 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   517                              <1> ;Returns in al the keystroke that is available IF one is available
   518                              <1> ; or al=0 if no keystroke available
   519 0000209B 53                  <1>     push rbx
   520 0000209C 56                  <1>     push rsi
   521 0000209D 488B35(4BC00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   522                              <1>     ;Place command code and a zero status word at the same time
   523 000020A4 C705(4EC40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   523 000020AC 0000                <1>
   524                              <1>     ;Place the packet size in the hdrlen field
   525 000020AE C605(4CC40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   526 000020B5 488D1D(4CC40300)    <1>     lea rbx, critReqHdr
   527 000020BC E86F270000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   528                              <1>     ;Check if the busy bit is set (No keystroke available)
   529 000020C1 66F705(4FC40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   529 000020C9 02                  <1>
   530 000020CA 7405                <1>     jz .charFound
   531                              <1> .exit:
   532 000020CC 30C0                <1>     xor al, al
   533 000020CE 5E                  <1>     pop rsi
   534 000020CF 5B                  <1>     pop rbx
   535                              <1>     return
    18                              <2> %%_ret:
    19 000020D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   536                              <1> .charFound:
   537                              <1> ;Keystroke available, proceed
   538 000020D1 8A05(59C40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   539 000020D7 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   540 000020D9 75F1                <1>     jne .exit   ;If not equal exit
   541                              <1> ;Now we pull the char out of the buffer
   542 000020DB C705(4EC40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   542 000020E3 0000                <1>
   543 000020E5 C605(4CC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   544                              <1>     ;Place pointers and number of chars
   545 000020EC C705(62C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   545 000020F4 0000                <1>
   546                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   547 000020F6 488D05(59C40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   548 000020FD 488905(5AC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   549 00002104 E827270000          <1>     call goDriver   ;RSI and RBX as before
   550 00002109 E9B5260000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   551                              <1> 
   552                              <1> vConSwapDriver:
   553                              <1> ;Sets up the vCon to use the alternative SFT pointer
   554 0000210E 57                  <1>     push rdi
   555 0000210F C605(F5C30300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   556 00002116 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   557 0000211D 48893D(74C60300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   558 00002124 5F                  <1>     pop rdi
   559                              <1>     return
    18                              <2> %%_ret:
    19 00002125 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> vConRetDriver:
   562                              <1> ;Returns the original driver (sets flag down)
   563 00002126 C605(F5C30300)00    <1>     mov byte [vConDrvSwp], 0
   564                              <1>     return
    18                              <2> %%_ret:
    19 0000212D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   565                              <1> 
   566                              <1> ;--------------------------------------------------
   567                              <1> ;      Main Keyboard Buffered Input Function      :
   568                              <1> ;--------------------------------------------------
   569                              <1> buffCharInput_BE:  ;ah = 0Ah
   570                              <1> ;Buffer pointer in rdx
   571                              <1> ; byte [rdx + 0], buffer length
   572                              <1> ; byte [rdx + 1], number of chars in buffer
   573                              <1> ; byte [rdx + 2], buffer start
   574                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   575                              <1> ;Register use
   576                              <1> ; dh = Char offset in internal buffer
   577                              <1> ; dl = Buffer length
   578                              <1> ; bh = Char offset in user buffer
   579                              <1> ; bl = Number of chars already in the buffer
   580                              <1> ; rdi = Internal buffer
   581                              <1> ; rsi = User buffer
   582 0000212E 4889D6              <1>     mov rsi, rdx
   583 00002131 66AD                <1>     lodsw   ;Get buffer metadata in ax
   584 00002133 84C0                <1>     test al, al
   585                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002135 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   586 00002137 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   587 0000213A 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   588 0000213C 7606                <1>     jbe .avoidcheck
   589 0000213E 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   590 00002142 7402                <1>     je .functionKeyOk
   591                              <1> .avoidcheck:
   592 00002144 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   593                              <1> .functionKeyOk:
   594 00002146 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   595 00002149 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   596                              <1> .breakEP:
   597 0000214B 8A05(2EC20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   598 00002151 8805(2FC20300)      <1>     mov byte [vConCurCnt], al
   599 00002157 56                  <1>     push rsi    ;Push user buffer address
   600 00002158 488D3D(30C20300)    <1>     lea rdi, vConBuffer
   601 0000215F C605(5DC60300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   602                              <1> .mainLoop:
   603 00002166 E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   604 0000216B 3C0A                <1>     cmp al, LF
   605 0000216D 7505                <1>     jne .checkControlChars
   606                              <1> .mainLoop2:
   607 0000216F E8A8FCFFFF          <1>     call charIn_B
   608                              <1> .checkControlChars:
   609 00002174 3C06                <1>     cmp al, ACK
   610 00002176 74F7                <1>     je .mainLoop2   ;Get another char
   611 00002178 3A05E3DEFFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   612 0000217E 0F8426010000        <1>     je .escape
   613 00002184 3C7F                <1>     cmp al, DEL
   614 00002186 0F8489000000        <1>     je .delete
   615 0000218C 3C08                <1>     cmp al, BSP
   616 0000218E 0F8481000000        <1>     je .delete
   617 00002194 3C17                <1>     cmp al, ETB
   618                              <1>     ;Add space for patched jump instructions
   619 00002196 9090909090          <1>     db 5 dup (90h)  ;NOP
   620 0000219B 3C15                <1>     cmp al, NAK
   621 0000219D 9090909090          <1>     db 5 dup (90h)
   622 000021A2 3C0D                <1>     cmp al, CR
   623 000021A4 744C                <1>     je .carriageReturn
   624 000021A6 3C0A                <1>     cmp al, LF
   625 000021A8 7461                <1>     je .lineFeed
   626 000021AA 3A05B2DEFFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   627 000021B0 7429                <1>     je .break
   628                              <1> .checkIfCanInsert:
   629 000021B2 38D6                <1>     cmp dh, dl
   630 000021B4 731C                <1>     jae .bufOflw
   631 000021B6 AA                  <1>     stosb   ;Store the byte and increment rdi!
   632 000021B7 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   633 000021B9 E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   634 000021BE 803D(5DC60300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   635 000021C5 75A8                <1>     jne .mainLoop2
   636                              <1>     ;IF not in insert mode, we fall here
   637                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   638                              <1>     ; or insert chars if needed.
   639 000021C7 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   640 000021C9 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   641 000021CB 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   642 000021CE FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   643 000021D0 EB9D                <1>     jmp short .mainLoop2
   644                              <1> .bufOflw:
   645                              <1> ;Buffer overflow
   646 000021D2 B007                <1>     mov al, BEL ;Sound the bell
   647 000021D4 E8E7FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   648 000021D9 EB94                <1>     jmp short .mainLoop2
   649                              <1> .break:
   650                              <1> ;Break, Place a "\", and do a CRLF
   651 000021DB B05C                <1>     mov al, "\"
   652 000021DD E8DEFAFFFF          <1>     call charOut_B.in
   653 000021E2 5E                  <1>     pop rsi ;Realign stack
   654                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   655 000021E3 E89CFEFFFF          <1>     call printCRLF
   656                              <1>     ;Align to next tabstop
   657 000021E8 E85AFBFFFF          <1>     call charOut_B.tab
   658 000021ED E959FFFFFF          <1>     jmp .breakEP
   659                              <1> .carriageReturn:
   660 000021F2 AA                  <1>     stosb
   661 000021F3 E8C8FAFFFF          <1>     call charOut_B.in
   662 000021F8 5F                  <1>     pop rdi ;User buffer address was pushed 
   663 000021F9 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   664 000021FC FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   665                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   666 000021FE 488D35(30C20300)    <1>     lea rsi, vConBuffer
   667 00002205 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   668 00002208 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   669                              <1>     return
    18                              <2> %%_ret:
    19 0000220A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   670                              <1> .lineFeed:
   671 0000220B E874FEFFFF          <1>     call printCRLF
   672 00002210 E95AFFFFFF          <1>     jmp .mainLoop2
   673                              <1> .delete:
   674 00002215 E805000000          <1>     call .removeChar
   675 0000221A E950FFFFFF          <1>     jmp .mainLoop2
   676                              <1> .removeChar:
   677 0000221F 84F6                <1>     test dh, dh ;Is char count 0?
   678 00002221 741C                <1>     jz .normalChar   ;If so, skip going back!
   679 00002223 E868000000          <1>     call .vConErase
   680 00002228 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   681 0000222A 3C20                <1>     cmp al, SPC
   682 0000222C 7311                <1>     jae .normalChar
   683 0000222E 3C09                <1>     cmp al, TAB
   684 00002230 7420                <1>     je .eraTab
   685 00002232 3C15                <1>     cmp al, NAK
   686 00002234 7409                <1>     je .normalChar
   687 00002236 3C14                <1>     cmp al, DC4
   688 00002238 7405                <1>     je .normalChar
   689 0000223A E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   690                              <1> .normalChar:
   691 0000223F 803D(5DC60300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   692                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002246 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   693 00002248 84FF                <1>     test bh, bh ;Beginning of user buffer?
   694                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000224A 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   695 0000224C 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   696 0000224F FECF                <1>     dec bh
   697                              <1>     return
    18                              <2> %%_ret:
    19 00002251 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   698                              <1> .eraTab:
   699                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   700                              <1> ; up to a tab stop worth of space chars printed
   701 00002252 57                  <1>     push rdi
   702 00002253 48FFCF              <1>     dec rdi
   703 00002256 FD                  <1>     std ;Go backwards
   704 00002257 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   705 0000225A B020                <1>     mov al, SPC
   706 0000225C 53                  <1>     push rbx
   707 0000225D BB07000000          <1>     mov ebx, 7
   708 00002262 67E30D              <1>     jecxz .onTabstop
   709                              <1> .scanString:
   710 00002265 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   711 00002266 7608                <1>     jbe .notChar    ;No, skip handling
   712 00002268 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   713 0000226C 740A                <1>     je .tabChar
   714 0000226E FECB                <1>     dec bl
   715                              <1> .notChar:
   716 00002270 E2F3                <1>     loop .scanString
   717                              <1> .onTabstop:
   718 00002272 2A1D(2FC20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   719                              <1> .tabChar:
   720 00002278 28F3                <1>     sub bl, dh  ;Same on tabstop
   721 0000227A 00D9                <1>     add cl, bl
   722 0000227C 80E107              <1>     and cl, 7
   723 0000227F 5B                  <1>     pop rbx
   724 00002280 5F                  <1>     pop rdi
   725 00002281 FC                  <1>     cld
   726 00002282 74BB                <1>     jz .normalChar
   727                              <1>     ;Now erase all the spaces placed on the vCon
   728                              <1> .vConDelTab:
   729 00002284 E80C000000          <1>     call .vConEraseNoDec
   730 00002289 E2F9                <1>     loop .vConDelTab
   731 0000228B E9AFFFFFFF          <1>     jmp .normalChar
   732                              <1> .vConErase:
   733                              <1> ;Erase the char on the vCon
   734                              <1> ;Return through the output function
   735 00002290 48FFCF              <1>     dec rdi ;Go back a space in the 
   736 00002293 FECE                <1>     dec dh  ;Decrement char count in the buffer
   737                              <1> .vConEraseNoDec:
   738 00002295 B008                <1>     mov al, BSP ;Move cursor back
   739 00002297 E824FAFFFF          <1>     call charOut_B.in
   740 0000229C B020                <1>     mov al, SPC ;Replace with a space
   741 0000229E E81DFAFFFF          <1>     call charOut_B.in
   742 000022A3 B008                <1>     mov al, BSP ;Move cursor back again
   743 000022A5 E916FAFFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   744                              <1> .escape:
   745                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   746                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   747                              <1> ; including the function keys.
   748 000022AA FF25A9DDFFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   749                              <1> .f2:
   750 000022B0 E846000000          <1>     call .fCommon2
   751 000022B5 EB0C                <1>     jmp short .fCommon
   752                              <1> .f3:
   753 000022B7 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   754 000022BA 28F9                <1>     sub cl, bh  ;Sub our current position
   755 000022BC EB05                <1>     jmp short .fCommon
   756                              <1> .f1:
   757 000022BE B901000000          <1>     mov ecx, 1  ;Get one char
   758                              <1> .fCommon:
   759 000022C3 C605(5DC60300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   760 000022CA 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   761 000022CC 0F849DFEFFFF        <1>     je .mainLoop2
   762 000022D2 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   763 000022D4 0F8495FEFFFF        <1>     je .mainLoop2
   764                              <1>     ;Else, copy byte by byte, and retain char in al
   765 000022DA AC                  <1>     lodsb
   766 000022DB AA                  <1>     stosb
   767 000022DC E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   768 000022E1 FEC7                <1>     inc bh
   769 000022E3 FEC6                <1>     inc dh
   770 000022E5 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   771 000022E7 E983FEFFFF          <1>     jmp .mainLoop2
   772                              <1> .f4:
   773 000022EC E80A000000          <1>     call .fCommon2
   774 000022F1 4801CE              <1>     add rsi, rcx
   775 000022F4 00CF                <1>     add bh, cl
   776 000022F6 E974FEFFFF          <1>     jmp .mainLoop2
   777                              <1> .fCommon2:
   778 000022FB E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   779 00002300 3A055BDDFFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   780 00002306 750B                <1>     jne .fnotEscape
   781                              <1>     ;Get another char if they typed escape and force it in the buffer
   782                              <1>     ; Do not return to caller
   783 00002308 E80FFBFFFF          <1>     call charIn_B
   784                              <1> .fforceExit:
   785 0000230D 59                  <1>     pop rcx ;Get original return address from stack
   786 0000230E E95CFEFFFF          <1>     jmp .mainLoop2
   787                              <1> .fnotEscape:
   788 00002313 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   789 00002316 28F9                <1>     sub cl, bh
   790 00002318 74F3                <1>     jz .fforceExit
   791 0000231A FFC9                <1>     dec ecx
   792 0000231C 74EF                <1>     jz .fforceExit
   793 0000231E 57                  <1>     push rdi
   794 0000231F 4889F7              <1>     mov rdi, rsi
   795 00002322 48FFC7              <1>     inc rdi
   796 00002325 F2AE                <1>     repne scasb ;Search for the char to start printing from
   797 00002327 5F                  <1>     pop rdi
   798 00002328 75E3                <1>     jne .fforceExit ;If char not found, return
   799 0000232A F6D1                <1>     not cl
   800 0000232C 00D9                <1>     add cl, bl
   801 0000232E 28F9                <1>     sub cl, bh
   802                              <1>     return
    18                              <2> %%_ret:
    19 00002330 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   803                              <1> .f5:
   804 00002331 B040                <1>     mov al, "@"
   805 00002333 E888F9FFFF          <1>     call charOut_B.in   ;Print the char
   806 00002338 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   807 00002339 57                  <1>     push rdi
   808 0000233A E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   809 0000233F 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   810 00002340 88F3                <1>     mov bl, dh
   811 00002342 E99CFEFFFF          <1>     jmp .breakAlt
   812                              <1> .f6:
   813                              <1> ;If the user wants to insert a EOF, they can use F6
   814 00002347 B01A                <1>     mov al, EOF
   815 00002349 E964FEFFFF          <1>     jmp .checkIfCanInsert
   816                              <1> .f7:
   817                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   818 0000234E 8A050DDDFFFF        <1>     mov al, byte [extESC]
   819 00002354 E959FEFFFF          <1>     jmp .checkIfCanInsert
   820                              <1> .toggleIns:
   821 00002359 F615(5DC60300)      <1>     not byte [vConInsert]   ;Toggle
   822                              <1>     return
    18                              <2> %%_ret:
    19 0000235F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   823                              <1> .eDel:
   824 00002360 38DF                <1>     cmp bh, bl
   825 00002362 0F8407FEFFFF        <1>     je .mainLoop2
   826 00002368 FEC7                <1>     inc bh
   827 0000236A 48FFC6              <1>     inc rsi
   828 0000236D E9FDFDFFFF          <1>     jmp .mainLoop2
   829                              <1> 
   830                              <1> editKeys:
   831                              <1> ;Our Default Extended keys handler
   832 00002372 E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   833 00002377 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   834 0000237C 57                  <1>     push rdi    ;Preserve rdi
   835 0000237D 488D3DDFDCFFFF      <1>     lea rdi, extKeyTbl
   836 00002384 57                  <1>     push rdi
   837                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   838                              <1>     ; offset of function from extKeyTbl
   839                              <1> .lp:
   840 00002385 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   841 00002386 7411                <1>     je .charFound
   842 00002388 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   843 0000238A 0F84DFFDFFFF        <1>     jz buffCharInput_BE.mainLoop2
   844 00002390 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   845 00002397 EBEC                <1>     jmp short .lp
   846                              <1> .charFound:
   847 00002399 59                  <1>     pop rcx ;Pop back the effective address of the table
   848 0000239A 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   849 0000239E 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   850 000023A1 5F                  <1>     pop rdi
   851 000023A2 FFE1                <1>     jmp rcx
    28                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    29                              <1> ;Major kernel date time functions and subroutines
    30                              <1> 
    31                              <1> getDate:           ;ah = 2Ah
    32 000023A4 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
    33 000023A9 E87B280000          <1>     call getUserRegs
    34 000023AE 668B15(EFC30300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
    35                              <1> ;    mov dh, byte [monthOfYear]
    36 000023B5 0FB60D(F1C30300)    <1>     movzx ecx, byte [years]
    37 000023BC 8A05(F4C30300)      <1>     mov al, byte [dayOfWeek]
    38 000023C2 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    39 000023C6 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    40                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 000023CA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    41                              <1> setDate:           ;ah = 2Bh
    42                              <1> ;	CX = year (1980-2099)
    43                              <1> ;   DH = month (1-12)
    44                              <1> ;	DL = day (1-31)
    45 000023CB E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    46                              <1>     return
    18                              <2> %%_ret:
    19 000023D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    47                              <1> getTime:           ;ah = 2Ch
    48 000023D1 E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    49 000023D6 E84E280000          <1>     call getUserRegs
    50 000023DB 668B0D(7AC40300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.hours]
    51 000023E2 668B15(7BC40300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    52 000023E9 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    53 000023ED 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    54                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 000023F1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    55                              <1> setTime:           ;ah = 2Dh
    56                              <1> ;   CH = hour (0-23)
    57                              <1> ;	CL = minutes (0-59)
    58                              <1> ;	DH = seconds (0-59)
    59                              <1> ;	DL = hundredths (0-99)
    60 000023F2 80FD17              <1>     cmp ch, 23
    61 000023F5 7749                <1>     ja .exitBad
    62 000023F7 80F93B              <1>     cmp cl, 59
    63 000023FA 7744                <1>     ja .exitBad
    64 000023FC 80FE3B              <1>     cmp dh, 59
    65 000023FF 773F                <1>     ja .exitBad
    66 00002401 80FA63              <1>     cmp dl, 99
    67 00002404 773A                <1>     ja .exitBad
    68                              <1> ;Now we read date (updating internal count if necessary)
    69 00002406 E817010000          <1>     call readDateTimeRecord
    70 0000240B 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    71 00002412 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    72 00002419 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    73 0000241C 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    74 00002420 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    75 00002424 B906000000          <1>     mov ecx, 6
    76 00002429 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    77 0000242C E898260000          <1>     call primReqWriteSetup   ;rbx now points to request header
    78 00002431 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    79 00002438 E8F3230000          <1>     call goDriver
    80 0000243D 30C0                <1>     xor al, al
    81                              <1>     return
    18                              <2> %%_ret:
    19 0000243F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    82                              <1> .exitBad:
    83 00002440 B0FF                <1>     mov al, -1
    84                              <1>     return
    18                              <2> %%_ret:
    19 00002442 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    85                              <1> ;------------------------
    86                              <1> ;   Utility functions   :
    87                              <1> ;------------------------
    88                              <1> writeDate:
    89 00002443 6681F97800          <1>     cmp cx, 120
    90 00002448 0F83D1000000        <1>     jae .exitBad
    91 0000244E 80FE0C              <1>     cmp dh, 12
    92 00002451 0F87C8000000        <1>     ja .exitBad
    93 00002457 80FA1F              <1>     cmp dl, 31
    94 0000245A 0F87BF000000        <1>     ja .exitBad
    95 00002460 668915(EFC30300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    96                              <1>     ;mov byte [monthOfYear], dh
    97 00002467 880D(F1C30300)      <1>     mov byte [years], cl    ;Save the years count
    98 0000246D E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    99 00002472 88CD                <1>     mov ch, cl ;Get years count in ch
   100 00002474 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
   101 00002477 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
   102 0000247A 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
   103 0000247D BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
   104 00002482 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
   105                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
   106 00002484 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
   107 00002487 67E316              <1>     jecxz .addDay    ;Skip adding years
   108 0000248A 056E010000          <1>     add eax, 366    ;First add for a leap year
   109                              <1> .addYears:
   110 0000248F FFC9                <1>     dec ecx
   111 00002491 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
   112 00002494 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   113 00002499 EBF4                <1>     jmp short .addYears
   114                              <1> .addLeap:
   115 0000249B 056E010000          <1>     add eax, 366    ;Add the days in the leap year
   116                              <1> .addDay:
   117 000024A0 89C2                <1>     mov edx, eax    ;Save this number in edx
   118                              <1>     ;Now to add day offset
   119 000024A2 0FB60D(F0C30300)    <1>     movzx ecx, byte [monthOfYear]
   120 000024A9 488D35D4DBFFFF      <1>     lea rsi, monthsTbl
   121                              <1> .addDaysInMonth:
   122 000024B0 FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   123 000024B2 67E308              <1>     jecxz .addMonthOffset
   124 000024B5 AC                  <1>     lodsb   ;Get the number of days in the month in al
   125 000024B6 0FB6C0              <1>     movzx eax, al
   126 000024B9 01C2                <1>     add edx, eax
   127 000024BB EBF3                <1>     jmp short .addDaysInMonth
   128                              <1> .addMonthOffset:
   129 000024BD 0FB60D(EFC30300)    <1>     movzx ecx, byte [dayOfMonth]
   130 000024C4 FFC9                <1>     dec ecx
   131 000024C6 01CA                <1>     add edx, ecx    ;Add month offset
   132                              <1>     ;edx has the number of days since 01/01/1980
   133 000024C8 668915(F2C30300)    <1>     mov word [daysOffset], dx   ;Store!
   134                              <1> ;Now read and then write CLOCKrecrd
   135 000024CF 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   136 000024D6 B906000000          <1>     mov ecx, 6
   137 000024DB 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   138 000024DE E8F1250000          <1>     call primReqReadSetup   ;rbx now points to request header
   139 000024E3 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   140 000024EA E841230000          <1>     call goDriver
   141                              <1> ;Now we change daycount and write it back
   142 000024EF 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   143 000024F6 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   144 000024FD 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   145 00002500 B906000000          <1>     mov ecx, 6
   146 00002505 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   147 00002508 E8BC250000          <1>     call primReqWriteSetup   ;rbx now points to request header
   148 0000250D 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   149 00002514 E817230000          <1>     call goDriver
   150 00002519 E8AE000000          <1>     call setDayofWeek
   151                              <1>     return
    18                              <2> %%_ret:
    19 0000251E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   152                              <1> .exitBad:
   153 0000251F B0FF                <1>     mov al, -1
   154                              <1>     return
    18                              <2> %%_ret:
    19 00002521 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   155                              <1> 
   156                              <1> readDateTimeRecord:
   157                              <1> ;Will read the clock using the primary request header
   158                              <1> ;Preserves all regs except eax and flags
   159 00002522 53                  <1>     push rbx
   160 00002523 51                  <1>     push rcx
   161 00002524 52                  <1>     push rdx
   162 00002525 56                  <1>     push rsi
   163 00002526 55                  <1>     push rbp
   164                              <1> 
   165 00002527 66C705(B0D90300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   165 0000252F 00                  <1>
   166 00002530 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   167 00002537 B906000000          <1>     mov ecx, 6
   168 0000253C 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   169                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   170                              <1> ; rbx = Data storage buffer ptr
   171                              <1> ; ecx = Number of sectors to transfer
   172                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   173 0000253F E890250000          <1>     call primReqReadSetup   ;rbx now points to request header
   174 00002544 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   175 0000254B E8E0220000          <1>     call goDriver
   176 00002550 0FB705(77C40300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   177                              <1> ;Here we have:  ax = Days since 1/1/1980
   178                              <1> ;Updates the internal date fields
   179                              <1> ;Internal time fields are in the clock record
   180                              <1> ;So now we check if the number of days since 1980 are the same.
   181                              <1> ;If so, we can skip updating.
   182 00002557 663B05(F2C30300)    <1>     cmp ax, word [daysOffset]
   183 0000255E 7466                <1>     je .exit    ;Return if equal
   184 00002560 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   185 00002565 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   186 00002567 668905(F2C30300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   187                              <1>     ;Now want to update years, month and day fields
   188                              <1>     ;ax has the number of days since 01/01/1980
   189                              <1>     ;Get days in a 4 year period
   190 0000256E BBB5050000          <1>     mov ebx, 365*4 + 1
   191 00002573 31D2                <1>     xor edx, edx
   192 00002575 89D1                <1>     mov ecx, edx  ;Zero ecx
   193 00002577 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   194                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   195                              <1>     ;edx has offset into current 4 year bunch
   196 00002579 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   197 0000257E 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   198 00002580 7210                <1>     jb .foundBunch
   199 00002582 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   200 00002584 FFC1                <1>     inc ecx
   201 00002586 FFCB                <1>     dec ebx ;Number of days in a normal year
   202                              <1> .findBunch:
   203 00002588 39DA                <1>     cmp edx, ebx
   204 0000258A 7206                <1>     jb .foundBunch
   205 0000258C 29DA                <1>     sub edx, ebx
   206 0000258E FFC1                <1>     inc ecx
   207 00002590 EBF6                <1>     jmp short .findBunch
   208                              <1> .foundBunch:
   209                              <1>     ;If ecx = 0, february has 29 days!
   210                              <1>     ;eax has number of four year bunches elapsed since 1980
   211 00002592 C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   212 00002595 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   213                              <1>     ;ecx now has the number of years since 1980
   214 00002597 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   215                              <1> ;edx has number of days into the year we are in
   216                              <1> ;eax has number of days in Feb for this year
   217 0000259C 488D35E1DAFFFF      <1>     lea rsi, monthsTbl
   218 000025A3 31C9                <1>     xor ecx, ecx    ;Use as month counter
   219                              <1> .monthSearch:
   220 000025A5 FFC1                <1>     inc ecx ;Start from 1
   221 000025A7 AC                  <1>     lodsb   ;Get value in al and inc rsi
   222 000025A8 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   223 000025AB 39C2                <1>     cmp edx, eax
   224 000025AD 7204                <1>     jb .monthFound
   225 000025AF 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   226 000025B1 EBF2                <1>     jmp short .monthSearch
   227                              <1> .monthFound:
   228                              <1>     ;cl has the month (01h-0Ch)
   229                              <1>     ;dl has the day of the month - 1
   230 000025B3 FFC2                <1>     inc edx
   231 000025B5 880D(F0C30300)      <1>     mov byte [monthOfYear], cl
   232 000025BB 8815(EFC30300)      <1>     mov byte [dayOfMonth], dl
   233 000025C1 E806000000          <1>     call setDayofWeek
   234                              <1> .exit:
   235 000025C6 5D                  <1>     pop rbp
   236 000025C7 5E                  <1>     pop rsi
   237 000025C8 5A                  <1>     pop rdx
   238 000025C9 59                  <1>     pop rcx
   239 000025CA 5B                  <1>     pop rbx
   240                              <1>     return  ;Return with ZF is date set, or same day
    18                              <2> %%_ret:
    19 000025CB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   241                              <1> 
   242                              <1> setDayofWeek:
   243                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   244 000025CC 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   245 000025D3 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   246                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   247 000025D8 31D2                <1>     xor edx, edx
   248 000025DA B907000000          <1>     mov ecx, 7   
   249 000025DF F7F1                <1>     div ecx  ;Get remainder in dl
   250 000025E1 8815(F4C30300)      <1>     mov byte [dayOfWeek], dl
   251                              <1> ;Set ZF to indicate all ok
   252 000025E7 31C0                <1>     xor eax, eax
   253                              <1>     return
    18                              <2> %%_ret:
    19 000025E9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   254                              <1> 
   255                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   256                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   257                              <1> ;Input: cl = Year - 1980
   258                              <1> ;Output: al = Number of days in February
   259 000025EA 880D(F1C30300)      <1>     mov byte [years], cl    ;Save this figure
   260 000025F0 F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   261 000025F3 51                  <1>     push rcx
   262 000025F4 57                  <1>     push rdi
   263 000025F5 B81C000000          <1>     mov eax, 28  ;Usual days in february
   264 000025FA B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   265 000025FF 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   266 00002602 488D3D7CDAFFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   267 00002609 AA                  <1>     stosb   ;Store the word in rdi
   268 0000260A 5F                  <1>     pop rdi
   269 0000260B 59                  <1>     pop rcx
   270                              <1>     return
    18                              <2> %%_ret:
    19 0000260C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   271                              <1> 
   272                              <1> getDirDTwords:
   273                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   274                              <1> ; High word of eax = Date
   275                              <1> ; Low word of eax = Time
   276                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   277                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   278                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   279                              <1> 
   280                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   281                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   282                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   283                              <1> ;Preserves all registers except eax
   284 0000260D 53                  <1>     push rbx
   285 0000260E 0FB61D(7CC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   286 00002615 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   287 00002617 89D8                <1>     mov eax, ebx
   288 00002619 0FB61D(79C40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   289 00002620 C1E305              <1>     shl ebx, 5
   290 00002623 09D8                <1>     or eax, ebx
   291 00002625 0FB61D(7AC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   292 0000262C C1E30B              <1>     shl ebx, 11
   293 0000262F 09D8                <1>     or eax, ebx
   294 00002631 0FB61D(EFC30300)    <1>     movzx ebx, byte [dayOfMonth]
   295 00002638 C1E310              <1>     shl ebx, 16
   296 0000263B 09D8                <1>     or eax, ebx
   297 0000263D 0FB61D(F0C30300)    <1>     movzx ebx, byte [monthOfYear]
   298 00002644 C1E315              <1>     shl ebx, 21
   299 00002647 09D8                <1>     or eax, ebx
   300 00002649 0FB61D(F1C30300)    <1>     movzx ebx, byte [years]
   301 00002650 C1E319              <1>     shl ebx, 25
   302 00002653 09D8                <1>     or eax, ebx
   303 00002655 5B                  <1>     pop rbx
   304                              <1>     return
    18                              <2> %%_ret:
    19 00002656 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   305                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   306                              <1> ;Returns edx = time
   307                              <1> ;        eax = date
   308                              <1> ; Formally ax and dx but we clear the upper words
   309 00002657 E8C6FEFFFF          <1>     call readDateTimeRecord
   310 0000265C E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   311 00002661 31D2                <1>     xor edx, edx
   312 00002663 6689C2              <1>     mov dx, ax  ;Save time
   313 00002666 C1E810              <1>     shr eax, 10h    ;Get date into rax
   314                              <1>     return
    18                              <2> %%_ret:
    19 00002669 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    29                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    30                              <1> openFileFCB:       ;ah = 0Fh
    31                              <1> closeFileFCB:      ;ah = 10h
    32                              <1> findFirstFileFCB:  ;ah = 11h
    33                              <1> findNextFileFCB:   ;ah = 12h
    34                              <1> deleteFileFCB:     ;ah = 13h
    35                              <1> sequentialReadFCB: ;ah = 14h
    36                              <1> sequentialWriteFCB:;ah = 15h
    37                              <1> createFileFCB:     ;ah = 16h
    38                              <1> renameFileFCB:     ;ah = 17h
    39 0000266A C3                  <1>     ret
    40                              <1> setDTA:            ;ah = 1Ah
    41                              <1> ;Called with:
    42                              <1> ;   rdx = Pointer to the new default DTA
    43 0000266B 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
    44 00002672 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    45 00002676 488915(79C30300)    <1>     mov qword [currentDTA], rdx
    46 0000267D C3                  <1>     ret
    47                              <1> randomReadFCB:     ;ah = 21h
    48                              <1> randomWriteFCB:    ;ah = 22h
    49                              <1> getFileSizeFCB:    ;ah = 23h
    50                              <1> setRelRecordFCB:   ;ah = 24h
    51                              <1> randBlockReadFCB:  ;ah = 27h
    52                              <1> randBlockWriteFCB: ;ah = 28h
    53                              <1> parseFilenameFCB:  ;ah = 29h
    54 0000267E C3                  <1>     ret
    55                              <1> getDTA:            ;ah = 2Fh
    56 0000267F 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
    57 00002686 488B1D(79C30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    58 0000268D 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    59 00002691 C3                  <1>     ret
    30                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    31                              <1> ;-----------------------------------:
    32                              <1> ;    File Handle Kernel routines    :
    33                              <1> ;-----------------------------------:
    34                              <1> 
    35                              <1> createFileHdl:     ;ah = 3Ch, handle function
    36                              <1> ;Input: cx = File attributes (same as search attributes for find first)
    37                              <1> ;       rdx = Ptr to ASCIZ filename to create
    38                              <1> ;Output: CF=CY => ax = File handle
    39                              <1> ;        CF=NC => al = Error code
    40 00002692 51                  <1>     push rcx    ;Save file attributes on stack
    41 00002693 488D0D31060000      <1>     lea rcx, createMain
    42 0000269A C605(56C60300)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
    43 000026A1 EB1D                <1>     jmp short openFileHdl.openCommon
    44                              <1> openFileHdl:       ;ah = 3Dh, handle function
    45                              <1> ;Input: al = Open mode, to open file with
    46                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    47                              <1> ;If called from 5D00h, cl = File attributes too
    48                              <1> ;Output: CF=CY => ax = File handle
    49                              <1> ;        CF=NC => al = Error code
    50 000026A3 BB16000000          <1>     mov ebx, dirInclusive
    51 000026A8 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
    52 000026AF 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    53 000026B2 880D(56C60300)      <1>     mov byte [searchAttr], cl
    54 000026B8 488D0D84050000      <1>     lea rcx, openMain  
    55 000026BF 50                  <1>     push rax    ;Save open mode on stack
    56                              <1> .openCommon:
    57 000026C0 E886290000          <1>     call dosCrit1Enter
    58 000026C5 E8A6100000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    59 000026CA E886290000          <1>     call dosCrit1Exit
    60 000026CF 0F82A8000000        <1>     jc .exitBad
    61                              <1>     ;Now save variables
    62 000026D5 E8CF0F0000          <1>     call setCurrentSFT
    63 000026DA 66891D(8CC60300)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    64 000026E1 E83C110000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    65 000026E6 0F8291000000        <1>     jc .exitBad
    66 000026EC 66891D(8EC60300)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    67 000026F3 48893D(7CC60300)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    68 000026FA 0FB71D(8CC60300)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    69 00002701 881F                <1>     mov byte [rdi], bl  ;And open the file
    70                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    71 00002703 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    72 00002706 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    73 0000270D 51                  <1>     push rcx    ;Save the procedure to call on stack
    74 0000270E E821ECFFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    75 00002713 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    76 00002714 488D0528050000      <1>     lea rax, openMain   ;Get EA for open procedure
    77 0000271B 488B35(84C60300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    78 00002722 7318                <1>     jnc .proceedCall
    79                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good.
    80                              <1> ;If CF=CY => Path doesnt all exist:
    81                              <1> ;      If parDirExists = -1 => For Open, Bad.  For Create, Good. 
    82                              <1> ;Now we check if we are creating or opening.
    83 00002724 4839C3              <1>     cmp rbx, rax
    84 00002727 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    85 00002729 F605(5FC60300)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    86 00002730 750A                <1>     jnz .proceedCall    ;If so, proceed.
    87                              <1> .badPathspec:
    88 00002732 B802000000          <1>     mov eax, errFnf
    89 00002737 E941000000          <1>     jmp .exitBad    ;Need to deallocate the SFT before returning
    90                              <1> .proceedCall:
    91                              <1> ;If the pathspec exists, recall that for create, we truncate.
    92 0000273C 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    93 0000273E 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    94 00002741 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    95 00002742 750B                <1>     jne .callProc   ;Jump if we are creating
    96                              <1>     ;al means openmode here
    97 00002744 A880                <1>     test al, 80h    ;No Inherit bit set?
    98 00002746 7407                <1>     jz .callProc
    99 00002748 247F                <1>     and al, 7Fh     ;Clear this bit
   100 0000274A B900100000          <1>     mov ecx, devNoInherit
   101                              <1> .callProc:
   102 0000274F 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
   103 00002755 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
   104 0000275B 51                  <1>     push rcx    ;Save the device word 
   105 0000275C FFD3                <1>     call rbx    ;Enter with open mode in 
   106 0000275E 59                  <1>     pop rcx
   107 0000275F 488B35(84C60300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
   108 00002766 7225                <1>     jc .exitBad2
   109 00002768 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
   110 0000276D 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   111 00002771 0FB705(8EC60300)    <1>     movzx eax, word [currentHdl]
   112                              <1>     ;SHARE HOOK, DOS DS:[008Ch]
   113 00002778 E9FF280000          <1>     jmp extGoodExit ;Save ax and return OK
   114                              <1> .exitBad:
   115 0000277D FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
   116 0000277E 5B                  <1>     pop rbx ;Pop the word from the stack
   117 0000277F 66C705(8CC60300)FF- <1>     mov word [currentNdx], -1
   117 00002787 FF                  <1>
   118 00002788 E9FD280000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   119                              <1> .exitBad2:
   120                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   121 0000278D 488B35(7CC60300)    <1>     mov rsi, qword [curHdlPtr]
   122 00002794 C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   123 00002797 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
   124 0000279E 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   125 000027A3 66C705(8CC60300)FF- <1>     mov word [currentNdx], -1
   125 000027AB FF                  <1>
   126 000027AC E9D9280000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   127                              <1> 
   128                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   129                              <1> ;Input: bx = file handle to close
   130 000027B1 E882100000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   131 000027B6 0F82CE280000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   132 000027BC E8E80E0000          <1>     call setCurrentSFT  ;Set this as the current SFT
   133                              <1>     ;Check count to see if we need to check share mode
   134 000027C1 31C0                <1>     xor eax, eax    ;Preset ax to 0
   135 000027C3 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared, no need for share check
   136 000027C8 7406                <1>     je .skipShareCheck
   137                              <1>     ;Now check sharing mode
   138 000027CA 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   139 000027CE 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   140                              <1> .skipShareCheck:
   141 000027D0 50                  <1>     push rax    ;Save the share mode on stack
   142 000027D1 E84D070000          <1>     call closeMain  ;Call close main!
   143 000027D6 58                  <1>     pop rax 
   144 000027D7 0F82AD280000        <1>     jc extErrExit   ;If an error, exit through error exit
   145 000027DD 3C70                <1>     cmp al, netFCBShare ;Do NetFCB check (only if file opened more than once)
   146 000027DF 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   147 000027E1 E81E100000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   148 000027E6 C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   149                              <1> .exitOk:
   150 000027E9 31C0                <1>     xor eax, eax    ;Return value
   151 000027EB E98C280000          <1>     jmp extGoodExit
   152                              <1> 
   153                              <1> readFileHdl:       ;ah = 3Fh, handle function
   154 000027F0 488D359E070000      <1>     lea rsi, readBytes
   155                              <1> .common:
   156 000027F7 E83C100000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   157 000027FC 0F8288280000        <1>     jc extErrExit   ;Error code in al and exit
   158 00002802 E8A20E0000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   159 00002807 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   160 00002809 FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   161 0000280F 488915(79C30300)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   162 00002816 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   163 00002818 8F05(79C30300)      <1>     pop qword [currentDTA]
   164 0000281E 0F8266280000        <1>     jc extErrExit   ;Error code in al and exit
   165 00002824 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   166 00002826 E948280000          <1>     jmp extGoodExit2    ;and exit!
   167                              <1> 
   168                              <1> writeFileHdl:      ;ah = 40h, handle function
   169 0000282B 488D35430A0000      <1>     lea rsi, writeBytes
   170 00002832 E9C0FFFFFF          <1>     jmp readFileHdl.common
   171                              <1> 
   172                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   173                              <1> ;Here don't allow malformed chars unless it is a network CDS
   174 00002837 BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   175 0000283C F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   176 00002843 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   177 00002846 880D(56C60300)      <1>     mov byte [searchAttr], cl
   178 0000284C 4889D6              <1>     mov rsi, rdx
   179 0000284F E884250000          <1>     call checkPathspecOK
   180 00002854 730A                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   181                              <1> .badPath:
   182 00002856 B803000000          <1>     mov eax, errPnf
   183 0000285B E92A280000          <1>     jmp extErrExit
   184                              <1> .pathOk:
   185 00002860 488D3D(7FC40300)    <1>     lea rdi, buffer1
   186 00002867 52                  <1>     push rdx
   187 00002868 E8C7EAFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   188 0000286D 5A                  <1>     pop rdx
   189 0000286E 0F8216280000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   190                              <1>     ;In the case of a wildcard, recall this will return the first file
   191 00002874 803D(5EC60300)FF    <1>     cmp byte [fileExist], -1
   192 0000287B 0F8509280000        <1>     jnz extErrExit
   193                              <1> ;Internal current dir is now populated with dir entry
   194                              <1> ; and internal DOS directory variables now point to this entry.
   195                              <1> ;Check if the file is a char device or read only.
   196 00002881 B805000000          <1>     mov eax, errAccDen  
   197 00002886 F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   198 0000288D 0F85F7270000        <1>     jnz extErrExit  ;Can't delete a char dev
   199 00002893 F605(C6C50300)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
   200 0000289A 0F85EA270000        <1>     jnz extErrExit  ;Can't delete a read only file
   201                              <1>     ;Now check if the cds is redir, or we entered via server to allow wildcards.
   202 000028A0 E817230000          <1>     call testCDSNet ;Gets working CDS in rdi
   203 000028A5 7210                <1>     jc .gotoDelete
   204 000028A7 803D(5CC60300)FF    <1>     cmp byte [dosInvoke], -1    ;Server invoke?
   205 000028AE 7407                <1>     je .gotoDelete
   206                              <1>     ;Now we check to see if we have wildcards. We do not generally allow them.
   207                              <1>     ;Network CDS and server invokations allow wildcards
   208 000028B0 E89F250000          <1>     call scanPathWC
   209 000028B5 729F                <1>     jc .badPath ;Dont allow wildcards
   210                              <1> .gotoDelete:
   211 000028B7 E83A030000          <1>     call deleteMain
   212 000028BC E8DEE0FFFF          <1>     call setBufferReferenced
   213 000028C1 0F82C3270000        <1>     jc extErrExit
   214 000028C7 803D(5CC60300)FF    <1>     cmp byte [dosInvoke], -1    ;Server invoke?
   215 000028CE 0F85A8270000        <1>     jne extGoodExit
   216                              <1>     ;Here is server invoke, pass through call again.
   217                              <1>     ;We found first, so build a ffblock from the curDir data and find next
   218                              <1>     ;If there are more, delete until no more files match wildcard pattern
   219                              <1> .serverWCloop:
   220 000028D4 FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current DTA address
   221 000028DA 488D3D(90C50300)    <1>     lea rdi, dosffblock
   222 000028E1 57                  <1>     push rdi    ;Push this address onto the stack
   223 000028E2 E894E9FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
   224 000028E7 8F05(79C30300)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
   225 000028ED E83CE6FFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
   226 000028F2 8F05(79C30300)      <1>     pop qword [currentDTA]
   227 000028F8 E8F9020000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
   228 000028FD E89DE0FFFF          <1>     call setBufferReferenced
   229 00002902 73D0                <1>     jnc .serverWCloop     
   230                              <1> ;Stop as soon as an error occurs
   231 00002904 3C12                <1>     cmp al, errNoFil    ;Check if no more files (not considered error here)
   232 00002906 0F857E270000        <1>     jne extErrExit
   233 0000290C 31C0                <1>     xor eax, eax
   234 0000290E E969270000          <1>     jmp extGoodExit
   235                              <1> 
   236                              <1> 
   237                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   238                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   239 00002913 E8200F0000          <1>     call getSFTPtr
   240 00002918 0F826C270000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   241 0000291E 3C03                <1>     cmp al, 3
   242 00002920 720A                <1>     jb .validFunction
   243 00002922 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   244 00002927 E95E270000          <1>     jmp extErrExit
   245                              <1> .validFunction:
   246 0000292C 3C01                <1>     cmp al, 1
   247 0000292E 7718                <1>     ja .seekend
   248 00002930 7203                <1>     jb .seekset
   249                              <1> ;Here we are at seekcur, seek from current (signed)
   250 00002932 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   251                              <1> .seekset:
   252                              <1> ;Seek from the start (unsigned)
   253 00002935 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   254 00002938 E8EC220000          <1>     call getUserRegs    ;Get user regs in rsi
   255 0000293D 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   256                              <1> .seekExit:
   257 00002940 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   258 00002943 E92B270000          <1>     jmp extGoodExit2    ;Return OK in eax 
   259                              <1> .seekend:
   260                              <1> ;Here we are at seekend, seek from end (signed)
   261 00002948 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   262 0000294E 7505                <1>     jnz .netCheck
   263                              <1> .proceedDisk:
   264 00002950 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   265 00002953 EBE0                <1>     jmp short .seekset
   266                              <1> .netCheck:
   267 00002955 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   268 0000295B 75F3                <1>     jnz .proceedDisk
   269 0000295D 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   270                              <1>     ;Check it's share mode
   271 00002961 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   272 00002966 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   273 0000296B 7407                <1>     je .netSeek
   274 0000296D 3D30000000          <1>     cmp eax, denyReadShare
   275 00002972 75DC                <1>     jne .proceedDisk
   276                              <1> .netSeek:
   277 00002974 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   278 00002979 CD4F                <1>     int 4Fh
   279 0000297B 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   280 0000297D E908270000          <1>     jmp extErrExit
   281                              <1> 
   282                              <1> 
   283                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   284 00002982 3C01                <1>     cmp al, 1
   285 00002984 760A                <1>     jbe .subFuncOk
   286 00002986 B801000000          <1>     mov eax, errInvFnc
   287 0000298B E9FA260000          <1>     jmp extErrExit
   288                              <1> .subFuncOk:
   289 00002990 4889D6              <1>     mov rsi, rdx
   290 00002993 89C3                <1>     mov ebx, eax    ;Store function code in bl
   291 00002995 53                  <1>     push rbx
   292 00002996 51                  <1>     push rcx
   293 00002997 E83C240000          <1>     call checkPathspecOK
   294 0000299C 730E                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   295 0000299E 740C                <1>     jz .pathOk  ;Can be terminated with a silly char
   296                              <1> .badPath:
   297 000029A0 59                  <1>     pop rcx
   298 000029A1 5B                  <1>     pop rbx
   299 000029A2 B803000000          <1>     mov eax, errPnf
   300 000029A7 E9DE260000          <1>     jmp extErrExit
   301                              <1> .pathOk:
   302 000029AC E8E5240000          <1>     call checkPathNet 
   303 000029B1 74ED                <1>     jz .badPath ;Or Net paths
   304 000029B3 E89C240000          <1>     call scanPathWC
   305 000029B8 72E6                <1>     jc .badPath ;Dont allow wildcards
   306 000029BA 488D3D(7FC40300)    <1>     lea rdi, buffer1
   307 000029C1 52                  <1>     push rdx
   308 000029C2 C605(56C60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   309 000029C9 E866E9FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   310 000029CE 5A                  <1>     pop rdx
   311 000029CF 59                  <1>     pop rcx
   312 000029D0 5B                  <1>     pop rbx
   313 000029D1 0F82B3260000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   314                              <1>     ;In the case of a wildcard, recall this will return the first file
   315 000029D7 803D(5EC60300)FF    <1>     cmp byte [fileExist], -1
   316 000029DE 0F85A6260000        <1>     jnz extErrExit
   317                              <1> 
   318 000029E4 E8D3210000          <1>     call testCDSNet
   319 000029E9 730C                <1>     jnc .notNet
   320 000029EB 750A                <1>     jnz .notNet ;This type of net ok
   321 000029ED B805000000          <1>     mov eax, errAccDen
   322 000029F2 E993260000          <1>     jmp extErrExit
   323                              <1> .notNet:
   324 000029F7 84DB                <1>     test bl, bl
   325 000029F9 7526                <1>     jnz .setAttribs
   326                              <1>     ;Get attribs here
   327 000029FB 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   328 00002A01 7412                <1>     jz .getDiskAttribs
   329 00002A03 B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   330 00002A08 CD4F                <1>     int 4Fh
   331 00002A0A 0F827A260000        <1>     jc extErrExit
   332 00002A10 E967260000          <1>     jmp extGoodExit
   333                              <1> .getDiskAttribs:
   334 00002A15 0FB605(C6C50300)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   335 00002A1C E95B260000          <1>     jmp extGoodExit
   336                              <1> .setAttribs:
   337                              <1>     ;Set attribs here
   338 00002A21 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   339 00002A27 7417                <1>     jz .setDiskAttribs
   340 00002A29 0FB7C9              <1>     movzx ecx, cx
   341 00002A2C 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   342 00002A2D B80E110000          <1>     mov eax, 110Eh
   343 00002A32 CD4F                <1>     int 4Fh
   344 00002A34 59                  <1>     pop rcx
   345 00002A35 0F824F260000        <1>     jc extErrExit
   346 00002A3B E93C260000          <1>     jmp extGoodExit
   347                              <1> .setDiskAttribs:
   348 00002A40 E8E2EFFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   349 00002A45 0F823F260000        <1>     jc extErrExit
   350 00002A4B F6C118              <1>     test cl, dirVolumeID | dirDirectory
   351 00002A4E 740A                <1>     jz .set
   352 00002A50 B805000000          <1>     mov eax, errAccDen
   353 00002A55 E930260000          <1>     jmp extErrExit
   354                              <1> .set:
   355 00002A5A 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   356 00002A5D 80E518              <1>     and ch, (dirVolumeID | dirDirectory)    ;Keep these two bits
   357 00002A60 08E9                <1>     or cl, ch
   358 00002A62 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   359 00002A65 31C0                <1>     xor eax, eax
   360 00002A67 E910260000          <1>     jmp extGoodExit
   361                              <1> 
   362                              <1> 
   363                              <1> duplicateHandle:   ;ah = 45h, handle function
   364                              <1> ;Input: bx = Handle to duplicate
   365                              <1> ;Output: If ok then ax = New handle
   366 00002A6C E8280E0000          <1>     call findFreeJFTSpace    ;First find a free space in the JFT
   367 00002A71 0F8213260000        <1>     jc extErrExit   ;Exit if no space
   368                              <1>     ;rsi points to the free space
   369                              <1> .duplicateCommon:
   370 00002A77 E8880D0000          <1>     call getJFTPtr  ;Get a pointer to the JFT entry in rdi for bx
   371 00002A7C 4887F7              <1>     xchg rsi, rdi
   372 00002A7F AC                  <1>     lodsb   ;Move over the SFT ndx from the old to the new position
   373 00002A80 AA                  <1>     stosb
   374 00002A81 48FFCE              <1>     dec rsi
   375 00002A84 48FFCF              <1>     dec rdi
   376                              <1>     ;rdi now points to new position
   377                              <1>     ;rsi points to old position
   378                              <1>     ;al has SFT ndx
   379 00002A87 4889FE              <1>     mov rsi, rdi    ;Move rsi to point to the new position jft position
   380 00002A8A 0FB6D8              <1>     movzx ebx, al   ;Move SFTndx into ebx
   381 00002A8D E83D0D0000          <1>     call getSFTPtrfromSFTNdx    ;Get the pointer to the SFT in rdi
   382 00002A92 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   383                              <1>     ;Now we must return in ax the entry in the JFT 
   384 00002A95 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
   385 00002A9C 488D7F2A            <1>     lea rdi, qword [rdi + psp.jobFileTbl]   ;Point to head of table
   386 00002AA0 4829FE              <1>     sub rsi, rdi    ;Get the difference of the two in si
   387 00002AA3 89F0                <1>     mov eax, esi    ;Get the difference as the return code
   388 00002AA5 E9D2250000          <1>     jmp extGoodExit
   389                              <1> 
   390                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   391                              <1> ;Input: bx = Handle to duplicate
   392                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   393                              <1>     ;First we close cx
   394 00002AAA 87D9                <1>     xchg ebx, ecx ;Swap cx and bx
   395 00002AAC 53                  <1>     push rbx
   396 00002AAD 51                  <1>     push rcx
   397 00002AAE E8FEFCFFFF          <1>     call closeFileHdl   ;Close handle 
   398 00002AB3 59                  <1>     pop rcx
   399 00002AB4 5B                  <1>     pop rbx
   400                              <1>     retc    ;The error code is set by errExtExit and CF is set on callerFrame
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00002AB5 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00002AB7 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   401                              <1>     ;Else, close was ok, lets duplicate now
   402 00002AB8 E8470D0000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   403 00002ABD 0F82C7250000        <1>     jc extErrExit   ;Return bad with error code in al
   404 00002AC3 87D9                <1>     xchg ebx, ecx   ;Now get source to duplicate in ebx
   405 00002AC5 4889FE              <1>     mov rsi, rdi    ;Put the free space ptr in rsi
   406 00002AC8 EBAD                <1>     jmp short duplicateHandle.duplicateCommon
   407                              <1> 
   408                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   409                              <1> ;Input: cx = Search Attributes, cl only used
   410                              <1> ;       rdx = Ptr to path to file to look for
   411                              <1> ;       al = Document as needing to be 0 for now
   412                              <1> ;Return:
   413                              <1> ;Data in the DTA or error through AX with CF=CY
   414                              <1> ;CAVEATS!
   415                              <1> ;DTA:attribFnd = 40h => Char dev
   416                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   417 00002ACA 880D(56C60300)      <1>     mov byte [searchAttr], cl
   418 00002AD0 4889D6              <1>     mov rsi, rdx
   419 00002AD3 E800230000          <1>     call checkPathspecOK    ;This uses rsi and preserves it
   420 00002AD8 730A                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   421                              <1>     ;Dont allow paths which end in a malformed char for ASCIIZ
   422                              <1>     ;ONLY ALLOW TRUENAME TO RESOLVE SUCH PATHS 
   423                              <1> .badPath:
   424 00002ADA B803000000          <1>     mov eax, errPnf
   425 00002ADF E9A6250000          <1>     jmp extErrExit
   426                              <1> .pathspecOk:
   427 00002AE4 FF35(79C30300)      <1>     push qword [currentDTA]
   428 00002AEA 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   429 00002AF1 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
   430 00002AF8 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   431 00002AFF E830E8FFFF          <1>     call getFilePath
   432                              <1> .findfileExit:
   433 00002B04 8F05(79C30300)      <1>     pop qword [currentDTA]
   434 00002B0A 0F827A250000        <1>     jc extErrExit
   435 00002B10 488D3D(90C50300)    <1>     lea rdi, dosffblock
   436 00002B17 57                  <1>     push rdi
   437 00002B18 E85EE7FFFF          <1>     call setupFFBlock
   438 00002B1D 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   439 00002B1E 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
   440 00002B25 B92B000000          <1>     mov ecx, ffBlock_size
   441 00002B2A F3A4                <1>     rep movsb   ;Copy the whole block. 
   442                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   443 00002B2C 31C0                <1>     xor eax, eax    ;Return value
   444 00002B2E E949250000          <1>     jmp extGoodExit ;Exit well
   445                              <1> 
   446                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   447                              <1> ;Input: DTA has the find first block from the previous search
   448 00002B33 488B35(79C30300)    <1>     mov rsi, qword [currentDTA]
   449 00002B3A 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   450 00002B41 B92B000000          <1>     mov ecx, ffBlock_size
   451 00002B46 F3A4                <1>     rep movsb
   452 00002B48 FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current DTA address
   453 00002B4E 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   454 00002B55 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
   455 00002B5C E8CDE3FFFF          <1>     call findNextMain
   456 00002B61 EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   457                              <1> 
   458                              <1> renameFile:        ;ah = 56h
   459 00002B63 BB16000000          <1>     mov ebx, dirInclusive
   460 00002B68 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   461 00002B6F 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   462 00002B72 880D(56C60300)      <1>     mov byte [searchAttr], cl
   463                              <1> 
   464                              <1> 
   465                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   466                              <1> createNewFile:     ;ah = 5Bh
   467                              <1> 
   468                              <1> lockUnlockFile:    ;ah = 5Ch
   469 00002B78 E90D250000          <1>     jmp extErrExit
   470                              <1> setHandleCount:    ;ah = 67h
   471 00002B7D E908250000          <1>     jmp extErrExit
   472                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   473                              <1>     ;Input: bx = File to flush
   474 00002B82 E8B10C0000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   475 00002B87 0F82FD240000        <1>     jc extErrExit
   476 00002B8D E8170B0000          <1>     call setCurrentSFT
   477                              <1>     ;Now we check if the device is a char, disk or net file
   478 00002B92 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   479 00002B96 66A90080            <1>     test ax, devRedirDev
   480 00002B9A 7512                <1>     jnz .notNet
   481                              <1>     ;Commit file net redir call and exit
   482 00002B9C B807110000          <1>     mov eax, 1107h
   483 00002BA1 CD4F                <1>     int 4Fh
   484 00002BA3 0F82E1240000        <1>     jc extErrExit
   485 00002BA9 E93D000000          <1>     jmp .exitOk
   486                              <1> .notNet:
   487 00002BAE 66A98000            <1>     test ax, devCharDev
   488 00002BB2 7418                <1>     jz .blokDev
   489                              <1>     ;Here we simply update date/time fields in the SFT structure before exiting
   490 00002BB4 E869F9FFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   491 00002BB9 0F82CB240000        <1>     jc extErrExit  ;If we fail to get time/date, fail the request
   492                              <1>     ;Build date and time words
   493 00002BBF E849FAFFFF          <1>     call getDirDTwords  ;Get date time words packed in eax
   494 00002BC4 894713              <1>     mov dword [rdi + sft.wTime], eax    ;Store them at the same time
   495 00002BC7 E91F000000          <1>     jmp .exitOk
   496                              <1> .blokDev:
   497 00002BCC 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   498 00002BD0 E8DF1F0000          <1>     call setWorkingDPB
   499 00002BD5 E8B8EEFFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   500 00002BDA 0F82AA240000        <1>     jc extErrExit
   501 00002BE0 E872DFFFFF          <1>     call flushFile  ;Now the file gets flushed
   502 00002BE5 0F829F240000        <1>     jc extErrExit
   503                              <1> .exitOk:
   504 00002BEB 30C0                <1>     xor al, al
   505 00002BED E837200000          <1>     call getUserRegs
   506 00002BF2 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   507                              <1>     return
    18                              <2> %%_ret:
    19 00002BF5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   508                              <1> ;-----------------------------------:
   509                              <1> ;       Main File IO Routines       :
   510                              <1> ;-----------------------------------:
   511                              <1> deleteMain:
   512                              <1> ;Now unlink FAT chain and then clear directory entry
   513                              <1> ;Get the start cluster of this file
   514                              <1> ;Input:
   515                              <1> ; The file must have NOT be read-only.
   516                              <1> ; If the CDS is NOT a net cds then the following must hold:
   517                              <1> ;     - curDirCopy must be filled with the file directory information
   518                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
   519                              <1> ;Output: CF=NC => Success, 
   520                              <1> ; If not net CDS:
   521                              <1> ;   rsi keeps pointing to directory entry.
   522                              <1> ;   al = First char of the file that was deleted.
   523                              <1> ;        CF=CY => Error
   524                              <1> ;The dir buffer must be marked as referenced once we are done with it
   525 00002BF6 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   526 00002BFD E8BA1F0000          <1>     call testCDSNet ;CF=CY => Not net
   527 00002C02 7208                <1>     jc .notNet
   528 00002C04 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
   529 00002C09 CD4F                <1>     int 4Fh
   530                              <1>     return
    18                              <2> %%_ret:
    19 00002C0B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   531                              <1> .notNet:
   532 00002C0C 52                  <1>     push rdx
   533 00002C0D 0FB715(D5C50300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   534 00002C14 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   535 00002C1B C1E010              <1>     shl eax, 10h
   536 00002C1E 09D0                <1>     or eax, edx ;Add low bits to eax
   537 00002C20 5A                  <1>     pop rdx
   538 00002C21 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
   539 00002C23 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
   540 00002C25 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
   541 00002C2C E877E1FFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
   542 00002C31 720F                <1>     jc .exit
   543                              <1> .skipUnlink:
   544                              <1>     ;Now replace the first char of the directory to 0E5h
   545                              <1>     ;Get the disk directory in a buffer to manipulate the entry
   546 00002C33 E8EFEDFFFF          <1>     call getDiskDirectoryEntry
   547 00002C38 7208                <1>     jc .exit
   548 00002C3A 8A05(62C60300)      <1>     mov al, byte [delChar]
   549 00002C40 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
   550                              <1>     ;CF must be clear
   551                              <1> .exit:
   552                              <1>     return
    18                              <2> %%_ret:
    19 00002C42 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   553                              <1> 
   554                              <1> openMain:
   555                              <1> ;Input: ax (formally al) = Open mode
   556                              <1> ;       [currentSFT] = SFT we are building
   557                              <1> ;       [workingCDS] = CDS of drive to access
   558                              <1> ;       [workingDPB] = DPB of drive to access
   559                              <1> ;Ouput: CF=CY => Error, eax has error code
   560 00002C43 E84F000000          <1>     call .setOpenMode
   561                              <1>     retc    ;Error Exit 
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002C48 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   562 00002C4A 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   563 00002C51 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]
   564 00002C58 30E4                <1>     xor ah, ah  ;al has the access mode
   565 00002C5A 66894702            <1>     mov word [rdi + sft.wOpenMode], ax  ;Set the SFT access mode
   566 00002C5E 4881FEFFFFFFFF      <1>     cmp rsi, -1
   567 00002C65 750A                <1>     jne .notNet
   568                              <1> .redirOpen:
   569 00002C67 50                  <1>     push rax    ;Push open mode onto stack
   570 00002C68 B816110000          <1>     mov eax, 1116h  ;Open remote file on \\ pathspec drives
   571 00002C6D CD4F                <1>     int 4Fh
   572 00002C6F 58                  <1>     pop rax
   573                              <1>     return
    18                              <2> %%_ret:
    19 00002C70 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   574                              <1> .notNet:
   575 00002C71 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   576 00002C77 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
   577 00002C79 E8CD230000          <1>     call dosCrit1Enter
   578 00002C7E C605(61C60300)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
   579 00002C85 C605(62C60300)E5    <1>     mov byte [delChar], 0E5h
   580 00002C8C E8B0000000          <1>     call buildSFTEntry  ;ax must have the open mode
   581                              <1>     ;Here we put Share mode stuff
   582 00002C91 E8BF230000          <1>     call dosCrit1Exit
   583                              <1>     return
    18                              <2> %%_ret:
    19 00002C96 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   584                              <1> .setOpenMode:
   585                              <1> ;Input: al = Open mode for the file open
   586 00002C97 8805(57C60300)      <1>     mov byte [fileOpenMd], al
   587 00002C9D 53                  <1>     push rbx
   588 00002C9E 88C3                <1>     mov bl, al
   589 00002CA0 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
   590 00002CA3 803D(5CC60300)FF    <1>     cmp byte [dosInvoke], -1    
   591 00002CAA 7505                <1>     jnz .s1 ;Skip this check if not server invoke
   592 00002CAC 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
   593 00002CAF 7405                <1>     je .s2
   594                              <1> .s1:
   595 00002CB1 80FB40              <1>     cmp bl, denyNoneShare
   596 00002CB4 770D                <1>     ja .somBad
   597                              <1> .s2:
   598 00002CB6 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
   599 00002CB8 80E30F              <1>     and bl, 0Fh
   600 00002CBB 80FB02              <1>     cmp bl, RWAccess
   601 00002CBE 7703                <1>     ja .somBad
   602 00002CC0 5B                  <1>     pop rbx
   603 00002CC1 F8                  <1>     clc
   604                              <1>     return
    18                              <2> %%_ret:
    19 00002CC2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   605                              <1> .somBad:
   606 00002CC3 5B                  <1>     pop rbx
   607 00002CC4 B80C000000          <1>     mov eax, errAccCde
   608 00002CC9 F9                  <1>     stc
   609                              <1>     return
    18                              <2> %%_ret:
    19 00002CCA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   610                              <1> createMain:
   611                              <1> ;Input: ax (formally al) = File attributes
   612                              <1> ;       [currentSFT] = SFT we are building
   613                              <1> ;       [workingCDS] = CDS of drive to access
   614                              <1> ;       [workingDPB] = DPB of drive to access
   615 00002CCB 0FB6C0              <1>     movzx eax, al
   616 00002CCE A8C0                <1>     test al, 80h | 40h   ;Invalid bits?
   617 00002CD0 750A                <1>     jnz .invalidAttrib
   618 00002CD2 A808                <1>     test al, dirVolumeID
   619 00002CD4 7506                <1>     jnz .invalidAttrib  ;Creating volume label with this function is forbidden
   620 00002CD6 0C20                <1>     or al, dirArchive   ;Set archive bit
   621 00002CD8 A810                <1>     test al, dirDirectory   
   622 00002CDA 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
   623                              <1> .invalidAttrib:
   624 00002CDC B805000000          <1>     mov eax, errAccDen
   625 00002CE1 F9                  <1>     stc
   626                              <1>     return
    18                              <2> %%_ret:
    19 00002CE2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   627                              <1> .validAttr:
   628 00002CE3 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   629 00002CEA 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]
   630 00002CF1 4881FEFFFFFFFF      <1>     cmp rsi, -1
   631 00002CF8 750A                <1>     jne .diskFile
   632 00002CFA 50                  <1>     push rax    ;Save the new attributes
   633 00002CFB B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
   634 00002D00 CD4F                <1>     int 4Fh
   635 00002D02 5B                  <1>     pop rbx
   636                              <1>     return
    18                              <2> %%_ret:
    19 00002D03 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   637                              <1> .diskFile:
   638 00002D04 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
   639 00002D0A 740A                <1>     jz .hardFile
   640 00002D0C 50                  <1>     push rax    ;Save the new attributes
   641 00002D0D B817110000          <1>     mov eax, 1117h  ;Create file with CDS
   642 00002D12 CD4F                <1>     int 4Fh
   643 00002D14 5B                  <1>     pop rbx
   644                              <1>     return
    18                              <2> %%_ret:
    19 00002D15 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   645                              <1> .hardFile:
   646 00002D16 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
   647 00002D1C C605(61C60300)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
   648 00002D23 C605(62C60300)E5    <1>     mov byte [delChar], 0E5h
   649 00002D2A E81C230000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
   650 00002D2F 50                  <1>     push rax    ;Save the file attributes on stack
   651 00002D30 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
   652 00002D35 E807000000          <1>     call buildSFTEntry
   653 00002D3A 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
   654                              <1>     ;Here we put Share mode stuff
   655 00002D3B E815230000          <1>     call dosCrit1Exit
   656                              <1>     return
    18                              <2> %%_ret:
    19 00002D40 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   657                              <1> buildSFTEntry:
   658                              <1> ;Called in a critical section.
   659                              <1> ;Input: al = Open mode
   660                              <1> ;       STACK: File attributes if creating a file
   661                              <1> ;       [currentSFT] = SFT we are building
   662                              <1> ;       [workingCDS] = CDS of drive to access
   663                              <1> ;       [workingDPB] = DPB of drive to access
   664                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
   665                              <1> ;
   666                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
   667                              <1> ;                  - wDeviceInfo is set except for inherit bit
   668                              <1> ;        If CF=CY: - Return fail
   669                              <1> ;
   670                              <1> ;
   671                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
   672                              <1> ;   If not, create disk entry.
   673                              <1> ;Check if the device was a char device by checking curDirCopy.
   674                              <1> ;If disk, get dpb. We check if the parent dir was found.
   675                              <1> 
   676                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
   677                              <1> ; to start of file fields of the SFT
   678 00002D41 55                  <1>     push rbp    ;file attribute is rbp + 10h
   679 00002D42 4889E5              <1>     mov rbp, rsp
   680 00002D45 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
   681                              <1> ;Set the open mode
   682 00002D4C 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
   683                              <1> ;Get current time
   684 00002D50 E8CDF7FFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   685 00002D55 E8B3F8FFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
   686 00002D5A 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
   687                              <1> ;Set current Owner
   688 00002D5D 488B05(81C30300)    <1>     mov rax, qword [currentPSP]
   689 00002D64 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
   690                              <1> ;Set file pointer to first byte
   691 00002D68 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
   692                              <1> ;Common fields set
   693 00002D6F F605(61C60300)FF    <1>     test byte [openCreate], -1  ;Create = -1
   694 00002D76 0F846B010000        <1>     jz .openProc
   695                              <1>     ;Here if Creating a file.
   696 00002D7C F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
   697 00002D83 0F8567010000        <1>     jnz .charDev
   698 00002D89 F605(5EC60300)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
   699 00002D90 0F8498000000        <1>     jz .createFile
   700                              <1>     ;Here disk file exists, so recreating the file.
   701 00002D96 E85BFEFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
   702                              <1>     ;al has the char for the filename
   703                              <1>     ;Sets vars for the sector/offset into the sector
   704 00002D9B 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   705 00002DA2 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
   706 00002DA4 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
   707                              <1>     ;al has file attributes.
   708 00002DA8 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
   709 00002DAA 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
   710 00002DAD 31C0                <1>     xor eax, eax
   711                              <1>     ;Clear all the fields south of ntRes (20 bytes)
   712 00002DAF 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
   713 00002DB3 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
   714 00002DB7 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
   715 00002DBA 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
   716 00002DBD 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
   717 00002DC0 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
   718                              <1> 
   719 00002DC3 57                  <1>     push rdi    ;Save SFT pointer
   720 00002DC4 488D3D(BBC50300)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
   721 00002DCB B920000000          <1>     mov ecx, fatDirEntry_size
   722 00002DD0 F3A4                <1>     rep movsb
   723 00002DD2 E8B9DBFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   724 00002DD7 E8C3DBFFFF          <1>     call setBufferReferenced    ;We are now done with this buffer, reclaimable
   725 00002DDC 5F                  <1>     pop rdi
   726                              <1> .createCommon:  ;rdi must point to the current SFT 
   727                              <1>     ;Now populate the remaining SFT fields 
   728 00002DDD 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   729 00002DE4 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
   730 00002DE7 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
   731 00002DEA 488B05(98C60300)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
   732 00002DF1 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
   733 00002DF5 0FB705(A0C60300)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
   734 00002DFC C0E805              <1>     shr al, 5   ;Divide by 5 to get directory entry number
   735 00002DFF 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
   736 00002E02 31C0                <1>     xor eax, eax
   737                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
   738 00002E04 8A05(63C60300)      <1>     mov al, byte [workingDrv]
   739 00002E0A 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
   740 00002E0E 488B05(64C60300)    <1>     mov rax, qword [workingDPB]
   741 00002E15 48894707            <1>     mov qword [rdi + sft.qPtr], rax
   742                              <1>     ;Last thing, copy the filename over
   743                              <1>     ;Now save the name
   744                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
   745 00002E19 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
   746 00002E1D 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   747 00002E24 48A5                <1>     movsq   ;Copy over the space padded name to the sft
   748 00002E26 66A5                <1>     movsw
   749 00002E28 A4                  <1>     movsb
   750                              <1>     ;SFT filled, now we can return
   751 00002E29 E9F0000000          <1>     jmp .exit
   752                              <1> .createFile:
   753                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
   754                              <1>     ;rsi points to current sda entry
   755 00002E2E 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   756                              <1>     ;Clear out the dir entry
   757 00002E35 57                  <1>     push rdi
   758 00002E36 B904000000          <1>     mov ecx, 4
   759 00002E3B 31C0                <1>     xor eax, eax
   760 00002E3D F348AB              <1>     rep stosq   ;Store 32 bytes of 0
   761 00002E40 5F                  <1>     pop rdi
   762                              <1>     ;Copy the FCB name over    
   763 00002E41 56                  <1>     push rsi
   764 00002E42 57                  <1>     push rdi
   765 00002E43 B90B000000          <1>     mov ecx, 11
   766 00002E48 488D35(DBC50300)    <1>     lea rsi, fcbName
   767 00002E4F F3A4                <1>     rep movsb   ;Move over the FCB name
   768 00002E51 5F                  <1>     pop rdi
   769 00002E52 5E                  <1>     pop rsi
   770                              <1> 
   771 00002E53 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
   772                              <1>     ;al has file attributes.
   773 00002E57 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
   774 00002E59 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
   775 00002E5C 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
   776 00002E5F 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
   777 00002E62 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
   778 00002E65 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
   779                              <1> .searchForDirSpace:
   780 00002E6B 8905(D6C60300)      <1>     mov dword [dirClustA], eax
   781 00002E71 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
   782 00002E73 668905(DAC60300)    <1>     mov word [dirSect], ax
   783 00002E7A 8905(DCC60300)      <1>     mov dword [dirEntry], eax
   784 00002E80 57                  <1>     push rdi
   785 00002E81 E88DEBFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
   786 00002E86 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
   787 00002E87 7320                <1>     jnc .dirEntryFnd
   788 00002E89 813D(D2C60300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
   788 00002E91 0000                <1>
   789 00002E93 0F8487000000        <1>     je .bad ;Set CF and exit
   790 00002E99 E88BECFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
   791 00002E9E 727E                <1>     jc .exit
   792 00002EA0 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
   793 00002EA5 7479                <1>     je .bad
   794                              <1>     ;Else eax = Newly allocated cluster
   795 00002EA7 EBC2                <1>     jmp short .searchForDirSpace
   796                              <1> .dirEntryFnd:
   797 00002EA9 4887FE              <1>     xchg rdi, rsi
   798 00002EAC B904000000          <1>     mov ecx, 4
   799 00002EB1 F348A5              <1>     rep movsq   ;Copy over the buffered directory
   800 00002EB4 E8D7DAFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   801 00002EB9 E8E1DAFFFF          <1>     call setBufferReferenced    ;We are now done with this buffer, reclaimable
   802 00002EBE 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   803 00002EC5 E913FFFFFF          <1>     jmp .createCommon
   804                              <1> .open:
   805                              <1> ;curdircopy has a copy of the disk file directory
   806                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
   807 00002ECA 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   808 00002ED1 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
   809                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
   810 00002ED8 E84AEBFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
   811 00002EDD E8BDDAFFFF          <1>     call setBufferReferenced    ;Mark this buffer as done with!
   812 00002EE2 E9F6FEFFFF          <1>     jmp .createCommon
   813                              <1> 
   814                              <1> .openProc:
   815                              <1>     ;Here if Opening a file.
   816 00002EE7 F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
   817 00002EEE 74DA                <1>     jz .open
   818                              <1> .charDev:
   819 00002EF0 488B05(BBC50300)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
   820 00002EF7 E8AC1F0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
   821 00002EFC 7307                <1>     jnc .notBadCharDevName
   822 00002EFE B805000000          <1>     mov eax, errAccDen
   823 00002F03 EB19                <1>     jmp short .exit ;CF already set
   824                              <1> .notBadCharDevName:
   825 00002F05 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
   826 00002F09 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
   827 00002F0D 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
   828 00002F10 80CB60              <1>     or bl, charDevBinary | charDevNoEOF ;Set binary mode and noEOF on read
   829 00002F13 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
   830 00002F17 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
   831                              <1> .exit:
   832 00002F1E 5D                  <1>     pop rbp
   833                              <1>     return
    18                              <2> %%_ret:
    19 00002F1F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   834                              <1> .bad:
   835 00002F20 F9                  <1>     stc
   836 00002F21 EBFB                <1>     jmp short .exit
   837                              <1> closeMain: ;Int 4Fh AX=1201h
   838                              <1> ;Gets the directory entry for a file
   839                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
   840                              <1> ;If CF=CY on return: Error, return error with al = error code
   841                              <1> ;Preserve all regs except eax and rdi
   842                              <1> ; If CF=NC on return: eax = Unknown
   843                              <1> ;                     rdi = current SFT ptr
   844 00002F23 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
   845 00002F2A 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
   846 00002F30 7408                <1>     jz .physical
   847                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
   848 00002F32 B806110000          <1>     mov eax, 1106h  ;Make request
   849 00002F37 CD4F                <1>     int 4Fh ;Beep!
   850                              <1>     return  ;Returns with CF set or clear as appropriate
    18                              <2> %%_ret:
    19 00002F39 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   851                              <1> .physical:  
   852                              <1> ; We make a request to the dev dir to close the device
   853                              <1> ; If the device is disk, we then update the directory entry for the disk file
   854 00002F3A E80C210000          <1>     call dosCrit1Enter  ;Enter critical section 1
   855 00002F3F 53                  <1>     push rbx
   856 00002F40 56                  <1>     push rsi
   857 00002F41 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
   858 00002F45 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   859 00002F4B 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
   860                              <1>     ;rsi has DPB pointer here
   861                              <1>     ;rdi has the SFT pointer
   862 00002F4D 55                  <1>     push rbp
   863 00002F4E 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
   864 00002F51 E85E1C0000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
   865 00002F56 E837EBFFFF          <1>     call updateDirectoryEntryForFile
   866 00002F5B 5D                  <1>     pop rbp
   867                              <1>     ;If CF is set, Fail was requested and ax has an error code
   868 00002F5C 722F                <1>     jc .exit
   869 00002F5E E8F4DBFFFF          <1>     call flushFile
   870 00002F63 7228                <1>     jc .exit    ;If something went wrong, exit
   871 00002F65 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
   872 00002F69 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
   873                              <1> .charClose:
   874                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
   875                              <1>     ;We now decrement handle count in SFT structure
   876 00002F6D E86C090000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
   877 00002F72 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
   878 00002F75 7503                <1>     jnz .driverClose
   879 00002F77 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
   880                              <1> .driverClose:
   881 00002F7A 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
   882                              <1>     ;and if the device is a disk device, cl will have the unit number
   883                              <1>     ;We first check if the driver supports oper/close requests
   884 00002F7B 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
   885 00002F81 750A                <1>     jnz .exit  ;If not, immediately jump to exit, all is well
   886                              <1>     ;rsi has device driver ptr for device, make request
   887 00002F83 E8FB1B0000          <1>     call primReqCloseSetup  ;rbx gets header ptr, rsi has driver ptr
   888 00002F88 E8A3180000          <1>     call goDriver   ;Make request
   889                              <1>     ;Don't check the status here, as we are simply informing the driver 
   890                              <1>     ; of an operation. Nothing should be able to go wrong. 
   891                              <1>     ;Functionally, an ignore if anything does go wrong.
   892                              <1> .exit:
   893 00002F8D 5E                  <1>     pop rsi
   894 00002F8E 5B                  <1>     pop rbx
   895 00002F8F E8C1200000          <1>     call dosCrit1Exit
   896                              <1>     return
    18                              <2> %%_ret:
    19 00002F94 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   897                              <1> 
   898                              <1> readBytes:
   899                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
   900                              <1> ;Input: ecx = Number of bytes to read
   901                              <1> ;Output: ecx = Number of bytes read
   902                              <1> ;Number of bytes read 
   903                              <1> ;If CF=CY, return with error code in ax
   904 00002F95 E817070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   905 00002F9A 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   906 00002F9E 240F                <1>     and al, 0Fh ;Eliminate except access mode
   907 00002FA0 3C01                <1>     cmp al, WriteAccess
   908 00002FA2 7509                <1>     jne .readable
   909 00002FA4 B805000000          <1>     mov eax, errAccDen
   910 00002FA9 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
   911 00002FAB F9                  <1>     stc
   912                              <1>     return
    18                              <2> %%_ret:
    19 00002FAC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   913                              <1> .readable:
   914 00002FAD E840070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
   915 00002FB2 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
   916 00002FB5 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   917 00002FBB 740A                <1>     jz .notRedir
   918 00002FBD B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
   919 00002FC2 CD4F                <1>     int 4Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
   920                              <1>     return 
    18                              <2> %%_ret:
    19 00002FC4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   921                              <1> .exitOk:
   922 00002FC5 F8                  <1>     clc
   923                              <1>     return 
    18                              <2> %%_ret:
    19 00002FC6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   924                              <1> .notRedir:
   925 00002FC7 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   926 00002FCD 7510                <1>     jnz readCharDev
   927 00002FCF E877200000          <1>     call dosCrit1Enter
   928 00002FD4 E89C010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
   929 00002FD9 E877200000          <1>     call dosCrit1Exit
   930                              <1>     return 
    18                              <2> %%_ret:
    19 00002FDE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   931                              <1> readCharDev:
   932                              <1> ;rdi points to sft for char dev to read
   933                              <1> ;ecx has the number of bytes to transfer
   934                              <1> ;Vars have been set up and DTA has the transfer address
   935                              <1> ;Returns in ecx, the actual bytes transferred
   936                              <1> ;If CF=CY, return with error code in ax
   937 00002FDF C605(6CC30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
   938 00002FE6 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
   939 00002FEA 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
   940 00002FF1 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
   941 00002FF4 0F8464020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
   942 00002FFA F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
   943 00002FFD 7407                <1>     jz .notNul
   944                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
   945                              <1>     ;NUL never transfers bytes 
   946 00002FFF 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
   947 00003001 E958020000          <1>     jmp readExitOk    ;Goto exit
   948                              <1> .notNul:
   949 00003006 F6C320              <1>     test bl, charDevBinary
   950 00003009 0F857F000000        <1>     jnz .binary
   951                              <1>     ;Here if the device is in ASCII mode
   952 0000300F F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
   953 00003012 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
   954                              <1> .consoleInput:
   955                              <1>     ;Console input here
   956 00003018 E8F1F0FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
   957                              <1>     ;Get current offset into buffer (if one exists)
   958 0000301D 488B35(23C00300)    <1>     mov rsi, qword [vConHdlOff]
   959 00003024 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
   960 00003027 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
   961 00003029 803D(B0C20300)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
   962 00003030 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
   963                              <1>     ;Else, reset the buffer
   964 00003032 66C705(B0C20300)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
   964 0000303A FF                  <1>
   965                              <1> .oldBuf:
   966                              <1> ;Preserve the dta and number of chars to tfr
   967 0000303B 51                  <1>     push rcx
   968 0000303C 57                  <1>     push rdi
   969 0000303D 488D15(B0C20300)    <1>     lea rdx, vConInBuf
   970 00003044 E8E5F0FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
   971 00003049 5F                  <1>     pop rdi
   972 0000304A 59                  <1>     pop rcx
   973 0000304B 488D35(B2C20300)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
   974 00003052 803E1A              <1>     cmp byte [rsi], EOF
   975 00003055 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
   976 00003057 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
   977 0000305A B00A                <1>     mov al, LF
   978 0000305C E85FECFFFF          <1>     call charOut_B.in   ;Echo CRLF
   979 00003061 31F6                <1>     xor esi, esi    ;Set ZF = ZE
   980 00003063 EB18                <1>     jmp short .exit
   981                              <1> .tfrBuf:
   982 00003065 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
   983 00003066 AA                  <1>     stosb
   984 00003067 3C0D                <1>     cmp al, CR 
   985 00003069 7503                <1>     jne .noCRLF
   986 0000306B C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
   987                              <1> .noCRLF:
   988 0000306E 3C0A                <1>     cmp al, LF  ;Compare if al is LF
   989 00003070 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
   990 00003072 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
   991                              <1>     ;This only applies if the reason for exiting the loop is al=LF
   992 00003074 E847ECFFFF          <1>     call charOut_B.in   ;Echo CRLF
   993 00003079 31F6                <1>     xor esi, esi
   994 0000307B 0C01                <1>     or al, 1    ;Set ZF = NZ
   995                              <1> .exit:
   996 0000307D E8A4F0FFFF          <1>     call vConRetDriver
   997 00003082 488935(23C00300)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
   998 00003089 E9D0010000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
   999                              <1> 
  1000                              <1> .binary:
  1001                              <1>     ;Setup registers for transfer
  1002 0000308E 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1003 00003091 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1004                              <1>     ;ecx has the number of bytes to transfer directly
  1005 00003094 E83B1A0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1006 00003099 488B35(64C60300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1007 000030A0 E88B170000          <1>     call goDriver   ;Make the request
  1008 000030A5 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1009 000030A8 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1010 000030AF F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1011 000030B5 7422                <1>     jz .binNoError
  1012                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
  1013 000030B7 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1014 000030B9 E845160000          <1>     call charDevErr   ;ah = has part of the error 
  1015                              <1>     ;al now has the response
  1016 000030BE 3C00                <1>     cmp al, critIgnore
  1017 000030C0 7417                <1>     je .binNoError ;Simply proceed as normal
  1018 000030C2 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1019 000030C5 3C03                <1>     cmp al, critFail
  1020 000030C7 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1021                              <1>     ;Fallthrough here for fail!
  1022                              <1> .failExit:
  1023 000030C9 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1024 000030D0 31C9                <1>     xor ecx, ecx
  1025 000030D2 B805000000          <1>     mov eax, errAccDen
  1026 000030D7 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1027                              <1>     return
    18                              <2> %%_ret:
    19 000030D8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1028                              <1> .binNoError:
  1029                              <1>     ;Get number of bytes transferred into 
  1030 000030D9 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1031 000030DF F7D8                <1>     neg eax ;make it into -eax
  1032 000030E1 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1033                              <1>     ;ecx now has bytes left to transfer
  1034 000030E5 50                  <1>     push rax    ;Save value on stack
  1035 000030E6 31C0                <1>     xor eax, eax ;Set ZF
  1036 000030E8 FFC0                <1>     inc eax ;Clear ZF
  1037 000030EA 58                  <1>     pop rax ;Get back the original value
  1038 000030EB E96E010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1039                              <1> .generalASCII:
  1040                              <1>     ;ecx has bytes to transfer here
  1041                              <1>     ;Setup registers for transfer
  1042 000030F0 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1043 000030F3 51                  <1>     push rcx
  1044 000030F4 B901000000          <1>     mov ecx, 1  ;Get one char
  1045 000030F9 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1046 000030FC E8D3190000          <1>     call primReqReadSetup   ;Setup request
  1047 00003101 59                  <1>     pop rcx
  1048                              <1>     ;rbx now has request header ptr
  1049 00003102 488B35(64C60300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1050                              <1> .asciiReadChar:
  1051 00003109 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1052 0000310C E881EFFFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1053 00003111 E81A170000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1054 00003116 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1055 0000311D F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1056 00003123 741E                <1>     jz .asciiNoError
  1057 00003125 E8D9150000          <1>     call charDevErr    ;Call Int 44h
  1058                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1059 0000312A C705(38C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1059 00003132 0000                <1>
  1060 00003134 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1061 00003137 3C03                <1>     cmp al, critFail
  1062 00003139 748E                <1>     je .failExit
  1063 0000313B 3C01                <1>     cmp al, critRetry
  1064 0000313D 74CA                <1>     je .asciiReadChar
  1065                              <1>     ;Ignore here, pretend NULL CHAR was read
  1066 0000313F 30C0                <1>     xor al, al
  1067 00003141 EB15                <1>     jmp short .asciiIgnoreEP
  1068                              <1> .asciiNoError:
  1069                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1070                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1071                              <1> ;Preserve RBX, RSI
  1072                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1073 00003143 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1074 00003146 813D(38C40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1074 0000314E 0000                <1>
  1075 00003150 0F8508010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1076 00003156 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1077                              <1> .asciiIgnoreEP:
  1078 00003158 48FF05(30C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1079 0000315F 48FFC7              <1>     inc rdi ;Also advance register pointer
  1080 00003162 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1081 00003164 0F84F4000000        <1>     je readExitOk
  1082 0000316A 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1083 0000316C E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1084                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1085 0000316E FEC0                <1>     inc al  ;make ZF=NZ
  1086 00003170 E9E9000000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1087                              <1> 
  1088                              <1> readDiskFile:
  1089                              <1> ;rdi = Current SFT
  1090                              <1> ;rbp = WorkingDPB
  1091                              <1> ;ecx = Bytes to transfer
  1092 00003175 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1093 0000317C C605(5AC60300)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1094                              <1>     ;We have the following vars setup:
  1095                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1096                              <1>     ;currClustF
  1097                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1098                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1099 00003183 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1100 00003186 85D2                <1>     test edx, edx
  1101 00003188 0F84D0000000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1102 0000318E 8B15(A2C60300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  1103 00003194 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  1104 00003197 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  1105 00003199 0F84BF000000        <1>     jz readExitOk
  1106 0000319F 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  1107 000031A1 8B0D(CAC60300)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  1108 000031A7 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  1109 000031A9 741E                <1>     jz .skipWalk
  1110                              <1> .goToCurrentCluster:
  1111 000031AB 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  1112 000031B0 0F84A8000000        <1>     je readExitOk ;Exit with no bytes transferred
  1113 000031B6 89C3                <1>     mov ebx, eax    ;Save eax as current cluster
  1114 000031B8 E821DCFFFF          <1>     call walkFAT    ;Get in eax the next cluster
  1115 000031BD 0F828C000000        <1>     jc .badExit   ;This can only return Fail
  1116 000031C3 FFCA                <1>     dec edx ;Decrement counter
  1117 000031C5 75E4                <1>     jnz .goToCurrentCluster
  1118                              <1> ;Now we fall out with ebx = Current cluster
  1119 000031C7 89D8                <1>     mov eax, ebx    ;Get the current cluster in eax
  1120                              <1> .skipWalk:
  1121 000031C9 E844DAFFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  1122                              <1>     ;Now we add the offset to this
  1123 000031CE 0FB61D(AEC60300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  1124 000031D5 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  1125 000031D8 488905(AFC60300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  1126                              <1> ;Main
  1127 000031DF EB05                <1>     jmp short .mainSkipBufferSet
  1128                              <1> .mainRead:
  1129 000031E1 E8B9D7FFFF          <1>     call setBufferReferenced
  1130                              <1> .mainSkipBufferSet:
  1131 000031E6 E848D9FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
  1132 000031EB 7262                <1>     jc .badExit
  1133 000031ED 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  1134 000031F1 0FB71D(B7C60300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  1135 000031F8 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  1136                              <1>     ;Now we read the smallest of the following from the sector buffer:
  1137                              <1>     ; 1) Sector size, 2) Bytes left in File, 3) Bytes left to read from Request
  1138 000031FB 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  1139 000031FE 2B4F1B              <1>     sub ecx, dword [rdi + sft.dCurntOff] ;Get bytes left to read in file in ecx
  1140 00003201 8B1D(CEC60300)      <1>     mov ebx, dword [tfrCntr]
  1141 00003207 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  1142 00003209 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  1143 0000320C 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  1144 00003210 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  1145 00003212 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  1146 00003215 57                  <1>     push rdi
  1147 00003216 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
  1148 0000321D E85A060000          <1>     call readWriteBytesBinary
  1149 00003222 48893D(79C30300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  1150 00003229 5F                  <1>     pop rdi
  1151 0000322A 8B0D(CEC60300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  1152 00003230 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  1153 00003232 742A                <1>     jz readExitOk ;Exit if so!
  1154 00003234 E819DBFFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  1155 00003239 7214                <1>     jc .badExit
  1156 0000323B 7421                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  1157                              <1>     ;Else repeat
  1158                              <1>     ;currSectD has been updated, we now set currByteS = 0
  1159 0000323D 66C705(B7C60300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  1159 00003245 00                  <1>
  1160 00003246 488B05(AFC60300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  1161 0000324D EB92                <1>     jmp short .mainRead
  1162                              <1> .badExit:
  1163                              <1>     ;When a disk error occurs within the bit where vars have changed,
  1164                              <1>     ; we need to update the SFT before returning
  1165 0000324F 8B0D(CEC60300)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  1166 00003255 30C0                <1>     xor al, al  ;Set ZF flag
  1167 00003257 E802000000          <1>     call readExitOk   ;We call this
  1168 0000325C F9                  <1>     stc ;All calls which end up here return Fail!
  1169 0000325D C3                  <1>     ret
  1170                              <1> 
  1171                              <1> readExitOk:
  1172                              <1> ;Input: ecx = Number of bytes left to transfer!
  1173                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  1174 0000325E 890D(CEC60300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  1175 00003264 7509                <1>     jnz .skipbitClear
  1176 00003266 E846040000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
  1177                              <1>     ;The disk transfer must've flushed by now. 
  1178 0000326B 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokFileToFlush|charDevNoEOF) ;OR
  1179                              <1>     ;Next char dev read should give EOF.
  1180                              <1> .skipbitClear:  ;Or skip that entirely
  1181 0000326F E845040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  1182                              <1>     return 
    18                              <2> %%_ret:
    19 00003274 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1183                              <1> 
  1184                              <1> writeBytes:
  1185                              <1> ;Writes the bytes from the user buffer
  1186                              <1> ;Input: ecx = Bytes to xfr
  1187                              <1> ;Returns number of bytes written in ecx
  1188 00003275 E837040000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1189 0000327A 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1190 0000327E 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1191 00003280 3C00                <1>     cmp al, ReadAccess
  1192 00003282 7509                <1>     jne .writeable
  1193                              <1> .noWrite:
  1194 00003284 B805000000          <1>     mov eax, errAccDen
  1195 00003289 31C9                <1>     xor ecx, ecx
  1196 0000328B F9                  <1>     stc
  1197 0000328C C3                  <1>     ret
  1198                              <1> .writeable:
  1199 0000328D 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1200 00003293 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  1201 00003295 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  1202 00003299 74E9                <1>     je .noWrite ;If the file is read only, RIP
  1203                              <1> .skipAttribCheck:
  1204 0000329B E852040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  1205 000032A0 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1206 000032A6 7408                <1>     jz .notRedir
  1207 000032A8 B809110000          <1>     mov eax, 1109h  ;Write to redir
  1208 000032AD CD4F                <1>     int 4Fh
  1209                              <1>     return
    18                              <2> %%_ret:
    19 000032AF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1210                              <1> .notRedir:
  1211 000032B0 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1212 000032B6 7510                <1>     jnz writeCharDev
  1213 000032B8 E88E1D0000          <1>     call dosCrit1Enter
  1214 000032BD E84C010000          <1>     call writeDiskFile
  1215 000032C2 E88E1D0000          <1>     call dosCrit1Exit
  1216                              <1>     return
    18                              <2> %%_ret:
    19 000032C7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1217                              <1> writeCharDev:
  1218 000032C8 C605(6CC30300)04    <1>     mov byte [errorLocus], eLocChr
  1219                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  1220 000032CF 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  1221 000032D5 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1222                              <1>     ;If ecx = 0, we exit
  1223 000032D9 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  1224 000032DB 85C9                <1>     test ecx, ecx
  1225 000032DD 0F84AF030000        <1>     jz writeExit
  1226 000032E3 488B1D(79C30300)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  1227 000032EA 4889DF              <1>     mov rdi, rbx
  1228 000032ED 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  1229 000032EF A820                <1>     test al, charDevBinary
  1230 000032F1 744A                <1>     jz .asciiDev
  1231                              <1> ;Write binary transfer here
  1232                              <1> .binaryLp:
  1233 000032F3 31C0                <1>     xor eax, eax
  1234 000032F5 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1235 000032F8 E8CC170000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1236 000032FD 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
  1237 00003304 E823150000          <1>     call goDriverChar
  1238 00003309 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  1239 0000330C B487                <1>     mov ah, critCharDev | critData | critWrite
  1240 0000330E 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1241 00003315 F7C700800000        <1>     test edi, drvErrStatus
  1242 0000331B 7415                <1>     jz .binXfrOk
  1243 0000331D E8E1130000          <1>     call charDevErr ;Invoke Int 44h
  1244 00003322 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  1245 00003325 3C00                <1>     cmp al, critIgnore
  1246 00003327 7409                <1>     je .binXfrOk
  1247 00003329 3C01                <1>     cmp al, critRetry
  1248 0000332B 74C6                <1>     je .binaryLp
  1249 0000332D E9D5000000          <1>     jmp .exitFail
  1250                              <1> .binXfrOk:
  1251 00003332 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  1252 00003338 E955030000          <1>     jmp writeExit   ;Exit oki with # bytes xfrd in eax
  1253                              <1> .asciiDev:
  1254 0000333D A802                <1>     test al, charDevConOut
  1255 0000333F 0F859E000000        <1>     jnz .conDev
  1256 00003345 A804                <1>     test al, charDevNulDev
  1257 00003347 0F858F000000        <1>     jnz .nulDev
  1258                              <1>     ;Here we transfer for a generic character device in ascii mode
  1259 0000334D 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  1260 0000334F 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  1261 00003352 0F843A030000        <1>     je writeExit
  1262 00003358 51                  <1>     push rcx
  1263 00003359 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  1264 0000335E 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1265 00003361 E863170000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1266 00003366 59                  <1>     pop rcx
  1267 00003367 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
  1268 0000336E 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  1269                              <1> .asciiLp:
  1270 00003372 E81BEDFFFF          <1>     call checkBreak
  1271 00003377 E8B4140000          <1>     call goDriver
  1272 0000337C 57                  <1>     push rdi
  1273 0000337D B487                <1>     mov ah, critCharDev | critData | critWrite
  1274 0000337F 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1275 00003386 F7C700800000        <1>     test edi, drvErrStatus
  1276 0000338C 741D                <1>     jz .asciiNoError
  1277 0000338E E870130000          <1>     call charDevErr ;Invoke Int 44h
  1278 00003393 5F                  <1>     pop rdi
  1279 00003394 C705(38C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  1279 0000339C 0000                <1>
  1280 0000339E 3C01                <1>     cmp al, critRetry
  1281 000033A0 74D0                <1>     je .asciiLp
  1282 000033A2 3C00                <1>     cmp al, critIgnore
  1283 000033A4 7412                <1>     je .ignoreEp
  1284 000033A6 E95C000000          <1>     jmp .exitFail
  1285                              <1> .asciiNoError:
  1286 000033AB 5F                  <1>     pop rdi
  1287 000033AC 813D(38C40300)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  1287 000033B4 0000                <1>
  1288 000033B6 741D                <1>     je .bytesXfrdOk
  1289                              <1> .ignoreEp:
  1290 000033B8 FFC2                <1>     inc edx ;One more char has been xfrd
  1291 000033BA FF05(30C40300)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  1292 000033C0 48FFC7              <1>     inc rdi ;And our copy... 
  1293 000033C3 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  1294 000033C6 740D                <1>     je .bytesXfrdOk
  1295 000033C8 66C705(25C40300)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  1295 000033D0 00                  <1>
  1296 000033D1 FFC9                <1>     dec ecx
  1297 000033D3 759D                <1>     jnz .asciiLp
  1298                              <1> .bytesXfrdOk:
  1299 000033D5 89D0                <1>     mov eax, edx
  1300 000033D7 E9B6020000          <1>     jmp writeExit
  1301                              <1> .nulDev:
  1302 000033DC 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  1303 000033DE E9AF020000          <1>     jmp writeExit
  1304                              <1> .conDev:
  1305 000033E3 E826EDFFFF          <1>     call vConSwapDriver
  1306 000033E8 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  1307 000033EB 51                  <1>     push rcx
  1308                              <1> .conDevLp:
  1309 000033EC AC                  <1>     lodsb
  1310 000033ED 3C1A                <1>     cmp al, EOF
  1311 000033EF 7409                <1>     je .conDevExit
  1312 000033F1 E8CAE8FFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  1313 000033F6 FFC9                <1>     dec ecx
  1314 000033F8 75F2                <1>     jnz .conDevLp
  1315                              <1> .conDevExit:
  1316 000033FA 58                  <1>     pop rax ;Get initial ecx back into eax
  1317 000033FB 29C8                <1>     sub eax, ecx
  1318 000033FD E824EDFFFF          <1>     call vConRetDriver
  1319 00003402 E98B020000          <1>     jmp writeExit   ;Input: eax = bytes xfrd
  1320                              <1> .exitFail:
  1321 00003407 B805000000          <1>     mov eax, errAccDen
  1322 0000340C F9                  <1>     stc
  1323                              <1>     return
    18                              <2> %%_ret:
    19 0000340D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1324                              <1> writeDiskFile:
  1325                              <1>     ;rdi has SFT ptr
  1326 0000340E C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk 
  1327 00003415 C605(5AC60300)FF    <1>     mov byte [rwFlag], -1    ;Write operation
  1328 0000341C 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  1329 00003422 0F8547020000        <1>     jnz .badExit
  1330 00003428 31DB                <1>     xor ebx, ebx
  1331 0000342A 891D(C6C60300)      <1>     mov dword [bytesAppend], ebx ;Reset the appending counter
  1332 00003430 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  1333                              <1>     ;If the start cluster is 0, we create a new cluster chain
  1334 00003433 85C0                <1>     test eax, eax
  1335 00003435 7520                <1>     jnz .notStart
  1336 00003437 E83CD8FFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  1337 0000343C 0F8224020000        <1>     jc .exitPrepHardErr
  1338 00003442 3DFFFFFFFF          <1>     cmp eax, -1
  1339 00003447 0F8429020000        <1>     je .exitPrep
  1340                              <1>     ;Now eax has the first cluster of chain
  1341 0000344D 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  1342 00003450 C605(C5C60300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  1343                              <1> .notStart:
  1344 00003457 E8CFD7FFFF          <1>     call getLastClusterInChain  ;to get the current last cluster in the file
  1345 0000345C 8905(C1C60300)      <1>     mov dword [lastClustA], eax
  1346 00003462 E8DDD7FFFF          <1>     call getNumberOfClustersInChain ;Gets number of clusters
  1347 00003467 FFC8                <1>     dec eax ;Turn into an offset of clusters in file
  1348 00003469 8905(BDC60300)      <1>     mov dword [lastClust], eax
  1349                              <1>     ;Get the disk cluster of the file (currClustD)
  1350 0000346F 8B0D(A2C60300)      <1>     mov ecx, dword [currClustF]
  1351 00003475 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]
  1352 00003478 E8E2D7FFFF          <1>     call getClusterInChain  ;Returns in eax the disk cluster value
  1353 0000347D 0F82EC010000        <1>     jc .badExit
  1354                              <1>     ;ecx has the number of clusters we need to extend the allocation by.
  1355 00003483 67E36A              <1>     jecxz .skipExtension
  1356 00003486 E879D8FFFF          <1>     call findFreeClusterData    ;This updates the dpb to have free cluster data
  1357 0000348B 0F82DE010000        <1>     jc .badExit
  1358 00003491 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters
  1359 00003496 0F84F4010000        <1>     je .noByteExit
  1360 0000349C 394D31              <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], ecx
  1361 0000349F 0F82EB010000        <1>     jb .noByteExit    ;If dNumberOfFreeClusters < ecx, exit
  1362                              <1>     ;Enough to extend by ecx amount
  1363 000034A5 8B1D(C1C60300)      <1>     mov ebx, dword [lastClustA] ;Get the last disk cluster of the file
  1364 000034AB E8E9D7FFFF          <1>     call allocateClusters   ;Extend by ecx clusters
  1365 000034B0 0F82B9010000        <1>     jc .badExit
  1366 000034B6 010D(BDC60300)      <1>     add dword [lastClust], ecx  
  1367 000034BC 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]
  1368 000034BF 8B0D(BDC60300)      <1>     mov ecx, dword [lastClust]
  1369 000034C5 E895D7FFFF          <1>     call getClusterInChain
  1370 000034CA 0F829F010000        <1>     jc .badExit
  1371                              <1>     ;eax has the last cluster on disk
  1372 000034D0 8905(C1C60300)      <1>     mov dword [lastClustA], eax
  1373                              <1>     ;Now we must extend the filesize in the SFT
  1374 000034D6 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  1375 000034D9 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  1376 000034DC 31C0                <1>     xor eax, eax
  1377 000034DE 8505(CAC60300)      <1>     test dword [tfrLen], eax
  1378 000034E4 0F84A8010000        <1>     jz writeExit    ;If we were extending the file, we are done
  1379 000034EA 8B05(C1C60300)      <1>     mov eax, dword [lastClustA] ;Get the absolute last cluster
  1380                              <1> .skipExtension:
  1381 000034F0 8905(A6C60300)      <1>     mov dword [currClustD], eax ;Now eax has the currClustD value
  1382                              <1>     ;Get the disk sector too
  1383 000034F6 E817D7FFFF          <1>     call getStartSectorOfCluster
  1384 000034FB 0FB61D(AEC60300)    <1>     movzx ebx, byte [currSectC] ;Add the in cluster sector offset
  1385 00003502 01D8                <1>     add eax, ebx    ;Add the offset to eax
  1386 00003504 8905(AFC60300)      <1>     mov dword [currSectD], eax 
  1387                              <1>     ;If tfrLen = 0, we truncate to current file pointer position, rounding up
  1388                              <1>     ; clusterwise!
  1389 0000350A 8B0D(CAC60300)      <1>     mov ecx, dword [tfrLen] ;Get the number of bytes to transfer in ecx
  1390 00003510 85C9                <1>     test ecx, ecx
  1391 00003512 0F8438010000        <1>     jz .truncate
  1392                              <1>     ;Here we write proper data to the disk file
  1393                              <1> .writeLoop:
  1394 00003518 0FB705(B7C60300)    <1>     movzx eax, word [currByteS] ;Get bytewise sector offset
  1395 0000351F 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  1396 00003523 29C1                <1>     sub ecx, eax    ;Get bytes left to fill this sector in ecx
  1397 00003525 8B05(CEC60300)      <1>     mov eax, dword [tfrCntr] ;Get # bytes left to transfer
  1398 0000352B 6639C1              <1>     cmp cx, ax  ;Is # of bytes leftto tfr less than bytes left in sector?
  1399 0000352E 660F47C8            <1>     cmova cx, ax    ;If yes, swap
  1400 00003532 66890D(A0C60300)    <1>     mov word [sectTfr], cx  ;Save this value in the var
  1401 00003539 0FB605(AEC60300)    <1>     movzx eax, byte [currSectC] ;Get sector offset in cluster
  1402 00003540 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
  1403 00003543 0F8689000000        <1>     jbe .stayInCluster
  1404                              <1>     ;Get next Cluster information here
  1405 00003549 8B05(A6C60300)      <1>     mov eax, dword [currClustD] ;Get disk cluster
  1406 0000354F 3B05(C1C60300)      <1>     cmp eax, dword [lastClustA] ;Is this the last sector?
  1407 00003555 7543                <1>     jne .nextCluster
  1408                              <1>     ;Growing the file
  1409 00003557 C605(C5C60300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true
  1410 0000355E B901000000          <1>     mov ecx, 1  ;Request 1 cluster
  1411 00003563 89C3                <1>     mov ebx, eax    ;Save the last cluster number in eax
  1412 00003565 E82FD7FFFF          <1>     call allocateClusters
  1413 0000356A 0F82F6000000        <1>     jc .exitPrepHardErr
  1414 00003570 3DFFFFFFFF          <1>     cmp eax, -1 ;If eax = -1 then disk full condition
  1415 00003575 0F82FB000000        <1>     jc .exitPrep
  1416 0000357B 89D8                <1>     mov eax, ebx    ;ebx is preserved
  1417 0000357D E85CD8FFFF          <1>     call walkFAT    ;Goto next cluster now, return in eax next cluster
  1418 00003582 0F82DE000000        <1>     jc .exitPrepHardErr
  1419 00003588 FF05(BDC60300)      <1>     inc dword [lastClust]
  1420 0000358E 8905(C1C60300)      <1>     mov dword [lastClustA], eax ;Now eax is the new last cluster
  1421 00003594 8B05(A6C60300)      <1>     mov eax, dword [currClustD] ;Get the old last cluster
  1422                              <1>     ;eax now has the old last sector
  1423                              <1> .nextCluster:
  1424                              <1>     ;eax has old disk cluster information
  1425 0000359A E83FD8FFFF          <1>     call walkFAT    ;Get the next disk cluster in eax
  1426 0000359F 0F82C1000000        <1>     jc .exitPrepHardErr
  1427 000035A5 8905(A6C60300)      <1>     mov dword [currClustD], eax
  1428 000035AB FF05(A2C60300)      <1>     inc dword [currClustF]
  1429 000035B1 E85CD6FFFF          <1>     call getStartSectorOfCluster
  1430 000035B6 488905(AFC60300)    <1>     mov qword [currSectD], rax
  1431 000035BD FF05(AAC60300)      <1>     inc dword [currSectF]
  1432 000035C3 31C0                <1>     xor eax, eax
  1433 000035C5 8805(AEC60300)      <1>     mov byte [currSectC], al  ;Sector zero in cluster
  1434 000035CB 668905(B7C60300)    <1>     mov word [currByteS], ax  ;And byte zero of this sector in the cluster
  1435                              <1> .stayInCluster:
  1436 000035D2 488B05(AFC60300)    <1>     mov rax, qword [currSectD]  ;Get disk sector
  1437 000035D9 E855D5FFFF          <1>     call getBufForData
  1438 000035DE 0F8282000000        <1>     jc .exitPrepHardErr
  1439                              <1>     ;rbx points to disk buffer header
  1440 000035E4 0FB705(B7C60300)    <1>     movzx eax, word [currByteS] 
  1441 000035EB 488D5C0330          <1>     lea rbx, qword [rbx + bufferHdr.dataarea + rax] ;In sector offset
  1442                              <1>     ;rbx points to the current byte to write at
  1443 000035F0 57                  <1>     push rdi
  1444 000035F1 56                  <1>     push rsi
  1445 000035F2 4889DF              <1>     mov rdi, rbx    ;The sector is the destination of the write
  1446 000035F5 488B35(79C30300)    <1>     mov rsi, qword [currentDTA] ;Get the user buffer as the source
  1447 000035FC 0FB70D(A0C60300)    <1>     movzx ecx, word [sectTfr]   ;Get # of bytes to write
  1448 00003603 F3A4                <1>     rep movsb   ;Move over cx number of bytes
  1449 00003605 488935(79C30300)    <1>     mov qword [currentDTA], rsi ;Update currentDTA
  1450 0000360C 5E                  <1>     pop rsi
  1451 0000360D 5F                  <1>     pop rdi
  1452 0000360E E88CD3FFFF          <1>     call setBufferReferenced
  1453 00003613 E878D3FFFF          <1>     call setBufferDirty
  1454 00003618 0FB70D(A0C60300)    <1>     movzx ecx, word [sectTfr]
  1455 0000361F F605(C5C60300)FF    <1>     test byte [fileGrowing], -1
  1456 00003626 7406                <1>     jz .notGrowing
  1457 00003628 010D(C6C60300)      <1>     add dword [bytesAppend], ecx
  1458                              <1> .notGrowing:
  1459 0000362E 290D(CEC60300)      <1>     sub dword [tfrCntr], ecx
  1460 00003634 7440                <1>     jz .exitPrep
  1461 00003636 31C0                <1>     xor eax, eax
  1462 00003638 668905(B7C60300)    <1>     mov word [currByteS], ax    ;Start of the next sector
  1463 0000363F 010D(B9C60300)      <1>     add dword [currByteF], ecx  ;Goto the next sector in the file
  1464 00003645 FE05(AEC60300)      <1>     inc byte [currSectC]    ;Increment sector in cluster now
  1465 0000364B E9C8FEFFFF          <1>     jmp .writeLoop
  1466                              <1> 
  1467                              <1> .truncate:
  1468                              <1> ;We must free the chain from currClustD
  1469 00003650 8B05(A6C60300)      <1>     mov eax, dword [currClustD]
  1470 00003656 E85ED7FFFF          <1>     call truncateFAT    ;Truncate from the current cluster
  1471 0000365B 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  1472 0000365E 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  1473 00003661 E92A000000          <1>     jmp .noByteExit ;Exit ok!
  1474                              <1> .exitPrepHardErr:
  1475 00003666 50                  <1>     push rax    ;Save error code
  1476 00003667 E80A000000          <1>     call .exitPrep
  1477 0000366C 58                  <1>     pop rax
  1478                              <1> .badExitHard:    ;AL has error code already
  1479 0000366D F9                  <1>     stc
  1480                              <1>     return
    18                              <2> %%_ret:
    19 0000366E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1481                              <1> .badExit:
  1482                              <1> ;Might need to do some weird stuff later. Leave for now
  1483 0000366F B805000000          <1>     mov eax, errAccDen
  1484 00003674 EBF7                <1>     jmp short .badExitHard
  1485                              <1> 
  1486                              <1> .exitPrep:
  1487 00003676 8B0D(C6C60300)      <1>     mov ecx, dword [bytesAppend]
  1488 0000367C 014F17              <1>     add dword [rdi + sft.dFileSize], ecx    ;Add these bytes to the filesize
  1489 0000367F 8B05(CAC60300)      <1>     mov eax, dword [tfrLen]
  1490 00003685 2B05(CEC60300)      <1>     sub eax, dword [tfrCntr]    ;Subtract by bytes left to tfr
  1491 0000368B E902000000          <1>     jmp writeExit
  1492                              <1> 
  1493                              <1> .noByteExit:
  1494 00003690 31C0                <1>     xor eax, eax
  1495                              <1> writeExit:
  1496                              <1> ;Advances the bytes on the file pointer
  1497                              <1> ;eax = Number of bytes transferred
  1498 00003692 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1499 00003699 89C1                <1>     mov ecx, eax
  1500 0000369B E801000000          <1>     call .advPtr
  1501                              <1>     return  ;Return to caller, ecx = # bytes xfrd
    18                              <2> %%_ret:
    19 000036A0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1502                              <1> .advPtr:
  1503 000036A1 67E303              <1>     jecxz .exit
  1504 000036A4 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx
  1505                              <1> .exit:
  1506 000036A7 F8                  <1>     clc
  1507                              <1>     return
    18                              <2> %%_ret:
    19 000036A8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1508                              <1> 
  1509                              <1> ;-----------------------------------:
  1510                              <1> ;        File Handle routines       :
  1511                              <1> ;-----------------------------------:
  1512                              <1> 
  1513                              <1> setCurrentSFT:
  1514                              <1> ;Set the pointer in rdi as current SFT 
  1515 000036A9 48893D(84C60300)    <1>     mov qword [currentSFT], rdi
  1516                              <1>     return 
    18                              <2> %%_ret:
    19 000036B0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1517                              <1> getCurrentSFT:
  1518                              <1> ;Get the current SFT pointer in rdi
  1519 000036B1 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1520                              <1>     return 
    18                              <2> %%_ret:
    19 000036B8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1521                              <1> updateCurrentSFT:
  1522                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  1523                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  1524 000036B9 57                  <1>     push rdi
  1525 000036BA 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1526 000036C1 8B0D(CAC60300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
  1527 000036C7 2B0D(CEC60300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
  1528                              <1>     ;ecx has bytes transferred
  1529 000036CD 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  1530 000036D3 751A                <1>     jnz .exit
  1531 000036D5 50                  <1>     push rax
  1532 000036D6 8B05(A6C60300)      <1>     mov eax, dword [currClustD]
  1533 000036DC 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  1534 000036DF 8B05(A2C60300)      <1>     mov eax, dword [currClustF]
  1535 000036E5 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  1536 000036E8 58                  <1>     pop rax
  1537 000036E9 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
  1538 000036EC 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  1539                              <1> .exit:
  1540 000036EF 5F                  <1>     pop rdi
  1541 000036F0 F8                  <1>     clc
  1542                              <1>     return 
    18                              <2> %%_ret:
    19 000036F1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1543                              <1> setupVarsForTransfer:
  1544                              <1> ;Computes the actual bytes to be transferred and 
  1545                              <1> ; sets up internal variables for the transfer. 
  1546                              <1> ;Works for both reading and writing
  1547                              <1> ;Input: ecx = User desired Bytes to transfer
  1548                              <1> ;       rdi = SFT pointer for the file
  1549                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  1550                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  1551                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  1552                              <1> ;
  1553                              <1> ;Note: Does not account for a FULL disk. When writing,
  1554                              <1> ; if the disk will get full as a result of the write,
  1555                              <1> ; stop at the last byte before the transfer. If the 
  1556                              <1> ; file pointer is past the last free byte, write 0
  1557 000036F2 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  1558 000036F6 488935(64C60300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  1559 000036FD 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  1560 00003700 8905(B9C60300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  1561 00003706 890D(CAC60300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  1562 0000370C 890D(CEC60300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  1563 00003712 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  1564 00003718 7402                <1>     jz setupVarsForDiskTransfer
  1565 0000371A F8                  <1>     clc
  1566                              <1>     return
    18                              <2> %%_ret:
    19 0000371B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1567                              <1> setupVarsForDiskTransfer:
  1568                              <1> ;Extension of the above, but for Disk files only
  1569                              <1> ;Input: ecx = User desired Bytes to transfer
  1570                              <1> ;       rdi = SFT pointer for the file
  1571                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  1572                              <1> ;        CF=CY: Error exit
  1573 0000371C 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  1574 0000371F 8905(B9C60300)      <1>     mov dword [currByteF], eax
  1575 00003725 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  1576                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  1577 00003729 48892D(64C60300)    <1>     mov qword [workingDPB], rbp
  1578 00003730 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  1579 00003733 881D(63C60300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  1580 00003739 8B05(B9C60300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  1581 0000373F 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  1582 00003743 31D2                <1>     xor edx, edx    ;Zero rdx
  1583 00003745 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  1584                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  1585                              <1>     ;edx has the offset into that sector
  1586 00003747 8905(AAC60300)      <1>     mov dword [currSectF], eax
  1587 0000374D 668915(B7C60300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  1588 00003754 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  1589 00003756 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  1590 00003759 8805(AEC60300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  1591 0000375F 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  1592 00003761 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  1593 00003764 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  1594 00003766 8915(A2C60300)      <1>     mov dword [currClustF], edx ;Save in var
  1595 0000376C 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  1596                              <1> .exit:
  1597 0000376E F8                  <1>     clc
  1598                              <1>     return 
    18                              <2> %%_ret:
    19 0000376F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1599                              <1> findFreeSFT:
  1600                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  1601                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  1602                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  1603                              <1> ;        CF=CY => eax = errNhl, error exit
  1604 00003770 31DB                <1>     xor ebx, ebx
  1605                              <1> .mainLp:
  1606 00003772 53                  <1>     push rbx    ;Save the sft ndx
  1607 00003773 E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  1608 00003778 5B                  <1>     pop rbx
  1609 00003779 7307                <1>     jnc .sftExists
  1610 0000377B B804000000          <1>     mov eax, errNhl
  1611 00003780 F9                  <1>     stc
  1612                              <1>     return
    18                              <2> %%_ret:
    19 00003781 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1613                              <1> .sftExists:
  1614 00003782 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  1615 00003787 7427                <1>     je .sftFound
  1616 00003789 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  1617 0000378E 751C                <1>     jne .gotoNextNdx
  1618                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  1619 00003790 53                  <1>     push rbx
  1620 00003791 488B1D(9DC30300)    <1>     mov rbx, qword [serverPSP]
  1621 00003798 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  1622 0000379C 750B                <1>     jne .netGoToNextNdx
  1623 0000379E 0FB71D(A5C30300)    <1>     movzx ebx, word [machineNum]
  1624 000037A5 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  1625                              <1> .netGoToNextNdx:
  1626 000037A9 5B                  <1>     pop rbx
  1627 000037AA 7404                <1>     je .sftFound
  1628                              <1> .gotoNextNdx:
  1629 000037AC FFC3                <1>     inc ebx
  1630 000037AE EBC2                <1>     jmp short .mainLp
  1631                              <1> .sftFound:
  1632 000037B0 53                  <1>     push rbx
  1633 000037B1 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  1634 000037B6 488B1D(9DC30300)    <1>     mov rbx, qword [serverPSP]
  1635 000037BD 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  1636 000037C1 0FB71D(A5C30300)    <1>     movzx ebx, word [machineNum]
  1637 000037C8 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  1638 000037CC 5B                  <1>     pop rbx
  1639 000037CD F8                  <1>     clc
  1640                              <1>     return
    18                              <2> %%_ret:
    19 000037CE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1641                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216
  1642                              <1> ;Return a pointer to the SFT entry in rdi
  1643                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  1644                              <1> ;Output: rdi = SFT pointer
  1645 000037CF 488B3D(3BC00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  1646                              <1> .walk:
  1647 000037D6 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  1648 000037DA 7212                <1>     jb .thisTable
  1649 000037DC 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  1650 000037E0 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  1651 000037E3 4881FFFFFFFFFF      <1>     cmp rdi, -1
  1652 000037EA 75EA                <1>     jne .walk
  1653 000037EC F9                  <1>     stc
  1654                              <1>     return
    18                              <2> %%_ret:
    19 000037ED C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1655                              <1> .thisTable:
  1656 000037EE 50                  <1>     push rax
  1657 000037EF 52                  <1>     push rdx
  1658 000037F0 B84F000000          <1>     mov eax, sft_size
  1659 000037F5 F7E3                <1>     mul ebx
  1660 000037F7 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  1661 000037FA 5A                  <1>     pop rdx
  1662 000037FB 58                  <1>     pop rax
  1663 000037FC 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  1664                              <1>     return
    18                              <2> %%_ret:
    19 00003803 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1665                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
  1666                              <1> ;Return a zero extended value in rdi for the SFT entry
  1667                              <1> ;Input: bx = JFT handle (we zero extend)
  1668                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
  1669                              <1> ;        CF=CY => al = Error code, Fail
  1670 00003804 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  1671 00003807 663B1D(97C00300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
  1672 0000380E 7204                <1>     jb .ok
  1673 00003810 B006                <1>     mov al, errBadHdl
  1674 00003812 F9                  <1>     stc
  1675                              <1>     return
    18                              <2> %%_ret:
    19 00003813 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1676                              <1> .ok:
  1677 00003814 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
  1678 0000381B 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  1679 00003820 F8                  <1>     clc
  1680                              <1>     return
    18                              <2> %%_ret:
    19 00003821 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1681                              <1> findFreeJFTEntry:
  1682                              <1> ;Finds a free JFT entry in the currentPSP.
  1683                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  1684                              <1> ;        CF=CY => al=errNhl
  1685 00003822 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  1686                              <1> .searchLp:
  1687 00003824 E8DBFFFFFF          <1>     call getJFTPtr
  1688 00003829 7209                <1>     jc .badExit
  1689 0000382B 803FFF              <1>     cmp byte [rdi], -1
  1690                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000382E 74F1                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1691 00003830 FFC3                <1>     inc ebx
  1692 00003832 EBF0                <1>     jmp short .searchLp
  1693                              <1> .badExit:
  1694 00003834 B004                <1>     mov al, errNhl
  1695 00003836 F9                  <1>     stc
  1696                              <1>     return
    18                              <2> %%_ret:
    19 00003837 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1697                              <1> getSFTPtr:
  1698                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  1699                              <1> ;Input: bx = JFT handle
  1700                              <1> ;Output: CF=NC: rdi = SFT pointer
  1701                              <1> ;        CF=CY: Error, ax=Error code
  1702 00003838 E815000000          <1>     call derefSFTPtr
  1703                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000383D 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1704 0000383F 50                  <1>     push rax
  1705 00003840 0FB705(A5C30300)    <1>     movzx eax, word [machineNum]
  1706 00003847 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  1707 0000384B 58                  <1>     pop rax
  1708                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000384C 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1709 0000384E B006                <1>     mov al, errBadHdl   ;Error code
  1710 00003850 F9                  <1>     stc         ;Reset CF
  1711                              <1>     return
    18                              <2> %%_ret:
    19 00003851 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1712                              <1> 
  1713                              <1> derefSFTPtr:
  1714                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  1715                              <1> ;Input: bx = File handle (gets zero extended)
  1716                              <1> ;Output: CF=NC: rdi = SFT pointer
  1717                              <1> ;        CF=CY: Error, ax=Error code
  1718 00003852 E8ADFFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  1719 00003857 7205                <1>     jb .fail
  1720 00003859 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  1721 0000385C 7504                <1>     jne .ok
  1722                              <1> .fail:
  1723 0000385E B006                <1>     mov al, errBadHdl
  1724 00003860 F9                  <1>     stc
  1725                              <1>     return
    18                              <2> %%_ret:
    19 00003861 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1726                              <1> .ok:
  1727 00003862 53                  <1>     push rbx    ;Preserve the JFT handle
  1728 00003863 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  1729 00003866 E864FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  1730 0000386B 5B                  <1>     pop rbx 
  1731                              <1>     return
    18                              <2> %%_ret:
    19 0000386C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1732                              <1> 
  1733                              <1> getBytesTransferred:
  1734 0000386D 8B0D(CEC60300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  1735 00003873 F7D9                <1>     neg ecx ;Multiply by -1
  1736 00003875 030D(CAC60300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  1737                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 0000387B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1738                              <1> 
  1739                              <1> readWriteBytesBinary:
  1740                              <1> ;Input: ecx = number of bytes to read in Binary mode
  1741                              <1> ;       rdi = Points to where in caller buffer to read/write bytes
  1742                              <1> ;       rsi = Points to where in DOS buffer to write/read pointer
  1743                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
  1744                              <1> ;Preserve rcx so we know how many bytes transferred
  1745                              <1> ;Update the currByteA variable
  1746                              <1> ;Returns (rsi and rdi) + (ecx on entry)
  1747 0000387C 51                  <1>     push rcx
  1748 0000387D F605(5AC60300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
  1749 00003884 7403                <1>     jz .noSwap
  1750 00003886 4887FE              <1>     xchg rdi, rsi
  1751                              <1> .noSwap:
  1752 00003889 F3A4                <1>     rep movsb
  1753 0000388B 59                  <1>     pop rcx
  1754 0000388C 010D(B9C60300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  1755 00003892 290D(CEC60300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  1756                              <1>     return
    18                              <2> %%_ret:
    19 00003898 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1757                              <1> 
  1758                              <1> findFreeJFTSpace:
  1759                              <1> ;Input: [currentPSP] = Task whose PSP we will look through
  1760                              <1> ;If there are no free spaces, then we return with al = errNhl and CF=CY
  1761                              <1> ;Else, a pointer to the free space in rsi and al = -1
  1762 00003899 51                  <1>     push rcx
  1763 0000389A 488B35(81C30300)    <1>     mov rsi, qword [currentPSP]
  1764 000038A1 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]
  1765 000038A8 488D762A            <1>     lea rsi, qword [rsi + psp.jobFileTbl]   ;Point to start of table
  1766                              <1> .search:
  1767 000038AC AC                  <1>     lodsb
  1768 000038AD 3CFF                <1>     cmp al, -1
  1769 000038AF 7407                <1>     je .exit
  1770 000038B1 FFC9                <1>     dec ecx
  1771 000038B3 75F7                <1>     jnz .search
  1772 000038B5 B004                <1>     mov al, errNhl  ;No free handles buddy, sorry
  1773 000038B7 F9                  <1>     stc ;Set error bit
  1774                              <1> .exit:
  1775 000038B8 59                  <1>     pop rcx
  1776                              <1>     return
    18                              <2> %%_ret:
    19 000038B9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1777                              <1> 
  1778                              <1> getSFTndxInheritable:
  1779                              <1> ;Given a SFTndx this function will verify if it is inheritable
  1780                              <1> ;Input: ebx = SFTndx (word)
  1781                              <1> ;Output: 
  1782                              <1> ;   ZF=ZE => Inheritable
  1783                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  1784 000038BA 57                  <1>     push rdi
  1785 000038BB E80FFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  1786 000038C0 7208                <1>     jc .badNdx
  1787 000038C2 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  1788 000038C8 5F                  <1>     pop rdi
  1789                              <1>     return
    18                              <2> %%_ret:
    19 000038C9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1790                              <1> .badNdx:
  1791 000038CA 31FF                <1>     xor edi, edi
  1792 000038CC FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  1793 000038CE F8                  <1>     clc
  1794 000038CF 5F                  <1>     pop rdi
  1795                              <1>     return
    18                              <2> %%_ret:
    19 000038D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1796                              <1> 
  1797                              <1> incrementOpenCount:
  1798                              <1> ;Given a SFTndx, this function will increment it's open count
  1799                              <1> ;Output:
  1800                              <1> ;   CF=NC => sftndx ok, count incremented
  1801                              <1> ;   CF=CY => Bad ndx
  1802 000038D1 57                  <1>     push rdi
  1803 000038D2 E8F8FEFFFF          <1>     call getSFTPtrfromSFTNdx
  1804 000038D7 7203                <1>     jc .exit
  1805 000038D9 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  1806                              <1> .exit:
  1807 000038DC 5F                  <1>     pop rdi
  1808                              <1>     return
    18                              <2> %%_ret:
    19 000038DD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1809                              <1> 
  1810                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
  1811                              <1> ;Input: rdi = SFT pointer
  1812                              <1> ;Output: ax = Original wNumHandles count
  1813 000038DE 9C                  <1>     pushfq
  1814 000038DF 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  1815 000038E2 FFC8                <1>     dec eax     ;Decrement count
  1816 000038E4 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  1817 000038E6 FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  1818                              <1> .exit:
  1819 000038E8 9D                  <1>     popfq
  1820 000038E9 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  1821                              <1>     return
    18                              <2> %%_ret:
    19 000038EC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    31                                  %include "./Source/Kernel/FileIO/ioctl.asm"
    32                              <1> ioctrl:            ;ah = 44h, handle function
    33                              <1> ;Possible subfunctions
    34                              <1> ;al = 00h => Get Handle Information word in dx  x
    35                              <1> ;al = 01h => Set Handle Information word        x
    36                              <1> ;al = 02h => Read from Char device              
    37                              <1> ;al = 03h => Write to Char device               
    38                              <1> ;al = 04h => Read from Block device             
    39                              <1> ;al = 05h => Write to Block device              
    40                              <1> ;al = 06h => Get input status                   
    41                              <1> ;al = 07h => Get output status                  
    42                              <1> ;al = 08h => Is a block device removable?       
    43                              <1> ;al = 09h => Is a logical device local or remote?   
    44                              <1> ;al = 0Ah => Is a handle to a local or remote file? 
    45                              <1> ;al = 0Bh => Change sharing retry count (RESERVED)  
    46                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    47                              <1> ;al = 0Dh => Block device Generic IOCTL request     
    48                              <1> ;al = 0Eh => Get logical device                 
    49                              <1> ;al = 0Fh => Set logical device                 
    50 000038ED 84C0                <1>     test al, al
    51 000038EF 740B                <1>     jz .getDevWord
    52 000038F1 3C01                <1>     cmp al, 1
    53 000038F3 7421                <1>     je .setDevWord
    54 000038F5 B001                <1>     mov al, errInvFnc
    55 000038F7 E98E170000          <1>     jmp extErrExit
    56                              <1> .getDevWord:
    57                              <1>     ;Input: bx = File Handle
    58 000038FC E851FFFFFF          <1>     call derefSFTPtr
    59 00003901 0F8283170000        <1>     jc extErrExit
    60                              <1>     ;Now rdi has ptr to SFT handle
    61 00003907 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    62 0000390B 30C0                <1>     xor al, al
    63 0000390D E817130000          <1>     call getUserRegs
    64 00003912 668916              <1>     mov word [rsi + callerFrame], dx
    65                              <1>     return
    18                              <2> %%_ret:
    19 00003915 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    66                              <1> .setDevWord:
    67                              <1>     ;Input: bx = File Handle
    68                              <1>     ;       dl = Low byte of Device information word 
    69 00003916 E837FFFFFF          <1>     call derefSFTPtr
    70 0000391B 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    71                              <1>     return
    18                              <2> %%_ret:
    19 0000391E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    32                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    33                              <1> ;Memory related functions
    34                              <1> 
    35                              <1> ;-----------------------------------:
    36                              <1> ;  Memory related Kernel routines   :
    37                              <1> ;-----------------------------------:
    38                              <1> allocateMemory:    ;ah = 48h
    39                              <1> ;Input: ebx = Number of paragraphs requested
    40                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    41                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    42 0000391F E827170000          <1>     call dosCrit1Enter
    43 00003924 31D2                <1>     xor edx, edx
    44                              <1>     ;Clear the pointers
    45 00003926 488915(A7C30300)    <1>     mov qword [firstMCB], rdx
    46 0000392D 488915(AFC30300)    <1>     mov qword [bestMCB], rdx
    47 00003934 488915(B7C30300)    <1>     mov qword [lastMCB], rdx
    48 0000393B 31ED                <1>     xor ebp, ebp    
    49 0000393D FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    50 0000393F 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    51                              <1> .walk:
    52 00003946 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    53 00003949 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    54 0000394C 7409                <1>     je .walk1
    55 0000394E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    56 00003951 0F8500050000        <1>     jne badMCBChain
    57                              <1> .walk1:
    58                              <1>     ;Here if valid but not the last block
    59 00003957 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    60 0000395F 0F8582000000        <1>     jne .walk2
    61                              <1>     ;Here we consolidate adjacent free blocks if there are any
    62                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    63                              <1>     ;End consolidation at first non free block or at last block in chain
    64 00003965 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    65 00003968 744A                <1>     je .det0    ;Determine if this block is useful
    66 0000396A 31C9                <1>     xor ecx, ecx
    67 0000396C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    68 0000396F 4881C610000000      <1>     add rsi, mcb.program
    69                              <1> .cons0:
    70 00003976 48C1E104            <1>     shl rcx, 4
    71 0000397A 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    72 0000397D 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    73 00003980 7409                <1>     je .cons1
    74 00003982 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    75 00003985 0F85CC040000        <1>     jne badMCBChain 
    76                              <1> .cons1:
    77 0000398B 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    78 00003993 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    79                              <1>     ;Here rsi, points to a free block, add it to rdi
    80 00003995 31C9                <1>     xor ecx, ecx
    81 00003997 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    82 0000399A 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    83 000039A0 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    84 000039A3 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    85 000039A5 31D2                <1>     xor edx, edx
    86 000039A7 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    87 000039AA 48895608            <1>     mov qword [rsi + 8], rdx
    88 000039AE 3C5A                <1>     cmp al, mcbMarkEnd
    89 000039B0 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    90                              <1>     ;Here we deal with if the block was the last one 
    91 000039B2 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    92                              <1> .det0:  ;Now determine if pointer in rdi is useful
    93 000039B4 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    94                              <1> ;ebx must be less than the arena size for the arena to be useful!
    95 000039B7 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    96 000039BA 39D9                <1>     cmp ecx, ebx
    97 000039BC 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    98 000039BE 488935(B7C30300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    99 000039C5 488B05(A7C30300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
   100 000039CC 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
   101 000039CF 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
   102 000039D1 488935(A7C30300)    <1>     mov qword [firstMCB], rsi
   103                              <1> .det1:
   104                              <1>     ;Now test for best fit.
   105 000039D8 29D9                <1>     sub ecx, ebx    ;Block - ebx
   106 000039DA 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   107 000039DC 7209                <1>     jb .walk2
   108 000039DE 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   109 000039E0 488935(AFC30300)    <1>     mov qword [bestMCB], rsi
   110                              <1> .walk2:
   111 000039E7 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   112 000039EA 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   113 000039EC 31C9                <1>     xor ecx, ecx
   114 000039EE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   115 000039F1 48C1E104            <1>     shl rcx, 4
   116 000039F5 4881C610000000      <1>     add rsi, mcb.program
   117 000039FC 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   118 000039FF E942FFFFFF          <1>     jmp .walk
   119                              <1> .allocate:
   120                              <1>     ;Allocation fails IF the pointer is the null pointer
   121 00003A04 803D(35C30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   122 00003A0B 7266                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   123                              <1>     ;Fall thru if last fit
   124 00003A0D 488B35(B7C30300)    <1>     mov rsi, qword [lastMCB]
   125 00003A14 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   126 00003A17 0F84D8000000        <1>     jz .allocFail
   127 00003A1D 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   128 00003A1F C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   129 00003A22 31C9                <1>     xor ecx, ecx
   130 00003A24 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   131 00003A27 29D9                <1>     sub ecx, ebx
   132 00003A29 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   133 00003A2F 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   134 00003A32 48C1E104            <1>     shl rcx, 4
   135 00003A36 4881C610000000      <1>     add rsi, mcb.program
   136 00003A3D 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   137 00003A40 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   138 00003A42 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   139 00003A45 488B15(81C30300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   140 00003A4C 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   141 00003A50 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   142 00003A57 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   143 00003A5E 4889F0              <1>     mov rax, rsi
   144 00003A61 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   145 00003A64 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   146 00003A68 E8BD030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   147 00003A6D E8E3150000          <1>     call dosCrit1Exit
   148                              <1>     return
    18                              <2> %%_ret:
    19 00003A72 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   149                              <1> .bfCommon:
   150 00003A73 488B35(A7C30300)    <1>     mov rsi, qword [firstMCB]
   151 00003A7A 803D(35C30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   152 00003A81 480F4435(AFC30300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   153 00003A89 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   154 00003A8C 7467                <1>     jz .allocFail
   155 00003A8E 8A06                <1>     mov al, byte [rsi + mcb.marker]
   156 00003A90 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   157 00003A93 31C9                <1>     xor ecx, ecx
   158 00003A95 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   159 00003A98 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   160 00003A9A 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   161 00003AA0 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   162 00003AA3 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   163 00003AAA 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   164 00003AAE 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   165 00003AB1 4881C610000000      <1>     add rsi, mcb.program
   166 00003AB8 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   167 00003ABE 48C1E304            <1>     shl rbx, 4
   168 00003AC2 4801DE              <1>     add rsi, rbx
   169 00003AC5 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   170 00003AC7 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   171 00003ACF 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   172 00003AD2 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   173 00003AD9 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   174 00003AE0 4889F8              <1>     mov rax, rdi
   175 00003AE3 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   176 00003AE6 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   177 00003AEA E83B030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   178 00003AEF E861150000          <1>     call dosCrit1Exit
   179                              <1>     return
    18                              <2> %%_ret:
    19 00003AF4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   180                              <1> .allocFail:
   181                              <1>     ;Walk the MCB chain to determine the biggest block size
   182 00003AF5 488B35(2BC00300)    <1>     mov rsi, [mcbChainPtr]
   183 00003AFC 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   184                              <1> .af0:
   185 00003AFE 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   186 00003B01 7409                <1>     je .af1
   187 00003B03 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   188 00003B06 0F854B030000        <1>     jne badMCBChain
   189                              <1> .af1:
   190 00003B0C 31C9                <1>     xor ecx, ecx
   191 00003B0E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   192 00003B11 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   193 00003B19 7505                <1>     jne .af2
   194 00003B1B 39D9                <1>     cmp ecx, ebx
   195 00003B1D 0F47D9              <1>     cmova ebx, ecx
   196                              <1> .af2:
   197 00003B20 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   198 00003B23 7410                <1>     je .afExit
   199 00003B25 48C1E104            <1>     shl rcx, 4
   200 00003B29 4881C610000000      <1>     add rsi, mcb.program
   201 00003B30 4801CE              <1>     add rsi, rcx
   202 00003B33 EBD7                <1>     jmp short .af1
   203                              <1> .afExit:
   204 00003B35 B808000000          <1>     mov eax, errNoMem
   205 00003B3A 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   206 00003B41 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   207 00003B44 E910030000          <1>     jmp mcbErrHdlr
   208                              <1> freeMemory:        ;ah = 49h
   209                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   210                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   211                              <1> ;Always skip the first block as this is the anchor for DOS
   212 00003B49 E8FD140000          <1>     call dosCrit1Enter
   213 00003B4E 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   214 00003B55 31C9                <1>     xor ecx, ecx
   215 00003B57 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   216 00003B5E 4889F7              <1>     mov rdi, rsi
   217 00003B61 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   218 00003B64 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   219 00003B68 4881C610000000      <1>     add rsi, mcb.program
   220 00003B6F 4801CE              <1>     add rsi, rcx    ;Go to next block
   221                              <1> .mainLoop:
   222 00003B72 31C9                <1>     xor ecx, ecx
   223 00003B74 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   224 00003B77 7409                <1>     je .valid
   225 00003B79 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   226 00003B7C 0F85D5020000        <1>     jne badMCBChain
   227                              <1> .valid:
   228 00003B82 4939F0              <1>     cmp r8, rsi
   229 00003B85 741C                <1>     je .blockFound
   230                              <1>     ;Not valid, check if last block in chain
   231 00003B87 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   232 00003B8A 0F84A5000000        <1>     je .blockError
   233 00003B90 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 00003B93 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 00003B97 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   236 00003B9E 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 00003BA1 EBCF                <1>     jmp short .mainLoop
   238                              <1> .blockFound:
   239                              <1>     ;If hole, error.
   240                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   241 00003BA3 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   242 00003BAB 0F8484000000        <1>     je .blockError
   243 00003BB1 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   244 00003BB9 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   245 00003BC1 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   246                              <1>     ;It is, let it absorb this space
   247 00003BC3 31C9                <1>     xor ecx, ecx
   248 00003BC5 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   249 00003BC8 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   250 00003BCE 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   251                              <1>     ;Replace block marker
   252 00003BD1 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   253 00003BD3 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   254 00003BD5 31C9                <1>     xor ecx, ecx
   255 00003BD7 48890E              <1>     mov qword [rsi], rcx
   256 00003BDA 48894E08            <1>     mov qword [rsi + 8], rcx
   257 00003BDE 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   258                              <1> .blockFoundCheckFollowing:
   259                              <1>     ;First check if we are the last block in chain
   260 00003BE1 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   261 00003BE4 7439                <1>     je .blockFoundExit  ;If yes, exit!
   262 00003BE6 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   263 00003BE9 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   264 00003BEC 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   265 00003BF0 4881C110000000      <1>     add rcx, mcb.program
   266 00003BF7 4801CE              <1>     add rsi, rcx    ;Go to next block
   267 00003BFA 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   268 00003C02 751B                <1>     jne .blockFoundExit ;If not free, exit
   269                              <1>     ;If free, absorb into block pointed to by rdi
   270 00003C04 31C9                <1>     xor ecx, ecx
   271 00003C06 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   272 00003C09 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   273 00003C0F 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   274                              <1>     ;Replace block marker
   275 00003C12 8A06                <1>     mov al, byte [rsi + mcb.marker]
   276 00003C14 8807                <1>     mov byte [rdi + mcb.marker], al
   277 00003C16 31C9                <1>     xor ecx, ecx
   278 00003C18 48890E              <1>     mov qword [rsi], rcx
   279 00003C1B 48894E08            <1>     mov qword [rsi + 8], rcx
   280                              <1> .blockFoundExit:
   281 00003C1F E806020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   282 00003C24 E82C140000          <1>     call dosCrit1Exit
   283 00003C29 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   284 00003C30 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   285                              <1>     return
    18                              <2> %%_ret:
    19 00003C34 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   286                              <1> .blockError:
   287 00003C35 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   288 00003C3C B809000000          <1>     mov eax, errMemAddr
   289 00003C41 E844140000          <1>     call extErrExit ;Error thru the unified error handler
   290 00003C46 E8DF010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   291 00003C4B E805140000          <1>     call dosCrit1Exit
   292                              <1>     return
    18                              <2> %%_ret:
    19 00003C50 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   293                              <1> reallocMemory:     ;ah = 4Ah
   294                              <1> ;Input: r8 = address of the block to be realloc'ed
   295                              <1> ;       ebx = How many paras this block should contain after realloc. 
   296                              <1> ;               If ebx = 0, jump to free memory
   297 00003C51 E8F5130000          <1>     call dosCrit1Enter
   298 00003C56 85DB                <1>     test ebx, ebx
   299 00003C58 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   300 00003C5E 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   301 00003C65 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   302 00003C68 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   303 00003C6B 7409                <1>     je .ctn
   304 00003C6D 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   305 00003C70 0F8564010000        <1>     jne .badAddrGiven
   306                              <1> .ctn:
   307                              <1>     ;Provided block is valid and not a hole
   308                              <1>     ;Check if Growth or Shrink
   309 00003C76 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   310 00003C7E 74B5                <1>     je freeMemory.blockError
   311 00003C80 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   312 00003C83 31C9                <1>     xor ecx, ecx
   313 00003C85 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   314 00003C88 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   315 00003C8A 0F8786000000        <1>     ja .growth
   316 00003C90 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   317                              <1> ;We can always shrink
   318 00003C96 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   319 00003C98 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   320 00003C9E 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   321 00003CA1 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   322 00003CA7 48C1E304            <1>     shl rbx, 4
   323 00003CAB 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   324 00003CB2 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   325 00003CB5 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   326 00003CB7 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   327 00003CBA 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   328 00003CBC 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   329 00003CC4 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   330 00003CC7 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   331 00003CC9 0F84DB000000        <1>     je .exit
   332                              <1> ;Else, now see if the block following is also free and absorb it
   333 00003CCF 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   334 00003CD2 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   335 00003CD6 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   336 00003CDD 4801CE              <1>     add rsi, rcx    ;Goto next arena
   337 00003CE0 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   338 00003CE3 7409                <1>     je .shrinkAbsorb
   339 00003CE5 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   340 00003CE8 0F8569010000        <1>     jne badMCBChain
   341                              <1> .shrinkAbsorb:
   342 00003CEE 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   343 00003CF6 0F85AE000000        <1>     jne .exit
   344                              <1>     ;It is free, absorb it
   345 00003CFC 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   346 00003CFF 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   347 00003D05 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   348 00003D08 31C9                <1>     xor ecx, ecx
   349                              <1>     ;Clear absorbed MCB
   350 00003D0A 48890E              <1>     mov qword [rsi], rcx
   351 00003D0D 48894E08            <1>     mov qword [rsi + 8], rcx
   352 00003D11 E994000000          <1>     jmp .exit
   353                              <1> .growth:
   354                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   355 00003D16 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   356 00003D19 0F84A5000000        <1>     je .notEnuffMem
   357                              <1> ;Now check the following space is free. If not, not enuff mem err
   358 00003D1F 31C9                <1>     xor ecx, ecx
   359 00003D21 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   360 00003D24 48C1E104            <1>     shl rcx, 4
   361 00003D28 4889F7              <1>     mov rdi, rsi    
   362 00003D2B 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   363 00003D32 4801CE              <1>     add rsi, rcx
   364 00003D35 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   365 00003D38 7409                <1>     je .growthOK
   366 00003D3A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   367 00003D3D 0F8514010000        <1>     jne badMCBChain
   368                              <1> .growthOK:
   369                              <1>     ;rdi points to block we are growing
   370 00003D43 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   371 00003D4B 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   372                              <1>     ;rsi must own all memory up to the next owned arena
   373 00003D4D 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   374 00003D4F 31C9                <1>     xor ecx, ecx
   375 00003D51 31D2                <1>     xor edx, edx
   376 00003D53 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   377 00003D56 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   378 00003D5C 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   379 00003D5F 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   380 00003D61 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   381 00003D63 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   382 00003D66 775E                <1>     ja .notEnuffMem1
   383 00003D68 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   384 00003D6A 81FA01000000        <1>     cmp edx, 1
   385 00003D70 744E                <1>     je .notEnuffMem2
   386 00003D72 31C9                <1>     xor ecx, ecx
   387 00003D74 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   388 00003D77 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   389 00003D7B 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   390 00003D7E 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   391 00003D81 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   392 00003D88 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   393 00003D8C 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   394 00003D8F 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   395 00003D93 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   396                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   397                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   398 00003D95 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   399 00003D97 7411                <1>     jz .exit
   400 00003D99 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   401 00003D9F 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   402 00003DA2 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   403                              <1> .exit:
   404 00003DAA E87B000000          <1>     call verifyIntegrityOfMCBChain
   405 00003DAF E8A1120000          <1>     call dosCrit1Exit
   406 00003DB4 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   407 00003DBB 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   408                              <1>     return
    18                              <2> %%_ret:
    19 00003DBF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   409                              <1> .notEnuffMem2:
   410 00003DC0 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   411 00003DC2 EB02                <1>     jmp short .notEnuffMem1
   412                              <1> .notEnuffMem:
   413 00003DC4 31DB                <1>     xor ebx, ebx    ;No space to grow
   414                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   415 00003DC6 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   416 00003DCB 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   417 00003DD2 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   418 00003DD5 E97F000000          <1>     jmp mcbErrHdlr
   419                              <1> .badAddrGiven:
   420 00003DDA B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   421 00003DDF E975000000          <1>     jmp mcbErrHdlr
   422                              <1> getsetMallocStrat: ;ah = 58h
   423 00003DE4 84C0                <1>     test al, al
   424 00003DE6 741F                <1>     jz .get
   425 00003DE8 3C02                <1>     cmp al, 2
   426 00003DEA 7337                <1>     jae .bad
   427                              <1> ;Set here
   428 00003DEC 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   429 00003DF3 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   430 00003DF7 8805(35C30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   431 00003DFD 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   432 00003E01 E824000000          <1>     call verifyIntegrityOfMCBChain
   433                              <1>     return
    18                              <2> %%_ret:
    19 00003E06 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   434                              <1> .get:
   435 00003E07 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   436 00003E0E 31C0                <1>     xor eax, eax
   437 00003E10 8A05(35C30300)      <1>     mov al, byte [allocStrat]
   438 00003E16 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   439 00003E19 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   440 00003E1D E808000000          <1>     call verifyIntegrityOfMCBChain
   441                              <1>     return
    18                              <2> %%_ret:
    19 00003E22 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   442                              <1> .bad:
   443 00003E23 B801000000          <1>     mov eax, errInvFnc
   444 00003E28 EB2F                <1>     jmp short mcbErrHdlr
   445                              <1> ;-----------------------------------:
   446                              <1> ;      Memory related routines      :
   447                              <1> ;-----------------------------------:
   448                              <1> verifyIntegrityOfMCBChain:
   449 00003E2A 50                  <1>     push rax
   450 00003E2B 53                  <1>     push rbx
   451 00003E2C 488B1D(2BC00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   452                              <1> .ok:
   453 00003E33 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   454 00003E36 7408                <1>     je .ok1
   455 00003E38 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   456 00003E3B 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   457                              <1> .exit:
   458 00003E3D 5B                  <1>     pop rbx
   459 00003E3E 58                  <1>     pop rax
   460                              <1>     return ;We have reached the end of the chain, return all good!
    18                              <2> %%_ret:
    19 00003E3F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   461                              <1> .ok1:
   462 00003E40 31C0                <1>     xor eax, eax
   463 00003E42 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   464 00003E45 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   465 00003E49 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   466 00003E50 4801C3              <1>     add rbx, rax
   467 00003E53 EBDE                <1>     jmp short .ok
   468                              <1> .bmcbPrep:
   469 00003E55 5B                  <1>     pop rbx ;Pop off the stack first!
   470 00003E56 58                  <1>     pop rax
   471                              <1> badMCBChain:
   472 00003E57 B007                <1>     mov al, errMCBbad   ;Yikes!
   473                              <1> mcbErrHdlr:
   474                              <1>     ;Jumped to with eax = error code
   475 00003E59 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   476 00003E60 E825120000          <1>     call extErrExit ;Error thru the unified error handler
   477 00003E65 3C07                <1>     cmp al, errMCBbad
   478                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003E67 74D6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   479 00003E69 EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    33                                  %include "./Source/Kernel/MemExec/progMgmt.asm"
    34                              <1> ;EXEC and all default terminates are here
    35                              <1> 
    36                              <1> ;========================
    37                              <1> ;   Interrupt handlers
    38                              <1> ;========================
    39                              <1> terminateProcess:   ;Int 40h
    40 00003E6B 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
    41 00003E6D E951100000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
    42                              <1> terminateRes:       ;Int 47h
    43                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    44 00003E72 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    45 00003E78 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    46 00003E7B B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    47 00003E80 E93E100000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    48                              <1> ;========================
    49                              <1> ;    Int 21h functions
    50                              <1> ;========================
    51                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    52                              <1> ;Input:
    53                              <1> ;rdx = Pointer to new PSP in memory.
    54                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    55                              <1> ;   Officially document that this MUST be paragraph aligned.
    56                              <1> ;rsi = alloc size for new psp block
    57 00003E85 C605(76C40300)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    58 00003E8C 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    59 00003E93 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    60 00003E95 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    61 00003E96 EB0C                <1>     jmp short copyPSP.pspCommon
    62                              <1> copyPSP:      ;ah = 26h
    63                              <1> ;Input:
    64                              <1> ;rdx = Pointer to new PSP in memory.
    65                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    66                              <1> ;   Officially document that this MUST be paragraph aligned.
    67 00003E98 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    68 00003E9F 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    69 00003EA3 53                  <1>     push rbx    ;Save this value for PSP allocsize
    70                              <1> .pspCommon:
    71 00003EA4 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    72 00003EAB 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    73 00003EAF 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    74                              <1> ;r8 is current PSP, now copy psp to rdx
    75                              <1> ;Preserve rdx and r8 until the end
    76 00003EB3 4C89C6              <1>     mov rsi, r8
    77 00003EB6 4889D7              <1>     mov rdi, rdx
    78 00003EB9 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    79 00003EBE F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    80 00003EC1 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    81 00003EC9 F605(76C40300)FF    <1>     test byte [pspCopyFlg], -1
    82 00003ED0 7449                <1>     jz .copy
    83                              <1>     ;Now reset the parent psp data
    84 00003ED2 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    85 00003EDA 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    86                              <1>     ;Now reset the copied jobFileTable
    87 00003EDE 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    88 00003EE2 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    89 00003EE9 B0FF                <1>     mov al, -1
    90 00003EEB F3AA                <1>     rep stosb   ;Store maxHndls many -1's 
    91                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    92 00003EED 498D702A            <1>     lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    93 00003EF1 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    94 00003EF5 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    95                              <1> .xfrJFT:
    96 00003EFC 67E31C              <1>     jecxz .copy
    97 00003EFF FFC9                <1>     dec ecx
    98 00003F01 AC                  <1>     lodsb   ;Get the SFTndx in al
    99 00003F02 0FB6D8              <1>     movzx ebx, al
   100 00003F05 53                  <1>     push rbx
   101 00003F06 E8AFF9FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
   102 00003F0B 58                  <1>     pop rax
   103 00003F0C 7508                <1>     jnz .badJFT
   104 00003F0E AA                  <1>     stosb   ;Else store the SFTndx at that position... 
   105 00003F0F E8BDF9FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
   106 00003F14 EBE6                <1>     jmp short .xfrJFT
   107                              <1> .badJFT:
   108 00003F16 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
   109 00003F19 EBE1                <1>     jmp short .xfrJFT 
   110                              <1> .copy:
   111 00003F1B C605(76C40300)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
   112 00003F22 58                  <1>     pop rax ;Pop the allocsize back into rax
   113 00003F23 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
   114                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
   115 00003F26 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
   116 00003F2A B042                <1>     mov al, 42h
   117 00003F2C E8EA0C0000          <1>     call muxGetIntVector    ;Get vector in rbx
   118 00003F31 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   119 00003F34 48AB                <1>     stosq   ;Move rdi to next entry and store
   120 00003F36 B043                <1>     mov al, 43h
   121 00003F38 E8DE0C0000          <1>     call muxGetIntVector    ;Get vector in rbx
   122 00003F3D 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   123 00003F40 48AB                <1>     stosq   ;Move rdi to next entry and store
   124 00003F42 B044                <1>     mov al, 44h
   125 00003F44 E8D20C0000          <1>     call muxGetIntVector    ;Get vector in rbx
   126 00003F49 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   127 00003F4C 48AB                <1>     stosq   ;Move rdi to next entry and store
   128                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   129 00003F4E 66C70240CD          <1>     mov word [rdx + psp.return], 0CD40h  ;Int 40h
   130 00003F53 C7425000CB40CD      <1>     mov dword [rdx + psp.unixEntry], 0CD40CB00h  ;Overlay next byte for prevPSP
   131                              <1>     return
    18                              <2> %%_ret:
    19 00003F5A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   132                              <1> 
   133                              <1> terminateStayRes:  ;ah = 31h
   134                              <1> ;Input: al  = Error code
   135                              <1> ;       edx = Number of paragraphs to keep resident
   136 00003F5B C605(60C60300)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   137                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   138 00003F62 81FA06000000        <1>     cmp edx, 6
   139 00003F68 7305                <1>     jae .aboveMinimum
   140 00003F6A BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   141                              <1> .aboveMinimum:
   142                              <1> ;Now we setup a call to Realloc 
   143                              <1> ;Setup regs with: 
   144                              <1> ;   r8 = address of the block to be realloc'ed
   145                              <1> ;   ebx = How many paras this block should contain after realloc.
   146 00003F6F 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   147 00003F76 89D3                <1>     mov ebx, edx
   148 00003F78 50                  <1>     push rax    ;Preserve errorlevel across call
   149 00003F79 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   150 00003F7A E8D2FCFFFF          <1>     call reallocMemory
   151 00003F7F 5B                  <1>     pop rbx
   152 00003F80 58                  <1>     pop rax
   153 00003F81 7220                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   154 00003F83 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   155                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   156 00003F87 EB1A                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   157                              <1> 
   158                              <1> simpleTerminate:   ;ah = 00h
   159 00003F89 31C0                <1>     xor eax, eax    ;Just fall through as normal
   160                              <1> terminateClean:    ;ah = 4Ch, EXIT
   161                              <1> ;Here we must:
   162                              <1> ;0) Build errorlevel and adjust variables accordingly
   163                              <1> ;1) Call Network Termination hook.
   164                              <1> ;2) Check if the program is it's own parent. If so, return.
   165                              <1> ;3) Swap the console back to the original driver if it is swapped.
   166                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   167                              <1> ;4) Free all file handles associated to the current process.
   168                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   169                              <1> ;5) Free all memory blocks that have the signature of current PSP
   170                              <1> ;6) Set current PSP to parent PSP
   171                              <1> ;7) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   172                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   173                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   174                              <1> ;10) Exit all critical sections.
   175                              <1> ;
   176                              <1> ; Step 0
   177                              <1> ;For now, just adjust error level in var
   178 00003F8B 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   179 00003F8D 8625(60C60300)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   180 00003F93 F605(EDC30300)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   181 00003F9A 740D                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   182 00003F9C C605(60C60300)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   183                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   184 00003FA3 8A25(60C60300)      <1>     mov ah, byte [exitType] ;Get the exitType
   185                              <1> .storeELvl:
   186 00003FA9 668905(91C30300)    <1>     mov word [errorLevel], ax   ;Store word
   187                              <1>     
   188                              <1> ; Step 1 Tell network a process is terminating
   189 00003FB0 B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   190 00003FB5 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   191 00003FBC CD4F                <1>     int 4Fh
   192                              <1> 
   193                              <1> ; Step 2
   194                              <1> .step1:
   195 00003FBE 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   196 00003FC5 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   197 00003FC8 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   198 00003FCC 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   199                              <1>     rete            ;If it is, simply return (al has errorLevel)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003FCF 7489                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   200                              <1> ; Step 3
   201 00003FD1 E850E1FFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   202                              <1> ; Step 3.5
   203 00003FD6 803D(60C60300)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   204 00003FDD 0F8488000000        <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   205                              <1> ; Step 4
   206 00003FE3 803D(60C60300)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   207 00003FEA 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   208 00003FEC B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   209 00003FF1 CD4F                <1>     int 4Fh
   210                              <1> .skipAbortNetClose:
   211 00003FF3 4881C72A000000      <1>     add rdi, psp.jobFileTbl ;Move rdi to point to the start of the JFT
   212 00003FFA 4889FE              <1>     mov rsi, rdi    ;Point rsi to jft too
   213 00003FFD 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls] ;Number of entries in JFT
   214                              <1> .s4lp:
   215 00004004 AC                  <1>     lodsb   ;Inc rsi, get the SFT number in al
   216 00004005 3CFF                <1>     cmp al, -1  ;End of open JFT entries?
   217 00004007 7429                <1>     je .step5
   218 00004009 0FB6D8              <1>     movzx ebx, al   ;Move the file handle number into ebx
   219                              <1>     ;Replace with a call to close the handle eventually
   220 0000400C 57                  <1>     push rdi
   221 0000400D E840F8FFFF          <1>     call derefSFTPtr    ;Ret in rdi the SFT pointer
   222 00004012 7216                <1>     jc .badHdl  ;If a bad handle, skip the decrementing of the handle count
   223 00004014 FF35(84C60300)      <1>     push qword [currentSFT]
   224 0000401A E88AF6FFFF          <1>     call setCurrentSFT  ;Set rdi to currentSFT
   225 0000401F E8FFEEFFFF          <1>     call closeMain  ;Close all files opened by this program. Decrement ref ONLY
   226                              <1>     ;closeMain also flushes all sectors associated to the file
   227                              <1>     ;Ignore errors, simply keep closing files
   228 00004024 8F05(84C60300)      <1>     pop qword [currentSFT]
   229                              <1> .badHdl:
   230 0000402A 5F                  <1>     pop rdi
   231 0000402B B0FF                <1>     mov al, -1
   232 0000402D AA                  <1>     stosb   ;Store a -1 in it's place (not strictly necessary)
   233 0000402E FFC9                <1>     dec ecx ;Zoom Zoom \mu-op!
   234 00004030 75D2                <1>     jnz .s4lp   ;Keep looping for all entries in the JFT 
   235                              <1> ;Step 5
   236                              <1> .step5:
   237 00004032 488B1D(81C30300)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   238                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   239                              <1>     ; with the currentPSP signature and free them.
   240 00004039 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   241                              <1> .s5lp:  ;And walk the chain
   242                              <1> ;First verify the address in rsi is a valid mcb
   243 00004040 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   244 00004042 80F94D              <1>     cmp cl, mcbMarkCtn
   245 00004045 7405                <1>     je .checkToFree
   246 00004047 80F95A              <1>     cmp cl, mcbMarkEnd
   247 0000404A 751F                <1>     jne .step6  ;Something wrong so stop freeing
   248                              <1> .checkToFree:
   249 0000404C 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   250 00004050 7508                <1>     jne .noFree
   251 00004052 4989F0              <1>     mov r8, rsi ;Move pointer to r8
   252 00004055 E8EFFAFFFF          <1>     call freeMemory ;Free this memory block
   253                              <1>     ;If an error occured, the internal vars will be set.
   254                              <1> .noFree:
   255 0000405A 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   256 0000405D 740C                <1>     je .step6   ;Skip if we are
   257 0000405F 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   258 00004062 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   259 00004066 4801C6              <1>     add rsi, rax    ;Goto next mcb block
   260 00004069 EBD5                <1>     jmp short .s5lp
   261                              <1> ;Step 6
   262                              <1> .step6:
   263 0000406B 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   264 0000406F 488905(81C30300)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   265                              <1> ;Step 7
   266                              <1>     ;rbx points to current PSP, the old parent task
   267                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   268 00004076 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   269 0000407A B044                <1>     mov al, 44h
   270 0000407C E8B0110000          <1>     call setIntVector
   271 00004081 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   272 00004085 B043                <1>     mov al, 43h
   273 00004087 E8A5110000          <1>     call setIntVector
   274 0000408C 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   275 00004090 B042                <1>     mov al, 42h
   276 00004092 52                  <1>     push rdx
   277 00004093 E899110000          <1>     call setIntVector
   278 00004098 5A                  <1>     pop rdx
   279                              <1> ;Step 8
   280 00004099 52                  <1>     push rdx    ;Save the return address on the stack
   281 0000409A 53                  <1>     push rbx    ;Save the parent PSP address
   282 0000409B B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   283 0000409D CD4A                <1>     int 4ah
   284 0000409F 5B                  <1>     pop rbx
   285 000040A0 5A                  <1>     pop rdx
   286                              <1> 
   287 000040A1 FA                  <1>     cli
   288                              <1>     ;Make the parent register frame the current one
   289                              <1>     ;Make RSP point to user stack from parent entry to exec
   290 000040A2 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   291                              <1> 
   292 000040A6 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   293 000040AB 48C744245802F20000  <1>     mov qword [rsp + callerFrame.flags], 0F202h ;Mimic DOS's return flags
   294                              <1> 
   295 000040B4 C605(F7C30300)00    <1>     mov byte [Int44Trans], 0    ;Clear this flag
   296 000040BB C605(6AC30300)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   297 000040C2 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;Reset
   298 000040C9 E84F0F0000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   299 000040CE 48CF                <1>     iretq   ;and return to address that was in rdx
    34                                  %include "./Source/Kernel/MemExec/exec.asm"
    35                              <1> 
    36                              <1> 
    37                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    38                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
    39                              <1> ;       rbx = Ptr to the parameter block used for loading
    40                              <1> ;       al = Subfunction:
    41                              <1> ;            00h = Load Program and transfer control to it
    42                              <1> ;            01h = Load Program but do not transfer ctrl to it
    43                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    44                              <1> ;      Reserved for future expansion:
    45                              <1> ;            04h = Load in background execution mode (PE only)
    46                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    47                              <1> ;               function but in 16-bit mode. 
    48                              <1> ;
    49                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    50                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    51                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    52                              <1> 
    53                              <1> ;If AL = 0 :
    54                              <1> ;            Load Child Program and Xfr control to it
    55                              <1> ; rbx ------>   |-------------------------------|
    56                              <1> ;               |   Ptr to Environment Block    |
    57                              <1> ;               |                               |
    58                              <1> ;               | Can be 0 => Get pointer to    |
    59                              <1> ;               | parent Environment Block      |
    60                              <1> ;               |-------------------------------|
    61                              <1> ;               |   Ptr to Command Line to be   |
    62                              <1> ;               |   placed at PSP + 80h         |
    63                              <1> ;               |-------------------------------|
    64                              <1> ;               |   Ptr to first default FCB    |
    65                              <1> ;               |      to copy to PSP.fcb1      |
    66                              <1> ;               |                               |
    67                              <1> ;               | Should be used to parse the   |
    68                              <1> ;               |  first two command line args  |
    69                              <1> ;               |-------------------------------|
    70                              <1> ;               |   Ptr to second default FCB   |
    71                              <1> ;               |      to copy to PSP.fcb2      |
    72                              <1> ;               |-------------------------------|
    73                              <1> ;
    74                              <1> ;If AL = 1 :
    75                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    76                              <1> ; rbx ------>   |-------------------------------|
    77                              <1> ;               |         AS IN AL=00H          |
    78                              <1> ;               |-------------------------------|
    79                              <1> ;               |     Initial Value of RSP      |
    80                              <1> ;               |       on program launch       |
    81                              <1> ;               |                               |
    82                              <1> ;               |     This is returned to the   |
    83                              <1> ;               |         caller by DOS         |
    84                              <1> ;               |-------------------------------|
    85                              <1> ;               |     Initial Value of RIP      |
    86                              <1> ;               |       on program launch       |
    87                              <1> ;               |                               |
    88                              <1> ;               |     This is returned to the   |
    89                              <1> ;               |         caller by DOS         |
    90                              <1> ;               |-------------------------------|
    91                              <1> ;
    92                              <1> ;                      !!Important Note!!
    93                              <1> ;   The block pointed to by rbx must reserve the space for 
    94                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    95                              <1> ;
    96                              <1> ;If AL = 3 :
    97                              <1> ;                      Load program overlay
    98                              <1> ; rbx ------>   |-------------------------------|
    99                              <1> ;               |  Pointer to the byte in the   |
   100                              <1> ;               |  prog space to start writing  |
   101                              <1> ;               |        the overlay at         |
   102                              <1> ;               |-------------------------------|
   103                              <1> ;               | DWORD offset from the base of |
   104                              <1> ;               |  the program to the location  |
   105                              <1> ;               |  the overlay is being loaded  |
   106                              <1> ;               |              in               |
   107                              <1> ;               |  (Called a Relocation Factor) |
   108                              <1> ;               |     Only FOR EXE Overlays     |
   109                              <1> ;               |        for CODE fixups        |
   110                              <1> ;               |  For COM, Current PSP + 100h  |
   111                              <1> ;               |      assumed to suffice       |
   112                              <1> ;               |-------------------------------|
   113                              <1> ;
   114                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
   115                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
   116                              <1> ;
   117                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
   118 000040D0 55                  <1>     push rbp
   119 000040D1 4889E5              <1>     mov rbp, rsp
   120 000040D4 4881EC44000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   121 000040DB 3C03                <1>     cmp al, execOverlay
   122 000040DD 7615                <1>     jbe .validSubfunction
   123                              <1> .badSubFunction:
   124 000040DF B801000000          <1>     mov eax, errInvFnc
   125 000040E4 C605(6CC30300)01    <1>     mov byte [errorLocus], eLocUnk
   126                              <1> .badExit:
   127 000040EB 4889EC              <1>     mov rsp, rbp
   128 000040EE 5D                  <1>     pop rbp
   129 000040EF E9960F0000          <1>     jmp extErrExit
   130                              <1> 
   131                              <1> .validSubfunction:
   132 000040F4 3C02                <1>     cmp al, execInvld
   133 000040F6 74E7                <1>     je .badSubFunction
   134                              <1>     ;Save registers for each function call
   135 000040F8 48895DF8            <1>     mov qword [rbp - execFrame.pParam], rbx
   136 000040FC 488955F0            <1>     mov qword [rbp - execFrame.pProgname], rdx
   137 00004100 0FB6C0              <1>     movzx eax, al
   138 00004103 48894500            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   139 00004107 4889D7              <1>     mov rdi, rdx
   140 0000410A E8660C0000          <1>     call strlen ;Get string length in cx
   141 0000410F 66894DFB            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   142                              <1>     ;Now open the file we wanna yeet to
   143 00004113 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   144 00004115 55                  <1>     push rbp    ;Preserve local frame ptr
   145 00004116 E888E5FFFF          <1>     call openFileHdl
   146 0000411B 5D                  <1>     pop rbp
   147 0000411C 72CD                <1>     jc .badExit ;Exit preserving error code in al
   148                              <1>     ;Now ax has the file handle
   149 0000411E 668945FF            <1>     mov word [rbp - execFrame.wProgHdl], ax
   150 00004122 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   151 00004125 E828F7FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   152 0000412A 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   153 0000412E F7C280000000        <1>     test edx, devCharDev
   154 00004134 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   155 00004136 B002                <1>     mov al, errFnf
   156 00004138 E9CD040000          <1>     jmp .cleanAndFail
   157                              <1> .validDiskFile:
   158 0000413D 31C0                <1>     xor eax, eax
   159 0000413F 488945E8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   160 00004143 488945D8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   161 00004147 807D0003            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   162 0000414B 0F848B000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   163 00004151 488B7DF8            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   164 00004155 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   165 00004158 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   166 0000415B 7514                <1>     jnz .copyEnvironmentBlock
   167 0000415D 488B35(81C30300)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   168 00004164 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   169 00004168 488945E8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   170 0000416C 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, make a new block
   171 0000416F 756B                <1>     jnz .loadProgram
   172                              <1> .copyEnvironmentBlock:
   173 00004171 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   174                              <1>     ;Get the length of the environment
   175 00004174 B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   176 00004179 31C0                <1>     xor eax, eax
   177 0000417B 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   178                              <1> .envVerifyLp:
   179 0000417E F3AE                <1>     rep scasb   ;Scan for a terminating word of nulls
   180 00004180 752F                <1>     jnz .invalidEnvironmentError
   181 00004182 67E32C              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   182 00004185 FFC9                <1>     dec ecx
   183 00004187 AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   184 00004188 75F4                <1>     jnz .envVerifyLp
   185                              <1> 
   186 0000418A 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   187 0000418D 57                  <1>     push rdi     ;Save the length of the environment block
   188 0000418E 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   189 00004194 0FB75DFB            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   190 00004198 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   191 0000419A 89FB                <1>     mov ebx, edi
   192 0000419C C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   193 0000419F E87BF7FFFF          <1>     call allocateMemory
   194 000041A4 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   195 000041A5 7314                <1>     jnc .copyEnvironment
   196                              <1>     ;Fall thru if not enuff memory
   197                              <1> .insufficientMemory:
   198 000041A7 B808000000          <1>     mov eax, errNoMem
   199 000041AC E959040000          <1>     jmp .cleanAndFail
   200                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   201 000041B1 B80A000000          <1>     mov eax, errBadEnv
   202 000041B6 E94F040000          <1>     jmp .cleanAndFail
   203                              <1> 
   204                              <1> .copyEnvironment:
   205                              <1>     ;rax has the ptr to allocated memory block
   206                              <1>     ;rcx has the number of chars to copy from the source env block
   207 000041BB 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   208 000041BE 488945E8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   209 000041C2 488B75F8            <1>     mov rsi, qword [rbp - execFrame.pParam]
   210 000041C6 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   211 000041C9 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   212 000041CB B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   213 000041D0 66AB                <1>     stosw       ;Away you go!
   214 000041D2 488B75F0            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   215 000041D6 0FB74DFB            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   216 000041DA F3A4                <1>     rep movsb   ;Move the bytes to rdi
   217                              <1> ;Done with the environment... more or less
   218                              <1> .loadProgram:
   219 000041DC B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   220 000041E1 488D15(EAD80300)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   221 000041E8 E839040000          <1>     call .readDataFromHdl
   222 000041ED 0F8212040000        <1>     jc .badFmtErr
   223 000041F3 85C0                <1>     test eax, eax   ;Were zero bytes read?
   224 000041F5 0F840A040000        <1>     jz .badFmtErr
   225 000041FB 3D40000000          <1>     cmp eax, imageDosHdr_size
   226 00004200 0F826C020000        <1>     jb .loadCom
   227                              <1> 
   228 00004206 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   229 0000420B 740B                <1>     je .proceedEXE
   230 0000420D 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   231 00004212 0F855A020000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   232                              <1> .proceedEXE:
   233                              <1>     ;Now we need to read e_lfanew
   234 00004218 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   235 00004219 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   236 0000421C 8955CC              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   237 0000421F 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   238 00004221 30C0                <1>     xor al, al  ;Set file pointer from start of file
   239 00004223 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   240 00004227 E8E7E6FFFF          <1>     call lseekHdl   ;Move to that position in the file
   241                              <1> 
   242 0000422C 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   243 0000422D B914000000          <1>     mov ecx, imageFileHeader_size
   244 00004232 E8EF030000          <1>     call .readDataFromHdl       ;Now read the COFF header
   245 00004237 85C0                <1>     test eax, eax   ;Were zero bytes read?
   246 00004239 0F84C6030000        <1>     jz .badFmtErr
   247 0000423F 3D14000000          <1>     cmp eax, imageFileHeader_size
   248 00004244 0F82BB030000        <1>     jb .badFmtErr
   249                              <1>     ;So now rdx points to the imageFileHeader
   250 0000424A 66813A6486          <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   251 0000424F 0F85B0030000        <1>     jne .badFmtErr
   252 00004255 66817A107000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   253 0000425B 0F82A4030000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   254                              <1>     ;Now save the number of sections in the the file
   255 00004261 0FB74202            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   256 00004265 85C0                <1>     test eax, eax   ;If this is 0, what?
   257 00004267 0F8498030000        <1>     jz .badFmtErr
   258 0000426D 668945C8            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   259                              <1> 
   260                              <1>     ;Now load Optional header, file ptr points to it so all good!
   261 00004271 B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   262                              <1>     ;rdx points to exeHdrSpace
   263 00004276 E8AB030000          <1>     call .readDataFromHdl
   264 0000427B 85C0                <1>     test eax, eax   ;Were zero bytes read?
   265 0000427D 0F8482030000        <1>     jz .badFmtErr
   266 00004283 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   267 00004288 0F8277030000        <1>     jb .badFmtErr
   268                              <1>     ;Now File Ptr points to data dirs, not an issue
   269 0000428E 8145C470000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   270                              <1>     ;We load the program in, one section at a time, reading section headers in
   271                              <1>     ; one at a time to the section header internal buffer.
   272 00004295 807D0003            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   273 00004299 7445                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   274 0000429B 8B1D(22D90300)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   275 000042A1 488B05(32D90300)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   276 000042A8 4885C0              <1>     test rax, rax
   277 000042AB 750A                <1>     jnz .notDefaultStackAlloc
   278 000042AD 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   278 000042B6 00                  <1>
   279                              <1> .notDefaultStackAlloc:
   280 000042B7 01C3                <1>     add ebx, eax    ;Add stack allocation
   281 000042B9 895DD0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   282 000042BC 81C30B000000        <1>     add ebx, 11
   283 000042C2 C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   284 000042C5 E855F6FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   285 000042CA 0F82D7FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   286 000042D0 488945E0            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   287 000042D4 480500010000        <1>     add rax, 100h
   288 000042DA 488945D8            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of code goes here
   289 000042DE EB0B                <1>     jmp short .exeProceed1
   290                              <1> .exeOvlySkipAlloc:
   291 000042E0 488B5DF8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   292 000042E4 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   293 000042E7 488945D8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   294                              <1> .exeProceed1:
   295                              <1>     ;So now copy one section at a time, read section header in
   296                              <1>     ;File pointer points to the directory table, so skip that
   297 000042EB 8B15(56D90300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   298 000042F1 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   299 000042F7 0F8208030000        <1>     jb .badFmtErr
   300 000042FD FFCA                <1>     dec edx ;Decrement by 1 to make into a 0 based offset
   301                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   302 000042FF C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   303 00004302 31C9                <1>     xor ecx, ecx
   304 00004304 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   305 00004308 B001                <1>     mov al, 1   ;Move handle forwards from current position
   306 0000430A E804E6FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   307                              <1>     ;eax has pointer location after adjustment
   308 0000430F 8945C4              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   309                              <1>     ;File now points to start of Section headers. Read first header in.
   310                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   311 00004312 488B7DD8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   312 00004316 0FB74DC8            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   313                              <1> .loadLp:
   314 0000431A 51                  <1>     push rcx    ;Save # of segments left on stack
   315 0000431B 57                  <1>     push rdi    ;Save the current buffer ptr here
   316 0000431C B928000000          <1>     mov ecx, imageSectionHdr_size
   317 00004321 488D15(5AD90300)    <1>     lea rdx, sectHdr    ;Read section headers here
   318 00004328 E8F9020000          <1>     call .readDataFromHdl
   319 0000432D 5F                  <1>     pop rdi
   320 0000432E 59                  <1>     pop rcx
   321 0000432F 85C0                <1>     test eax, eax
   322 00004331 0F84CE020000        <1>     jz .badFmtErr
   323 00004337 3D28000000          <1>     cmp eax, imageSectionHdr_size
   324 0000433C 0F85C3020000        <1>     jne .badFmtErr
   325                              <1>     ;File ptr moved forwards to next section header
   326 00004342 8145C428000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   327                              <1>     ;Section header read, now we load section into memory
   328                              <1>     ;Move file ptr to data location
   329 00004349 8B15(6ED90300)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   330 0000434F 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   331 00004353 31C0                <1>     xor eax, eax    ;Seek from start of file
   332 00004355 51                  <1>     push rcx
   333 00004356 57                  <1>     push rdi
   334 00004357 E8B7E5FFFF          <1>     call lseekHdl
   335 0000435C 5F                  <1>     pop rdi
   336 0000435D 59                  <1>     pop rcx
   337                              <1> 
   338 0000435E 51                  <1>     push rcx
   339 0000435F 57                  <1>     push rdi    ;Save current buffer offset
   340 00004360 8B0D(6AD90300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dSizeOfRawData]   ;Get # of bytes
   341 00004366 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   342 00004369 E8B8020000          <1>     call .readDataFromHdl
   343 0000436E 5F                  <1>     pop rdi
   344 0000436F 59                  <1>     pop rcx
   345 00004370 0F828F020000        <1>     jc .badFmtErr
   346 00004376 85C0                <1>     test eax, eax
   347 00004378 0F8487020000        <1>     jz .badFmtErr
   348 0000437E 3B05(6AD90300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   349 00004384 0F857B020000        <1>     jne .badFmtErr
   350                              <1>     ;Data read ok, now fill in any zeros needed
   351 0000438A 8B05(6AD90300)      <1>     mov eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   352 00004390 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   353 00004393 3B05(62D90300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   354 00004399 730E                <1>     jae .skipPadding
   355 0000439B 51                  <1>     push rcx
   356 0000439C 8B0D(62D90300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]
   357 000043A2 29C1                <1>     sub ecx, eax    ;Get number of bytes to pad with in ecx
   358                              <1>     ;rdi points to pad space
   359 000043A4 31C0                <1>     xor eax, eax
   360 000043A6 F3AA                <1>     rep stosb   ;Pad that many zeros
   361 000043A8 59                  <1>     pop rcx
   362                              <1> .skipPadding:
   363 000043A9 FFC9                <1>     dec ecx ;Decrement our section counter
   364 000043AB 7419                <1>     jz .doExeFixups
   365                              <1>     ;Read next section header in here
   366 000043AD 51                  <1>     push rcx
   367 000043AE 57                  <1>     push rdi
   368 000043AF 30C0                <1>     xor al, al  ;Move rel start of file
   369 000043B1 8B55C4              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   370 000043B4 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   371 000043B8 31C9                <1>     xor ecx, ecx
   372 000043BA E854E5FFFF          <1>     call lseekHdl
   373 000043BF 5F                  <1>     pop rdi
   374 000043C0 59                  <1>     pop rcx
   375 000043C1 E954FFFFFF          <1>     jmp .loadLp
   376                              <1> .doExeFixups:
   377                              <1> ;Here we fixup addresses as needed
   378                              <1> ;Program Entrypoint is saved in the header structure in the SDA
   379                              <1> ;Move File pointer to COFF header Coff + optional header sizes
   380                              <1> ;We look only for .reloc segment. We have it in memory too so use it to make 
   381                              <1> ; fixups. Zero the in memory image of reloc segment once we are done with it. 
   382                              <1> ;We checked that .reloc exists so all ok
   383 000043C6 8B15(56D90300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   384 000043CC 8B55CC              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   385 000043CF 81C2AC000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   386                              <1>     ;eax now points to position in file of direcotry entry for reloc
   387 000043D5 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   388 000043D9 31C0                <1>     xor eax, eax
   389 000043DB E833E5FFFF          <1>     call lseekHdl   ;Move handle there in file
   390 000043E0 8945C4              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   391 000043E3 B908000000          <1>     mov ecx, imageDataDirectory_size
   392                              <1>     ;Read 8 bytes into sectHdr space
   393 000043E8 488D15(5AD90300)    <1>     lea rdx, sectHdr
   394 000043EF E832020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   395                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   396 000043F4 8B35(5AD90300)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   397 000043FA 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   398 000043FC 0F840D010000        <1>     jz .buildChildPSP   ;... including if overlay
   399 00004402 480375D8            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   400                              <1>     ;Now rsi points to where in memory the relocation data table is
   401                              <1>     ;Now compute the relocation factor 
   402 00004406 488B45D8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   403 0000440A 482B05(02D90300)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   404                              <1>     ;The value in rax gives how much to subtract by
   405 00004411 807D0003            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   406 00004415 7507                <1>     jne .notOverlayReloc
   407 00004417 488B5DF8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   408 0000441B 034308              <1>     add eax, dword [rbx + loadOvly.dRelocFct]   ;Add the overlay reloc factor
   409                              <1> .notOverlayReloc:
   410 0000441E 488945C4            <1>     mov qword [rbp - execFrame.qRelocVal], rax  ;Save relocation value
   411 00004422 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   412                              <1>     ;rsi points to relocation data table in memory
   413 00004425 8B0D(5ED90300)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   414 0000442B 81F900000000        <1>     cmp ecx, 0    ;If no relocations, skip
   415 00004431 0F84D8000000        <1>     jz .buildChildPSP
   416 00004437 488B7DD8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   417                              <1>     ;rsi points to the first base relocation block. The relocations begin
   418                              <1>     ; after the first block
   419                              <1>     ;ecx has the number of base relocation blocks to process.
   420                              <1> .nextBlock:
   421 0000443B 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   422 0000443C 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   423 0000443E 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   424 00004441 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes
   425 00004444 D1E9                <1>     shr ecx, 1  ;Divide by 2 to get number of words = # of relocs to do
   426 00004446 67E311              <1>     jecxz .blockDone
   427                              <1> .blockNotDone:
   428 00004449 66AD                <1>     lodsw   ;Get the next page offset word
   429 0000444B 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   430 00004450 4801C7              <1>     add rdi, rax    ;Add this offset to rdi, the pointer to program image
   431                              <1>     ;rdi points to qword to rebase
   432 00004453 48011F              <1>     add qword [rdi], rbx    ;Relocation factor was saved in rbx
   433 00004456 FFC9                <1>     dec ecx
   434 00004458 75EF                <1>     jnz .blockNotDone
   435                              <1> .blockDone:
   436 0000445A 59                  <1>     pop rcx
   437 0000445B FFC9                <1>     dec ecx
   438 0000445D 75DC                <1>     jnz .nextBlock
   439 0000445F 8B05(FAD80300)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   440 00004465 480345D8            <1>     add rax, qword [rbp - execFrame.pProgBase]
   441 00004469 488945CC            <1>     mov qword [rbp - execFrame.pProgEP], rax
   442 0000446D E99D000000          <1>     jmp .buildChildPSP
   443                              <1> .loadCom:
   444                              <1>     ;File is open here, so just read the file into memory. 
   445                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   446                              <1>     ;Allocate 64Kb of memory, or as much as we can
   447 00004472 807D0003            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   448 00004476 744C                <1>     je .comOverlay
   449 00004478 BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   450 0000447D 895DD0              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   451 00004480 E89AF4FFFF          <1>     call allocateMemory
   452 00004485 734A                <1>     jnc .comallocOk
   453 00004487 3C08                <1>     cmp al, errNoMem
   454 00004489 0F857B010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   455                              <1>     ;rbx should have the amount available
   456                              <1>     ;We check if this value is 100h than filesize
   457 0000448F 53                  <1>     push rbx    ;Save new minimum size
   458 00004490 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   459 00004495 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   460 00004499 31D2                <1>     xor edx, edx    ;Go to end of file
   461 0000449B E873E4FFFF          <1>     call lseekHdl
   462                              <1>     ;eax has file size
   463 000044A0 5B                  <1>     pop rbx ;Get back max alloc size
   464 000044A1 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   465 000044A3 29C2                <1>     sub edx, eax
   466 000044A5 81FA00010000        <1>     cmp edx, 100h   ;If the difference of filesize and memory space is < 100h
   467 000044AB 0F82F6FCFFFF        <1>     jb .insufficientMemory   ;Fail
   468 000044B1 895DD0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   469 000044B4 E866F4FFFF          <1>     call allocateMemory
   470 000044B9 0F824B010000        <1>     jc .cleanAndFail
   471 000044BF E90D000000          <1>     jmp .comallocOk
   472                              <1> .comOverlay:
   473                              <1>     ;Here we simply read the file into the buffer provided
   474 000044C4 488B5DF8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   475 000044C8 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   476 000044CB 488945D8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   477 000044CF EB0A                <1>     jmp short .comRead
   478                              <1> .comallocOk:
   479                              <1>     ;rax should point to the first byte
   480 000044D1 488945E0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   481 000044D5 482D00010000        <1>     sub rax, 100h
   482                              <1> .comRead:
   483 000044DB 488945D8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   484                              <1> 
   485 000044DF B802000000          <1>     mov eax, 2    ;Reposition to end of file
   486 000044E4 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   487 000044E8 31D2                <1>     xor edx, edx    ;Go to end of file
   488 000044EA E824E4FFFF          <1>     call lseekHdl
   489                              <1>     ;eax has filesize now
   490 000044EF 50                  <1>     push rax    ;Save filesize
   491 000044F0 31C0                <1>     xor eax, eax    ;Reposition to start of file
   492 000044F2 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   493 000044F6 31D2                <1>     xor edx, edx    ;Go to start of file
   494 000044F8 E816E4FFFF          <1>     call lseekHdl
   495 000044FD 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   496 000044FE 488B55D8            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   497 00004502 E81F010000          <1>     call .readDataFromHdl   ;Read from the file handle
   498 00004507 488B45D8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   499 0000450B 488945CC            <1>     mov qword [rbp - execFrame.pProgEP], rax
   500                              <1> .buildChildPSP:
   501                              <1>     ;We can close handle now
   502 0000450F 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   503 00004513 55                  <1>     push rbp
   504 00004514 E898E2FFFF          <1>     call closeFileHdl   ;Close the file
   505 00004519 5D                  <1>     pop rbp
   506                              <1> 
   507                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   508 0000451A 807D0003            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   509 0000451E 0F84BF000000        <1>     je .overlayExit
   510                              <1>     ;Now build the PSP
   511 00004524 8B75D0              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   512 00004527 488B55E0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   513 0000452B 52                  <1>     push rdx
   514 0000452C 55                  <1>     push rbp
   515 0000452D E853F9FFFF          <1>     call createPSP
   516 00004532 5D                  <1>     pop rbp
   517 00004533 5A                  <1>     pop rdx
   518                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   519 00004534 488915(81C30300)    <1>     mov qword [currentPSP], rdx
   520 0000453B 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   521 00004542 48893D(79C30300)    <1>     mov qword [currentDTA], rdi ;and set it!
   522                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   523                              <1>     ; and set FS to point to the PSP
   524 00004549 488B5DF8            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   525 0000454D 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   526 00004551 B980000000          <1>     mov ecx, 80h
   527 00004556 F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   528                              <1> 
   529 00004558 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   530 0000455C B925000000          <1>     mov ecx, fcb_size
   531 00004561 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   532 00004565 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   533 00004567 F3A4                <1>     rep movsb   ;Copy fcb 1 over
   534 00004569 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   535 0000456D B925000000          <1>     mov ecx, fcb_size
   536 00004572 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   537 00004576 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   538 00004578 F3A4                <1>     rep movsb   ;Copy fcb 2 over
   539                              <1> 
   540 0000457A 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   541                              <1> 
   542                              <1>     ;Put PSP base value in edx:eax to place in FS
   543 0000457C B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
   544 00004581 488B45E0            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   545 00004585 4889C2              <1>     mov rdx, rax
   546 00004588 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   547 0000458C 09C0                <1>     or eax, eax ;Clear upper bits
   548 0000458E 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   549                              <1> 
   550 00004590 E894060000          <1>     call getUserRegs    ;Need to get Int 42h address from stack
   551 00004595 488B5648            <1>     mov rdx, qword [rsi + callerFrame.rip]  ;Get parent return address
   552 00004599 4889520A            <1>     mov qword [rdx + psp.oldInt42h], rdx    ;and save it in PSP
   553 0000459D B042                <1>     mov al, 42h ;And write it to the IDT as a descriptor
   554 0000459F E88D0C0000          <1>     call setIntVector   ;bx preserved by this call
   555 000045A4 488B55E0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]   ;Get psp base back
   556                              <1> 
   557                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   558 000045A8 88D8                <1>     mov al, bl
   559 000045AA 30DB                <1>     xor bl, bl
   560 000045AC E89C060000          <1>     call setDrive
   561 000045B1 7302                <1>     jnc .drive1Ok
   562 000045B3 B3FF                <1>     mov bl, -1
   563                              <1> .drive1Ok:
   564 000045B5 88F8                <1>     mov al, bh
   565 000045B7 30FF                <1>     xor bh, bh
   566 000045B9 E88F060000          <1>     call setDrive
   567 000045BE 7302                <1>     jnc .drive2Ok
   568 000045C0 B7FF                <1>     mov bh, -1
   569                              <1> .drive2Ok:
   570                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   571                              <1> 
   572 000045C2 8B75D0              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   573 000045C5 488D7416F8          <1>     lea rsi, qword [rsi + rdx - 8]    ;Get Stack Ptr in rsi
   574 000045CA 807D0000            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   575 000045CE 741C                <1>     je .xfrProgram
   576 000045D0 488B45CC            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   577 000045D4 488B5DF8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   578 000045D8 48894328            <1>     mov qword [rbx + loadProg.initRIP], rax
   579 000045DC 48897320            <1>     mov qword [rbx + loadProg.initRSP], rsi
   580 000045E0 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   581                              <1> .overlayExit:
   582 000045E3 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   583 000045E6 5D                  <1>     pop rbp ;Point rsp to the return address
   584 000045E7 E9900A0000          <1>     jmp extGoodExit ;And return!
   585                              <1> .xfrProgram:
   586 000045EC FA                  <1>     cli
   587 000045ED 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   588 000045F0 C605(6AC30300)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   589 000045F7 FB                  <1>     sti
   590 000045F8 FF75CC              <1>     push qword [rbp - execFrame.pProgEP]
   591 000045FB 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   592 000045FE 31ED                <1>     xor ebp, ebp
   593 00004600 89EE                <1>     mov esi, ebp
   594 00004602 89EB                <1>     mov ebx, ebp
   595                              <1>     return  ;Return to child task
    18                              <2> %%_ret:
    19 00004604 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   596                              <1> 
   597                              <1> .badFmtErr:
   598 00004605 B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   599                              <1> .cleanAndFail:
   600                              <1> ;Close the open file and any open resources and fail
   601 0000460A E82D000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   602 0000460F E8410A0000          <1>     call dosCrit1Exit
   603 00004614 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   604 00004618 50                  <1>     push rax    ;Save error code
   605 00004619 55                  <1>     push rbp
   606 0000461A E892E1FFFF          <1>     call closeFileHdl
   607 0000461F 58                  <1>     pop rax
   608 00004620 5D                  <1>     pop rbp
   609 00004621 E9C5FAFFFF          <1>     jmp .badExit
   610                              <1> 
   611                              <1> .readDataFromHdl:
   612                              <1> ;Input: bx = File Handle
   613                              <1> ;       ecx = Number of bytes to transfer
   614                              <1> ;       rdx = Ptr to the buffer to use
   615 00004626 E811000000          <1>     call .clearArenaOwner   ;Entering critical section!
   616 0000462B 0FB75DFF            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   617 0000462F 55                  <1>     push rbp
   618 00004630 E8BBE1FFFF          <1>     call readFileHdl
   619 00004635 5D                  <1>     pop rbp
   620 00004636 E810000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   621                              <1>     return
    18                              <2> %%_ret:
    19 0000463B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   622                              <1> .clearArenaOwner:
   623 0000463C 53                  <1>     push rbx
   624 0000463D 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   625 0000463F E8070A0000          <1>     call dosCrit1Enter
   626 00004644 E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   627 00004649 5B                  <1>     pop rbx
   628                              <1>     return
    18                              <2> %%_ret:
    19 0000464A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   629                              <1> .setPSPArenaOwner:
   630                              <1> ;Sets the current PSP as the arena owner
   631 0000464B 53                  <1>     push rbx
   632 0000464C 488B1D(81C30300)    <1>     mov rbx, qword [currentPSP]
   633 00004653 E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   634 00004658 E8F8090000          <1>     call dosCrit1Exit
   635 0000465D 5B                  <1>     pop rbx
   636                              <1>     return
    18                              <2> %%_ret:
    19 0000465E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   637                              <1> .setProgOrEnvArenaOwnerToRBX:
   638                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   639 0000465F 9C                  <1>     pushfq
   640 00004660 50                  <1>     push rax
   641                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   642                              <1>     ;This is because they are set up at separate points in the routine!
   643 00004661 488B45D8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   644 00004665 E80C000000          <1>     call .writeArenaHeaderOwner
   645 0000466A 488B45E8            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   646 0000466E E803000000          <1>     call .writeArenaHeaderOwner
   647 00004673 58                  <1>     pop rax
   648 00004674 9D                  <1>     popfq
   649                              <1>     return
    18                              <2> %%_ret:
    19 00004675 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   650                              <1> .writeArenaHeaderOwner:
   651                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   652                              <1> ;       rbx = Owner ID
   653 00004676 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   654                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004679 74FA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   655 0000467B 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   656 00004681 48895801            <1>     mov qword [rax + 1], rbx
   657                              <1>     return
    18                              <2> %%_ret:
    19 00004685 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    35                                  %include "./Source/Kernel/Local/Local.asm"
    36                              <1> ;Localisation based functions live here
    37                              <1> 
    38                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    39                              <1> ;al = 0 => Get the switch char
    40                              <1> ;al = 1 => Set the switch char to whats in DL
    41                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
    42                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
    43                              <1> ;       Always returns -1 => /DEV/ optional
    44                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    45                              <1> ;       Input value is ignored
    46 00004686 3C01                <1>     cmp al, 01
    47 00004688 7412                <1>     je .getSC
    48 0000468A 7209                <1>     jb .setSC
    49 0000468C 3C03                <1>     cmp al, 03
    50 0000468E 7214                <1>     jb .getDev
    51 00004690 741C                <1>     je .setDev
    52 00004692 B0FF                <1>     mov al, -1
    53                              <1>     return
    18                              <2> %%_ret:
    19 00004694 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> .setSC:
    55 00004695 8815(33C30300)      <1>     mov byte [switchChar], dl
    56                              <1>     return
    18                              <2> %%_ret:
    19 0000469B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    57                              <1> .getSC:
    58 0000469C 8A15(33C30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    59 000046A2 EB02                <1>     jmp short .getRet
    60                              <1> .getDev:
    61 000046A4 B2FF                <1>     mov dl, -1
    62                              <1> .getRet:
    63 000046A6 E87E050000          <1>     call getUserRegs
    64 000046AB 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    65                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    66                              <1>     return
    18                              <2> %%_ret:
    19 000046AE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    67                              <1> 
    68                              <1> 
    69                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    70                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    71                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    72 000046AF C3                  <1>     ret
    36                                  %include "./Source/Kernel/ctrlc.asm"
    37                              <1> diskDevErr:
    38                              <1> ;Called, NOT Jumped to. 
    39                              <1> ;Input: rdi = Disk Buffer pointer
    40                              <1> ;       eax = Status word (Zero Extended)
    41                              <1> ;       rbp = Disk DPB pointer
    42                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    43                              <1> ;Output: al = Int 44h response (0-3)
    44                              <1> ; All other registers preserved
    45 000046B0 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    46 000046B7 89C7                <1>     mov edi, eax    ;Store status word in rdi
    47 000046B9 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    48 000046BC 8A25(C9C30300)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    49 000046C2 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    50                              <1>     ;Test for correct buffer data type
    51 000046C5 53                  <1>     push rbx    ;Save rbx temporarily
    52 000046C6 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    53 000046C9 F6C301              <1>     test bl, dosBuffer
    54 000046CC 7505                <1>     jnz .df0
    55 000046CE 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    56 000046D1 EB17                <1>     jmp short .df3
    57                              <1> .df0:
    58 000046D3 F6C302              <1>     test bl, fatBuffer
    59 000046D6 7505                <1>     jnz .df1
    60 000046D8 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    61 000046DB EB0D                <1>     jmp short .df3
    62                              <1> .df1:
    63 000046DD F6C304              <1>     test bl, dirBuffer
    64 000046E0 7505                <1>     jnz .df2
    65 000046E2 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    66 000046E5 EB03                <1>     jmp short .df3
    67                              <1> .df2:
    68 000046E7 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    69                              <1> .df3:
    70 000046EA 5B                  <1>     pop rbx
    71 000046EB 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    72 000046EF E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    73 000046F4 488B2D(E0C60300)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    74 000046FB 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    75                              <1>     return
    18                              <2> %%_ret:
    19 00004702 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> charDevErr:
    78                              <1> ;Called with ah with additional bits
    79 00004703 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
    80                              <1> criticalErrorSetup:
    81 00004706 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    82 0000470C 48892D(E0C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    83 00004713 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    84                              <1>     ;For now, fall through, but need much work to change it later! 
    85                              <1> 
    86                              <1> 
    87                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    88                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    89                              <1> ; to the critical error handler.
    90                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    91                              <1> ; and with Int44Bitfield set
    92                              <1> ;               AH = Critical Error Bitfield
    93                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    94                              <1> ;               Bit 6 - Reserved
    95                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    96                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    97                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    98                              <1> ;               Bits [2-1] = Affected Disk Error
    99                              <1> ;                     0 0   DOS area
   100                              <1> ;                     0 1   FAT area
   101                              <1> ;                     1 0   Directory area
   102                              <1> ;                     1 1   Data area
   103                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   104                              <1> ;               AL  = Failing drive number if AH[7] = 0
   105                              <1> ;               DIL = Error code for errorMsg
   106                              <1> ;               RSI = EA of Device Header for which device the error occured
   107                              <1> ;Return:
   108                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   109                              <1> ;                  = 1 - Retry the Operation    (Retry)
   110                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   111                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   112                              <1> ; Return response from int 44h in al
   113                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   114                              <1> ; This function will terminate the program if an abort was requested!
   115                              <1> ; This function also destroys RBP
   116 00004719 803D(69C30300)01    <1>     cmp byte [critErrFlag], 1
   117 00004720 7204                <1>     jb .noIntError  ;If not 0, enter
   118 00004722 B003                <1>     mov al, critFail    ;Else, return Fail always
   119 00004724 EB4F                <1>     jmp short .exit     ;Don't translate fail to abort
   120                              <1> .noIntError:
   121 00004726 FA                  <1>     cli ;Disable Interrupts
   122 00004727 FE05(69C30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   123 0000472D FE0D(6AC30300)      <1>     dec byte [inDOS]    ;Exiting DOS
   124 00004733 488925(C1C30300)    <1>     mov qword [xInt44hRSP], rsp
   125 0000473A 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   126 00004741 31ED                <1>     xor ebp, ebp    ;Always zeroed
   127 00004743 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   128 00004745 488B25(C1C30300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   129 0000474C C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   130 00004753 FE05(6AC30300)      <1>     inc byte [inDOS]    ;Reenter DOS
   131 00004759 FB                  <1>     sti ;Reenable Interrupts
   132                              <1>     ;Now we check that the response given was allowed, and translate if needed
   133                              <1> .checkResponse:
   134 0000475A 3C01                <1>     cmp al, critRetry
   135 0000475C 721F                <1>     jb .checkIgnore
   136 0000475E 7428                <1>     je .checkRetry
   137 00004760 3C03                <1>     cmp al, critFail
   138 00004762 752F                <1>     jne .abort   ;Must be abort
   139                              <1> .setFail:   ;Here is for fail
   140 00004764 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   141 00004766 FE05(CBC30300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   142 0000476C F605(C9C30300)08    <1>     test byte [Int44bitfld], critFailOK
   143 00004773 751E                <1>     jnz .abort  ;If fail not permitted, abort
   144                              <1> .exit:
   145 00004775 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   146                              <1>     return
    18                              <2> %%_ret:
    19 0000477C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   147                              <1> .checkIgnore:
   148 0000477D F605(C9C30300)20    <1>     test byte [Int44bitfld], critIgnorOK
   149 00004784 75EF                <1>     jnz .exit
   150 00004786 EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   151                              <1> .checkRetry:
   152 00004788 F605(C9C30300)10    <1>     test byte [Int44bitfld], critRetryOK
   153 0000478F 75E4                <1>     jnz .exit   
   154 00004791 EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   155                              <1> .abort:
   156                              <1> ;Prepare to abort. We abort from within!
   157                              <1>     ;First check if the process is it's own parent.
   158                              <1>     ;If it is, we exit fail and return to the process
   159 00004793 488B05(81C30300)    <1>     mov rax, qword [currentPSP] ;Get the current psp
   160 0000479A 53                  <1>     push rbx
   161 0000479B 488B5822            <1>     mov rbx, qword [rax + psp.parentPtr]
   162 0000479F 4839C3              <1>     cmp rbx, rax    ;Check if the process is it's own parent
   163 000047A2 5B                  <1>     pop rbx
   164 000047A3 7509                <1>     jne .kill   ;If the process is not it's own parent, we kill the process
   165 000047A5 C605(F7C30300)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   166 000047AC EBB6                <1>     jmp short .setFail
   167                              <1> .kill:
   168 000047AE 66893D(6DC30300)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   169 000047B5 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   170 000047B7 C605(60C60300)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   171 000047BE E9E0F7FFFF          <1>     jmp terminateClean.altEP
   172                              <1> 
   173                              <1> ctrlBreakHdlr:
   174 000047C3 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   175 000047C5 E88AD8FFFF          <1>     call printCaretASCII
   176 000047CA E8B5D8FFFF          <1>     call printCRLF
   177                              <1>     ;Reset the console back to 0
   178 000047CF C605(F5C30300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   179                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   180 000047D6 FA                  <1> 	cli
   181 000047D7 488B25(DCC30300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   182 000047DE E83A080000          <1> 	call dosPopRegs ;Get user state back
   183 000047E3 488925(89C30300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   184 000047EA F8                  <1>     clc
   185 000047EB CD43                <1>     int 43h ;Call critical error handler
   186 000047ED FA                  <1>     cli ;Clear interrupts again
   187 000047EE 488905(95C30300)    <1>     mov qword [oldRAX], rax ;Save rax
   188 000047F5 9C                  <1>     pushfq  ;Get flags in rax
   189 000047F6 58                  <1>     pop rax 
   190 000047F7 483B25(89C30300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   191 000047FE 750C                <1>     jne .checkCF
   192                              <1> .returnToDOS:
   193 00004800 488B05(95C30300)    <1>     mov rax, qword [oldRAX]
   194 00004807 E9B7060000          <1>     jmp functionDispatch    ;Goto int 41h
   195                              <1> .checkCF:
   196 0000480C 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   197 00004813 A801                <1>     test al, 1  ;CF set?
   198 00004815 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   199 00004817 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   200 0000481C C605(EDC30300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   201 00004823 E99B060000          <1>     jmp functionDispatch
   202                              <1> 
    37                                  %include "./Source/Kernel/dosPrim.asm"
    38                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    39                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    40                              <1> 
    41                              <1> dosDefCritErrHdlr:
    42                              <1> ;The DOS default critical error handler always returns FAIL
    43 00004828 B003                <1>     mov al, critFail
    44 0000482A 48CF                <1>     iretq
    45                              <1> goDriverChar:
    46                              <1> ;Shortcut for Char requests, make a driver request
    47                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    48 0000482C 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    49                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    50                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    51                              <1> ;       rbx = Ptr to the request header for the driver call!
    52 00004830 E82A080000          <1>     call dosCrit2Enter
    53 00004835 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    54 00004838 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    55 0000483B E829080000          <1>     call dosCrit2Exit
    56                              <1>     return
    18                              <2> %%_ret:
    19 00004840 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    57                              <1> 
    58                              <1> setupPhysicalDiskRequest:
    59                              <1> ;Ensure that al has valid disk number
    60                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    61                              <1> ;If CF=NC, rbp = DPB ptr.
    62                              <1> ;If CF=CY, exit error
    63 00004841 84C0                <1>     test al, al
    64 00004843 723F                <1>     jc .diskError
    65 00004845 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
    66 0000484B 7337                <1>     jae .diskError
    67 0000484D 50                  <1>     push rax
    68 0000484E FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    69 00004850 E861040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    70 00004855 58                  <1>     pop rax
    71 00004856 7235                <1>     jc .error
    72 00004858 8805(63C60300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    73 0000485E 488B2D(6CC60300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    74 00004865 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    75 0000486D 750A                <1>     jnz .netError
    76 0000486F 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    77 00004873 E83C030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    78                              <1>     return
    18                              <2> %%_ret:
    19 00004878 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    79                              <1> .netError:
    80 00004879 66C705(6DC30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    80 00004881 00                  <1>
    81 00004882 EB09                <1>     jmp short .error
    82                              <1> .diskError:
    83 00004884 66C705(6DC30300)0F- <1>     mov word [errorExCde], errBadDrv
    83 0000488C 00                  <1>
    84                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    85 0000488D C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
    86 00004894 C605(6FC30300)07    <1>     mov byte [errorAction], eActRetUsr
    87 0000489B C605(70C30300)09    <1>     mov byte [errorClass], eClsBadFmt
    88 000048A2 F9                  <1>     stc
    89                              <1>     return
    18                              <2> %%_ret:
    19 000048A3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    90                              <1> 
    91                              <1> setupAbsDiskEntry:
    92                              <1> ;Prepares to sets up the CDS and DPB for the request
    93 000048A4 FE05(6AC30300)      <1>     inc byte [inDOS]
    94 000048AA FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    95 000048AB FC                  <1>     cld ;Set string ops in the right direction
    96 000048AC E890FFFFFF          <1>     call setupPhysicalDiskRequest
    97 000048B1 7223                <1>     jc .exit    ;Error exit
    98 000048B3 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    99 000048BA 56                  <1>     push rsi
   100 000048BB 50                  <1>     push rax
   101 000048BC 488D35(7FC40300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
   102 000048C3 8806                <1>     mov byte [rsi], al  ;Construct a path
   103 000048C5 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   104 000048C8 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   105 000048CC F8                  <1>     clc
   106                              <1> ;++++++++++++++++++++++++++++
   107                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   108                              <1> ;Entered with path in rsi (ah=03h)
   109 000048CD B800030000          <1>     mov eax, 0300h  
   110 000048D2 CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   111                              <1> ;++++++++++++++++++++++++++++
   112 000048D4 58                  <1>     pop rax
   113 000048D5 5E                  <1>     pop rsi
   114                              <1> .exit:
   115 000048D6 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   116                              <1>     return
    18                              <2> %%_ret:
    19 000048D8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   117                              <1> 
   118                              <1> absDiskWrite:       ;Int 46h
   119                              <1> ;al = Drive number
   120                              <1> ;rbx = Memory Buffer address to read from
   121                              <1> ;ecx = Number of sectors to write
   122                              <1> ;rdx = Start LBA to write to
   123 000048D9 FA                  <1>     cli
   124 000048DA 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   125 000048E1 488D25(E0D80300)    <1>     lea rsp, DiskStakTop
   126 000048E8 55                  <1>     push rbp
   127 000048E9 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   128 000048EA E8B5FFFFFF          <1>     call setupAbsDiskEntry
   129 000048EF 7252                <1>     jc absDiskExit
   130 000048F1 E8D3010000          <1>     call primReqWriteSetup
   131 000048F6 EB1D                <1>     jmp short absDiskReadWriteCommon
   132                              <1> absDiskRead:        ;Int 45h
   133                              <1> ;al = Drive number
   134                              <1> ;rbx = Memory Buffer address to write to
   135                              <1> ;ecx = Number of sectors to read
   136                              <1> ;rdx = Start LBA to read from
   137 000048F8 FA                  <1>     cli 
   138 000048F9 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   139 00004900 488D25(E0D80300)    <1>     lea rsp, DiskStakTop
   140 00004907 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   141 00004908 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   142 00004909 E896FFFFFF          <1>     call setupAbsDiskEntry
   143 0000490E 7233                <1>     jc absDiskExit
   144 00004910 E8BF010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   145                              <1> absDiskReadWriteCommon:
   146                              <1> ;Entered with the appropriate function number in ah
   147                              <1> ; and primary request header in rbx
   148 00004915 E83B000000          <1>     call absDiskDriverCall
   149 0000491A 7427                <1>     jz absDiskExit  ;Skip error code checking
   150 0000491C 8A05(25C40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   151                              <1>     ;DOS uses the following pairs in a table
   152                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   153 00004922 B480                <1>     mov ah, 80h ;Attachment failure
   154 00004924 3C0C                <1>     cmp al, 0Ch ;Gen error
   155 00004926 741A                <1>     je .absExit
   156 00004928 B440                <1>     mov ah, 40h ;Seek error
   157 0000492A 3C06                <1>     cmp al, 06h
   158 0000492C 7414                <1>     je .absExit
   159 0000492E B408                <1>     mov ah, 08h ;Bad CRC
   160 00004930 3C04                <1>     cmp al, 04h
   161 00004932 740E                <1>     je .absExit
   162 00004934 B404                <1>     mov ah, 04h ;Sector not found
   163 00004936 3C08                <1>     cmp al, 08h
   164 00004938 7408                <1>     je .absExit
   165 0000493A 30E4                <1>     xor ah, ah  ;Write Protect Violation
   166 0000493C 84C0                <1>     test al, al
   167 0000493E 7402                <1>     je .absExit
   168 00004940 B402                <1>     mov ah, 02h ;Other Error
   169                              <1> .absExit:
   170 00004942 F9                  <1>     stc
   171                              <1> absDiskExit:
   172 00004943 5B                  <1>     pop rbx
   173 00004944 5D                  <1>     pop rbp
   174 00004945 FA                  <1>     cli
   175 00004946 FE0D(6AC30300)      <1>     dec byte [inDOS]
   176 0000494C 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]
   177 00004953 FB                  <1>     sti ;Reenable interrupts
   178                              <1>     return ;Return from interrupt without popping flags!
    18                              <2> %%_ret:
    19 00004954 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   179                              <1> absDiskDriverCall:
   180                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   181                              <1> ;       rbx = Request header address
   182                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   183                              <1> ;       eax = Status word from request
   184                              <1> ;       ecx = Number of sectors transferred
   185 00004955 56                  <1>     push rsi
   186                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   187 00004956 8B0D(38C40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   188                              <1>     ;Prepare for goDriver now
   189 0000495C 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   190 00004960 E8CBFEFFFF          <1>     call goDriver   ;Make request
   191 00004965 5E                  <1>     pop rsi
   192 00004966 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   193 0000496C 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   194 0000496E 0FB705(25C40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   195 00004975 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   196                              <1>     return
    18                              <2> %%_ret:
    19 00004979 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> getDiskDPB:
   199                              <1> ;Gets the disk DPB if the Disk is valid
   200                              <1> ;Otherwise will return a pointer to the drive DPB
   201                              <1> ;Called with rdi pointing to the CDS
   202                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   203 0000497A 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   204 0000497E 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   205 00004981 8805(63C60300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   206 00004987 E828020000          <1>     call setWorkingDPB
   207 0000498C 57                  <1>     push rdi    ;Save the CDS ptr
   208 0000498D E85A000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   209 00004992 5F                  <1>     pop rdi
   210 00004993 7233                <1>     jc .exitBad ;Preserve CF
   211 00004995 7530                <1>     jnz .exit
   212                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   213 00004997 8A0D(70C00300)      <1>     mov cl, byte [lastdrvNum]
   214 0000499D 31C0                <1>     xor eax, eax
   215 0000499F 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   216 000049A2 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   217 000049A6 488B3D(5DC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   218                              <1> .checkCDS:
   219 000049AD 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   220 000049B1 7509                <1>     jne .next
   221 000049B3 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   222 000049B7 7403                <1>     jz .next    ;IF yes, skip it
   223 000049B9 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   224                              <1> .next:
   225 000049BC 4881C75B000000      <1>     add rdi, cds_size
   226 000049C3 FEC9                <1>     dec cl
   227 000049C5 75E6                <1>     jnz .checkCDS
   228                              <1> .exit:
   229 000049C7 F8                  <1>     clc
   230                              <1> .exitBad:
   231                              <1>     return
    18                              <2> %%_ret:
    19 000049C8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> checkIfMedCheck:
   234                              <1> ;Input: rsi = DPB for disk
   235 000049C9 50                  <1>     push rax
   236 000049CA 53                  <1>     push rbx
   237                              <1>     ;!!!!!!!!!!!!
   238                              <1>     ;For now just if its the same disk, be ok with it.
   239                              <1>     ;!!!!!!!!!!!!
   240                              <1>     ;Read the clock record. Cross Day Bndry will always force a new operation
   241                              <1>     ;Read the time fields directly.
   242 000049CB E800D5FFFF          <1>     call swapPrimaryHeader  ;Save the primary header temporarily
   243 000049D0 E84DDBFFFF          <1>     call readDateTimeRecord ;Update the time
   244 000049D5 F9                  <1>     stc ;Set CF, write backup to primary header
   245 000049D6 E8F5D4FFFF          <1>     call swapPrimaryHeader
   246                              <1> 
   247                              <1> 
   248 000049DB 8A06                <1>     mov al, byte [rsi + dpb.bDriveNumber] 
   249 000049DD 3805(ACD90300)      <1>     cmp byte [lastDiskNum], al
   250 000049E3 7500                <1>     jnz .exit
   251                              <1> 
   252                              <1> .exit:
   253 000049E5 5B                  <1>     pop rbx
   254 000049E6 58                  <1>     pop rax
   255                              <1>     return
    18                              <2> %%_ret:
    19 000049E7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   256                              <1> .okTime:
   257 000049E8 31DB                <1>     xor ebx, ebx
   258 000049EA EBF9                <1>     jmp short .exit
   259                              <1> ensureDiskValid:
   260                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   261                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   262                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   263                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   264                              <1> .medChk:
   265 000049EC E82C010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   266                              <1> ;Return in rbx the req hdr address
   267 000049F1 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   268 000049F5 E836FEFFFF          <1>     call goDriver   ;Request!
   269 000049FA 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   270 000049FE F7C700800000        <1>     test edi, drvErrStatus
   271 00004A04 756F                <1>     jnz .diskDrvCritErrMedChk
   272                              <1> .medChkIgnore:
   273 00004A06 8A05(63C60300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   274 00004A0C 30E4                <1>     xor ah, ah
   275 00004A0E 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   276 00004A11 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   277 00004A14 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   278 00004A16 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   279 00004A18 E82DBFFFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   280 00004A1D F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   281 00004A1E 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   282                              <1>     ;ZF=NZ from test for dirty buffers
   283                              <1> .exit:
   284                              <1>     return
    18                              <2> %%_ret:
    19 00004A20 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   285                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   286 00004A21 C605(E8D80300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   287 00004A28 E841BFFFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   288                              <1>     ;Get a buffer to read BPB into in rdi
   289 00004A2D 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   290 00004A2F E8ECC0FFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   291 00004A34 72EA                <1>     jc .exit    ;Immediately exit with the carry flag set
   292 00004A36 4889DF              <1>     mov rdi, rbx
   293                              <1> .repeatEP:
   294 00004A39 E80B010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   295 00004A3E 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   296 00004A42 E8E9FDFFFF          <1>     call goDriver   ;Request!
   297 00004A47 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   298 00004A4B A900800000          <1>     test eax, drvErrStatus
   299 00004A50 7561                <1>     jnz .diskDrvCritErrBPB
   300                              <1>     ;Now rebuild the dpb fields for this drive
   301 00004A52 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   302 00004A56 E8EA080000          <1>     call createDPB  
   303 00004A5B E83FBFFFFF          <1>     call setBufferReferenced    ;We are now done with the buffer
   304                              <1>     ;Adjust the buffer header information
   305 00004A60 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   306 00004A63 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   307 00004A66 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   308 00004A69 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   309 00004A6C 30E4                <1>     xor ah, ah
   310 00004A6E 8825(E8D80300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   311                              <1>     return
    18                              <2> %%_ret:
    19 00004A74 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   312                              <1> .diskDrvCritErrMedChk:
   313                              <1> ;Critical Errors fall through here
   314                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   315 00004A75 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   316 00004A7C 48892D(E0C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   317 00004A83 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   318 00004A86 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   319 00004A88 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   320 00004A8E E886FCFFFF          <1>     call criticalDOSError
   321 00004A93 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]
   322 00004A9A 488B2D(E0C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   323 00004AA1 3C01                <1>     cmp al, critRetry
   324 00004AA3 0F8443FFFFFF        <1>     je .medChk
   325 00004AA9 3C00                <1>     cmp al, critIgnore
   326 00004AAB 0F8455FFFFFF        <1>     je .medChkIgnore
   327 00004AB1 F9                  <1>     stc ;Set error flag to indicate fail
   328                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00004AB2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> .diskDrvCritErrBPB:
   331                              <1>     ;eax has status word, rbp has dpb ptr
   332                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   333 00004AB3 C605(C9C30300)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   334 00004ABA E8F1FBFFFF          <1>     call diskDevErr
   335 00004ABF 3C01                <1>     cmp al, critRetry
   336 00004AC1 0F8472FFFFFF        <1>     je .repeatEP
   337                              <1>     ;Else we fail (Ignore=Fail here)
   338 00004AC7 F9                  <1>     stc ;Set error flag to indicate fail
   339                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00004AC8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   340                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   341                              <1> ;           Primitive Driver Requests
   342                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   343                              <1> ;First are Disk requests, then Char device requests
   344                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   345                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   346                              <1> 
   347                              <1> primReqWriteSetup:
   348 00004AC9 50                  <1>     push rax
   349 00004ACA B408                <1>     mov ah, drvWRITE    ;Command code
   350 00004ACC 0225(32C30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   351 00004AD2 EB03                <1>     jmp short primReqRWCommon
   352                              <1> primReqReadSetup:
   353 00004AD4 50                  <1>     push rax
   354 00004AD5 B404                <1>     mov ah, drvREAD
   355                              <1> primReqRWCommon:
   356                              <1> ;Sets up the IO request packet with:
   357                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   358                              <1> ; rbx = Data storage buffer ptr
   359                              <1> ; ecx = Number of sectors to transfer
   360                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   361                              <1> ; ~~~~ Set by entry function ~~~~ 
   362                              <1> ; ah = Command code
   363                              <1> ; All regs preserved EXCEPT rbx.
   364                              <1> ; Return: rbx = Transfer Address
   365 00004AD7 48891D(30C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   366 00004ADE 890D(38C40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   367 00004AE4 C605(22C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   368 00004AEB 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   369 00004AF0 8905(23C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   370 00004AF6 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   371 00004AF9 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   372                              <1>     ;Disk operations only here!
   373 00004AFB 488915(3CC40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   374 00004B02 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   375 00004B05 8805(2FC40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   376 00004B0B 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   377 00004B0E 8805(23C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   378                              <1> primReqCommonExit:
   379                              <1> ;Returns in rbx the primary request header as these functions
   380                              <1> ; setup the request in the primary request header space
   381 00004B14 58                  <1>     pop rax
   382 00004B15 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   383                              <1>     return
    18                              <2> %%_ret:
    19 00004B1C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   384                              <1> 
   385                              <1> primReqMedCheckSetup:
   386                              <1> ;Prepare the diskIO packet for mediacheck
   387                              <1> ;rbp has DPB pointer for device to check media on
   388 00004B1D 50                  <1>     push rax
   389 00004B1E C605(22C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   390 00004B25 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   391 00004B28 8805(2FC40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   392 00004B2E 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   393 00004B31 8805(23C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   394 00004B37 C605(24C40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   395 00004B3E 66C705(25C40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   395 00004B46 00                  <1>
   396 00004B47 EBCB                <1>     jmp short primReqCommonExit
   397                              <1> 
   398                              <1> primReqGetBPBSetup:
   399                              <1> ;rbp has DPB pointer for device
   400                              <1> ;rdi has sector buffer header pointer for transfer
   401 00004B49 50                  <1>     push rax
   402 00004B4A 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   403 00004B4E 48893D(30C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   404 00004B55 C605(22C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   405 00004B5C 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   406 00004B5F 8805(2FC40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   407 00004B65 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   408 00004B68 8805(23C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   409 00004B6E C605(24C40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   410 00004B75 66C705(25C40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   410 00004B7D 00                  <1>
   411 00004B7E EB94                <1>     jmp short primReqCommonExit
   412                              <1> 
   413                              <1> primReqOpenSetup:
   414                              <1> ;al = unit number if a disk device. Undefined otherwise
   415 00004B80 50                  <1>     push rax
   416 00004B81 B40D                <1>     mov ah, drvOPEN
   417                              <1> primReqCloseSetup:
   418                              <1> ;al = unit number if a disk device. Undefined otherwise
   419 00004B83 50                  <1>     push rax
   420 00004B84 B40E                <1>     mov ah, drvCLOSE
   421                              <1> primReqOCcommon:
   422 00004B86 C605(22C40300)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   423 00004B8D 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   424 00004B8E 8905(23C40300)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   425                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   426 00004B94 E97BFFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   427                              <1> 
   428                              <1> secdReqCharIOReq:
   429                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   430                              <1> ;Input:
   431                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   432                              <1> ; ecx = Length of buffer
   433                              <1> ; rdi = Buffer pointer
   434                              <1> ;Output: 
   435                              <1> ; rbx = Transfer Address 
   436 00004B99 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   437 00004BA0 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   438 00004BA3 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   439 00004BA6 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   440 00004BAC 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   441 00004BB0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   442                              <1>     return
    18                              <2> %%_ret:
    19 00004BB3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   443                              <1> ;If the device which will process this request is a disk device
   444                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   445                              <1> ;Then we will read the appropriate byte from that buffer to the 
   446                              <1> ; singleIOByt buffer.
   447                              <1> ;Such a request will require additional setup with the following fields:
   448                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    38                                  %include "./Source/Kernel/dosUtils.asm"
    39                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    40                              <1> 
    41                              <1> ;Basic Drive related Utilities
    42                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    43                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    44                              <1> ; that gets set up)
    45                              <1> 
    46                              <1> setWorkingDPB:
    47                              <1> ;Gets dpb in rbp and saves to workingDPB
    48 00004BB4 48892D(64C60300)    <1>     mov qword [workingDPB], rbp
    49                              <1>     return
    18                              <2> %%_ret:
    19 00004BBB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    50                              <1> 
    51                              <1> testCDSNet:
    52                              <1> ;Checks if the workingCDS is a redirector drive
    53                              <1> ;Returns: CF=NC => Not net
    54                              <1> ;         CF=CY => Network redirector
    55                              <1> ;         ZF=ZE => Net without CDS (\\ paths only)
    56                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    57                              <1> ;         rdi = workingCDS ptr
    58 00004BBC 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
    59 00004BC3 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    60 00004BCA 7409                <1>     je .net
    61 00004BCC 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    62 00004BD2 7501                <1>     jnz .net ;Net with CDS
    63                              <1>     return  ;CF=NC => Not net
    18                              <2> %%_ret:
    19 00004BD4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    64                              <1> .net:
    65 00004BD5 F9                  <1>     stc ;Set Net bit
    66                              <1>     return
    18                              <2> %%_ret:
    19 00004BD6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    67                              <1> 
    68                              <1> getDiskData:
    69                              <1> ;This function returns:
    70                              <1> ;al = sectors per cluster
    71                              <1> ;ah = media ID byte
    72                              <1> ;ebx = total clusters
    73                              <1> ;cx = bytes per sector
    74                              <1> ;edx = number of available clusters
    75                              <1> ;
    76                              <1> ;If CF=CY on exit, al contains the error code
    77 00004BD7 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    78 00004BDC 7308                <1>     jnc .physical
    79                              <1>     ;Beep a redir request out
    80 00004BDE B80C110000          <1>     mov eax, 110Ch 
    81 00004BE3 CD4F                <1>     int 4Fh
    82                              <1>     return
    18                              <2> %%_ret:
    19 00004BE5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    83                              <1> .physical:
    84                              <1> ;Now we must lock the structures
    85 00004BE6 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
    86 00004BED E859040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    87 00004BF2 E883FDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    88 00004BF7 721C                <1>     jc .exit
    89 00004BF9 E806C1FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    90 00004BFE 7215                <1>     jc .exit
    91 00004C00 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    92 00004C03 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    93 00004C05 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    94 00004C08 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    95 00004C0B FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
    96 00004C0D 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    97 00004C11 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    98 00004C14 F8                  <1>     clc
    99                              <1> .exit:
   100 00004C15 E83B040000          <1>     call dosCrit1Exit
   101                              <1>     return
    18                              <2> %%_ret:
    19 00004C1A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   102                              <1> 
   103                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
   104                              <1> ;Input: al = Interrupt number
   105                              <1> ;Output: rbx = Interrupt Vector
   106 00004C1B 50                  <1>     push rax    ;Preserve rax, segment selector returned by call
   107 00004C1C 52                  <1>     push rdx    ;Preserve rdx, Attribute Word returned by call
   108 00004C1D 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   109 00004C1F B807F00000          <1>     mov eax, 0F007h
   110 00004C24 CD35                <1>     int 35h
   111 00004C26 5A                  <1>     pop rdx
   112 00004C27 58                  <1>     pop rax
   113                              <1>     return
    18                              <2> %%_ret:
    19 00004C28 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> getUserRegs:   ;Int 4Fh AX=1218h
   116                              <1> ;Returns ptr to user regs in rsi
   117 00004C29 488B35(DCC30300)    <1>     mov rsi, qword [oldRSP]
   118                              <1>     return
    18                              <2> %%_ret:
    19 00004C30 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   119                              <1> 
   120                              <1> walkDPBchain:
   121                              <1> ;Called with al = 0 based drive number
   122                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
   123 00004C31 488B35(3BC00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
   124                              <1> .walk:
   125 00004C38 4881FEFFFFFFFF      <1>     cmp rsi, -1
   126 00004C3F 740A                <1>     je .exitBad
   127 00004C41 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   128 00004C43 7407                <1>     je .exit    ;Drive found
   129 00004C45 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   130 00004C49 EBED                <1>     jmp short .walk
   131                              <1> .exitBad:
   132 00004C4B F9                  <1>     stc
   133                              <1> .exit:
   134                              <1>     return
    18                              <2> %%_ret:
    19 00004C4C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   135                              <1> setDrive:   
   136                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
   137                              <1> ;Input: al = 1-based drive number
   138                              <1> ;Output: al = 0-based drive number
   139                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   140                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   141                              <1> ;            set.
   142 00004C4D E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   143 00004C52 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   144 00004C54 56                  <1>     push rsi
   145 00004C55 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   146 00004C5C 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   147 00004C62 5E                  <1>     pop rsi
   148 00004C63 7401                <1>     jz .exit
   149 00004C65 F9                  <1>     stc
   150                              <1> .exit:
   151                              <1>     return
    18                              <2> %%_ret:
    19 00004C66 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   152                              <1> 
   153                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   154                              <1> ;Allows a redirector or subst/join to build a CDS
   155                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   156                              <1> ; volumes, that are made at system boot.
   157                              <1> ;Input: al = Drive Letter for drive
   158                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   159                              <1> ;Output: rdi = newly filled in workingCDS
   160                              <1> ;CF=NC => CDS valid and has a DPB
   161                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   162 00004C67 50                  <1>     push rax
   163 00004C68 2C40                <1>     sub al, "A"-1
   164 00004C6A 3A05(6FC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   165 00004C70 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   166 00004C77 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   167 00004C7D 58                  <1>     pop rax
   168 00004C7E 7235                <1>     jb .exit    ;Exit with CF=CY
   169 00004C80 50                  <1>     push rax
   170 00004C81 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   171 00004C86 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   172 00004C88 58                  <1>     pop rax
   173 00004C89 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   174 00004C8F C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   175 00004C96 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   176 00004C9E 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   177                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   178 00004CA4 50                  <1>     push rax
   179 00004CA5 56                  <1>     push rsi
   180 00004CA6 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   181 00004CA8 E884FFFFFF          <1>     call walkDPBchain
   182 00004CAD 7204                <1>     jb .skipSettingDPB
   183 00004CAF 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   184                              <1> .skipSettingDPB:
   185 00004CB3 5E                  <1>     pop rsi
   186 00004CB4 58                  <1>     pop rax
   187                              <1> .exit:
   188                              <1>     return
    18                              <2> %%_ret:
    19 00004CB5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   189                              <1> 
   190                              <1> getCDS:     ;Int 4Fh AX=1219h
   191                              <1> ;Gets the device DPB and saves it in the DOS variable
   192                              <1> ;This can be called to get CDS for network drives too!
   193                              <1> ;Input: al = 1 based drive number
   194                              <1> ;Sets workingCDS var with the CDS for the device. 
   195                              <1> ;   If device on a network, sets CF
   196                              <1> ;Returns al with 0-based drive number
   197 00004CB6 84C0                <1>     test al, al
   198 00004CB8 7508                <1>     jnz .skip
   199 00004CBA 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   200 00004CC0 FEC0                <1>     inc al
   201                              <1> .skip:
   202 00004CC2 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   203 00004CC4 56                  <1>     push rsi
   204 00004CC5 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   205 00004CCC F605(5CC60300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   206 00004CD3 7423                <1>     jz .physDrive
   207                              <1>     ;Invokation via 21/5D00
   208 00004CD5 50                  <1>     push rax
   209 00004CD6 57                  <1>     push rdi
   210 00004CD7 488D3D(FBC50300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   211 00004CDE 48893D(6CC60300)    <1>     mov qword [workingCDS], rdi ;Make it current
   212 00004CE5 0441                <1>     add al, "A" ;Convert to a drive letter
   213 00004CE7 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   214 00004CEC 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   215 00004CF2 5F                  <1>     pop rdi
   216 00004CF3 58                  <1>     pop rax
   217 00004CF4 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   218 00004CF6 EB17                <1>     jmp short .exitOk   ;All oki
   219                              <1> .physDrive:
   220 00004CF8 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   221 00004CFD 7208                <1>     jc .exitBad
   222 00004CFF 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   223 00004D05 7508                <1>     jnz .exitOk ;Exit with flag cleared
   224                              <1>     ;Else Return to unknown error locus
   225                              <1> .exitBad:
   226 00004D07 C605(6CC30300)01    <1>     mov byte [errorLocus], eLocUnk
   227                              <1> .exitBad1:
   228 00004D0E F9                  <1>     stc
   229                              <1> .exitOk:
   230 00004D0F 5E                  <1>     pop rsi
   231                              <1>     return
    18                              <2> %%_ret:
    19 00004D10 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   234                              <1>     ;Gets the CDS for the current drive in al
   235                              <1>     ;Input: al = Drive number, 0 = A ...
   236                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   237                              <1>     ;        CF=CY => al not valid
   238 00004D11 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
   239 00004D17 7202                <1>     jb .ctn
   240 00004D19 F9                  <1>     stc 
   241                              <1>     return
    18                              <2> %%_ret:
    19 00004D1A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   242                              <1> .ctn:
   243 00004D1B 50                  <1>     push rax
   244 00004D1C 52                  <1>     push rdx
   245 00004D1D 0FB6C0              <1>     movzx eax, al
   246 00004D20 48BE5B000000000000- <1>     mov rsi, cds_size
   246 00004D29 00                  <1>
   247 00004D2A 31D2                <1>     xor edx, edx
   248 00004D2C F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   249 00004D2E 488B35(5DC00300)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   250 00004D35 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   251 00004D38 488935(6CC60300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   252 00004D3F 5A                  <1>     pop rdx
   253 00004D40 58                  <1>     pop rax
   254 00004D41 F8                  <1>     clc
   255                              <1>     return
    18                              <2> %%_ret:
    19 00004D42 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   256                              <1> 
   257                              <1> 
   258                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   259                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   260                              <1> ;Input: AL = Char to normalise.
   261                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   262                              <1> ;If path separator, set ZF=ZE
   263 00004D43 3C5C                <1>     cmp al, "\"
   264 00004D45 7406                <1>     je .exit
   265 00004D47 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   266 00004D49 7502                <1>     jne .exit
   267 00004D4B B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   268                              <1> .exit:
   269                              <1>     return
    18                              <2> %%_ret:
    19 00004D4D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   270                              <1> 
   271                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   272                              <1> ;Convert a lowercase char to uppercase
   273                              <1> ; Leave alone uppercase chars and invalid chars
   274                              <1> ;Input: al = Char to convert to uppercase
   275                              <1> ;Output: al = Processed char
   276 00004D4E 53                  <1>     push rbx
   277 00004D4F 3C61                <1>     cmp al, "a"
   278 00004D51 7214                <1>     jb .exit
   279 00004D53 3C7A                <1>     cmp al, "z"
   280 00004D55 7702                <1>     ja .checkExt
   281 00004D57 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   282                              <1> .checkExt:
   283 00004D59 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   284 00004D5B 720A                <1>     jb .exit
   285 00004D5D 2C80                <1>     sub al, 80h ;Turn into table offset
   286 00004D5F 488D1D6AB4FFFF      <1>     lea rbx, extAsciiTbl
   287 00004D66 D7                  <1>     xlatb   ;Get converted extended byte into al
   288                              <1> .exit:
   289 00004D67 50                  <1>     push rax    ;Save al temporarily
   290 00004D68 488D1DE1B4FFFF      <1>     lea rbx, extAsciiSig
   291 00004D6F D7                  <1>     xlatb   ;Get the signature in al
   292 00004D70 A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   293 00004D72 58                  <1>     pop rax
   294 00004D73 5B                  <1>     pop rbx
   295                              <1>     return
    18                              <2> %%_ret:
    19 00004D74 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   296                              <1> 
   297                              <1> strlen: ;Int 4Fh, AX=1212h
   298                              <1> ;Gets the length of a ASCIIZ string
   299                              <1> ;Input: rdi = Source buffer
   300                              <1> ;Output: ecx = Length of string
   301 00004D75 50                  <1>     push rax
   302 00004D76 57                  <1>     push rdi
   303 00004D77 30C0                <1>     xor al, al
   304 00004D79 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   305 00004D7B FFC9                <1>     dec ecx ;rcx = -1
   306 00004D7D F2AE                <1>     repne scasb
   307 00004D7F F7D1                <1>     not ecx
   308 00004D81 5F                  <1>     pop rdi
   309 00004D82 58                  <1>     pop rax
   310                              <1>     return
    18                              <2> %%_ret:
    19 00004D83 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   311                              <1> 
   312                              <1> strcpy:
   313                              <1> ;Copies a null terminated string from rsi to rdi
   314 00004D84 AC                  <1>     lodsb
   315 00004D85 AA                  <1>     stosb
   316 00004D86 84C0                <1>     test al, al
   317                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004D88 74F9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   318 00004D8A EBF8                <1>     jmp short strcpy
   319                              <1> 
   320                              <1> 
   321                              <1> normaliseFileName:  ;Int 4Fh, AX=1211h
   322                              <1> ;Converts lowercase to uppercase and / to "\"
   323                              <1> ;Input: rsi = Source buffer
   324                              <1> ;       rdi = Buffer to place normalised path
   325 00004D8C 50                  <1>     push rax
   326 00004D8D 56                  <1>     push rsi
   327 00004D8E 57                  <1>     push rdi
   328                              <1> .scan:
   329 00004D8F AC                  <1>     lodsb
   330 00004D90 84C0                <1>     test al, al
   331 00004D92 740D                <1>     jz .exit
   332 00004D94 E8AAFFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   333 00004D99 E8B0FFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   334 00004D9E AA                  <1>     stosb
   335 00004D9F EBEE                <1>     jmp short .scan
   336                              <1> .exit:
   337 00004DA1 5F                  <1>     pop rdi
   338 00004DA2 5E                  <1>     pop rsi
   339 00004DA3 58                  <1>     pop rax
   340                              <1>     return
    18                              <2> %%_ret:
    19 00004DA4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   341                              <1> 
   342                              <1> compareFileNames:   ;Int 4Fh, AX=121Eh
   343                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   344                              <1> ;Input: rsi = One ASCIIZ pathname
   345                              <1> ;       rdi = Second ASCIIZ pathname
   346                              <1> ;Return:
   347                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   348 00004DA5 50                  <1>     push rax
   349 00004DA6 56                  <1>     push rsi
   350 00004DA7 57                  <1>     push rdi
   351                              <1> .scan:
   352 00004DA8 8A06                <1>     mov al, byte [rsi]
   353 00004DAA 84C0                <1>     test al, al
   354 00004DAC 7424                <1>     jz .endOfString
   355 00004DAE 8A27                <1>     mov ah, byte [rdi]
   356 00004DB0 E88EFFFFFF          <1>     call swapPathSeparator  ;Convert al to \ if pathsep
   357 00004DB5 7410                <1>     jz .pathseps
   358 00004DB7 660D2020            <1>     or ax, 2020h    ;Convert both chars to lower case
   359 00004DBB 38E0                <1>     cmp al, ah
   360 00004DBD 7515                <1>     jnz .exit
   361                              <1> .nextChar:
   362 00004DBF 48FFC6              <1>     inc rsi
   363 00004DC2 48FFC7              <1>     inc rdi
   364 00004DC5 EBE1                <1>     jmp short .scan
   365                              <1> .pathseps:
   366 00004DC7 86E0                <1>     xchg ah, al
   367 00004DC9 E875FFFFFF          <1>     call swapPathSeparator  ;If ah is not a pathsep, then exit ZF=NZ
   368 00004DCE 7504                <1>     jnz .exit
   369 00004DD0 EBED                <1>     jmp short .nextChar ;Else get the next chars
   370                              <1> .endOfString:
   371 00004DD2 84E4                <1>     test ah, ah ;If ah is also the end of the path, then ZF=ZE else ZF=NZ
   372                              <1> .exit:
   373 00004DD4 5F                  <1>     pop rdi
   374 00004DD5 5E                  <1>     pop rsi
   375 00004DD6 58                  <1>     pop rax
   376                              <1>     return
    18                              <2> %%_ret:
    19 00004DD7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   377                              <1> checkPathspecOK:
   378                              <1> ;Input:
   379                              <1> ;rsi -> points to a path to verify if it is ok.
   380                              <1> ;Output:
   381                              <1> ;CF=NC => The path is totally clean and ok to use.
   382                              <1> ;CF=CY => the path is malformed and may be used ONLY if ZF=ZE. 
   383                              <1> ; If ZF=ZE then the only bad char in the path is followed by a ASCII null
   384                              <1> ;Here we check for OK chars only. Hence \ / ? * and . are considered acceptable
   385                              <1> 
   386                              <1> ;Full paths may start with \\<15-char machine name>\...
   387                              <1> ; or <Drive Letter>:\...
   388                              <1> ;CWD relative paths start with <Drive Letter>:...
   389                              <1> ;Current Drive Root Relative paths may start with \...
   390                              <1> ;Current Drive CWD relative paths start with any other char
   391                              <1> ;Server calls are checked separately. 
   392                              <1> ;Must be X:\ and cannot have . or .. entries or any "G L O B A L" chars
   393                              <1> 
   394                              <1> ;We accept lc and uc characters in this check function.
   395 00004DD8 50                  <1>     push rax
   396 00004DD9 51                  <1>     push rcx
   397 00004DDA 56                  <1>     push rsi
   398 00004DDB 57                  <1>     push rdi
   399                              <1>     ;First we verify that the first two chars are ok (either X: or \\ or chars)
   400 00004DDC 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   401 00004DDF F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   402 00004DE6 7539                <1>     jnz .serverCallCheck
   403 00004DE8 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   404 00004DEC 7417                <1>     je .okToScan
   405 00004DEE 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   406 00004DF2 7411                <1>     je .okToScan
   407 00004DF4 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   408 00004DF7 7402                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   409                              <1>     ;Is this a current drive CWD relative or current drive root relative path?
   410                              <1>     ;If so the pathspec is not different to normal, goto scanLoop
   411 00004DF9 EB11                <1>     jmp short .scanLoop
   412                              <1> .diskPath:
   413                              <1> ;Disk Letter must be A-Z (or a-z)
   414 00004DFB 0C20                <1>     or al, 20h  ;Force an UC char to LC
   415 00004DFD 3C61                <1>     cmp al, "a"
   416 00004DFF 7217                <1>     jb .badExit
   417 00004E01 3C7A                <1>     cmp al, "z"
   418 00004E03 7713                <1>     ja .badExit
   419                              <1> .okToScan:
   420 00004E05 4881C602000000      <1>     add rsi, 2  ;Skip first two chars now
   421                              <1> .scanLoop:
   422 00004E0C AC                  <1>     lodsb   ;Get char, inc rsi
   423 00004E0D 84C0                <1>     test al, al  ;Is al=0, i.e string terminator?
   424 00004E0F 740B                <1>     je .exit    ;Clear CF if al = 0
   425 00004E11 E851000000          <1>     call checkCharOk    ;Check if char ok
   426 00004E16 75F4                <1>     jnz .scanLoop    ;If it is not, fall thru
   427                              <1> .badExit:
   428                              <1> ;Before we bad exit, we check if the next char is ascii null.
   429                              <1> ;If it is we set ZF
   430 00004E18 AC                  <1>     lodsb
   431 00004E19 84C0                <1>     test al, al ;Set ZF if only last char is malformed, else clear ZF
   432                              <1> .servBadExit:   ;Server paths must be null terminated
   433 00004E1B F9                  <1>     stc ;And set CF to indicate bad path
   434                              <1> .exit:
   435 00004E1C 5F                  <1>     pop rdi
   436 00004E1D 5E                  <1>     pop rsi
   437 00004E1E 59                  <1>     pop rcx
   438 00004E1F 58                  <1>     pop rax
   439                              <1>     return
    18                              <2> %%_ret:
    19 00004E20 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   440                              <1> .serverCallCheck:
   441                              <1> ;Server calls are a bit stricter, . and .. are forbidden but dir and filenames
   442                              <1> ; may contain an extension separated by a .
   443 00004E21 80FC3A              <1>     cmp ah, ":"
   444 00004E24 75F5                <1>     jne .servBadExit
   445 00004E26 0C20                <1>     or al, 20h  ;Force an UC char to LC
   446 00004E28 3C61                <1>     cmp al, "a"
   447 00004E2A 72EF                <1>     jb .servBadExit
   448 00004E2C 3C7A                <1>     cmp al, "z"
   449 00004E2E 77EB                <1>     ja .servBadExit
   450                              <1>     ;If a dot is found, must check if the . is within 4 chars of a pathsep or 0
   451                              <1> .servScanLoop:
   452 00004E30 AC                  <1>     lodsb
   453 00004E31 84C0                <1>     test al, al
   454 00004E33 74E7                <1>     je .exit
   455 00004E35 3C2E                <1>     cmp al, "." ;Handle dots separately
   456 00004E37 7409                <1>     je .secondDotCheck
   457 00004E39 E829000000          <1>     call checkCharOk
   458 00004E3E 75F0                <1>     jnz .servScanLoop
   459 00004E40 EBEE                <1>     jmp short .servScanLoop
   460                              <1> .secondDotCheck:
   461 00004E42 AC                  <1>     lodsb
   462 00004E43 84C0                <1>     test al, al ;cannot be a dot followed by a null
   463 00004E45 74D4                <1>     jz .servBadExit
   464 00004E47 3C2E                <1>     cmp al, "." ;Was this a .. entry?
   465 00004E49 74D0                <1>     je .servBadExit
   466 00004E4B E8F3FEFFFF          <1>     call swapPathSeparator  ;Was second char a pathsep? Not allowed.
   467 00004E50 74C9                <1>     jz .servBadExit ;... else check if the char was valid
   468 00004E52 EBDC                <1>     jmp short .servScanLoop ;Else keep searching.
   469                              <1> scanPathWC:
   470                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   471                              <1> ; even in the final path componant.
   472                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   473                              <1> ;Output: CF=NC => No wildcards present
   474                              <1> ;        CF=CY => Wildcards found
   475 00004E54 50                  <1>     push rax
   476 00004E55 56                  <1>     push rsi
   477                              <1> .scan:
   478 00004E56 AC                  <1>     lodsb
   479 00004E57 84C0                <1>     test al, al
   480 00004E59 7409                <1>     jz .exit
   481 00004E5B 3C3F                <1>     cmp al, "?"
   482 00004E5D 7404                <1>     je .wcFnd
   483 00004E5F 3C2A                <1>     cmp al, "*"
   484 00004E61 75F3                <1>     jne .scan
   485                              <1> .wcFnd:
   486 00004E63 F9                  <1>     stc
   487                              <1> .exit:
   488 00004E64 5E                  <1>     pop rsi
   489 00004E65 58                  <1>     pop rax
   490                              <1>     return
    18                              <2> %%_ret:
    19 00004E66 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> 
   493                              <1> checkCharOk:
   494                              <1> ;Same as checkCharValid except DOES not return error on * ? \ / .
   495                              <1> ;If ZF=ZE => Invalid Char
   496                              <1> ;If ZF=NZ => Ok Char
   497 00004E67 3C2E                <1>     cmp al, "."
   498 00004E69 740F                <1>     je .exitOk
   499 00004E6B 3C2A                <1>     cmp al, "*"
   500 00004E6D 740B                <1>     je .exitOk
   501 00004E6F 3C3F                <1>     cmp al, "?"
   502 00004E71 7407                <1>     je .exitOk
   503 00004E73 E8CBFEFFFF          <1>     call swapPathSeparator  ;check if al is a path separator
   504 00004E78 7505                <1>     jnz checkCharValid
   505                              <1> .exitOk:
   506 00004E7A 50                  <1>     push rax
   507 00004E7B 0C01                <1>     or al, 1    ;Always clears the ZF
   508 00004E7D 58                  <1>     pop rax
   509                              <1>     return
    18                              <2> %%_ret:
    19 00004E7E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   510                              <1> checkCharValid:
   511                              <1> ;If ZF=ZE => Invalid Char
   512                              <1> ;If ZF=NZ => Valid Char
   513 00004E7F 51                  <1>     push rcx
   514 00004E80 57                  <1>     push rdi
   515 00004E81 B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   516 00004E86 488D3D13B3FFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   517 00004E8D F2AE                <1>     repne scasb ;Scan. Stop when equal
   518 00004E8F 5F                  <1>     pop rdi
   519 00004E90 59                  <1>     pop rcx
   520                              <1>     return
    18                              <2> %%_ret:
    19 00004E91 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   521                              <1> 
   522                              <1> compareFarPointers: ;Int 4Fh, AX = 1214h
   523                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   524                              <1> ;Input: rsi = One pointer
   525                              <1> ;       rdi = Second pointer
   526                              <1> ;Output: ZF=ZE if equal
   527                              <1> ;        ZF=NZ if not
   528 00004E92 4839FE              <1>     cmp rsi, rdi
   529                              <1>     return
    18                              <2> %%_ret:
    19 00004E95 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> checkPathNet:
   532                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   533                              <1> ;Output: ZF=ZE => Path is a net path
   534                              <1> ;        ZF=NZ => Path is not a net path
   535 00004E96 50                  <1>     push rax
   536 00004E97 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   537 00004E9A E8A4FEFFFF          <1>     call swapPathSeparator
   538 00004E9F 7505                <1>     jnz .exit
   539 00004EA1 E89DFEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   540                              <1> .exit:
   541 00004EA6 58                  <1>     pop rax
   542                              <1>     return
    18                              <2> %%_ret:
    19 00004EA7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   543                              <1> 
   544                              <1> getCharDevDriverPtr:
   545                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   546                              <1> ;Input: rax = Device Driver name (space padded)
   547                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   548 00004EA8 488D3D(73C00300)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   549                              <1> .lp:
   550 00004EAF 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   551                              <1>     rete    ;Exit if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004EB3 74F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   552 00004EB5 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   553 00004EB8 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   554 00004EBF 75EE                <1>     jne .lp ;If not loop
   555 00004EC1 F9                  <1>     stc ;Else bad exit
   556                              <1>     return
    18                              <2> %%_ret:
    19 00004EC2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    39                                  %include "./Source/Kernel/dosMain.asm"
    40                              <1> ;-----------------------------------:
    41                              <1> ;        Main Kernel dispatch       :
    42                              <1> ;            and routines           :
    43                              <1> ;-----------------------------------:
    44                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    45                              <1> ;ah = Function number, all other registers have various meanings
    46                              <1>  %if DEBUG
    47                              <1>     ;Entry function
    48                              <1>     debugEnterM
    49                              <1>     lea rbp, .l0000
    50                              <1>     call debPrintNullString
    51                              <1>     call debPrintFunctionName
    52                              <1>     jmp short .l0001
    53                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    54                              <1> .l0001:    
    55                              <1>     debugExitM
    56                              <1>     %endif
    57 00004EC3 FA                  <1>     cli ;Halt external interrupts
    58 00004EC4 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    59 00004EC5 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    60 00004EC8 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    61                              <1>     ;Cherry pick functions
    62 00004ECE 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    63 00004ED1 722C                <1>     jb .fsbegin   ;If below skip these checks
    64 00004ED3 0F8470020000        <1>     je ctrlBreakCheck
    65 00004ED9 80FC64              <1>     cmp ah, 64h
    66 00004EDC 0F84B0020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    67 00004EE2 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    68 00004EE4 80FC51              <1>     cmp ah, 51h
    69 00004EE7 0F8493020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    70 00004EED 80FC62              <1>     cmp ah, 62h
    71 00004EF0 0F8493020000        <1>     je getPSPaddr          ;Calls the above function
    72 00004EF6 80FC50              <1>     cmp ah, 50h
    73 00004EF9 0F8478020000        <1>     je setCurrProcessID
    74                              <1> .fsbegin:
    75 00004EFF E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    76 00004F04 48891D(E4C30300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    77 00004F0B 66C705(A5C30300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    77 00004F13 00                  <1>
    78 00004F14 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
    79 00004F1B 488905(CCC30300)    <1>     mov qword [oldoldRSP], rax
    80 00004F22 FE05(6AC30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    81 00004F28 488925(DCC30300)    <1>     mov qword [oldRSP], rsp
    82                              <1> ;Network related variable resetting
    83 00004F2F C605(5CC60300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    84                              <1> ;Here, we want to save oldRSP in the callers PSP
    85 00004F36 803D(6AC30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    86 00004F3D 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    87 00004F3F 488B05(81C30300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    88 00004F46 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    89                              <1> .fsb1:
    90 00004F4A 58                  <1>     pop rax     ;Get old rax back
    91 00004F4B 50                  <1>     push rax    ;and push it back onto the stack
    92                              <1> .abortEP:
    93                              <1> .charFun0CEP:
    94                              <1> .serverEP:
    95 00004F4C 488D25(11CC0300)    <1>     lea rsp, critStakTop
    96 00004F53 FB                  <1>     sti         ;Reenable interrupts
    97                              <1> 
    98 00004F54 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    99 00004F56 881D(F5C30300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
   100 00004F5C C605(F6C30300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   101 00004F63 881D(CBC30300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
   102 00004F69 881D(ECC30300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
   103                              <1> 
   104 00004F6F 50                  <1>     push rax        ;Save rax to use temporarily as table base 
   105 00004F70 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   106 00004F72 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   107 00004F74 488D0555B3FFFF      <1>     lea rax, kDispTbl
   108 00004F7B 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   109 00004F7E 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   110 00004F82 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   111 00004F85 58                  <1>     pop rax
   112                              <1> 
   113 00004F86 84E4                <1>     test ah, ah     ;Simple Terminate function?
   114 00004F88 741C                <1>     jz .fddiskOp
   115 00004F8A 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   116 00004F8D 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   117 00004F8F 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   118 00004F92 7712                <1>     ja .fddiskOp
   119                              <1> ;Char operations here
   120 00004F94 F605(69C30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   121 00004F9B 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   122 00004F9D 488D25(A0D20300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   123 00004FA4 EB40                <1>     jmp short .fdGoToFunction
   124                              <1> .fddiskOp:
   125                              <1>     ;Disk operations go here
   126                              <1>     ;Save rax on entry to a disk funciton
   127 00004FA6 488905(95C30300)    <1>     mov qword [oldRAX], rax
   128                              <1>     ;Clear up error info
   129 00004FAD C605(6CC30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   130 00004FB4 C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   131 00004FBB C605(6BC30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   132                              <1> 
   133 00004FC2 50                  <1>     push rax
   134 00004FC3 B482                <1>     mov ah, 82h ;Cancel all critical section!
   135 00004FC5 CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   136 00004FC7 58                  <1>     pop rax
   137                              <1> 
   138 00004FC8 C605(F6C30300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   139 00004FCF 488D25(E0D80300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   140 00004FD6 F605(94C30300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   141 00004FDD 7407                <1>     jz .fdGoToFunction
   142                              <1> ; HANDLE CTRL+BREAK HERE!
   143 00004FDF 50                  <1>     push rax
   144 00004FE0 E8ADD0FFFF          <1>     call checkBreak   ; Check for a ^C
   145 00004FE5 58                  <1>     pop rax
   146                              <1> .fdGoToFunction:
   147 00004FE6 48871D(E4C30300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   148                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   149                              <1>     ;
   150                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   151                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   152                              <1>     ;
   153                              <1>     %if DEBUG && REGS
   154                              <1>     ;Print stack if necessary function
   155                              <1>     debugEnterM
   156                              <1>     call debPrintDOSStack
   157                              <1>     debugExitM
   158                              <1>     %endif
   159 00004FED FF15(E4C30300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   160                              <1>     %if DEBUG
   161                              <1>     ;Entry function
   162                              <1>     debugEnterM
   163                              <1>     lea rbp, .l0002
   164                              <1>     call debPrintNullString
   165                              <1>     jmp short .l0003
   166                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   167                              <1> .l0003:    
   168                              <1>     debugExitM
   169                              <1>     %endif
   170                              <1>     %if DEBUG && REGS
   171                              <1>     ;Exit function
   172                              <1>     debugEnterM
   173                              <1>     call debPrintDOSStack
   174                              <1>     debugExitM
   175                              <1>     %endif
   176                              <1> .fdExit:
   177 00004FF3 FA                  <1>     cli     ;Redisable interrupts
   178 00004FF4 FE0D(6AC30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   179 00004FFA 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   180 00005001 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   181 00005004 488B05(CCC30300)    <1>     mov rax, qword [oldoldRSP]
   182 0000500B 488905(DCC30300)    <1>     mov qword [oldRSP], rax
   183 00005012 E806000000          <1>     call dosPopRegs  ;Pop the frame
   184 00005017 48CF                <1>     iretq
   185                              <1> .fdExitBad:
   186 00005019 30C0                <1>     xor al, al
   187                              <1> defaultIretq:
   188 0000501B 48CF                <1>     iretq
   189                              <1> dosPopRegs:
   190 0000501D 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   191 00005023 58                  <1>     pop rax
   192 00005024 5B                  <1>     pop rbx
   193 00005025 59                  <1>     pop rcx
   194 00005026 5A                  <1>     pop rdx
   195 00005027 5E                  <1>     pop rsi
   196 00005028 5F                  <1>     pop rdi
   197 00005029 5D                  <1>     pop rbp
   198 0000502A 4158                <1>     pop r8
   199 0000502C 4159                <1>     pop r9
   200 0000502E FF25(D4C30300)      <1>     jmp qword [dosReturn]
   201                              <1> dosPushRegs:
   202 00005034 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   203 0000503A 4151                <1>     push r9
   204 0000503C 4150                <1>     push r8
   205 0000503E 55                  <1>     push rbp
   206 0000503F 57                  <1>     push rdi
   207 00005040 56                  <1>     push rsi
   208 00005041 52                  <1>     push rdx
   209 00005042 51                  <1>     push rcx
   210 00005043 53                  <1>     push rbx
   211 00005044 50                  <1>     push rax
   212 00005045 FF25(D4C30300)      <1>     jmp qword [dosReturn]
   213                              <1> dosCrit1Enter:
   214                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    18                              <2> %%_ret:
    19 0000504B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   215 0000504C B801800000          <1>     mov eax, 8001h
   216 00005051 CD4A                <1>     int 4ah
   217 00005053 58                  <1>     pop rax
   218                              <1>     return
    18                              <2> %%_ret:
    19 00005054 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   219                              <1> dosCrit1Exit:
   220                              <1>     return
    18                              <2> %%_ret:
    19 00005055 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   221 00005056 B801810000          <1>     mov eax, 8101h
   222 0000505B CD4A                <1>     int 4ah
   223 0000505D 58                  <1>     pop rax
   224                              <1>     return
    18                              <2> %%_ret:
    19 0000505E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   225                              <1> dosCrit2Enter:
   226                              <1>     return
    18                              <2> %%_ret:
    19 0000505F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   227 00005060 B802800000          <1>     mov eax, 8002h
   228 00005065 CD4A                <1>     int 4ah
   229 00005067 58                  <1>     pop rax
   230                              <1>     return
    18                              <2> %%_ret:
    19 00005068 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   231                              <1> dosCrit2Exit:
   232                              <1>     return
    18                              <2> %%_ret:
    19 00005069 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   233 0000506A B802810000          <1>     mov eax, 8102h
   234 0000506F CD4A                <1>     int 4ah
   235 00005071 58                  <1>     pop rax
   236                              <1>     return
    18                              <2> %%_ret:
    19 00005072 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   237                              <1> 
   238                              <1> ;All good exits destroy AT LEAST ax 
   239                              <1> extGoodExit2:
   240                              <1> ;Good exit with an extended return code in eax
   241 00005073 E8B1FBFFFF          <1>     call getUserRegs
   242 00005078 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   243 0000507A EB08                <1>     jmp short extGoodExit.extGoodCommon
   244                              <1> extGoodExit:
   245                              <1> ;Good exit
   246                              <1> ;Return code in ax
   247 0000507C E8A8FBFFFF          <1>     call getUserRegs
   248 00005081 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   249                              <1> .extGoodCommon:
   250 00005084 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   251 00005088 F8                  <1>     clc
   252                              <1>     return
    18                              <2> %%_ret:
    19 00005089 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   253                              <1> extErrExit:
   254                              <1> ;The extended error exit from DOS
   255                              <1> ;Jumped to with AL=Extended error code
   256                              <1> ;Can be called too.
   257                              <1> ;Input: al = Extended error code
   258                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   259                              <1> ;   Returns with: eax = xLat Error
   260                              <1> ;                 rsi = callerFrame
   261 0000508A 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   262 0000508D E813000000          <1>     call xLatError
   263 00005092 E891000000          <1>     call checkFail
   264 00005097 E88DFBFFFF          <1>     call getUserRegs
   265 0000509C 668906              <1>     mov word [rsi + callerFrame.rax], ax
   266 0000509F 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   267 000050A3 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   268                              <1>     return
    18                              <2> %%_ret:
    19 000050A4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   269                              <1> xLatError:
   270                              <1> ;Translates the error code given in ax and sets error code in the var
   271                              <1> ; Input: ax = Extended Error Code
   272                              <1> ; Output: ax = Potentially translated Error Code
   273                              <1> ;         [errorExCde] = Original Error Code
   274                              <1> ;Preserves all registers except ax
   275                              <1> ;AH is always returned as 0
   276 000050A5 53                  <1>     push rbx
   277 000050A6 51                  <1>     push rcx
   278 000050A7 56                  <1>     push rsi
   279 000050A8 668905(6DC30300)    <1>     mov word [errorExCde], ax
   280 000050AF 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   281 000050B1 488D35D8AFFFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   282                              <1> .readEntry:
   283 000050B8 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   284 000050BA 3CFF                <1>     cmp al, -1
   285 000050BC 741F                <1>     je .skipXlat
   286 000050BE 3A05(96C30300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   287 000050C4 7408                <1>     je .found
   288                              <1>     ;Here, entry not found, goto next entry
   289 000050C6 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   290 000050C9 4801C6              <1>     add rsi, rax    ;Goto next entry
   291 000050CC EBEA                <1>     jmp short .readEntry
   292                              <1> .found:
   293                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   294 000050CE 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   295                              <1> .mainSearch:
   296 000050D1 AC                  <1>     lodsb   ;Get one byte into al
   297 000050D2 38C3                <1>     cmp bl, al  ;Check against the error code
   298 000050D4 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   299 000050D6 FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   300 000050D8 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   301                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   302 000050DA 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   303                              <1> .skipXlat:
   304 000050DD 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   305 000050DF 5E                  <1>     pop rsi
   306 000050E0 59                  <1>     pop rcx
   307 000050E1 5B                  <1>     pop rbx
   308                              <1>     return
    18                              <2> %%_ret:
    19 000050E2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   309                              <1> setErrorVars:
   310                              <1> ;Looks up the error code in the variable and sets the other error vars
   311                              <1> ;Called with the lookup table in rsi
   312                              <1> ;All regs preserved
   313 000050E3 50                  <1>     push rax
   314 000050E4 53                  <1>     push rbx
   315 000050E5 51                  <1>     push rcx
   316 000050E6 56                  <1>     push rsi
   317 000050E7 0FB71D(6DC30300)    <1>     movzx ebx, word [errorExCde]
   318 000050EE B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   319                              <1> .readEntry:
   320 000050F3 AD                  <1>     lodsd   ;Read the dword table entry into eax
   321 000050F4 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   322 000050F9 7428                <1>     je .exit    
   323 000050FB 38D8                <1>     cmp al, bl  ;Compare the error codes
   324 000050FD 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   325 000050FF D3E8                <1>     shr eax, cl
   326 00005101 3CFF                <1>     cmp al, -1
   327 00005103 7406                <1>     je .skipClass
   328 00005105 8805(70C30300)      <1>     mov byte [errorClass], al
   329                              <1> .skipClass:
   330 0000510B D3E8                <1>     shr eax, cl
   331 0000510D 3CFF                <1>     cmp al, -1
   332 0000510F 7406                <1>     je .skipAct
   333 00005111 8805(6FC30300)      <1>     mov byte [errorAction], al
   334                              <1> .skipAct:
   335 00005117 D3E8                <1>     shr eax, cl
   336 00005119 3CFF                <1>     cmp al, -1
   337 0000511B 7406                <1>     je .exit
   338 0000511D 8805(6CC30300)      <1>     mov byte [errorLocus], al
   339                              <1> .exit:
   340 00005123 5E                  <1>     pop rsi
   341 00005124 59                  <1>     pop rcx
   342 00005125 5B                  <1>     pop rbx
   343 00005126 58                  <1>     pop rax
   344                              <1>     return
    18                              <2> %%_ret:
    19 00005127 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   345                              <1> checkFail:
   346                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   347                              <1> ; and swaps the var error code if so
   348 00005128 803D(CBC30300)00    <1>     cmp byte [Int44Fail], 0
   349 0000512F 7509                <1>     jnz .skipFail
   350 00005131 66C705(6DC30300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   350 00005139 00                  <1>
   351                              <1> .skipFail:
   352 0000513A 56                  <1>     push rsi
   353 0000513B 488D35EAAFFFFF      <1>     lea rsi, extErrTbl
   354 00005142 E89CFFFFFF          <1>     call setErrorVars
   355 00005147 5E                  <1>     pop rsi
   356                              <1>     return
    18                              <2> %%_ret:
    19 00005148 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   357                              <1> ;========================================:
   358                              <1> ;      Reentrant Kernel Functions        :
   359                              <1> ;========================================:
   360                              <1> ctrlBreakCheck:    ;ah = 33h
   361 00005149 84C0                <1>     test al, al
   362 0000514B 7508                <1>     jnz .cbcget  ;Get the state or other functions
   363 0000514D 8A15(94C30300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   364 00005153 48CF                <1>     iretq
   365                              <1> .cbcget:
   366 00005155 3C02                <1>     cmp al, 02h
   367 00005157 771A                <1>     ja .cbcBad
   368 00005159 740D                <1>     jz .cbcxchg ;Function 2
   369 0000515B 52                  <1>     push rdx
   370 0000515C 80E201              <1>     and dl, 1   ;Get only the bottom bit
   371 0000515F 8815(94C30300)      <1>     mov byte [breakFlag], dl    ;Set the state
   372 00005165 5A                  <1>     pop rdx
   373 00005166 48CF                <1>     iretq
   374                              <1> .cbcxchg:
   375 00005168 80E201              <1>     and dl, 1
   376 0000516B 8615(94C30300)      <1>     xchg byte [breakFlag], dl
   377 00005171 48CF                <1>     iretq
   378                              <1> .cbcBad:
   379 00005173 B0FF                <1>     mov al, -1
   380 00005175 48CF                <1>     iretq
   381                              <1> 
   382                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   383 00005177 48891D(81C30300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   384 0000517E 48CF                <1>     iretq
   385                              <1> 
   386                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   387 00005180 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   388 00005187 48CF                <1>     iretq
   389                              <1> 
   390                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   391 00005189 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   392 00005190 48CF                <1>     iretq
   393                              <1> 
   394                              <1> setDriverLookahead:;ah = 64h, reserved
   395 00005192 48CF                <1>     iretq
   396                              <1> 
   397                              <1> ;========================================:
   398                              <1> ;            Kernel Functions            :
   399                              <1> ;========================================:
   400                              <1> diskReset:         ;ah = 0Dh
   401                              <1> ;Flush all dirty buffers to disk
   402 00005194 E8B2FEFFFF          <1>     call dosCrit1Enter
   403 00005199 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   404                              <1> .drCheckBuffer:
   405 000051A0 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   406 000051A4 7407                <1>     jz .drGotoNextBuffer
   407                              <1> .drFlushBuffer:
   408 000051A6 E8D4B6FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   409 000051AB 720C                <1>     jc .drExit
   410                              <1> .drGotoNextBuffer:
   411 000051AD 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   412 000051B0 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   413 000051B7 75E7                <1>     jne .drCheckBuffer
   414                              <1> .drExit:
   415 000051B9 E897FEFFFF          <1>     call dosCrit1Exit
   416 000051BE B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   417 000051C3 CD4F                <1>     int 4fh
   418                              <1>     return
    18                              <2> %%_ret:
    19 000051C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   419                              <1> 
   420                              <1> selectDisk:        ;ah = 0Eh
   421                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   422 000051C6 88D0                <1>     mov al, dl
   423 000051C8 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   424 000051CA E87EFAFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   425 000051CF 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   426 000051D1 8805(93C30300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   427                              <1> .skipSettingCurrent:
   428 000051D7 0FB605(70C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   429                              <1>     return
    18                              <2> %%_ret:
    19 000051DE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   430                              <1> 
   431                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   432 000051DF 8A05(93C30300)      <1>     mov al, byte [currentDrv]
   433                              <1>     return
    18                              <2> %%_ret:
    19 000051E5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   434                              <1> 
   435                              <1> FATinfoDefault:    ;ah = 1Bh
   436 000051E6 30D2                <1>     xor dl, dl
   437                              <1> FATinfoDevice:     ;ah = 1Ch
   438                              <1> ;Input: dl = 1 based drive number
   439                              <1> ;Output:
   440                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   441                              <1> ;cx = bytes per sector
   442                              <1> ;edx = total number of clusters
   443                              <1> ;rbx = Ptr to media ID byte
   444 000051E8 88D0                <1>     mov al, dl  ;Move drive number into al
   445 000051EA E8C7FAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   446 000051EF 7307                <1>     jnc .fidCDSFound
   447 000051F1 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   448 000051F6 EB2E                <1>     jmp short .error 
   449                              <1> .fidCDSFound:
   450 000051F8 E8DAF9FFFF          <1>     call getDiskData
   451 000051FD 7227                <1>     jc .error
   452                              <1> ;Now we have that:
   453                              <1> ;al = sectors per cluster
   454                              <1> ;ah = media ID byte
   455                              <1> ;ebx = total clusters
   456                              <1> ;cx = bytes per sector
   457                              <1> ;edx = number of available clusters
   458 000051FF E825FAFFFF          <1>     call getUserRegs
   459 00005204 8825(E8C60300)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   460 0000520A 30E4                <1>     xor ah, ah
   461 0000520C 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   462 0000520F 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   463 00005213 488D1D(E8C60300)    <1>     lea rbx, mediaByte
   464 0000521A 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   465 0000521E 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   466                              <1> .badExit:
   467 00005222 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   468                              <1>     return
    18                              <2> %%_ret:
    19 00005225 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   469                              <1> .error:
   470 00005226 E85FFEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   471 0000522B 66B8FFFF            <1>     mov ax, -1
   472 0000522F EBF1                <1>     jmp short .badExit
   473                              <1> 
   474                              <1> setIntVector:      ;ah = 25h
   475                              <1> ;Called with:
   476                              <1> ;   rdx = Pointer to interrupt handler
   477                              <1> ;   al = Interrupt number
   478 00005231 50                  <1>     push rax    ;Preserve all registers in call
   479 00005232 53                  <1>     push rbx
   480 00005233 51                  <1>     push rcx
   481 00005234 52                  <1>     push rdx
   482 00005235 56                  <1>     push rsi
   483 00005236 55                  <1>     push rbp
   484 00005237 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   485 00005239 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   486                              <1> ;First call to get default BIOS segement selector and attribute word
   487 0000523F 88C3                <1>     mov bl, al  ;Set interrupt number 
   488 00005241 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   489 00005246 CD35                <1>     int 35h
   490 00005248 E8DCF9FFFF          <1>     call getUserRegs
   491 0000524D 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   492 00005251 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   493 00005253 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   494                              <1> ;dx preserves the attribute word
   495 00005255 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   496 0000525A CD35                <1>     int 35h
   497 0000525C 5D                  <1>     pop rbp
   498 0000525D 5E                  <1>     pop rsi
   499 0000525E 5A                  <1>     pop rdx
   500 0000525F 59                  <1>     pop rcx
   501 00005260 5B                  <1>     pop rbx
   502 00005261 58                  <1>     pop rax
   503                              <1>     return
    18                              <2> %%_ret:
    19 00005262 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   504                              <1> 
   505                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   506 00005263 8805(32C30300)      <1>     mov byte [verifyFlag], al
   507 00005269 8025(32C30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   508                              <1>     return
    18                              <2> %%_ret:
    19 00005270 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   509                              <1> getDOSversion:     ;ah = 30h
   510 00005271 E8B3F9FFFF          <1>     call getUserRegs
   511 00005276 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   512 00005278 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   513 0000527B 668B057EADFFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   514 00005282 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   515                              <1>     return
    18                              <2> %%_ret:
    19 00005285 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   516                              <1> 
   517                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   518                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   519 00005286 30D2                <1>     xor dl, dl
   520                              <1> getDeviceDPBptr:   ;ah = 32h
   521                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   522                              <1> ;On exit: rbx = DPB pointer
   523 00005288 88D0                <1>     mov al, dl
   524 0000528A E827FAFFFF          <1>     call getCDS
   525 0000528F 722C                <1>     jc .bad
   526 00005291 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   527 00005298 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   528 0000529E 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   529                              <1>     ;Here ONLY if accessing critical Disk data structures
   530 000052A0 E8A6FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   531 000052A5 E8D0F6FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   532 000052AA E8A6FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   533 000052AF 720C                <1>     jc .bad
   534 000052B1 E873F9FFFF          <1>     call getUserRegs
   535 000052B6 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   536 000052BA 30C0                <1>     xor al, al
   537                              <1>     return
    18                              <2> %%_ret:
    19 000052BC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   538                              <1> .bad:
   539 000052BD B0FF                <1>     mov al, -1
   540                              <1>     return
    18                              <2> %%_ret:
    19 000052BF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   541                              <1> 
   542                              <1> getInDOSflagPtr:   ;ah = 34h
   543 000052C0 488D15(6AC30300)    <1>     lea rdx, inDOS
   544 000052C7 E85DF9FFFF          <1>     call getUserRegs
   545 000052CC 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   546                              <1>     return
    18                              <2> %%_ret:
    19 000052D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   547                              <1> 
   548                              <1> getIntVector:      ;ah = 35h
   549                              <1> ;Called with:
   550                              <1> ;   al = Interrupt Number
   551                              <1> ;Returns:
   552                              <1> ;   rbx = Pointer to interrupt handler
   553 000052D1 E845F9FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   554 000052D6 E84EF9FFFF          <1>     call getUserRegs
   555 000052DB 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   556 000052DF 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   557                              <1>     return
    18                              <2> %%_ret:
    19 000052E1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   558                              <1> 
   559                              <1> getDiskFreeSpace:  ;ah = 36h
   560                              <1> ;Input: Drive number in dl (0 = Current)
   561                              <1> ;Output:    ax = sectors per cluster
   562                              <1> ;           ebx = number of free clusters
   563                              <1> ;           cx = bytes per sector
   564                              <1> ;           edx = total clusters on drive
   565 000052E2 88D0                <1>     mov al, dl
   566 000052E4 E8CDF9FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   567 000052E9 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   568                              <1> ;Else, we at an error.
   569                              <1> ;Simply return with CY set and error code in al with extended error info
   570 000052EB B80F000000          <1>     mov eax, errBadDrv
   571 000052F0 E895FDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   572                              <1>     ;extErrExit sets rsi to caller regs
   573 000052F5 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   574                              <1>     return
    18                              <2> %%_ret:
    19 000052FA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   575                              <1> .gdfsCDSFound:
   576 000052FB E8D7F8FFFF          <1>     call getDiskData
   577 00005300 7219                <1>     jc .error
   578                              <1> ;Now we have that:
   579                              <1> ;al = sectors per cluster
   580                              <1> ;ah = media ID byte
   581                              <1> ;ebx = total clusters
   582                              <1> ;cx = bytes per sector
   583                              <1> ;edx = number of available clusters
   584 00005302 E822F9FFFF          <1>     call getUserRegs
   585 00005307 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   586 00005309 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   587 0000530C 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   588 00005310 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   589 00005313 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   590                              <1> .badExit:
   591 00005317 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   592                              <1>     return
    18                              <2> %%_ret:
    19 0000531A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   593                              <1> .error:
   594 0000531B E86AFDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   595 00005320 66B8FFFF            <1>     mov ax, -1
   596 00005324 EBF1                <1>     jmp short .badExit
   597                              <1> 
   598                              <1> 
   599                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   600 00005326 31C0                <1>     xor eax, eax
   601 00005328 668705(91C30300)    <1>     xchg ax, word [errorLevel]
   602 0000532F E948FDFFFF          <1>     jmp extGoodExit
   603                              <1> 
   604                              <1> getSysVarsPtr:     ;ah = 52h
   605 00005334 488D15(33C00300)    <1>     lea rdx, sysVarsPtr
   606 0000533B E8E9F8FFFF          <1>     call getUserRegs
   607 00005340 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   608                              <1>     return
    18                              <2> %%_ret:
    19 00005344 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   609                              <1> 
   610                              <1> 
   611                              <1> ;AH = 53h - CREATE DPB
   612                              <1> createDPB:         ;generates a DPB from a given BPB
   613                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   614                              <1> ;This is done so that the other fields of the DPB can be recycled
   615                              <1> ;Input: rsi = ptr to the BPB
   616                              <1> ;       rbp = ptr to the DPB
   617                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   618                              <1> ;bMediaDescriptor
   619 00005345 8A4615              <1>     mov al, byte [rsi + bpb.media]
   620 00005348 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   621                              <1> ;dFirstFreeCluster
   622 0000534B C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   623                              <1> ;dNumberOfFreeClusters
   624 00005352 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   625                              <1> ;wBytesPerSector
   626 00005359 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   627 0000535D 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   628                              <1> ;bMaxSectorInCluster
   629 00005361 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   630 00005364 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   631 00005366 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   632                              <1> ;bSectorsPerClusterShift
   633 00005369 FEC0                <1>     inc al
   634 0000536B 30C9                <1>     xor cl, cl
   635                              <1> .cd2:
   636 0000536D D0E8                <1>     shr al, 1
   637 0000536F 7404                <1>     jz .cd3
   638 00005371 FEC1                <1>     inc cl
   639 00005373 EBF8                <1>     jmp short .cd2
   640                              <1> .cd3:
   641 00005375 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   642                              <1> ;wFAToffset, number of reserved sectors in partition
   643 00005378 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   644 0000537C 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   645                              <1> ;bNumberOfFATs
   646 00005380 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   647 00005383 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   648                              <1> ;wNumberRootDirEntries
   649                              <1> ;Gets the number of 32 byte entries in the root directory
   650                              <1> ;Only valid for FAT 12/16
   651 00005386 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   652 0000538A 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   653                              <1> ;dFATlength, get the FAT length
   654 0000538E 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   655 00005392 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   656 00005395 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   657 00005397 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   658 0000539A 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   659                              <1> ;Complex cases below...
   660                              <1> ;dClusterHeapOffset, start sector of the data area
   661 0000539D 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   662 000053A1 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   663 000053A4 85C0                <1>     test eax, eax
   664 000053A6 0F44C3              <1>     cmovz eax, ebx
   665                              <1> ;eax = FATsz
   666 000053A9 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   667 000053AD 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   668 000053B0 85DB                <1>     test ebx, ebx
   669 000053B2 0F44D9              <1>     cmovz ebx, ecx 
   670                              <1> ;ebx = TotSec
   671 000053B5 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   672 000053B8 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   673                              <1> .cd4:
   674 000053BA 01C2                <1>     add edx, eax
   675 000053BC FEC9                <1>     dec cl
   676 000053BE 75FA                <1>     jnz .cd4
   677 000053C0 89D0                <1>     mov eax, edx    ;Store product in eax
   678 000053C2 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   679 000053C6 01D0                <1>     add eax, edx
   680                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   681 000053C8 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   682 000053CC C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   683 000053CF 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   684 000053D3 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   685 000053D4 89D0                <1>     mov eax, edx
   686 000053D6 31D2                <1>     xor edx, edx
   687 000053D8 F7F1                <1>     div ecx
   688 000053DA 89C2                <1>     mov edx, eax
   689 000053DC 58                  <1>     pop rax
   690 000053DD 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   691                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   692                              <1>     ;aka eax = Start sector of the data area in volume
   693 000053DF 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   694                              <1> ;dClusterCount
   695 000053E2 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   696 000053E4 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   697 000053E6 31D2                <1>     xor edx, edx
   698 000053E8 BB01000000          <1>     mov ebx, 1
   699 000053ED 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   700 000053F0 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   701 000053F2 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   702 000053F4 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   703 000053F6 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   704                              <1> ;dFirstUnitOfRootDir
   705 000053F9 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   706 000053FE 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   707 00005401 770F                <1>     ja .cd5
   708                              <1>     ;Else, we need to find the first sector of the root directory
   709                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   710 00005403 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   711 00005407 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   712                              <1> .cd51:
   713 0000540B 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   714 0000540E FFC9                <1>     dec ecx
   715 00005410 75F9                <1>     jnz .cd51
   716                              <1> .cd5:
   717 00005412 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   718                              <1> ;Exit epilogue
   719 00005415 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   720 0000541C 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   721                              <1>     %if DEBUG && DPBINFO
   722                              <1>     ;Print DPB 
   723                              <1>     debugEnterM
   724                              <1>     push rbp
   725                              <1>     lea rbp, .l0000
   726                              <1>     call debPrintNullString
   727                              <1>     pop rbp
   728                              <1>     call debDPBBPBptr
   729                              <1>     call debMakeDebuggerRespond
   730                              <1>     jmp short .l0001
   731                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   732                              <1> .l0001:
   733                              <1>     debugExitM
   734                              <1>     %endif
   735                              <1>     return
    18                              <2> %%_ret:
    19 0000541E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   736                              <1> 
   737                              <1> getVerifySetting:  ;ah = 54h
   738 0000541F 8A05(32C30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   739                              <1>     return
    18                              <2> %%_ret:
    19 00005425 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   740                              <1> 
   741                              <1> getExtendedError:  ;ah = 59h
   742 00005426 E8FEF7FFFF          <1>     call getUserRegs
   743 0000542B 668B05(6DC30300)    <1>     mov ax, word [errorExCde]
   744 00005432 8A2D(6CC30300)      <1>     mov ch, byte [errorLocus]
   745 00005438 8A3D(70C30300)      <1>     mov bh, byte [errorClass]
   746 0000543E 8A1D(6FC30300)      <1>     mov bl, byte [errorAction]
   747 00005444 668906              <1>     mov word [rsi + callerFrame.rax], ax
   748 00005447 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   749 0000544B 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   750                              <1>     return
    18                              <2> %%_ret:
    19 0000544E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   751                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   752                              <1> noOp:
   753                              <1>     return
    18                              <2> %%_ret:
    19 0000544F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    40                                  %include "./Source/Kernel/Net/server.asm"
    41                              <1> ;Network functions here
    42                              <1> 
    43                              <1> dosServer:  ;ah = 5Dh
    44                              <1> ;Dispatches the server function in al. Many of these are share hooks.
    45                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
    46                              <1> ;   rdx = Pointer to DPL
    47 00005450 3C07                <1>     cmp al, 07h
    48 00005452 7204                <1>     jb .skip
    49 00005454 3C09                <1>     cmp al, 09h
    50 00005456 7619                <1>     jbe .skip2
    51                              <1> .skip:
    52 00005458 4889D6              <1>     mov rsi, rdx
    53 0000545B 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    54 0000545F 66891D(A5C30300)    <1>     mov word [machineNum], bx
    55 00005466 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    56 0000546A 48891D(9DC30300)    <1>     mov qword [serverPSP], rbx
    57                              <1>     
    58                              <1> .skip2:
    59                              <1> serverDispatch: ;AX=5D00h
    60                              <1> ;Input: rsi points to the DOS parameter list
    61 00005471 58                  <1>     pop rax
    62 00005472 56                  <1>     push rsi    ;Put dpl ptr in rdi
    63 00005473 5F                  <1>     pop rdi
    64 00005474 E8B0F7FFFF          <1>     call getUserRegs
    65 00005479 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    66 0000547C 56                  <1>     push rsi
    67 0000547D B906000000          <1>     mov ecx, 6
    68 00005482 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    69 00005485 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    70 0000548C 48A5                <1>     movsq   ;Transfer r8...
    71 0000548E 48A5                <1>     movsq   ;... and r9
    72 00005490 5E                  <1>     pop rsi
    73 00005491 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    74 00005494 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    75 00005498 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    76 0000549C 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    77 000054A0 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    78 000054A4 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    79 000054A8 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    80 000054AC 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    81 000054B0 48891D(E4C30300)    <1>     mov qword [oldRBX], rbx
    82 000054B7 C605(5CC60300)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    83 000054BE E989FAFFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    84                              <1> 
    85                              <1> 
    86                              <1> netServices:   ;ah = 5Eh, do nothing
    87                              <1> netRedir:;ah = 5Fh, do nothing
    88                              <1>     return
    18                              <2> %%_ret:
    19 000054C3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    41                                  %include "./Source/Kernel/Net/multiplx.asm"
    42                              <1> ;Default multiplexer. Current only installed function is ah=12h
    43                              <1> 
    44                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    45 000054C4 80FC12              <1>     cmp ah, 12h
    46 000054C7 751C                <1>     jne .exit       ;Exit if not for us
    47 000054C9 3C05                <1>     cmp al, mDispTblL / 2
    48 000054CB 7318                <1>     jae .exit   ;If above or equal, exit
    49 000054CD 53                  <1>     push rbx
    50 000054CE 51                  <1>     push rcx
    51 000054CF 31C9                <1>     xor ecx, ecx
    52 000054D1 488D1DCCAEFFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    53 000054D8 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    54 000054DA D1E1                <1>     shl ecx, 1   ;multiply by 2
    55 000054DC 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    56 000054DF FFD3                <1>     call rbx
    57 000054E1 59                  <1>     pop rcx
    58 000054E2 5B                  <1>     pop rbx
    59 000054E3 48CF                <1>     iretq
    60                              <1> .exit:
    61 000054E5 804C241001          <1>     or byte [rsp + 8h*2], 1
    62 000054EA 48CF                <1>     iretq
    63                              <1> multiplexTest:
    64 000054EC B0FF                <1>     mov al, -1
    65 000054EE C3                  <1>     ret
    66                              <1> getDosDataSeg:  ;Int 4Fh, AX=1203h
    67                              <1> ;Return: r8 = Dos Data Segment Pointer
    68 000054EF 4C8D05(00C00300)    <1>     lea r8, dosDataArea
    69                              <1>     return
    18                              <2> %%_ret:
    19 000054F6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    42                                  %include "./Source/Misc/int44h.asm"
    43                              <1> critErrorHandler:   ;Int 44h
    44                              <1> ;User Stack in usage here, must be swapped to before this is called
    45                              <1> ;Entered with:  
    46                              <1> ;               AH = Critical Error Bitfield
    47                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    48                              <1> ;               Bit 6 - Reserved
    49                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    50                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    51                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    52                              <1> ;               Bits [2-1] = Affected Disk Error
    53                              <1> ;                     0 0   DOS area
    54                              <1> ;                     0 1   FAT area
    55                              <1> ;                     1 0   Directory area
    56                              <1> ;                     1 1   Data area
    57                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    58                              <1> ;               AL  = Failing drive number if AH[7] = 0
    59                              <1> ;               DIL = Error code for errorMsg
    60                              <1> ;               RSI = EA of Device Header for which device the error occured
    61                              <1> ;Return:
    62                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    63                              <1> ;                  = 1 - Retry the Operation    (Retry)
    64                              <1> ;                  = 2 - Terminate the Program  (Abort)
    65                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    66 000054F7 53                  <1>     push rbx
    67 000054F8 51                  <1>     push rcx
    68 000054F9 52                  <1>     push rdx
    69 000054FA 57                  <1>     push rdi
    70 000054FB 56                  <1>     push rsi
    71 000054FC FC                  <1>     cld         ;Make String ops go forward
    72                              <1> 
    73 000054FD 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    74 00005500 488D155E020000      <1>     lea rdx, qword [.crlf]
    75 00005507 B409                <1>     mov ah, 09h ;Print String
    76 00005509 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    77                              <1> 
    78 0000550B 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    79 00005511 B90C000000          <1>     mov ecx, 0Ch
    80 00005516 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    81 00005518 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    82 0000551B 480FB7FF            <1>     movzx rdi, di
    83 0000551F 4889FA              <1>     mov rdx, rdi    ;Copy error code
    84 00005522 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    85 00005526 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    86 00005529 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    87 0000552C 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    88 00005533 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    89 00005537 B409                <1>     mov ah, 09h ;Print String
    90 00005539 CD41                <1>     int 41h     ;Call DOS to print first part of message
    91                              <1> 
    92 0000553B 488D1505020000      <1>     lea rdx, qword [.readmsg]
    93 00005542 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    94 00005549 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    95 0000554C 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    96 00005550 B409                <1>     mov ah, 09h ;Print String
    97 00005552 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    98                              <1> 
    99 00005554 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   100 00005557 0F85DF000000        <1>     jnz .charError
   101                              <1> ;Disk error continues here
   102 0000555D 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
   103 00005564 B409                <1>     mov ah, 09h
   104 00005566 CD41                <1>     int 41h
   105 00005568 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   106 0000556A 80C241              <1>     add dl, "A" ;Add ASCII code
   107 0000556D B402                <1>     mov ah, 02h ;Print char in dl
   108 0000556F CD41                <1>     int 41h
   109                              <1> .userInput:
   110 00005571 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   111 00005578 B409                <1>     mov ah, 09h
   112 0000557A CD41                <1>     int 41h
   113                              <1> ;Abort, Retry, Ignore, Fail is word order
   114                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   115                              <1> .userAbort:
   116                              <1> ;Abort is always an option
   117 0000557C 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   118 00005583 B409                <1>     mov ah, 09h
   119 00005585 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   120                              <1> .userRetry:
   121 00005587 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   122 0000558A 7416                <1>     jz .userIgnore    ;If clear, dont print message
   123 0000558C 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   124 00005593 B409                <1>     mov ah, 09h
   125 00005595 CD41                <1>     int 41h
   126 00005597 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   127 0000559E B409                <1>     mov ah, 09h
   128 000055A0 CD41                <1>     int 41h
   129                              <1> .userIgnore:
   130 000055A2 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   131 000055A5 7416                <1>     jz .userFail
   132 000055A7 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   133 000055AE B409                <1>     mov ah, 09h
   134 000055B0 CD41                <1>     int 41h
   135 000055B2 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   136 000055B9 B409                <1>     mov ah, 09h
   137 000055BB CD41                <1>     int 41h
   138                              <1> .userFail:
   139 000055BD F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   140 000055C0 7416                <1>     jz .userMsgEnd
   141 000055C2 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   142 000055C9 B409                <1>     mov ah, 09h
   143 000055CB CD41                <1>     int 41h
   144 000055CD 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   145 000055D4 B409                <1>     mov ah, 09h
   146 000055D6 CD41                <1>     int 41h
   147                              <1> .userMsgEnd:
   148 000055D8 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   149 000055DF B409                <1>     mov ah, 09h
   150 000055E1 CD41                <1>     int 41h
   151                              <1> ;Get user input now 
   152 000055E3 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   153 000055E5 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   154 000055EC B401                <1>     mov ah, 01h ;STDIN without Console Echo
   155 000055EE CD41                <1>     int 41h ;Get char in al
   156 000055F0 3C61                <1>     cmp al, "a" ;Chack if lowercase
   157 000055F2 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   158 000055F4 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   159                              <1> .uip1:
   160 000055F6 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   161 000055F7 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   162 000055F9 FFC1                <1>     inc ecx
   163 000055FB 81F904000000        <1>     cmp ecx, 4
   164 00005601 75F3                <1>     jne .uip1
   165 00005603 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   166                              <1> .validInput:
   167 00005608 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   168                              <1> ;Now check if the input is permitted
   169 0000560A 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   170 0000560C 7427                <1>     je .cehExit
   171 0000560E 84C0                <1>     test al, al ;Check if 0 => Ignore
   172 00005610 740F                <1>     je .viIgnore
   173 00005612 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   174 00005614 7416                <1>     je .viRetry
   175                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   176 00005616 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   177 00005619 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   178 0000561F EB14                <1>     jmp short .cehExit
   179                              <1> .viIgnore:
   180 00005621 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   181 00005624 0F8447FFFFFF        <1>     jz .userInput
   182 0000562A EB09                <1>     jmp short .cehExit
   183                              <1> .viRetry:
   184 0000562C F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   185 0000562F 0F843CFFFFFF        <1>     jz .userInput
   186                              <1> .cehExit:
   187 00005635 5E                  <1>     pop rsi
   188 00005636 5F                  <1>     pop rdi
   189 00005637 5A                  <1>     pop rdx
   190 00005638 59                  <1>     pop rcx
   191 00005639 5B                  <1>     pop rbx
   192 0000563A 48CF                <1>     iretq
   193                              <1> .charError:
   194 0000563C B908000000          <1>     mov ecx, 8  ;8 chars in device name
   195 00005641 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   196                              <1> .ce1:
   197 00005648 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   198 00005649 88C2                <1>     mov dl, al  ;Move char into dl
   199 0000564B B402                <1>     mov ah, 02h
   200 0000564D CD41                <1>     int 41h ;Print char
   201 0000564F E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   202 00005651 E91BFFFFFF          <1>     jmp .userInput
   203                              <1> 
   204                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   205 00005656 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   205 0000565F 746563742024202020  <1>
   206 00005668 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   206 00005671 6E6974202420202020  <1>
   207 0000567A 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   207 00005683 202420202020202020  <1>
   208 0000568C 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   208 00005695 6F6D6D616E64202420  <1>
   209 0000569E 446174612024202020- <1>             db "Data $            "       ;Error 4
   209 000056A7 202020202020202020  <1>
   210 000056B0 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   210 000056B9 737420242020202020  <1>
   211 000056C2 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   211 000056CB 202020202020202020  <1>
   212 000056D4 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   212 000056DD 656469612024202020  <1>
   213 000056E6 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   213 000056EF 7420466F756E642024  <1>
   214 000056F8 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   214 00005701 706572202420202020  <1>
   215 0000570A 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   215 00005713 6C7420242020202020  <1>
   216 0000571C 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   216 00005725 742024202020202020  <1>
   217 0000572E 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   217 00005737 61696C757265202420  <1>
   218                              <1> 
   219 00005740 64726976652024      <1> .drive      db "drive $"
   220 00005747 6572726F7220726561- <1> .readmsg    db "error reading $"
   220 00005750 64696E672024        <1>
   221 00005756 6572726F7220777269- <1> .writemsg   db "error writing $"
   221 0000575F 74696E672024        <1>
   222 00005765 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   223 00005768 41626F727424        <1> .abortmsg   db "Abort$" 
   224 0000576E 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   225 00005775 526574727924        <1> .retrymsg   db "Retry$"
   226 0000577B 4661696C24          <1> .failmsg    db "Fail$"
   227 00005780 2C2024              <1> .betweenMsg db ", $"
   228 00005783 3F2024              <1> .endMsg     db "? $"
   229 00005786 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    43                                  %include "./Source/Drivers/drvData.asm"
    44                              <1> ;-----------------------------------:
    45                              <1> ;          Driver routines          :
    46                              <1> ;-----------------------------------:
    47                              <1> drivers:
    48                              <1> conHdr:
    49 0000578A [AC57000000000000]  <1>     dq auxHdr
    50 00005792 1380                <1>     dw 08013h
    51 00005794 [2A59000000000000]  <1>     dq commonStrat
    52 0000579C [3959000000000000]  <1>     dq conDriver
    53 000057A4 434F4E2020202020    <1>     db "CON     "
    54                              <1> auxHdr:
    55 000057AC [CE57000000000000]  <1>     dq prnHdr
    56 000057B4 0080                <1>     dw 08000h
    57 000057B6 [2A59000000000000]  <1>     dq commonStrat
    58 000057BE [EE5B000000000000]  <1>     dq com1Intr
    59 000057C6 4155582020202020    <1>     db "AUX     "
    60                              <1> prnHdr:
    61 000057CE [F057000000000000]  <1>     dq clkHdr
    62 000057D6 40A0                <1>     dw 0A040h
    63 000057D8 [3259000000000000]  <1>     dq nulStrat
    64 000057E0 [3859000000000000]  <1>     dq nulIntr
    65 000057E8 50524E2020202020    <1>     db "PRN     "
    66                              <1> clkHdr:
    67 000057F0 [1258000000000000]  <1>     dq msdHdr
    68 000057F8 0880                <1>     dw 08008h
    69 000057FA [2A59000000000000]  <1>     dq commonStrat
    70 00005802 [865A000000000000]  <1>     dq clkDriver
    71 0000580A 434C4F434B242020    <1>     db "CLOCK$  "
    72                              <1> msdHdr:
    73 00005812 [3458000000000000]  <1>     dq com1Hdr
    74 0000581A 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    75 0000581C [2A59000000000000]  <1>     dq commonStrat
    76 00005824 [935D000000000000]  <1>     dq msdDriver
    77 0000582C 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    78                              <1> com1Hdr:
    79 00005834 [5658000000000000]  <1>     dq com2Hdr
    80 0000583C 0080                <1>     dw 08000h
    81 0000583E [2A59000000000000]  <1>     dq commonStrat
    82 00005846 [EE5B000000000000]  <1>     dq com1Intr
    83 0000584E 434F4D3120202020    <1>     db "COM1    "
    84                              <1> com2Hdr:
    85 00005856 [7858000000000000]  <1>     dq com3Hdr
    86 0000585E 0080                <1>     dw 08000h
    87 00005860 [2A59000000000000]  <1>     dq commonStrat
    88 00005868 [F75B000000000000]  <1>     dq com2Intr
    89 00005870 434F4D3220202020    <1>     db "COM2    "
    90                              <1> com3Hdr:
    91 00005878 [9A58000000000000]  <1>     dq com4Hdr
    92 00005880 0080                <1>     dw 08000h
    93 00005882 [2A59000000000000]  <1>     dq commonStrat
    94 0000588A [005C000000000000]  <1>     dq com3Intr
    95 00005892 434F4D3320202020    <1>     db "COM3    "
    96                              <1> com4Hdr:
    97 0000589A [BC58000000000000]  <1>     dq lpt1Hdr
    98 000058A2 0080                <1>     dw 08000h
    99 000058A4 [2A59000000000000]  <1>     dq commonStrat
   100 000058AC [095C000000000000]  <1>     dq com4Intr
   101 000058B4 434F4D3420202020    <1>     db "COM4    "
   102                              <1> lpt1Hdr:
   103 000058BC [DE58000000000000]  <1>     dq lpt2Hdr
   104 000058C4 40A0                <1>     dw 0A040h
   105 000058C6 [3259000000000000]  <1>     dq nulStrat
   106 000058CE [3859000000000000]  <1>     dq nulIntr
   107 000058D6 4C50543120202020    <1>     db "LPT1    "
   108                              <1> lpt2Hdr:
   109 000058DE [0059000000000000]  <1>     dq lpt3Hdr
   110 000058E6 40A0                <1>     dw 0A040h
   111 000058E8 [3259000000000000]  <1>     dq nulStrat
   112 000058F0 [3859000000000000]  <1>     dq nulIntr
   113 000058F8 4C50543220202020    <1>     db "LPT2    "
   114                              <1> lpt3Hdr:
   115 00005900 FFFFFFFFFFFFFFFF    <1>     dq -1
   116 00005908 40A0                <1>     dw 0A040h
   117 0000590A [3259000000000000]  <1>     dq nulStrat
   118 00005912 [3859000000000000]  <1>     dq nulIntr
   119 0000591A 4C50543320202020    <1>     dq "LPT3    "
   120 00005922 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    44                                  %include "./Source/Drivers/charDrv.asm"
    45                              <1> commonStrat:
    46                              <1> ;DOS calls this function with rbx=Ptr to request header
    47 0000592A 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    48 00005931 C3                  <1>     ret
    49                              <1> nulStrat:
    50 00005932 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    51                              <1> nulIntr:
    52 00005938 C3                  <1>     ret
    53                              <1> conDriver:
    54 00005939 50                  <1>     push rax
    55 0000593A 53                  <1>     push rbx
    56 0000593B 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    57 00005942 B003                <1>     mov al, 03h ;Unknown Command
    58 00005944 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    59 00005948 7739                <1>     ja .conWriteErrorCode ;If yes, error!
    60                              <1> 
    61 0000594A 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    62 0000594D 3C04                <1>     cmp al, 4
    63 0000594F 7441                <1>     jz .conRead
    64 00005951 3C05                <1>     cmp al, 5
    65 00005953 0F847F000000        <1>     jz .conNondestructiveRead
    66 00005959 3C06                <1>     cmp al, 6
    67 0000595B 0F84A8000000        <1>     jz .conInputStatus
    68 00005961 3C07                <1>     cmp al, 7
    69 00005963 0F84B0000000        <1>     jz .conFlushInputBuffers
    70 00005969 3C08                <1>     cmp al, 8
    71 0000596B 0F84CA000000        <1>     jz .conWrite
    72 00005971 3C09                <1>     cmp al, 9
    73 00005973 0F84C2000000        <1>     jz .conWrite
    74 00005979 3C0A                <1>     cmp al, 0Ah
    75 0000597B 0F84E3000000        <1>     jz .conOutputStatus
    76 00005981 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    77                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    78 00005983 B480                <1>     mov ah, 80h ;Set error bit
    79 00005985 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    80                              <1> .conExit:
    81 00005989 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    82 0000598F 5B                  <1>     pop rbx
    83 00005990 58                  <1>     pop rax
    84 00005991 C3                  <1>     ret
    85                              <1> .conRead:    ;Function 4
    86 00005992 B005                <1>     mov al, 05h ;Bad request structure length?
    87 00005994 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    88 00005997 75EA                <1>     jne .conWriteErrorCode
    89                              <1> 
    90 00005999 57                  <1>     push rdi
    91 0000599A 51                  <1>     push rcx
    92 0000599B 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    93 0000599F 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    94                              <1> .cre1:
    95 000059A1 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    96 000059A4 741C                <1>     je .cre2
    97 000059A6 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    98 000059AD 751A                <1>     jnz .cre3   ;No, get the buffer value
    99 000059AF 31C0                <1>     xor eax, eax
   100 000059B1 CD36                <1>     int 36h
   101                              <1> .cre11:
   102 000059B3 AA                  <1>     stosb
   103 000059B4 84C0                <1>     test al, al ;Was the ascii code stored 0?
   104 000059B6 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   105 000059B8 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   106                              <1> .cre12:
   107 000059BE FFC1                <1>     inc ecx ;Inc chars stored in buffer
   108 000059C0 EBDF                <1>     jmp short .cre1
   109                              <1> .cre2:
   110 000059C2 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   111 000059C5 59                  <1>     pop rcx
   112 000059C6 5F                  <1>     pop rdi
   113 000059C7 EBC0                <1>     jmp short .conExit
   114                              <1> .cre3:
   115 000059C9 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   116 000059CF C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   117 000059D6 EBDB                <1>     jmp short .cre11
   118                              <1> 
   119                              <1> .conNondestructiveRead:  ;Function 5
   120 000059D8 B005                <1>     mov al, 05h ;Bad request structure length?
   121 000059DA 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   122 000059DD 75A4                <1>     jne .conWriteErrorCode
   123 000059DF 803D8E00000000      <1>     cmp byte [.conBuf], 0
   124 000059E6 7519                <1>     jnz .cnr2
   125 000059E8 B401                <1>     mov ah, 01h     ;Get key if exists
   126 000059EA CD36                <1>     int 36h
   127 000059EC 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   128                              <1>     ;Keystroke available
   129                              <1> .cnr0:
   130 000059EE 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   131 000059F1 E993FFFFFF          <1>     jmp .conExit
   132                              <1> .cnr1: ;No keystroke available
   133 000059F6 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   134 000059FC E988FFFFFF          <1>     jmp .conExit
   135                              <1> .cnr2:
   136 00005A01 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   137 00005A07 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   138                              <1> 
   139                              <1> .conInputStatus:         ;Function 6
   140 00005A09 B005                <1>     mov al, 05h ;Bad request structure length?
   141 00005A0B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   142 00005A0E 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   143 00005A14 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   144                              <1> 
   145                              <1> .conFlushInputBuffers:   ;Function 7
   146 00005A19 B005                <1>     mov al, 05h ;Bad request structure length?
   147 00005A1B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   148 00005A1E 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   149 00005A24 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   150                              <1> .cfib0:
   151 00005A2B B401                <1>     mov ah, 01      ;Get buffer status
   152 00005A2D CD36                <1>     int 36h
   153 00005A2F 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   154 00005A35 30E4                <1>     xor ah, ah
   155 00005A37 CD36                <1>     int 36h ;Read key to flush from buffer
   156 00005A39 EBF0                <1>     jmp short .cfib0
   157                              <1> 
   158                              <1> .conWrite:   ;Function 8 and 9
   159 00005A3B B005                <1>     mov al, 05h ;Bad request structure length?
   160 00005A3D 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   161 00005A40 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   162                              <1> 
   163 00005A46 56                  <1>     push rsi
   164 00005A47 51                  <1>     push rcx
   165 00005A48 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   166 00005A4C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   167                              <1> .cw1: 
   168 00005A4E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   169 00005A51 7407                <1>     je .cw2
   170 00005A53 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   171 00005A54 CD49                <1>     int 49h ;Fast print char
   172 00005A56 FFC1                <1>     inc ecx
   173 00005A58 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   174                              <1> .cw2:
   175 00005A5A 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   176 00005A5D 59                  <1>     pop rcx
   177 00005A5E 5E                  <1>     pop rsi
   178 00005A5F E925FFFFFF          <1>     jmp .conExit
   179                              <1> .conOutputStatus:   ;Function 0Ah
   180 00005A64 B005                <1>     mov al, 05h ;Bad request structure length?
   181 00005A66 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   182 00005A69 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   183 00005A6F E915FFFFFF          <1>     jmp .conExit
   184                              <1> 
   185 00005A74 00                  <1> .conBuf db 0    ;Single byte buffer
   186                              <1> fastOutput:         ;This CON driver supports Int 49h
   187                              <1> ;Called with char to transfer in al
   188 00005A75 50                  <1>     push rax
   189 00005A76 B40E                <1>     mov ah, 0Eh
   190 00005A78 CD30                <1>     int 30h
   191 00005A7A 58                  <1>     pop rax
   192 00005A7B 48CF                <1>     iretq
   193                              <1> ctrlBreak:
   194                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   195 00005A7D C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   196 00005A84 48CF                <1>     iretq
   197                              <1> 
   198                              <1> clkDriver:
   199 00005A86 50                  <1>     push rax
   200 00005A87 53                  <1>     push rbx
   201 00005A88 51                  <1>     push rcx
   202 00005A89 52                  <1>     push rdx
   203 00005A8A 56                  <1>     push rsi
   204 00005A8B 55                  <1>     push rbp
   205 00005A8C 488B1D8FFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   206 00005A93 B003                <1>     mov al, 03h ;Unknown Command
   207 00005A95 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   208 00005A99 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   209                              <1> 
   210 00005A9B 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   211 00005A9E 3C04                <1>     cmp al, 04h
   212 00005AA0 7437                <1>     jz .clkRead
   213 00005AA2 3C06                <1>     cmp al, 06h
   214 00005AA4 0F8494000000        <1>     jz .clkInputStatus
   215 00005AAA 3C07                <1>     cmp al, 07h
   216 00005AAC 0F8498000000        <1>     jz .clkFlushInputBuffers
   217 00005AB2 3C08                <1>     cmp al, 08h
   218 00005AB4 0F84A0000000        <1>     jz .clkWrite
   219 00005ABA 3C09                <1>     cmp al, 09h
   220 00005ABC 0F8498000000        <1>     jz .clkWrite
   221 00005AC2 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   222                              <1> .clkNotFunctioning:
   223 00005AC4 B002                <1>     mov al, 02h ;Device not ready error
   224                              <1> .clkWriteErrorCode:
   225 00005AC6 B480                <1>     mov ah, 80h ;Set error bit
   226 00005AC8 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   227                              <1> .clkExit:
   228 00005ACC 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   229 00005AD2 5D                  <1>     pop rbp
   230 00005AD3 5E                  <1>     pop rsi
   231 00005AD4 5A                  <1>     pop rdx
   232 00005AD5 59                  <1>     pop rcx
   233 00005AD6 5B                  <1>     pop rbx
   234 00005AD7 58                  <1>     pop rax
   235 00005AD8 C3                  <1>     ret
   236                              <1> 
   237                              <1> .clkRead:           ;Function 4
   238 00005AD9 B005                <1>     mov al, 05h ;Bad request structure length?
   239 00005ADB 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   240 00005ADE 75E6                <1>     jne .clkWriteErrorCode
   241                              <1> 
   242 00005AE0 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   243 00005AE3 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   244 00005AE7 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   245 00005AEE 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   246 00005AF2 30E4                <1>     xor ah, ah
   247 00005AF4 CD3A                <1>     int 3Ah         ;Read the system timer
   248 00005AF6 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   249 00005AF8 740D                <1>     jz .clkr1       ;Nope, now just time 
   250 00005AFA 30E4                <1>     xor ah, ah
   251                              <1>     ;This works as al should keep count of the # of days passed since last read
   252 00005AFC 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   253 00005B00 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   254                              <1> .clkr1:
   255 00005B07 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   256 00005B0A 0FB7D2              <1>     movzx edx, dx
   257 00005B0D 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   258 00005B0F 89D0                <1>     mov eax, edx
   259 00005B11 31D2                <1>     xor edx, edx
   260 00005B13 89D8                <1>     mov eax, ebx
   261 00005B15 B944040000          <1>     mov ecx, 1092   
   262 00005B1A F7F1                <1>     div ecx
   263 00005B1C 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   264 00005B1F 89D0                <1>     mov eax, edx    ;Get remainder in eax
   265 00005B21 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   266 00005B25 31D2                <1>     xor edx, edx
   267 00005B27 B95B000000          <1>     mov ecx, 91 ;5*18.2
   268 00005B2C F7F1                <1>     div ecx
   269 00005B2E 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   270 00005B31 89D0                <1>     mov eax, edx    ;Get remainder in eax
   271                              <1>     ;lea eax, dword [eax + 4*eax]
   272                              <1>     ;add eax, edx    ;Essentially multiply by 6
   273 00005B33 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   274 00005B36 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   275 00005B39 E98EFFFFFF          <1>     jmp .clkExit
   276                              <1> 
   277                              <1> .clkInputStatus:    ;Function 6
   278                              <1> ;Always return ready
   279 00005B3E B005                <1>     mov al, 05h ;Bad request structure length?
   280 00005B40 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   281 00005B43 7581                <1>     jne .clkWriteErrorCode
   282 00005B45 E982FFFFFF          <1>     jmp .clkExit
   283                              <1> .clkFlushInputBuffers:  ;Function 7
   284                              <1> ;Always return done immediately
   285 00005B4A B005                <1>     mov al, 05h ;Bad request structure length?
   286 00005B4C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   287 00005B4F 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   288 00005B55 E972FFFFFF          <1>     jmp .clkExit
   289                              <1> 
   290                              <1> .clkWrite:          ;Functions 8 and 9
   291 00005B5A B005                <1>     mov al, 05h ;Bad request structure length?
   292 00005B5C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   293 00005B5F 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   294                              <1> 
   295 00005B65 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   296 00005B68 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   297 00005B6C 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   298 00005B70 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   299                              <1> 
   300 00005B77 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   301 00005B79 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   302 00005B7D B105                <1>     mov cl, 5
   303 00005B7F F6F1                <1>     div cl          ;Divide al by 5
   304 00005B81 30E4                <1>     xor ah, ah      ;Remove the remainder
   305 00005B83 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   306                              <1> ;Using the decimal part of this formula for the low count
   307                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   308 00005B85 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   309 00005B88 B912000000          <1>     mov ecx, 18
   310 00005B8D F7E1                <1>     mul ecx  
   311 00005B8F 01C3                <1>     add ebx, eax
   312                              <1> 
   313 00005B91 31D2                <1>     xor edx, edx
   314 00005B93 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   315 00005B97 B944040000          <1>     mov ecx, 1092
   316 00005B9C F7E1                <1>     mul ecx
   317 00005B9E 01C3                <1>     add ebx, eax
   318 00005BA0 89DA                <1>     mov edx, ebx    ;edx now has low count
   319 00005BA2 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   320 00005BA6 B401                <1>     mov ah, 01h     ;Set the system time
   321 00005BA8 CD3A                <1>     int 3Ah
   322                              <1> 
   323 00005BAA 4889F3              <1>     mov rbx, rsi
   324 00005BAD E91AFFFFFF          <1>     jmp .clkExit
   325                              <1> 
   326                              <1> .clkBCDtoHex:
   327                              <1> ;Converts a BCD value to a Hex byte
   328                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   329 00005BB2 51                  <1>     push rcx
   330 00005BB3 0FB6C0              <1>     movzx eax, al   ;Zero extend
   331 00005BB6 89C1                <1>     mov ecx, eax    ;Save al in ecx
   332 00005BB8 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   333 00005BBD 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   334 00005BC3 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   335                              <1> .cbth0:
   336 00005BC6 050A000000          <1>     add eax, 10
   337 00005BCB E2F9                <1>     loop .cbth0
   338 00005BCD 59                  <1>     pop rcx
   339 00005BCE C3                  <1>     ret
   340                              <1> 
   341                              <1> .clkHexToBCD:
   342                              <1> ;Converts a Hex byte into two BCD digits
   343                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   344 00005BCF 51                  <1>     push rcx
   345 00005BD0 0FB6C0              <1>     movzx eax, al   ;Zero extend
   346 00005BD3 31C9                <1>     xor ecx, ecx
   347                              <1> .chtb0:
   348 00005BD5 3D0A000000          <1>     cmp eax, 10
   349 00005BDA 7209                <1>     jb .chtb1
   350 00005BDC 2D0A000000          <1>     sub eax, 10
   351 00005BE1 FFC1                <1>     inc ecx
   352 00005BE3 EBF0                <1>     jmp short .chtb0
   353                              <1> .chtb1:
   354 00005BE5 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   355 00005BE8 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   356 00005BEA 59                  <1>     pop rcx
   357 00005BEB C3                  <1>     ret
   358 00005BEC 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   359                              <1> 
   360                              <1> ;COM Driver headers and main interrupt strat
   361                              <1> com1Intr:
   362 00005BEE C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   363 00005BF5 EB19                <1>     jmp short comIntr
   364                              <1> com2Intr:
   365 00005BF7 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   366 00005BFE EB10                <1>     jmp short comIntr
   367                              <1> com3Intr:
   368 00005C00 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   369 00005C07 EB07                <1>     jmp short comIntr
   370                              <1> com4Intr:
   371 00005C09 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   372                              <1> comIntr:
   373 00005C10 50                  <1>     push rax
   374 00005C11 53                  <1>     push rbx
   375 00005C12 51                  <1>     push rcx
   376 00005C13 52                  <1>     push rdx
   377 00005C14 56                  <1>     push rsi
   378 00005C15 57                  <1>     push rdi
   379 00005C16 488B1D05FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   380 00005C1D B003                <1>     mov al, 03h ;Unknown Command
   381 00005C1F 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   382 00005C23 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   383                              <1> 
   384 00005C25 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   385 00005C28 3C04                <1>     cmp al, 4   ;Read Character(s)
   386 00005C2A 7462                <1>     jz .comRead
   387 00005C2C 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   388 00005C2E 0F849B000000        <1>     jz .comNondestructiveRead   
   389 00005C34 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   390 00005C36 0F8484000000        <1>     jz .comReadInputStatus
   391 00005C3C 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   392 00005C3E 0F84B9000000        <1>     jz .comFlushInputBuffers
   393 00005C44 3C08                <1>     cmp al, 8
   394 00005C46 0F84DB000000        <1>     jz .comWrite
   395 00005C4C 3C09                <1>     cmp al, 9
   396 00005C4E 0F84D3000000        <1>     jz .comWrite
   397 00005C54 3C0A                <1>     cmp al, 0Ah
   398 00005C56 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   399 00005C5C EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   400                              <1> .comErrorNoCount:
   401 00005C5E B002                <1>     mov al, 02h ;Unknown device
   402 00005C60 EB19                <1>     jmp short .comWriteErrorCode
   403                              <1> .comReadError:
   404 00005C62 BA0B000000          <1>     mov edx, 0Bh
   405                              <1> .comWriteError:
   406 00005C67 BA0A000000          <1>     mov edx, 0Ah
   407                              <1> .comError:
   408 00005C6C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   409 00005C6F B902000000          <1>     mov ecx, 02h    ;Unknown device
   410 00005C74 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   411 00005C76 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   412 00005C79 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   413                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   414 00005C7B B480                <1>     mov ah, 80h ;Set error bit
   415 00005C7D 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   416                              <1> .comExit:
   417 00005C81 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   418 00005C87 5F                  <1>     pop rdi
   419 00005C88 5E                  <1>     pop rsi
   420 00005C89 5A                  <1>     pop rdx
   421 00005C8A 59                  <1>     pop rcx
   422 00005C8B 5B                  <1>     pop rbx
   423 00005C8C 58                  <1>     pop rax
   424 00005C8D C3                  <1>     ret
   425                              <1> 
   426                              <1> .comRead:
   427 00005C8E B005                <1>     mov al, 05h ;Bad request structure length?
   428 00005C90 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   429 00005C93 75E6                <1>     jne .comWriteErrorCode
   430                              <1> 
   431 00005C95 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   432 00005C99 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   433                              <1> .cr1:
   434 00005C9B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   435 00005C9E 741B                <1>     je .cre2
   436                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   437 00005CA0 B802000000          <1>     mov eax, 02h    ;Recieve 
   438 00005CA5 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   439 00005CAB 6698                <1>     cbw     ;Zero extend to upper byte
   440 00005CAD CD34                <1>     int 34h ;Recieve Char
   441 00005CAF 72BB                <1>     jc .comError
   442 00005CB1 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   443 00005CB4 74EA                <1>     je .cr11
   444 00005CB6 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   445 00005CB7 FFC1                <1>     inc ecx
   446 00005CB9 EBE0                <1>     jmp short .cr1
   447                              <1> .cre2:
   448 00005CBB 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   449 00005CBE EBC1                <1>     jmp short .comExit
   450                              <1> 
   451                              <1> .comReadInputStatus:
   452 00005CC0 B005                <1>     mov al, 05h ;Bad request structure length?
   453 00005CC2 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   454 00005CC5 75B4                <1>     jne .comWriteErrorCode
   455 00005CC7 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   456 00005CCD EBB2                <1>     jmp short .comExit
   457                              <1> 
   458                              <1> .comNondestructiveRead:
   459                              <1> ;Acts like a "read one character if there is one" function
   460 00005CCF B005                <1>     mov al, 05h ;Bad request structure length?
   461 00005CD1 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   462 00005CD4 75A5                <1>     jne .comWriteErrorCode
   463                              <1> .cndr1:
   464 00005CD6 B802000000          <1>     mov eax, 02h    ;Recieve 
   465 00005CDB 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   466 00005CE1 6698                <1>     cbw     ;Zero extend to upper byte
   467 00005CE3 CD34                <1>     int 34h ;Recieve Char
   468 00005CE5 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   469 00005CEB 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   470 00005CEE 7405                <1>     je .cndr2
   471 00005CF0 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Get next char
   472 00005CF3 EB8C                <1>     jmp short .comExit
   473                              <1> .cndr2:
   474 00005CF5 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 200h ;Busy bit set
   475 00005CFB EB84                <1>     jmp short .comExit
   476                              <1> 
   477                              <1> .comFlushInputBuffers:
   478 00005CFD B005                <1>     mov al, 05h ;Bad request structure length?
   479 00005CFF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   480 00005D02 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   481                              <1> .cfib0:
   482 00005D08 8A1584000000        <1>     mov dl, byte [.comDevice]
   483 00005D0E 6698                <1>     cbw
   484 00005D10 B802000000          <1>     mov eax, 02h    ;Recieve
   485 00005D15 CD34                <1>     int 34h
   486 00005D17 0F8241FFFFFF        <1>     jc .comErrorNoCount
   487 00005D1D 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   488 00005D20 75E6                <1>     jne .cfib0
   489 00005D22 E95AFFFFFF          <1>     jmp .comExit
   490                              <1> 
   491                              <1> .comWrite:
   492 00005D27 B005                <1>     mov al, 05h ;Bad request structure length?
   493 00005D29 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   494 00005D2C 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   495                              <1> 
   496 00005D32 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   497 00005D36 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   498                              <1> .cw1: 
   499 00005D38 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   500 00005D3B 7417                <1>     je .cw2
   501 00005D3D AC                  <1>     lodsb   ;Get char into al, and inc rsi
   502 00005D3E B401                <1>     mov ah, 01h ;Move function number into ah
   503 00005D40 8A154C000000        <1>     mov dl, byte [.comDevice]
   504 00005D46 6698                <1>     cbw     ;Zero extend to upper byte
   505 00005D48 CD34                <1>     int 34h ;Transmit char
   506 00005D4A 0F821CFFFFFF        <1>     jc .comError
   507 00005D50 FFC1                <1>     inc ecx
   508 00005D52 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   509                              <1> .cw2:
   510 00005D54 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   511 00005D57 E925FFFFFF          <1>     jmp .comExit
   512                              <1> 
   513                              <1> .comOutputStatus:
   514                              <1> ;Read MODEM status
   515 00005D5C B005                <1>     mov al, 05h ;Bad request structure length?
   516 00005D5E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   517 00005D61 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   518                              <1> 
   519 00005D67 8A1525000000        <1>     mov dl, byte [.comDevice]
   520 00005D6D 6698                <1>     cbw     ;Zero extend to upper byte
   521 00005D6F B403                <1>     mov ah, 03h     ;Get status
   522 00005D71 CD34                <1>     int 34h
   523 00005D73 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   524 00005D79 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   525 00005D7E C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   526 00005D81 F7D0                <1>     not eax      ;Bitwise inversion
   527 00005D83 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   528 00005D88 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   529 00005D8D E9EFFEFFFF          <1>     jmp .comExit
   530 00005D92 00                  <1> .comDevice   db 0
    45                                  %include "./Source/Drivers/diskDrv.asm"
    46                              <1> msdDriver:
    47 00005D93 50                  <1>     push rax
    48 00005D94 53                  <1>     push rbx
    49 00005D95 51                  <1>     push rcx
    50 00005D96 52                  <1>     push rdx
    51 00005D97 56                  <1>     push rsi
    52 00005D98 57                  <1>     push rdi
    53 00005D99 55                  <1>     push rbp
    54 00005D9A 4150                <1>     push r8
    55 00005D9C 488B1D7FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    56 00005DA3 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    57 00005DA7 B003                <1>     mov al, drvBadCmd
    58 00005DA9 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    59 00005DAF B001                <1>     mov al, drvBadUnit 
    60 00005DB1 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    61 00005DB5 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    62 00005DBB 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    63 00005DC2 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    64 00005DC6 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    65 00005DC9 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    66 00005DCD 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    67 00005DD1 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    68 00005DD3 488D0D9A000000      <1>     lea rcx, .msdTable
    69 00005DDA 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    70 00005DDE 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    71 00005DE0 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    72 00005DE2 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    73 00005DE5 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    74                              <1> .msdDriverExit:
    75 00005DE7 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    76 00005DED 4158                <1>     pop r8
    77 00005DEF 5D                  <1>     pop rbp
    78 00005DF0 5F                  <1>     pop rdi
    79 00005DF1 5E                  <1>     pop rsi
    80 00005DF2 5A                  <1>     pop rdx
    81 00005DF3 59                  <1>     pop rcx
    82 00005DF4 5B                  <1>     pop rbx
    83 00005DF5 58                  <1>     pop rax
    84 00005DF6 C3                  <1>     ret
    85                              <1> 
    86                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    87 00005DF7 4889FB              <1>     mov rbx, rdi
    88 00005DFA 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    89 00005DFD 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    90 00005DFF 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    91                              <1> ;Now fall through to general error
    92                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    93 00005E02 B401                <1>     mov ah, 01h
    94 00005E04 CD33                <1>     int 33h ;Read status of last operation
    95 00005E06 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    96 00005E09 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    97 00005E0B 7460                <1>     je .msdWriteErrorCode 
    98 00005E0D B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    99 00005E0F 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   100 00005E12 7459                <1>     je .msdWriteErrorCode 
   101 00005E14 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   102 00005E17 7454                <1>     je .msdWriteErrorCode
   103                              <1> ;Device Not Ready
   104 00005E19 B002                <1>     mov al, 02h  ;Device not ready code
   105 00005E1B 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   106 00005E1E 744D                <1>     je .msdWriteErrorCode
   107 00005E20 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   108 00005E24 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   109                              <1> ;Write Protected
   110 00005E28 30C0                <1>     xor al, al
   111 00005E2A 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   112 00005E2F 743C                <1>     je .msdWriteErrorCode
   113                              <1> ;CRC Error
   114 00005E31 B004                <1>     mov al, 04h     ;CRC error code
   115 00005E33 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   116 00005E38 7433                <1>     je .msdWriteErrorCode
   117 00005E3A 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   118 00005E3F 742C                <1>     je .msdWriteErrorCode
   119 00005E41 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   120 00005E46 7425                <1>     je .msdWriteErrorCode
   121                              <1> ;Seek Error
   122 00005E48 B006                <1>     mov al, 06h     ;Seek error code
   123 00005E4A 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   124 00005E4D 741E                <1>     je .msdWriteErrorCode
   125                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   126                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   127 00005E4F B007                <1>     mov al, 07h
   128 00005E51 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   129 00005E54 7417                <1>     je .msdWriteErrorCode
   130                              <1> ;Sector Not Found
   131 00005E56 B008                <1>     mov al, 08h     ;Sector not found code
   132 00005E58 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   133 00005E5B 7410                <1>     je .msdWriteErrorCode
   134                              <1> ;Write faults
   135 00005E5D B00A                <1>     mov al, 0Ah     ;Write fault
   136 00005E5F 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   137 00005E62 7409                <1>     je .msdWriteErrorCode
   138                              <1> ;Read faults
   139 00005E64 B00B                <1>     mov al, 0Bh     ;Read fault
   140 00005E66 80F911              <1>     cmp cl, 11h     ;Read error
   141 00005E69 7402                <1>     je .msdWriteErrorCode
   142                              <1> ;General Errors
   143 00005E6B B00C                <1>     mov al, 0Ch     ;Everything else is general error
   144                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   145 00005E6D B480                <1>     mov ah, 80h ;Set error bit
   146 00005E6F 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   147 00005E73 C3                  <1>     ret ;Return to set done bit
   148                              <1> .msdTable:
   149 00005E74 0000                <1>     dw 0                            ;Function 0
   150 00005E76 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   151 00005E78 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   152 00005E7A 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   153 00005E7C 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   154 00005E7E 0000                <1>     dw 0                            ;Function 5
   155 00005E80 0000                <1>     dw 0                            ;Function 6
   156 00005E82 0000                <1>     dw 0                            ;Function 7
   157 00005E84 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   158 00005E86 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   159 00005E88 0000                <1>     dw 0                            ;Function 10
   160 00005E8A 0000                <1>     dw 0                            ;Function 11
   161 00005E8C C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   162 00005E8E D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   163 00005E90 ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   164 00005E92 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   165 00005E94 0000                <1>     dw 0                            ;Function 16
   166 00005E96 0000                <1>     dw 0                            ;Function 17
   167 00005E98 0000                <1>     dw 0                            ;Function 18
   168 00005E9A 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   169 00005E9C 0000                <1>     dw 0                            ;Function 20
   170 00005E9E 0000                <1>     dw 0                            ;Function 21
   171 00005EA0 0000                <1>     dw 0                            ;Function 22
   172 00005EA2 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   173 00005EA4 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   174                              <1> 
   175                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   176                              <1> .msdMedChk:          ;Function 1
   177 00005EA6 B005                <1>     mov al, 05h ;Bad request structure length
   178 00005EA8 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   179 00005EAB 75C0                <1>     jne .msdWriteErrorCode
   180                              <1> 
   181 00005EAD 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   182 00005EB2 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   183 00005EB9 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   184 00005EBC F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   185 00005EBF 753F                <1>     jnz .mmcNoChange
   186                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   187 00005EC1 B416                <1>     mov ah, 16h 
   188 00005EC3 CD33                <1>     int 33h
   189 00005EC5 0F8237FFFFFF        <1>     jc .msdGenDiskError
   190 00005ECB 80FC80              <1>     cmp ah, 80h
   191 00005ECE 740E                <1>     je .mmcNoChangeLine
   192 00005ED0 80FC86              <1>     cmp ah, 86h
   193 00005ED3 7409                <1>     je .mmcNoChangeLine
   194 00005ED5 84E4                <1>     test ah, ah ;No change?
   195 00005ED7 7427                <1>     jz .mmcNoChange
   196 00005ED9 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   197 00005EDC 750D                <1>     jnz .mmcChange
   198                              <1> ;If nothing, fall through and test manually, should never happen though
   199                              <1> .mmcNoChangeLine:
   200                              <1> ;Now we test Media Descriptor
   201 00005EDE 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   202 00005EE3 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   203 00005EE6 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   204 00005EE9 7410                <1>     je .mmcUnsure
   205                              <1> .mmcChange:
   206 00005EEB C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   207 00005EEF 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   208 00005EF6 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   209                              <1>     ;Check here if there were any open handles on the device when it was changed
   210 00005EFA C3                  <1>     ret
   211                              <1> .mmcUnsure:
   212 00005EFB C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   213 00005EFF C3                  <1>     ret
   214                              <1> .mmcNoChange:
   215 00005F00 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   216 00005F04 C3                  <1>     ret
   217                              <1> 
   218                              <1> 
   219                              <1> .msdBuildBPB:        ;Function 2
   220 00005F05 B005                <1>     mov al, 05h ;Bad request structure length
   221 00005F07 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   222 00005F0A 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   223                              <1> 
   224 00005F10 4889DE              <1>     mov rsi, rbx
   225 00005F13 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   226 00005F18 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   227 00005F1F 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   228 00005F22 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   229 00005F26 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   230 00005F28 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   231 00005F2B B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   232 00005F30 CD33                <1>     int 33h
   233 00005F32 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   234                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   235 00005F38 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   236 00005F3C 7418                <1>     je .mbbpb0
   237 00005F3E 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   238 00005F42 7412                <1>     je .mbbpb0
   239 00005F44 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   240 00005F48 740C                <1>     je .mbbpb0
   241 00005F4A 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   242 00005F4E B007                <1>     mov al, 07h ;Unknown media error code
   243 00005F50 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   244                              <1> .mbbpb0:
   245 00005F56 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   246 00005F59 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   247 00005F5E 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   248 00005F65 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   249 00005F69 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   250 00005F6C 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   251 00005F70 B90F000000          <1>     mov ecx, bpbEx_size/8
   252 00005F75 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   253 00005F78 C3                  <1>     ret
   254                              <1> .msdIOCTLRead:       ;Function 3, returns done
   255 00005F79 B005                <1>     mov al, drvBadDrvReq
   256 00005F7B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   257 00005F7E 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   258 00005F84 C3                  <1>     ret
   259                              <1> .msdRead:            ;Function 4
   260                              <1> ;Will read one sector at a time.
   261 00005F85 B005                <1>     mov al, 05h ;Bad request structure length
   262 00005F87 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   263 00005F8A 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   264                              <1> 
   265 00005F90 4889DF              <1>     mov rdi, rbx
   266 00005F93 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   267                              <1> .msdr0:
   268 00005F95 B682                <1>     mov dh, 82h ;LBA Read Sectors
   269 00005F97 E841010000          <1>     call .msdBlkIOCommon
   270 00005F9C 0F8255FEFFFF        <1>     jc .msdIOError
   271 00005FA2 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   272 00005FAA 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   273 00005FB2 FFC6                <1>     inc esi
   274 00005FB4 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   275 00005FB7 75DC                <1>     jne .msdr0
   276 00005FB9 4889FB              <1>     mov rbx, rdi
   277 00005FBC C3                  <1>     ret
   278                              <1> .msdWrite:           ;Function 8
   279                              <1> ;Will write one sector at a time.
   280 00005FBD B005                <1>     mov al, 05h ;Bad request structure length
   281 00005FBF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   282 00005FC2 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   283                              <1> 
   284 00005FC8 4889DF              <1>     mov rdi, rbx
   285 00005FCB 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   286                              <1> .msdw0:
   287 00005FCD B683                <1>     mov dh, 83h ;LBA Write Sectors
   288 00005FCF E809010000          <1>     call .msdBlkIOCommon
   289 00005FD4 0F821DFEFFFF        <1>     jc .msdIOError
   290 00005FDA 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   291 00005FE2 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   292 00005FEA FFC6                <1>     inc esi
   293 00005FEC 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   294 00005FEF 75DC                <1>     jne .msdw0
   295 00005FF1 4889FB              <1>     mov rbx, rdi
   296 00005FF4 C3                  <1>     ret
   297                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   298                              <1> ;Will write one sector at a time and then verify it.
   299 00005FF5 B005                <1>     mov al, 05h ;Bad request structure length
   300 00005FF7 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   301 00005FFA 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   302                              <1> 
   303 00006000 4889DF              <1>     mov rdi, rbx
   304 00006003 31F6                <1>     xor esi, esi  ;Set counter to zero
   305                              <1> .msdwv0:
   306 00006005 B683                <1>     mov dh, 83h ;LBA Write Sectors
   307 00006007 E8D1000000          <1>     call .msdBlkIOCommon
   308 0000600C 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   309 00006012 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   310 00006014 E8C4000000          <1>     call .msdBlkIOCommon
   311 00006019 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   312 0000601F 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   313 00006027 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   314 0000602F FFC6                <1>     inc esi
   315 00006031 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   316 00006034 75CF                <1>     jne .msdwv0
   317 00006036 4889FB              <1>     mov rbx, rdi
   318 00006039 C3                  <1>     ret
   319                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   320 0000603A B005                <1>     mov al, drvBadDrvReq
   321 0000603C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   322 0000603F 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   323                              <1> 
   324 00006045 C3                  <1>     ret
   325                              <1> .msdDevOpen:         ;Function 13
   326 00006046 B005                <1>     mov al, drvBadDrvReq
   327 00006048 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   328 0000604B 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   329                              <1> 
   330 00006051 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   331 00006056 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   332 0000605D FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   333 00006060 C3                  <1>     ret
   334                              <1> .msdDevClose:        ;Function 14
   335 00006061 B005                <1>     mov al, drvBadDrvReq
   336 00006063 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   337 00006066 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   338                              <1> 
   339 0000606C 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   340 00006071 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   341 00006078 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   342 0000607B C3                  <1>     ret
   343                              <1> .msdRemovableMedia:  ;Function 15
   344 0000607C B005                <1>     mov al, drvBadDrvReq
   345 0000607E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   346 00006081 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   347                              <1> 
   348 00006087 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   349 0000608C 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   350 00006093 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   351 00006096 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   352 0000609B 31D2                <1>     xor edx, edx    ;Busy bit clear
   353 0000609D A880                <1>     test al, 80h
   354 0000609F 0F44CA              <1>     cmovz ecx, edx
   355 000060A2 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   356 000060A6 C3                  <1>     ret
   357                              <1> .msdGenericIOCTL:    ;Function 19
   358 000060A7 B005                <1>     mov al, drvBadDrvReq
   359 000060A9 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   360 000060AC 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   361                              <1> 
   362 000060B2 C3                  <1>     ret
   363                              <1> .msdGetLogicalDev:   ;Function 23
   364 000060B3 B005                <1>     mov al, drvBadDrvReq
   365 000060B5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   366 000060B8 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   367                              <1> 
   368 000060BE 8A0541000000        <1>     mov al, byte [.msdCurDev]
   369 000060C4 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   370 000060C7 C3                  <1>     ret
   371                              <1> .msdSetLogicalDev:   ;Function 24
   372 000060C8 B005                <1>     mov al, drvBadDrvReq
   373 000060CA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   374 000060CD 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   375                              <1> 
   376 000060D3 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   377 000060D6 880529000000        <1>     mov byte [.msdCurDev], al
   378 000060DC C3                  <1>     ret
   379                              <1> 
   380                              <1> .msdBlkIOCommon:  ;Does block IO
   381                              <1> ;Called with rdi containing old rbx value and ah with function number
   382                              <1> ;rbp points to bpb
   383                              <1> ;Error handled by caller
   384                              <1> ;Sector count handled by caller
   385                              <1> ;Called with dh = BIOS function number
   386 000060DD 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   387 000060E2 8A90[06610000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   388 000060E8 31C9                <1>     xor ecx, ecx
   389 000060EA 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   390 000060ED 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   391 000060F1 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   392 000060F5 88F4                <1>     mov ah, dh
   393 000060F7 B001                <1>     mov al, 01h ;Do one sector at a time 
   394 000060F9 CD33                <1>     int 33h
   395 000060FB C3                  <1>     ret
   396                              <1> 
   397 000060FC 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   398                              <1> ;LASTDRIVE default is 5
   399                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   400                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   401 00006105 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   402                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   403 00006106 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   404 0000610B 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   405 00006110 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   405 00006119 000000000000000000- <1>
   405 00006122 000000000000000000- <1>
   405 0000612B 000000000000000000- <1>
   405 00006134 00000000            <1>
   406 00006138 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   406 00006141 000000000000000000- <1>
   406 0000614A 000000000000000000- <1>
   406 00006153 000000000000000000- <1>
   406 0000615C 000000000000000000- <1>
   406 00006165 000000000000000000- <1>
   406 0000616E 000000000000000000- <1>
   406 00006177 000000000000000000- <1>
   406 00006180 000000000000000000- <1>
   406 00006189 000000000000000000- <1>
   406 00006192 000000000000000000- <1>
   406 0000619B 000000000000000000- <1>
   406 000061A4 000000000000000000- <1>
   406 000061AD 000000000000000000- <1>
   406 000061B6 000000000000000000- <1>
   406 000061BF 000000000000000000- <1>
   406 000061C8 000000000000000000- <1>
   406 000061D1 000000000000000000- <1>
   406 000061DA 000000000000000000- <1>
   406 000061E3 000000000000000000- <1>
   406 000061EC 000000000000000000- <1>
   406 000061F5 000000000000000000- <1>
   406 000061FE 000000000000000000- <1>
   406 00006207 000000000000000000- <1>
   406 00006210 000000000000000000- <1>
   406 00006219 000000000000000000- <1>
   406 00006222 000000000000000000- <1>
   406 0000622B 000000000000000000- <1>
   406 00006234 000000000000000000- <1>
   406 0000623D 000000000000000000- <1>
   406 00006246 000000000000000000- <1>
   406 0000624F 000000000000000000- <1>
   406 00006258 000000000000000000- <1>
   406 00006261 000000000000000000- <1>
   406 0000626A 000000000000000000- <1>
   406 00006273 000000000000000000- <1>
   406 0000627C 000000000000000000- <1>
   406 00006285 000000000000000000- <1>
   406 0000628E 000000000000000000- <1>
   406 00006297 000000000000000000- <1>
   406 000062A0 000000000000000000- <1>
   406 000062A9 000000000000000000- <1>
   406 000062B2 000000000000000000- <1>
   406 000062BB 000000000000000000- <1>
   406 000062C4 000000000000000000- <1>
   406 000062CD 000000000000000000- <1>
   406 000062D6 000000000000000000- <1>
   406 000062DF 000000000000000000- <1>
   406 000062E8 000000000000000000- <1>
   406 000062F1 000000000000000000- <1>
   406 000062FA 000000000000000000- <1>
   406 00006303 000000000000000000- <1>
   406 0000630C 000000000000000000- <1>
   406 00006315 000000000000000000- <1>
   406 0000631E 000000000000000000- <1>
   406 00006327 000000000000000000- <1>
   406 00006330 000000000000000000- <1>
   406 00006339 000000000000000000- <1>
   406 00006342 000000000000000000- <1>
   406 0000634B 000000000000000000- <1>
   406 00006354 000000000000000000- <1>
   406 0000635D 000000000000000000- <1>
   406 00006366 000000000000000000- <1>
   406 0000636F 000000000000000000- <1>
   406 00006378 000000000000000000- <1>
   406 00006381 000000000000000000- <1>
   406 0000638A 000000000000        <1>
   407                              <1> 
   408                              <1> endptr equ $
    46                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    47                                  ;Paragraph alignment
    48                                  %include "./Source/BSS/dosDynaDataArea.asm"
    49                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    50                              <1> ; the MCB chain!
    51                              <1> ddaStart:
    52 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    53                              <1> 
    54                              <1> ;Create DPB chain of first 5 available DPB slots
    55                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    56 00000010 <res 35h>           <1> firstDPB        resb dpb_size
    57 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    58                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    59                              <1> ;Always jettison this space
    60 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    61 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    62 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    63                              <1> 
    64 00000119 <res 30h>           <1> tmpBufHdr       resb bufferHdr_size
    65 00000149 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    66                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    67                              <1> dynamicDataAreaLength equ $ - ddaStart
    67          ------------------  <1>  info: assembly required 1+12+2 passes

