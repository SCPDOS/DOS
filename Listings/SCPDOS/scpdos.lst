     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "./Source/Include/driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    23                              <1> 
    24                              <1>     .hdrlen resb 1  ;Length of the request header
    25                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    26                              <1>     .cmdcde resb 1  ;Command code
    27                              <1>     .status resw 1  ;Status word
    28                              <1>     .devptr resq 1  ;Device queue pointer field
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> ;Command Code equates
    32                              <1>     drvINIT         equ 0
    33                              <1>     drvMEDCHK       equ 1
    34                              <1>     drvBUILDBPB     equ 2
    35                              <1>     drvIOCTLREAD    equ 3
    36                              <1>     drvREAD         equ 4
    37                              <1>     drvNONDESTREAD  equ 5
    38                              <1>     drvINSTATUS     equ 6
    39                              <1>     drvFLUSHINBUF   equ 7
    40                              <1>     drvWRITE        equ 8
    41                              <1>     drvWRITEVERIFY  equ 9
    42                              <1>     drvOUTSTATUS    equ 10
    43                              <1>     drvFLUSHOUTBUF  equ 11
    44                              <1>     drvIOCTLWRITE   equ 12
    45                              <1>     drvOPEN         equ 13
    46                              <1>     drvCLOSE        equ 14
    47                              <1>     drvREMMEDCHECK  equ 15
    48                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    49                              <1>     drvIOCTL        equ 19
    50                              <1>     drvGETDRVMAP    equ 23
    51                              <1>     drvSETDRVMAP    equ 24
    52                              <1>     
    53                              <1> ;Driver Error equates 
    54                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    55                              <1>     drvBadUnit      equ 1   ;Unknown unit
    56                              <1>     drvNotReady     equ 2   ;Device not ready
    57                              <1>     drvBadCmd       equ 3   ;Unknown command
    58                              <1>     drvCRCErr       equ 4   ;CRC Error
    59                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    60                              <1>     drvBadSeek      equ 6   ;Seek error
    61                              <1>     drvBadMed       equ 7   ;Unknown media
    62                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    63                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    64                              <1>     drvWriteFault   equ 10  ;Write Fault
    65                              <1>     drvReadFault    equ 11  ;Read Fault
    66                              <1>     drvGenFault     equ 12  ;General Fault
    67                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    68                              <1> 
    69                              <1> ;Drive structures
    70                              <1> struc drvReqHdr
    71                              <1>     drvReqHdrM
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc initReqPkt  ;Init Request Packet
    75                              <1> 
    76                              <1>     drvReqHdrM   ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    77 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    78 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    79 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    80 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    85                              <1> 
    86                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    87 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    88 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    89 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    90                              <1> 
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    96 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    97 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    98 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    99                              <1> 
   100                              <1> endstruc
   101                              <1> 
   102                              <1> struc ioReqPkt   ;IO Request Packet
   103                              <1> 
   104                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   105 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   106 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   107 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   108 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   109 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   110                              <1> 
   111                              <1> endstruc
   112                              <1> 
   113                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
   114                              <1>     
   115                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   116 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc statusReqPkt   ;Status Request Packet
   121                              <1> 
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   129                              <1>      
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc openReqPkt ;Open Device Request Packet
   133                              <1> 
   134                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   135                              <1>      
   136                              <1> endstruc
   137                              <1> 
   138                              <1> struc closeReqPkt ;Close Device Request Packet
   139                              <1> 
   140                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   141                              <1>      
   142                              <1> endstruc
   143                              <1> 
   144                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   145                              <1> 
   146                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   147                              <1>      
   148                              <1> endstruc
   149                              <1> 
   150                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   151                              <1> 
   152                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   153 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   154 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   155 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   156 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   157 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   162                              <1>     
   163                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   164                              <1> 
   165                              <1> endstruc
   166                              <1> 
   167                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   168                              <1>     
   169                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   170                              <1> 
   171                              <1> endstruc
     6                                  %include "./Source/Include/fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    17                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    18                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    19                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    20                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    21                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    22                              <1> ;-------------------------------------------------------;
    23                              <1> 
    24                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    25                              <1> 
    26 00000000 ??????              <1>     .jmpBoot    resb 3 
    27 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    28 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    29 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    30 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    31 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    32 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    33 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    34 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    35 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    36 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    37 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    38 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    39 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    40                              <1> 
    41 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    42 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    43 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    44 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    45 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    46 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    47                              <1> 
    48                              <1> endstruc
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    51                              <1> 
    52 00000000 ??????              <1>     .jmpBoot    resb 3
    53 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    54 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    55 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    56 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    57 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    58 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    59 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    60 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    61 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    62 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    63 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    64 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    65 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    66                              <1> 
    67 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    68 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    69 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    70 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    71 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    72 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    73 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    74                              <1> 
    75 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    76 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    77 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    78 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    79 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    80 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mbr
    85 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    86 000001B8 ????????            <1>     .diskID     resb 4
    87 000001BC ????                <1>     .reserved   resb 2
    88 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    89 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    90 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    91 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    92 000001FE ????                <1>     .mbrSig     resb 2
    93                              <1> endstruc
    94                              <1> 
    95                              <1> struc mbrEntry
    96 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    97 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    98 00000004 ??                  <1>     .ptnType    resb 1
    99 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   100 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   101 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc ebr
   105 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   106 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   107 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   108 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   109 000001FE ????                <1>     .mbrSig     resb 2
   110                              <1> endstruc
   111                              <1> 
   112                              <1> 
   113                              <1> struc fatDirEntry
   114                              <1> 
   115 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   116 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   121 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   122 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   127                              <1> 
   128                              <1> endstruc
   129                              <1> ;Directory attribute equates
   130                              <1>     dirReadOnly     equ 01h
   131                              <1>     dirHidden       equ 02h
   132                              <1>     dirSystem       equ 04h
   133                              <1>     dirVolumeID     equ 08h
   134                              <1>     dirDirectory    equ 10h
   135                              <1>     dirArchive      equ 20h
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1> 
   138                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   139                              <1> 
   140 00000000 ??????              <1>     .jmpBoot                resb 3 
   141 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   142 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   143 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   144 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   145 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   146 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   147 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   148 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   149 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   150 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   151 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   152 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   153 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   154 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   155 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   156 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   157 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   158 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   159                              <1> 
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc FSInfo
   163                              <1> 
   164 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   165 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   166 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   167 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   168 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   169 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   170 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   171                              <1> 
   172                              <1> endstruc
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    27 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000005 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000007 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000008 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000A ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000E ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000012 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000016 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001A ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000022 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000023 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000024 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002C ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000030 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Flags: Bit 15 set = Network drive
    69                              <1> ;        Bit 14 set = Physical drive
    70                              <1> ;        Bit 13 set = JOIN'ed drive
    71                              <1> ;        Bit 12 set = SUBST'ed drive
    72                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    73                              <1> endstruc
    74                              <1> ;CDS equates
    75                              <1>     cdsNetDrive     equ 8000h
    76                              <1>     cdsPhysDrive    equ 4000h
    77                              <1>     cdsJoinDrive    equ 2000h
    78                              <1>     cdsSubstDrive   equ 1000h
    79                              <1>     cdsRedirDrive   equ 0080h
    80                              <1> ;------------------------------------------------------------------------;
    81                              <1> ; The SFT is a way to allow applications to open file handles to files 
    82                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    83                              <1> ; under the first header, and then a second header will be linked to the 
    84                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    85                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    86                              <1> ; using the FCBS= command. Default FCBS=5.
    87                              <1> ;
    88                              <1> ; A file handle describes the file, and the location within the file that
    89                              <1> ; we are reading. The file handle can be manipulated without the file
    90                              <1> ; being in memory, thus allowing the user to access data without needing 
    91                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    92                              <1> ; accessing devices, by treating them as files with their drivers 
    93                              <1> ; responding and translating the manipulations of the file handle itself.
    94                              <1> ; Neither the driver nor the application should see or use the SFT for
    95                              <1> ; the handle, as it is subject to change (and will change when file 
    96                              <1> ; sharing provisions are included). The DOS will make requests to the 
    97                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    98                              <1> ; track of the information in the SFT entry for that handle. 
    99                              <1> ;
   100                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   101                              <1> ; can point to the same file. It all depends on what the applications 
   102                              <1> ; want to do with the File.
   103                              <1> ;
   104                              <1> ; !!!!IMPORTANT!!!!
   105                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   106                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   107                              <1> ;
   108                              <1> ;Each SFT may look like this:
   109                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   110                              <1> ;            |                |
   111                              <1> ;       wNumFiles*sft    wNumFiles*sft
   112                              <1> ;
   113                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   114                              <1> ; System FCBs.
   115                              <1> ;
   116                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   117                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   118                              <1> ;
   119                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   120                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   121                              <1> ;------------------------------------------------------------------------;
   122                              <1> struc sfth   ;System file table header
   123                              <1> ; This is the SFT header.
   124                              <1> ; This structure comes before the start of the first file in the array/table.
   125 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   126 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc sft
   130                              <1> ;This is the file struc itself
   131 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   132 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   133 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   134 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   135 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   136 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   137 00000013 ????                <1>     .wTime       resw 1    ;File Time
   138 00000015 ????                <1>     .wDate       resw 1    ;File Date
   139 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   140 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   141 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster in file, the last cluster read
   142 00000023 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   143 0000002B ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   144 0000002C <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   145 00000037 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   146 0000003F ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   147                              <1> endstruc
   148                              <1> ;Open Mode equates
   149                              <1> ;Access modes   Bits[2:0]
   150                              <1>     ReadAccess      equ 0h
   151                              <1>     WriteAccess     equ 1h
   152                              <1>     RWAccess        equ 2h
   153                              <1> ;Bit 3 reserved 0
   154                              <1> ;Sharing modes  Bits[6:4]
   155                              <1>     CompatShare     equ 0h
   156                              <1>     denyRWShare     equ 10h
   157                              <1>     denyWriteShare  equ 20h
   158                              <1>     denyReadShare   equ 30h
   159                              <1>     denyNoneShare   equ 40h
   160                              <1> ;Bit 7 reserved 0
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> ;Critical Error handling
   163                              <1>     critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   164                              <1> ;Buffering on writes
   165                              <1>     noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file?
   167                              <1>     FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1>     readOnlyFile    equ 1h
   170                              <1>     hiddenFile      equ 2h
   171                              <1>     systemFile      equ 4h
   172                              <1>     volumeLabel     equ 8h
   173                              <1>     directoryFile   equ 10h ;Directory entry
   174                              <1>     archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1>     charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1>     charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1>     charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1>     charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1>     charDevFastOut  equ 10h ;If set, device supports INT 49h
   182                              <1>     devBinary       equ 20h ;If set, r/w device in Binary mode!!!
   183                              <1>     charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1>     blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   185                              <1>     devCharDev      equ 80h ;If set, it is a char device!
   186                              <1>     charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1>     devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1>     charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1>     blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   190                              <1>     devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   214                              <1>     .dataarea:             ;Points to the start of the data area
   215                              <1> endstruc
   216                              <1> ;Buffer Flag equates
   217                              <1>     dosBuffer   equ 1h  ;DOS data sector in buffer
   218                              <1>     fatBuffer   equ 2h  ;FAT sector in buffer
   219                              <1>     dirBuffer   equ 4h  ;Directory sector in buffer
   220                              <1>     dataBuffer  equ 8h  ;File Data sector in buffer
   221                              <1>     refBuffer   equ 20h ;Data in buffer referenced by an application
   222                              <1>     dirtyBuffer equ 40h ;Data in buffer modified by an application
   223                              <1> ;------------------------------------------------------------------------;
   224                              <1> ; Memory control block for each memory arena
   225                              <1> ;------------------------------------------------------------------------;
   226                              <1> struc mcb
   227 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   228 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   229 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   230 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   231                              <1>     .program:
   232                              <1> endstruc
   233                              <1> ;MCB equates
   234                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   235                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   236                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   237                              <1> mcbMarkCtn      equ "M"
   238                              <1> mcbMarkEnd      equ "Z"
   239                              <1> 
   240                              <1> memFirstFit     equ 0   ;First free block goes to application
   241                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   242                              <1> memLastFit      equ 2   ;Last free block goes to application
   243                              <1> 
   244                              <1> ;Owner = Para aligned address => Owning application PSP
   245                              <1> ;...To consider...
   246                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   247                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   248                              <1> ;------------------------------------------------------------------------;
   249                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   250                              <1> ; following order, thus allowing for return values to be placed in the 
   251                              <1> ; registers by accessing the caller register stack frame.
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> struc callerFrame
   254 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   255 00000008 ????????????????    <1>     .rbx    resq 1    
   256 00000010 ????????????????    <1>     .rcx    resq 1
   257 00000018 ????????????????    <1>     .rdx    resq 1
   258 00000020 ????????????????    <1>     .rsi    resq 1
   259 00000028 ????????????????    <1>     .rdi    resq 1
   260 00000030 ????????????????    <1>     .rbp    resq 1
   261 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   262 00000040 ????????????????    <1>     .r9     resq 1
   263                              <1> ;Pushed by Processor when invoked via Interrupt
   264 00000048 ????????????????    <1>     .rip    resq 1
   265 00000050 ????????????????    <1>     .cs     resq 1
   266 00000058 ????????????????    <1>     .flags  resq 1
   267                              <1> endstruc
   268                              <1> 
   269                              <1> struc fcb
   270                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   271 00000000 ??                  <1>     .driveNum   resb 1
   272 00000001 ????????????????    <1>     .filename   resb 8
   273 00000009 ??????              <1>     .fileext    resb 3
   274 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   275                              <1> ;One block consists of 128 records, of size denoted in the below
   276 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   277 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   278 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   279 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   280 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   281 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   282 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   283 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   284 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   285                              <1>     ;If record size > 64, high byte is ignored.
   286                              <1>     ;Used for random read and write operations to find the right record
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   290 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   291 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   292 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   293 0000000D ????????            <1>     .dirOffset  resd 1  ;Entry within dir (made a dword but will never be so)
   294 00000011 ????????            <1>     .parCluster resd 1  ;Parent cluster number
   295 00000015 ??                  <1>     .atrribFnd  resb 1  ;Attrib of file found
   296 00000016 ????                <1>     .fileTime   resw 1  ;File time
   297 00000018 ????                <1>     .fileDate   resw 1  ;File date
   298 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   299 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   300                              <1> endstruc
   301                              <1> 
   302                              <1> struc psp
   303 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   304 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   305 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   306 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   307 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   308 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   309 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   310 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   311 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   312 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   313 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   314 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   315 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   316                              <1> ;Extra handle arrays are grouped into a linked list
   317                              <1> ;The below are in the same place as in DOS
   318 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   319 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   320                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   321 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   322 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   323                              <1> endstruc
   324                              <1> 
   325                              <1> struc clkStruc
   326 00000000 ????                <1>     .dateWord   resw 1
   327 00000002 ??                  <1>     .minutes    resb 1
   328 00000003 ??                  <1>     .hours      resb 1
   329 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   330 00000005 ??                  <1>     .seconds    resb 1
   331                              <1> endstruc
   332                              <1> 
   333                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   334                              <1> ;for a space of 64Gb
   335                              <1> dosAPTsize  equ 60*4096
     8                                  %include "./Source/Debug/debSym.inc"
     9                              <1> ;This file will include the debuging symbols
    10                              <1> 
    11                              <1> %define true 1
    12                              <1> %define false 0
    13                              <1> 
    14                              <1> ;Switch the DEBUG to false in production!
    15                              <1> %define DEBUG false
    16                              <1> %define DPBINFO false
    17                              <1> %define REGS true
    18                              <1> %define ENDSTATUS true
    19                              <1> %define ALLOCTEST true
    20                              <1> 
    21                              <1> 
    22                              <1> ;Use this space as the debug stack
    23                              <1> %define debStackTop 80000h
     9                                  %include "./Source/Include/dosError.inc"
    10                              <1> ;DOS Error codes
    11                              <1> 
    12                              <1> ;Extended Error Codes
    13                              <1> errInvFnc   equ 1   ;Invalid function number
    14                              <1> errFnf      equ 2   ;File not found
    15                              <1> errPnf      equ 3   ;Path not found
    16                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    17                              <1> errAccDen   equ 5   ;Access denied (to resource)
    18                              <1> errBadHdl   equ 6   ;Invalid handle
    19                              <1> errMCBbad   equ 7   ;MCB's destroyed
    20                              <1> errNoMem    equ 8   ;Insufficient memory
    21                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    22                              <1> errBadEnv   equ 10  ;Invalid environment
    23                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    24                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    25                              <1> errInvDat   equ 13  ;Invalid data
    26                              <1> ;           equ 14  ;Reserved
    27                              <1> errBadDrv   equ 15  ;Invalid drive specified
    28                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    29                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    30                              <1> errNoFil    equ 18  ;No more files
    31                              <1> ;The following are Driver error codes + 19
    32                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    33                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    34                              <1> errUnkUnt   equ 20  ;Unknown Unit
    35                              <1> errDrvNR    equ 21  ;Drive not ready
    36                              <1> errUnkCmd   equ 22  ;Unknown Command
    37                              <1> errCRCerr   equ 23  ;Data (CRC) error
    38                              <1> errBadRLn   equ 24  ;Bad request structure length
    39                              <1> errSekErr   equ 25  ;Seek error
    40                              <1> errUnkMed   equ 26  ;Unknown media type
    41                              <1> errSecNF    equ 27  ;Sector not Found
    42                              <1> errNoPap    equ 28  ;Printer out of paper
    43                              <1> errWF       equ 29  ;Write fault
    44                              <1> errRF       equ 30  ;Read fault
    45                              <1> errGF       equ 31  ;General fault
    46                              <1> ;Number 32-33 reserved
    47                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    48                              <1> errNoFCB    equ 35  ;FCB unavailable
    49                              <1> ;Numbers 36-82 reserved
    50                              <1> errFI24     equ 83  ;Fail on INT 24h
    51                              <1> ;Numbers 84-88 reserved
    52                              <1> ;-----------------------------------------------------------------------------
    53                              <1> ;Error Loci
    54                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    55                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    56                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    57                              <1> eLocSer     equ 4   ;Serial Device error
    58                              <1> eLocMem     equ 5   ;Related to RAM
    59                              <1> ;-----------------------------------------------------------------------------
    60                              <1> ;Error Actions
    61                              <1> eActRet     equ 1   ;Retry
    62                              <1> eActDRet    equ 2   ;Delay then retry
    63                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    64                              <1> eActAbt     equ 4   ;Abort with cleanup
    65                              <1> eActKil     equ 5   ;Abort without cleanup
    66                              <1> eActIgn     equ 6   ;Ignore error
    67                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    68                              <1> ;-----------------------------------------------------------------------------
    69                              <1> ;Error classes
    70                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    71                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    72                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    73                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    74                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    75                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    76                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requestss etc...
    77                              <1> eClsNotFnd  equ 8   ;Resource not found
    78                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    79                              <1> eClsLocked  equ 10  ;Resource Locked
    80                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    81                              <1> eClsClash   equ 12  ;Resource already exists!
    82                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  Segment .text align=1   ;Init code
    11                                  %include "./Source/Sysinit/sysInit.asm"
    12                              <1> ; We arrive here with the following values in the registers.
    13                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    14                              <1> ; dx  = Int 33h boot device number
    15                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    16                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    17 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    18 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    18 0000000B 909090909090909090- <1>
    18 00000014 909090909090909090- <1>
    18 0000001D 909090909090909090- <1>
    18 00000026 909090909090909090- <1>
    18 0000002F 909090909090909090- <1>
    18 00000038 909090909090909090- <1>
    18 00000041 909090909090909090- <1>
    18 0000004A 909090909090909090- <1>
    18 00000053 909090909090909090- <1>
    18 0000005C 909090909090909090- <1>
    18 00000065 909090909090909090- <1>
    18 0000006E 909090909090909090- <1>
    18 00000077 909090909090909090- <1>
    18 00000080 909090909090909090- <1>
    18 00000089 909090909090909090- <1>
    18 00000092 909090909090909090- <1>
    18 0000009B 909090909090909090- <1>
    18 000000A4 909090909090909090- <1>
    18 000000AD 909090909090909090- <1>
    18 000000B6 909090909090909090- <1>
    18 000000BF 909090909090909090- <1>
    18 000000C8 909090909090909090- <1>
    18 000000D1 909090909090909090- <1>
    18 000000DA 909090909090909090- <1>
    18 000000E3 909090909090909090- <1>
    18 000000EC 909090909090909090- <1>
    18 000000F5 909090909090909090- <1>
    18 000000FE 9090                <1>
    19                              <1> ;First move the alignment of the DOSSEG to 4Kb
    20 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    21 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    22 00000106 0F32                <1>     rdmsr
    23 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    24 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    25 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    26 00000110 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    27 00000113 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    28 0000011A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    29 00000121 89F8                <1>     mov eax, edi
    30 00000123 4889FA              <1>     mov rdx, rdi
    31 00000126 48C1EA20            <1>     shr rdx, 20h
    32 0000012A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    33 0000012C 5A                  <1>     pop rdx
    34                              <1> ;------------------------------------------------;
    35                              <1> ;              Connect Debugger                  ;
    36                              <1> ;------------------------------------------------;
    37                              <1> %if DEBUG
    38                              <1> ;Only connect if in debug mode
    39                              <1>     mov eax, 0C501h ;Connect debugger
    40                              <1>     int 35h
    41                              <1> %endif
    42                              <1> ;------------------------------------------------;
    43                              <1> ;           Sanitise the data area               ;
    44                              <1> ;------------------------------------------------;
    45 0000012D B9[19D50300]        <1>     mov ecx, dSegLen
    46 00000132 30C0                <1>     xor al, al
    47 00000134 57                  <1>     push rdi    ;Temp save rdi on the stack
    48 00000135 F3AA                <1>     rep stosb
    49 00000137 5F                  <1>     pop rdi
    50                              <1> ;------------------------------------------------;
    51                              <1> ;          Start saving Basic DOS data           ;
    52                              <1> ;------------------------------------------------;
    53 00000138 64881425[10C00300]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    54                              <1> ;Copy DOS to its final resting place
    55 00000140 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    55 00000145 [00C00300]          <1>
    56 00000149 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    56 0000014E [08C00300]          <1>
    57 00000152 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    58 00000155 4881C7[19D50300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    59 0000015C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    60 00000163 B900100000          <1>     mov ecx, 1000h
    61 00000168 F348A5              <1>     rep movsq
    62                              <1> 
    63 0000016B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    64 0000016D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    65 00000171 664489C0            <1>     mov ax, r8w
    66 00000175 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
    67 0000017D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    68 00000185 64C60425[B2C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    68 0000018D 05                  <1>
    69 0000018E 64C60425[13C00300]- <1>     mov byte fs:[numLogDrv], 0     ;Number of logical drives
    69 00000196 00                  <1>
    70 00000197 6466C70425-         <1>     mov word fs:[numFiles], 5      ;Default 8 files, at start 5
    70 0000019C [B4C00300]0500      <1>
    71 000001A2 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
    71 000001A7 [B6C00300]1400      <1>
    72 000001AD 64C60425[B3C00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
    72 000001B5 01                  <1>
    73                              <1>     ;If no detected Int 33h devices, halt 
    74 000001B6 49C1E810            <1>     shr r8, 2*8
    75 000001BA 4584C0              <1>     test r8b, r8b
    76 000001BD 0F84DA0A0000        <1>     jz errorInit
    77                              <1> ;------------------------------------------------;
    78                              <1> ;          Add additional page tables            ;
    79                              <1> ;------------------------------------------------;
    80                              <1> ;This will allow for up to 64Gb of addressible space
    81 000001C3 4889EF              <1>     mov rdi, rbp
    82                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    83 000001C6 B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
    84 000001CB 57                  <1>     push rdi
    85 000001CC 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    85 000001D5 00                  <1>
    86                              <1> pdtLoop:
    87 000001D6 48AB                <1>     stosq
    88 000001D8 480500002000        <1>     add rax, 200000h
    89 000001DE FFC9                <1>     dec ecx
    90 000001E0 75F4                <1>     jnz pdtLoop
    91 000001E2 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
    92                              <1> ;Now we add every 4kb page to the page directory pointer table
    93                              <1> ;15 4kb pages to consider
    94 000001E3 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
    95 000001E6 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
    96 000001E9 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
    97 000001F0 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
    98 000001F7 B93C000000          <1>     mov ecx, 60
    99 000001FC 480D03000000        <1>     or rax, 3h      ;present and r/w
   100                              <1> pdptLoop:
   101 00000202 48AB                <1>     stosq
   102 00000204 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   103 0000020A FFC9                <1>     dec ecx
   104 0000020C 75F4                <1>     jnz pdptLoop
   105 0000020E 0F20DF              <1>     mov rdi, cr3
   106 00000211 0F22DF              <1>     mov cr3, rdi
   107                              <1> 
   108                              <1> ;------------------------------------------------;
   109                              <1> ;                   MCB inits                    ;
   110                              <1> ;------------------------------------------------;
   111                              <1> mcbInit:
   112 00000214 B820E80000          <1>     mov eax, 0E820h
   113 00000219 CD35                <1>     int 35h
   114                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   115 0000021B E808010000          <1>     call .mcbFindAddress
   116 00000220 7349                <1>     jnc .mcbi1  ;If found, proceed
   117                              <1>     ;Here, we try use E801h
   118 00000222 B801E80000          <1>     mov eax, 0E801h
   119 00000227 CD35                <1>     int 35h
   120 00000229 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   121 0000022C 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   122 0000022F 85C0                <1>     test eax, eax
   123 00000231 741B                <1>     jz .worst
   124 00000233 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   125 00000236 C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   126 00000239 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax
   127 00000241 64891C25[18C00300]  <1>     mov dword fs:[hiProtMem], ebx
   128 00000249 E927010000          <1>     jmp mcbBuild
   129                              <1> .worst:
   130                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   131 0000024E B800002000          <1>     mov eax, 200000h
   132 00000253 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   132 00000258 [08C00300]          <1>
   133 0000025C 29D8                <1>     sub eax, ebx
   134 0000025E 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   135 00000266 E90A010000          <1>     jmp mcbBuild 
   136                              <1> .mcbi1:
   137 0000026B 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   138 0000026E 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   138 00000277 00                  <1>
   139 00000278 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   140 0000027C 0F85C6000000        <1>     jne .mcbFail
   141 00000282 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   142                              <1>     ;PCI hole always exists so this value will always be a dword
   143 00000286 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax
   144 0000028E 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   145 00000291 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   146 00000294 4881FB00000001      <1>     cmp rbx, 1000000h  
   147 0000029B 773C                <1>     ja .skipISA
   148                              <1> ;Here we deal with ISA hole issues
   149 0000029D B820E80000          <1>     mov eax, 0E820h
   150 000002A2 CD35                <1>     int 35h
   151 000002A4 48B800000001000000- <1>     mov rax, 1000000h
   151 000002AD 00                  <1>
   152 000002AE E875000000          <1>     call .mcbFindAddress
   153 000002B3 0F82BC000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   154 000002B9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   154 000002C2 00                  <1>
   155 000002C3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   156 000002C7 0F85A8000000        <1>     jne mcbBuild  
   157 000002CD 488B5808            <1>     mov rbx, qword [rax + 8]
   158 000002D1 64891C25[18C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   159                              <1> .skipISA:
   160 000002D9 B820E80000          <1>     mov eax, 0E820h
   161 000002DE CD35                <1>     int 35h
   162 000002E0 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   162 000002E9 00                  <1>
   163 000002EA E839000000          <1>     call .mcbFindAddress
   164 000002EF 0F8280000000        <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   165 000002F5 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   165 000002FE 00                  <1>
   166 000002FF 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   167 00000303 7570                <1>     jne mcbBuild   
   168 00000305 488B5808            <1>     mov rbx, qword [rax + 8]
   169                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   170 00000309 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   170 00000312 00                  <1>
   171 00000313 4839CB              <1>     cmp rbx, rcx
   172 00000316 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   173 0000031A 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   173 0000031F [1CC00300]          <1>
   174 00000323 E94D000000          <1>     jmp mcbBuild
   175                              <1> .mcbFindAddress:
   176                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   177                              <1> ;Entry: rax = Address of arena to search for
   178                              <1> ;       rsi = Pointer to memory map
   179                              <1> ;       ecx = Number of 24 byte entries
   180                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   181                              <1> ;       CF=CY : value in rax not found
   182 00000328 56                  <1>     push rsi
   183 00000329 51                  <1>     push rcx
   184 0000032A 50                  <1>     push rax
   185                              <1> .mfa0:
   186 0000032B 483B06              <1>     cmp rax, qword [rsi]
   187 0000032E 7410                <1>     je .mcbAddressFound
   188 00000330 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   189 00000337 FFC9                <1>     dec ecx
   190 00000339 79F0                <1>     jns .mfa0
   191                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   192 0000033B 58                  <1>     pop rax
   193 0000033C 59                  <1>     pop rcx
   194 0000033D 5E                  <1>     pop rsi
   195 0000033E F9                  <1>     stc
   196 0000033F C3                  <1>     ret
   197                              <1> .mcbAddressFound:
   198 00000340 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   199 00000343 59                  <1>     pop rcx ;Pop old rax value off
   200 00000344 59                  <1>     pop rcx
   201 00000345 5E                  <1>     pop rsi
   202 00000346 F8                  <1>     clc
   203 00000347 C3                  <1>     ret
   204                              <1> .mcbFail:
   205 00000348 488D2D0C000000      <1>     lea rbp, .mcbFailmsg
   206 0000034F B804130000          <1>     mov eax, 1304h
   207 00000354 CD30                <1>     int 30h
   208 00000356 E942090000          <1>     jmp errorInit
   209 0000035B 4D656D6F727920416C- <1> .mcbFailmsg: db "Memory Allocation Error",0Ah,0Dh,0
   209 00000364 6C6F636174696F6E20- <1>
   209 0000036D 4572726F720A0D00    <1>
   210                              <1> mcbBuild:
   211                              <1> ;Actually build the MCB chain here
   212                              <1> ;Start by computing the difference between userbase and DOS area
   213                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   214 00000375 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   214 0000037A [08C00300]          <1>
   215 0000037E 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   216 00000385 56                  <1>     push rsi    ;Save ptr
   217 00000386 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   218 0000038D 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   219 00000390 64293425[14C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   220 00000398 5B                  <1>     pop rbx
   221 00000399 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   222 0000039C 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   223 000003A4 648B3425[14C00300]  <1>     mov esi, dword fs:[loProtMem]
   224 000003AC C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   225 000003AF 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   226 000003B2 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   226 000003B7 [78C00300]          <1>
   227                              <1> 
   228                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   229 000003BB 64813C25[18C00300]- <1>     cmp dword fs:[hiProtMem], 0
   229 000003C3 00000000            <1>
   230 000003C7 746E                <1>     jz .skipISA
   231                              <1>     ;Here if an ISA hole exists, place a MCB around it
   232 000003C9 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   233                              <1>     ;Remove one MCB worth of space from alloc
   234 000003D0 31C9                <1>     xor ecx, ecx
   235 000003D2 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   236 000003D5 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   237 000003DB C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   238 000003DE C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   239 000003E1 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   240 000003E4 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   241 000003E7 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   242 000003EF 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   242 000003F8 00                  <1>
   243 000003F9 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   244 000003FC 480510000000        <1>     add rax, mcb_size
   245 00000402 4829C1              <1>     sub rcx, rax    ;Take their difference
   246 00000405 C1E904              <1>     shr ecx, 4
   247 00000408 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   248 0000040B C1E104              <1>     shl ecx, 4  ;Get bytes again
   249 0000040E 4881C310000000      <1>     add rbx, mcb_size
   250 00000415 4801CB              <1>     add rbx, rcx
   251                              <1>     ;RBX should now be at 16Mb
   252 00000418 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   253 0000041B 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   254 00000423 648B0C25[18C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   255 0000042B C1E904              <1>     shr ecx, 4  ;Get paragraphs
   256 0000042E 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   257 00000434 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   258                              <1> .skipISA:
   259                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   260                              <1>     ;rbx points to a block with "Z" marker
   261 00000437 64813C25[1CC00300]- <1>     cmp dword fs:[longMem], 0
   261 0000043F 00000000            <1>
   262 00000443 7470                <1>     jz .exit
   263                              <1>     ;Add PCI hole MCB
   264 00000445 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   265                              <1>     ;Remove one MCB worth of space from alloc
   266 0000044C 31C9                <1>     xor ecx, ecx
   267 0000044E 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   268 00000451 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   269 00000457 C1E104              <1>     shl ecx, 4  ;Get bytes
   270 0000045A C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   271 0000045D 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   272 00000460 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   273 00000463 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   274 0000046B 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   274 00000474 00                  <1>
   275 00000475 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   276 00000478 480510000000        <1>     add rax, mcb_size
   277 0000047E 4829C1              <1>     sub rcx, rax    ;Take their difference
   278 00000481 C1E904              <1>     shr ecx, 4
   279 00000484 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   280 00000487 C1E104              <1>     shl ecx, 4  ;Get bytes again
   281 0000048A 4881C310000000      <1>     add rbx, mcb_size
   282 00000491 4801CB              <1>     add rbx, rcx
   283                              <1>     ;RBX should now be at 4Gb
   284 00000494 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   285 00000497 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   286 0000049F 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   286 000004A4 [1CC00300]          <1>
   287 000004A8 48C1E904            <1>     shr rcx, 4
   288 000004AC 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   289 000004B2 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   290                              <1> .exit:
   291                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   292 000004B5 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   293                              <1> ;------------------------------------------------;
   294                              <1> ;          Kernel inits and adjustments          ;
   295                              <1> ;------------------------------------------------;
   296                              <1> ;Adjust Interrupt Entries Int 40h-49h
   297                              <1> adjInts:
   298 000004BC B340                <1>     mov bl, 40h
   299 000004BE B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   300 000004C3 CD35                <1>     int 35h
   301 000004C5 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   302 000004CA 488D3D30080000      <1>     lea rdi, intData
   303 000004D1 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   304                              <1> .ai0:
   305 000004D3 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   306 000004D8 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   307 000004DB 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   308                              <1> .ai1:
   309 000004DE CD35                <1>     int 35h
   310 000004E0 4881C708000000      <1>     add rdi, 8
   311 000004E7 FFC1                <1>     inc ecx
   312 000004E9 81F950000000        <1>     cmp ecx, 50h
   313 000004EF 75E2                <1>     jne .ai0
   314                              <1> 
   315                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   316                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   317                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   318                              <1>     %if DEBUG
   319                              <1> debugPopUpMsg:
   320                              <1>     push rbx
   321                              <1>     push rbp
   322                              <1>     push rcx
   323                              <1>     push rdx
   324                              <1>     mov ecx, 53 ;A large number of lines
   325                              <1>     xor edx, edx    ;COM 1
   326                              <1> .cls:
   327                              <1>     mov eax, 010Ah ;Transmit Line feed
   328                              <1>     int 34h
   329                              <1>     dec ecx
   330                              <1>     jnz .cls
   331                              <1>     lea rbx, qword [debPrintNullString + rbp]
   332                              <1>     lea rbp, .msg
   333                              <1>     call rbx
   334                              <1>     jmp short .exit
   335                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   336                              <1> .exit:
   337                              <1>     pop rdx
   338                              <1>     pop rcx
   339                              <1>     pop rbp
   340                              <1>     pop rbx
   341                              <1>     %endif
   342                              <1> 
   343                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   344 000004F1 488D15A5070000      <1>     lea rdx, errorInit ;Get segment start address
   345 000004F8 B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   346 000004FD CD41                <1>     int 41h
   347 000004FF 488D1597070000      <1>     lea rdx, errorInit ;Get segment start address
   348 00000506 B844250000          <1>     mov eax, 2544h
   349 0000050B CD41                <1>     int 41h
   350                              <1> ;------------------------------------------------;
   351                              <1> ;          Driver Adjustments and inits          ;
   352                              <1> ;------------------------------------------------;
   353                              <1> ;Modify the pointers in nData before putting them in the data area
   354 0000050D 48012D6D080000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   355 00000514 48012D70080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   356 0000051B 48012D71080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   357                              <1> ;Copy the Null driver to its location in Sysvars
   358 00000522 B922000000          <1>     mov ecx, drvHdr_size
   359 00000527 488D3553080000      <1>     lea rsi, qword [nData]
   360 0000052E 488DBD[C3C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   361 00000535 F3A4                <1>     rep movsb   
   362                              <1> 
   363                              <1> ;Adjust the addresses in the other driver headers 
   364 00000537 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   364 00000539 [AC1C000000000000]  <1>
   365 00000541 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   366 00000546 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   367                              <1> adjDrivers:
   368 0000054A E83B070000          <1>     call adjustDrvHdr
   369 0000054F E2F9                <1>     loop adjDrivers
   370                              <1> 
   371                              <1> ;Open NUL
   372 00000551 488D9D[24C00300]    <1>     lea rbx, qword [rbp + charReqHdr]
   373 00000558 C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
   374 0000055B C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
   375 0000055F FF95[CDC00300]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   376 00000565 FF95[D5C00300]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   377                              <1> ;Open CON
   378                              <1> conInit:    ;Rather than keeping this resident... do it here
   379                              <1> .ci0:
   380 0000056B B401                <1>     mov ah, 01      ;Get buffer status
   381 0000056D CD36                <1>     int 36h
   382 0000056F 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   383 00000571 30E4                <1>     xor ah, ah
   384 00000573 CD36                <1>     int 36h ;Read key to flush from buffer
   385 00000575 EBF4                <1>     jmp short .ci0
   386                              <1> .ci1:
   387 00000577 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   388 0000057C CD30                <1>     int 30h
   389 0000057E B402                <1>     mov ah, 02h
   390 00000580 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   391 00000582 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   392 00000584 CD30                <1>     int 30h
   393 00000586 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   394 00000588 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   395 0000058D CD30                <1>     int 30h
   396                              <1> 
   397                              <1>     ;Save ptr to ConHdr in Sysvars
   398 0000058F 488D85[AC1C0000]    <1>     lea rax, qword [rbp + conHdr]
   399 00000596 6448890425-         <1>     mov qword fs:[conPtr], rax
   399 0000059B [98C00300]          <1>
   400                              <1> 
   401                              <1>     ;Save ptr to ClkHdr in Sysvars
   402 0000059F 488D85[121D0000]    <1>     lea rax, qword [rbp + clkHdr]
   403 000005A6 6448890425-         <1>     mov qword fs:[clockPtr], rax
   403 000005AB [90C00300]          <1>
   404                              <1> 
   405                              <1> ;------------------------------------------------;
   406                              <1> ;         Link DOS to temporary Buffer           ;
   407                              <1> ;------------------------------------------------;
   408                              <1> tempBufferInit:
   409 000005AF 488DBD[C8020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   410 000005B6 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   410 000005BB [A2C00300]          <1>
   411 000005BF 31C0                <1>     xor eax, eax
   412 000005C1 48FFC8              <1>     dec rax
   413 000005C4 48AB                <1>     stosq   ;.nextBufPTr, end of list
   414 000005C6 AA                  <1>     stosb   ;.driveNumber, Free entry
   415 000005C7 48FFC0              <1>     inc rax
   416 000005CA AA                  <1>     stosb   ;.bufferFlags, No flags
   417                              <1> ;------------------------------------------------;
   418                              <1> ;         Init msd driver, create DPB            ;
   419                              <1> ;------------------------------------------------;
   420                              <1> storageInits:
   421                              <1> ;First save dpb pointer in sysvars
   422 000005CB 488D9D[69010000]    <1>     lea rbx, qword [rbp + firstDPB]
   423 000005D2 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   423 000005D7 [80C00300]          <1>
   424                              <1> ;Open Mass Storage
   425                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   426                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   427                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   428                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   429                              <1>     ;mov al, byte fs:[numLogDrv]
   430                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   431                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   432                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   433                              <1>     ;Check if it returned OK first!
   434                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   435                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   436                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   437                              <1>     ;mov byte fs:[numLogDrv], al
   438                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   439                              <1> 
   440                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   441 000005DB E8C3070000          <1>     call diskInit
   442 000005E0 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   443 000005E3 648A0425[13C00300]  <1>     mov al, byte fs:[numLogDrv]
   444 000005EB 488D95[4A260000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   445 000005F2 30C9                <1>     xor cl, cl  ;Clear counter
   446 000005F4 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   446 000005F9 [80C00300]          <1>
   447                              <1> .si0:   
   448 000005FD 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   449 00000600 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   450 00000602 CD41                <1>     int 41h
   451                              <1> ;Add other data to DPB
   452 00000604 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   453 00000607 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   454 0000060A 50                  <1>     push rax
   455 0000060B 488D87[341D0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   456 00000612 4889451A            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   457 00000616 58                  <1>     pop rax
   458 00000617 FEC1                <1>     inc cl
   459 00000619 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   460 0000061B 7416                <1>     je .si1
   461 0000061D 50                  <1>     push rax
   462 0000061E 488D4534            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   463 00000622 48894524            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   464 00000626 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   465 00000629 58                  <1>     pop rax
   466 0000062A 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   467 00000631 EBCA                <1>     jmp short .si0
   468                              <1> .si1:
   469                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   470 00000633 48C74524FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   471 0000063B 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   472                              <1> ;------------------------------------------------;
   473                              <1> ;          Find largest sector size              ;
   474                              <1> ;------------------------------------------------;
   475                              <1> sectorSizeSearch:
   476                              <1> ;Done by reading BPB's for each drive
   477 0000063E 488D9D[4A260000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   478                              <1>     
   479                              <1>     ;Go thru each block individually
   480 00000645 31C0                <1>     xor eax, eax
   481 00000647 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   482                              <1> .findLargest:
   483 0000064A 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   484 0000064E 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   485 00000653 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   486 0000065A 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   487 0000065D 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   488 00000660 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   489 00000662 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   489 00000667 [A0C00300]          <1>
   490                              <1>     
   491                              <1> ;------------------------------------------------;
   492                              <1> ;                 Temp CDS inits                 ;
   493                              <1> ;------------------------------------------------;
   494                              <1> tempCDS:
   495                              <1> ;Build a temporary CDS for Drive A to use it for booting
   496 0000066B 488DBD[6D020000]    <1>     lea rdi, qword [rbp + initCDS]
   497 00000672 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   497 00000677 [AAC00300]          <1>
   498 0000067B B943000000          <1>     mov ecx, 67 ;Buffer length
   499 00000680 31C0                <1>     xor eax, eax
   500 00000682 4889FB              <1>     mov rbx, rdi    ;Save CDS pointer in rbx
   501 00000685 F3AA                <1>     rep stosb   ;Zero out the path string
   502 00000687 4889DF              <1>     mov rdi, rbx
   503 0000068A B041                <1>     mov al, "A"
   504 0000068C AA                  <1>     stosb
   505 0000068D B03A                <1>     mov al, ":"
   506 0000068F AA                  <1>     stosb
   507 00000690 B05C                <1>     mov al, "\"
   508 00000692 AA                  <1>     stosb
   509 00000693 4889DF              <1>     mov rdi, rbx
   510 00000696 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   511 0000069C 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   511 000006A1 [80C00300]          <1>
   512 000006A5 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   513 000006A9 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   514                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   515                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   516                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   517 000006AF 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax    ;eax was zeroed before
   518                              <1> ;------------------------------------------------;
   519                              <1> ;     Set up general PSP areas and DOS vars      ;
   520                              <1> ;------------------------------------------------;
   521                              <1>     ;Additional DOS Vars init
   522 000006B2 31C0                <1>     xor eax, eax
   523 000006B4 64880425[21C10300]  <1>     mov byte fs:[currentDrv], al ;Current Drive = Drive A
   524 000006BC 64880425[23C10300]  <1>     mov byte fs:[breakFlag], al  ;Break off
   525 000006C4 64880425[24C10300]  <1>     mov byte fs:[verifyFlag], al ;Write only
   526 000006CC 64880425[22C10300]  <1>     mov byte fs:[singleDrv], al  ;Only used on single drive systems
   527 000006D4 64880425[EEC00300]  <1>     mov byte fs:[critErrFlag], al   ;Not in critical error
   528 000006DC 64880425[EFC00300]  <1>     mov byte fs:[inDOS], al      ;Not in DOS
   529 000006E4 64C60425[F0C00300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   529 000006EC FF                  <1>
   530 000006ED 6466890425-         <1>     mov word fs:[errorLevel], ax   ;Last return code is 0, no error
   530 000006F2 [1EC10300]          <1>
   531 000006F6 64880425[20C10300]  <1>     mov byte fs:[allocStrat], al    ;First Fit
   532                              <1> 
   533                              <1>     ;SYSVARS PSP Init
   534 000006FE 488D1DFBF8FFFF      <1>     lea rbx, qword [tempPSP]
   535 00000705 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   535 0000070A [06C10300]          <1>
   536 0000070E 53                  <1>     push rbx
   537 0000070F 4881C380000000      <1>     add rbx, psp.dta
   538 00000716 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   538 0000071B [FEC00300]          <1>
   539 0000071F 5B                  <1>     pop rbx
   540 00000720 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   541 00000725 C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   542 0000072C 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   543 00000730 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   544 00000734 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   545 00000738 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   546 0000073C 48B800000001020000- <1>     mov rax, 0000000201000000h  ;Store default handles in JFT
   546 00000745 00                  <1>
   547 00000746 48AB                <1>     stosq   ;8 bytes
   548 00000748 31C0                <1>     xor eax, eax
   549 0000074A 48AB                <1>     stosq   ;16 bytes
   550 0000074C AB                  <1>     stosd   ;20 bytes
   551 0000074D 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   552 00000755 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   553 00000759 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   554 0000075D 4889DA              <1>     mov rdx, rbx
   555 00000760 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   556 00000765 CD41                <1>     int 41h
   557 00000767 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   558 0000076B B843350000          <1>     mov eax, 3543h
   559 00000770 CD41                <1>     int 41h
   560 00000772 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   561 00000776 B844350000          <1>     mov eax, 3544h
   562 0000077B CD41                <1>     int 41h
   563 0000077D 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   564                              <1> 
   565 00000781 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   566 00000786 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   567 0000078A F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   568                              <1> ;------------------------------------------------;
   569                              <1> ;          Default File Handle Creation          ;
   570                              <1> ;------------------------------------------------;
   571                              <1> defaultFileHandles:
   572                              <1> ;Fill in the default file table entries
   573 0000078C 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstSftHeader]
   574 00000793 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   575 0000079A 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   576 000007A0 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   576 000007A5 [88C00300]          <1>
   577                              <1> ;GOTO FIRST FILE 
   578 000007A9 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   579                              <1> ;Write CON
   580 000007B0 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   581 000007B5 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   582 000007BB C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   583 000007BF C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   584                              <1>     ;No EOF when reading from the device
   585 000007C3 64488B0425-         <1>     mov rax, qword fs:[conPtr]  ;Get pointer to CON device
   585 000007C8 [98C00300]          <1>
   586 000007CC 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   587                              <1>     ;Ignore disk related fields and Date/Time of open
   588 000007D0 488D7B2C            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   589 000007D4 488D3598000000      <1>     lea rsi, qword [.dfhCon]
   590                              <1>     ;11 chars in 8.3 name
   591 000007DB 48A5                <1>     movsq   ;8 chars
   592 000007DD 66A5                <1>     movsw   ;10 chars
   593 000007DF A4                  <1>     movsb   ;11 chars
   594 000007E0 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   594 000007E5 [06C10300]          <1>
   595 000007E9 48894337            <1>     mov qword [rbx + sft.qPSPOwner], rax
   596                              <1> ;GOTO NEXT ENTRY
   597 000007ED 4881C343000000      <1>     add rbx, sft_size   ;Goto next SFT
   598                              <1> ;Write AUX
   599 000007F4 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   600 000007F9 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   601 000007FF C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   602 00000803 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   603                              <1>     ;No EOF when reading from the device
   604 00000807 488B85[CE1C0000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   605 0000080E 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   606                              <1>     ;Ignore disk related fields and Date/Time of open
   607 00000812 488D7B2C            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   608 00000816 488D3561000000      <1>     lea rsi, qword [.dfhAux]
   609                              <1>     ;11 chars in 8.3 name
   610 0000081D 48A5                <1>     movsq   ;8 chars
   611 0000081F 66A5                <1>     movsw   ;10 chars
   612 00000821 A4                  <1>     movsb   ;11 chars
   613 00000822 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   613 00000827 [06C10300]          <1>
   614 0000082B 48894337            <1>     mov qword [rbx + sft.qPSPOwner], rax
   615                              <1> ;GOTO NEXT ENTRY
   616 0000082F 4881C343000000      <1>     add rbx, sft_size   ;Goto next SFT
   617                              <1> ;Write PRN
   618 00000836 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   619 0000083B 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   620 00000841 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   621 00000845 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   622                              <1>     ;Want EOF when reading from to the device
   623 00000849 488B85[F01C0000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   624 00000850 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   625                              <1>     ;Ignore disk related fields and Date/Time of open
   626 00000854 488D7B2C            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   627 00000858 488D352A000000      <1>     lea rsi, qword [.dfhPrn]
   628                              <1>     ;11 chars in 8.3 name
   629 0000085F 48A5                <1>     movsq   ;8 chars
   630 00000861 66A5                <1>     movsw   ;10 chars
   631 00000863 A4                  <1>     movsb   ;11 chars
   632 00000864 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   632 00000869 [06C10300]          <1>
   633 0000086D 48894337            <1>     mov qword [rbx + sft.qPSPOwner], rax
   634 00000871 EB21                <1>     jmp short .dfhExit
   635 00000873 434F4E202020202020- <1> .dfhCon db "CON        "
   635 0000087C 2020                <1>
   636 0000087E 415558202020202020- <1> .dfhAux db "AUX        "
   636 00000887 2020                <1>
   637 00000889 50524E202020202020- <1> .dfhPrn db "PRN        "
   637 00000892 2020                <1>
   638                              <1> .dfhExit:
   639                              <1> ;------------------------------------------------;
   640                              <1> ;               Load CONFIG.SYS                  ;
   641                              <1> ;------------------------------------------------;
   642                              <1> ;------------------------------------------------;
   643                              <1> ;              Process CONFIG.SYS                ;
   644                              <1> ;------------------------------------------------;
   645                              <1> ;------------------------------------------------;
   646                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   647                              <1> ;------------------------------------------------;
   648                              <1> ;------------------------------------------------;
   649                              <1> ;   Setup Final Data Areas With Overrides from   ;
   650                              <1> ;                  CONFIG.SYS                    ;
   651                              <1> ;------------------------------------------------;
   652                              <1> ;------------------------------------------------;
   653                              <1> ;           Load Command interpreter             ;
   654                              <1> ;------------------------------------------------;
   655 00000894 488D1513040000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   656 0000089B B409                <1>     mov ah, 09h
   657 0000089D CD41                <1>     int 41h
   658                              <1> ;Resize DOS allocation before loading COMMAND.COM
   659 0000089F 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   659 000008A4 [78C00300]          <1>
   660 000008A8 4981C010000000      <1>     add r8, mcb.program
   661 000008AF BBE8120000          <1>     mov ebx, dynamicDataAreaLength
   662 000008B4 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   663 000008B7 FFC3                <1>     inc ebx
   664 000008B9 B44A                <1>     mov ah, 4Ah
   665 000008BB CD41                <1>     int 41h
   666                              <1>     
   667                              <1>     %if DEBUG && ALLOCTEST
   668                              <1> ;Test Allocation, Growth and Deallocation
   669                              <1>     mov r15, qword fs:[currentPSP]
   670                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   671                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   672                              <1>     mov ah, 48h ;Allocate
   673                              <1>     int 41h
   674                              <1> 
   675                              <1>     mov r8, rax ;Move the pointer to r8
   676                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   677                              <1>     mov ah, 4Ah
   678                              <1>     int 41h
   679                              <1> 
   680                              <1>     mov ah, 49h ;Free r8
   681                              <1>     int 41h
   682                              <1>     mov qword fs:[currentPSP], r15
   683                              <1>     %endif
   684                              <1> 
   685                              <1>     %if ENDSTATUS
   686                              <1> debugFinal:
   687                              <1>     ;Print system state
   688 000008BD 55                  <1>     push rbp    ;Only rbp really matters here
   689 000008BE 4989E8              <1>     mov r8, rbp
   690                              <1> 
   691 000008C1 488D2DD0020000      <1>     lea rbp, .msg2
   692 000008C8 4D8D88[C2010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   693 000008CF 41FFD1              <1>     call r9
   694                              <1> 
   695 000008D2 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   696 000008D9 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   696 000008DE [08C00300]          <1>
   697                              <1> 
   698 000008E2 4D8D88[FD040000]    <1>     lea r9, qword [r8 + overlayQword]
   699 000008E9 41FFD1              <1>     call r9
   700                              <1> 
   701 000008EC 4881C31B000000      <1>     add rbx, 19+8
   702 000008F3 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   702 000008F8 [00C00300]          <1>
   703 000008FC 41FFD1              <1>     call r9
   704                              <1> 
   705 000008FF 4881C31B000000      <1>     add rbx, 19+8
   706 00000906 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   706 0000090B [78C00300]          <1>
   707 0000090F 41FFD1              <1>     call r9
   708                              <1> 
   709 00000912 4881C31C000000      <1>     add rbx, 20+8
   710 00000919 4D8D88[BA040000]    <1>     lea r9, qword [r8 + overlayDword]
   711 00000920 648B0425[14C00300]  <1>     mov eax, dword fs:[loProtMem]
   712 00000928 41FFD1              <1>     call r9
   713                              <1> 
   714 0000092B 4881C312000000      <1>     add rbx, 10+8
   715 00000932 648B0425[18C00300]  <1>     mov eax, dword fs:[hiProtMem]
   716 0000093A 41FFD1              <1>     call r9
   717                              <1> 
   718 0000093D 4881C312000000      <1>     add rbx, 10+8
   719 00000944 64488B0425-         <1>     mov rax, qword fs:[longMem]
   719 00000949 [1CC00300]          <1>
   720 0000094D 4D8D88[FD040000]    <1>     lea r9, qword [r8 + overlayQword]
   721 00000954 41FFD1              <1>     call r9
   722                              <1> 
   723 00000957 4881C31B000000      <1>     add rbx, 19+8
   724 0000095E 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   724 00000963 [80C00300]          <1>
   725 00000967 41FFD1              <1>     call r9
   726                              <1> 
   727 0000096A 4881C31B000000      <1>     add rbx, 19+8
   728 00000971 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   728 00000976 [88C00300]          <1>
   729 0000097A 41FFD1              <1>     call r9
   730                              <1> 
   731 0000097D 4881C31B000000      <1>     add rbx, 19+8
   732 00000984 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   732 00000989 [A2C00300]          <1>
   733 0000098D 41FFD1              <1>     call r9
   734                              <1> 
   735 00000990 4881C31B000000      <1>     add rbx, 19+8
   736 00000997 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   736 0000099C [AAC00300]          <1>
   737 000009A0 41FFD1              <1>     call r9
   738                              <1> 
   739 000009A3 4D8D88[48040000]    <1>     lea r9, qword [r8 + overlayByte]
   740                              <1> 
   741 000009AA 4881C32C000000      <1>     add rbx, 25+19
   742 000009B1 64480FB60425-       <1>     movzx rax, byte fs:[numLogDrv]
   742 000009B7 [13C00300]          <1>
   743 000009BB 41FFD1              <1>     call r9
   744                              <1> 
   745 000009BE 4881C31E000000      <1>     add rbx, 30
   746 000009C5 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   746 000009CB [12C00300]          <1>
   747 000009CF 41FFD1              <1>     call r9
   748                              <1> 
   749 000009D2 4881C31E000000      <1>     add rbx, 30
   750 000009D9 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   750 000009DF [11C00300]          <1>
   751 000009E3 41FFD1              <1>     call r9
   752                              <1> 
   753 000009E6 4881C310000000      <1>     add rbx, 16
   754 000009ED 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   754 000009F3 [10C00300]          <1>
   755 000009F7 0441                <1>     add al, "A"
   756 000009F9 8803                <1>     mov byte [rbx], al
   757                              <1> 
   758 000009FB 488D2D10000000      <1>     lea rbp, .msg
   759 00000A02 4D8D88[C2010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   760 00000A09 41FFD1              <1>     call r9
   761 00000A0C 5D                  <1>     pop rbp
   762 00000A0D E99E010000          <1>     jmp l1
   763 00000A12 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   763 00000A1B 206261736520464646- <1>
   763 00000A24 464646464646464646- <1>
   763 00000A2D 46464646680A0D      <1>
   764 00000A34 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   764 00000A3D 464646464646464646- <1>
   764 00000A46 464646464646680A0D  <1>
   765 00000A4F 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   765 00000A58 464646464646464646- <1>
   765 00000A61 46464646464668200A- <1>
   765 00000A6A 0D                  <1>
   766 00000A6B 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   766 00000A74 464646464646466820  <1>
   767 00000A7D 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   767 00000A86 464646464646466820  <1>
   768 00000A8F 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   768 00000A98 464646464646464646- <1>
   768 00000AA1 464646464646680A0D  <1>
   769 00000AAA 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   769 00000AB3 464646464646464646- <1>
   769 00000ABC 464646464646680A0D  <1>
   770 00000AC5 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   770 00000ACE 464646464646464646- <1>
   770 00000AD7 464646464646680A0D  <1>
   771 00000AE0 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   771 00000AE9 464646464646464646- <1>
   771 00000AF2 464646464646680A0D  <1>
   772 00000AFB 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   772 00000B04 464646464646464646- <1>
   772 00000B0D 464646464646680A0D  <1>
   773 00000B16 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   773 00000B1F 204C6F676963616C20- <1>
   773 00000B28 447269766573204646- <1>
   773 00000B31 680A0D              <1>
   774 00000B34 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   774 00000B3D 204669786564204472- <1>
   774 00000B46 697665732020204646- <1>
   774 00000B4F 680A0D              <1>
   775 00000B52 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   775 00000B5B 2052656D6F7661626C- <1>
   775 00000B64 652044727673204646- <1>
   775 00000B6D 680A0D              <1>
   776 00000B70 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   776 00000B79 65205A3A0A0D        <1>
   777 00000B7F 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   777 00000B88 4F4D4D414E442E434F- <1>
   777 00000B91 4D2E2E2E0A0D00      <1>
   778 00000B98 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   778 00000BA1 626F6F742073756D6D- <1>
   778 00000BAA 6172790A0D00        <1>
   779                              <1>     %endif
   780                              <1> l1:
   781 00000BB0 B401                <1>     mov ah, 01h  ;Write with echo
   782 00000BB2 CD41                <1>     int 41h
   783 00000BB4 3C00                <1>     cmp al, 0
   784 00000BB6 7402                <1>     je l2
   785 00000BB8 EBF6                <1>     jmp short l1
   786                              <1> l2:
   787 00000BBA B407                <1>     mov ah, 07h
   788 00000BBC CD41                <1>     int 41h
   789 00000BBE 3C42                <1>     cmp al, 42h
   790 00000BC0 75EE                <1>     jne l1
   791                              <1> l3:
   792 00000BC2 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   792 00000BC7 [67C20300]0000      <1>
   793 00000BCD 488D9D[24C00300]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   794 00000BD4 488D85[67C20300]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   795 00000BDB C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   796 00000BDE C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   797 00000BE2 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   798 00000BE8 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   799 00000BEC C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   800 00000BF3 FF95[1C1D0000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   801 00000BF9 FF95[241D0000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr] 
   802                              <1> 
   803 00000BFF B403                <1>     mov ah, 03h
   804 00000C01 30FF                <1>     xor bh, bh
   805 00000C03 CD30                <1>     int 30h
   806 00000C05 30D2                <1>     xor dl, dl  ;0 column
   807 00000C07 B402                <1>     mov ah, 02h
   808 00000C09 CD30                <1>     int 30h
   809                              <1> 
   810 00000C0B 488D9D[67C20300]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   811 00000C12 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   812 00000C16 E832000000          <1>     call .clkHexToBCD
   813 00000C1B B40E                <1>     mov ah, 0Eh
   814 00000C1D B03A                <1>     mov al, ":"
   815 00000C1F CD30                <1>     int 30h
   816 00000C21 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   817 00000C25 E823000000          <1>     call .clkHexToBCD
   818 00000C2A B40E                <1>     mov ah, 0Eh
   819 00000C2C B03A                <1>     mov al, ":"
   820 00000C2E CD30                <1>     int 30h
   821 00000C30 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   822 00000C34 E814000000          <1>     call .clkHexToBCD
   823 00000C39 B40E                <1>     mov ah, 0Eh
   824 00000C3B B02E                <1>     mov al, "."
   825 00000C3D CD30                <1>     int 30h
   826 00000C3F 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   827 00000C43 E805000000          <1>     call .clkHexToBCD
   828 00000C48 E963FFFFFF          <1>     jmp l1
   829                              <1> .clkHexToBCD:
   830                              <1> ;Converts a Hex byte into two BCD digits
   831                              <1> ;Takes input in each nybble of al
   832 00000C4D 53                  <1>     push rbx
   833 00000C4E 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   833 00000C57 00                  <1>
   834 00000C58 31D2                <1>     xor edx, edx
   835 00000C5A 48F7F3              <1>     div rbx
   836 00000C5D 80C230              <1>     add dl, '0'
   837 00000C60 80FA39              <1>     cmp dl, '9'
   838 00000C63 7603                <1>     jbe .chtb0
   839 00000C65 80C207              <1>     add dl, 'A'-'0'-10
   840                              <1> .chtb0:
   841 00000C68 88D1                <1>     mov cl, dl    ;Save remainder byte
   842 00000C6A 31D2                <1>     xor edx, edx
   843 00000C6C 48F7F3              <1>     div rbx
   844 00000C6F 80C230              <1>     add dl, '0'
   845 00000C72 80FA39              <1>     cmp dl, '9'
   846 00000C75 7603                <1>     jbe .chtb1
   847 00000C77 80C207              <1>     add dl, 'A'-'0'-10
   848                              <1> .chtb1:
   849 00000C7A 88D5                <1>     mov ch, dl    ;Save remainder byte
   850                              <1> 
   851 00000C7C 88E8                <1>     mov al, ch    ;Get most sig digit into al
   852 00000C7E B40E                <1>     mov ah, 0Eh
   853 00000C80 CD30                <1>     int 30h
   854 00000C82 88C8                <1>     mov al, cl    ;Get least sig digit into al
   855 00000C84 B40E                <1>     mov ah, 0Eh
   856 00000C86 CD30                <1>     int 30h
   857 00000C88 5B                  <1>     pop rbx
   858 00000C89 C3                  <1>     ret
   859                              <1> ;--------------------------------
   860                              <1> ;       PROCS FOR SYSINIT       :
   861                              <1> ;--------------------------------
   862                              <1> adjustDrvHdr:
   863                              <1> ;Input: rsi = Effective address of driver in DOS segment
   864                              <1> ;       rbp = Ptr to the start of the DOS segment
   865                              <1> ;Output: rsi = EA of next header in DOS segment
   866 00000C8A 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   867 00000C8D 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   868 00000C91 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   869 00000C95 4881C622000000      <1>     add rsi, drvHdr_size
   870 00000C9C C3                  <1>     ret
   871                              <1> errorInit:
   872                              <1> ;If a critical error occurs during sysinit, fail through here
   873                              <1> ;Int 42h, 43h and 44h point here during sysinit
   874 00000C9D 488D2D20000000      <1>     lea rbp, hltmsg
   875 00000CA4 B804130000          <1>     mov eax, 1304h
   876 00000CA9 CD30                <1>     int 30h
   877                              <1>     ;cli ;Clear interrupts
   878                              <1>     ;mov al, -1
   879                              <1>     ;mov dx, 0A1h    ;PIC2 data
   880                              <1>     ;out dx, al      ;Mask all lines
   881                              <1>     ;mov dx, 21h     ;PIC1 data
   882                              <1>     ;out dx, al      ;Mask all lines
   883                              <1> .ei0:
   884 00000CAB F4                  <1>     hlt
   885 00000CAC EBFD                <1>     jmp short .ei0
   886                              <1> ;--------------------------------
   887                              <1> ;       DATA FOR SYSINIT        :
   888                              <1> ;--------------------------------
   889 00000CAE 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   889 00000CB7 5343502F444F532E2E- <1>
   889 00000CC0 2E0A0D24            <1>
   890 00000CC4 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   890 00000CCD 7469616C6973696E67- <1>
   890 00000CD6 20534350444F532E53- <1>
   890 00000CDF 59532E205379737465- <1>
   890 00000CE8 6D2068616C74696E67- <1>
   890 00000CF1 2E2E2E00            <1>
   891 00000CF5 434F4E00            <1> conName db "CON",0
   892 00000CF9 41555800            <1> auxName db "AUX",0
   893 00000CFD 50524E00            <1> prnName db "PRN",0
   894                              <1> intData:
   895 00000D01 [3811000000000000]  <1>     dq terminateProcess ;Int 40h
   896 00000D09 [A815000000000000]  <1>     dq functionDispatch ;Int 41h
   897 00000D11 [9D0C000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   898 00000D19 [D616000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
   899 00000D21 [9D0C000000000000]  <1>     dq errorInit        ;Int 44h, If critical error in sysinit, halt system
   900 00000D29 [9411000000000000]  <1>     dq absDiskRead      ;Int 45h
   901 00000D31 [8611000000000000]  <1>     dq absDiskWrite     ;Int 46h
   902 00000D39 [3A11000000000000]  <1>     dq terminateRes     ;Int 47h
   903 00000D41 [D616000000000000]  <1>     dq defaultIretq     ;Int 48h
   904 00000D49 [931F000000000000]  <1>     dq fastOutput       ;Int 49h
   905 00000D51 [D616000000000000]  <1>     dq defaultIretq     ;Int 4Ah
   906 00000D59 [D616000000000000]  <1>     dq defaultIretq     ;Int 4Bh
   907 00000D61 [D616000000000000]  <1>     dq defaultIretq     ;Int 4Ch
   908 00000D69 [D616000000000000]  <1>     dq defaultIretq     ;Int 4Dh
   909 00000D71 [D616000000000000]  <1>     dq defaultIretq     ;Int 4Eh
   910 00000D79 [171A000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
   911                              <1> nData:
   912 00000D81 [AC1C000000000000]  <1>     dq conHdr
   913 00000D89 0480                <1>     dw 08004h
   914 00000D8B [541E000000000000]  <1>     dq nulStrat
   915 00000D93 [5A1E000000000000]  <1>     dq nulIntr
   916 00000D9B 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   917                              <1> 
   918                              <1> diskInit:
   919                              <1>     ;We create a function to deal with BPB parsing etc
   920                              <1>     ;Start with the first primary partition on each hard disk (until max)
   921                              <1>     ;   They dont have to be bootable
   922                              <1>     ;Then go back and look for other partitions partitions. 
   923                              <1>     ;   Add each other primary or logical ptn (until max)
   924                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   925                              <1>     ;Use r8 as device counter
   926 00000DA3 488DBD[72260000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
   927 00000DAA 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
   927 00000DB2 00                  <1>
   928 00000DB3 0F84C6000000        <1>     jz .remInit ;No? Go to removables
   929 00000DB9 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   929 00000DC2 00                  <1>
   930 00000DC3 B280                <1>     mov dl, 80h ;Start with HDD 0
   931                              <1> .primary:
   932 00000DC5 64803C25[13C00300]- <1>     cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
   932 00000DCD 03                  <1>
   933 00000DCE 0F84AB000000        <1>     je .remInit
   934 00000DD4 31C9                <1>     xor ecx, ecx    ;Sector 0
   935 00000DD6 E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   936 00000DDB 0F8289000000        <1>     jc .primaryEpilog
   937                              <1>     ;Here, check MBR or BPB
   938 00000DE1 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   939 00000DEA 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   940                              <1>     ;Now check if BPB or MBR
   941 00000DEC 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   942 00000DEE 8A6302              <1>     mov ah, byte [rbx + 2]
   943 00000DF1 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   944 00000DF5 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   945                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   946                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   947 00000DF7 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   948 00000DFE B104                <1>     mov cl, 4
   949                              <1> .checkPrimary:
   950 00000E00 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   951 00000E03 3C01                <1>     cmp al, 01
   952 00000E05 7421                <1>     je .primaryFound
   953 00000E07 3C04                <1>     cmp al, 04
   954 00000E09 741D                <1>     je .primaryFound
   955 00000E0B 3C06                <1>     cmp al, 06
   956 00000E0D 7419                <1>     je .primaryFound
   957 00000E0F 3C0B                <1>     cmp al, 0Bh
   958 00000E11 7415                <1>     je .primaryFound
   959 00000E13 3C0C                <1>     cmp al, 0Ch
   960 00000E15 7411                <1>     je .primaryFound
   961 00000E17 3C0E                <1>     cmp al, 0Eh
   962 00000E19 740D                <1>     je .primaryFound
   963 00000E1B 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   964 00000E22 FEC9                <1>     dec cl
   965 00000E24 7444                <1>     jz .primaryEpilog
   966 00000E26 EBD8                <1>     jmp short .checkPrimary
   967                              <1> .primaryFound:
   968                              <1>     ;Copy the first sector of this partition into memory
   969 00000E28 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   970 00000E2B E8E9000000          <1>     call .initReadSector
   971 00000E30 7238                <1>     jc .primaryEpilog
   972                              <1>     ;Now verify this is a BPB
   973 00000E32 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   974 00000E34 8A6302              <1>     mov ah, byte [rbx + 2]
   975 00000E37 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   976 00000E3B 752D                <1>     jne .primaryEpilog   ;If not, skip
   977                              <1>     ;Now copy data to internal tables
   978 00000E3D 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   979 00000E40 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   980 00000E45 57                  <1>     push rdi
   981 00000E46 F348A5              <1>     rep movsq   ;Copy the BPB
   982 00000E49 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
   983                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   984 00000E4A 4A8D9C05[40260000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
   985                              <1>     ;Add device count to rbx to point to correct entry
   986 00000E52 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   987 00000E54 4A8D9CC5[4A260000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
   988 00000E5C 488933              <1>     mov qword [rbx], rsi
   989 00000E5F 49FFC0              <1>     inc r8  ;Goto next logical drive
   990 00000E62 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have
   991                              <1> .primaryEpilog:
   992 00000E6A FEC2                <1>     inc dl  ;Goto next BIOS drive
   993 00000E6C 88D6                <1>     mov dh, dl
   994 00000E6E 80E67F              <1>     and dh, 7Fh ;Clear bit 7
   995 00000E71 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
   996 00000E79 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
   997                              <1> .extended:
   998                              <1> ;We have gone through all the devices once
   999                              <1>     ;cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
  1000                              <1>     ;je .remInit ;If yes, get removable devices
  1001                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1002                              <1>     ;xor ecx, ecx    ;Get MBR back
  1003                              <1>     ;call .initReadSector
  1004                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1005                              <1> .remInit:
  1006                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1007 00000E7F 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1008 00000E82 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1009 00000E84 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1010                              <1>     ;rdi points to the space for the subsequent bpb's
  1011                              <1> .removables:
  1012 00000E87 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1013 00000E89 E88B000000          <1>     call .initReadSector
  1014 00000E8E 7238                <1>     jc .removableEpilogue   ;Goto next device
  1015                              <1>     ;Now verify this is a BPB
  1016 00000E90 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1017 00000E92 8A6302              <1>     mov ah, byte [rbx + 2]
  1018 00000E95 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1019 00000E99 752D                <1>     jne .removableEpilogue   ;If not, skip
  1020                              <1>     ;Now copy data to internal tables
  1021 00000E9B 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1022 00000E9E B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1023 00000EA3 57                  <1>     push rdi
  1024 00000EA4 F348A5              <1>     rep movsq   ;Copy the BPB
  1025 00000EA7 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1026                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1027 00000EA8 4A8D9C05[40260000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1028                              <1>     ;Add device count to rbx to point to correct entry
  1029 00000EB0 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1030 00000EB2 4A8D9CC5[4A260000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1031 00000EBA 488933              <1>     mov qword [rbx], rsi
  1032 00000EBD 49FFC0              <1>     inc r8  ;Goto next logical drive
  1033 00000EC0 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have    
  1034                              <1> .removableEpilogue:
  1035 00000EC8 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1036 00000ECA 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1037 00000ED2 7412                <1>     je .end
  1038 00000ED4 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1039 00000EDB 7403                <1>     je .re0
  1040 00000EDD 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1041                              <1> .re0:
  1042 00000EE0 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1043 00000EE4 72A1                <1>     jb .removables
  1044                              <1> .end:
  1045 00000EE6 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1045 00000EEE 01                  <1>
  1046 00000EEF 7401                <1>     je .singleRemDev
  1047 00000EF1 C3                  <1>     ret
  1048                              <1> .singleRemDev:
  1049                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1050 00000EF2 488D9D[40260000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1051 00000EF9 8A95[40260000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1052 00000EFF 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1053 00000F02 488D9D[4A260000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1054 00000F09 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1055 00000F0C 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1056 00000F10 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Gotta register the phantom drive!
  1057 00000F18 C3                  <1>     ret
  1058                              <1> .initReadSector:
  1059                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1060 00000F19 B482                <1>     mov ah, 82h ;Read
  1061 00000F1B B001                <1>     mov al, 1   ;One sector
  1062 00000F1D 488D9D[E8020000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1063 00000F24 CD33                <1>     int 33h
  1064 00000F26 C3                  <1>     ret
    12                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    13                                  %include "./Source/BSS/dosSeg.asm"
    14                              <1> ;This file contains the main DOS data segment
    15                              <1> dosAPT: ;Additional Page tables
    16 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    17                              <1> dosDataArea:
    18 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    19 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    20 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    21 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    22 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    23 0003C013 ??                  <1>     numLogDrv   resb 1    ;Number of logical drives in system x
    24 0003C014 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    25 0003C018 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    26 0003C01C ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    27 0003C024 <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    28 0003C04E <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    29                              <1>     ;The device driver header with space for the largest possible packet
    30 0003C078 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    31                              <1> sysVarsPtr:
    32 0003C080 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    33 0003C088 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    34 0003C090 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    35                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    36 0003C098 ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    37                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    38 0003C0A0 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    39 0003C0A2 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    40 0003C0AA ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    41 0003C0B2 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    42 0003C0B3 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    43 0003C0B4 ????                <1>     numFiles    resw 1    ;FILES=5 default
    44 0003C0B6 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    45 0003C0B8 ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    46 0003C0C0 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    47 0003C0C2 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    48 0003C0C3 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    49                              <1> 
    50 0003C0E5 ????????????????    <1>     critPtchTbl resw 4  ;Offsets from DosDataArea addr to the 4 funcs
    51 0003C0ED ??                  <1>                 resb 1  ;Alignment byte
    52                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    53 0003C0EE ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    54 0003C0EF ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    55 0003C0F0 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    56 0003C0F1 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    57 0003C0F2 ????                <1>     errorExCde  resw 1  ;Extended Error Code
    58 0003C0F4 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    59 0003C0F5 ??                  <1>     errorClass  resb 1  ;Error Class
    60                              <1> 
    61 0003C0F6 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
    62                              <1> 
    63 0003C0FE ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    64 0003C106 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
    65 0003C10E ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this di)
    66 0003C116 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    67 0003C11E ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
    68 0003C120 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    69 0003C121 ??                  <1>     currentDrv  resb 1  ;Default drive x
    70                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    71 0003C122 ??                  <1>     singleDrv   resb 1  ;Set if last drive accessed was drive B x
    72                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    73 0003C123 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
    74 0003C124 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    75                              <1> ;SDA, needs to be replaced between processes
    76 0003C125 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
    77 0003C12D ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
    78 0003C135 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
    79 0003C13D ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    80 0003C145 ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    81 0003C146 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    82 0003C147 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    83 0003C148 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    84 0003C150 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    85 0003C158 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    86 0003C160 ??                  <1>     dosInvoke   resb 1  ;FIXED 0, any other value fails calls (-1 = server invoke)
    87                              <1> 
    88                              <1> ;Time stuff
    89 0003C161 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    90 0003C162 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    91 0003C163 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    92 0003C164 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    93 0003C166 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    94                              <1> 
    95                              <1> ;Buffers
    96 0003C167 <res 80h>           <1>     filename1   resb 128    ;Space for one path and file name
    97 0003C1E7 <res 80h>           <1>     filename2   resb 128    ;Space for a second path and file name
    98 0003C267 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    99 0003C26D ??                  <1>     singleIObyt resb 1  ;For single IO byte buffers
   100                              <1> ;Misc bookkeeping flags and vars
   101                              <1>     ;secClusConv resb 1  ;For networking, do we convert sector to cluster?
   102 0003C26E ??                  <1>     rwFlag      resb 1  ;00h=Read, 01h=Write
   103 0003C26F ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   104 0003C270 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   105 0003C271 ??                  <1>     typePSPcopy resb 1  ;00=Simple copy, -1=Make Child process
   106 0003C272 ??                  <1>     spliceFlag  resb 1  ;01 = file name and directory name together
   107                              <1> ;File Access stuff
   108 0003C273 ????????????????    <1>     curDrvDPB   resq 1  ;Ptr to the DPB of the drive being accessed
   109 0003C27B ????????????????    <1>     curCDSPtr   resq 1  ;Ptr to the CDS of the drive being accessed
   110 0003C283 <res 5Bh>           <1>     curDrvCDS   resb cds_size   ;Working cp of CDS of drv being accessed
   111 0003C2DE ????????????????    <1>     currentJFT  resq 1  ;Ptr to JFT num in caller PSP of file being accessed
   112 0003C2E6 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   113 0003C2EE ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   114 0003C2F0 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   115 0003C2F8 ????????            <1>     currClust   resd 1  ;Relative cluster in file being r/w to/from
   116 0003C2FC ????????            <1>     currClustA  resd 1  ;Current Cluster (abs) on disk being read/written to/from
   117 0003C300 ??                  <1>     clustFact   resb 1  ;NUMBER of sectors per cluster
   118 0003C301 ??                  <1>     currSect    resb 1  ;Current Sector in Cluster being r/w to/from
   119 0003C302 ????????????????    <1>     currSectA   resq 1  ;Current absolute Sector number on Disk
   120 0003C30A ????                <1>     currByte    resw 1  ;Current Byte in sector being r/w to/from
   121 0003C30C ????????            <1>     currByteA   resd 1  ;Current Byte in file being r/w to/from
   122 0003C310 ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   123 0003C314 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   124 0003C318 ????????            <1>     bytesAdded  resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   125                              <1> ;Directory stuff
   126 0003C31C ????????            <1>     dirClust    resd 1  ;Cluster number of current directory
   127 0003C320 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   128 0003C324 ??                  <1>     dirSect     resb 1  ;Sector of current directory
   129 0003C325 ??                  <1>     dirEntry    resb 1  ;32 byte offset in dir sect for file being searched for
   130                              <1> 
   131                              <1>     
   132                              <1> ;Stacks and scratch SFT
   133 0003C326 <res 528h>          <1>     critStack   resq 165
   134 0003C84E ????????????????    <1>     critStakTop resq 1
   135                              <1> 
   136 0003C856 <res 43h>           <1>     scratchSFT  resb sft_size
   137                              <1> 
   138 0003C899 <res 638h>          <1>     IOStack     resq 199
   139 0003CED1 ????????????????    <1>     IOStakTop   resq 1
   140 0003CED9 <res 638h>          <1>     DiskStack   resq 199
   141 0003D511 ????????????????    <1>     DiskStakTop resq 1
   142                              <1>     dSegLen     equ     $
    14                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    15                                  %include "./Source/Data/staticData.asm"
    16                              <1> 
    17                              <1> ;-----------------------------------:
    18                              <1> ;           Static Data             :
    19                              <1> ;-----------------------------------:
    20 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    21 00000001 01                  <1> dosMinor    db 01h      ;.01
    22 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    22 0000000B 535953              <1>
    23 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    23 00000017 535953              <1>
    24 0000001A 2F                  <1> switchchar  db "/" ;Editable by the Int 41h/ah=37h
    16                                  %include "./Source/Data/dispTbl.asm"
    17                              <1> ;Kernel Dispatch Function Table
    18                              <1> 
    19                              <1> kDispTbl:
    20 0000001B 2111                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    21 0000001D 0709                <1>     dw stdinReadEcho - kDispTbl       ;AH = 01H, CHAR IO
    22 0000001F 7409                <1>     dw stdoutWrite - kDispTbl         ;AH = 02H, CHAR IO
    23 00000021 AE09                <1>     dw stdauxRead - kDispTbl          ;AH = 03H, CHAR IO
    24 00000023 AE09                <1>     dw stdauxWrite - kDispTbl         ;AH = 04H, CHAR IO
    25 00000025 AE09                <1>     dw stdprnWrite - kDispTbl         ;AH = 05H, CHAR IO
    26 00000027 AE09                <1>     dw directCONIO - kDispTbl         ;AH = 06H, CHAR IO
    27 00000029 AE09                <1>     dw waitDirectInNoEcho - kDispTbl  ;AH = 07H, CHAR IO
    28 0000002B E709                <1>     dw waitStdinNoEcho - kDispTbl     ;AH = 08H, CHAR IO
    29 0000002D E809                <1>     dw printString - kDispTbl         ;AH = 09H, CHAR IO
    30 0000002F 2A0A                <1>     dw buffStdinInput - kDispTbl      ;AH = 0AH, CHAR IO
    31 00000031 2A0A                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    32 00000033 2A0A                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    33 00000035 5E17                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    34 00000037 F417                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    35 00000039 2B0A                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    36 0000003B 2B0A                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    37 0000003D 2B0A                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    38 0000003F 2B0A                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    39 00000041 2B0A                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    40 00000043 2B0A                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    41 00000045 2B0A                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    42 00000047 2B0A                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    43 00000049 2B0A                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    44 0000004B FB19                <1>     dw return - kDispTbl              ;AH = 18H, RESERVED
    45 0000004D 4318                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    46 0000004F 2C0A                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    47 00000051 4A18                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    48 00000053 4C18                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    49 00000055 FB19                <1>     dw return - kDispTbl              ;AH = 1DH, RESERVED
    50 00000057 FB19                <1>     dw return - kDispTbl              ;AH = 1EH, RESERVED
    51 00000059 2A12                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    52 0000005B FB19                <1>     dw return - kDispTbl              ;AH = 20H, RESERVED
    53 0000005D 3F0A                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    54 0000005F 3F0A                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    55 00000061 3F0A                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    56 00000063 3F0A                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    57 00000065 BE18                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    58 00000067 EB18                <1>     dw createNewPSP - kDispTbl        ;AH = 26H, PROCESS MANAGEMENT
    59 00000069 3F0A                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    60 0000006B 3F0A                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    61 0000006D 3F0A                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    62 0000006F 2A0A                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    63 00000071 2A0A                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    64 00000073 2A0A                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    65 00000075 2A0A                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    66 00000077 EC18                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    67 00000079 400A                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    68 0000007B FA18                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    69 0000007D 2211                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    70 0000007F 2C12                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    71 00000081 1317                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    72 00000083 0F19                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    73 00000085 2019                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    74 00000087 3519                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    75 00000089 2511                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    76 0000008B 2511                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    77 0000008D 1007                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    78 0000008F 1007                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    79 00000091 1007                <1>     dw changeCurrentDIR - kDispTbl    ;AH = 3BH, DIRECTORY OPERATION
    80 00000093 530A                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    81 00000095 540A                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    82 00000097 550A                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    83 00000099 560A                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    84 0000009B 5F0A                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    85 0000009D 760A                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    86 0000009F 760A                <1>     dw movFileReadPtr - kDispTbl      ;AH = 42H, RECORD OPERATION     HANDLE
    87 000000A1 760A                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    88 000000A3 760A                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    89 000000A5 760A                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    90 000000A7 760A                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    91 000000A9 1007                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    92 000000AB 160B                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    93 000000AD 330D                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    94 000000AF 5C0E                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    95 000000B1 2311                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    96 000000B3 2411                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    97 000000B5 A619                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    98 000000B7 760A                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    99 000000B9 760A                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   100 000000BB 4117                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   101 000000BD 4A17                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   102 000000BF B819                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   103 000000C1 8C14                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   104 000000C3 C919                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   105 000000C5 D019                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   106 000000C7 760A                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   107 000000C9 1007                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   108 000000CB 0D10                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   109 000000CD D119                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   110 000000CF 760A                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   111 000000D1 760A                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   112 000000D3 760A                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   113 000000D5 FA19                <1>     dw getCritErrorInfo - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   114 000000D7 FA19                <1>     dw networkServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   115 000000D9 FA19                <1>     dw networkRedirection - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   116 000000DB 1007                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   117 000000DD FB19                <1>     dw return - kDispTbl              ;AH = 61H, RESERVED
   118 000000DF 5317                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   119 000000E1 FB19                <1>     dw return - kDispTbl              ;AH = 63H, RESERVED
   120 000000E3 5C17                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   121 000000E5 2511                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   122 000000E7 2511                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   123 000000E9 760A                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   124 000000EB 760A                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   125 000000ED FB19                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   126                              <1> kDispTblL  equ $ - kDispTbl 
    17                                  %include "./Source/Debug/debug.asm"
    18                              <1> ;This file contains debugging macros, procs and strings
    19                              <1> ; that we can use to output to COM1 bypassing the operating system.
    20                              <1> ;A serial terminal must be connected for this to work.
    21                              <1> 
    22                              <1> ;Variables and equates
    23                              <1> 
    24 000000EF 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    25                              <1> 
    26 000000F7 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    26 00000100 39414243444546      <1>
    27                              <1> ;Common procedures
    28                              <1> debMakeDebuggerRespond:
    29 00000107 488D2D26000000      <1>     lea rbp, .msg
    30 0000010E E8AF000000          <1>     call debPrintNullString
    31 00000113 B900001000          <1>     mov ecx, 100000h
    32                              <1> .waiting:
    33 00000118 FFC9                <1>     dec ecx
    34 0000011A 740C                <1>     jz .timeout
    35 0000011C B402                <1>     mov ah, 02h ;Blocking recieve!
    36 0000011E 31D2                <1>     xor edx, edx
    37 00000120 CD34                <1>     int 34h
    38 00000122 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    39 00000125 75F1                <1>     jnz .waiting
    40 00000127 C3                  <1>     ret
    41                              <1> .timeout:
    42 00000128 488D2D47000000      <1>     lea rbp, .msg2
    43 0000012F E98E000000          <1>     jmp debPrintNullString
    44 00000134 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    44 0000013D 6B6579206174207468- <1>
    44 00000146 65207465726D696E61- <1>
    44 0000014F 6C20746F20636F6E74- <1>
    44 00000158 696E7565206F722077- <1>
    44 00000161 61697420666F722074- <1>
    44 0000016A 696D656F75742E2E2E- <1>
    44 00000173 0A0D00              <1>
    45 00000176 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    45 0000017F 436F6E74696E75696E- <1>
    45 00000188 672E2E2E0A0D00      <1>
    46                              <1> debPrintHexByte:
    47                              <1> ;Print the hex byte in al as a hex value
    48 0000018F 52                  <1>     push rdx
    49 00000190 53                  <1>     push rbx
    50 00000191 50                  <1>     push rax
    51                              <1> 
    52 00000192 88C2                <1>     mov dl, al           ;save byte in dl
    53 00000194 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    54 00000198 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    55 0000019D 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    56 000001A1 E80C000000          <1>     call .wrchar
    57 000001A6 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    58 000001A9 E804000000          <1>     call .wrchar
    59                              <1> 
    60 000001AE 58                  <1>     pop rax
    61 000001AF 5B                  <1>     pop rbx
    62 000001B0 5A                  <1>     pop rdx
    63 000001B1 C3                  <1>     ret
    64                              <1> .wrchar:
    65 000001B2 6687DB              <1>     xchg bx, bx
    66 000001B5 488D1D3BFFFFFF      <1>     lea rbx, debascii
    67 000001BC D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    68 000001BD B401                <1>     mov ah, 01h
    69 000001BF CD34                <1>     int 34h  ;print char
    70 000001C1 C3                  <1>     ret
    71                              <1> 
    72                              <1> debPrintNullString:
    73                              <1> ;Print a null terminated string pointed to by rbp
    74 000001C2 56                  <1>     push rsi
    75 000001C3 50                  <1>     push rax
    76 000001C4 52                  <1>     push rdx
    77 000001C5 31D2                <1>     xor edx, edx    ;Select COM1
    78 000001C7 4889EE              <1>     mov rsi, rbp
    79                              <1> .getChar:
    80 000001CA AC                  <1>     lodsb
    81 000001CB 84C0                <1>     test al, al
    82 000001CD 7406                <1>     jz .exit
    83 000001CF B401                <1>     mov ah, 01h
    84 000001D1 CD34                <1>     int 34h
    85 000001D3 EBF5                <1>     jmp short .getChar
    86                              <1> .exit:
    87 000001D5 5A                  <1>     pop rdx
    88 000001D6 58                  <1>     pop rax
    89 000001D7 5E                  <1>     pop rsi
    90 000001D8 C3                  <1>     ret
    91                              <1> 
    92                              <1> debPrintDOSStack:
    93                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    94                              <1> ;Shows me which function, and parameters passed and returned
    95 000001D9 488D2DA5010000      <1>     lea rbp, .a1
    96 000001E0 E8DDFFFFFF          <1>     call debPrintNullString
    97 000001E5 488B15(50C10300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
    98 000001EC 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
    99 000001F3 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   100 000001F6 E802030000          <1>     call overlayQword
   101 000001FB 4881C316000000      <1>     add rbx, 22
   102 00000202 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   103 00000206 E8F2020000          <1>     call overlayQword
   104 0000020B 4881C316000000      <1>     add rbx, 22
   105 00000212 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   106 00000216 E8E2020000          <1>     call overlayQword
   107 0000021B 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   108 00000222 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   109 00000226 E8D2020000          <1>     call overlayQword
   110 0000022B 4881C316000000      <1>     add rbx, 22 
   111 00000232 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   112 00000236 E8C2020000          <1>     call overlayQword
   113 0000023B 4881C316000000      <1>     add rbx, 22
   114 00000242 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   115 00000246 E8B2020000          <1>     call overlayQword
   116 0000024B 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   117 00000252 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   118 00000256 E8A2020000          <1>     call overlayQword
   119 0000025B 4881C316000000      <1>     add rbx, 22
   120 00000262 488B05(50C10300)    <1>     mov rax, qword [oldRSP]
   121 00000269 480560000000        <1>     add rax, callerFrame_size
   122 0000026F E889020000          <1>     call overlayQword
   123 00000274 4881C316000000      <1>     add rbx, 22
   124 0000027B 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   125 0000027F E879020000          <1>     call overlayQword
   126 00000284 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   127 0000028B 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   128 0000028F E869020000          <1>     call overlayQword
   129 00000294 488D2D06000000      <1>     lea rbp, .a0
   130 0000029B E822FFFFFF          <1>     call debPrintNullString
   131 000002A0 C3                  <1>     ret
   132                              <1> 
   133 000002A1 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   133 000002AA 303030303030303030- <1>
   133 000002B3 30306820            <1>
   134 000002B7 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   134 000002C0 303030303030303030- <1>
   134 000002C9 30306820            <1>
   135 000002CD 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   135 000002D6 303030303030303030- <1>
   135 000002DF 30306820            <1>
   136 000002E3 0A0D                <1>     db  0Ah,0Dh
   137 000002E5 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   137 000002EE 303030303030303030- <1>
   137 000002F7 30306820            <1>
   138 000002FB 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   138 00000304 303030303030303030- <1>
   138 0000030D 30306820            <1>
   139 00000311 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   139 0000031A 303030303030303030- <1>
   139 00000323 30306820            <1>
   140 00000327 0A0D                <1>     db 0Ah, 0Dh
   141 00000329 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   141 00000332 303030303030303030- <1>
   141 0000033B 30306820            <1>
   142 0000033F 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   142 00000348 303030303030303030- <1>
   142 00000351 30306820            <1>
   143 00000355 7269703D3030303030- <1>     db "rip=0000000000000000h"
   143 0000035E 303030303030303030- <1>
   143 00000367 303068              <1>
   144 0000036A 0A0D                <1>     db 0Ah, 0Dh
   145 0000036C 666C673D3030303030- <1>     db "flg=0000000000000000h "
   145 00000375 303030303030303030- <1>
   145 0000037E 30306820            <1>
   146 00000382 0A0D00              <1>     db 0Ah,0Dh,0
   147 00000385 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   147 0000038E 206F6E20496E742034- <1>
   147 00000397 316820737461636B0A- <1>
   147 000003A0 0D00                <1>
   148                              <1> 
   149                              <1> debDPBptr:
   150                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   151 000003A2 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   152 000003A9 4889E8              <1>     mov rax, rbp
   153 000003AC E84C010000          <1>     call overlayQword
   154 000003B1 488D2D06000000      <1>     lea rbp, .dpb
   155 000003B8 E805FEFFFF          <1>     call debPrintNullString
   156 000003BD C3                  <1>     ret
   157                              <1> .dpb: 
   158 000003BE 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   158 000003C7 203030303030303030- <1>
   158 000003D0 303030303030303068- <1>
   158 000003D9 200A0D00            <1>
   159                              <1> 
   160                              <1> debDPBBPBptr:
   161                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   162                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   163 000003DD 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   164 000003E4 4889E8              <1>     mov rax, rbp
   165 000003E7 E811010000          <1>     call overlayQword
   166 000003EC 4881C321000000      <1>     add rbx, 33
   167 000003F3 4889F0              <1>     mov rax, rsi
   168 000003F6 E802010000          <1>     call overlayQword
   169 000003FB 488D2D06000000      <1>     lea rbp, .dpb
   170 00000402 E8BBFDFFFF          <1>     call debPrintNullString
   171 00000407 C3                  <1>     ret
   172                              <1> .dpb: 
   173 00000408 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   173 00000411 203030303030303030- <1>
   173 0000041A 303030303030303068- <1>
   173 00000423 2066726F6D20        <1>
   174 00000429 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   174 00000432 203030303030303030- <1>
   174 0000043B 303030303030303068- <1>
   174 00000444 200A0D00            <1>
   175                              <1> overlayByte:
   176                              <1>     ;Called with number in rax
   177                              <1>     ;pointer to START of 16 byte space for number in rbx
   178 00000448 53                  <1>     push rbx
   179 00000449 51                  <1>     push rcx
   180 0000044A 52                  <1>     push rdx
   181 0000044B 55                  <1>     push rbp
   182 0000044C 4889DD              <1>     mov rbp, rbx
   183 0000044F 4889C2              <1>     mov rdx, rax
   184 00000452 48FFC5              <1>     inc rbp ;Go to end of number
   185                              <1> 
   186 00000455 488D1D9BFCFFFF      <1>     lea rbx, debascii
   187 0000045C 88D0                <1>     mov al, dl  ;Go low nybble first
   188 0000045E 240F                <1>     and al, 0Fh
   189 00000460 D7                  <1>     xlatb
   190 00000461 884500              <1>     mov byte [rbp], al
   191 00000464 48FFCD              <1>     dec rbp ;Go down one char pos
   192 00000467 88D0                <1>     mov al, dl
   193 00000469 24F0                <1>     and al, 0F0h    ;Hi nybble next
   194 0000046B C0E804              <1>     shr al, 4   ;Shift hi nybble low
   195 0000046E D7                  <1>     xlatb
   196 0000046F 884500              <1>     mov byte [rbp], al  ;Store char
   197                              <1> 
   198 00000472 5D                  <1>     pop rbp
   199 00000473 5A                  <1>     pop rdx
   200 00000474 59                  <1>     pop rcx
   201 00000475 5B                  <1>     pop rbx
   202 00000476 C3                  <1>     ret
   203                              <1> 
   204                              <1> overlayWord:
   205                              <1>     ;Called with number in rax
   206                              <1>     ;pointer to START of 16 byte space for number in rbx
   207 00000477 53                  <1>     push rbx
   208 00000478 51                  <1>     push rcx
   209 00000479 52                  <1>     push rdx
   210 0000047A 55                  <1>     push rbp
   211 0000047B 4889DD              <1>     mov rbp, rbx
   212 0000047E 4889C2              <1>     mov rdx, rax
   213 00000481 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   214 00000488 B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   215 0000048D 488D1D63FCFFFF      <1>     lea rbx, debascii
   216                              <1> .ow0:
   217 00000494 88D0                <1>     mov al, dl  ;Go low nybble first
   218 00000496 240F                <1>     and al, 0Fh
   219 00000498 D7                  <1>     xlatb
   220 00000499 884500              <1>     mov byte [rbp], al
   221 0000049C 48FFCD              <1>     dec rbp ;Go down one char pos
   222 0000049F 88D0                <1>     mov al, dl
   223 000004A1 24F0                <1>     and al, 0F0h    ;Hi nybble next
   224 000004A3 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   225 000004A6 D7                  <1>     xlatb
   226 000004A7 884500              <1>     mov byte [rbp], al  ;Store char
   227 000004AA 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   228 000004AE 48FFCD              <1>     dec rbp
   229 000004B1 FFC9                <1>     dec ecx
   230 000004B3 75DF                <1>     jnz .ow0
   231 000004B5 5D                  <1>     pop rbp
   232 000004B6 5A                  <1>     pop rdx
   233 000004B7 59                  <1>     pop rcx
   234 000004B8 5B                  <1>     pop rbx
   235 000004B9 C3                  <1>     ret
   236                              <1> 
   237                              <1> overlayDword:
   238                              <1>     ;Called with number in rax
   239                              <1>     ;pointer to START of 16 byte space for number in rbx
   240 000004BA 53                  <1>     push rbx
   241 000004BB 51                  <1>     push rcx
   242 000004BC 52                  <1>     push rdx
   243 000004BD 55                  <1>     push rbp
   244 000004BE 4889DD              <1>     mov rbp, rbx
   245 000004C1 4889C2              <1>     mov rdx, rax
   246 000004C4 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   247 000004CB B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   248 000004D0 488D1D20FCFFFF      <1>     lea rbx, debascii
   249                              <1> .od0:
   250 000004D7 88D0                <1>     mov al, dl  ;Go low nybble first
   251 000004D9 240F                <1>     and al, 0Fh
   252 000004DB D7                  <1>     xlatb
   253 000004DC 884500              <1>     mov byte [rbp], al
   254 000004DF 48FFCD              <1>     dec rbp ;Go down one char pos
   255 000004E2 88D0                <1>     mov al, dl
   256 000004E4 24F0                <1>     and al, 0F0h    ;Hi nybble next
   257 000004E6 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   258 000004E9 D7                  <1>     xlatb
   259 000004EA 884500              <1>     mov byte [rbp], al  ;Store char
   260 000004ED 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   261 000004F1 48FFCD              <1>     dec rbp
   262 000004F4 FFC9                <1>     dec ecx
   263 000004F6 75DF                <1>     jnz .od0
   264 000004F8 5D                  <1>     pop rbp
   265 000004F9 5A                  <1>     pop rdx
   266 000004FA 59                  <1>     pop rcx
   267 000004FB 5B                  <1>     pop rbx
   268 000004FC C3                  <1>     ret
   269                              <1> 
   270                              <1> overlayQword:
   271                              <1>     ;Called with number in rax
   272                              <1>     ;pointer to START of 16 byte space for number in rbx
   273 000004FD 53                  <1>     push rbx
   274 000004FE 51                  <1>     push rcx
   275 000004FF 52                  <1>     push rdx
   276 00000500 55                  <1>     push rbp
   277 00000501 4889DD              <1>     mov rbp, rbx
   278 00000504 4889C2              <1>     mov rdx, rax
   279 00000507 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   280 0000050E B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   281 00000513 488D1DDDFBFFFF      <1>     lea rbx, debascii
   282                              <1> .oq0:
   283 0000051A 88D0                <1>     mov al, dl  ;Go low nybble first
   284 0000051C 240F                <1>     and al, 0Fh
   285 0000051E D7                  <1>     xlatb
   286 0000051F 884500              <1>     mov byte [rbp], al
   287 00000522 48FFCD              <1>     dec rbp ;Go down one char pos
   288 00000525 88D0                <1>     mov al, dl
   289 00000527 24F0                <1>     and al, 0F0h    ;Hi nybble next
   290 00000529 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   291 0000052C D7                  <1>     xlatb
   292 0000052D 884500              <1>     mov byte [rbp], al  ;Store char
   293 00000530 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   294 00000534 48FFCD              <1>     dec rbp
   295 00000537 FFC9                <1>     dec ecx
   296 00000539 75DF                <1>     jnz .oq0
   297 0000053B 5D                  <1>     pop rbp
   298 0000053C 5A                  <1>     pop rdx
   299 0000053D 59                  <1>     pop rcx
   300 0000053E 5B                  <1>     pop rbx
   301 0000053F C3                  <1>     ret
   302                              <1> 
   303                              <1> debPrintFunctionName:
   304                              <1> ;Prints the DOS function that has been entered
   305                              <1> ;Entered with ah = Function number
   306 00000540 88E0                <1>     mov al, ah  ;Get dos function number
   307 00000542 488D1DAEFBFFFF      <1>     lea rbx, debascii
   308 00000549 488D1535000000      <1>     lea rdx, .number
   309 00000550 24F0                <1>     and al, 0F0h    ;Get high nybble first
   310 00000552 C0E804              <1>     shr al, 4
   311 00000555 D7                  <1>     xlatb
   312 00000556 8802                <1>     mov byte [rdx], al
   313 00000558 88E0                <1>     mov al, ah
   314 0000055A 240F                <1>     and al, 0Fh
   315 0000055C D7                  <1>     xlatb
   316 0000055D 884201              <1>     mov byte [rdx + 1], al
   317 00000560 488D2D06000000      <1>     lea rbp, .dosString
   318 00000567 E856FCFFFF          <1>     call debPrintNullString
   319 0000056C C3                  <1>     ret
   320 0000056D 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   320 00000576 696F6E20496E742034- <1>
   320 0000057F 31682F41483D        <1>
   321 00000585 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   322                              <1> 
   323                              <1> ;----------------:
   324                              <1> ;!!!! MACROS !!!!:
   325                              <1> ;----------------:
   326                              <1> ;Insert macro when entering a debug block
   327                              <1> %macro debugEnterM 0
   328                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   329                              <1>     mov rsp, debStackTop
   330                              <1> ;Push all registers except rsp on stack
   331                              <1>     push rax
   332                              <1>     push rbx
   333                              <1>     push rcx
   334                              <1>     push rdx
   335                              <1>     push rsi
   336                              <1>     push rdi
   337                              <1>     push rbp
   338                              <1>     push r8
   339                              <1>     push r9
   340                              <1>     push r10
   341                              <1>     push r11
   342                              <1>     push r12
   343                              <1>     push r13
   344                              <1>     push r14
   345                              <1>     push r15
   346                              <1>     pushfq
   347                              <1> %endmacro
   348                              <1> ;Insert macro when exiting a debug block
   349                              <1> %macro debugExitM 0
   350                              <1>     popfq
   351                              <1>     pop r15
   352                              <1>     pop r14
   353                              <1>     pop r13
   354                              <1>     pop r12
   355                              <1>     pop r11
   356                              <1>     pop r10
   357                              <1>     pop r9
   358                              <1>     pop r8
   359                              <1>     pop rbp
   360                              <1>     pop rdi
   361                              <1>     pop rsi
   362                              <1>     pop rdx
   363                              <1>     pop rcx
   364                              <1>     pop rbx
   365                              <1>     pop rax
   366                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   367                              <1> %endmacro
    18                                  %include "./Source/Kernel/FAT/bufferFunctions.asm"
    19                              <1> ;This file contains FAT disk buffer related functions that
    20                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    21                              <1> ;----------------------------------------------------
    22                              <1> ;           Externally referenced functions         :
    23                              <1> ;----------------------------------------------------
    24                              <1> testDirtyBufferForDrive:    ;External linkage
    25                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
    26                              <1> ;Input: dl = Drive number
    27                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
    28 0000058B 53                  <1>     push rbx
    29 0000058C 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
    30                              <1> .tdbfdCheckBuffer:
    31 00000593 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
    32 00000596 7509                <1>     jne .tdbfdGotoNextBuffer
    33 00000598 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
    34 0000059C 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
    35 0000059E F9                  <1>     stc ;Else dirty buffer found, set carry flag
    36                              <1> .tdbfdExit:
    37 0000059F 5B                  <1>     pop rbx
    38 000005A0 C3                  <1>     ret
    39                              <1> .tdbfdGotoNextBuffer:
    40 000005A1 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
    41 000005A4 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
    42 000005AB 74F2                <1>     je .tdbfdExit
    43 000005AD EBE4                <1>     jmp short .tdbfdCheckBuffer
    44                              <1> 
    45                              <1> readBuffer: ;External Linkage (fat.asm)
    46                              <1> ;
    47                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
    48                              <1> ;TO CALL!
    49                              <1> ;
    50                              <1> ;This function will return a pointer to the desired data sector OR 
    51                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
    52                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
    53                              <1> ;Entry: rax = Sector to read
    54                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
    55                              <1> ;Exit:  CF = NC : All ok!
    56                              <1> ;       rbx = Pointer to buffer header with valid data in buffer.
    57                              <1> ;       All other registers as before
    58                              <1> ;       CF = CY: Something went wrong, return error code or INT 44h
    59                              <1> ;       ch = 0 -> Data Not Flushed To Disk
    60                              <1> ;       ch = 1 -> Data Not Read From Disk
    61                              <1> ;       rbx = Pointer to buffer containing sector without valid data in buffer ;            (either unflushed or unread)
    62 000005AF 52                  <1>     push rdx
    63 000005B0 56                  <1>     push rsi
    64 000005B1 55                  <1>     push rbp
    65 000005B2 488B35(73C20300)    <1>     mov rsi, qword [curDrvDPB]  ;Get DPB of transacting device
    66 000005B9 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
    67 000005BB E829010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
    68 000005C0 4881FBFFFFFFFF      <1>     cmp rbx, -1
    69 000005C7 7405                <1>     je .rbReadNewSector
    70                              <1> .rbExit:
    71 000005C9 F8                  <1>     clc
    72                              <1> .rbExitNoFlag:
    73 000005CA 5D                  <1>     pop rbp
    74 000005CB 5E                  <1>     pop rsi
    75 000005CC 5A                  <1>     pop rdx
    76 000005CD C3                  <1>     ret
    77                              <1> .rbReadNewSector:
    78 000005CE E8C6000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rbx
    79 000005D3 4889DD              <1>     mov rbp, rbx
    80 000005D6 30ED                <1>     xor ch, ch
    81 000005D8 E869000000          <1>     call flushBuffer
    82 000005DD 72EB                <1>     jc .rbExitNoFlag    ;Exit in error
    83                              <1> ;rbp points to bufferHdr that has been appropriately linked to the head of chain
    84 000005DF 51                  <1>     push rcx
    85 000005E0 885508              <1>     mov byte [rbp + bufferHdr.driveNumber], dl
    86 000005E3 884D09              <1>     mov byte [rbp + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
    87 000005E6 4889450A            <1>     mov qword [rbp + bufferHdr.bufferLBA], rax
    88 000005EA 80F902              <1>     cmp cl, fatBuffer
    89 000005ED B201                <1>     mov dl, 1   ;Default values if not fat buffer
    90 000005EF B900000000          <1>     mov ecx, 0  ;Ditto!
    91 000005F4 7506                <1>     jne .rbNonFATbuffer
    92 000005F6 8A5607              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
    93 000005F9 8B4E12              <1>     mov ecx, dword [rsi + dpb.dFATlength]
    94                              <1> .rbNonFATbuffer:
    95 000005FC 885512              <1>     mov byte [rbp + bufferHdr.bufFATcopy], dl
    96 000005FF 894D13              <1>     mov dword [rbp + bufferHdr.bufFATsize], ecx
    97 00000602 48897517            <1>     mov qword [rbp + bufferHdr.driveDPBPtr], rsi
    98 00000606 C6451F00            <1>     mov byte [rbp + bufferHdr.reserved], 0
    99 0000060A 59                  <1>     pop rcx
   100 0000060B FEC5                <1>     inc ch  ;If an error occurs, have the signature in ch
   101 0000060D E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   102 00000612 EBB6                <1>     jmp short .rbExitNoFlag
   103                              <1> 
   104                              <1> ;----------------------------------------------------
   105                              <1> ;           Internally referenced functions         :
   106                              <1> ;----------------------------------------------------
   107                              <1> 
   108                              <1> readSectorBuffer:   ;Internal Linkage
   109                              <1> ;Reads a sector into a built sector buffer
   110                              <1> ;Entry: rbp = Pointer to buffer header
   111                              <1> ;Exit:  CF=NC : Success
   112                              <1> ;       CF=CY : Fail, terminate the request
   113                              <1> ;       rbx pointing to buffer header
   114                              <1> ;First make request to device driver
   115 00000614 50                  <1>     push rax
   116 00000615 53                  <1>     push rbx
   117 00000616 51                  <1>     push rcx
   118 00000617 52                  <1>     push rdx
   119 00000618 56                  <1>     push rsi
   120                              <1> .rsRequest0:
   121 00000619 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   122                              <1> .rsRequest1:
   123 0000061E 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   124 00000621 B901000000          <1>     mov ecx, 1  ;One sector to copy
   125 00000626 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   126 0000062A 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   127 0000062E E8610B0000          <1>     call absDiskRead    ;Call INT 45h
   128 00000633 7207                <1>     jc .rsFail
   129                              <1> .rsExit:
   130 00000635 F8                  <1>     clc
   131                              <1> .rsExitBad:
   132 00000636 5E                  <1>     pop rsi
   133 00000637 5A                  <1>     pop rdx
   134 00000638 59                  <1>     pop rcx
   135 00000639 5B                  <1>     pop rbx
   136 0000063A 58                  <1>     pop rax
   137 0000063B C3                  <1>     ret
   138                              <1> .rsFail:
   139                              <1> ;Enter here only if the request failed
   140 0000063C FFCE                <1>     dec esi
   141 0000063E 75DE                <1>     jnz .rsRequest1 ;Try the request again!
   142                              <1> ;Request failed thrice, critical error call
   143 00000640 F9                  <1>     stc
   144 00000641 E9F0FFFFFF          <1>     jmp .rsExitBad  ;Abort
   145                              <1> 
   146                              <1> flushBuffer:    ;Internal Linkage
   147                              <1> ;Flushes the data in a sector buffer to disk!
   148                              <1> ;Entry: rbp = Pointer to buffer header for this buffer
   149                              <1> ;Exit:  CF=NC : Success
   150                              <1> ;       CF=CY : Fail, terminate the request
   151                              <1> ;First make request to device driver
   152 00000646 50                  <1>     push rax
   153 00000647 53                  <1>     push rbx
   154 00000648 51                  <1>     push rcx
   155 00000649 52                  <1>     push rdx
   156 0000064A 56                  <1>     push rsi
   157 0000064B F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   158 0000064F 7433                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   159                              <1> .fbRequest0:
   160 00000651 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   161                              <1> .fbRequest1:
   162 00000656 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   163 00000659 B901000000          <1>     mov ecx, 1  ;One sector to copy
   164 0000065E 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   165 00000662 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   166 00000666 E81B0B0000          <1>     call absDiskWrite    ;Call INT 46h
   167 0000066B 7222                <1>     jc .fbFail
   168                              <1> ;Now check if the buffer was a FAT, to write additional copies
   169 0000066D F6450902            <1>     test byte [rbp + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   170 00000671 7411                <1>     jz .fbFreeExit  ;If not, exit
   171 00000673 FE4D12              <1>     dec byte [rbp + bufferHdr.bufFATcopy]
   172 00000676 740C                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   173 00000678 8B4513              <1>     mov eax, dword [rbp + bufferHdr.bufFATsize]
   174 0000067B 4801450A            <1>     add qword [rbp + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   175 0000067F E9CDFFFFFF          <1>     jmp .fbRequest0 ;Make another request
   176                              <1> .fbFreeExit:
   177                              <1> ;Free the buffer if it was flushed successfully
   178 00000684 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1
   179 00000688 F8                  <1>     clc
   180                              <1> .fbExitBad:
   181 00000689 5E                  <1>     pop rsi
   182 0000068A 5A                  <1>     pop rdx
   183 0000068B 59                  <1>     pop rcx
   184 0000068C 5B                  <1>     pop rbx
   185 0000068D 58                  <1>     pop rax
   186 0000068E C3                  <1>     ret
   187                              <1> .fbFail:
   188                              <1> ;Enter here only if the request failed
   189 0000068F FFCE                <1>     dec esi
   190 00000691 75C3                <1>     jnz .fbRequest1 ;Try the request again!
   191                              <1> ;Request failed thrice, critical error call
   192 00000693 F9                  <1>     stc
   193 00000694 E9F0FFFFFF          <1>     jmp .fbExitBad  ;Abort
   194                              <1>     
   195                              <1> findLRUBuffer: ;Internal Linkage
   196                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   197                              <1> ; in rbx
   198                              <1> ;Input: Nothing
   199                              <1> ;Output: rbx = Pointer to the buffer hdr to use
   200 00000699 52                  <1>     push rdx
   201 0000069A 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   202 000006A1 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   203 000006A5 7436                <1>     je .flbExit 
   204 000006A7 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   205 000006AE 742D                <1>     je .flbExit
   206                              <1> .flbWalk:
   207 000006B0 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
   208 000006B3 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   209 000006B6 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1
   210 000006BA 7423                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   211 000006BC 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   212 000006C3 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   213 000006C5 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   214                              <1> .flbHeadLink:
   215 000006CC 488B15(A2C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   216 000006D3 48891D(A2C00300)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   217 000006DA 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
   218                              <1> .flbExit:
   219 000006DD 5A                  <1>     pop rdx
   220 000006DE C3                  <1>     ret
   221                              <1> .flbFreeLink:
   222 000006DF 51                  <1>     push rcx
   223 000006E0 488B0B              <1>     mov rcx, qword [rbx + bufferHdr.nextBufPtr]
   224 000006E3 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rbx
   225 000006E6 59                  <1>     pop rcx
   226 000006E7 EBE3                <1>     jmp short .flbHeadLink
   227                              <1> 
   228                              <1> findSectorInBuffer:     ;Internal linkage
   229                              <1> ;Finds the Buffer for a sector
   230                              <1> ;If the sector is not in a buffer, returns with a -1
   231                              <1> ;Input: rax = Sector number
   232                              <1> ;        dl = Drive number
   233                              <1> ;Output: rbx = Buffer hdr pointer or -1
   234 000006E9 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   235                              <1> .fsiCheckBuffer:
   236 000006F0 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   237 000006F3 7507                <1>     jne .fsiGotoNextBuffer
   238 000006F5 4839430A            <1>     cmp qword [rbx + bufferHdr.bufferLBA], rax
   239 000006F9 7501                <1>     jne .fsiGotoNextBuffer
   240                              <1> .fsiExit:
   241 000006FB C3                  <1>     ret
   242                              <1> .fsiGotoNextBuffer:
   243 000006FC 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   244 000006FF 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   245 00000706 74F3                <1>     je .fsiExit
   246 00000708 EBE6                <1>     jmp short .fsiCheckBuffer
   247                              <1> 
   248                              <1> 
   249                              <1> findDirtyBufferForDrive:    ;No Use
   250                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   251                              <1> ;Input: dl = Drive number
   252                              <1> ;Output: rbx = Pointer to dirty buffer for drive letter if exists or -1 if not
   253 0000070A 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   254                              <1> .fdbfdCheckBuffer:
   255 00000711 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   256 00000714 7507                <1>     jne .fdbfdGotoNextBuffer
   257 00000716 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   258 0000071A 7401                <1>     jz .fdbfdGotoNextBuffer ;Bit not set, goto next buffer
   259                              <1> .fdbfdExit:
   260 0000071C C3                  <1>     ret
   261                              <1> .fdbfdGotoNextBuffer:
   262 0000071D 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   263 00000720 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   264 00000727 74F3                <1>     je .fdbfdExit
   265 00000729 EBE6                <1>     jmp short .fdbfdCheckBuffer
    19                                  %include "./Source/Kernel/FAT/fat.asm"
    20                              <1> ;---------------------------------------------------:
    21                              <1> ;                   KERNEL FUNCTIONS                :
    22                              <1> ;---------------------------------------------------:
    23                              <1> makeDIR:           ;ah = 39h
    24                              <1> removeDIR:         ;ah = 3Ah
    25                              <1> changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
    26                              <1> getCurrentDIR:     ;ah = 47h
    27                              <1> getSetFileDateTime:;ah = 57h
    28                              <1> trueName:          ;ah = 60h, get fully qualified name
    29 0000072B C3                  <1>     ret
    30                              <1> 
    31                              <1> 
    32                              <1> ;-----------------------------------:
    33                              <1> ;       File System routines        :
    34                              <1> ;-----------------------------------:
    35                              <1> name2Clust:
    36                              <1> ;Converts a file name to a first cluster number
    37                              <1> ;Entry : rbx = Points to ASCIIZ string to parse for a Cluster number
    38                              <1> ;Exit : rax = Cluster number or -1 if file not found
    39                              <1> ;Three cases:
    40                              <1> ;1) Start with a letter and a : => Full path and Drive specified
    41                              <1> ;2) Start with \ or / => Current Drive and relative path from root
    42                              <1> ;3) Else => File name in Current Dir or a subdir from current dir
    43 0000072C 56                  <1>     push rsi
    44 0000072D 57                  <1>     push rdi
    45 0000072E 51                  <1>     push rcx
    46 0000072F 52                  <1>     push rdx
    47 00000730 4889DF              <1>     mov rdi, rbx    ;Save string ptr in rdi
    48 00000733 807F013A            <1>     cmp byte [rdi + 1], ":" ;Check it is a colon for full path
    49 00000737 740A                <1>     je .fullPath
    50 00000739 803F5C              <1>     cmp byte [rdi], "\"
    51 0000073C 7405                <1>     je .relPath
    52 0000073E 803F2F              <1>     cmp byte [rdi], "/"
    53 00000741 7400                <1>     je .relPath ;Both CPM and UNIX are considered acceptible path separators
    54                              <1>     ;Else search the current dir for an entry
    55                              <1> 
    56                              <1> .localFileNoRoot:
    57                              <1> .relPath:
    58                              <1> .fullPath:
    59                              <1> .exit:
    60 00000743 5A                  <1>     pop rdx
    61 00000744 59                  <1>     pop rcx
    62 00000745 5F                  <1>     pop rdi
    63 00000746 5E                  <1>     pop rsi
    64 00000747 C3                  <1>     ret
    65                              <1> 
    66                              <1> searchDirectorySectorForEntry:
    67                              <1> ;Proc that searches the sector for the string 
    68                              <1> ; UP UNTIL the NULL char or the path separator
    69                              <1> ;If a . is found in file name, skip it
    70                              <1> ;If a sector entry is found to start with 0, return fail
    71                              <1> ;Entry: rdx = Path Section ptr (point to first A/N char)
    72                              <1> ;       rbx = Sector buffer pointer
    73                              <1> ;       rsi = DPB pointer
    74                              <1> ;Exit: CF=NC => Found, CF=CY => Not found
    75                              <1> ;       If CF=CY read char pointed to by rbx.
    76                              <1> ;       If this char is 0, then end of directory reached!
    77 00000748 50                  <1>     push rax
    78 00000749 51                  <1>     push rcx
    79                              <1>     ;cl has number of entries per sector
    80 0000074A 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
    81 0000074D 80E905              <1>     sub cl, 5   ;5 is the number of bytes per dir entry shift
    82 00000750 B801000000          <1>     mov eax, 1
    83 00000755 D3E0                <1>     shl eax, cl ;eax has number of directory entries in sector
    84                              <1>     ;Now search each entry for name
    85                              <1>     ;Use ecx as counter for each entry
    86 00000757 89C1                <1>     mov ecx, eax
    87                              <1> .searchDir:
    88 00000759 803B00              <1>     cmp byte [rbx], 0 ;Check if dir empty before proceeding
    89 0000075C 744E                <1>     jz .exitNotOK
    90                              <1>     ;Do string compare here, search for / or \ or 0 to exit
    91 0000075E 52                  <1>     push rdx    ;Push the name pointer 
    92 0000075F 53                  <1>     push rbx    ;Push sector pointer
    93                              <1> .searchLoop:
    94 00000760 8A02                <1>     mov al, byte [rdx] ;Get char in ASCIIZ buffer
    95 00000762 3C2E                <1>     cmp al, "." ;Verify if name separator or directory entry
    96 00000764 742C                <1>     je .dotCase
    97 00000766 3C05                <1>     cmp al, 05h ;Special Case
    98 00000768 7424                <1>     je .specialCase
    99 0000076A 3C2F                <1>     cmp al, "/" ;Name Found
   100 0000076C 7442                <1>     je .nameFound
   101 0000076E 3C5C                <1>     cmp al, "\" ;Name Found
   102 00000770 743E                <1>     je .nameFound
   103 00000772 3C00                <1>     cmp al, 0   ;End of ASCIIZ string!
   104 00000774 743A                <1>     je .nameFound
   105                              <1> .specRet:
   106 00000776 3A03                <1>     cmp al, byte [rbx]  ;Compare to char in sector buffer
   107 00000778 7520                <1>     jne .nameNotFound
   108 0000077A 48FFC3              <1>     inc rbx
   109                              <1> .skipChar:
   110 0000077D 48FFC2              <1>     inc rdx ;Go to Filename extension
   111 00000780 5B                  <1>     pop rbx ;Get start of directory entry into rbx
   112 00000781 53                  <1>     push rbx
   113 00000782 4881C308000000      <1>     add rbx, 8  ;Go to the extension portion of the Filename
   114 00000789 E9D2FFFFFF          <1>     jmp .searchLoop
   115                              <1> .specialCase:
   116 0000078E B0E5                <1>     mov al, 0E5h
   117 00000790 EBE4                <1>     jmp short .specRet
   118                              <1> .dotCase:
   119                              <1> ;Check if next char is geq than 'A'. If yes, path separator
   120 00000792 807A0141            <1>     cmp byte [rdx + 1], 'A'
   121 00000796 7CDE                <1>     jnge .specRet   ;Not Path Separator
   122 00000798 EBE3                <1>     jmp short .skipChar
   123                              <1> .nameNotFound:
   124 0000079A 5B                  <1>     pop rbx
   125 0000079B 5A                  <1>     pop rdx
   126 0000079C 4881C320000000      <1>     add rbx, 20h    ;Goto next sector entry
   127 000007A3 803B00              <1>     cmp byte [rbx], 0   ;Are we at the end of the Directory?
   128 000007A6 7404                <1>     jz .exitNotOK   ;Exit early, end of directory
   129 000007A8 FFC9                <1>     dec ecx
   130 000007AA 75AD                <1>     jnz .searchDir
   131                              <1> .exitNotOK:
   132 000007AC F9                  <1>     stc
   133                              <1> .exitOk:
   134 000007AD 59                  <1>     pop rcx
   135 000007AE 58                  <1>     pop rax
   136 000007AF C3                  <1>     ret
   137                              <1> .nameFound:
   138 000007B0 5B                  <1>     pop rbx
   139 000007B1 5A                  <1>     pop rdx
   140 000007B2 F8                  <1>     clc
   141 000007B3 EBF8                <1>     jmp short .exitOk
   142                              <1> getFATtype:
   143                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
   144                              <1> ;Entry: rsi = DPB to ascertain FAT
   145                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
   146 000007B5 53                  <1>     push rbx
   147 000007B6 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
   148 000007B9 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
   149 000007BE 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   150 000007C4 730F                <1>     jae .exit
   151 000007C6 FFC9                <1>     dec ecx     ;FAT 12 marker
   152 000007C8 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   153 000007CE 7205                <1>     jb .exit
   154 000007D0 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
   155                              <1> .exit:
   156 000007D5 5B                  <1>     pop rbx
   157 000007D6 C3                  <1>     ret
   158                              <1> 
   159                              <1> clust2FATEntry:
   160                              <1> ;Converts a cluster number to a offset in the FAT
   161                              <1> ;Entry:  rsi points to the DPB for the transacting device
   162                              <1> ;        eax = Cluster number to look for
   163                              <1> ;Exit:   eax = Sector on disk of FAT 
   164                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
   165                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
   166 000007D7 53                  <1>     push rbx
   167 000007D8 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
   168 000007DB 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   169 000007E1 731E                <1>     jae .fat32
   170 000007E3 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   171 000007E9 7209                <1>     jb .fat12
   172                              <1> ;FAT16
   173 000007EB D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
   174 000007ED 6801000000          <1>     push qword 1
   175 000007F2 EB15                <1>     jmp short .common
   176                              <1> .fat12:
   177 000007F4 89C1                <1>     mov ecx, eax    ;ecx = eax
   178 000007F6 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
   179 000007F8 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
   180 000007FA 6800000000          <1>     push qword 0
   181 000007FF EB08                <1>     jmp short .common
   182                              <1> .fat32:
   183 00000801 6802000000          <1>     push qword 2
   184 00000806 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
   185                              <1> .common:
   186                              <1> ;eax has the FAToffset
   187 00000809 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
   188 0000080C BA01000000          <1>     mov edx, 1
   189 00000811 D3E2                <1>     shl edx, cl    ;Turn edx to number of bytes per sector
   190 00000813 89D1                <1>     mov ecx, edx
   191 00000815 31D2                <1>     xor edx, edx    ;edx = 0
   192 00000817 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
   193 00000819 0FB75E05            <1>     movzx ebx, word [rsi + dpb.wFAToffset]   ;Add the offset to the first FAT
   194 0000081D 01D8                <1>     add eax, ebx
   195 0000081F 59                  <1>     pop rcx ;Pop the FAT type back into rcx
   196 00000820 5B                  <1>     pop rbx
   197 00000821 C3                  <1>     ret
   198                              <1> getStartSectorOfCluster:
   199                              <1> ;Input: eax = Cluster Number
   200                              <1> ;       r9 = dpb pointer
   201                              <1> ;Output: eax = Starting Sector number for cluster
   202                              <1> ;Gives the data sector we are at in the current cluster
   203                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
   204 00000822 51                  <1>     push rcx
   205 00000823 2D02000000          <1>     sub eax, 2
   206 00000828 418A4904            <1>     mov cl, byte [r9 + dpb.bSectorsPerClusterShift]
   207 0000082C D3E0                <1>     shl eax, cl
   208 0000082E 4103410A            <1>     add eax, [r9 + dpb.dClusterHeapOffset]
   209                              <1>     ;eax now has the first sector of the current cluster
   210 00000832 59                  <1>     pop rcx
   211 00000833 C3                  <1>     ret
   212                              <1> getNextSectorOfFileBROKEN:
   213                              <1> ;This function will read the next sector for a file into a buffer.
   214                              <1> ;If the next sector to be read lives in the next cluster, it will update
   215                              <1> ; the file handle of the file being read/written to the new cluster
   216                              <1> ;
   217                              <1> ;Input: r8 = sft pointer
   218                              <1> ;       r9 = dpb pointer
   219                              <1> ;Output:
   220                              <1> ;       rbx = Pointer to buffer data
   221                              <1> ;       CF = NC, buffer OK to read
   222                              <1> ;       CF = CY, buffer not ok, something went wrong
   223                              <1> ;           ZF = ZE(1), Data not flushed to disk
   224                              <1> ;           ZF = NZ(0), Data no read from disk
   225                              <1>     ;Read next sector. If at last sector in cluster, walk map, get
   226                              <1>     ; next cluster and read first sector 
   227 00000834 50                  <1>     push rax
   228 00000835 51                  <1>     push rcx
   229 00000836 52                  <1>     push rdx
   230 00000837 56                  <1>     push rsi
   231 00000838 57                  <1>     push rdi
   232                              <1>     ;Check if we need to go to next cluster
   233                              <1>     ;mov ax, word [r8 + sft.wRelSect]    ;Upper byte is ALWAYS 0
   234 00000839 413A4103            <1>     cmp al, byte [r9 + dpb.bMaxSectorInCluster]
   235 0000083D 7455                <1>     je .gotoNextCluster
   236                              <1>     ;Goto next sector
   237                              <1>     ;inc word [r8 + sft.wRelSect]    ;Goto next sector in cluster
   238                              <1> .getSector:
   239 0000083F 418B403F            <1>     mov eax, dword [r8 + sft.dAbsClusr] ;Get cluster number
   240 00000843 E8DAFFFFFF          <1>     call getStartSectorOfCluster
   241                              <1>     ;movzx ebx, word [r8 + sft.wRelSect] ;Get relative sector number
   242                              <1>     ;eax now has the correct sector in the cluster
   243 00000848 01D8                <1>     add eax, ebx    
   244                              <1>     ;Read the sector into a buffer
   245                              <1>     ;The sector read here is either DATA or DOS
   246 0000084A 498D702C            <1>     lea rsi, qword [r8 + sft.sFileName]
   247 0000084E 488D3DADF7FFFF      <1>     lea rdi, dosBIOSName    ;Check if the file being read is the BIOS
   248 00000855 B90B000000          <1>     mov ecx, 11             ;File name length
   249 0000085A F3A6                <1>     repe cmpsb
   250 0000085C 742D                <1>     je .OSFile
   251 0000085E 498D702C            <1>     lea rsi, qword [r8 + sft.sFileName]
   252 00000862 488D3DA5F7FFFF      <1>     lea rdi, dosKernName
   253 00000869 B90B000000          <1>     mov ecx, 11             ;File name length
   254 0000086E F3A6                <1>     repe cmpsb
   255 00000870 7419                <1>     je .OSFile
   256                              <1>     ;Not an OS file, dataBuffer
   257 00000872 B108                <1>     mov cl, dataBuffer
   258                              <1> .getSectorRead:
   259 00000874 4C89CE              <1>     mov rsi, r9
   260 00000877 E833FDFFFF          <1>     call readBuffer
   261 0000087C 7211                <1>     jc .getSectorFailed
   262 0000087E 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   263                              <1> .getSectorExit:
   264 00000885 5F                  <1>     pop rdi
   265 00000886 5E                  <1>     pop rsi
   266 00000887 5A                  <1>     pop rdx
   267 00000888 59                  <1>     pop rcx
   268 00000889 58                  <1>     pop rax
   269 0000088A C3                  <1>     ret
   270                              <1> .OSFile:
   271 0000088B B101                <1>     mov cl, dosBuffer
   272 0000088D EBE5                <1>     jmp short .getSectorRead
   273                              <1> .getSectorFailed:
   274                              <1>     ;CF = CY => Something went wrong!
   275                              <1>     ;   Set the Zero flag for data not flushed to disk
   276                              <1>     ;   Clear Zero flag for data not read from disk
   277 0000088F 84ED                <1>     test ch, ch ;This sets the zero flag correctly, but mangles CF
   278 00000891 F9                  <1>     stc ;Set the carry flag!
   279 00000892 EBF1                <1>     jmp short .getSectorExit
   280                              <1> 
   281                              <1> .gotoNextCluster:
   282                              <1>     ;Read FAT, find next cluster in cluster map, update SFT entries
   283 00000894 418B403F            <1>     mov eax, dword [r8 + sft.dAbsClusr] ;Get the current cluster
   284 00000898 4C89CE              <1>     mov rsi, r9 ;Move dpb pointer into rsi, eax has cluster number
   285 0000089B E837FFFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   286 000008A0 410FB75905          <1>     movzx ebx, word [r9 + dpb.wFAToffset]
   287 000008A5 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   288 000008A7 B102                <1>     mov cl, fatBuffer
   289 000008A9 E801FDFFFF          <1>     call readBuffer ;Buffer Header in ebx
   290 000008AE 72DF                <1>     jc .getSectorFailed
   291                              <1>     ;Check if FAT 12, 16, 32
   292 000008B0 4885FF              <1>     test rdi, rdi
   293 000008B3 7422                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   294 000008B5 48F7C701000000      <1>     test rdi, 1
   295 000008BC 7407                <1>     jz .goToNextClusterCommonFat32
   296                              <1>     ;Here we handle FAT16
   297 000008BE 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   298 000008C3 EB09                <1>     jmp short .goToNextClusterCommon
   299                              <1> .goToNextClusterCommonFat32:
   300 000008C5 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   301 000008C9 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   302                              <1> .goToNextClusterCommon:
   303 000008CE 4189403F            <1>     mov dword [r8 + sft.dAbsClusr], eax ;Save new cluster number
   304                              <1>     ;mov word [r8 + sft.wRelSect], 0 ;First sector in next cluster
   305 000008D2 E968FFFFFF          <1>     jmp .getSector
   306                              <1> .gotoNextClusterFat12:
   307                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   308                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   309 000008D7 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   310 000008DA FFC0                <1>     inc eax ;Get next sector
   311 000008DC E8CEFCFFFF          <1>     call readBuffer ;Buffer Header in ebx
   312 000008E1 72AC                <1>     jc .getSectorFailed
   313                              <1>     ;rdi has first buffer header, rbx has second buffer header
   314                              <1>     ;rdx has offset into first header for entry
   315 000008E3 41F7403F01000000    <1>     test dword [r8 + sft.dAbsClusr], 1  ;Check if cluster is odd
   316 000008EB 7429                <1>     jz .gotoNextClusterFat12Even
   317                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   318 000008ED B801000000          <1>     mov eax, 1
   319 000008F2 418A4802            <1>     mov cl, byte [r8 + dpb.bBytesPerSectorShift]
   320 000008F6 D3E0                <1>     shl eax, cl
   321 000008F8 29D0                <1>     sub eax, edx
   322 000008FA FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   323 000008FC 750E                <1>     jnz .gotoNextClusterFat12NoCross
   324                              <1>     ;Boundary cross, build entry properly
   325 000008FE 31C0                <1>     xor eax, eax
   326 00000900 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   327 00000904 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   328 00000907 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   329 0000090A EBC2                <1>     jmp short .goToNextClusterCommon
   330                              <1> .gotoNextClusterFat12NoCross:
   331 0000090C 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   332 00000911 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   333 00000914 EBB8                <1>     jmp short .goToNextClusterCommon
   334                              <1> .gotoNextClusterFat12Even:
   335                              <1>     ;Here the cluster is even and can't cross a sector boundary
   336 00000916 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   337 0000091B 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   338 00000920 EBAC                <1>     jmp short .goToNextClusterCommon
    20                                  %include "./Source/Kernel/CharDevs/charFunctions.asm"
    21                              <1> ;Dos default char functions live here
    22                              <1> 
    23                              <1> stdinReadEcho:     ;ah = 01h
    24                              <1> ;Return char that has been read and echoed in al
    25 00000922 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    26 00000929 488D05(6DC20300)    <1>     lea rax, singleIObyt
    27 00000930 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    28 00000933 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    29 00000937 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    30 0000093D 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    31 00000941 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    32                              <1> 
    33 00000948 488B35(98C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
    34 0000094F E815080000          <1>     call goDriver
    35                              <1> 
    36 00000954 803D(6DC20300)00    <1>     cmp byte [singleIObyt], 00h
    37 0000095B 742B                <1>     jz .stdireexit
    38 0000095D 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    39 00000964 488D05(6DC20300)    <1>     lea rax, singleIObyt
    40 0000096B C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    41 0000096E C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    42 00000972 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    43 00000978 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    44 0000097C C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    45 00000983 E8E1070000          <1>     call goDriver   ;rbx has reqheader ptr
    46                              <1> .stdireexit:
    47 00000988 8A05(6DC20300)      <1>     mov al, byte [singleIObyt]
    48 0000098E C3                  <1>     ret
    49                              <1> 
    50                              <1> stdoutWrite:       ;ah = 02h
    51                              <1> ;Bspace is regular cursor left, does not insert a blank
    52 0000098F 881533000000        <1>     mov byte [.stdoutWriteBuffer], dl
    53 00000995 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    54 0000099C 488D1525000000      <1>     lea rdx, .stdoutWriteBuffer
    55 000009A3 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    56 000009A6 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    57 000009AA 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    58 000009B0 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    59 000009B4 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    60                              <1> 
    61 000009BB 488B35(98C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
    62 000009C2 E8A2070000          <1>     call goDriver
    63 000009C7 C3                  <1>     ret
    64 000009C8 00                  <1> .stdoutWriteBuffer db 0
    65                              <1> stdauxRead:        ;ah = 03h
    66                              <1> stdauxWrite:       ;ah = 04h
    67                              <1> stdprnWrite:       ;ah = 05h
    68                              <1> directCONIO:       ;ah = 06h
    69                              <1> waitDirectInNoEcho:;ah = 07h
    70                              <1> ;Return char in al
    71 000009C9 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    72 000009D0 488D05(6DC20300)    <1>     lea rax, singleIObyt
    73 000009D7 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    74 000009DA C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    75 000009DE 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    76 000009E4 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    77 000009E8 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    78                              <1> 
    79 000009EF 488B35(98C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
    80 000009F6 E86E070000          <1>     call goDriver
    81 000009FB 8A05(6DC20300)      <1>     mov al, byte [singleIObyt]
    82 00000A01 C3                  <1>     ret
    83                              <1> waitStdinNoEcho:   ;ah = 08h
    84 00000A02 C3                  <1>     ret
    85                              <1> printString:       ;ah = 09h
    86 00000A03 31C9                <1>     xor ecx, ecx    ;Clear char counter
    87 00000A05 B824000000          <1>     mov eax, "$"    ;Terminating char
    88 00000A0A 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
    89                              <1> .ps0:   ;Search for $ to get count of chars
    90 00000A0D AE                  <1>     scasb
    91 00000A0E 7404                <1>     je .ps1
    92 00000A10 FFC1                <1>     inc ecx
    93 00000A12 EBF9                <1>     jmp short .ps0
    94                              <1> .ps1:   ;Use handle 
    95 00000A14 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    96 00000A1B C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    97 00000A1E C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    98 00000A22 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    99 00000A28 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   100 00000A2C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   101                              <1>     
   102 00000A2F 488B35(98C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
   103 00000A36 E82E070000          <1>     call goDriver   ;Called with rbx pointing to the request header
   104                              <1> 
   105 00000A3B 488B1D(50C10300)    <1>     mov rbx, qword [oldRSP]
   106 00000A42 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   107 00000A44 C3                  <1>     ret
   108                              <1> buffStdinInput:    ;ah = 0Ah
   109                              <1> checkStdinStatus:  ;ah = 0Bh
   110                              <1> clearbuffDoFunc:   ;ah = 0Ch
    21                                  %include "./Source/Kernel/CharDevs/dateTimeFunctions.asm"
    22                              <1> ;Major kernel date time functions and subroutines
    23                              <1> 
    24                              <1> getDate:           ;ah = 2Ah
    25                              <1> setDate:           ;ah = 2Bh
    26                              <1> getTime:           ;ah = 2Ch
    27                              <1> setTime:           ;ah = 2Dh
    28 00000A45 C3                  <1>     ret
    22                                  %include "./Source/Kernel/FileIO/fcbFunctions.asm"
    23                              <1> openFileFCB:       ;ah = 0Fh
    24                              <1> closeFileFCB:      ;ah = 10h
    25                              <1> findFirstFileFCB:  ;ah = 11h
    26                              <1> findNextFileFCB:   ;ah = 12h
    27                              <1> deleteFileFCB:     ;ah = 13h
    28                              <1> sequentialReadFCB: ;ah = 14h
    29                              <1> sequentialWriteFCB:;ah = 15h
    30                              <1> createFileFCB:     ;ah = 16h
    31                              <1> renameFileFCB:     ;ah = 17h
    32 00000A46 C3                  <1>     ret
    33                              <1> setDTA:            ;ah = 1Ah
    34                              <1> ;Called with:
    35                              <1> ;   rdx = Pointer to the new default DTA
    36 00000A47 488B1D(50C10300)    <1>     mov rbx, qword [oldRSP]
    37 00000A4E 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    38 00000A52 488915(FEC00300)    <1>     mov qword [currentDTA], rdx
    39 00000A59 C3                  <1>     ret
    40                              <1> randomReadFCB:     ;ah = 21h
    41                              <1> randomWriteFCB:    ;ah = 22h
    42                              <1> getFileSizeFCB:    ;ah = 23h
    43                              <1> setRelRecordFCB:   ;ah = 24h
    44                              <1> randBlockReadFCB:  ;ah = 27h
    45                              <1> randBlockWriteFCB: ;ah = 28h
    46                              <1> parseFilenameFCB:  ;ah = 29h
    47 00000A5A C3                  <1>     ret
    48                              <1> getDTA:            ;ah = 2Fh
    49 00000A5B 488B15(50C10300)    <1>     mov rdx, qword [oldRSP]
    50 00000A62 488B1D(FEC00300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    51 00000A69 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    52 00000A6D C3                  <1>     ret
    23                                  %include "./Source/Kernel/FileIO/handleFunctions.asm"
    24                              <1> ;-----------------------------------:
    25                              <1> ;    File Handle Kernel routines    :
    26                              <1> ;-----------------------------------:
    27                              <1> 
    28                              <1> createFileHdl:     ;ah = 3Ch, handle function
    29 00000A6E C3                  <1>     ret
    30                              <1> openFileHdl:       ;ah = 3Dh, handle function
    31 00000A6F C3                  <1>     ret
    32                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    33 00000A70 C3                  <1>     ret
    34                              <1> readFileHdl:       ;ah = 3Fh, handle function
    35 00000A71 C605(6EC20300)00    <1>     mov byte [rwFlag], 0    ;Read
    36 00000A78 EB07                <1>     jmp short rwFileHndleCommon
    37                              <1> writeFileHdl:      ;ah = 40h, handle function
    38 00000A7A C605(6EC20300)01    <1>     mov byte [rwFlag], 1    ;Write
    39                              <1> rwFileHndleCommon:
    40                              <1> ;bx has file handle, ecx has number of bytes to read
    41 00000A81 66891D(EEC20300)    <1>     mov word [currentHdl], bx
    42 00000A88 E805000000          <1>     call getSFTPtr  ;Get SFT ptr in var
    43 00000A8D 7301                <1>     jnc .rwfhc0
    44 00000A8F C3                  <1>     ret ;If carry is set and error code in al, exit!
    45                              <1> .rwfhc0:
    46                              <1> 
    47 00000A90 C3                  <1>     ret
    48                              <1> 
    49                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    50                              <1> movFileReadPtr:    ;ah = 42h, handle function, LSEEK
    51                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
    52                              <1> ioctrl:            ;ah = 44h, handle function
    53                              <1> duplicateHandle:   ;ah = 45h, handle function
    54                              <1> forceDuplicateHdl: ;ah = 46h, handle function
    55                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
    56                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
    57                              <1> renameFile:        ;ah = 56h
    58                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
    59                              <1> createNewFile:     ;ah = 5Bh
    60                              <1> lockUnlockFile:    ;ah = 5Ch
    61                              <1> setHandleCount:    ;ah = 67h
    62                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
    63 00000A91 C3                  <1>     ret
    64                              <1> ;-----------------------------------:
    65                              <1> ;        File Handle routines       :
    66                              <1> ;-----------------------------------:
    67                              <1> getSFTPtr:
    68                              <1> ;Gets the SFT pointer for a given file handle from the calling application
    69                              <1> ;On entry:
    70                              <1> ;   bx = File handle from JFT for calling application
    71                              <1> ;On exit: CF=NC, SFT found and placed in var
    72                              <1> ;         CF=CY, SFT not found, abort!
    73 00000A92 50                  <1>     push rax
    74 00000A93 53                  <1>     push rbx
    75 00000A94 56                  <1>     push rsi
    76 00000A95 57                  <1>     push rdi
    77 00000A96 663B1D(B6C00300)    <1>     cmp bx, word [maxHndls]  ;current max number of file handles
    78 00000A9D 7365                <1>     jnb .gspFail
    79 00000A9F 488B35(06C10300)    <1>     mov rsi, qword [currentPSP]
    80 00000AA6 480FB7DB            <1>     movzx rbx, bx
    81 00000AAA 488D5C1E2A          <1>     lea rbx, qword [rsi + psp.jobFileTbl + rbx] 
    82 00000AAF 48891D(DEC20300)    <1>     mov [currentJFT], rbx   ;Save a pointer to the JFT entry
    83 00000AB6 8A1B                <1>     mov bl, byte [rbx]   ;Use jft entry to get sft num
    84 00000AB8 80FBFF              <1>     cmp bl, -1  ;Non-existant SFT reference?
    85 00000ABB 7447                <1>     je .gspFail
    86 00000ABD 31C0                <1>     xor eax, eax
    87 00000ABF 488B3D(88C00300)    <1>     mov rdi, qword [sftHeadPtr]
    88                              <1> .gsp0:
    89 00000AC6 66034708            <1>     add ax, word [rdi + sfth.wNumFiles]
    90 00000ACA 38D8                <1>     cmp al, bl  ;Check if the file header block contains the entry
    91 00000ACC 760E                <1>     jbe .gsp1   ;IF bl is below or equal to al then it does
    92 00000ACE 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of list
    93 00000AD5 742D                <1>     je .gspFail   ;If we have a number greater than the last entry, fail
    94 00000AD7 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Walk the chain
    95 00000ADA EBEA                <1>     jmp short .gsp0 ;Search again
    96                              <1> .gsp1: 
    97                              <1>     ;Now point to the right entry
    98 00000ADC 28D8                <1>     sub al, bl  ;Subtract the number from the total so far to get offset
    99 00000ADE 0FB6C0              <1>     movzx eax, al
   100 00000AE1 4881C70A000000      <1>     add rdi, sfth_size  ;Point to first file in table
   101 00000AE8 84C0                <1>     test al, al ;Check if rdi points to the first file in this block
   102 00000AEA 740B                <1>     jz .gsp12   ;Skip walking down the sft blocks
   103                              <1> .gsp11:
   104 00000AEC 4881C743000000      <1>     add rdi, sft_size
   105 00000AF3 FEC8                <1>     dec al
   106 00000AF5 75F5                <1>     jnz .gsp11  ;Keep adding one until al is zero
   107                              <1> .gsp12:
   108 00000AF7 48893D(E6C20300)    <1>     mov qword [currentSFT], rdi ;Save pointer in variable
   109 00000AFE F8                  <1>     clc
   110                              <1> .gspExit:
   111 00000AFF 5F                  <1>     pop rdi
   112 00000B00 5E                  <1>     pop rsi
   113 00000B01 5B                  <1>     pop rbx
   114 00000B02 58                  <1>     pop rax
   115 00000B03 C3                  <1>     ret
   116                              <1> .gspFail:
   117 00000B04 B006                <1>     mov al, errBadHdl
   118 00000B06 F9                  <1>     stc
   119 00000B07 EBF6                <1>     jmp short .gspExit
   120                              <1> 
   121                              <1> copySFTtoSDA:
   122                              <1> ;Called with rsi pointing to SFT structure
   123                              <1> ;Prepares the scratch SFT in SDA for use
   124 00000B09 488D3D(56C80300)    <1>     lea rdi, scratchSFT
   125 00000B10 488B35(E6C20300)    <1>     mov rsi, qword [currentSFT]   ;Get current SFT
   126 00000B17 EB0E                <1>     jmp short copySScommon
   127                              <1> copySDAtoSFT:
   128 00000B19 488D35(56C80300)    <1>     lea rsi, scratchSFT
   129 00000B20 488B3D(E6C20300)    <1>     mov rdi, qword [currentSFT]   ;Get current SFT
   130                              <1> copySScommon:
   131 00000B27 51                  <1>     push rcx
   132 00000B28 B943000000          <1>     mov ecx, sft_size
   133 00000B2D F3A4                <1>     rep movsb   ;Copy
   134 00000B2F 59                  <1>     pop rcx
   135 00000B30 C3                  <1>     ret
   136                              <1> 
   137                              <1> getSectorInCluster:
   138                              <1> ;Gets the sector in cluster from
    24                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    25                              <1> ;Memory related functions
    26                              <1> 
    27                              <1> ;-----------------------------------:
    28                              <1> ;  Memory related Kernel routines   :
    29                              <1> ;-----------------------------------:
    30                              <1> allocateMemory:    ;ah = 48h
    31                              <1> ;Input: ebx = Number of paragraphs requested
    32                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    33                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    34 00000B31 31D2                <1>     xor edx, edx
    35                              <1>     ;Clear the pointers
    36 00000B33 488915(25C10300)    <1>     mov qword [firstMCB], rdx
    37 00000B3A 488915(2DC10300)    <1>     mov qword [bestMCB], rdx
    38 00000B41 488915(35C10300)    <1>     mov qword [lastMCB], rdx
    39 00000B48 31ED                <1>     xor ebp, ebp    
    40 00000B4A FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    41 00000B4C 488B35(78C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    42                              <1> .walk:
    43 00000B53 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    44 00000B56 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    45 00000B59 7409                <1>     je .walk1
    46 00000B5B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    47 00000B5E 0F8565050000        <1>     jne memSysHalt
    48                              <1> .walk1:
    49                              <1>     ;Here if valid but not the last block
    50 00000B64 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    51 00000B6C 0F8582000000        <1>     jne .walk2
    52                              <1>     ;Here we consolidate adjacent free blocks if there are any
    53                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    54                              <1>     ;End consolidation at first non free block or at last block in chain
    55 00000B72 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    56 00000B75 744A                <1>     je .det0    ;Determine if this block is useful
    57 00000B77 31C9                <1>     xor ecx, ecx
    58 00000B79 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    59 00000B7C 4881C610000000      <1>     add rsi, mcb.program
    60                              <1> .cons0:
    61 00000B83 48C1E104            <1>     shl rcx, 4
    62 00000B87 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    63 00000B8A 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    64 00000B8D 7409                <1>     je .cons1
    65 00000B8F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    66 00000B92 0F8531050000        <1>     jne memSysHalt 
    67                              <1> .cons1:
    68 00000B98 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    69 00000BA0 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    70                              <1>     ;Here rsi, points to a free block, add it to rdi
    71 00000BA2 31C9                <1>     xor ecx, ecx
    72 00000BA4 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    73 00000BA7 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    74 00000BAD 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    75 00000BB0 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    76 00000BB2 31D2                <1>     xor edx, edx
    77 00000BB4 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    78 00000BB7 48895608            <1>     mov qword [rsi + 8], rdx
    79 00000BBB 3C5A                <1>     cmp al, mcbMarkEnd
    80 00000BBD 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    81                              <1>     ;Here we deal with if the block was the last one 
    82 00000BBF 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    83                              <1> .det0:  ;Now determine if pointer in rdi is useful
    84 00000BC1 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    85                              <1> ;ebx must be less than the arena size for the arena to be useful!
    86 00000BC4 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    87 00000BC7 39D9                <1>     cmp ecx, ebx
    88 00000BC9 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    89 00000BCB 488935(35C10300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    90 00000BD2 488B05(25C10300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    91 00000BD9 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    92 00000BDC 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    93 00000BDE 488935(25C10300)    <1>     mov qword [firstMCB], rsi
    94                              <1> .det1:
    95                              <1>     ;Now test for best fit.
    96 00000BE5 29D9                <1>     sub ecx, ebx    ;Block - ebx
    97 00000BE7 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    98 00000BE9 7209                <1>     jb .walk2
    99 00000BEB 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   100 00000BED 488935(2DC10300)    <1>     mov qword [bestMCB], rsi
   101                              <1> .walk2:
   102 00000BF4 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   103 00000BF7 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   104 00000BF9 31C9                <1>     xor ecx, ecx
   105 00000BFB 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   106 00000BFE 48C1E104            <1>     shl rcx, 4
   107 00000C02 4881C610000000      <1>     add rsi, mcb.program
   108 00000C09 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   109 00000C0C E942FFFFFF          <1>     jmp .walk
   110                              <1> .allocate:
   111                              <1>     ;Allocation fails IF the pointer is the null pointer
   112 00000C11 803D(20C10300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   113 00000C18 7261                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   114                              <1>     ;Fall thru if last fit
   115 00000C1A 488B35(35C10300)    <1>     mov rsi, qword [lastMCB]
   116 00000C21 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   117 00000C24 0F84CE000000        <1>     jz .allocFail
   118 00000C2A 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   119 00000C2C C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   120 00000C2F 31C9                <1>     xor ecx, ecx
   121 00000C31 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   122 00000C34 29D9                <1>     sub ecx, ebx
   123 00000C36 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   124 00000C3C 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   125 00000C3F 48C1E104            <1>     shl rcx, 4
   126 00000C43 4881C610000000      <1>     add rsi, mcb.program
   127 00000C4A 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   128 00000C4D 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   129 00000C4F 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   130 00000C52 488B15(06C10300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   131 00000C59 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   132 00000C5D 488B15(50C10300)    <1>     mov rdx, qword [oldRSP]
   133 00000C64 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   134 00000C6B 4889F0              <1>     mov rax, rsi
   135 00000C6E 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   136 00000C71 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   137 00000C75 E824040000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   138 00000C7A C3                  <1>     ret
   139                              <1> .bfCommon:
   140 00000C7B 488B35(25C10300)    <1>     mov rsi, qword [firstMCB]
   141 00000C82 803D(20C10300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   142 00000C89 480F4435(2DC10300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   143 00000C91 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   144 00000C94 7462                <1>     jz .allocFail
   145 00000C96 8A06                <1>     mov al, byte [rsi + mcb.marker]
   146 00000C98 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   147 00000C9B 31C9                <1>     xor ecx, ecx
   148 00000C9D 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   149 00000CA0 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   150 00000CA2 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   151 00000CA8 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   152 00000CAB 488B15(06C10300)    <1>     mov rdx, qword [currentPSP]
   153 00000CB2 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   154 00000CB6 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   155 00000CB9 4881C610000000      <1>     add rsi, mcb.program
   156 00000CC0 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   157 00000CC6 48C1E304            <1>     shl rbx, 4
   158 00000CCA 4801DE              <1>     add rsi, rbx
   159 00000CCD 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   160 00000CCF 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   161 00000CD7 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   162 00000CDA 488B15(50C10300)    <1>     mov rdx, qword [oldRSP]
   163 00000CE1 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   164 00000CE8 4889F8              <1>     mov rax, rdi
   165 00000CEB 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   166 00000CEE 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   167 00000CF2 E8A7030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   168 00000CF7 C3                  <1>     ret
   169                              <1> .allocFail:
   170                              <1>     ;Walk the MCB chain to determine the biggest block size
   171 00000CF8 488B35(78C00300)    <1>     mov rsi, [mcbChainPtr]
   172 00000CFF 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   173                              <1> .af0:
   174 00000D01 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   175 00000D04 7409                <1>     je .af1
   176 00000D06 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   177 00000D09 0F85BA030000        <1>     jne memSysHalt
   178                              <1> .af1:
   179 00000D0F 31C9                <1>     xor ecx, ecx
   180 00000D11 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   181 00000D14 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   182 00000D1C 7505                <1>     jne .af2
   183 00000D1E 39D9                <1>     cmp ecx, ebx
   184 00000D20 0F47D9              <1>     cmova ebx, ecx
   185                              <1> .af2:
   186 00000D23 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   187 00000D26 7410                <1>     je .afExit
   188 00000D28 48C1E104            <1>     shl rcx, 4
   189 00000D2C 4881C610000000      <1>     add rsi, mcb.program
   190 00000D33 4801CE              <1>     add rsi, rcx
   191 00000D36 EBD7                <1>     jmp short .af1
   192                              <1> .afExit:
   193 00000D38 B808000000          <1>     mov eax, errNoMem
   194 00000D3D 488B15(50C10300)    <1>     mov rdx, qword [oldRSP]
   195 00000D44 8802                <1>     mov byte [rdx + callerFrame.rax], al
   196 00000D46 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx
   197 00000D49 804A5801            <1>     or byte [rdx + callerFrame.flags], 1
   198 00000D4D C3                  <1>     ret
   199                              <1> freeMemory:        ;ah = 49h
   200                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   201                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   202                              <1> ;Always skip the first block as this is the anchor for DOS
   203 00000D4E 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   204 00000D55 31C9                <1>     xor ecx, ecx
   205 00000D57 488B35(78C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   206 00000D5E 4889F7              <1>     mov rdi, rsi
   207 00000D61 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   208 00000D64 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   209 00000D68 4881C610000000      <1>     add rsi, mcb.program
   210 00000D6F 4801CE              <1>     add rsi, rcx    ;Go to next block
   211                              <1> .mainLoop:
   212 00000D72 31C9                <1>     xor ecx, ecx
   213 00000D74 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   214 00000D77 7409                <1>     je .valid
   215 00000D79 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   216 00000D7C 0F8547030000        <1>     jne memSysHalt
   217                              <1> .valid:
   218 00000D82 4939F0              <1>     cmp r8, rsi
   219 00000D85 741C                <1>     je .blockFound
   220                              <1>     ;Not valid, check if last block in chain
   221 00000D87 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   222 00000D8A 0F84A0000000        <1>     je .blockNotFound
   223 00000D90 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   224 00000D93 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   225 00000D97 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   226 00000D9E 4801CE              <1>     add rsi, rcx    ;Go to next block
   227 00000DA1 EBCF                <1>     jmp short .mainLoop
   228                              <1> .blockFound:
   229                              <1>     ;If hole, error.
   230                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   231 00000DA3 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   232 00000DAB 0F8488000000        <1>     je .blockHole
   233 00000DB1 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   234 00000DB9 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   235 00000DC1 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   236                              <1>     ;It is, let it absorb this space
   237 00000DC3 31C9                <1>     xor ecx, ecx
   238 00000DC5 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   239 00000DC8 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   240 00000DCE 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   241                              <1>     ;Replace block marker
   242 00000DD1 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   243 00000DD3 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   244 00000DD5 31C9                <1>     xor ecx, ecx
   245 00000DD7 48890E              <1>     mov qword [rsi], rcx
   246 00000DDA 48894E08            <1>     mov qword [rsi + 8], rcx
   247 00000DDE 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   248                              <1> .blockFoundCheckFollowing:
   249                              <1>     ;First check if we are the last block in chain
   250 00000DE1 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   251 00000DE4 7439                <1>     je .blockFoundExit  ;If yes, exit!
   252 00000DE6 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   253 00000DE9 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   254 00000DEC 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   255 00000DF0 4881C110000000      <1>     add rcx, mcb.program
   256 00000DF7 4801CE              <1>     add rsi, rcx    ;Go to next block
   257 00000DFA 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   258 00000E02 751B                <1>     jne .blockFoundExit ;If not free, exit
   259                              <1>     ;If free, absorb into block pointed to by rdi
   260 00000E04 31C9                <1>     xor ecx, ecx
   261 00000E06 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   262 00000E09 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   263 00000E0F 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   264                              <1>     ;Replace block marker
   265 00000E12 8A06                <1>     mov al, byte [rsi + mcb.marker]
   266 00000E14 8807                <1>     mov byte [rdi + mcb.marker], al
   267 00000E16 31C9                <1>     xor ecx, ecx
   268 00000E18 48890E              <1>     mov qword [rsi], rcx
   269 00000E1B 48894E08            <1>     mov qword [rsi + 8], rcx
   270                              <1> .blockFoundExit:
   271 00000E1F E87A020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   272 00000E24 488B1D(50C10300)    <1>     mov rbx, qword [oldRSP]
   273 00000E2B 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   274 00000E2F C3                  <1>     ret
   275                              <1> .blockNotFound:
   276                              <1>     ;Set CF and error code
   277 00000E30 C605(F5C00300)08    <1>     mov byte [errorClass], eClsNotFnd   ;Block not found 
   278 00000E37 EB07                <1>     jmp short .blockError
   279                              <1> .blockHole:
   280                              <1> ;Cannot free a hole! Fail!
   281 00000E39 C605(F5C00300)0A    <1>     mov byte [errorClass], eClsLocked   ;Cant free a hole
   282                              <1> .blockError:
   283 00000E40 C605(F0C00300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   284 00000E47 C605(F1C00300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   285 00000E4E 66C705(F2C00300)09- <1>     mov word [errorExCde], errMemAddr   ;Invalid mem addr
   285 00000E56 00                  <1>
   286 00000E57 C605(F4C00300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   287 00000E5E B809000000          <1>     mov eax, errMemAddr
   288 00000E63 488B1D(50C10300)    <1>     mov rbx, qword [oldRSP]
   289 00000E6A 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   290 00000E6D 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   291 00000E71 E828020000          <1>     call verifyIntegrityOfMCBChain
   292 00000E76 C3                  <1>     ret
   293                              <1> reallocMemory:     ;ah = 4Ah
   294                              <1> ;Input: r8 = address of the block to be realloc'ed
   295                              <1> ;       ebx = How many paras this block should contain after realloc. 
   296                              <1> ;               If ebx = 0, jump to free memory
   297 00000E77 85DB                <1>     test ebx, ebx
   298 00000E79 0F84CFFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   299 00000E7F 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   300 00000E86 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   301 00000E89 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   302 00000E8C 7409                <1>     je .ctn
   303 00000E8E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   304 00000E91 0F855C010000        <1>     jne .badAddrGiven
   305                              <1> .ctn:
   306                              <1>     ;Provided block is valid and not a hole
   307                              <1>     ;Check if Growth or Shrink
   308 00000E97 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   309 00000E9F 7498                <1>     je freeMemory.blockHole
   310 00000EA1 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   311 00000EA4 31C9                <1>     xor ecx, ecx
   312 00000EA6 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   313 00000EA9 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   314 00000EAB 0F8786000000        <1>     ja .growth
   315 00000EB1 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   316                              <1> ;We can always shrink
   317 00000EB7 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   318 00000EB9 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   319 00000EBF 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   320 00000EC2 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   321 00000EC8 48C1E304            <1>     shl rbx, 4
   322 00000ECC 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   323 00000ED3 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   324 00000ED6 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   325 00000ED8 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   326 00000EDB 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   327 00000EDD 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   328 00000EE5 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   329 00000EE8 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   330 00000EEA 0F84DB000000        <1>     je .exit
   331                              <1> ;Else, now see if the block following is also free and absorb it
   332 00000EF0 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   333 00000EF3 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   334 00000EF7 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   335 00000EFE 4801CE              <1>     add rsi, rcx    ;Goto next arena
   336 00000F01 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   337 00000F04 7409                <1>     je .shrinkAbsorb
   338 00000F06 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   339 00000F09 0F85BA010000        <1>     jne memSysHalt
   340                              <1> .shrinkAbsorb:
   341 00000F0F 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   342 00000F17 0F85AE000000        <1>     jne .exit
   343                              <1>     ;It is free, absorb it
   344 00000F1D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   345 00000F20 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   346 00000F26 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   347 00000F29 31C9                <1>     xor ecx, ecx
   348                              <1>     ;Clear absorbed MCB
   349 00000F2B 48890E              <1>     mov qword [rsi], rcx
   350 00000F2E 48894E08            <1>     mov qword [rsi + 8], rcx
   351 00000F32 E994000000          <1>     jmp .exit
   352                              <1> .growth:
   353                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   354 00000F37 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   355 00000F3A 0F84A0000000        <1>     je .notEnuffMem
   356                              <1> ;Now check the following space is free. If not, not enuff mem err
   357 00000F40 31C9                <1>     xor ecx, ecx
   358 00000F42 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   359 00000F45 48C1E104            <1>     shl rcx, 4
   360 00000F49 4889F7              <1>     mov rdi, rsi    
   361 00000F4C 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   362 00000F53 4801CE              <1>     add rsi, rcx
   363 00000F56 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   364 00000F59 7409                <1>     je .growthOK
   365 00000F5B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   366 00000F5E 0F8565010000        <1>     jne memSysHalt
   367                              <1> .growthOK:
   368                              <1>     ;rdi points to block we are growing
   369 00000F64 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   370 00000F6C 7572                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   371                              <1>     ;rsi must own all memory up to the next owned arena
   372 00000F6E 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   373 00000F70 31C9                <1>     xor ecx, ecx
   374 00000F72 31D2                <1>     xor edx, edx
   375 00000F74 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   376 00000F77 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   377 00000F7D 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   378 00000F80 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   379 00000F82 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   380 00000F84 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   381 00000F87 7759                <1>     ja .notEnuffMem1
   382 00000F89 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   383 00000F8B 81FA01000000        <1>     cmp edx, 1
   384 00000F91 7449                <1>     je .notEnuffMem2
   385 00000F93 31C9                <1>     xor ecx, ecx
   386 00000F95 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   387 00000F98 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   388 00000F9C 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   389 00000F9F 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   390 00000FA2 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   391 00000FA9 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   392 00000FAD 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   393 00000FB0 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   394 00000FB4 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   395                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   396                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   397 00000FB6 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   398 00000FB8 7411                <1>     jz .exit
   399 00000FBA 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   400 00000FC0 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   401 00000FC3 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   402                              <1> .exit:
   403 00000FCB E8CE000000          <1>     call verifyIntegrityOfMCBChain
   404 00000FD0 488B1D(50C10300)    <1>     mov rbx, qword [oldRSP]
   405 00000FD7 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   406 00000FDB C3                  <1>     ret
   407                              <1> .notEnuffMem2:
   408 00000FDC FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   409 00000FDE EB02                <1>     jmp short .notEnuffMem1
   410                              <1> .notEnuffMem:
   411 00000FE0 31DB                <1>     xor ebx, ebx    ;No space to grow
   412                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   413 00000FE2 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   414 00000FE7 488B15(50C10300)    <1>     mov rdx, qword [oldRSP]
   415 00000FEE 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   416 00000FF1 EB0C                <1>     jmp short .bad
   417                              <1> .badAddrGiven:
   418 00000FF3 488B15(50C10300)    <1>     mov rdx, qword [oldRSP]
   419 00000FFA B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   420                              <1> .bad:
   421 00000FFF C605(F0C00300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   422 00001006 C605(F1C00300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   423 0000100D 668905(F2C00300)    <1>     mov word [errorExCde], ax   ;Error code
   424 00001014 C605(F4C00300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   425 0000101B 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save this word on stack
   426 0000101E 804A5801            <1>     or byte [rdx + callerFrame.flags], 1    ;Set Carry flag on
   427 00001022 E877000000          <1>     call verifyIntegrityOfMCBChain
   428 00001027 C3                  <1>     ret
   429                              <1> getsetMallocStrat: ;ah = 58h
   430 00001028 84C0                <1>     test al, al
   431 0000102A 741F                <1>     jz .get
   432 0000102C 3C02                <1>     cmp al, 2
   433 0000102E 7337                <1>     jae .bad
   434                              <1> ;Set here
   435 00001030 488B1D(50C10300)    <1>     mov rbx, qword [oldRSP]
   436 00001037 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   437 0000103B 8805(20C10300)      <1>     mov byte [allocStrat], al   ;Only save low word
   438 00001041 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   439 00001045 E854000000          <1>     call verifyIntegrityOfMCBChain
   440 0000104A C3                  <1>     ret
   441                              <1> .get:
   442 0000104B 488B1D(50C10300)    <1>     mov rbx, qword [oldRSP]
   443 00001052 31C0                <1>     xor eax, eax
   444 00001054 8A05(20C10300)      <1>     mov al, byte [allocStrat]
   445 0000105A 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   446 0000105D 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   447 00001061 E838000000          <1>     call verifyIntegrityOfMCBChain
   448 00001066 C3                  <1>     ret
   449                              <1> .bad:
   450 00001067 C605(F0C00300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   451 0000106E C605(F1C00300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   452 00001075 66C705(F2C00300)01- <1>     mov word [errorExCde], errInvFnc   ;Invalid function number addr
   452 0000107D 00                  <1>
   453 0000107E C605(F4C00300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   454 00001085 B801000000          <1>     mov eax, errInvFnc
   455 0000108A 488B1D(50C10300)    <1>     mov rbx, qword [oldRSP]
   456 00001091 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   457 00001094 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   458 00001098 E801000000          <1>     call verifyIntegrityOfMCBChain
   459 0000109D C3                  <1>     ret
   460                              <1> ;-----------------------------------:
   461                              <1> ;      Memory related routines      :
   462                              <1> ;-----------------------------------:
   463                              <1> verifyIntegrityOfMCBChain:
   464 0000109E 50                  <1>     push rax
   465 0000109F 53                  <1>     push rbx
   466 000010A0 488B1D(78C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   467                              <1> .ok:
   468 000010A7 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   469 000010AA 7408                <1>     je .ok1
   470 000010AC 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   471 000010AF 7518                <1>     jne memSysHalt    ;It was not M or Z, fail violently
   472                              <1> .exit:
   473 000010B1 5B                  <1>     pop rbx
   474 000010B2 58                  <1>     pop rax
   475 000010B3 C3                  <1>     ret ;We have reached the end of the chain, return all good!
   476                              <1> .ok1:
   477 000010B4 31C0                <1>     xor eax, eax
   478 000010B6 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   479 000010B9 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   480 000010BD 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   481 000010C4 4801C3              <1>     add rbx, rax
   482 000010C7 EBDE                <1>     jmp short .ok
   483                              <1> memSysHalt:
   484                              <1> ;Only arrive here if the integrity of the system is not verified
   485                              <1> ;Lock the system
   486 000010C9 C605(F0C00300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   487 000010D0 C605(F1C00300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   488 000010D7 66C705(F2C00300)07- <1>     mov word [errorExCde], errMCBbad   ;Destroyed MCB chain
   488 000010DF 00                  <1>
   489 000010E0 C605(F4C00300)05    <1>     mov byte [errorAction], eActKil ;Abort the system
   490 000010E7 488D150E000000      <1>     lea rdx, .sysHltString
   491 000010EE B409                <1>     mov ah, 09h
   492 000010F0 CD41                <1>     int 41h
   493                              <1>     ;Only halt IRQ's in production!
   494                              <1>     %if !DEBUG
   495 000010F2 FA                  <1>     cli ;Halt interrupts
   496 000010F3 B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
   497 000010F5 E6A1                <1>     out 0A1h, al
   498 000010F7 E621                <1>     out 021h, al
   499                              <1>     %endif
   500 000010F9 F4                  <1>     hlt             ;Halt the system
   501 000010FA EBFD                <1>     jmp short $ - 1 ;Go back far enough to capture the hlt
   502 000010FC 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
   502 00001105 6C6F636174696F6E20- <1>
   502 0000110E 6572726F720D0A      <1>
   503 00001115 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
   503 0000111E 616420434F4D4D414E- <1>
   503 00001127 442C2073797374656D- <1>
   503 00001130 2068616C74656424    <1>
    25                                  %include "./Source/Kernel/MemExec/execTerm.asm"
    26                              <1> ;EXEC and all default terminates are here
    27                              <1> 
    28                              <1> ;========================
    29                              <1> ;   Interrupt handlers
    30                              <1> ;========================
    31                              <1> terminateProcess:   ;Int 40h
    32 00001138 48CF                <1>     iretq
    33                              <1> terminateRes:       ;Int 47h
    34 0000113A 48CF                <1>     iretq
    35                              <1> ;========================
    36                              <1> ;    Int 21h functions
    37                              <1> ;========================
    38                              <1> simpleTerminate:   ;ah = 00h
    39 0000113C C3                  <1>     ret
    40                              <1> terminateStayRes:  ;ah = 31h
    41 0000113D C3                  <1>     ret
    42                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    43 0000113E C3                  <1>     ret
    44                              <1> terminateClean:    ;ah = 4Ch, EXIT
    45 0000113F C3                  <1>     ret
    26                                  %include "./Source/Kernel/Local/Local.asm"
    27                              <1> ;Localisation based functions live here
    28                              <1> 
    29                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    30                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    31                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    32                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    33 00001140 C3                  <1>     ret
    27                                  %include "./Source/Kernel/ctrlc.asm"
    28                              <1> criticalDOSError:
    29                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    30                              <1> ; to the critical error handler.
    31                              <1> ; Called with ax, di and rsi set as required by Int 44h (caller decides)
    32                              <1> ;               AH = Critical Error Bitfield
    33                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    34                              <1> ;               Bit 6 - Reserved
    35                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    36                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    37                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    38                              <1> ;               Bits [2-1] = Affected Disk Error
    39                              <1> ;                     0 0   DOS area
    40                              <1> ;                     0 1   FAT area
    41                              <1> ;                     1 0   Directory area
    42                              <1> ;                     1 1   Data area
    43                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    44                              <1> ;               AL  = Failing drive number if AH[7] = 0
    45                              <1> ;               DIL = Error code for errorMsg
    46                              <1> ;               RSI = EA of Device Header for which device the error occured
    47                              <1> ;Return:
    48                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    49                              <1> ;                  = 1 - Retry the Operation    (Retry)
    50                              <1> ;                  = 2 - Terminate the Program  (Abort)
    51                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    52                              <1> ; Return response from int 44h in al
    53 00001141 FA                  <1>     cli ;Disable Interrupts
    54 00001142 C605(EEC00300)01    <1>     mov byte [critErrFlag], 1   ;Set flag for critical error
    55 00001149 488925(3DC10300)    <1>     mov qword [xInt44hRSP], rsp
    56 00001150 488B25(50C10300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    57 00001157 CD44                <1>     int 44h ;Call critical error handler
    58 00001159 488B25(3DC10300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    59 00001160 C605(EEC00300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    60 00001167 FB                  <1>     sti ;Reenable Interrupts
    61 00001168 C3                  <1>     ret
    28                                  %include "./Source/Kernel/dosPrim.asm"
    29                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    30                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    31                              <1> 
    32                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    33                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    34                              <1> ;       rbx = Ptr to the request header for the driver call!
    35 00001169 E8AC050000          <1>     call dosCrit2Enter
    36 0000116E FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    37 00001171 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    38 00001174 E8AB050000          <1>     call dosCrit2Exit
    39 00001179 66F705(51C00300)00- <1>     test word [diskReqHdr + ioReqPkt.status], 8000h ;Clear carry flag and test
    39 00001181 80                  <1>
    40 00001182 7401                <1>     jz .exit    ;Skip the setting in an error sitch
    41 00001184 F9                  <1>     stc 
    42                              <1> .exit:
    43 00001185 C3                  <1>     ret
    44                              <1> 
    45                              <1> absDiskWrite:       ;Int 46h
    46                              <1> ;al = Drive number
    47                              <1> ;rbx = Memory Buffer address to read from
    48                              <1> ;ecx = Number of sectors to write
    49                              <1> ;rdx = Start LBA to write to
    50                              <1>     %if DEBUG
    51                              <1>     ;Print DPB 
    52                              <1>     debugEnterM
    53                              <1>     lea rbp, .l0000
    54                              <1>     call debPrintNullString
    55                              <1>     jmp short .l0001
    56                              <1> .l0000 db "Entering Int 46h",0Ah,0Dh,0
    57                              <1> .l0001:
    58                              <1>     debugExitM
    59                              <1>     %endif
    60 00001186 50                  <1>     push rax
    61 00001187 53                  <1>     push rbx
    62 00001188 52                  <1>     push rdx
    63 00001189 55                  <1>     push rbp
    64 0000118A B408                <1>     mov ah, drvWRITE
    65 0000118C 0225(24C10300)      <1>     add ah, byte [verifyFlag]   ;Change to Write/Verify if set
    66 00001192 EB06                <1>     jmp short absDiskReadWriteCommon
    67                              <1> absDiskRead:        ;Int 45h
    68                              <1> ;al = Drive number
    69                              <1> ;rbx = Memory Buffer address to write to
    70                              <1> ;ecx = Number of sectors to read
    71                              <1> ;rdx = Start LBA to read from
    72                              <1>     %if DEBUG
    73                              <1>     ;Print DPB 
    74                              <1>     debugEnterM
    75                              <1>     lea rbp, .l0000
    76                              <1>     call debPrintNullString
    77                              <1>     jmp short .l0001
    78                              <1> .l0000 db "Entering Int 45h",0Ah,0Dh,0
    79                              <1> .l0001:
    80                              <1>     debugExitM
    81                              <1>     %endif
    82 00001194 50                  <1>     push rax
    83 00001195 53                  <1>     push rbx
    84 00001196 52                  <1>     push rdx
    85 00001197 55                  <1>     push rbp
    86 00001198 B404                <1>     mov ah, drvREAD
    87                              <1> absDiskReadWriteCommon:
    88                              <1> ;Entered with the appropriate function number in ah
    89 0000119A 52                  <1>     push rdx    ;Save start LBA
    90 0000119B 50                  <1>     push rax
    91 0000119C 88C2                <1>     mov dl, al
    92 0000119E E8E7030000          <1>     call findDPB   ;Get dpb ptr in rbp
    93 000011A3 58                  <1>     pop rax
    94 000011A4 5A                  <1>     pop rdx
    95                              <1> 
    96 000011A5 C605(4EC00300)2A    <1>     mov byte [diskReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
    97 000011AC 8805(4FC00300)      <1>     mov byte [diskReqHdr + ioReqPkt.unitnm], al
    98 000011B2 8825(50C00300)      <1>     mov byte [diskReqHdr + ioReqPkt.cmdcde], ah
    99 000011B8 66C705(51C00300)00- <1>     mov word [diskReqHdr + ioReqPkt.status], 0
    99 000011C0 00                  <1>
   100 000011C1 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   101 000011C4 8805(5BC00300)      <1>     mov byte [diskReqHdr + ioReqPkt.medesc], al
   102 000011CA 48891D(5CC00300)    <1>     mov qword [diskReqHdr + ioReqPkt.bufptr], rbx
   103 000011D1 488915(68C00300)    <1>     mov qword [diskReqHdr + ioReqPkt.strtsc], rdx
   104 000011D8 890D(64C00300)      <1>     mov dword [diskReqHdr + ioReqPkt.tfrlen], ecx
   105                              <1> 
   106 000011DE 56                  <1>     push rsi
   107 000011DF 488B751A            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver pointer
   108 000011E3 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr ;Get ReqHeader pointer in rbx
   109 000011EA E87AFFFFFF          <1>     call goDriver   ;If carry set, command failed
   110 000011EF 5E                  <1>     pop rsi
   111                              <1> 
   112 000011F0 5D                  <1>     pop rbp
   113 000011F1 5A                  <1>     pop rdx
   114 000011F2 5B                  <1>     pop rbx
   115 000011F3 58                  <1>     pop rax
   116 000011F4 7202                <1>     jc .absDiskError
   117 000011F6 F8                  <1>     clc
   118 000011F7 C3                  <1>     ret
   119                              <1> .absDiskError:
   120 000011F8 8A05(51C00300)      <1>     mov al, byte [diskReqHdr + ioReqPkt.status] ;Get low byte into al
   121 000011FE B480                <1>     mov ah, 80h ;Attachment failure
   122 00001200 3C0C                <1>     cmp al, 0Ch ;Gen error
   123 00001202 741A                <1>     je .absExit
   124 00001204 B440                <1>     mov ah, 40h ;Seek error
   125 00001206 3C06                <1>     cmp al, 06h
   126 00001208 7414                <1>     je .absExit
   127 0000120A B408                <1>     mov ah, 08h ;Bad CRC
   128 0000120C 3C04                <1>     cmp al, 04h
   129 0000120E 740E                <1>     je .absExit
   130 00001210 B404                <1>     mov ah, 04h ;Sector not found
   131 00001212 3C08                <1>     cmp al, 08h
   132 00001214 7408                <1>     je .absExit
   133 00001216 30E4                <1>     xor ah, ah  ;Write Protect Violation
   134 00001218 84C0                <1>     test al, al
   135 0000121A 7402                <1>     je .absExit
   136 0000121C B402                <1>     mov ah, 02h ;Other Error
   137                              <1> .absExit:
   138 0000121E F9                  <1>     stc
   139 0000121F C3                  <1>     ret
    29                                  %include "./Source/Kernel/dosUtils.asm"
    30                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    31                              <1> 
    32                              <1> ;Utilities
    33                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    34                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    35                              <1> ; that gets set up)
    36                              <1> 
    37                              <1> getCDS:     ;Int 4Fh AX=1217h
    38                              <1>     ;Gets the CDS for the current drive in rax
    39                              <1>     ;Input: rax = Drive number, 0 = A ...
    40                              <1>     ;Output: rsi = Pointer to CDS for drive in rax
    41 00001220 50                  <1>     push rax
    42 00001221 52                  <1>     push rdx
    43 00001222 48BE5B000000000000- <1>     mov rsi, cds_size
    43 0000122B 00                  <1>
    44 0000122C 31D2                <1>     xor edx, edx
    45 0000122E F7E6                <1>     mul esi ;Get the multiples of CDS's to skip
    46 00001230 488D05(AAC00300)    <1>     lea rax, qword [cdsHeadPtr] ;Get the first CDS
    47 00001237 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
    48 0000123A 5A                  <1>     pop rdx
    49 0000123B 58                  <1>     pop rax
    50 0000123C C3                  <1>     ret
    51                              <1> 
    52                              <1> getUserRegs:   ;Int 4Fh AX=1218h
    53                              <1> ;Returns ptr to user regs in rsi
    54 0000123D 488B35(50C10300)    <1>     mov rsi, qword [oldRSP]
    55 00001244 C3                  <1>     ret
    56                              <1> 
    57                              <1> ;DOS KERNEL FUNCTIONS, accessible through Int 41h
    58                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
    59                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
    60 00001245 30D2                <1>     xor dl, dl
    61                              <1> getDeviceDPBptr:   ;ah = 32h
    62                              <1> ;On entry: dl = Drive number
    63                              <1> ;On exit: rbx = DPB pointer
    64 00001247 84D2                <1>     test dl, dl
    65 00001249 7508                <1>     jnz .gddpskipdefault
    66 0000124B 8A15(21C10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
    67 00001251 FEC2                <1>     inc dl
    68                              <1> .gddpskipdefault:
    69                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
    70 00001253 FECA                <1>     dec dl
    71 00001255 E830030000          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
    72 0000125A 84C0                <1>     test al, al
    73 0000125C 741F                <1>     jz .gddpMediaCheck
    74                              <1> ;Put in here error info
    75 0000125E 66C705(F2C00300)0F- <1>     mov word [errorExCde], errBadDrv ;Invalid drive spec
    75 00001266 00                  <1>
    76 00001267 C605(F1C00300)02    <1>     mov byte [errorLocus], eLocDsk    ;Block device driver
    77 0000126E C605(F5C00300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
    78 00001275 C605(F4C00300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after intervention
    79 0000127C C3                  <1>     ret ;Return. al = -1
    80                              <1> .gddpMediaCheck:
    81                              <1> ;Media Check Section
    82 0000127D C605(4EC00300)17    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
    83 00001284 8815(4FC00300)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.unitnm], dl
    84 0000128A C605(50C00300)01    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
    85 00001291 66C705(51C00300)00- <1>     mov word [diskReqHdr + mediaCheckReqPkt.status], 0
    85 00001299 00                  <1>
    86 0000129A 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
    87 0000129D 8805(5BC00300)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.medesc], al
    88 000012A3 88D0                <1>     mov al, dl  ;Save device number in al
    89 000012A5 488B751A            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
    90 000012A9 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
    91 000012B0 E8B4FEFFFF          <1>     call goDriver
    92 000012B5 0F82D5000000        <1>     jc .gddpError
    93 000012BB 88C2                <1>     mov dl, al
    94 000012BD 803D(5CC00300)01    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 1 ;Certified no change
    95 000012C4 0F849F000000        <1>     je .gddpretdbp
    96 000012CA 803D(5CC00300)00    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 0
    97 000012D1 750B                <1>     jne .gddpBuildBPB   ;This means Media changed declared
    98 000012D3 E8B3F2FFFF          <1>     call testDirtyBufferForDrive
    99 000012D8 0F828B000000        <1>     jc .gddpretdbp    ;If there is a dirty buffer for the drive, skip build bpb
   100                              <1> .gddpBuildBPB:
   101                              <1> ;BPB Build Section, only here if need a new bpb, i.e. sure of a new device
   102 000012DE E8B6F3FFFF          <1>     call findLRUBuffer  ;Get lru buffer pointer in rbx
   103 000012E3 3A5308              <1>     cmp dl, byte [rbx + bufferHdr.driveNumber]  ;Does buffer belong to old drv?
   104 000012E6 7414                <1>     je .gddpBuildBPBInvalidateBuffer    ;Yes, immediately invalidate data
   105                              <1>     ;If no, flush the data to disk.
   106                              <1> .gddpBuildBPBFlush:
   107 000012E8 4889EE              <1>     mov rsi, rbp    ;Save rbp as pointer to old dl drive dpb
   108 000012EB 4889DD              <1>     mov rbp, rbx    ;Get buffer header pointer in rbp
   109 000012EE E853F3FFFF          <1>     call flushBuffer    ;Flush the buffer to disk, rbx preserved
   110 000012F3 4889F5              <1>     mov rbp, rsi    ;Return old drive dpb pointer to rbp
   111 000012F6 0F8208010000        <1>     jc .gddpErrorType2  ;rbx points to buffer header
   112                              <1> .gddpBuildBPBInvalidateBuffer:
   113                              <1>     ;Write new buffer header
   114 000012FC 885308              <1>     mov byte [rbx + bufferHdr.driveNumber], dl
   115 000012FF C6430908            <1>     mov byte [rbx + bufferHdr.bufferFlags], dataBuffer
   116 00001303 48C7430A00000000    <1>     mov qword [rbx + bufferHdr.bufferLBA], 0
   117 0000130B C6431201            <1>     mov byte [rbx + bufferHdr.bufFATcopy], 1
   118 0000130F C7431300000000      <1>     mov dword [rbx + bufferHdr.bufFATsize], 0
   119 00001316 48896B17            <1>     mov qword [rbx + bufferHdr.driveDPBPtr], rbp
   120 0000131A 488D5B20            <1>     lea rbx, qword [rbx + bufferHdr.dataarea]
   121                              <1>     ;Build BPB request
   122 0000131E C605(4EC00300)1E    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   123 00001325 8815(4FC00300)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.unitnm], dl
   124 0000132B C605(50C00300)02    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   125 00001332 66C705(51C00300)00- <1>     mov word [diskReqHdr + bpbBuildReqPkt.status], 0 
   125 0000133A 00                  <1>
   126 0000133B 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   127 0000133E 8805(5BC00300)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.medesc], al
   128 00001344 48891D(5CC00300)    <1>     mov qword [diskReqHdr + bpbBuildReqPkt.bufptr], rbx ;Put lru pointer in rbx
   129                              <1> 
   130 0000134B 488B751A            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   131 0000134F 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   132 00001356 E80EFEFFFF          <1>     call goDriver
   133 0000135B 7233                <1>     jc .gddpError
   134 0000135D 488B35(64C00300)    <1>     mov rsi, qword [diskReqHdr + bpbBuildReqPkt.bpbptr]
   135                              <1>     ;rbp points to dpb so we good to go
   136                              <1>     ;Call int 41h ah=53h Build DPB without reentering Int 41h
   137                              <1>     ;Since this function doesnt modify the caller stack, it is safe to do so
   138 00001364 E83E010000          <1>     call createDPB 
   139                              <1> .gddpretdbp: 
   140 00001369 C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Clear access flag
   141 0000136D E8CBFEFFFF          <1>     call getUserRegs
   142 00001372 48896E08            <1>     mov qword [rsi + callerFrame.rbx], rbp  ;Here, all paths have rbp as dpbptr
   143 00001376 30C0                <1>     xor al, al  ;Set al = 0 to indicate rbx=dpb pointer
   144 00001378 C3                  <1>     ret
   145                              <1> .gddpretdpbFail:
   146 00001379 E8BFFEFFFF          <1>     call getUserRegs
   147 0000137E 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set CF=CY
   148 00001386 66C705(F2C00300)53- <1>     mov word [errorExCde], errFI24 ;Fail on INT 44h error code
   148 0000138E 00                  <1>
   149 0000138F C3                  <1>     ret
   150                              <1> .gddpError:
   151                              <1> ;Abort, Retry, Ignore are the only acceptible responses
   152                              <1> ;Entered with rbp = dpb for failing drive
   153                              <1> ;             rdx = driver header that caused fault
   154 00001390 4889D6              <1>     mov rsi, rdx    ;rdx points to driver header in both cases
   155 00001393 488B1D(50C10300)    <1>     mov rbx, qword [oldRSP]
   156 0000139A 8A4318              <1>     mov al, byte [rbx + callerFrame.rdx]    ;Get low byte = dl = Drive number
   157 0000139D 88C2                <1>     mov dl, al  ;Save in dl
   158 0000139F 84C0                <1>     test al, al
   159 000013A1 7508                <1>     jnz .gddpE0
   160 000013A3 8A05(21C10300)      <1>     mov al, byte [currentDrv]
   161 000013A9 FEC0                <1>     inc al
   162                              <1> .gddpE0:
   163 000013AB FEC8                <1>     dec al
   164 000013AD B436                <1>     mov ah, 36h ;Read operation, data area, abort/retry/ignore, disk error
   165 000013AF 668B3D(51C00300)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   166 000013B6 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   167 000013BB 48893D(0EC10300)    <1>     mov qword [rdiErrorPtr], rdi    ;Save this byte
   168 000013C2 66893D(F2C00300)    <1>     mov word [errorExCde], di     ;Save driver error code
   169 000013C9 668105(F2C00300)13- <1>     add word [errorExCde], drvErrShft    ;Add offset to driver error codes
   169 000013D1 00                  <1>
   170 000013D2 8805(F0C00300)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   171 000013D8 C605(F1C00300)02    <1>     mov byte [errorLocus], eLocDsk    ;Error in Block Device Request code
   172 000013DF C605(F5C00300)0B    <1>     mov byte [errorClass], eClsMedia   ;Media error (bad BPB or other) code
   173 000013E6 C605(F4C00300)01    <1>     mov byte [errorAction], eActRet   ;Retry request code
   174 000013ED E84FFDFFFF          <1>     call criticalDOSError   ;Critical error handler
   175 000013F2 84C0                <1>     test al, al
   176 000013F4 0F846FFFFFFF        <1>     jz .gddpretdbp  ;Ignore error, return, rbp has old dpb pointer
   177 000013FA 3C01                <1>     cmp al, 1
   178 000013FC 0F8445FEFFFF        <1>     je getDeviceDPBptr ;Reenter the function, dl has drive code
   179 00001402 CD43                <1>     int 43h ;Else, restart DOS
   180                              <1> .gddpErrorType2:
   181                              <1> ;Error flushing the old buffer
   182                              <1> ;   rbx = Buffer header for data transfer
   183 00001404 B439                <1>     mov ah, 39h ;Write operation, abort/retry/ignore/fail, disk error
   184 00001406 807B0901            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dosBuffer
   185 0000140A 7414                <1>     je .gddpErrorType2main
   186 0000140C 80CC02              <1>     or ah, 2h   ;Set bit 1
   187 0000140F 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   188 00001413 740B                <1>     je .gddpErrorType2main
   189 00001415 B43D                <1>     mov ah, 3Dh ;Set bit 2, clear bit 1
   190 00001417 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   191 0000141B 7403                <1>     je .gddpErrorType2main
   192 0000141D 80CC02              <1>     or ah, 2h   ;Set bit 2 and 1
   193                              <1> .gddpErrorType2main:    
   194 00001420 668B3D(51C00300)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   195 00001427 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   196 0000142C 66893D(F2C00300)    <1>     mov word [errorExCde], di     ;Save driver error code
   197 00001433 668105(F2C00300)13- <1>     add word [errorExCde], drvErrShft   ;Add offset to driver error codes
   197 0000143B 00                  <1>
   198 0000143C 8A4308              <1>     mov al, byte [rbx + bufferHdr.driveNumber]
   199 0000143F 8805(F0C00300)      <1>     mov byte [errorDrv], al
   200 00001445 C605(F1C00300)02    <1>     mov byte [errorLocus], eLocDsk    ;Error in Block Device Request code
   201 0000144C C605(F5C00300)0B    <1>     mov byte [errorClass], eClsMedia  ;Media error (bad disk write) code
   202 00001453 C605(F4C00300)01    <1>     mov byte [errorAction], eActRet   ;Retry request code
   203 0000145A 488B7317            <1>     mov rsi, qword [rbx + bufferHdr.driveDPBPtr]
   204 0000145E 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get device driver header in rsi
   205 00001462 E8DAFCFFFF          <1>     call criticalDOSError   ;Critical error handler
   206 00001467 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   207 0000146B 7420                <1>     je .gddpErrorType2FatDir
   208 0000146D 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   209 00001471 741A                <1>     je .gddpErrorType2FatDir
   210 00001473 84C0                <1>     test al, al
   211 00001475 0F8481FEFFFF        <1>     jz .gddpBuildBPBInvalidateBuffer ;Ignore error, invalidate data
   212 0000147B 3C01                <1>     cmp al, 1
   213 0000147D 0F8465FEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   214 00001483 3C03                <1>     cmp al, 3
   215 00001485 0F84EEFEFFFF        <1>     je .gddpretdpbFail
   216 0000148B CD43                <1>     int 43h ;al = 2, means just abort
   217                              <1> .gddpErrorType2FatDir:
   218 0000148D 84C0                <1>     test al, al ;Ignore converted to fail
   219 0000148F 0F84E4FEFFFF        <1>     jz .gddpretdpbFail
   220 00001495 3C01                <1>     cmp al, 1
   221 00001497 0F844BFEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   222 0000149D 3C03                <1>     cmp al, 3
   223 0000149F 0F84D4FEFFFF        <1>     je .gddpretdpbFail
   224 000014A5 CD43                <1>     int 43h ;al = 2, means just abort
   225                              <1> ;-------------------------------------------
   226                              <1> 
   227                              <1> 
   228                              <1> 
   229                              <1> ;AH = 53h - CREATE DPB
   230                              <1> createDPB:         ;generates a DPB from a given BPB
   231                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   232                              <1> ;This is done so that the other fields of the DPB can be recycled
   233                              <1> ;Input: rsi = ptr to the BPB
   234                              <1> ;       rbp = ptr to the DPB
   235                              <1> ;bMediaDescriptor
   236 000014A7 8A4615              <1>     mov al, byte [rsi + bpb.media]
   237 000014AA 884522              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   238                              <1> ;bAccessFlag
   239 000014AD C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Not accessed
   240                              <1> ;dFirstFreeCluster
   241 000014B1 C7452C00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   242                              <1> ;dNumberOfFreeClusters
   243 000014B8 C74530FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   244                              <1> ;bBytesPerSectorShift
   245 000014BF 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   246 000014C3 B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   247 000014C5 66D3E8              <1>     shr ax, cl  ;Shift down
   248                              <1> .cd0:
   249 000014C8 66D1E8              <1>     shr ax, 1
   250 000014CB 7404                <1>     jz .cd1
   251 000014CD FEC1                <1>     inc cl
   252 000014CF EBF7                <1>     jmp short .cd0
   253                              <1> .cd1:
   254 000014D1 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   255                              <1> ;bMaxSectorInCluster
   256 000014D4 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   257 000014D7 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   258 000014D9 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   259                              <1> ;bSectorsPerClusterShift
   260 000014DC FEC0                <1>     inc al
   261 000014DE 30C9                <1>     xor cl, cl
   262                              <1> .cd2:
   263 000014E0 D0E8                <1>     shr al, 1
   264 000014E2 7404                <1>     jz .cd3
   265 000014E4 FEC1                <1>     inc cl
   266 000014E6 EBF8                <1>     jmp short .cd2
   267                              <1> .cd3:
   268 000014E8 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   269                              <1> ;wFAToffset, number of reserved sectors in partition
   270 000014EB 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   271 000014EF 66894505            <1>     mov word [rbp + dpb.wFAToffset], ax
   272                              <1> ;bNumberOfFATs
   273 000014F3 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   274 000014F6 884507              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   275                              <1> ;wNumberRootDirSectors
   276 000014F9 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   277 000014FD C1E005              <1>     shl eax, 5  ;Multiply by 32
   278 00001500 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   279 00001504 FFC9                <1>     dec ecx
   280 00001506 01C8                <1>     add eax, ecx
   281 00001508 31D2                <1>     xor edx, edx    ;Clear for divide
   282 0000150A F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   283 0000150C 66894508            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   284                              <1> ;dFATlength, get the FAT length
   285 00001510 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   286 00001514 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   287 00001517 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   288 00001519 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   289 0000151C 894512              <1>     mov dword [rbp + dpb.dFATlength], eax
   290                              <1> ;Complex cases below...
   291                              <1> ;dClusterHeapOffset, start sector of the data area
   292 0000151F 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   293 00001523 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   294 00001526 85C0                <1>     test eax, eax
   295 00001528 0F44C3              <1>     cmovz eax, ebx
   296                              <1> ;eax = FATsz
   297 0000152B 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   298 0000152F 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   299 00001532 85DB                <1>     test ebx, ebx
   300 00001534 0F44D9              <1>     cmovz ebx, ecx 
   301                              <1> ;ebx = TotSec
   302 00001537 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   303 0000153A 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   304                              <1> .cd4:
   305 0000153C 01C2                <1>     add edx, eax
   306 0000153E FEC9                <1>     dec cl
   307 00001540 75FA                <1>     jnz .cd4
   308 00001542 89D0                <1>     mov eax, edx    ;Store product in eax
   309 00001544 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   310 00001548 01D0                <1>     add eax, edx
   311 0000154A 0FB75508            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   312 0000154E 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   313                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   314                              <1>     ;aka eax = Start sector of the data area in volume
   315 00001550 89450A              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   316                              <1> ;dClusterCount
   317 00001553 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   318 00001555 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   319 00001557 31D2                <1>     xor edx, edx
   320 00001559 BB01000000          <1>     mov ebx, 1
   321 0000155E 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   322 00001561 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   323 00001563 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   324 00001565 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   325 00001567 89450E              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   326                              <1> ;dFirstUnitOfRootDir
   327 0000156A 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   328 0000156F 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   329 00001572 7709                <1>     ja .cd5
   330                              <1>     ;Else, we need to find the first sector of the root directory
   331                              <1>     ;Get the start sector of data area in volume 
   332                              <1>     ; and sub the number of sectors in the root directory
   333 00001574 8B450A              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   334 00001577 0FB75D08            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   335 0000157B 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   336                              <1> .cd5:
   337 0000157D 894516              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   338                              <1> ;Exit epilogue
   339 00001580 488B1D(50C10300)    <1>     mov rbx, qword [oldRSP]
   340 00001587 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   341                              <1>     %if DEBUG && DPBINFO
   342                              <1>     ;Print DPB 
   343                              <1>     debugEnterM
   344                              <1>     push rbp
   345                              <1>     lea rbp, .l0000
   346                              <1>     call debPrintNullString
   347                              <1>     pop rbp
   348                              <1>     call debDPBBPBptr
   349                              <1>     call debMakeDebuggerRespond
   350                              <1>     jmp short .l0001
   351                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   352                              <1> .l0001:
   353                              <1>     debugExitM
   354                              <1>     %endif
   355 00001589 C3                  <1>     ret
    30                                  %include "./Source/Kernel/dosMain.asm"
    31                              <1> ;-----------------------------------:
    32                              <1> ;       Misc System routines        :
    33                              <1> ;-----------------------------------:
    34                              <1> findDPB:
    35                              <1> ;Finds the DPB for a given drive
    36                              <1> ;Input:  dl = Drive number (0=A, 1=B etc...)
    37                              <1> ;Output: al = 00, rbp = Pointer to the DPB
    38                              <1> ;        al = -1, Failed, no DPB for device, rbx destroyed
    39 0000158A 488B1D(80C00300)    <1>     mov rbx, qword [dpbHeadPtr]
    40                              <1> .fd1:
    41 00001591 30C0                <1>     xor al, al
    42 00001593 385500              <1>     cmp byte [rbp + dpb.bDriveNumber], dl
    43 00001596 740F                <1>     je .fd2
    44 00001598 488B6D24            <1>     mov rbp, qword [rbp + dpb.qNextDPBPtr]
    45 0000159C B0FF                <1>     mov al, -1
    46 0000159E 4881FDFFFFFFFF      <1>     cmp rbp, -1 ;If rbx followed last item in list, no DPB exists for dl
    47 000015A5 75EA                <1>     jne .fd1
    48                              <1> .fd2:
    49                              <1>     %if DEBUG
    50                              <1>     ;Print DPB 
    51                              <1>     debugEnterM
    52                              <1>     mov r8, rbp ;Save dpb pointer
    53                              <1>     lea rbp, .l0000
    54                              <1>     call debPrintNullString
    55                              <1>     mov rbp, r8
    56                              <1>     call debDPBptr
    57                              <1>     jmp short .l0001
    58                              <1> .l0000 db "Internal call to find DPB",0Ah,0Dh,0
    59                              <1> .l0001:
    60                              <1>     debugExitM
    61                              <1>     %endif
    62 000015A7 C3                  <1>     ret
    63                              <1> 
    64                              <1> ;-----------------------------------:
    65                              <1> ;        Main Kernel dispatch       :
    66                              <1> ;            and routines           :
    67                              <1> ;-----------------------------------:
    68                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    69                              <1> ;ah = Function number, all other registers have various meanings
    70                              <1>  %if DEBUG
    71                              <1>     ;Entry function
    72                              <1>     debugEnterM
    73                              <1>     lea rbp, .l0000
    74                              <1>     call debPrintNullString
    75                              <1>     call debPrintFunctionName
    76                              <1>     jmp short .l0001
    77                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    78                              <1> .l0001:    
    79                              <1>     debugExitM
    80                              <1>     %endif
    81 000015A8 FA                  <1>     cli ;Halt external interrupts
    82 000015A9 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    83 000015AA 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    84 000015AD 0F8721010000        <1>     ja .fdExitBad
    85                              <1>     ;Cherry pick functions
    86 000015B3 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    87 000015B6 722C                <1>     jb .fsbegin   ;If below skip these checks
    88 000015B8 0F8470010000        <1>     je ctrlBreakCheck
    89 000015BE 80FC64              <1>     cmp ah, 64h
    90 000015C1 0F84B0010000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    91 000015C7 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    92 000015C9 80FC51              <1>     cmp ah, 51h
    93 000015CC 0F8493010000        <1>     je getCurrProcessID    ;This and below are exactly the same
    94 000015D2 80FC62              <1>     cmp ah, 62h
    95 000015D5 0F8493010000        <1>     je getPSPaddr          ;Calls the above function
    96 000015DB 80FC50              <1>     cmp ah, 50h
    97 000015DE 0F8478010000        <1>     je setCurrProcessID
    98                              <1> .fsbegin:
    99 000015E4 E806010000          <1>     call dosPushRegs ;Push the usual prologue registers
   100 000015E9 488B05(50C10300)    <1>     mov rax, qword [oldRSP]
   101 000015F0 488905(48C10300)    <1>     mov qword [oldoldRSP], rax
   102 000015F7 FE05(EFC00300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
   103 000015FD 488925(50C10300)    <1>     mov qword [oldRSP], rsp
   104                              <1> ;Network related variable resetting
   105 00001604 C605(60C10300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
   106                              <1> ;Here, we want to save oldRSP in the callers PSP
   107 0000160B 803D(EFC00300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
   108 00001612 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
   109 00001614 488B05(06C10300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
   110 0000161B 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   111                              <1> .fsb1:
   112 0000161F 58                  <1>     pop rax     ;Get old rax back
   113 00001620 50                  <1>     push rax    ;and push it back onto the stack
   114 00001621 488D25(4EC80300)    <1>     lea rsp, critStakTop
   115 00001628 FB                  <1>     sti         ;Reenable interrupts
   116                              <1> 
   117 00001629 C605(47C10300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   118 00001630 48891D(58C10300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   119 00001637 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
   120 0000163A D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   121 0000163C 50                  <1>     push rax        ;Push rax onto the stack
   122 0000163D 488D05D7E9FFFF      <1>     lea rax, kDispTbl
   123 00001644 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   124 00001647 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   125 0000164B 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   126 0000164E 58                  <1>     pop rax
   127                              <1> 
   128 0000164F 84E4                <1>     test ah, ah     ;Simple Terminate function?
   129 00001651 741C                <1>     jz .fddiskOp
   130 00001653 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   131 00001656 7449                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   132 00001658 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   133 0000165B 7712                <1>     ja .fddiskOp
   134                              <1> ;Char operations here
   135 0000165D F605(EEC00300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   136 00001664 753B                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   137 00001666 488D25(D1CE0300)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   138 0000166D EB32                <1>     jmp short .fdGoToFunction
   139                              <1> .fddiskOp:
   140                              <1>     ;Disk operations go here
   141                              <1>     ;Clear up error info
   142 0000166F C605(F1C00300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   143 00001676 C605(EEC00300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   144 0000167D C605(F0C00300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   145                              <1> 
   146 00001684 50                  <1>     push rax
   147 00001685 B482                <1>     mov ah, 82h ;Cancel all critical section!
   148 00001687 CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   149 00001689 58                  <1>     pop rax
   150                              <1> 
   151 0000168A C605(47C10300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   152 00001691 488D25(11D50300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   153 00001698 F605(23C10300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   154 0000169F 7400                <1>     jz .fdGoToFunction
   155                              <1> ; HANDLE CTRL+BREAK HERE!
   156                              <1> .fdGoToFunction:
   157 000016A1 48871D(58C10300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   158                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   159                              <1>     ;
   160                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   161                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   162                              <1>     ;
   163                              <1>     %if DEBUG && REGS
   164                              <1>     ;Print stack if necessary function
   165                              <1>     debugEnterM
   166                              <1>     call debPrintDOSStack
   167                              <1>     debugExitM
   168                              <1>     %endif
   169 000016A8 FF15(58C10300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   170                              <1>     %if DEBUG
   171                              <1>     ;Entry function
   172                              <1>     debugEnterM
   173                              <1>     lea rbp, .l0002
   174                              <1>     call debPrintNullString
   175                              <1>     jmp short .l0003
   176                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   177                              <1> .l0003:    
   178                              <1>     debugExitM
   179                              <1>     %endif
   180                              <1>     %if DEBUG && REGS
   181                              <1>     ;Exit function
   182                              <1>     debugEnterM
   183                              <1>     call debPrintDOSStack
   184                              <1>     debugExitM
   185                              <1>     %endif
   186                              <1> .fdExit:
   187 000016AE FA                  <1>     cli     ;Redisable interrupts
   188 000016AF FE0D(EFC00300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   189 000016B5 488B25(50C10300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   190 000016BC 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   191 000016BF 488B05(48C10300)    <1>     mov rax, qword [oldoldRSP]
   192 000016C6 488905(50C10300)    <1>     mov qword [oldRSP], rax
   193 000016CD E806000000          <1>     call dosPopRegs  ;Pop the frame
   194 000016D2 48CF                <1>     iretq
   195                              <1> .fdExitBad:
   196 000016D4 30C0                <1>     xor al, al
   197                              <1> defaultIretq:
   198 000016D6 48CF                <1>     iretq
   199                              <1> dosPopRegs:
   200 000016D8 8F05(F6C00300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   201 000016DE 58                  <1>     pop rax
   202 000016DF 5B                  <1>     pop rbx
   203 000016E0 59                  <1>     pop rcx
   204 000016E1 5A                  <1>     pop rdx
   205 000016E2 5E                  <1>     pop rsi
   206 000016E3 5F                  <1>     pop rdi
   207 000016E4 5D                  <1>     pop rbp
   208 000016E5 4158                <1>     pop r8
   209 000016E7 4159                <1>     pop r9
   210 000016E9 FF25(F6C00300)      <1>     jmp qword [dosReturn]
   211                              <1> dosPushRegs:
   212 000016EF 8F05(F6C00300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   213 000016F5 4151                <1>     push r9
   214 000016F7 4150                <1>     push r8
   215 000016F9 55                  <1>     push rbp
   216 000016FA 57                  <1>     push rdi
   217 000016FB 56                  <1>     push rsi
   218 000016FC 52                  <1>     push rdx
   219 000016FD 51                  <1>     push rcx
   220 000016FE 53                  <1>     push rbx
   221 000016FF 50                  <1>     push rax
   222 00001700 FF25(F6C00300)      <1>     jmp qword [dosReturn]
   223                              <1> dosCrit1Enter:
   224 00001706 C3                  <1>     ret     ;Needs to be patched with 50h (PUSH RAX)
   225 00001707 B801800000          <1>     mov eax, 8001h
   226 0000170C CD4A                <1>     int 4ah
   227 0000170E 58                  <1>     pop rax
   228 0000170F C3                  <1>     ret
   229                              <1> dosCrit1Exit:
   230 00001710 C3                  <1>     ret
   231 00001711 B801810000          <1>     mov eax, 8101h
   232 00001716 CD4A                <1>     int 4ah
   233 00001718 58                  <1>     pop rax
   234 00001719 C3                  <1>     ret
   235                              <1> dosCrit2Enter:
   236 0000171A C3                  <1>     ret
   237 0000171B B802800000          <1>     mov eax, 8002h
   238 00001720 CD4A                <1>     int 4ah
   239 00001722 58                  <1>     pop rax
   240 00001723 C3                  <1>     ret
   241                              <1> dosCrit2Exit:
   242 00001724 C3                  <1>     ret
   243 00001725 B802810000          <1>     mov eax, 8102h
   244 0000172A CD4A                <1>     int 4ah
   245 0000172C 58                  <1>     pop rax
   246 0000172D C3                  <1>     ret
   247                              <1> ;========================================:
   248                              <1> ;      Reentrant Kernel Functions        :
   249                              <1> ;========================================:
   250                              <1> ctrlBreakCheck:    ;ah = 33h
   251 0000172E 84C0                <1>     test al, al
   252 00001730 7508                <1>     jnz .cbcget  ;Get the state or other functions
   253 00001732 8A15(23C10300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   254 00001738 48CF                <1>     iretq
   255                              <1> .cbcget:
   256 0000173A 3C02                <1>     cmp al, 02h
   257 0000173C 771A                <1>     ja .cbcBad
   258 0000173E 740D                <1>     jz .cbcxchg ;Function 2
   259 00001740 52                  <1>     push rdx
   260 00001741 80E201              <1>     and dl, 1   ;Get only the bottom bit
   261 00001744 8815(23C10300)      <1>     mov byte [breakFlag], dl    ;Set the state
   262 0000174A 5A                  <1>     pop rdx
   263 0000174B 48CF                <1>     iretq
   264                              <1> .cbcxchg:
   265 0000174D 80E201              <1>     and dl, 1
   266 00001750 8615(23C10300)      <1>     xchg byte [breakFlag], dl
   267 00001756 48CF                <1>     iretq
   268                              <1> .cbcBad:
   269 00001758 B0FF                <1>     mov al, -1
   270 0000175A 48CF                <1>     iretq
   271                              <1> 
   272                              <1> 
   273                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   274 0000175C 48891D(06C10300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   275 00001763 48CF                <1>     iretq
   276                              <1> 
   277                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   278 00001765 488B15(06C10300)    <1>     mov rdx, qword [currentPSP]
   279 0000176C 48CF                <1>     iretq
   280                              <1> 
   281                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   282 0000176E 488B15(06C10300)    <1>     mov rdx, qword [currentPSP]
   283 00001775 48CF                <1>     iretq
   284                              <1> 
   285                              <1> setDriverLookahead:;ah = 64h, reserved
   286 00001777 48CF                <1>     iretq
   287                              <1> 
   288                              <1> ;========================================:
   289                              <1> ;            Kernel Functions            :
   290                              <1> ;========================================:
   291                              <1> diskReset:         ;ah = 0Dh
   292                              <1> ;Flush all dirty buffers to disk
   293 00001779 488B2D(A2C00300)    <1>     mov rbp, qword [bufHeadPtr]
   294                              <1> .drCheckBuffer:
   295 00001780 F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   296 00001784 7407                <1>     jz .drGotoNextBuffer
   297                              <1> .drFlushBuffer:
   298 00001786 E8BBEEFFFF          <1>     call flushBuffer    ;Called with rbp = buffer header
   299 0000178B 720E                <1>     jc .drError
   300                              <1> .drGotoNextBuffer:
   301 0000178D 488B6D00            <1>     mov rbp, qword [rbp + bufferHdr.nextBufPtr]
   302 00001791 4881FDFFFFFFFF      <1>     cmp rbp, -1     ;If rbp points to -1, exit
   303 00001798 75E6                <1>     jne .drCheckBuffer
   304 0000179A C3                  <1>     ret
   305                              <1> .drError:
   306                              <1> ;Abort/Retry/Ignore
   307                              <1> ;Abort returns to DOS, 
   308                              <1> ;Retry retries the write on the buffer, 
   309                              <1> ;Ignore marks the buffer as clean and proceeds as normal
   310 0000179B 8A4509              <1>     mov al, byte [rbp + bufferHdr.bufferFlags]
   311 0000179E 240F                <1>     and al, 0Fh ;Clear the upper nybble
   312 000017A0 B431                <1>     mov ah, 31h ;Disk Error, Ignore,Retry and Write operation
   313 000017A2 3C01                <1>     cmp al, dosBuffer
   314 000017A4 740F                <1>     je .drErrorMain
   315 000017A6 80C402              <1>     add ah, 2
   316 000017A9 3C02                <1>     cmp al, fatBuffer
   317 000017AB 7408                <1>     je .drErrorMain
   318 000017AD 80C402              <1>     add ah, 2
   319 000017B0 3C04                <1>     cmp al, dirBuffer
   320 000017B2 80C402              <1>     add ah, 2
   321                              <1> .drErrorMain:
   322 000017B5 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   323 000017B8 488B7517            <1>     mov rsi, qword [rbp + bufferHdr.driveDPBPtr]
   324 000017BC 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   325 000017C0 668B3D(51C00300)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]    ;Disk error occured!
   326 000017C7 6681E7FF00          <1>     and di, 0FFh    ;Only bottom byte
   327 000017CC 66893D(F2C00300)    <1>     mov word [errorExCde], di     ;Save driver error code
   328 000017D3 668105(F2C00300)13- <1>     add word [errorExCde], drvErrShft    ;Add offset to driver error codes
   328 000017DB 00                  <1>
   329 000017DC 8805(F0C00300)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   330 000017E2 C605(F1C00300)02    <1>     mov byte [errorLocus], eLocDsk   ;Error in Block Device Request code
   331 000017E9 C605(F5C00300)0B    <1>     mov byte [errorClass], eClsMedia ;Media error (bad BPB or other) code
   332 000017F0 C605(F4C00300)01    <1>     mov byte [errorAction], eActRet   ;Retry request code
   333 000017F7 E845F9FFFF          <1>     call criticalDOSError       ;Critical error handler
   334 000017FC 84C0                <1>     test al, al ;Ignore the troublesome buffer and mark it as free
   335 000017FE 7406                <1>     jz .drIgnore
   336 00001800 3C01                <1>     cmp al, 1   ;Retry flushing the buffer
   337 00001802 7482                <1>     je .drFlushBuffer
   338 00001804 CD43                <1>     int 43h     ;Abort and fail both abort through int 43h
   339                              <1> .drIgnore:
   340 00001806 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1  ;Mark buffer as free
   341 0000180A E97EFFFFFF          <1>     jmp .drGotoNextBuffer
   342                              <1> 
   343                              <1> selectDisk:        ;ah = 0Eh
   344                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   345 0000180F 8A05(13C00300)      <1>     mov al, byte [numLogDrv]        ;Value 1 based
   346 00001815 8A1D(B2C00300)      <1>     mov bl, byte [lastdrvNum]       ;Value 1 based
   347 0000181B FEC8                <1>     dec al
   348 0000181D FECB                <1>     dec bl
   349 0000181F 38C3                <1>     cmp bl, al
   350 00001821 0F47C3              <1>     cmova eax, ebx    ;If bl > al, move bl to al
   351 00001824 38C2                <1>     cmp dl, al  ;If dl is bigger than al
   352 00001826 7707                <1>     ja .error
   353 00001828 8815(21C10300)      <1>     mov byte [currentDrv], dl   ;Only save dl if it is a valid number
   354 0000182E C3                  <1>     ret ;al = lastdrv as retcode
   355                              <1> .error:
   356 0000182F E809FAFFFF          <1>     call getUserRegs
   357 00001834 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set the CY flag
   358 0000183C B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   359 00001841 668905(F2C00300)    <1>     mov word [errorExCde], ax     
   360 00001848 C605(F1C00300)01    <1>     mov byte [errorLocus], eLocUnk    ;Not appropriate
   361 0000184F C605(F5C00300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   362 00001856 C605(F4C00300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   363 0000185D C3                  <1>     ret
   364                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   365 0000185E 8A05(21C10300)      <1>     mov al, byte [currentDrv]
   366 00001864 C3                  <1>     ret
   367                              <1> FATinfoDefault:    ;ah = 1Bh
   368 00001865 30D2                <1>     xor dl, dl
   369                              <1> FATinfoDevice:     ;ah = 1Ch
   370                              <1> ;Return in:
   371                              <1> ;   al = Number of sectors per cluster
   372                              <1> ;   edx = Number of clusters
   373                              <1> ;   cx =  Size of a clsuter
   374 00001867 84D2                <1>     test dl, dl
   375 00001869 7508                <1>     jnz .fidSkipdefault
   376 0000186B 8A15(21C10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   377 00001871 FEC2                <1>     inc dl
   378                              <1> .fidSkipdefault:
   379 00001873 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   380                              <1> ;Walk the dpb chain manually
   381 00001875 E810FDFFFF          <1>     call findDPB    ;Get in rbp the dpb pointer for drive dl
   382 0000187A 84C0                <1>     test al, al
   383 0000187C 7431                <1>     jz .fidDPBFound
   384                              <1> ;Else, we at an error.
   385                              <1> ;Simply return with CY set and error code in al with extended error info
   386 0000187E E8BAF9FFFF          <1>     call getUserRegs
   387 00001883 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set the CY flag
   388 0000188B B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   389 00001890 66C705(F2C00300)0F- <1>     mov word [errorExCde], errBadDrv     
   389 00001898 00                  <1>
   390 00001899 C605(F1C00300)01    <1>     mov byte [errorLocus], eLocUnk    ;Not appropriate
   391 000018A0 C605(F5C00300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   392 000018A7 C605(F4C00300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   393 000018AE C3                  <1>     ret
   394                              <1> .fidDPBFound:
   395 000018AF 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   396 000018B2 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   397 000018B4 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   398 000018B7 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   399 000018BA BB01000000          <1>     mov ebx, 1
   400 000018BF D3E3                <1>     shl ebx, cl
   401 000018C1 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   402 000018C3 488D5D22            <1>     lea rbx, qword [rbp + dpb.bMediaDescriptor]
   403 000018C7 E871F9FFFF          <1>     call getUserRegs
   404 000018CC 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   405 000018D0 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   406 000018D4 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   407 000018D8 C3                  <1>     ret
   408                              <1> ;===============================
   409                              <1> setIntVector:      ;ah = 25h
   410                              <1> ;Called with:
   411                              <1> ;   rdx = Pointer to interrupt handler
   412                              <1> ;   al = Interrupt number
   413 000018D9 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   414 000018DB 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   415                              <1> ;First call to get default BIOS segement selector and attribute word
   416 000018E1 88C3                <1>     mov bl, al  ;Set interrupt number 
   417 000018E3 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   418 000018E8 CD35                <1>     int 35h
   419 000018EA E84EF9FFFF          <1>     call getUserRegs
   420 000018EF 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   421 000018F3 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   422 000018F5 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   423                              <1> ;dx preserves the attribute word
   424 000018F7 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   425 000018FC CD35                <1>     int 35h
   426 000018FE E83AF9FFFF          <1>     call getUserRegs
   427 00001903 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Preserve low byte of rax
   428 00001905 C3                  <1>     ret
   429                              <1> createNewPSP:      ;ah = 26h
   430 00001906 C3                  <1>     ret
   431                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   432 00001907 8805(24C10300)      <1>     mov byte [verifyFlag], al
   433 0000190D 8025(24C10300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   434 00001914 C3                  <1>     ret
   435                              <1> getDOSversion:     ;ah = 30h
   436 00001915 E823F9FFFF          <1>     call getUserRegs
   437 0000191A 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   438 0000191C 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   439 0000191F 668B05DAE6FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   440 00001926 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   441 00001929 C3                  <1>     ret
   442                              <1> 
   443                              <1> 
   444                              <1> 
   445                              <1> getInDOSflagPtr:   ;ah = 34h
   446 0000192A 488D15(EFC00300)    <1>     lea rdx, inDOS
   447 00001931 E807F9FFFF          <1>     call getUserRegs
   448 00001936 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   449 0000193A C3                  <1>     ret
   450                              <1> getIntVector:      ;ah = 35h
   451                              <1> ;Called with:
   452                              <1> ;   al = Interrupt Number
   453                              <1> ;Returns:
   454                              <1> ;   rbx = Pointer to interrupt handler
   455 0000193B 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   456 0000193D B807F00000          <1>     mov eax, 0F007h
   457 00001942 CD35                <1>     int 35h
   458 00001944 E8F4F8FFFF          <1>     call getUserRegs
   459 00001949 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   460 0000194D 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   461 0000194F C3                  <1>     ret
   462                              <1> getDiskFreeSpace:  ;ah = 36h
   463 00001950 84D2                <1>     test dl, dl
   464 00001952 7508                <1>     jnz .gdfsSkipdefault
   465 00001954 8A15(21C10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   466 0000195A FEC2                <1>     inc dl
   467                              <1> .gdfsSkipdefault:
   468 0000195C FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   469 0000195E E827FCFFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   470 00001963 84C0                <1>     test al, al
   471 00001965 7431                <1>     jz .gdfsDPBFound
   472                              <1> ;Else, we at an error.
   473                              <1> ;Simply return with CY set and error code in al with extended error info
   474 00001967 66C705(F2C00300)0F- <1>     mov word [errorExCde], errBadDrv     ;Invalid drive error
   474 0000196F 00                  <1>
   475 00001970 C605(F1C00300)02    <1>     mov byte [errorLocus], eLocDsk    ;Not appropriate
   476 00001977 C605(F5C00300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   477 0000197E C605(F4C00300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   478 00001985 E8B3F8FFFF          <1>     call getUserRegs
   479 0000198A 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   480 0000198F 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set CF=CY
   481 00001997 C3                  <1>     ret
   482                              <1> .gdfsDPBFound:
   483 00001998 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   484 0000199B FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   485 0000199D 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   486 000019A0 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   487 000019A3 BB01000000          <1>     mov ebx, 1
   488 000019A8 D3E3                <1>     shl ebx, cl
   489 000019AA 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   490 000019AC 8B5D30              <1>     mov ebx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   491 000019AF E889F8FFFF          <1>     call getUserRegs
   492 000019B4 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   493 000019B8 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   494 000019BC 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   495 000019C0 C3                  <1>     ret
   496                              <1> 
   497                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   498 000019C1 31C0                <1>     xor eax, eax
   499 000019C3 668705(1EC10300)    <1>     xchg ax, word [errorLevel]
   500 000019CA E86EF8FFFF          <1>     call getUserRegs
   501 000019CF 668906              <1>     mov word [rsi + callerFrame.rax], ax
   502 000019D2 C3                  <1>     ret
   503                              <1> 
   504                              <1> getSysVarsPtr:     ;ah = 52h
   505 000019D3 488D15(80C00300)    <1>     lea rdx, sysVarsPtr
   506 000019DA E85EF8FFFF          <1>     call getUserRegs
   507 000019DF 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   508 000019E3 C3                  <1>     ret
   509                              <1> getVerifySetting:  ;ah = 54h
   510 000019E4 8A05(24C10300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   511 000019EA C3                  <1>     ret
   512                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   513 000019EB C3                  <1>     ret
   514                              <1> getExtendedError:  ;ah = 59h
   515 000019EC E84CF8FFFF          <1>     call getUserRegs
   516 000019F1 668B05(F2C00300)    <1>     mov ax, word [errorExCde]
   517 000019F8 8A2D(F1C00300)      <1>     mov ch, byte [errorLocus]
   518 000019FE 8A3D(F5C00300)      <1>     mov bh, byte [errorClass]
   519 00001A04 8A1D(F4C00300)      <1>     mov bl, byte [errorAction]
   520 00001A0A 668906              <1>     mov word [rsi + callerFrame.rax], ax
   521 00001A0D 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   522 00001A11 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   523 00001A14 C3                  <1>     ret
   524                              <1> getCritErrorInfo:  ;ah = 5Dh
   525                              <1> networkServices:   ;ah = 5Eh, do nothing
   526                              <1> networkRedirection:;ah = 5Fh, do nothing
   527 00001A15 C3                  <1>     ret
   528                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   529                              <1> return:
   530 00001A16 C3                  <1>     ret
    31                                  %include "./Source/Kernel/multiplx.asm"
    32                              <1> ;Default multiplexer. Current only installed function is ah=12h
    33                              <1> 
    34                              <1> multiplexHdlr:          ;Int 4Fh, kept as iretq for now
    35 00001A17 48CF                <1>     iretq
    32                                  %include "./Source/Misc/int44h.asm"
    33                              <1> critErrorHandler:   ;Int 44h
    34                              <1> ;User Stack in usage here, must be swapped to before this is called
    35                              <1> ;Entered with:  
    36                              <1> ;               AH = Critical Error Bitfield
    37                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    38                              <1> ;               Bit 6 - Reserved
    39                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    40                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    41                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    42                              <1> ;               Bits [2-1] = Affected Disk Error
    43                              <1> ;                     0 0   DOS area
    44                              <1> ;                     0 1   FAT area
    45                              <1> ;                     1 0   Directory area
    46                              <1> ;                     1 1   Data area
    47                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    48                              <1> ;               AL  = Failing drive number if AH[7] = 0
    49                              <1> ;               DIL = Error code for errorMsg
    50                              <1> ;               RSI = EA of Device Header for which device the error occured
    51                              <1> ;Return:
    52                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    53                              <1> ;                  = 1 - Retry the Operation    (Retry)
    54                              <1> ;                  = 2 - Terminate the Program  (Abort)
    55                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    56 00001A19 53                  <1>     push rbx
    57 00001A1A 51                  <1>     push rcx
    58 00001A1B 52                  <1>     push rdx
    59 00001A1C 57                  <1>     push rdi
    60 00001A1D 56                  <1>     push rsi
    61 00001A1E FC                  <1>     cld         ;Make String ops go forward
    62                              <1> 
    63 00001A1F 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    64 00001A22 488D155E020000      <1>     lea rdx, qword [.crlf]
    65 00001A29 B409                <1>     mov ah, 09h ;Print String
    66 00001A2B CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    67                              <1> 
    68 00001A2D 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    69 00001A33 B90C000000          <1>     mov ecx, 0Ch
    70 00001A38 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    71 00001A3A 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    72 00001A3D 480FB7FF            <1>     movzx rdi, di
    73 00001A41 4889FA              <1>     mov rdx, rdi    ;Copy error code
    74 00001A44 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    75 00001A48 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    76 00001A4B 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    77 00001A4E 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    78 00001A55 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    79 00001A59 B409                <1>     mov ah, 09h ;Print String
    80 00001A5B CD41                <1>     int 41h     ;Call DOS to print first part of message
    81                              <1> 
    82 00001A5D 488D1505020000      <1>     lea rdx, qword [.readmsg]
    83 00001A64 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    84 00001A6B F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    85 00001A6E 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    86 00001A72 B409                <1>     mov ah, 09h ;Print String
    87 00001A74 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    88                              <1> 
    89 00001A76 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    90 00001A79 0F85DF000000        <1>     jnz .charError
    91                              <1> ;Disk error continues here
    92 00001A7F 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    93 00001A86 B409                <1>     mov ah, 09h
    94 00001A88 CD41                <1>     int 41h
    95 00001A8A 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    96 00001A8C 80C241              <1>     add dl, "A" ;Add ASCII code
    97 00001A8F B402                <1>     mov ah, 02h ;Print char in dl
    98 00001A91 CD41                <1>     int 41h
    99                              <1> .userInput:
   100 00001A93 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   101 00001A9A B409                <1>     mov ah, 09h
   102 00001A9C CD41                <1>     int 41h
   103                              <1> ;Abort, Retry, Ignore, Fail is word order
   104                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   105                              <1> .userAbort:
   106                              <1> ;Abort is always an option
   107 00001A9E 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   108 00001AA5 B409                <1>     mov ah, 09h
   109 00001AA7 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   110                              <1> .userRetry:
   111 00001AA9 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   112 00001AAC 7416                <1>     jz .userIgnore    ;If clear, dont print message
   113 00001AAE 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   114 00001AB5 B409                <1>     mov ah, 09h
   115 00001AB7 CD41                <1>     int 41h
   116 00001AB9 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   117 00001AC0 B409                <1>     mov ah, 09h
   118 00001AC2 CD41                <1>     int 41h
   119                              <1> .userIgnore:
   120 00001AC4 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   121 00001AC7 7416                <1>     jz .userFail
   122 00001AC9 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   123 00001AD0 B409                <1>     mov ah, 09h
   124 00001AD2 CD41                <1>     int 41h
   125 00001AD4 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   126 00001ADB B409                <1>     mov ah, 09h
   127 00001ADD CD41                <1>     int 41h
   128                              <1> .userFail:
   129 00001ADF F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   130 00001AE2 7416                <1>     jz .userMsgEnd
   131 00001AE4 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   132 00001AEB B409                <1>     mov ah, 09h
   133 00001AED CD41                <1>     int 41h
   134 00001AEF 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   135 00001AF6 B409                <1>     mov ah, 09h
   136 00001AF8 CD41                <1>     int 41h
   137                              <1> .userMsgEnd:
   138 00001AFA 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   139 00001B01 B409                <1>     mov ah, 09h
   140 00001B03 CD41                <1>     int 41h
   141                              <1> ;Get user input now 
   142 00001B05 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   143 00001B07 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   144 00001B0E B401                <1>     mov ah, 01h ;STDIN without Console Echo
   145 00001B10 CD41                <1>     int 41h ;Get char in al
   146 00001B12 3C61                <1>     cmp al, "a" ;Chack if lowercase
   147 00001B14 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   148 00001B16 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   149                              <1> .uip1:
   150 00001B18 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   151 00001B19 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   152 00001B1B FFC1                <1>     inc ecx
   153 00001B1D 81F904000000        <1>     cmp ecx, 4
   154 00001B23 75F3                <1>     jne .uip1
   155 00001B25 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   156                              <1> .validInput:
   157 00001B2A 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   158                              <1> ;Now check if the input is permitted
   159 00001B2C 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   160 00001B2E 7427                <1>     je .cehExit
   161 00001B30 84C0                <1>     test al, al ;Check if 0 => Ignore
   162 00001B32 740F                <1>     je .viIgnore
   163 00001B34 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   164 00001B36 7416                <1>     je .viRetry
   165                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   166 00001B38 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   167 00001B3B 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   168 00001B41 EB14                <1>     jmp short .cehExit
   169                              <1> .viIgnore:
   170 00001B43 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   171 00001B46 0F8447FFFFFF        <1>     jz .userInput
   172 00001B4C EB09                <1>     jmp short .cehExit
   173                              <1> .viRetry:
   174 00001B4E F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   175 00001B51 0F843CFFFFFF        <1>     jz .userInput
   176                              <1> .cehExit:
   177 00001B57 5E                  <1>     pop rsi
   178 00001B58 5F                  <1>     pop rdi
   179 00001B59 5A                  <1>     pop rdx
   180 00001B5A 59                  <1>     pop rcx
   181 00001B5B 5B                  <1>     pop rbx
   182 00001B5C 48CF                <1>     iretq
   183                              <1> .charError:
   184 00001B5E B908000000          <1>     mov ecx, 8  ;8 chars in device name
   185 00001B63 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   186                              <1> .ce1:
   187 00001B6A AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   188 00001B6B 88C2                <1>     mov dl, al  ;Move char into dl
   189 00001B6D B402                <1>     mov ah, 02h
   190 00001B6F CD41                <1>     int 41h ;Print char
   191 00001B71 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   192 00001B73 E91BFFFFFF          <1>     jmp .userInput
   193                              <1> 
   194                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   195 00001B78 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   195 00001B81 746563742024202020  <1>
   196 00001B8A 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   196 00001B93 6E6974202420202020  <1>
   197 00001B9C 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   197 00001BA5 202420202020202020  <1>
   198 00001BAE 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   198 00001BB7 6F6D6D616E64202420  <1>
   199 00001BC0 446174612024202020- <1>             db "Data $            "       ;Error 4
   199 00001BC9 202020202020202020  <1>
   200 00001BD2 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   200 00001BDB 737420242020202020  <1>
   201 00001BE4 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   201 00001BED 202020202020202020  <1>
   202 00001BF6 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   202 00001BFF 656469612024202020  <1>
   203 00001C08 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   203 00001C11 7420466F756E642024  <1>
   204 00001C1A 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   204 00001C23 706572202420202020  <1>
   205 00001C2C 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   205 00001C35 6C7420242020202020  <1>
   206 00001C3E 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   206 00001C47 742024202020202020  <1>
   207 00001C50 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   207 00001C59 61696C757265202420  <1>
   208                              <1> 
   209 00001C62 64726976652024      <1> .drive      db "drive $"
   210 00001C69 6572726F7220726561- <1> .readmsg    db "error reading $"
   210 00001C72 64696E672024        <1>
   211 00001C78 6572726F7220777269- <1> .writemsg   db "error writing $"
   211 00001C81 74696E672024        <1>
   212 00001C87 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   213 00001C8A 41626F727424        <1> .abortmsg   db "Abort$" 
   214 00001C90 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   215 00001C97 526574727924        <1> .retrymsg   db "Retry$"
   216 00001C9D 4661696C24          <1> .failmsg    db "Fail$"
   217 00001CA2 2C2024              <1> .betweenMsg db ", $"
   218 00001CA5 3F2024              <1> .endMsg     db "? $"
   219 00001CA8 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    33                                  %include "./Source/Drivers/drvData.asm"
    34                              <1> ;-----------------------------------:
    35                              <1> ;          Driver routines          :
    36                              <1> ;-----------------------------------:
    37                              <1> drivers:
    38                              <1> conHdr:
    39 00001CAC [CE1C000000000000]  <1>     dq auxHdr
    40 00001CB4 1308                <1>     dw 0813h
    41 00001CB6 [4C1E000000000000]  <1>     dq commonStrat
    42 00001CBE [5B1E000000000000]  <1>     dq conDriver
    43 00001CC6 434F4E2020202020    <1>     db "CON     "
    44                              <1> auxHdr:
    45 00001CCE [F01C000000000000]  <1>     dq prnHdr
    46 00001CD6 0080                <1>     dw 08000h
    47 00001CD8 [4C1E000000000000]  <1>     dq commonStrat
    48 00001CE0 [2821000000000000]  <1>     dq com1Intr
    49 00001CE8 4155582020202020    <1>     db "AUX     "
    50                              <1> prnHdr:
    51 00001CF0 [121D000000000000]  <1>     dq clkHdr
    52 00001CF8 40A0                <1>     dw 0A040h
    53 00001CFA [541E000000000000]  <1>     dq nulStrat
    54 00001D02 [5A1E000000000000]  <1>     dq nulIntr
    55 00001D0A 50524E2020202020    <1>     db "PRN     "
    56                              <1> clkHdr:
    57 00001D12 [341D000000000000]  <1>     dq msdHdr
    58 00001D1A 0880                <1>     dw 08008h
    59 00001D1C [4C1E000000000000]  <1>     dq commonStrat
    60 00001D24 [9B1F000000000000]  <1>     dq clkDriver
    61 00001D2C 434C4F434B242020    <1>     db "CLOCK$  "
    62                              <1> msdHdr:
    63 00001D34 [561D000000000000]  <1>     dq com1Hdr
    64 00001D3C 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    65 00001D3E [4C1E000000000000]  <1>     dq commonStrat
    66 00001D46 [CD22000000000000]  <1>     dq msdDriver
    67 00001D4E 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    68                              <1> com1Hdr:
    69 00001D56 [781D000000000000]  <1>     dq com2Hdr
    70 00001D5E 0080                <1>     dw 08000h
    71 00001D60 [4C1E000000000000]  <1>     dq commonStrat
    72 00001D68 [2821000000000000]  <1>     dq com1Intr
    73 00001D70 434F4D3120202020    <1>     db "COM1    "
    74                              <1> com2Hdr:
    75 00001D78 [9A1D000000000000]  <1>     dq com3Hdr
    76 00001D80 0080                <1>     dw 08000h
    77 00001D82 [4C1E000000000000]  <1>     dq commonStrat
    78 00001D8A [3121000000000000]  <1>     dq com2Intr
    79 00001D92 434F4D3220202020    <1>     db "COM2    "
    80                              <1> com3Hdr:
    81 00001D9A [BC1D000000000000]  <1>     dq com4Hdr
    82 00001DA2 0080                <1>     dw 08000h
    83 00001DA4 [4C1E000000000000]  <1>     dq commonStrat
    84 00001DAC [3A21000000000000]  <1>     dq com3Intr
    85 00001DB4 434F4D3320202020    <1>     db "COM3    "
    86                              <1> com4Hdr:
    87 00001DBC [DE1D000000000000]  <1>     dq lpt1Hdr
    88 00001DC4 0080                <1>     dw 08000h
    89 00001DC6 [4C1E000000000000]  <1>     dq commonStrat
    90 00001DCE [4321000000000000]  <1>     dq com4Intr
    91 00001DD6 434F4D3420202020    <1>     db "COM4    "
    92                              <1> lpt1Hdr:
    93 00001DDE [001E000000000000]  <1>     dq lpt2Hdr
    94 00001DE6 40A0                <1>     dw 0A040h
    95 00001DE8 [541E000000000000]  <1>     dq nulStrat
    96 00001DF0 [5A1E000000000000]  <1>     dq nulIntr
    97 00001DF8 4C50543120202020    <1>     db "LPT1    "
    98                              <1> lpt2Hdr:
    99 00001E00 [221E000000000000]  <1>     dq lpt3Hdr
   100 00001E08 40A0                <1>     dw 0A040h
   101 00001E0A [541E000000000000]  <1>     dq nulStrat
   102 00001E12 [5A1E000000000000]  <1>     dq nulIntr
   103 00001E1A 4C50543220202020    <1>     db "LPT2    "
   104                              <1> lpt3Hdr:
   105 00001E22 FFFFFFFFFFFFFFFF    <1>     dq -1
   106 00001E2A 40A0                <1>     dw 0A040h
   107 00001E2C [541E000000000000]  <1>     dq nulStrat
   108 00001E34 [5A1E000000000000]  <1>     dq nulIntr
   109 00001E3C 4C50543320202020    <1>     dq "LPT3    "
   110 00001E44 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    34                                  %include "./Source/Drivers/charDrv.asm"
    35                              <1> commonStrat:
    36                              <1> ;DOS calls this function with rbx=Ptr to request header
    37 00001E4C 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    38 00001E53 C3                  <1>     ret
    39                              <1> nulStrat:
    40 00001E54 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    41                              <1> nulIntr:
    42 00001E5A C3                  <1>     ret
    43                              <1> conDriver:
    44 00001E5B 50                  <1>     push rax
    45 00001E5C 53                  <1>     push rbx
    46 00001E5D 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    47 00001E64 B003                <1>     mov al, 03h ;Unknown Command
    48 00001E66 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    49 00001E6A 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    50                              <1> 
    51 00001E6C 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    52 00001E6F 3C04                <1>     cmp al, 4
    53 00001E71 743D                <1>     jz .conRead
    54 00001E73 3C05                <1>     cmp al, 5
    55 00001E75 747F                <1>     jz .conNondestructiveRead
    56 00001E77 3C06                <1>     cmp al, 6
    57 00001E79 0F84A8000000        <1>     jz .conInputStatus
    58 00001E7F 3C07                <1>     cmp al, 7
    59 00001E81 0F84B0000000        <1>     jz .conFlushInputBuffers
    60 00001E87 3C08                <1>     cmp al, 8
    61 00001E89 0F84CA000000        <1>     jz .conWrite
    62 00001E8F 3C09                <1>     cmp al, 9
    63 00001E91 0F84C2000000        <1>     jz .conWrite
    64 00001E97 3C0A                <1>     cmp al, 0Ah
    65 00001E99 0F84E3000000        <1>     jz .conOutputStatus
    66 00001E9F EB06                <1>     jmp short .conExit  ;All other valid functions return done
    67                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    68 00001EA1 B480                <1>     mov ah, 80h ;Set error bit
    69 00001EA3 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    70                              <1> .conExit:
    71 00001EA7 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    72 00001EAD 5B                  <1>     pop rbx
    73 00001EAE 58                  <1>     pop rax
    74 00001EAF C3                  <1>     ret
    75                              <1> .conRead:    ;Function 4
    76 00001EB0 B005                <1>     mov al, 05h ;Bad request structure length?
    77 00001EB2 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    78 00001EB5 75EA                <1>     jne .conWriteErrorCode
    79                              <1> 
    80 00001EB7 57                  <1>     push rdi
    81 00001EB8 51                  <1>     push rcx
    82 00001EB9 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    83 00001EBD 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    84                              <1> .cre1:
    85 00001EBF 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    86 00001EC2 741C                <1>     je .cre2
    87 00001EC4 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    88 00001ECB 751A                <1>     jnz .cre3   ;No, get the buffer value
    89 00001ECD 31C0                <1>     xor eax, eax
    90 00001ECF CD36                <1>     int 36h
    91                              <1> .cre11:
    92 00001ED1 AA                  <1>     stosb
    93 00001ED2 84C0                <1>     test al, al ;Was the ascii code 0?
    94 00001ED4 7506                <1>     jnz .cre12  ;No, skip storing scancode
    95 00001ED6 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    96                              <1> .cre12:
    97 00001EDC FFC1                <1>     inc ecx ;Inc chars stored in buffer
    98 00001EDE EBDF                <1>     jmp short .cre1
    99                              <1> .cre2:
   100 00001EE0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   101 00001EE3 59                  <1>     pop rcx
   102 00001EE4 5F                  <1>     pop rdi
   103 00001EE5 EBC0                <1>     jmp short .conExit
   104                              <1> .cre3:
   105 00001EE7 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   106 00001EED C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   107 00001EF4 EBDB                <1>     jmp short .cre11
   108                              <1> 
   109                              <1> .conNondestructiveRead:  ;Function 5
   110 00001EF6 B005                <1>     mov al, 05h ;Bad request structure length?
   111 00001EF8 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   112 00001EFB 75A4                <1>     jne .conWriteErrorCode
   113 00001EFD 803D8E00000000      <1>     cmp byte [.conBuf], 0
   114 00001F04 7519                <1>     jnz .cnr2
   115 00001F06 B401                <1>     mov ah, 01h     ;Get key if exists
   116 00001F08 CD36                <1>     int 36h
   117 00001F0A 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   118                              <1>     ;Keystroke available
   119                              <1> .cnr0:
   120 00001F0C 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   121 00001F0F E993FFFFFF          <1>     jmp .conExit
   122                              <1> .cnr1: ;No keystroke available
   123 00001F14 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   124 00001F1A E988FFFFFF          <1>     jmp .conExit
   125                              <1> .cnr2:
   126 00001F1F 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   127 00001F25 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   128                              <1> 
   129                              <1> .conInputStatus:         ;Function 6
   130 00001F27 B005                <1>     mov al, 05h ;Bad request structure length?
   131 00001F29 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   132 00001F2C 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   133 00001F32 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   134                              <1> 
   135                              <1> .conFlushInputBuffers:   ;Function 7
   136 00001F37 B005                <1>     mov al, 05h ;Bad request structure length?
   137 00001F39 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   138 00001F3C 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   139 00001F42 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   140                              <1> .cfib0:
   141 00001F49 B401                <1>     mov ah, 01      ;Get buffer status
   142 00001F4B CD36                <1>     int 36h
   143 00001F4D 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   144 00001F53 30E4                <1>     xor ah, ah
   145 00001F55 CD36                <1>     int 36h ;Read key to flush from buffer
   146 00001F57 EBF0                <1>     jmp short .cfib0
   147                              <1> 
   148                              <1> .conWrite:   ;Function 8 and 9
   149 00001F59 B005                <1>     mov al, 05h ;Bad request structure length?
   150 00001F5B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   151 00001F5E 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   152                              <1> 
   153 00001F64 56                  <1>     push rsi
   154 00001F65 51                  <1>     push rcx
   155 00001F66 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   156 00001F6A 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   157                              <1> .cw1: 
   158 00001F6C 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   159 00001F6F 7407                <1>     je .cw2
   160 00001F71 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   161 00001F72 CD49                <1>     int 49h ;Fast print char
   162 00001F74 FFC1                <1>     inc ecx
   163 00001F76 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   164                              <1> .cw2:
   165 00001F78 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   166 00001F7B 59                  <1>     pop rcx
   167 00001F7C 5E                  <1>     pop rsi
   168 00001F7D E925FFFFFF          <1>     jmp .conExit
   169                              <1> .conOutputStatus:   ;Function 0Ah
   170 00001F82 B005                <1>     mov al, 05h ;Bad request structure length?
   171 00001F84 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   172 00001F87 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   173 00001F8D E915FFFFFF          <1>     jmp .conExit
   174                              <1> 
   175 00001F92 00                  <1> .conBuf db 0    ;Single byte buffer
   176                              <1> fastOutput:         ;This CON driver supports Int 49h
   177                              <1> ;Called with char to transfer in al
   178 00001F93 50                  <1>     push rax
   179 00001F94 B40E                <1>     mov ah, 0Eh
   180 00001F96 CD30                <1>     int 30h
   181 00001F98 58                  <1>     pop rax
   182 00001F99 48CF                <1>     iretq
   183                              <1> 
   184                              <1> clkDriver:
   185 00001F9B 50                  <1>     push rax
   186 00001F9C 53                  <1>     push rbx
   187 00001F9D 51                  <1>     push rcx
   188 00001F9E 52                  <1>     push rdx
   189 00001F9F 56                  <1>     push rsi
   190 00001FA0 55                  <1>     push rbp
   191 00001FA1 488B1D9CFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   192 00001FA8 B003                <1>     mov al, 03h ;Unknown Command
   193 00001FAA 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   194 00001FAE 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   195                              <1> 
   196 00001FB0 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   197 00001FB3 3C04                <1>     cmp al, 04h
   198 00001FB5 7437                <1>     jz .clkRead
   199 00001FB7 3C06                <1>     cmp al, 06h
   200 00001FB9 0F8494000000        <1>     jz .clkInputStatus
   201 00001FBF 3C07                <1>     cmp al, 07h
   202 00001FC1 0F8498000000        <1>     jz .clkFlushInputBuffers
   203 00001FC7 3C08                <1>     cmp al, 08h
   204 00001FC9 0F84A0000000        <1>     jz .clkWrite
   205 00001FCF 3C09                <1>     cmp al, 09h
   206 00001FD1 0F8498000000        <1>     jz .clkWrite
   207 00001FD7 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   208                              <1> .clkNotFunctioning:
   209 00001FD9 B002                <1>     mov al, 02h ;Device not ready error
   210                              <1> .clkWriteErrorCode:
   211 00001FDB B480                <1>     mov ah, 80h ;Set error bit
   212 00001FDD 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   213                              <1> .clkExit:
   214 00001FE1 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   215 00001FE7 5D                  <1>     pop rbp
   216 00001FE8 5E                  <1>     pop rsi
   217 00001FE9 5A                  <1>     pop rdx
   218 00001FEA 59                  <1>     pop rcx
   219 00001FEB 5B                  <1>     pop rbx
   220 00001FEC 58                  <1>     pop rax
   221 00001FED C3                  <1>     ret
   222                              <1> 
   223                              <1> .clkRead:           ;Function 4
   224 00001FEE B005                <1>     mov al, 05h ;Bad request structure length?
   225 00001FF0 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   226 00001FF3 75E6                <1>     jne .clkWriteErrorCode
   227                              <1> 
   228 00001FF5 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   229 00001FF8 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   230 00001FFC 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   231 00002003 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   232 00002007 30E4                <1>     xor ah, ah
   233 00002009 CD3A                <1>     int 3Ah         ;Read the system timer
   234 0000200B 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   235 0000200D 740D                <1>     jz .clkr1       ;Nope, now just time 
   236 0000200F 30E4                <1>     xor ah, ah
   237                              <1>     ;This works as al should keep count of the # of days passed since last read
   238 00002011 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   239 00002015 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   240                              <1> .clkr1:
   241 0000201C 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   242 0000201F 0FB7D2              <1>     movzx edx, dx
   243 00002022 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   244 00002024 89D0                <1>     mov eax, edx
   245 00002026 31D2                <1>     xor edx, edx
   246 00002028 89D8                <1>     mov eax, ebx
   247 0000202A B944040000          <1>     mov ecx, 1092   
   248 0000202F F7F1                <1>     div ecx
   249 00002031 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   250 00002034 89D0                <1>     mov eax, edx    ;Get remainder in eax
   251 00002036 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   252 0000203A 31D2                <1>     xor edx, edx
   253 0000203C B95B000000          <1>     mov ecx, 91 ;5*18.2
   254 00002041 F7F1                <1>     div ecx
   255 00002043 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   256 00002046 89D0                <1>     mov eax, edx    ;Get remainder in eax
   257                              <1>     ;lea eax, dword [eax + 4*eax]
   258                              <1>     ;add eax, edx    ;Essentially multiply by 6
   259 00002048 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   260 0000204B 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   261 0000204E E98EFFFFFF          <1>     jmp .clkExit
   262                              <1> 
   263                              <1> .clkInputStatus:    ;Function 6
   264                              <1> ;Always return ready
   265 00002053 B005                <1>     mov al, 05h ;Bad request structure length?
   266 00002055 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   267 00002058 7581                <1>     jne .clkWriteErrorCode
   268 0000205A E982FFFFFF          <1>     jmp .clkExit
   269                              <1> .clkFlushInputBuffers:  ;Function 7
   270                              <1> ;Always return done immediately
   271 0000205F B005                <1>     mov al, 05h ;Bad request structure length?
   272 00002061 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   273 00002064 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   274 0000206A E972FFFFFF          <1>     jmp .clkExit
   275                              <1> 
   276                              <1> .clkWrite:          ;Functions 8 and 9
   277 0000206F B005                <1>     mov al, 05h ;Bad request structure length?
   278 00002071 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   279 00002074 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   280                              <1> 
   281 0000207A 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   282 0000207D 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   283 00002081 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   284 00002085 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   285                              <1> 
   286 0000208C 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   287 0000208E 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   288 00002092 B105                <1>     mov cl, 5
   289 00002094 F6F1                <1>     div cl          ;Divide al by 5
   290 00002096 30E4                <1>     xor ah, ah      ;Remove the remainder
   291 00002098 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   292                              <1> ;Using the decimal part of this formula for the low count
   293                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   294 0000209A 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   295 0000209D B912000000          <1>     mov ecx, 18
   296 000020A2 F7E1                <1>     mul ecx  
   297 000020A4 01C3                <1>     add ebx, eax
   298                              <1> 
   299 000020A6 31D2                <1>     xor edx, edx
   300 000020A8 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   301 000020AC B944040000          <1>     mov ecx, 1092
   302 000020B1 F7E1                <1>     mul ecx
   303 000020B3 01C3                <1>     add ebx, eax
   304 000020B5 89DA                <1>     mov edx, ebx    ;edx now has low count
   305 000020B7 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   306 000020BB B401                <1>     mov ah, 01h     ;Set the system time
   307 000020BD CD3A                <1>     int 3Ah
   308                              <1> 
   309 000020BF 4889F3              <1>     mov rbx, rsi
   310 000020C2 E91AFFFFFF          <1>     jmp .clkExit
   311                              <1> 
   312                              <1> .clkBCDtoHex:
   313                              <1> ;Converts a BCD value to a Hex byte
   314                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   315 000020C7 51                  <1>     push rcx
   316 000020C8 0FB6C0              <1>     movzx eax, al   ;Zero extend
   317 000020CB 89C1                <1>     mov ecx, eax    ;Save al in ecx
   318 000020CD 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   319 000020D2 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   320 000020D8 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   321                              <1> .cbth0:
   322 000020DB 050A000000          <1>     add eax, 10
   323 000020E0 E2F9                <1>     loop .cbth0
   324 000020E2 59                  <1>     pop rcx
   325 000020E3 C3                  <1>     ret
   326                              <1> 
   327                              <1> .clkHexToBCD:
   328                              <1> ;Converts a Hex byte into two BCD digits
   329                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   330 000020E4 51                  <1>     push rcx
   331 000020E5 0FB6C0              <1>     movzx eax, al   ;Zero extend
   332 000020E8 31C9                <1>     xor ecx, ecx
   333                              <1> .chtb0:
   334 000020EA 3D0A000000          <1>     cmp eax, 10
   335 000020EF 7209                <1>     jb .chtb1
   336 000020F1 2D0A000000          <1>     sub eax, 10
   337 000020F6 FFC1                <1>     inc ecx
   338 000020F8 EBF0                <1>     jmp short .chtb0
   339                              <1> .chtb1:
   340 000020FA C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   341 000020FD 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   342 000020FF 59                  <1>     pop rcx
   343 00002100 C3                  <1>     ret
   344 00002101 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   345                              <1> ;When counting the number of days, first compute the number of years since
   346                              <1> ; 1980 and your year. 
   347                              <1> ;Then, using the table below, find the number of leap years between 1980
   348                              <1> ; and (YourYear - 1). 
   349                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   350                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   351                              <1> ;Use the months table to get the number of days in a normal month as leap 
   352                              <1> ; years are added using the previous comment.
   353                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   354                              <1> ; a leap year using the table. If it is, add an extra day.
   355                              <1> .clkLeapYears:
   356 00002103 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   356 0000210C 24282C30            <1>
   357 00002110 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   357 00002119 585C60              <1>
   358                              <1> .clkMonths:
   359 0000211C 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   359 00002125 1F1E1F              <1>
   360                              <1> ;COM Driver headers and main interrupt strat
   361                              <1> com1Intr:
   362 00002128 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   363 0000212F EB19                <1>     jmp short comIntr
   364                              <1> com2Intr:
   365 00002131 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   366 00002138 EB10                <1>     jmp short comIntr
   367                              <1> com3Intr:
   368 0000213A C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   369 00002141 EB07                <1>     jmp short comIntr
   370                              <1> com4Intr:
   371 00002143 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   372                              <1> comIntr:
   373 0000214A 50                  <1>     push rax
   374 0000214B 53                  <1>     push rbx
   375 0000214C 51                  <1>     push rcx
   376 0000214D 52                  <1>     push rdx
   377 0000214E 56                  <1>     push rsi
   378 0000214F 57                  <1>     push rdi
   379 00002150 488B1DEDFCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   380 00002157 B003                <1>     mov al, 03h ;Unknown Command
   381 00002159 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   382 0000215D 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   383                              <1> 
   384 0000215F 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   385 00002162 3C04                <1>     cmp al, 4   ;Read Character(s)
   386 00002164 7462                <1>     jz .comRead
   387 00002166 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   388 00002168 0F849B000000        <1>     jz .comNondestructiveRead   
   389 0000216E 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   390 00002170 0F8484000000        <1>     jz .comReadInputStatus
   391 00002176 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   392 00002178 0F84B9000000        <1>     jz .comFlushInputBuffers
   393 0000217E 3C08                <1>     cmp al, 8
   394 00002180 0F84DB000000        <1>     jz .comWrite
   395 00002186 3C09                <1>     cmp al, 9
   396 00002188 0F84D3000000        <1>     jz .comWrite
   397 0000218E 3C0A                <1>     cmp al, 0Ah
   398 00002190 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   399 00002196 EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   400                              <1> .comErrorNoCount:
   401 00002198 B002                <1>     mov al, 02h ;Unknown device
   402 0000219A EB19                <1>     jmp short .comWriteErrorCode
   403                              <1> .comReadError:
   404 0000219C BA0B000000          <1>     mov edx, 0Bh
   405                              <1> .comWriteError:
   406 000021A1 BA0A000000          <1>     mov edx, 0Ah
   407                              <1> .comError:
   408 000021A6 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   409 000021A9 B902000000          <1>     mov ecx, 02h    ;Unknown device
   410 000021AE 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   411 000021B0 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   412 000021B3 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   413                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   414 000021B5 B480                <1>     mov ah, 80h ;Set error bit
   415 000021B7 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   416                              <1> .comExit:
   417 000021BB 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   418 000021C1 5F                  <1>     pop rdi
   419 000021C2 5E                  <1>     pop rsi
   420 000021C3 5A                  <1>     pop rdx
   421 000021C4 59                  <1>     pop rcx
   422 000021C5 5B                  <1>     pop rbx
   423 000021C6 58                  <1>     pop rax
   424 000021C7 C3                  <1>     ret
   425                              <1> 
   426                              <1> .comRead:
   427 000021C8 B005                <1>     mov al, 05h ;Bad request structure length?
   428 000021CA 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   429 000021CD 75E6                <1>     jne .comWriteErrorCode
   430                              <1> 
   431 000021CF 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   432 000021D3 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   433                              <1> .cr1:
   434 000021D5 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   435 000021D8 741B                <1>     je .cre2
   436                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   437 000021DA B802000000          <1>     mov eax, 02h    ;Recieve 
   438 000021DF 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   439 000021E5 6698                <1>     cbw     ;Zero extend to upper byte
   440 000021E7 CD34                <1>     int 34h ;Recieve Char
   441 000021E9 72BB                <1>     jc .comError
   442 000021EB 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   443 000021EE 74EA                <1>     je .cr11
   444 000021F0 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   445 000021F1 FFC1                <1>     inc ecx
   446 000021F3 EBE0                <1>     jmp short .cr1
   447                              <1> .cre2:
   448 000021F5 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   449 000021F8 EBC1                <1>     jmp short .comExit
   450                              <1> 
   451                              <1> .comReadInputStatus:
   452 000021FA B005                <1>     mov al, 05h ;Bad request structure length?
   453 000021FC 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   454 000021FF 75B4                <1>     jne .comWriteErrorCode
   455 00002201 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   456 00002207 EBB2                <1>     jmp short .comExit
   457                              <1> 
   458                              <1> .comNondestructiveRead:
   459                              <1> ;Acts like a "read one character if there is one" function
   460 00002209 B005                <1>     mov al, 05h ;Bad request structure length?
   461 0000220B 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   462 0000220E 75A5                <1>     jne .comWriteErrorCode
   463                              <1> .cndr1:
   464 00002210 B802000000          <1>     mov eax, 02h    ;Recieve 
   465 00002215 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   466 0000221B 6698                <1>     cbw     ;Zero extend to upper byte
   467 0000221D CD34                <1>     int 34h ;Recieve Char
   468 0000221F 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   469 00002225 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   470 00002228 7405                <1>     je .cndr2
   471 0000222A 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   472 0000222D EB8C                <1>     jmp short .comExit
   473                              <1> .cndr2:
   474 0000222F 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   475 00002235 EB84                <1>     jmp short .comExit
   476                              <1> 
   477                              <1> .comFlushInputBuffers:
   478 00002237 B005                <1>     mov al, 05h ;Bad request structure length?
   479 00002239 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   480 0000223C 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   481                              <1> .cfib0:
   482 00002242 8A1584000000        <1>     mov dl, byte [.comDevice]
   483 00002248 6698                <1>     cbw
   484 0000224A B802000000          <1>     mov eax, 02h    ;Recieve
   485 0000224F CD34                <1>     int 34h
   486 00002251 0F8241FFFFFF        <1>     jc .comErrorNoCount
   487 00002257 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   488 0000225A 75E6                <1>     jne .cfib0
   489 0000225C E95AFFFFFF          <1>     jmp .comExit
   490                              <1> 
   491                              <1> .comWrite:
   492 00002261 B005                <1>     mov al, 05h ;Bad request structure length?
   493 00002263 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   494 00002266 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   495                              <1> 
   496 0000226C 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   497 00002270 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   498                              <1> .cw1: 
   499 00002272 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   500 00002275 7417                <1>     je .cw2
   501 00002277 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   502 00002278 B401                <1>     mov ah, 01h ;Move function number into ah
   503 0000227A 8A154C000000        <1>     mov dl, byte [.comDevice]
   504 00002280 6698                <1>     cbw     ;Zero extend to upper byte
   505 00002282 CD34                <1>     int 34h ;Transmit char
   506 00002284 0F821CFFFFFF        <1>     jc .comError
   507 0000228A FFC1                <1>     inc ecx
   508 0000228C EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   509                              <1> .cw2:
   510 0000228E 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   511 00002291 E925FFFFFF          <1>     jmp .comExit
   512                              <1> 
   513                              <1> .comOutputStatus:
   514                              <1> ;Read MODEM status
   515 00002296 B005                <1>     mov al, 05h ;Bad request structure length?
   516 00002298 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   517 0000229B 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   518                              <1> 
   519 000022A1 8A1525000000        <1>     mov dl, byte [.comDevice]
   520 000022A7 6698                <1>     cbw     ;Zero extend to upper byte
   521 000022A9 B403                <1>     mov ah, 03h     ;Get status
   522 000022AB CD34                <1>     int 34h
   523 000022AD 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   524 000022B3 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   525 000022B8 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   526 000022BB F7D0                <1>     not eax      ;Bitwise inversion
   527 000022BD 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   528 000022C2 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   529 000022C7 E9EFFEFFFF          <1>     jmp .comExit
   530 000022CC 00                  <1> .comDevice   db 0
    35                                  %include "./Source/Drivers/diskDrv.asm"
    36                              <1> msdDriver:
    37 000022CD 50                  <1>     push rax
    38 000022CE 53                  <1>     push rbx
    39 000022CF 51                  <1>     push rcx
    40 000022D0 52                  <1>     push rdx
    41 000022D1 56                  <1>     push rsi
    42 000022D2 57                  <1>     push rdi
    43 000022D3 55                  <1>     push rbp
    44 000022D4 4150                <1>     push r8
    45 000022D6 488B1D67FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    46 000022DD 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    47 000022E1 B003                <1>     mov al, drvBadCmd
    48 000022E3 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    49 000022E9 B001                <1>     mov al, drvBadUnit 
    50 000022EB 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    51 000022EF 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    52 000022F5 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    53 000022FC 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    54 00002300 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    55 00002303 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    56 00002307 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    57 0000230B D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    58 0000230D 488D0D9A000000      <1>     lea rcx, .msdTable
    59 00002314 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    60 00002318 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    61 0000231A 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    62 0000231C 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    63 0000231F FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    64                              <1> .msdDriverExit:
    65 00002321 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    66 00002327 4158                <1>     pop r8
    67 00002329 5D                  <1>     pop rbp
    68 0000232A 5F                  <1>     pop rdi
    69 0000232B 5E                  <1>     pop rsi
    70 0000232C 5A                  <1>     pop rdx
    71 0000232D 59                  <1>     pop rcx
    72 0000232E 5B                  <1>     pop rbx
    73 0000232F 58                  <1>     pop rax
    74 00002330 C3                  <1>     ret
    75                              <1> 
    76                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    77 00002331 4889FB              <1>     mov rbx, rdi
    78 00002334 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    79 00002337 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    80 00002339 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    81                              <1> ;Now fall through to general error
    82                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    83 0000233C B401                <1>     mov ah, 01h
    84 0000233E CD33                <1>     int 33h ;Read status of last operation
    85 00002340 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    86 00002343 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    87 00002345 7460                <1>     je .msdWriteErrorCode 
    88 00002347 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    89 00002349 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    90 0000234C 7459                <1>     je .msdWriteErrorCode 
    91 0000234E 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    92 00002351 7454                <1>     je .msdWriteErrorCode
    93                              <1> ;Device Not Ready
    94 00002353 B002                <1>     mov al, 02h  ;Device not ready code
    95 00002355 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    96 00002358 744D                <1>     je .msdWriteErrorCode
    97 0000235A 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    98 0000235E 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    99                              <1> ;Write Protected
   100 00002362 30C0                <1>     xor al, al
   101 00002364 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   102 00002369 743C                <1>     je .msdWriteErrorCode
   103                              <1> ;CRC Error
   104 0000236B B004                <1>     mov al, 04h     ;CRC error code
   105 0000236D 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   106 00002372 7433                <1>     je .msdWriteErrorCode
   107 00002374 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   108 00002379 742C                <1>     je .msdWriteErrorCode
   109 0000237B 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   110 00002380 7425                <1>     je .msdWriteErrorCode
   111                              <1> ;Seek Error
   112 00002382 B006                <1>     mov al, 06h     ;Seek error code
   113 00002384 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   114 00002387 741E                <1>     je .msdWriteErrorCode
   115                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   116                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   117 00002389 B007                <1>     mov al, 07h
   118 0000238B 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   119 0000238E 7417                <1>     je .msdWriteErrorCode
   120                              <1> ;Sector Not Found
   121 00002390 B008                <1>     mov al, 08h     ;Sector not found code
   122 00002392 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   123 00002395 7410                <1>     je .msdWriteErrorCode
   124                              <1> ;Write faults
   125 00002397 B00A                <1>     mov al, 0Ah     ;Write fault
   126 00002399 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   127 0000239C 7409                <1>     je .msdWriteErrorCode
   128                              <1> ;Read faults
   129 0000239E B00B                <1>     mov al, 0Bh     ;Read fault
   130 000023A0 80F911              <1>     cmp cl, 11h     ;Read error
   131 000023A3 7402                <1>     je .msdWriteErrorCode
   132                              <1> ;General Errors
   133 000023A5 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   134                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   135 000023A7 B480                <1>     mov ah, 80h ;Set error bit
   136 000023A9 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   137 000023AD C3                  <1>     ret ;Return to set done bit
   138                              <1> .msdTable:
   139 000023AE 0000                <1>     dw 0                            ;Function 0
   140 000023B0 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   141 000023B2 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   142 000023B4 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   143 000023B6 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   144 000023B8 0000                <1>     dw 0                            ;Function 5
   145 000023BA 0000                <1>     dw 0                            ;Function 6
   146 000023BC 0000                <1>     dw 0                            ;Function 7
   147 000023BE 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   148 000023C0 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   149 000023C2 0000                <1>     dw 0                            ;Function 10
   150 000023C4 0000                <1>     dw 0                            ;Function 11
   151 000023C6 C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   152 000023C8 D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   153 000023CA ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   154 000023CC 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   155 000023CE 0000                <1>     dw 0                            ;Function 16
   156 000023D0 0000                <1>     dw 0                            ;Function 17
   157 000023D2 0000                <1>     dw 0                            ;Function 18
   158 000023D4 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   159 000023D6 0000                <1>     dw 0                            ;Function 20
   160 000023D8 0000                <1>     dw 0                            ;Function 21
   161 000023DA 0000                <1>     dw 0                            ;Function 22
   162 000023DC 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   163 000023DE 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   164                              <1> 
   165                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   166                              <1> .msdMedChk:          ;Function 1
   167 000023E0 B005                <1>     mov al, 05h ;Bad request structure length
   168 000023E2 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   169 000023E5 75C0                <1>     jne .msdWriteErrorCode
   170                              <1> 
   171 000023E7 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   172 000023EC 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   173 000023F3 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   174 000023F6 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   175 000023F9 753F                <1>     jnz .mmcNoChange
   176                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   177 000023FB B416                <1>     mov ah, 16h 
   178 000023FD CD33                <1>     int 33h
   179 000023FF 0F8237FFFFFF        <1>     jc .msdGenDiskError
   180 00002405 80FC80              <1>     cmp ah, 80h
   181 00002408 740E                <1>     je .mmcNoChangeLine
   182 0000240A 80FC86              <1>     cmp ah, 86h
   183 0000240D 7409                <1>     je .mmcNoChangeLine
   184 0000240F 84E4                <1>     test ah, ah ;No change?
   185 00002411 7427                <1>     jz .mmcNoChange
   186 00002413 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   187 00002416 750D                <1>     jnz .mmcChange
   188                              <1> ;If nothing, fall through and test manually, should never happen though
   189                              <1> .mmcNoChangeLine:
   190                              <1> ;Now we test Media Descriptor
   191 00002418 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   192 0000241D 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   193 00002420 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   194 00002423 7410                <1>     je .mmcUnsure
   195                              <1> .mmcChange:
   196 00002425 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   197 00002429 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   198 00002430 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   199                              <1>     ;Check here if there were any open handles on the device when it was changed
   200 00002434 C3                  <1>     ret
   201                              <1> .mmcUnsure:
   202 00002435 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   203 00002439 C3                  <1>     ret
   204                              <1> .mmcNoChange:
   205 0000243A C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   206 0000243E C3                  <1>     ret
   207                              <1> 
   208                              <1> 
   209                              <1> .msdBuildBPB:        ;Function 2
   210 0000243F B005                <1>     mov al, 05h ;Bad request structure length
   211 00002441 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   212 00002444 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   213                              <1> 
   214 0000244A 4889DE              <1>     mov rsi, rbx
   215 0000244D 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   216 00002452 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   217 00002459 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   218 0000245C 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   219 00002460 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   220 00002462 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   221 00002465 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   222 0000246A CD33                <1>     int 33h
   223 0000246C 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   224                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   225 00002472 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   226 00002476 7418                <1>     je .mbbpb0
   227 00002478 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   228 0000247C 7412                <1>     je .mbbpb0
   229 0000247E 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   230 00002482 740C                <1>     je .mbbpb0
   231 00002484 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   232 00002488 B007                <1>     mov al, 07h ;Unknown media error code
   233 0000248A 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   234                              <1> .mbbpb0:
   235 00002490 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   236 00002493 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   237 00002498 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   238 0000249F 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   239 000024A3 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   240 000024A6 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   241 000024AA B90F000000          <1>     mov ecx, bpbEx_size/8
   242 000024AF F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   243 000024B2 C3                  <1>     ret
   244                              <1> .msdIOCTLRead:       ;Function 3, returns done
   245 000024B3 B005                <1>     mov al, drvBadDrvReq
   246 000024B5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   247 000024B8 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   248 000024BE C3                  <1>     ret
   249                              <1> .msdRead:            ;Function 4
   250                              <1> ;Will read one sector at a time.
   251 000024BF B005                <1>     mov al, 05h ;Bad request structure length
   252 000024C1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   253 000024C4 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   254                              <1> 
   255 000024CA 4889DF              <1>     mov rdi, rbx
   256 000024CD 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   257                              <1> .msdr0:
   258 000024CF B682                <1>     mov dh, 82h ;LBA Read Sectors
   259 000024D1 E841010000          <1>     call .msdBlkIOCommon
   260 000024D6 0F8255FEFFFF        <1>     jc .msdIOError
   261 000024DC 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   262 000024E4 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   263 000024EC FFC6                <1>     inc esi
   264 000024EE 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   265 000024F1 75DC                <1>     jne .msdr0
   266 000024F3 4889FB              <1>     mov rbx, rdi
   267 000024F6 C3                  <1>     ret
   268                              <1> .msdWrite:           ;Function 8
   269                              <1> ;Will write one sector at a time.
   270 000024F7 B005                <1>     mov al, 05h ;Bad request structure length
   271 000024F9 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   272 000024FC 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   273                              <1> 
   274 00002502 4889DF              <1>     mov rdi, rbx
   275 00002505 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   276                              <1> .msdw0:
   277 00002507 B683                <1>     mov dh, 83h ;LBA Write Sectors
   278 00002509 E809010000          <1>     call .msdBlkIOCommon
   279 0000250E 0F821DFEFFFF        <1>     jc .msdIOError
   280 00002514 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   281 0000251C 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   282 00002524 FFC6                <1>     inc esi
   283 00002526 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   284 00002529 75DC                <1>     jne .msdw0
   285 0000252B 4889FB              <1>     mov rbx, rdi
   286 0000252E C3                  <1>     ret
   287                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   288                              <1> ;Will write one sector at a time and then verify it.
   289 0000252F B005                <1>     mov al, 05h ;Bad request structure length
   290 00002531 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   291 00002534 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   292                              <1> 
   293 0000253A 4889DF              <1>     mov rdi, rbx
   294 0000253D 31F6                <1>     xor esi, esi  ;Set counter to zero
   295                              <1> .msdwv0:
   296 0000253F B683                <1>     mov dh, 83h ;LBA Write Sectors
   297 00002541 E8D1000000          <1>     call .msdBlkIOCommon
   298 00002546 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   299 0000254C B684                <1>     mov dh, 84h ;LBA Verify Sectors
   300 0000254E E8C4000000          <1>     call .msdBlkIOCommon
   301 00002553 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   302 00002559 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   303 00002561 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   304 00002569 FFC6                <1>     inc esi
   305 0000256B 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   306 0000256E 75CF                <1>     jne .msdwv0
   307 00002570 4889FB              <1>     mov rbx, rdi
   308 00002573 C3                  <1>     ret
   309                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   310 00002574 B005                <1>     mov al, drvBadDrvReq
   311 00002576 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   312 00002579 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   313                              <1> 
   314 0000257F C3                  <1>     ret
   315                              <1> .msdDevOpen:         ;Function 13
   316 00002580 B005                <1>     mov al, drvBadDrvReq
   317 00002582 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   318 00002585 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   319                              <1> 
   320 0000258B 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   321 00002590 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   322 00002597 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   323 0000259A C3                  <1>     ret
   324                              <1> .msdDevClose:        ;Function 14
   325 0000259B B005                <1>     mov al, drvBadDrvReq
   326 0000259D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   327 000025A0 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   328                              <1> 
   329 000025A6 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   330 000025AB 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   331 000025B2 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   332 000025B5 C3                  <1>     ret
   333                              <1> .msdRemovableMedia:  ;Function 15
   334 000025B6 B005                <1>     mov al, drvBadDrvReq
   335 000025B8 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   336 000025BB 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   337                              <1> 
   338 000025C1 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   339 000025C6 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   340 000025CD 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   341 000025D0 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   342 000025D5 31D2                <1>     xor edx, edx    ;Busy bit clear
   343 000025D7 A880                <1>     test al, 80h
   344 000025D9 0F44CA              <1>     cmovz ecx, edx
   345 000025DC 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   346 000025E0 C3                  <1>     ret
   347                              <1> .msdGenericIOCTL:    ;Function 19
   348 000025E1 B005                <1>     mov al, drvBadDrvReq
   349 000025E3 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   350 000025E6 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   351                              <1> 
   352 000025EC C3                  <1>     ret
   353                              <1> .msdGetLogicalDev:   ;Function 23
   354 000025ED B005                <1>     mov al, drvBadDrvReq
   355 000025EF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   356 000025F2 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   357                              <1> 
   358 000025F8 8A0541000000        <1>     mov al, byte [.msdCurDev]
   359 000025FE 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   360 00002601 C3                  <1>     ret
   361                              <1> .msdSetLogicalDev:   ;Function 24
   362 00002602 B005                <1>     mov al, drvBadDrvReq
   363 00002604 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   364 00002607 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   365                              <1> 
   366 0000260D 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   367 00002610 880529000000        <1>     mov byte [.msdCurDev], al
   368 00002616 C3                  <1>     ret
   369                              <1> 
   370                              <1> .msdBlkIOCommon:  ;Does block IO
   371                              <1> ;Called with rdi containing old rbx value and ah with function number
   372                              <1> ;rbp points to bpb
   373                              <1> ;Error handled by caller
   374                              <1> ;Sector count handled by caller
   375                              <1> ;Called with dh = BIOS function number
   376 00002617 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   377 0000261C 8A90[40260000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   378 00002622 31C9                <1>     xor ecx, ecx
   379 00002624 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   380 00002627 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   381 0000262B 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   382 0000262F 88F4                <1>     mov ah, dh
   383 00002631 B001                <1>     mov al, 01h ;Do one sector at a time 
   384 00002633 CD33                <1>     int 33h
   385 00002635 C3                  <1>     ret
   386                              <1> 
   387 00002636 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   388                              <1> ;LASTDRIVE default is 5
   389                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   390                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   391 0000263F 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   392                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   393 00002640 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   394 00002645 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   395 0000264A 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   395 00002653 000000000000000000- <1>
   395 0000265C 000000000000000000- <1>
   395 00002665 000000000000000000- <1>
   395 0000266E 00000000            <1>
   396 00002672 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   396 0000267B 000000000000000000- <1>
   396 00002684 000000000000000000- <1>
   396 0000268D 000000000000000000- <1>
   396 00002696 000000000000000000- <1>
   396 0000269F 000000000000000000- <1>
   396 000026A8 000000000000000000- <1>
   396 000026B1 000000000000000000- <1>
   396 000026BA 000000000000000000- <1>
   396 000026C3 000000000000000000- <1>
   396 000026CC 000000000000000000- <1>
   396 000026D5 000000000000000000- <1>
   396 000026DE 000000000000000000- <1>
   396 000026E7 000000000000000000- <1>
   396 000026F0 000000000000000000- <1>
   396 000026F9 000000000000000000- <1>
   396 00002702 000000000000000000- <1>
   396 0000270B 000000000000000000- <1>
   396 00002714 000000000000000000- <1>
   396 0000271D 000000000000000000- <1>
   396 00002726 000000000000000000- <1>
   396 0000272F 000000000000000000- <1>
   396 00002738 000000000000000000- <1>
   396 00002741 000000000000000000- <1>
   396 0000274A 000000000000000000- <1>
   396 00002753 000000000000000000- <1>
   396 0000275C 000000000000000000- <1>
   396 00002765 000000000000000000- <1>
   396 0000276E 000000000000000000- <1>
   396 00002777 000000000000000000- <1>
   396 00002780 000000000000000000- <1>
   396 00002789 000000000000000000- <1>
   396 00002792 000000000000000000- <1>
   396 0000279B 000000000000000000- <1>
   396 000027A4 000000000000000000- <1>
   396 000027AD 000000000000000000- <1>
   396 000027B6 000000000000000000- <1>
   396 000027BF 000000000000000000- <1>
   396 000027C8 000000000000000000- <1>
   396 000027D1 000000000000000000- <1>
   396 000027DA 000000000000000000- <1>
   396 000027E3 000000000000000000- <1>
   396 000027EC 000000000000000000- <1>
   396 000027F5 000000000000000000- <1>
   396 000027FE 000000000000000000- <1>
   396 00002807 000000000000000000- <1>
   396 00002810 000000000000000000- <1>
   396 00002819 000000000000000000- <1>
   396 00002822 000000000000000000- <1>
   396 0000282B 000000000000000000- <1>
   396 00002834 000000000000000000- <1>
   396 0000283D 000000000000000000- <1>
   396 00002846 000000000000000000- <1>
   396 0000284F 000000000000000000- <1>
   396 00002858 000000000000000000- <1>
   396 00002861 000000000000000000- <1>
   396 0000286A 000000000000000000- <1>
   396 00002873 000000000000000000- <1>
   396 0000287C 000000000000000000- <1>
   396 00002885 000000000000000000- <1>
   396 0000288E 000000000000000000- <1>
   396 00002897 000000000000000000- <1>
   396 000028A0 000000000000000000- <1>
   396 000028A9 000000000000000000- <1>
   396 000028B2 000000000000000000- <1>
   396 000028BB 000000000000000000- <1>
   396 000028C4 000000000000        <1>
   397                              <1> 
   398                              <1> endptr equ $
    36                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    37                                  ;Paragraph alignment
    38                                  %include "./Source/BSS/dosDynaDataArea.asm"
    39                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    40                              <1> ; the MCB chain!
    41                              <1> ddaStart:
    42 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    43                              <1> 
    44                              <1> ;Create SFT header and corresponding array of five default sft entries
    45 00000010 <res Ah>            <1> firstSftHeader  resb sfth_size
    46 0000001A <res 43h>           <1> firstSft        resb sft_size
    47 0000005D <res 43h>           <1> secondSft       resb sft_size
    48 000000A0 <res 43h>           <1> thirdSft        resb sft_size
    49 000000E3 <res 43h>           <1> fourthSft       resb sft_size
    50 00000126 <res 43h>           <1> fifthSft        resb sft_size
    51                              <1> 
    52                              <1> ;Create DPB chain of first 5 available DPB slots
    53                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    54 00000169 <res 34h>           <1> firstDPB        resb dpb_size
    55 0000019D <res 34h>           <1> secondDPB       resb dpb_size
    56                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    57                              <1> ;Always jettison this space
    58 000001D1 <res 34h>           <1> thirdDPB        resb dpb_size
    59 00000205 <res 34h>           <1> fourthDPB       resb dpb_size
    60 00000239 <res 34h>           <1> fifthDPB        resb dpb_size 
    61                              <1> 
    62                              <1> ;Create a one drive CDS to keep track of drive A's current dir
    63                              <1> ;Replace once CONFGI.SYS has been read
    64 0000026D <res 5Bh>           <1> initCDS         resb cds_size 
    65                              <1> 
    66                              <1> 
    67 000002C8 <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    68 000002E8 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    69                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    70                              <1> dynamicDataAreaLength equ $ - ddaStart
