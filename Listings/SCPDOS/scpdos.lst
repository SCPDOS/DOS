     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro breakpoint 0
    78                              <1> xchg bx, bx
    79                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvExtFun   equ 40h ;If set, functions 13, 17, 18 supported (must be)
    73                              <1>     devDrvIOCTL2   equ 80h ;If set, IOCTL function 19 supported
    74                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    75                              <1>     devDrvIOCTL    equ 4000h ;If set, Generic IOCTL supported
    76                              <1>     devDrvChar     equ 8000h ;If set, Char device
    77                              <1> ;Bit 0 1=console input
    78                              <1> ;    1 1=console output (character devices)
    79                              <1> ;    2 1=NUL device
    80                              <1> ;    3 1=CLOCK device
    81                              <1> ;    4 1=INT 49 output (CON)
    82                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    83                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    84                              <1> ;   11 1=open/close/removable media supported (3.0+)
    85                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    86                              <1> ;      1=media descriptor in FAT required (block devices)
    87                              <1> ;   14 1=IOCTL supported
    88                              <1> ;   15 0=block device
    89                              <1> ;      1=character device
    90                              <1> 
    91                              <1> ;Driver structures
    92                              <1> 
    93                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    94                              <1> 
    95                              <1>     .hdrlen resb 1  ;Length of the request header
    96                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    97                              <1>     .cmdcde resb 1  ;Command code
    98                              <1>     .status resw 1  ;Status word
    99                              <1>     .devptr resq 1  ;Device queue pointer field
   100                              <1> 
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> struc drvReqHdr
   104                              <1>     drvReqHdrM
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   105                              <1> endstruc
   106                              <1> 
   107                              <1> struc initReqPkt  ;Init Request Packet
   108                              <1> 
   109                              <1>     drvReqHdrM   ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   110 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   111 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   112 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   113 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   118                              <1> 
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   120 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   121 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   122 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   129 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   130 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   131 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   132                              <1> 
   133                              <1> endstruc
   134                              <1> 
   135                              <1> struc ioReqPkt   ;IO Request Packet
   136                              <1> 
   137                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   138 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   139 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   140 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   141 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   142 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   143                              <1> 
   144                              <1> endstruc
   145                              <1> 
   146                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   147                              <1>     
   148                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   149 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc statusReqPkt   ;Status Request Packet
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   156                              <1> 
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc openReqPkt ;Open Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc closeReqPkt ;Close Device Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   180                              <1>      
   181                              <1> endstruc
   182                              <1> 
   183                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   184                              <1> 
   185                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   186 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   187 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   188 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   189 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   190 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   201                              <1>     
   202                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   203                              <1> 
   204                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   138                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   139                              <1>     ;If any of the three bits are set, then ALL three bits are set
   140                              <1>     ; in addition to whatever the user passed to search for.
   141                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   142                              <1>     dirIncFiles     equ dirHidden | dirSystem
   143                              <1> 
   144                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   145                              <1> 
   146 00000000 ??????              <1>     .jmpBoot                resb 3 
   147 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   148 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   149 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   150 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   151 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   152 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   153 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   154 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   155 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   156 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   157 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   158 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   159 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   160 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   161 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   162 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   163 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   164 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   165                              <1> 
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc FSInfo
   169                              <1> 
   170 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   171 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   172 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   173 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   174 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   175 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   176 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   177                              <1> 
   178                              <1> endstruc
   179                              <1> 
   180                              <1> %macro defaultBPB 0
   181                              <1>     db 0E9h
   182                              <1>     db 00h
   183                              <1>     db 90h
   184                              <1>     db 'SCPDOSv1'
   185                              <1>     dw 0200h                       
   186                              <1>     db 01h                         
   187                              <1>     dw 0001h                           
   188                              <1>     db 02h                              
   189                              <1>     dw 00E0h            
   190                              <1>     dw 0B40h   
   191                              <1>     db 0F0h                   
   192                              <1>     dw 0009h                   
   193                              <1>     dw 0012h                     
   194                              <1>     dw 0002h                  
   195                              <1>     dd 0                 
   196                              <1>     dd 0 
   197                              <1>     db 00h
   198                              <1>     db 00h
   199                              <1>     db 29h
   200                              <1>     dd 0
   201                              <1>     db 'NO NAME    '
   202                              <1>     db 'FAT12   '
   203                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   204                              <1> %endmacro
     8                                  %include "./Source/Include/dosStruc.inc"
     9                              <1> 
    10                              <1> ;-------------------------------------------------------;
    11                              <1> ; This include file contains miscellaneous internal     ;
    12                              <1> ; SCP/DOS structures.                                   ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> 
    15                              <1> ;------------------------------------------------------------------------;
    16                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    17                              <1> ; its file system structure. This is used to locate files and structures
    18                              <1> ; on the device itself and to translate file requests to cluster chains
    19                              <1> ; to LBAs to pass to the disk driver..
    20                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    21                              <1> ; drivers Initialise routine has been called.
    22                              <1> ;------------------------------------------------------------------------;
    23                              <1> struc dpb        ;Drive Parameter Block
    24                              <1> 
    25 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    26 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    27 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    28 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    29 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    30 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    31 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    32 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    33 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    34 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    35 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    36 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    37                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    38 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    39 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    40 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    41 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    42 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    43 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    44                              <1> 
    45                              <1> endstruc
    46                              <1> 
    47                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    48                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    49                              <1> ;------------------------------------------------------------------------;
    50                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    51                              <1> ; All disk pathing requests go via the CDS for that drive.
    52                              <1> ; The default drive is the last accessed drive, this number is stored
    53                              <1> ; in the DOS data area.
    54                              <1> ; The CDS is stored as an array with the offset into the array being 
    55                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    56                              <1> ;
    57                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> struc cds       ;Current Directory structure
    60 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    61 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    62 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    63 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    64 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    65 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    66                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    67                              <1> ; another, we save the number of chars to skip to that deep level).
    68                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    69                              <1> ; Only affects for SUBST drives, not JOIN
    70                              <1> ; Flags: Bit 15 set = Network drive
    71                              <1> ;        Bit 14 set = Physical drive
    72                              <1> ;        Bit 13 set = JOIN'ed drive
    73                              <1> ;        Bit 12 set = SUBST'ed drive
    74                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    75                              <1> endstruc
    76                              <1> ;CDS equates
    77                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    78                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    79                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    80                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    81                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    82                              <1> ;------------------------------------------------------------------------;
    83                              <1> ; The SFT is a way to allow applications to open file handles to files 
    84                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    85                              <1> ; under the first header, and then a second header will be linked to the 
    86                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    87                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    88                              <1> ; using the FCBS= command. Default FCBS=5.
    89                              <1> ;
    90                              <1> ; A file handle describes the file, and the location within the file that
    91                              <1> ; we are reading. The file handle can be manipulated without the file
    92                              <1> ; being in memory, thus allowing the user to access data without needing 
    93                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    94                              <1> ; accessing devices, by treating them as files with their drivers 
    95                              <1> ; responding and translating the manipulations of the file handle itself.
    96                              <1> ; Neither the driver nor the application should see or use the SFT for
    97                              <1> ; the handle, as it is subject to change (and will change when file 
    98                              <1> ; sharing provisions are included). The DOS will make requests to the 
    99                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   100                              <1> ; track of the information in the SFT entry for that handle. 
   101                              <1> ;
   102                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   103                              <1> ; can point to the same file. It all depends on what the applications 
   104                              <1> ; want to do with the File.
   105                              <1> ;
   106                              <1> ; !!!!IMPORTANT!!!!
   107                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   108                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   109                              <1> ;
   110                              <1> ;Each SFT may look like this:
   111                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   112                              <1> ;            |                |
   113                              <1> ;       wNumFiles*sft    wNumFiles*sft
   114                              <1> ;
   115                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   116                              <1> ; System FCBs.
   117                              <1> ;
   118                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   119                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   120                              <1> ;
   121                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   122                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   123                              <1> ;------------------------------------------------------------------------;
   124                              <1> struc sfth   ;System file table header
   125                              <1> ; This is the SFT header.
   126                              <1> ; This structure comes before the start of the first file in the array/table.
   127 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   128 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc sft
   132                              <1> ;This is the file struc itself
   133 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   134 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   135 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   136 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   137 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   138 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   139 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   140 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   141 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   142 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   143 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   144 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   145 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   146 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   147 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   148 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   149 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   150 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   151 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   152                              <1> ;                           0 means no record
   153                              <1> endstruc
   154                              <1> ;Open Mode equates
   155                              <1> ;Access modes   Bits[2:0]
   156                              <1> ReadAccess      equ 0h
   157                              <1> WriteAccess     equ 1h
   158                              <1> RWAccess        equ 2h
   159                              <1> ;Bit 3 reserved 0
   160                              <1> ;Sharing modes  Bits[6:4]
   161                              <1> CompatShare     equ 0h
   162                              <1> denyRWShare     equ 10h
   163                              <1> denyWriteShare  equ 20h
   164                              <1> denyReadShare   equ 30h
   165                              <1> denyNoneShare   equ 40h
   166                              <1> netFCBShare     equ 70h
   167                              <1> ;Bit 7 reserved 0
   168                              <1> ;Bits 8-12 reserved 0
   169                              <1> 
   170                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   171                              <1> ;Buffering on writes
   172                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   173                              <1> ;FCB opened file?
   174                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   175                              <1> ;Attribute Byte
   176                              <1> readOnlyFile    equ 1h
   177                              <1> hiddenFile      equ 2h
   178                              <1> systemFile      equ 4h
   179                              <1> volumeLabel     equ 8h
   180                              <1> directoryFile   equ 10h ;Directory entry
   181                              <1> archiveFile     equ 20h
   182                              <1> ;Device Info equates
   183                              <1> ;For a block device, bits [5:0] contain the drive number
   184                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   185                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   186                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   187                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   188                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   189                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   190                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   191                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   192                              <1> devCharDev      equ 80h ;If set, it is a char device!
   193                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   194                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   195                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   196                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   197                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   198                              <1> 
   199                              <1> ;openAddress   equ DOSSEG:367Ah   
   200                              <1> ;createAddress equ DOSSEG:35E3h   
   201                              <1> ;------------------------------------------------------------------------;
   202                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   203                              <1> ; to an internal buffer, and then copying it to the specified location
   204                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   205                              <1> ; another request for the same sector from the same device is made, so 
   206                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   207                              <1> ; size, selected according to the largest detected sector size during 
   208                              <1> ; the initial loadup.
   209                              <1> ;
   210                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   211                              <1> ;
   212                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   213                              <1> ;------------------------------------------------------------------------;
   214                              <1> 
   215                              <1> struc bufferHdr
   216 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   217 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   218 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   219 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   220 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   221 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   222 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   223 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   224 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   225                              <1>     .dataarea:             ;Points to the start of the data area
   226                              <1> endstruc
   227                              <1> ;Buffer Flag equates
   228                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   229                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   230                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   231                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   232                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   233                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   234                              <1> ;Note! A buffer is marked as referenced only when the application 
   235                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   236                              <1> ;------------------------------------------------------------------------;
   237                              <1> ; Memory control block for each memory arena
   238                              <1> ;------------------------------------------------------------------------;
   239                              <1> struc mcb
   240 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   241 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   242 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   243 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   244                              <1>     .program:
   245                              <1> endstruc
   246                              <1> ;MCB equates
   247                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   248                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   249                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   250                              <1> mcbMarkCtn      equ "M"
   251                              <1> mcbMarkEnd      equ "Z"
   252                              <1> 
   253                              <1> memFirstFit     equ 0   ;First free block goes to application
   254                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   255                              <1> memLastFit      equ 2   ;Last free block goes to application
   256                              <1> 
   257                              <1> ;Owner = Para aligned address => Owning application PSP
   258                              <1> ;...To consider...
   259                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   260                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   261                              <1> ;------------------------------------------------------------------------;
   262                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   263                              <1> ; following order, thus allowing for return values to be placed in the 
   264                              <1> ; registers by accessing the caller register stack frame.
   265                              <1> ;------------------------------------------------------------------------;
   266                              <1> struc callerFrame
   267 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   268 00000008 ????????????????    <1>     .rbx    resq 1    
   269 00000010 ????????????????    <1>     .rcx    resq 1
   270 00000018 ????????????????    <1>     .rdx    resq 1
   271 00000020 ????????????????    <1>     .rsi    resq 1
   272 00000028 ????????????????    <1>     .rdi    resq 1
   273 00000030 ????????????????    <1>     .rbp    resq 1
   274 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   275 00000040 ????????????????    <1>     .r9     resq 1
   276                              <1> ;Pushed by Processor when invoked via Interrupt
   277 00000048 ????????????????    <1>     .rip    resq 1
   278 00000050 ????????????????    <1>     .cs     resq 1
   279 00000058 ????????????????    <1>     .flags  resq 1
   280                              <1> endstruc
   281                              <1> 
   282                              <1> struc dpl
   283                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   284                              <1> ; server calls
   285 00000000 ????????????????    <1>     .rax    resq 1
   286 00000008 ????????????????    <1>     .rbx    resq 1
   287 00000010 ????????????????    <1>     .rcx    resq 1
   288 00000018 ????????????????    <1>     .rdx    resq 1
   289 00000020 ????????????????    <1>     .rsi    resq 1
   290 00000028 ????????????????    <1>     .rdi    resq 1
   291 00000030 ????????????????    <1>     .r8     resq 1
   292 00000038 ????????????????    <1>     .r9     resq 1
   293 00000040 ????????????????    <1>     .align  resq 1
   294 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   295 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   296                              <1> endstruc
   297                              <1> 
   298                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   299 00000000 ????????????????    <1>     .oldRBP         resq 1  
   300 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   301 00000009 ??                  <1>     .newSFTVal      resb 1
   302 0000000A ??                  <1>     .newFCBSVal     resb 1
   303 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   304 0000000C ??                  <1>     .newLastdrive   resb 1
   305 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   306 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   307 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   308 00000014 ????????            <1>                     resd 1  ;Alignment byte
   309 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   310                              <1> endstruc
   311                              <1> 
   312                              <1> struc fcb
   313                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   314 00000000 ??                  <1>     .driveNum   resb 1
   315 00000001 ????????????????    <1>     .filename   resb 8
   316 00000009 ??????              <1>     .fileext    resb 3
   317 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   318                              <1> ;One block consists of 128 records, of size denoted in the below
   319 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   320 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   321 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   322 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   323 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   324 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   325 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   326 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   327 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   328                              <1>     ;If record size > 64, high byte is ignored.
   329                              <1>     ;Used for random read and write operations to find the right record
   330                              <1> endstruc
   331                              <1> 
   332                              <1> struc filename
   333                              <1> ;8.3 File name struct
   334 00000000 ????????????????    <1>     .fName  resb 8
   335 00000008 ??????              <1>     .fExt   resb 3
   336                              <1> endstruc
   337                              <1> 
   338                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   339 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   340 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   341 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   342 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   343 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   344 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   345 00000016 ????                <1>     .fileTime   resw 1  ;File time
   346 00000018 ????                <1>     .fileDate   resw 1  ;File date
   347 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   348 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   349                              <1> endstruc
   350                              <1> 
   351                              <1> struc psp
   352 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   353 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   354 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   355 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   356 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   357 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   358 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   359 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   360 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   361 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   362 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   363 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   364 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   365 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   366                              <1> ;Extra handle arrays are grouped into a linked list
   367                              <1> ;The below are in the same place as in DOS
   368 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   369 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   370                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   371 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   372 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   373                              <1> endstruc
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   resw 1
   377 00000002 ??                  <1>     .minutes    resb 1
   378 00000003 ??                  <1>     .hours      resb 1
   379 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    resb 1
   381                              <1> endstruc
   382                              <1> 
   383                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   384                              <1> ;for a space of 64Gb
   385                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   386                              <1> dosLowBase  equ 600h    ;Low load address
   387                              <1> 
   388                              <1> ;Critical Error AH bitfield equates
   389                              <1> critRead    equ 0h
   390                              <1> critWrite   equ 1h
   391                              <1> critDOS     equ 0h
   392                              <1> critFAT     equ 2h
   393                              <1> critDir     equ 4h
   394                              <1> critData    equ 6h
   395                              <1> critFailOK  equ 8h
   396                              <1> critRetryOK equ 10h
   397                              <1> critIgnorOK equ 20h
   398                              <1> critCharDev equ 80h
   399                              <1> 
   400                              <1> critIgnore  equ 0
   401                              <1> critRetry   equ 1
   402                              <1> critAbort   equ 2
   403                              <1> critFail    equ 3
   404                              <1> 
   405                              <1> ;MISC ASCII control chars
   406                              <1> NUL equ 00h ;^@         | ASCII Null
   407                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   408                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   409                              <1> BEL equ 07h ;^G         | ASCII Bell
   410                              <1> BSP equ 08h ;^H         | ASCII Backspace
   411                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   412                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   413                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   414                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   415                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   416                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   417                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   418                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   419                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   420                              <1> SPC equ 20h ;Printable  | ASCII Space
   421                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   422                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   423                              <1> 
   424                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   425                              <1> ;Extended Ascii Codes
   426                              <1> eF1     equ 3Bh ;F1 second byte
   427                              <1> eF2     equ 3Ch ;F2 second byte
   428                              <1> eF3     equ 3Dh ;F3 second byte
   429                              <1> eF4     equ 3Eh ;F4 second byte
   430                              <1> eF5     equ 3Fh ;F5 second byte
   431                              <1> eF6     equ 40h ;F6 second byte
   432                              <1> eF7     equ 41h ;F7 second byte
   433                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   434                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   435                              <1> eIns    equ 52h ;Insert second byte
   436                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   437                              <1> 
   438                              <1> ;Default Configuration for the system
   439                              <1> 
   440                              <1> buffersDefault  equ 30
   441                              <1> filesDefault    equ 20
   442                              <1> fcbsDefault     equ 4
   443                              <1> safeFcbsDeflt   equ 0
   444                              <1> lastDriveDeflt  equ 5   
     9                                  %include "./Source/Debug/debSym.inc"
    10                              <1> ;This file will include the debuging symbols
    11                              <1> 
    12                              <1> %define true 1
    13                              <1> %define false 0
    14                              <1> 
    15                              <1> ;Switch the DEBUG to false in production!
    16                              <1> %define DEBUG false
    17                              <1> %define DPBINFO false
    18                              <1> %define REGS false
    19                              <1> %define ENDSTATUS true
    20                              <1> %define ALLOCTEST false
    21                              <1> 
    22                              <1> 
    23                              <1> ;Use this space as the debug stack
    24                              <1> %define debStackTop 80000h
    10                                  %include "./Source/Include/dosError.inc"
    11                              <1> ;DOS Error codes
    12                              <1> 
    13                              <1> ;Extended Error Codes
    14                              <1> errInvFnc   equ 1   ;Invalid function number
    15                              <1> errFnf      equ 2   ;File not found
    16                              <1> errPnf      equ 3   ;Path not found
    17                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    18                              <1> errAccDen   equ 5   ;Access denied (to resource)
    19                              <1> errBadHdl   equ 6   ;Invalid handle
    20                              <1> errMCBbad   equ 7   ;MCB's destroyed
    21                              <1> errNoMem    equ 8   ;Insufficient memory
    22                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    23                              <1> errBadEnv   equ 10  ;Invalid environment
    24                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    25                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    26                              <1> errInvDat   equ 13  ;Invalid data
    27                              <1> ;           equ 14  ;Reserved
    28                              <1> errBadDrv   equ 15  ;Invalid drive specified
    29                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    30                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    31                              <1> errNoFil    equ 18  ;No more files
    32                              <1> ;The following are Driver error codes + 19
    33                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    34                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    35                              <1> errUnkUnt   equ 20  ;Unknown Unit
    36                              <1> errDrvNR    equ 21  ;Drive not ready
    37                              <1> errUnkCmd   equ 22  ;Unknown Command
    38                              <1> errCRCerr   equ 23  ;Data (CRC) error
    39                              <1> errBadRLn   equ 24  ;Bad request structure length
    40                              <1> errSekErr   equ 25  ;Seek error
    41                              <1> errUnkMed   equ 26  ;Unknown media type
    42                              <1> errSecNF    equ 27  ;Sector not Found
    43                              <1> errNoPap    equ 28  ;Printer out of paper
    44                              <1> errWF       equ 29  ;Write fault
    45                              <1> errRF       equ 30  ;Read fault
    46                              <1> errGF       equ 31  ;General fault
    47                              <1> ;----------------------------------------------
    48                              <1> ;The following two go inbetween the Disk errors
    49                              <1> errShrVio   equ 32  ;Sharing violations
    50                              <1> errLokVio   equ 33  ;File Lock violation
    51                              <1> ;----------------------------------------------
    52                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    53                              <1> errNoFCB    equ 35  ;FCB unavailable
    54                              <1> errShrFul   equ 36  ;Sharing buffer full
    55                              <1> 
    56                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    57                              <1> 
    58                              <1> errFilExist equ 80  ;File already exists
    59                              <1> errDirExist equ 82  ;Directory already exists
    60                              <1> errFI44     equ 83  ;Fail on INT 44h
    61                              <1> errRedir    equ 84  ;Too many levels of redirection
    62                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    63                              <1> errBadPass  equ 86  ;Bad password
    64                              <1> errBadParam equ 87  ;Bad parameter passed to request
    65                              <1> errNetWrite equ 88  ;Network Write Fault
    66                              <1> ;-----------------------------------------------------------------------------
    67                              <1> ;Error Loci
    68                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    69                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    70                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    71                              <1> eLocChr     equ 4   ;Serial/Character Device error
    72                              <1> eLocMem     equ 5   ;Related to RAM
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error Actions
    75                              <1> eActRet     equ 1   ;Retry
    76                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    77                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    78                              <1> eActAbt     equ 4   ;Abort with cleanup
    79                              <1> eActKil     equ 5   ;Abort without cleanup
    80                              <1> eActIgn     equ 6   ;Ignore error
    81                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    82                              <1> ;-----------------------------------------------------------------------------
    83                              <1> ;Error classes
    84                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    85                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    86                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    87                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    88                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    89                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    90                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    91                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    92                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    93                              <1> eClsLocked  equ 10  ;Resource Locked
    94                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    95                              <1> eClsClash   equ 12  ;Resource already exists!
    96                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  %include "./Source/Include/dosExec.inc"
    12                              <1> ;This include file contains structures related to the EXE format
    13                              <1> ; and the exec frame used when setting up the EXE in memory by 41h/4Bh
    14                              <1> 
    15                              <1> ;Int 41h/4Bh stack frame, used to store values whilst processing a EXE or COM
    16                              <1> ; file.
    17                              <1> execLoadGo  equ 0
    18                              <1> execLoad    equ 1
    19                              <1> execInvld   equ 2
    20                              <1> execOverlay equ 3
    21                              <1> 
    22                              <1> struc execFrame
    23 00000000 ????????????????    <1>     .oldRBP     resq 1  
    24 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    25 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    26 00000018 ????????????????    <1>     .wEnvSize   resq 1  ;Size of the environment block
    27 00000020 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    28                              <1>                 ;resb 1  ;Alignment byte
    29 00000028 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    30 00000030 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    31                              <1> 
    32 00000038 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    33 00000040 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    34 00000048 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to new Program Base address (consider removing)
    35 00000050 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    36                              <1> .pProgEP:   ;Program EP, recycle this qword
    37 00000058 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    38 00000060 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    39                              <1>                 ;resw 1  ;Alignment reservation
    40                              <1> .qRelocVal:  ;Used when computing relocations, Rebasing factor
    41 00000068 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    42                              <1>                 ;resd 1  ;Alignment reservation, DO NOT USE FOR ANYTHING
    43                              <1> endstruc
    44                              <1> 
    45                              <1> ;Possible blocks to be pointed to by rbx
    46                              <1> 
    47                              <1> struc execProg 
    48 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    49 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    50 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    51 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    52                              <1> endstruc
    53                              <1> 
    54                              <1> struc loadProg
    55 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    56 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    57 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    58 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    59 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    60 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    61                              <1> endstruc
    62                              <1> 
    63                              <1> struc loadOvly
    64 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    65 00000008 ????????            <1>     .dRelocFct  resd 1  ;Relocation factor for 
    66                              <1> endstruc
    67                              <1> 
    68                              <1> ;----------------------------
    69                              <1> ;   EXE header structures   :
    70                              <1> ;----------------------------
    71                              <1> 
    72                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    73                              <1> dosMagicSignature   equ "MZ"
    74                              <1> dosMagicSignature2  equ "ZM"
    75                              <1> struc imageDosHdr
    76 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    77 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    78 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    79 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    80 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    81 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    82 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    83 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    84 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    85 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    86 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    87 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    88 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    89 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    90 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    91 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    92 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    93 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    94 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    95                              <1> endstruc
    96                              <1> 
    97                              <1> ;Pssobile signatures pointed to by e_lfanew
    98                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    99                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
   100                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
   101                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
   102                              <1> 
   103                              <1> ;COFF File header, immadiately follows the signature so @ [e_lfanew + 4]
   104                              <1> 
   105                              <1> struc imageFileHeader
   106 00000000 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
   107 00000002 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
   108 00000004 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
   109 00000008 ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
   110 0000000C ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   111 00000010 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   112 00000012 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   113                              <1> endstruc
   114                              <1> 
   115                              <1> ;The only valid values in the .machineType field
   116                              <1> 
   117                              <1> imageFileMachineUnknown equ 0
   118                              <1> imageFileMachineAMD64   equ 08664h 
   119                              <1> 
   120                              <1> ;Optional header, immediately follows COFF header
   121                              <1> 
   122                              <1> struc imageFileOptionalHeader
   123 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   124 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   125 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   126 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   127 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   128 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   129 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   130 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   131 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   132 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   133 00000024 ????????            <1> 	.dFileAlignment             resd 1
   134 00000028 ????                <1> 	.wMajOSVer                  resw 1
   135 0000002A ????                <1> 	.wMinOSVer                  resw 1
   136 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   137 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   138 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   139 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   140 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   141 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   142 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   143 00000040 ????????            <1> 	.dCheckSum                  resd 1
   144 00000044 ????                <1> 	.wSubsystem                 resw 1
   145 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   146 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   147 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   148 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   149 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   150 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   151 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   152                              <1> endstruc
   153                              <1> 
   154                              <1> romMagicNum     equ 0107h
   155                              <1> pe32MagicNum    equ 010Bh
   156                              <1> pe64MagicNum    equ 020Bh
   157                              <1> 
   158                              <1> ;Data directory header structure
   159                              <1> 
   160                              <1> struc imageDataDirectory
   161 00000000 ????????            <1>     .virtualAddress  resd 1
   162 00000004 ????????            <1>     .size    resd 1
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc baseRelocBlock
   166 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   167 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   168                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   169                              <1> endstruc
   170                              <1> ;Section headers that form the Section Table.
   171                              <1> ;There are wNumberOfSections many entries in this table.
   172                              <1> ;Each entry is one imageSectionHdr
   173                              <1> 
   174                              <1> struc imageSectionHdr       ;size 40 bytes
   175 00000000 ????????????????    <1>     .name                   resb 8
   176 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   177 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   178 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   179 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   180 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   181 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   182 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   183 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   184 00000024 ????????            <1> 	.dCharacteristics       resd 1
   185                              <1> endstruc
   186                              <1> 
   187                              <1> ;Section Hdr characteristics flags 
   188                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   189                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   190                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    12                                  Segment .text align=1   ;Init code
    13                                  %define currSegVBase 0
    14                                  %include "./Source/Sysinit/sysInit.asm"
    15                              <1> ; We arrive here with the following values in the registers.
    16                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    17                              <1> ; dx  = Int 33h boot device number
    18                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    19                              <1> 
    20 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    21 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
    22 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
    23 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    24 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    25 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    26 0000001A F348A5              <1>     rep movsq   ;Copy over
    27 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    28 00000022 50                  <1>     push rax
    29 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    30                              <1> sysInitldr:
    31                              <1> ;Now the tough part, load DOS to 800
    32 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    33                              <1> .read:
    34 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    35 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    35 00000035 00                  <1>
    36 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    37 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    38 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    39 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    40 0000003F CD33                <1>     int 33h
    41 00000041 7206                <1>     jc .readFail
    42 00000043 6800080000          <1>     push qword 800h
    43 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    44                              <1> .readFail:
    45 00000049 FFCE                <1>     dec esi
    46 0000004B 75DC                <1>     jnz .read
    47 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    48 00000054 B804130000          <1>     mov eax, 1304h
    49 00000059 CD30                <1>     int 30h
    50 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    51 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    51 00000066 6F6164204572726F72- <1>
    51 0000006F 0A0D00              <1>
    52 00000072 000000000000000000- <1>     db 100h-($-$$) dup 00h ;Fill with nulls  
    52 0000007B 000000000000000000- <1>
    52 00000084 000000000000000000- <1>
    52 0000008D 000000000000000000- <1>
    52 00000096 000000000000000000- <1>
    52 0000009F 000000000000000000- <1>
    52 000000A8 000000000000000000- <1>
    52 000000B1 000000000000000000- <1>
    52 000000BA 000000000000000000- <1>
    52 000000C3 000000000000000000- <1>
    52 000000CC 000000000000000000- <1>
    52 000000D5 000000000000000000- <1>
    52 000000DE 000000000000000000- <1>
    52 000000E7 000000000000000000- <1>
    52 000000F0 000000000000000000- <1>
    52 000000F9 00000000000000      <1>
    53                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    54                              <1>     ;Store space for a static PSP
    55 00000100 000000000000000000- <1>     db 100h dup 00h
    55 00000109 000000000000000000- <1>
    55 00000112 000000000000000000- <1>
    55 0000011B 000000000000000000- <1>
    55 00000124 000000000000000000- <1>
    55 0000012D 000000000000000000- <1>
    55 00000136 000000000000000000- <1>
    55 0000013F 000000000000000000- <1>
    55 00000148 000000000000000000- <1>
    55 00000151 000000000000000000- <1>
    55 0000015A 000000000000000000- <1>
    55 00000163 000000000000000000- <1>
    55 0000016C 000000000000000000- <1>
    55 00000175 000000000000000000- <1>
    55 0000017E 000000000000000000- <1>
    55 00000187 000000000000000000- <1>
    55 00000190 000000000000000000- <1>
    55 00000199 000000000000000000- <1>
    55 000001A2 000000000000000000- <1>
    55 000001AB 000000000000000000- <1>
    55 000001B4 000000000000000000- <1>
    55 000001BD 000000000000000000- <1>
    55 000001C6 000000000000000000- <1>
    55 000001CF 000000000000000000- <1>
    55 000001D8 000000000000000000- <1>
    55 000001E1 000000000000000000- <1>
    55 000001EA 000000000000000000- <1>
    55 000001F3 000000000000000000- <1>
    55 000001FC 00000000            <1>
    56                              <1> ;END OF FIRST SECTOR!!
    57                              <1> ;DOS SYSINIT BEGINS HERE
    58                              <1> ;First move the alignment of the DOSSEG to 4Kb
    59                              <1> initBegin:
    60 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    61 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    62 00000206 0F32                <1>     rdmsr
    63 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    64 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    65 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    66 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    67 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    68 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    69 00000221 89F8                <1>     mov eax, edi
    70 00000223 4889FA              <1>     mov rdx, rdi
    71 00000226 48C1EA20            <1>     shr rdx, 20h
    72 0000022A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    73                              <1> ;------------------------------------------------;
    74                              <1> ;              Connect Debugger                  ;
    75                              <1> ;------------------------------------------------;
    76                              <1> %if DEBUG
    77                              <1> ;Only connect if in debug mode
    78                              <1>     mov eax, 0C501h ;Connect debugger
    79                              <1>     int 35h
    80                              <1> %endif
    81                              <1> ;------------------------------------------------;
    82                              <1> ;           Sanitise the data area               ;
    83                              <1> ;------------------------------------------------;
    84                              <1> ; This call initialises ALL fields in the DOS    ;
    85                              <1> ; data area with 0's. Thus any fields, which     ;
    86                              <1> ; need to be initialised with a 0 value, are     ;
    87                              <1> ; initialised for free.                          ;
    88                              <1> ;------------------------------------------------;
    89 0000022C B9[B2D90300]        <1>     mov ecx, dSegLen
    90 00000231 30C0                <1>     xor al, al
    91 00000233 57                  <1>     push rdi    ;Temp save rdi on the stack
    92 00000234 F3AA                <1>     rep stosb
    93 00000236 5F                  <1>     pop rdi
    94                              <1> ;------------------------------------------------;
    95                              <1> ;          Start saving Basic DOS data           ;
    96                              <1> ;------------------------------------------------;
    97 00000237 6444883C25-         <1>     mov byte fs:[bootDrive], r15b ;Save the boot drive in memory
    97 0000023C [10C00300]          <1>
    98                              <1> ;Copy DOS to its final resting place
    99 00000240 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    99 00000245 [00C00300]          <1>
   100 00000249 6448893425-         <1>     mov qword fs:[biosUBase], rsi
   100 0000024E [08C00300]          <1>
   101 00000252 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
   102 00000255 4881C7[B2D90300]    <1>     add rdi, dSegLen ;Move destination past end of data area
   103 0000025C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
   104 00000263 B900100000          <1>     mov ecx, 1000h
   105 00000268 F348A5              <1>     rep movsq
   106                              <1> 
   107 0000026B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   108 0000026D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   109 00000271 664489C0            <1>     mov ax, r8w
   110 00000275 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
   111 0000027D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
   112 00000285 64C60425[70C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
   112 0000028D 05                  <1>
   113 0000028E 64C60425[96C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 20 files, at start 5
   113 00000296 05                  <1>
   114 00000297 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
   114 0000029C [97C00300]1400      <1>
   115 000002A2 64C60425[71C00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
   115 000002AA 01                  <1>
   116                              <1>     ;If no detected Int 33h devices, halt 
   117 000002AB 49C1E810            <1>     shr r8, 2*8
   118 000002AF 4584C0              <1>     test r8b, r8b
   119 000002B2 0F849C0C0000        <1>     jz errorInit
   120                              <1> ;------------------------------------------------;
   121                              <1> ;          Add additional page tables            ;
   122                              <1> ;------------------------------------------------;
   123                              <1> ;This will allow for up to 64Gb of addressible space
   124 000002B8 4889EF              <1>     mov rdi, rbp
   125                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
   126 000002BB B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
   127 000002C0 57                  <1>     push rdi
   128 000002C1 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
   128 000002CA 00                  <1>
   129                              <1> pdtLoop:
   130 000002CB 48AB                <1>     stosq
   131 000002CD 480500002000        <1>     add rax, 200000h
   132 000002D3 FFC9                <1>     dec ecx
   133 000002D5 75F4                <1>     jnz pdtLoop
   134 000002D7 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   135                              <1> ;Now we add every 4kb page to the page directory pointer table
   136                              <1> ;15 4kb pages to consider
   137 000002D8 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   138 000002DB 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   139 000002DE 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   140 000002E5 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   141 000002EC B93C000000          <1>     mov ecx, 60
   142 000002F1 480D03000000        <1>     or rax, 3h      ;present and r/w
   143                              <1> pdptLoop:
   144 000002F7 48AB                <1>     stosq
   145 000002F9 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   146 000002FF FFC9                <1>     dec ecx
   147 00000301 75F4                <1>     jnz pdptLoop
   148 00000303 0F20DF              <1>     mov rdi, cr3
   149 00000306 0F22DF              <1>     mov cr3, rdi
   150                              <1> ;------------------------------------------------;
   151                              <1> ;                   MCB inits                    ;
   152                              <1> ;------------------------------------------------;
   153                              <1> mcbInit:
   154 00000309 B820E80000          <1>     mov eax, 0E820h
   155 0000030E CD35                <1>     int 35h
   156                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   157 00000310 E804010000          <1>     call .mcbFindAddress
   158 00000315 7349                <1>     jnc .mcbi1  ;If found, proceed
   159                              <1>     ;Here, we try use E801h
   160 00000317 B801E80000          <1>     mov eax, 0E801h
   161 0000031C CD35                <1>     int 35h
   162 0000031E 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   163 00000321 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   164 00000324 85C0                <1>     test eax, eax
   165 00000326 741B                <1>     jz .worst
   166 00000328 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   167 0000032B C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   168 0000032E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   169 00000336 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   170 0000033E E909010000          <1>     jmp mcbBuild
   171                              <1> .worst:
   172                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   173 00000343 B800002000          <1>     mov eax, 200000h
   174 00000348 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   174 0000034D [08C00300]          <1>
   175 00000351 29D8                <1>     sub eax, ebx
   176 00000353 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   177 0000035B E9EC000000          <1>     jmp mcbBuild 
   178                              <1> .mcbi1:
   179 00000360 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   180 00000363 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   180 0000036C 00                  <1>
   181 0000036D 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   182 00000371 0F85C2000000        <1>     jne .mcbFail
   183 00000377 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   184                              <1>     ;PCI hole always exists so this value will always be a dword
   185 0000037B 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   186 00000383 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   187 00000386 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   188 00000389 4881FB00000001      <1>     cmp rbx, 1000000h  
   189 00000390 773C                <1>     ja .skipISA
   190                              <1> ;Here we deal with ISA hole issues
   191 00000392 B820E80000          <1>     mov eax, 0E820h
   192 00000397 CD35                <1>     int 35h
   193 00000399 48B800000001000000- <1>     mov rax, 1000000h
   193 000003A2 00                  <1>
   194 000003A3 E871000000          <1>     call .mcbFindAddress
   195 000003A8 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   196 000003AE 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   196 000003B7 00                  <1>
   197 000003B8 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   198 000003BC 0F858A000000        <1>     jne mcbBuild  
   199 000003C2 488B5808            <1>     mov rbx, qword [rax + 8]
   200 000003C6 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   201                              <1> .skipISA:
   202 000003CE B820E80000          <1>     mov eax, 0E820h
   203 000003D3 CD35                <1>     int 35h
   204 000003D5 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   204 000003DE 00                  <1>
   205 000003DF E835000000          <1>     call .mcbFindAddress
   206 000003E4 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   207 000003E6 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   207 000003EF 00                  <1>
   208 000003F0 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   209 000003F4 7556                <1>     jne mcbBuild   
   210 000003F6 488B5808            <1>     mov rbx, qword [rax + 8]
   211                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   212 000003FA 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   212 00000403 00                  <1>
   213 00000404 4839CB              <1>     cmp rbx, rcx
   214 00000407 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   215 0000040B 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   215 00000410 [1BC00300]          <1>
   216 00000414 E933000000          <1>     jmp mcbBuild
   217                              <1> .mcbFindAddress:
   218                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   219                              <1> ;Entry: rax = Address of arena to search for
   220                              <1> ;       rsi = Pointer to memory map
   221                              <1> ;       ecx = Number of 24 byte entries
   222                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   223                              <1> ;       CF=CY : value in rax not found
   224 00000419 56                  <1>     push rsi
   225 0000041A 51                  <1>     push rcx
   226 0000041B 50                  <1>     push rax
   227                              <1> .mfa0:
   228 0000041C 483B06              <1>     cmp rax, qword [rsi]
   229 0000041F 7410                <1>     je .mcbAddressFound
   230 00000421 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   231 00000428 FFC9                <1>     dec ecx
   232 0000042A 79F0                <1>     jns .mfa0
   233                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   234 0000042C 58                  <1>     pop rax
   235 0000042D 59                  <1>     pop rcx
   236 0000042E 5E                  <1>     pop rsi
   237 0000042F F9                  <1>     stc
   238 00000430 C3                  <1>     ret
   239                              <1> .mcbAddressFound:
   240 00000431 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   241 00000434 59                  <1>     pop rcx ;Pop old rax value off
   242 00000435 59                  <1>     pop rcx
   243 00000436 5E                  <1>     pop rsi
   244 00000437 F8                  <1>     clc
   245 00000438 C3                  <1>     ret
   246                              <1> .mcbFail:
   247 00000439 488D2D4A0B0000      <1>     lea rbp, mcbFailmsg
   248 00000440 B804130000          <1>     mov eax, 1304h
   249 00000445 CD30                <1>     int 30h
   250 00000447 E9080B0000          <1>     jmp errorInit
   251                              <1> 
   252                              <1> mcbBuild:
   253                              <1> ;Actually build the MCB chain here
   254                              <1> ;Start by computing the difference between userbase and DOS area
   255                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   256 0000044C 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   256 00000451 [08C00300]          <1>
   257 00000455 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   258 0000045C 56                  <1>     push rsi    ;Save ptr
   259 0000045D 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   260 00000464 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   261 00000467 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   262 0000046F 5B                  <1>     pop rbx
   263 00000470 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   264 00000473 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   265 0000047B 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   266 00000483 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   267 00000486 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   268 00000489 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   268 0000048E [2BC00300]          <1>
   269                              <1> 
   270                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   271 00000492 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   271 0000049A 00000000            <1>
   272 0000049E 746E                <1>     jz .skipISA
   273                              <1>     ;Here if an ISA hole exists, place a MCB around it
   274 000004A0 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   275                              <1>     ;Remove one MCB worth of space from alloc
   276 000004A7 31C9                <1>     xor ecx, ecx
   277 000004A9 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   278 000004AC 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   279 000004B2 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   280 000004B5 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   281 000004B8 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   282 000004BB C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   283 000004BE 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   284 000004C6 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   284 000004CF 00                  <1>
   285 000004D0 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   286 000004D3 480510000000        <1>     add rax, mcb_size
   287 000004D9 4829C1              <1>     sub rcx, rax    ;Take their difference
   288 000004DC C1E904              <1>     shr ecx, 4
   289 000004DF 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   290 000004E2 C1E104              <1>     shl ecx, 4  ;Get bytes again
   291 000004E5 4881C310000000      <1>     add rbx, mcb_size
   292 000004EC 4801CB              <1>     add rbx, rcx
   293                              <1>     ;RBX should now be at 16Mb
   294 000004EF C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   295 000004F2 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   296 000004FA 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   297 00000502 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   298 00000505 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   299 0000050B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   300                              <1> .skipISA:
   301                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   302                              <1>     ;rbx points to a block with "Z" marker
   303 0000050E 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   303 00000516 00000000            <1>
   304 0000051A 7470                <1>     jz .exit
   305                              <1>     ;Add PCI hole MCB
   306 0000051C 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   307                              <1>     ;Remove one MCB worth of space from alloc
   308 00000523 31C9                <1>     xor ecx, ecx
   309 00000525 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   310 00000528 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   311 0000052E C1E104              <1>     shl ecx, 4  ;Get bytes
   312 00000531 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   313 00000534 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   314 00000537 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   315 0000053A 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   316 00000542 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   316 0000054B 00                  <1>
   317 0000054C 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   318 0000054F 480510000000        <1>     add rax, mcb_size
   319 00000555 4829C1              <1>     sub rcx, rax    ;Take their difference
   320 00000558 C1E904              <1>     shr ecx, 4
   321 0000055B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   322 0000055E C1E104              <1>     shl ecx, 4  ;Get bytes again
   323 00000561 4881C310000000      <1>     add rbx, mcb_size
   324 00000568 4801CB              <1>     add rbx, rcx
   325                              <1>     ;RBX should now be at 4Gb
   326 0000056B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   327 0000056E 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   328 00000576 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   328 0000057B [1BC00300]          <1>
   329 0000057F 48C1E904            <1>     shr rcx, 4
   330 00000583 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   331 00000589 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   332                              <1> .exit:
   333                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   334 0000058C 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   335                              <1> ;------------------------------------------------;
   336                              <1> ;          Kernel inits and adjustments          ;
   337                              <1> ;------------------------------------------------;
   338                              <1> ;Adjust Interrupt Entries Int 40h-49h
   339                              <1> adjInts:
   340 00000593 B340                <1>     mov bl, 40h
   341 00000595 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   342 0000059A CD35                <1>     int 35h
   343 0000059C B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   344 000005A1 488D3D980A0000      <1>     lea rdi, intData
   345 000005A8 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   346                              <1> .ai0:
   347 000005AA B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   348 000005AF 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   349 000005B2 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   350                              <1> .ai1:
   351 000005B5 CD35                <1>     int 35h
   352 000005B7 4881C708000000      <1>     add rdi, 8
   353 000005BE FFC1                <1>     inc ecx
   354 000005C0 81F950000000        <1>     cmp ecx, 50h
   355 000005C6 75E2                <1>     jne .ai0
   356                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   357                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   358                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   359                              <1>     %if DEBUG
   360                              <1> debugPopUpMsg:
   361                              <1>     push rbx
   362                              <1>     push rbp
   363                              <1>     push rcx
   364                              <1>     push rdx
   365                              <1>     mov ecx, 53 ;A large number of lines
   366                              <1>     xor edx, edx    ;COM 1
   367                              <1> .cls:
   368                              <1>     mov eax, 010Ah ;Transmit Line feed
   369                              <1>     int 34h
   370                              <1>     dec ecx
   371                              <1>     jnz .cls
   372                              <1>     lea rbx, qword [debPrintNullString + rbp]
   373                              <1>     lea rbp, .msg
   374                              <1>     call rbx
   375                              <1>     jmp short .exit
   376                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   377                              <1> .exit:
   378                              <1>     pop rdx
   379                              <1>     pop rcx
   380                              <1>     pop rbp
   381                              <1>     pop rbx
   382                              <1>     %endif
   383                              <1> 
   384                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   385 000005C8 488D1585090000      <1>     lea rdx, errorInit ;Get segment start address
   386 000005CF B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   387 000005D4 CD41                <1>     int 41h
   388 000005D6 488D1577090000      <1>     lea rdx, errorInit ;Get segment start address
   389 000005DD B844250000          <1>     mov eax, 2544h
   390 000005E2 CD41                <1>     int 41h
   391                              <1> ;------------------------------------------------;
   392                              <1> ;          Driver Adjustments and inits          ;
   393                              <1> ;------------------------------------------------;
   394                              <1> ;Modify the pointers in nData before putting them in the data area
   395 000005E4 48012DD50A0000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   396 000005EB 48012DD80A0000      <1>     add qword [nData + drvHdr.strPtr], rbp
   397 000005F2 48012DD90A0000      <1>     add qword [nData + drvHdr.intPtr], rbp
   398                              <1> ;Copy the Null driver to its location in Sysvars
   399 000005F9 B922000000          <1>     mov ecx, drvHdr_size
   400 000005FE 488D35BB0A0000      <1>     lea rsi, qword [nData]
   401 00000605 488DBD[73C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   402 0000060C F3A4                <1>     rep movsb   
   403                              <1> 
   404                              <1> ;Adjust the addresses in the other driver headers 
   405 0000060E 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   405 00000610 [EC5A000000000000]  <1>
   406 00000618 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   407 0000061D 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   408                              <1> adjDrivers:
   409 00000621 E812090000          <1>     call adjustDrvHdr
   410 00000626 E2F9                <1>     loop adjDrivers
   411                              <1> ;Open NUL
   412                              <1> ;NUL opened
   413                              <1> ;Open CON
   414                              <1> conInit:    ;Rather than keeping this resident... do it here
   415                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   416 00000628 488D95[D75D0000]    <1>     lea rdx, qword [rbp + fastOutput]
   417 0000062F B849250000          <1>     mov eax, 2549h
   418 00000634 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   419 00000636 488D95[DF5D0000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   420 0000063D B83B250000          <1>     mov eax, 253Bh
   421 00000642 CD41                <1>     int 41h ;Hook int 3Bh
   422                              <1> .ci0:
   423 00000644 B401                <1>     mov ah, 01      ;Get buffer status
   424 00000646 CD36                <1>     int 36h
   425 00000648 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   426 0000064A 30E4                <1>     xor ah, ah
   427 0000064C CD36                <1>     int 36h ;Read key to flush from buffer
   428 0000064E EBF4                <1>     jmp short .ci0
   429                              <1> .ci1:
   430 00000650 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   431 00000655 CD30                <1>     int 30h
   432 00000657 B402                <1>     mov ah, 02h
   433 00000659 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   434 0000065B 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   435 0000065D CD30                <1>     int 30h
   436 0000065F B707                <1>     mov bh, 07h     ;Grey/Black attribs
   437 00000661 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   438 00000666 CD30                <1>     int 30h
   439                              <1> 
   440                              <1>     ;Save ptr to ConHdr in Sysvars
   441 00000668 488D85[EC5A0000]    <1>     lea rax, qword [rbp + conHdr]
   442 0000066F 6448890425-         <1>     mov qword fs:[vConPtr], rax
   442 00000674 [4BC00300]          <1>
   443                              <1> 
   444                              <1>     ;Fix the ext ESC function handler address
   445 00000678 488D85[CD270000]    <1>     lea rax, qword [rbp + editKeys]
   446 0000067F 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   446 00000684 [59000000]          <1>
   447                              <1> 
   448                              <1> ;CLOCK init prock
   449                              <1> ;Set the time and date using the RTC (if present)
   450                              <1> clkInit:
   451                              <1>    ;Save ptr to ClkHdr in Sysvars first
   452 00000688 488D85[525B0000]    <1>     lea rax, qword [rbp + clkHdr]
   453 0000068F 6448890425-         <1>     mov qword fs:[clockPtr], rax
   453 00000694 [43C00300]          <1>
   454                              <1> ;CH - Hours, in BCD
   455                              <1> ;CL - Minutes, in BCD
   456                              <1> ;DH - Seconds, in BCD
   457 00000698 B402                <1>     mov ah, 02  ;Read RTC Time
   458 0000069A CD3A                <1>     int 3Ah
   459 0000069C 7271                <1>     jc .clkEnd  ;if error, just exit
   460                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   461 0000069E 0FB6C5              <1>     movzx eax, ch   ;Hours
   462 000006A1 E84D000000          <1>     call .bcd2Bin
   463 000006A6 88C5                <1>     mov ch, al
   464 000006A8 0FB6C1              <1>     movzx eax, cl     ;Mins
   465 000006AB E843000000          <1>     call .bcd2Bin
   466 000006B0 88C1                <1>     mov cl, al
   467 000006B2 0FB6C6              <1>     movzx eax, dh   ;Seconds
   468 000006B5 E839000000          <1>     call .bcd2Bin
   469 000006BA 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   470 000006BC 89C2                <1>     mov edx, eax
   471 000006BE B42D                <1>     mov ah, 2Dh ;DOS Set Time
   472 000006C0 CD41                <1>     int 41h
   473                              <1> ;Now get the date from RTC
   474                              <1> ;CL - Year, in BCD
   475                              <1> ;DH - Month, in BCD
   476                              <1> ;DL - Day, in BCD
   477 000006C2 B404                <1>     mov ah, 04  ;Read RTC Date
   478 000006C4 CD3A                <1>     int 3Ah
   479 000006C6 7247                <1>     jc .clkEnd
   480                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   481 000006C8 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   482 000006CB E823000000          <1>     call .bcd2Bin
   483 000006D0 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   484 000006D3 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   485 000006D9 0FB6C6              <1>     movzx eax, dh   ;Get Months
   486 000006DC E812000000          <1>     call .bcd2Bin
   487 000006E1 88C6                <1>     mov dh, al  
   488 000006E3 0FB6C2              <1>     movzx eax, dl   ;Get day
   489 000006E6 E808000000          <1>     call .bcd2Bin
   490 000006EB 88C2                <1>     mov dl, al
   491 000006ED B42B                <1>     mov ah, 2Bh ;DOS Set Date
   492 000006EF CD41                <1>     int 41h
   493 000006F1 EB1C                <1>     jmp short .clkEnd
   494                              <1> .bcd2Bin:
   495                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   496 000006F3 51                  <1>     push rcx
   497 000006F4 89C1                <1>     mov ecx, eax
   498 000006F6 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   499 000006FB 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   500 00000701 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   501 00000704 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   502                              <1> .b2blp:
   503 00000707 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   504 00000709 FFC9                <1>     dec ecx
   505 0000070B 75FA                <1>     jnz .b2blp
   506                              <1> .b2bexit:
   507 0000070D 59                  <1>     pop rcx
   508 0000070E C3                  <1>     ret
   509                              <1> .clkEnd:
   510                              <1> ;------------------------------------------------;
   511                              <1> ;         Link DOS to temporary Buffer           ;
   512                              <1> ;------------------------------------------------;
   513                              <1> tempBufferInit:
   514 0000070F 488DBD[E0020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   515 00000716 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   515 0000071B [55C00300]          <1>
   516 0000071F 31C0                <1>     xor eax, eax
   517 00000721 48FFC8              <1>     dec rax
   518 00000724 48AB                <1>     stosq   ;.nextBufPtr, end of list
   519 00000726 AA                  <1>     stosb   ;.driveNumber, Free entry
   520 00000727 48FFC0              <1>     inc rax
   521 0000072A AA                  <1>     stosb   ;.bufferFlags, No flags
   522                              <1> ;------------------------------------------------;
   523                              <1> ;         Init msd driver, create DPB            ;
   524                              <1> ;------------------------------------------------;
   525                              <1> storageInits:
   526                              <1> ;First save dpb pointer in sysvars
   527 0000072B 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   528 00000732 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   528 00000737 [33C00300]          <1>
   529                              <1> ;Open Mass Storage
   530 0000073B E8A2090000          <1>     call diskInit
   531 00000740 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   532 00000743 648A0425[6FC00300]  <1>     mov al, byte fs:[numPhysVol]
   533 0000074B 84C0                <1>     test al, al ;If no media with valid filesystems were detected, stop boot
   534 0000074D 0F8401080000        <1>     jz errorInit
   535 00000753 488D95[72640000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   536 0000075A 30C9                <1>     xor cl, cl  ;Clear counter
   537 0000075C 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   537 00000761 [33C00300]          <1>
   538                              <1> .si0:   
   539 00000765 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   540 00000768 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   541 0000076A CD41                <1>     int 41h
   542                              <1> ;Add other data to DPB
   543 0000076C 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   544 0000076F 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   545 00000772 50                  <1>     push rax
   546 00000773 488D87[745B0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   547 0000077A 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   548 0000077E 58                  <1>     pop rax
   549 0000077F FEC1                <1>     inc cl
   550 00000781 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   551 00000783 7416                <1>     je .si1
   552 00000785 50                  <1>     push rax
   553 00000786 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   554 0000078A 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   555 0000078E 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   556 00000791 58                  <1>     pop rax
   557 00000792 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   558 00000799 EBCA                <1>     jmp short .si0
   559                              <1> .si1:
   560                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   561 0000079B 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   562 000007A3 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   563                              <1> ;------------------------------------------------;
   564                              <1> ;          Find largest sector size              ;
   565                              <1> ;------------------------------------------------;
   566                              <1> sectorSizeSearch:
   567                              <1> ;Done by reading BPB's for each drive
   568 000007A6 488D9D[72640000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   569                              <1>     
   570                              <1>     ;Go thru each block individually
   571 000007AD 31C0                <1>     xor eax, eax
   572 000007AF 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   573                              <1> .findLargest:
   574 000007B2 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   575 000007B6 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   576 000007BB 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   577 000007C2 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   578 000007C5 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   579 000007C8 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   580 000007CA 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   580 000007CF [53C00300]          <1>
   581                              <1> ;------------------------------------------------;
   582                              <1> ;                CDS array inits                 ;
   583                              <1> ;------------------------------------------------;
   584 000007D3 B905000000          <1>     mov ecx, 5    ;Use as a counter, build 5 CDS entries
   585 000007D8 488DBD[19010000]    <1>     lea rdi, qword [rbp + cdsArray] ;Setup array
   586 000007DF E802000000          <1>     call makeCDSArray
   587 000007E4 EB50                <1>     jmp short initialCDSWritten ;Go past the function
   588                              <1> makeCDSArray:
   589                              <1> ;Input: ecx = Size of array
   590                              <1> ;       rdi = Pointer to the start of the CDS array
   591                              <1> ;Ouput: rdi = first byte past the end of the table
   592 000007E6 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   592 000007EB [5DC00300]          <1>
   593 000007EF 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   593 000007F4 [33C00300]          <1>
   594 000007F8 B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   595                              <1> .tempCDS:
   596 000007FD 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   597 000007FF 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   598 00000803 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   599 0000080A 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   600 00000810 31D2                <1>     xor edx, edx    ;Use edx for flags
   601 00000812 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   602 00000819 7409                <1>     je .skipValidCDS
   603 0000081B BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   604 00000820 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   605                              <1> .skipValidCDS:
   606 00000824 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   607 00000828 FFC0                <1>     inc eax ;Increment the drive letter
   608 0000082A 4881C75B000000      <1>     add rdi, cds_size   ;Goto next array entry
   609 00000831 FFC9                <1>     dec ecx
   610 00000833 75C8                <1>     jnz .tempCDS
   611 00000835 C3                  <1>     ret
   612                              <1> initialCDSWritten:
   613                              <1> ;------------------------------------------------;
   614                              <1> ;     Set up general PSP areas and DOS vars      ;
   615                              <1> ;------------------------------------------------;
   616                              <1> ;Additional DOS Vars init and fixups
   617 00000836 64C60425[6BC30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   617 0000083E FF                  <1>
   618 0000083F 64C60425[33C30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   618 00000847 2F                  <1>
   619 00000848 488DBD[D0010000]    <1>     lea rdi, qword [rbp + extAsciiTbl]  ;Get the load of dflt extascii tbl
   620 0000084F 6448893C25-         <1>     mov qword fs:[ctryTbl.mapaddr], rdi ;Store in country table
   620 00000854 [2D000000]          <1>
   621                              <1> 
   622                              <1> ;Set network machine name to... nothing!
   623 00000858 488DBD[38C30300]    <1>     lea rdi, qword [rbp + machineName]
   624 0000085F B910000000          <1>     mov ecx, 10h    ;16 chars long
   625 00000864 B020                <1>     mov al, SPC ;Space char
   626 00000866 F3AA                <1>     rep stosb   ;Fill with space chars
   627                              <1> 
   628                              <1> 
   629                              <1> ;Patch Data Table init
   630 00000868 488DBD[48C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   631 0000086F 488D85[40560000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   632 00000876 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   633 00000878 488D85[4A560000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   634 0000087F 48AB                <1>     stosq
   635 00000881 488D85[54560000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   636 00000888 48AB                <1>     stosq
   637 0000088A 488D85[5E560000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   638 00000891 48AB                <1>     stosq
   639                              <1> 
   640                              <1> ;Initial PSP Init
   641 00000893 488D1D66F8FFFF      <1>     lea rbx, qword [tempPSP]
   642 0000089A 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   642 0000089F [81C30300]          <1>
   643 000008A3 53                  <1>     push rbx
   644 000008A4 4881C380000000      <1>     add rbx, psp.dta
   645 000008AB 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   645 000008B0 [79C30300]          <1>
   646 000008B4 5B                  <1>     pop rbx
   647 000008B5 66C703CD40          <1>     mov word [rbx + psp.return], 040CDh ;DOS return function
   648 000008BA 66C74350CD41        <1>     mov word [rbx + psp.unixEntry], 041CDh  ;Int 41h!
   649 000008C0 C64352CB            <1>     mov byte [rbx + psp.unixEntry + 2], 0CBh    ;Return!
   650 000008C4 48C7430200000000    <1>     mov qword [rbx + psp.allocSize], 0    ;Size of allocation (dummy value)
   651 000008CC 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   652 000008D0 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   653 000008D4 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   654 000008D8 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   654 000008E1 FF                  <1>
   655 000008E2 48AB                <1>     stosq   ;8 bytes
   656 000008E4 31C0                <1>     xor eax, eax
   657 000008E6 50                  <1>     push rax    ;Save 0 on the stack
   658 000008E7 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   659 000008EA 48AB                <1>     stosq   ;16 bytes
   660 000008EC AB                  <1>     stosd   ;20 bytes
   661 000008ED 58                  <1>     pop rax ;Get 0 back
   662 000008EE 4889433E            <1>     mov qword [rbx + psp.envPtr], rax    ;No environment
   663 000008F2 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   664 000008F6 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   665 000008FA 4889DA              <1>     mov rdx, rbx
   666 000008FD B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   667 00000902 CD41                <1>     int 41h
   668 00000904 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   669 00000908 B843350000          <1>     mov eax, 3543h
   670 0000090D CD41                <1>     int 41h
   671 0000090F 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   672 00000913 B844350000          <1>     mov eax, 3544h
   673 00000918 CD41                <1>     int 41h
   674 0000091A 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   675                              <1> 
   676 0000091E B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   677 00000923 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   678 00000927 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   679                              <1> ;------------------------------------------------;
   680                              <1> ;          Default File Handle Creation          ;
   681                              <1> ;                                                ;
   682                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   683                              <1> ;------------------------------------------------;
   684                              <1> defaultFileHandles:
   685                              <1> ;Fill in the default file table entries
   686 00000929 488D9D[99C00300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   687 00000930 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   688 00000937 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   689 0000093D 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   689 00000942 [3BC00300]          <1>
   690 00000946 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   690 0000094F 20                  <1>
   691                              <1> ;GOTO FIRST FILE 
   692 00000950 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   693                              <1> ;Write AUX
   694 00000957 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   695 0000095C 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   696 00000962 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   697 00000966 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   698                              <1>     ;No EOF when reading from the device
   699 0000096A 488B85[0E5B0000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   700 00000971 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   701                              <1>     ;Ignore disk related fields and Date/Time of open
   702 00000975 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   703                              <1>     ;11 chars in 8.3 name
   704 00000979 488D357E060000      <1>     lea rsi, auxName
   705 00000980 B903000000          <1>     mov ecx, 3
   706 00000985 F3A4                <1>     rep movsb   ;Move the three bytes
   707 00000987 4889D0              <1>     mov rax, rdx
   708 0000098A 48AB                <1>     stosq   ;Eight spaces left to print
   709 0000098C 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   709 00000991 [81C30300]          <1>
   710 00000995 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   711                              <1> ;GOTO NEXT ENTRY
   712 00000999 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   713                              <1>     ;Write CON
   714 000009A0 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   715 000009A5 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   716 000009AB C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   717 000009AF C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   718                              <1>     ;No EOF when reading from the device
   719 000009B3 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   719 000009B8 [4BC00300]          <1>
   720 000009BC 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   721                              <1>     ;Ignore disk related fields and Date/Time of open
   722 000009C0 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   723                              <1>     ;11 chars in 8.3 name
   724 000009C4 488D352F060000      <1>     lea rsi, conName
   725 000009CB B903000000          <1>     mov ecx, 3
   726 000009D0 F3A4                <1>     rep movsb   ;Move the three bytes
   727 000009D2 4889D0              <1>     mov rax, rdx
   728 000009D5 48AB                <1>     stosq   ;Eight spaces left to print
   729 000009D7 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   729 000009DC [81C30300]          <1>
   730 000009E0 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   731                              <1> ;GOTO NEXT ENTRY
   732 000009E4 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   733                              <1> ;Write PRN
   734 000009EB 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   735 000009F0 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   736 000009F6 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   737 000009FA C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   738                              <1>     ;Want EOF when reading from to the device
   739 000009FE 488B85[305B0000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   740 00000A05 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   741                              <1>     ;Ignore disk related fields and Date/Time of open
   742 00000A09 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   743                              <1>     ;11 chars in 8.3 name
   744 00000A0D 488D35EE050000      <1>     lea rsi, prnName
   745 00000A14 B903000000          <1>     mov ecx, 3
   746 00000A19 F3A4                <1>     rep movsb   ;Move the three bytes
   747 00000A1B 4889D0              <1>     mov rax, rdx
   748 00000A1E 48AB                <1>     stosq   ;Eight spaces left to print
   749 00000A20 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   749 00000A25 [81C30300]          <1>
   750 00000A29 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   751                              <1> ;Zero word 0 of entry 4 and 5
   752 00000A2D 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   753 00000A34 31C0                <1>     xor eax, eax
   754                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   755                              <1>     ; which is ok as these are empty entries, ready to be used)
   756 00000A36 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   757 00000A38 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   758 00000A3F 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   759                              <1> ;------------------------------------------------;
   760                              <1> ;             Print Welcome Message              ;
   761                              <1> ;------------------------------------------------;
   762 00000A41 488D152C050000      <1>     lea rdx, strtmsg
   763 00000A48 B409                <1>     mov ah, 09h
   764 00000A4A CD41                <1>     int 41h    
   765                              <1> ;------------------------------------------------;
   766                              <1> ;               Load CONFIG.SYS                  ;
   767                              <1> ;------------------------------------------------;
   768                              <1> ;Setup stackframe, workout base 
   769 00000A4C 488DBD[45000000]    <1>     lea rdi, qword [rbp + secondDPB]
   770                              <1>     ;Check if this DPB is the last dpb. The first two ALWAYS exist.
   771 00000A53 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   772 00000A57 483DFFFFFFFF        <1>     cmp rax, -1 ;Was second DPB the last one?
   773 00000A5D 7421                <1>     je setupFrame   ;If so, jump
   774 00000A5F 4889C7              <1>     mov rdi, rax    ;Move rdi to thirdDPB
   775 00000A62 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   776 00000A66 483DFFFFFFFF        <1>     cmp rax, -1 ;Was third DPB the last one?
   777 00000A6C 7412                <1>     je setupFrame   ;If so, jump
   778 00000A6E 4889C7              <1>     mov rdi, rax    ;Move rdi to fourthDPB
   779 00000A71 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   780 00000A75 483DFFFFFFFF        <1>     cmp rax, -1 ;Was fourth DPB the last one?
   781 00000A7B 7403                <1>     je setupFrame   ;If so, jump
   782 00000A7D 4889C7              <1>     mov rdi, rax    ;Move rdi to fifthDPB
   783                              <1> setupFrame:
   784 00000A80 4881C735000000      <1>     add rdi, dpb_size   ;Else, goto end of the dpb rdi points to
   785 00000A87 55                  <1>     push rbp
   786 00000A88 4889E5              <1>     mov rbp, rsp
   787 00000A8B 4881EC20000000      <1>     sub rsp, cfgFrame_size
   788 00000A92 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Store the end pointer here
   789 00000A96 C645F81E            <1>     mov byte [rbp - cfgFrame.newBuffers], buffersDefault
   790 00000A9A C645F714            <1>     mov byte [rbp - cfgFrame.newSFTVal], filesDefault
   791 00000A9E C645F604            <1>     mov byte [rbp - cfgFrame.newFCBSVal], fcbsDefault
   792 00000AA2 C645F500            <1>     mov byte [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   793 00000AA6 C645F405            <1>     mov byte [rbp - cfgFrame.newLastdrive], lastDriveDeflt
   794                              <1> 
   795 00000AAA 648A0425[10C00300]  <1>     mov al, byte fs:[bootDrive]
   796 00000AB2 A880                <1>     test al, 80h    ;Was boot drive hard disk?
   797 00000AB4 7406                <1>     jz notHDD
   798                              <1> ;Set Current Drive to C:
   799 00000AB6 B202                <1>     mov dl, 2
   800 00000AB8 B40E                <1>     mov ah, 0Eh ;Select C: Drive
   801 00000ABA CD41                <1>     int 41h
   802                              <1> notHDD:
   803 00000ABC 488D1543050000      <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   804 00000AC3 B43D                <1>     mov ah, 3Dh ;Open file for reading
   805 00000AC5 B000                <1>     mov al, ReadAccess
   806 00000AC7 CD41                <1>     int 41h
   807 00000AC9 7200                <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   808                              <1> 
   809                              <1> ;------------------------------------------------;
   810                              <1> ;              Process CONFIG.SYS                ;
   811                              <1> ;------------------------------------------------;
   812                              <1> ;Create a stack frame with the following order.
   813                              <1> ;Values greater than max are set to max. Values less than min are set to min.
   814                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
   815                              <1> ; New SFT value.            Default = 20, Min = 5, Max = 254
   816                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
   817                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
   818                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
   819                              <1> ;------------------------------------------------;
   820                              <1> ;   Setup Final Data Areas With Overrides from   ;
   821                              <1> ;                  CONFIG.SYS                    ;
   822                              <1> ;------------------------------------------------;
   823                              <1> ;Add additional buffers. Start from tmpBufHdr
   824                              <1> ;Add additional SFT entries. By default, 1 new SFT header, with 15 SFT entries
   825                              <1> ;Add additional FCBS.
   826                              <1> ;Create a larger CDS if needed.
   827                              <1> noCfg:
   828                              <1> ;Start with buffers:
   829 00000ACB 0FB64DF8            <1>     movzx ecx, byte [rbp - cfgFrame.newBuffers]    ;Get new buffers size
   830 00000ACF 64880C25[71C00300]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
   831                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
   832 00000AD7 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer sector size
   832 00000ADC [53C00300]          <1>
   833 00000AE0 81C330000000        <1>     add ebx, bufferHdr_size ;rbx has the size to add
   834                              <1>     ;Each buffer has no flags, drive number must be -1
   835 00000AE6 488B7DE8            <1>     mov rdi, qword [rbp - cfgFrame.endPtr]  ;Get current allocation end pointer
   836 00000AEA 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Reset the var here
   836 00000AEF [55C00300]          <1>
   837 00000AF3 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
   838 00000AF6 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
   839 00000AF8 67E325              <1>     jecxz .lastBuffer
   840                              <1> .bufferLoop:
   841 00000AFB 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
   842 00000AFE 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
   843 00000B01 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   844 00000B07 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
   845 00000B0B 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
   846 00000B0E 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
   847 00000B11 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
   848 00000B15 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
   849 00000B19 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
   850 00000B1C FFC9                <1>     dec ecx
   851 00000B1E 75DB                <1>     jnz .bufferLoop
   852                              <1> .lastBuffer:
   853 00000B20 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
   854 00000B23 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
   855 00000B2A 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   856 00000B30 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
   857 00000B34 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
   858 00000B37 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
   859 00000B3A 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
   860 00000B3E 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
   861 00000B42 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   862                              <1> 
   863                              <1> ;Now build a new SFT header for the number of files specified by user
   864 00000B46 0FB64DF7            <1>     movzx ecx, byte [rbp - cfgFrame.newSFTVal]
   865 00000B4A 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
   866 00000B50 7430                <1>     je .skipSFT
   867 00000B52 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]  ;Get the current only SFT head pointer
   867 00000B57 [3BC00300]          <1>
   868 00000B5B 48893E              <1>     mov qword [rsi + sfth.qNextSFTPtr], rdi ;Move rdi as new SFT pointer
   869 00000B5E 662B4E08            <1>     sub cx, word [rsi + sfth.wNumFiles] ;Remove the number of files we already have
   870 00000B62 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move remaining files here
   871 00000B66 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;Last table in chain
   872 00000B6D 4881C70A000000      <1>     add rdi, sfth_size  ;Goto sft area, now need to compute size
   873 00000B74 B84F000000          <1>     mov eax, sft_size
   874 00000B79 F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
   875 00000B7B 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
   876 00000B7E 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   877                              <1> .skipSFT:
   878                              <1> ;FCBS at rdi
   879 00000B82 6448893C25-         <1>     mov qword fs:[fcbsHeadPtr], rdi ;Setup the fcbs var here
   879 00000B87 [65C00300]          <1>
   880 00000B8B 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;No more FCBS headers for now
   881 00000B92 0FB64DF6            <1>     movzx ecx, byte [rbp - cfgFrame.newFCBSVal]
   882 00000B96 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move this value here
   883 00000B9A B84F000000          <1>     mov eax, sft_size
   884 00000B9F F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
   885 00000BA1 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
   886 00000BA4 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   887 00000BA8 0FB64DF5            <1>     movzx ecx, byte [rbp - cfgFrame.newProtFCBSVal] ;Get number of safe FCBs
   888 00000BAC 6466890C25-         <1>     mov word fs:[numSafeSFCB], cx   ;And save that there
   888 00000BB1 [6DC00300]          <1>
   889                              <1> ;And CDS now
   890 00000BB5 0FB64DF4            <1>     movzx ecx, byte [rbp - cfgFrame.newLastdrive]
   891 00000BB9 64880C25[70C00300]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
   892 00000BC1 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi  ;Point cdsHeadPtr here
   892 00000BC6 [5DC00300]          <1>
   893 00000BCA E817FCFFFF          <1>     call makeCDSArray
   894 00000BCF 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   895                              <1> 
   896                              <1> ;Computation of new space is complete, now work out how many bytes this is
   897 00000BD3 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
   898 00000BD6 5D                  <1>     pop rbp
   899 00000BD7 488D9D[10000000]    <1>     lea rbx, qword [rbp + dosDynamicArea]
   900 00000BDE 4829DF              <1>     sub rdi, rbx    ;Gives difference now
   901 00000BE1 678D5F11            <1>     lea ebx, dword [edi + 11h]  ;Add 11 to round up a paragraph
   902 00000BE5 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   903                              <1> ;Resize DOS allocation before loading COMMAND.COM
   904 00000BE8 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   904 00000BED [2BC00300]          <1>
   905 00000BF1 4981C010000000      <1>     add r8, mcb.program
   906 00000BF8 B44A                <1>     mov ah, 4Ah
   907 00000BFA CD41                <1>     int 41h
   908                              <1>     
   909                              <1>     %if DEBUG && ALLOCTEST
   910                              <1> ;Test Allocation, Growth and Deallocation
   911                              <1>     mov r15, qword fs:[currentPSP]
   912                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   913                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   914                              <1>     mov ah, 48h ;Allocate
   915                              <1>     int 41h
   916                              <1> 
   917                              <1>     mov byte [rax - 10h], 0 ;Trash chain
   918                              <1>     mov r8, rax ;Move the pointer to r8
   919                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   920                              <1>     mov ah, 4Ah
   921                              <1>     int 41h
   922                              <1> 
   923                              <1>     mov ah, 49h ;Free r8
   924                              <1>     int 41h
   925                              <1>     mov qword fs:[currentPSP], r15
   926                              <1>     %endif
   927                              <1> 
   928                              <1>     %if ENDSTATUS
   929                              <1> debugFinal:
   930                              <1>     ;Print system state
   931 00000BFC 55                  <1>     push rbp    ;Only rbp really matters here
   932 00000BFD 4989E8              <1>     mov r8, rbp
   933                              <1> 
   934 00000C00 488D2DD0020000      <1>     lea rbp, .msg2
   935 00000C07 4D8D88[B0040000]    <1>     lea r9, qword [r8 + debPrintNullString]
   936 00000C0E 41FFD1              <1>     call r9
   937                              <1> 
   938 00000C11 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   939 00000C18 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   939 00000C1D [08C00300]          <1>
   940                              <1> 
   941 00000C21 4D8D88[EB070000]    <1>     lea r9, qword [r8 + overlayQword]
   942 00000C28 41FFD1              <1>     call r9
   943                              <1> 
   944 00000C2B 4881C31B000000      <1>     add rbx, 19+8
   945 00000C32 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   945 00000C37 [00C00300]          <1>
   946 00000C3B 41FFD1              <1>     call r9
   947                              <1> 
   948 00000C3E 4881C31B000000      <1>     add rbx, 19+8
   949 00000C45 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   949 00000C4A [2BC00300]          <1>
   950 00000C4E 41FFD1              <1>     call r9
   951                              <1> 
   952 00000C51 4881C31C000000      <1>     add rbx, 20+8
   953 00000C58 4D8D88[A8070000]    <1>     lea r9, qword [r8 + overlayDword]
   954 00000C5F 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   955 00000C67 41FFD1              <1>     call r9
   956                              <1> 
   957 00000C6A 4881C312000000      <1>     add rbx, 10+8
   958 00000C71 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   959 00000C79 41FFD1              <1>     call r9
   960                              <1> 
   961 00000C7C 4881C312000000      <1>     add rbx, 10+8
   962 00000C83 64488B0425-         <1>     mov rax, qword fs:[longMem]
   962 00000C88 [1BC00300]          <1>
   963 00000C8C 4D8D88[EB070000]    <1>     lea r9, qword [r8 + overlayQword]
   964 00000C93 41FFD1              <1>     call r9
   965                              <1> 
   966 00000C96 4881C31B000000      <1>     add rbx, 19+8
   967 00000C9D 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   967 00000CA2 [33C00300]          <1>
   968 00000CA6 41FFD1              <1>     call r9
   969                              <1> 
   970 00000CA9 4881C31B000000      <1>     add rbx, 19+8
   971 00000CB0 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   971 00000CB5 [3BC00300]          <1>
   972 00000CB9 41FFD1              <1>     call r9
   973                              <1> 
   974 00000CBC 4881C31B000000      <1>     add rbx, 19+8
   975 00000CC3 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   975 00000CC8 [55C00300]          <1>
   976 00000CCC 41FFD1              <1>     call r9
   977                              <1> 
   978 00000CCF 4881C31B000000      <1>     add rbx, 19+8
   979 00000CD6 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   979 00000CDB [5DC00300]          <1>
   980 00000CDF 41FFD1              <1>     call r9
   981                              <1> 
   982 00000CE2 4D8D88[36070000]    <1>     lea r9, qword [r8 + overlayByte]
   983                              <1> 
   984 00000CE9 4881C32C000000      <1>     add rbx, 25+19
   985 00000CF0 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
   985 00000CF6 [6FC00300]          <1>
   986 00000CFA 41FFD1              <1>     call r9
   987                              <1> 
   988 00000CFD 4881C31E000000      <1>     add rbx, 30
   989 00000D04 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   989 00000D0A [12C00300]          <1>
   990 00000D0E 41FFD1              <1>     call r9
   991                              <1> 
   992 00000D11 4881C31E000000      <1>     add rbx, 30
   993 00000D18 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   993 00000D1E [11C00300]          <1>
   994 00000D22 41FFD1              <1>     call r9
   995                              <1> 
   996 00000D25 4881C310000000      <1>     add rbx, 16
   997 00000D2C 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   997 00000D32 [10C00300]          <1>
   998 00000D36 0441                <1>     add al, "A"
   999 00000D38 8803                <1>     mov byte [rbx], al
  1000                              <1> 
  1001 00000D3A 488D2D10000000      <1>     lea rbp, .msg
  1002 00000D41 4D8D88[B0040000]    <1>     lea r9, qword [r8 + debPrintNullString]
  1003 00000D48 41FFD1              <1>     call r9
  1004 00000D4B 5D                  <1>     pop rbp
  1005 00000D4C E99E010000          <1>     jmp l1
  1006 00000D51 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
  1006 00000D5A 206261736520464646- <1>
  1006 00000D63 464646464646464646- <1>
  1006 00000D6C 46464646680A0D      <1>
  1007 00000D73 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1007 00000D7C 464646464646464646- <1>
  1007 00000D85 464646464646680A0D  <1>
  1008 00000D8E 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
  1008 00000D97 464646464646464646- <1>
  1008 00000DA0 46464646464668200A- <1>
  1008 00000DA9 0D                  <1>
  1009 00000DAA 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
  1009 00000DB3 464646464646466820  <1>
  1010 00000DBC 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
  1010 00000DC5 464646464646466820  <1>
  1011 00000DCE 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1011 00000DD7 464646464646464646- <1>
  1011 00000DE0 464646464646680A0D  <1>
  1012 00000DE9 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1012 00000DF2 464646464646464646- <1>
  1012 00000DFB 464646464646680A0D  <1>
  1013 00000E04 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1013 00000E0D 464646464646464646- <1>
  1013 00000E16 464646464646680A0D  <1>
  1014 00000E1F 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1014 00000E28 464646464646464646- <1>
  1014 00000E31 464646464646680A0D  <1>
  1015 00000E3A 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1015 00000E43 464646464646464646- <1>
  1015 00000E4C 464646464646680A0D  <1>
  1016 00000E55 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
  1016 00000E5E 204C6F676963616C20- <1>
  1016 00000E67 447269766573204646- <1>
  1016 00000E70 680A0D              <1>
  1017 00000E73 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
  1017 00000E7C 204669786564204472- <1>
  1017 00000E85 697665732020204646- <1>
  1017 00000E8E 680A0D              <1>
  1018 00000E91 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
  1018 00000E9A 2052656D6F7661626C- <1>
  1018 00000EA3 652044727673204646- <1>
  1018 00000EAC 680A0D              <1>
  1019 00000EAF 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
  1019 00000EB8 65205A3A0A0D        <1>
  1020 00000EBE 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
  1020 00000EC7 4F4D4D414E442E434F- <1>
  1020 00000ED0 4D2E2E2E0A0D00      <1>
  1021 00000ED7 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
  1021 00000EE0 626F6F742073756D6D- <1>
  1021 00000EE9 6172790A0D00        <1>
  1022                              <1>     %endif
  1023                              <1> l1:
  1024                              <1>     ;Load COMMAND.COM
  1025                              <1>     ;Get currentPSP ptr
  1026 00000EEF B462                <1>     mov ah, 62h ;Get current PSP ptr in rdx
  1027 00000EF1 CD41                <1>     int 41h
  1028 00000EF3 B419                <1>     mov ah, 19h ;Get current Drive letter in al
  1029 00000EF5 CD41                <1>     int 41h
  1030 00000EF7 0441                <1>     add al, "A"
  1031 00000EF9 880512010000        <1>     mov byte [cmdLine], al  ;Store drive letter at start of command line
  1032 00000EFF 488D1D1A010000      <1>     lea rbx, cmdBlock
  1033 00000F06 488D425C            <1>     lea rax, qword [rdx + psp.fcb1]
  1034 00000F0A 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1035 00000F0E 488D426C            <1>     lea rax, qword [rdx + psp.fcb2]
  1036 00000F12 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1037 00000F16 488D15F4000000      <1>     lea rdx, cmdLine
  1038 00000F1D 48895308            <1>     mov qword [rbx + execProg.pCmdLine], rdx    ;Store command line here
  1039 00000F21 B8004B0000          <1>     mov eax, 4B00h  ;Exec Prog
  1040 00000F26 CD41                <1>     int 41h
  1041 00000F28 488D15A6000000      <1>     lea rdx, badCom
  1042 00000F2F B409                <1>     mov ah, 09h ;Print message
  1043 00000F31 CD41                <1>     int 41h
  1044 00000F33 E92A000000          <1>     jmp errorInit.ei0
  1045                              <1>     
  1046                              <1> ;--------------------------------
  1047                              <1> ;       PROCS FOR SYSINIT       :
  1048                              <1> ;--------------------------------
  1049                              <1> adjustDrvHdr:
  1050                              <1> ;Input: rsi = Effective address of driver in DOS segment
  1051                              <1> ;       rbp = Ptr to the start of the DOS segment
  1052                              <1> ;Output: rsi = EA of next header in DOS segment
  1053 00000F38 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
  1054 00000F3C 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
  1055 00000F40 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
  1056 00000F47 740A                <1>     je .exit
  1057 00000F49 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
  1058 00000F4C 4881C622000000      <1>     add rsi, drvHdr_size
  1059                              <1> .exit:
  1060 00000F53 C3                  <1>     ret
  1061                              <1> errorInit:
  1062                              <1> ;If a critical error occurs during sysinit, fail through here
  1063                              <1> ;Int 42h, 43h and 44h point here during sysinit
  1064 00000F54 488D2D49000000      <1>     lea rbp, hltmsg
  1065 00000F5B B804130000          <1>     mov eax, 1304h
  1066 00000F60 CD30                <1>     int 30h
  1067                              <1>     ;cli ;Clear interrupts
  1068                              <1>     ;mov al, -1
  1069                              <1>     ;mov dx, 0A1h    ;PIC2 data
  1070                              <1>     ;out dx, al      ;Mask all lines
  1071                              <1>     ;mov dx, 21h     ;PIC1 data
  1072                              <1>     ;out dx, al      ;Mask all lines
  1073                              <1> .ei0:
  1074 00000F62 F4                  <1>     hlt
  1075 00000F63 F390                <1>     pause
  1076 00000F65 EBFB                <1>     jmp short .ei0
  1077                              <1> noCmdCom:
  1078 00000F67 488D1567000000      <1>     lea rdx, badCom
  1079 00000F6E B409                <1>     mov ah, 09h
  1080 00000F70 CD41                <1>     int 41h
  1081 00000F72 EBEE                <1>     jmp short errorInit.ei0
  1082                              <1> ;--------------------------------
  1083                              <1> ;       DATA FOR SYSINIT        :
  1084                              <1> ;--------------------------------
  1085 00000F74 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
  1085 00000F7D 5343502F444F532E2E- <1>
  1085 00000F86 2E0A0D24            <1>
  1086 00000F8A 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
  1086 00000F93 6C6F636174696F6E20- <1>
  1086 00000F9C 4572726F720A0D00    <1>
  1087 00000FA4 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
  1087 00000FAD 7469616C6973696E67- <1>
  1087 00000FB6 20534350444F532E53- <1>
  1087 00000FBF 59532E205379737465- <1>
  1087 00000FC8 6D2068616C74696E67- <1>
  1087 00000FD1 2E2E2E00            <1>
  1088 00000FD5 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
  1088 00000FDE 7373696E6720436F6D- <1>
  1088 00000FE7 6D616E6420696E7465- <1>
  1088 00000FF0 727072657465720A0D- <1>
  1088 00000FF9 24                  <1>
  1089 00000FFA 434F4E00            <1> conName db "CON",0
  1090 00000FFE 41555800            <1> auxName db "AUX",0
  1091 00001002 50524E00            <1> prnName db "PRN",0
  1092                              <1> 
  1093 00001006 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
  1093 0000100F 5300                <1>
  1094 00001011 5F3A5C434F4D4D414E- <1> cmdLine db "_:\COMMAND.COM",0
  1094 0000101A 442E434F4D00        <1>
  1095                              <1> cmdBlock:
  1096                              <1>     istruc execProg
  1097 00001020 0000000000000000    <1>     at execProg.pEnv,       dq 0    ;Keep at 0 to "copy" DOS's environment ptr
  1098 00001028 0000000000000000    <1>     at execProg.pCmdLine,   dq 0
  1099 00001030 0000000000000000    <1>     at execProg.pfcb1,      dq 0    ;Set to DOS's fcb 1 and 2
  1100 00001038 0000000000000000    <1>     at execProg.pfcb2,      dq 0
  1101                              <1>     iend
  1102                              <1> 
  1103                              <1> intData:
  1104 00001040 [E943000000000000]  <1>     dq terminateProcess ;Int 40h
  1105 00001048 [B854000000000000]  <1>     dq functionDispatch ;Int 41h
  1106 00001050 [540F000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
  1107 00001058 [1056000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
  1108 00001060 [C84D000000000000]  <1>     dq dosDefCritErrHdlr 
  1109 00001068 [984E000000000000]  <1>     dq absDiskRead      ;Int 45h
  1110 00001070 [794E000000000000]  <1>     dq absDiskWrite     ;Int 46h
  1111 00001078 [F043000000000000]  <1>     dq terminateRes     ;Int 47h
  1112 00001080 [1056000000000000]  <1>     dq defaultIretq     ;Int 48h
  1113 00001088 [1056000000000000]  <1>     dq defaultIretq     ;Int 49h
  1114 00001090 [1056000000000000]  <1>     dq defaultIretq     ;Int 4Ah
  1115 00001098 [1056000000000000]  <1>     dq defaultIretq     ;Int 4Bh
  1116 000010A0 [1056000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1117 000010A8 [1056000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1118 000010B0 [1056000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1119 000010B8 [B95A000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1120                              <1> nData:
  1121 000010C0 [EC5A000000000000]  <1>     dq conHdr
  1122 000010C8 0480                <1>     dw 08004h
  1123 000010CA [945C000000000000]  <1>     dq nulStrat
  1124 000010D2 [9A5C000000000000]  <1>     dq nulIntr
  1125 000010DA 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1126                              <1> 
  1127                              <1> diskInit:
  1128                              <1>     ;We create a function to deal with BPB parsing etc
  1129                              <1>     ;Start with the first primary partition on each hard disk (until max)
  1130                              <1>     ;   They dont have to be bootable
  1131                              <1>     ;Then go back and look for other partitions partitions. 
  1132                              <1>     ;   Add each other primary or logical ptn (until max)
  1133                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
  1134                              <1>     ;Use r8 as device counter
  1135 000010E2 488DBD[9A640000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
  1136 000010E9 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
  1136 000010F1 00                  <1>
  1137 000010F2 0F84C6000000        <1>     jz .remInit ;No? Go to removables
  1138 000010F8 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
  1138 00001101 00                  <1>
  1139 00001102 B280                <1>     mov dl, 80h ;Start with HDD 0
  1140                              <1> .primary:
  1141 00001104 64803C25[6FC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1141 0000110C 03                  <1>
  1142 0000110D 0F84AB000000        <1>     je .remInit
  1143 00001113 31C9                <1>     xor ecx, ecx    ;Sector 0
  1144 00001115 E871010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
  1145 0000111A 0F8289000000        <1>     jc .primaryEpilog
  1146                              <1>     ;Here, check MBR or BPB
  1147 00001120 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
  1148 00001129 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
  1149                              <1>     ;Now check if BPB or MBR
  1150 0000112B 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1151 0000112D 8A6302              <1>     mov ah, byte [rbx + 2]
  1152 00001130 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1153 00001134 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
  1154                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
  1155                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
  1156 00001136 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
  1157 0000113D B104                <1>     mov cl, 4
  1158                              <1> .checkPrimary:
  1159 0000113F 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
  1160 00001142 3C01                <1>     cmp al, 01
  1161 00001144 7421                <1>     je .primaryFound
  1162 00001146 3C04                <1>     cmp al, 04
  1163 00001148 741D                <1>     je .primaryFound
  1164 0000114A 3C06                <1>     cmp al, 06
  1165 0000114C 7419                <1>     je .primaryFound
  1166 0000114E 3C0B                <1>     cmp al, 0Bh
  1167 00001150 7415                <1>     je .primaryFound
  1168 00001152 3C0C                <1>     cmp al, 0Ch
  1169 00001154 7411                <1>     je .primaryFound
  1170 00001156 3C0E                <1>     cmp al, 0Eh
  1171 00001158 740D                <1>     je .primaryFound
  1172 0000115A 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1173 00001161 FEC9                <1>     dec cl
  1174 00001163 7444                <1>     jz .primaryEpilog
  1175 00001165 EBD8                <1>     jmp short .checkPrimary
  1176                              <1> .primaryFound:
  1177                              <1>     ;Copy the first sector of this partition into memory
  1178 00001167 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1179 0000116A E81C010000          <1>     call .initReadSector
  1180 0000116F 7238                <1>     jc .primaryEpilog
  1181                              <1>     ;Now verify this is a BPB
  1182 00001171 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1183 00001173 8A6302              <1>     mov ah, byte [rbx + 2]
  1184 00001176 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1185 0000117A 752D                <1>     jne .primaryEpilog   ;If not, skip
  1186                              <1>     ;Now copy data to internal tables
  1187 0000117C 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1188 0000117F B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1189 00001184 57                  <1>     push rdi
  1190 00001185 F348A5              <1>     rep movsq   ;Copy the BPB
  1191 00001188 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1192                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1193 00001189 4A8D9C05[68640000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1194                              <1>     ;Add device count to rbx to point to correct entry
  1195 00001191 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1196 00001193 4A8D9CC5[72640000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1197 0000119B 488933              <1>     mov qword [rbx], rsi
  1198 0000119E 49FFC0              <1>     inc r8  ;Goto next logical drive
  1199 000011A1 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1200                              <1> .primaryEpilog:
  1201 000011A9 FEC2                <1>     inc dl  ;Goto next BIOS drive
  1202 000011AB 88D6                <1>     mov dh, dl
  1203 000011AD 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1204 000011B0 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1205 000011B8 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1206                              <1> .extended:
  1207                              <1> ;We have gone through all the devices once
  1208                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1209                              <1>     ;je .remInit ;If yes, get removable devices
  1210                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1211                              <1>     ;xor ecx, ecx    ;Get MBR back
  1212                              <1>     ;call .initReadSector
  1213                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1214                              <1> .remInit:
  1215                              <1> ;Start by linking the default BPB's in the pointers table in the event that
  1216                              <1> ; for some reason the removable drives stop working or dont exist.
  1217                              <1> ;This forces the hard drives to start at C:
  1218 000011BE 53                  <1>     push rbx
  1219 000011BF 488D9D[9A640000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBblks] ;Get default drive A block ptr
  1220 000011C6 48899D[72640000]    <1>     mov qword [rbp + msdDriver.msdBPBTbl], rbx  ;Store in ptrs table
  1221 000011CD 4881C378000000      <1>     add rbx, bpbEx_size ;Goto next ptr
  1222 000011D4 48899D[7A640000]    <1>     mov qword [rbp + msdDriver.msdBPBTbl + 8], rbx  ;Store next pointer
  1223 000011DB 5B                  <1>     pop rbx
  1224                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1225 000011DC 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1226 000011DF 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1227 000011E1 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1228                              <1>     ;rdi points to the space for the subsequent bpb's
  1229 000011E4 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 0  ;Just skip removable init if no rem drives
  1229 000011EC 00                  <1>
  1230 000011ED 750A                <1>     jnz .removables
  1231 000011EF 64800425[6FC00300]- <1>     add byte fs:[numPhysVol], 2 ;Pretend we have two more drives (A: and B:)
  1231 000011F7 02                  <1>
  1232 000011F8 C3                  <1>     ret ;and return!
  1233                              <1> .removables:
  1234 000011F9 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1235 000011FB E88B000000          <1>     call .initReadSector
  1236 00001200 7238                <1>     jc .removableEpilogue   ;Goto next device
  1237                              <1>     ;Now verify this is a BPB
  1238 00001202 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1239 00001204 8A6302              <1>     mov ah, byte [rbx + 2]
  1240 00001207 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1241 0000120B 752D                <1>     jne .removableEpilogue   ;If not, skip
  1242                              <1>     ;Now copy data to internal tables
  1243 0000120D 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1244 00001210 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1245 00001215 57                  <1>     push rdi
  1246 00001216 F348A5              <1>     rep movsq   ;Copy the BPB
  1247 00001219 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1248                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1249 0000121A 4A8D9C05[68640000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1250                              <1>     ;Add device count to rbx to point to correct entry
  1251 00001222 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1252 00001224 4A8D9CC5[72640000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1253 0000122C 488933              <1>     mov qword [rbx], rsi
  1254 0000122F 49FFC0              <1>     inc r8  ;Goto next logical drive
  1255 00001232 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1256                              <1> .removableEpilogue:
  1257 0000123A FEC2                <1>     inc dl  ;Goto next BIOS device now
  1258 0000123C 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1259 00001244 7412                <1>     je .end
  1260 00001246 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1261 0000124D 7403                <1>     je .re0
  1262 0000124F 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1263                              <1> .re0:
  1264 00001252 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1265 00001256 72A1                <1>     jb .removables
  1266                              <1> .end:
  1267 00001258 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1267 00001260 01                  <1>
  1268 00001261 7401                <1>     je .singleRemDev
  1269 00001263 C3                  <1>     ret
  1270                              <1> .singleRemDev:
  1271                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1272 00001264 488D9D[68640000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1273 0000126B 8A95[68640000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1274 00001271 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1275 00001274 488D9D[72640000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1276 0000127B 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1277 0000127E 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1278 00001282 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1279 0000128A C3                  <1>     ret
  1280                              <1> .initReadSector:
  1281                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1282 0000128B B482                <1>     mov ah, 82h ;Read
  1283 0000128D B001                <1>     mov al, 1   ;One sector
  1284 0000128F 488D9D[10030000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1285 00001296 CD33                <1>     int 33h
  1286 00001298 C3                  <1>     ret
  1287 00001299 16                  <1> tmpAttr     db dirInclusive ;Search for all files
  1288 0000129A 7363702A2E2A00      <1> tmpName     db "scp*.*",0
  1289 000012A1 2F746573742F746573- <1> tmpName2    db "/test/test2/../another",0
  1289 000012AA 74322F2E2E2F616E6F- <1>
  1289 000012B3 7468657200          <1>
  1290 000012B8 000000000000000000- <1> tmpDTA      db 80h dup 00h
  1290 000012C1 000000000000000000- <1>
  1290 000012CA 000000000000000000- <1>
  1290 000012D3 000000000000000000- <1>
  1290 000012DC 000000000000000000- <1>
  1290 000012E5 000000000000000000- <1>
  1290 000012EE 000000000000000000- <1>
  1290 000012F7 000000000000000000- <1>
  1290 00001300 000000000000000000- <1>
  1290 00001309 000000000000000000- <1>
  1290 00001312 000000000000000000- <1>
  1290 0000131B 000000000000000000- <1>
  1290 00001324 000000000000000000- <1>
  1290 0000132D 000000000000000000- <1>
  1290 00001336 0000                <1>
  1291 00001338 500000000000000000- <1> tmpBuffer   db 80, 0, 126 dup 00h 
  1291 00001341 000000000000000000- <1>
  1291 0000134A 000000000000000000- <1>
  1291 00001353 000000000000000000- <1>
  1291 0000135C 000000000000000000- <1>
  1291 00001365 000000000000000000- <1>
  1291 0000136E 000000000000000000- <1>
  1291 00001377 000000000000000000- <1>
  1291 00001380 000000000000000000- <1>
  1291 00001389 000000000000000000- <1>
  1291 00001392 000000000000000000- <1>
  1291 0000139B 000000000000000000- <1>
  1291 000013A4 000000000000000000- <1>
  1291 000013AD 000000000000000000- <1>
  1291 000013B6 0000                <1>
  1292 000013B8 000000000000000000- <1> tmpBuf2     db 80h dup 00h
  1292 000013C1 000000000000000000- <1>
  1292 000013CA 000000000000000000- <1>
  1292 000013D3 000000000000000000- <1>
  1292 000013DC 000000000000000000- <1>
  1292 000013E5 000000000000000000- <1>
  1292 000013EE 000000000000000000- <1>
  1292 000013F7 000000000000000000- <1>
  1292 00001400 000000000000000000- <1>
  1292 00001409 000000000000000000- <1>
  1292 00001412 000000000000000000- <1>
  1292 0000141B 000000000000000000- <1>
  1292 00001424 000000000000000000- <1>
  1292 0000142D 000000000000000000- <1>
  1292 00001436 0000                <1>
  1293                              <1> 
  1294                              <1> 
  1295 00001438 6D7966696C652E7473- <1> tmpName3    db "myfile.tst",0
  1295 00001441 7400                <1>
  1296 00001443 0000                <1> hdl dw 0
  1297 00001445 546573742053747269- <1> testString1  db "Test String"
  1297 0000144E 6E67                <1>
  1298                              <1> testString1L equ $ - testString1
  1299 00001450 204D6F726520537472- <1> testString2  db " More String, Less Space"
  1299 00001459 696E672C204C657373- <1>
  1299 00001462 205370616365        <1>
  1300                              <1> testString2L equ $ - testString2
  1301 00001468 7465737464697200    <1> testDir db "testdir",0
    15                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    16                                  %include "./Source/BSS/dosSeg.asm"
    17                              <1> ;This file contains the main DOS data segment
    18                              <1> dosAPT: ;Additional Page tables
    19 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    20                              <1> dosDataArea:
    21 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    22 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    23 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    24 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    25 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    26 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    27 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    28 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    29                              <1> ;Above is the system stats
    30                              <1> ;Below is the DOS vars
    31 0003C023 ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    32                              <1>     ;   A value of 0 means no chars buffered.
    33 0003C02B ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    34                              <1> sysVarsPtr:
    35 0003C033 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    36 0003C03B ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    37 0003C043 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    38                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    39 0003C04B ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    40                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    41 0003C053 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    42 0003C055 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    43 0003C05D ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    44 0003C065 ????????????????    <1>     fcbsHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    45 0003C06D ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    46                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    47 0003C06F ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    48 0003C070 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    49 0003C071 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    50 0003C072 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    51 0003C073 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    52                              <1> ;Additional internal variables
    53                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    54 0003C095 ??                  <1>     singleDrv   resb 1    ;Set if last drive accessed was drive B x
    55 0003C096 ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    56 0003C097 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    57                              <1>     ;PLEASE DO NOT TOUCH MAXHNDLS!!!
    58                              <1>     ;Share hook functions here
    59                              <1> ;Create SFT header and corresponding array of five default sft entries
    60 0003C099 <res Ah>            <1>     firstSftHeader  resb sfth_size
    61 0003C0A3 <res 4Fh>           <1>     firstSft    resb sft_size
    62 0003C0F2 <res 4Fh>           <1>     secondSft   resb sft_size
    63 0003C141 <res 4Fh>           <1>     thirdSft    resb sft_size
    64 0003C190 <res 4Fh>           <1>     fourthSft   resb sft_size
    65 0003C1DF <res 4Fh>           <1>     fifthSft    resb sft_size
    66                              <1> 
    67                              <1> ;Virtual CONsole Buffers
    68 0003C22E ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
    69                              <1>     ;Only incremented when CON device runs vCon
    70                              <1> vConBuf:    ;Proper buffer symbol
    71 0003C22F ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
    72 0003C230 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
    73                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
    74 0003C2B0 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
    75 0003C330 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
    76                              <1> 
    77 0003C331 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
    78 0003C332 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    79 0003C333 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
    80 0003C334 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
    81                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
    82                              <1> 
    83 0003C335 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    84                              <1> ;Server stuff. Default to all zeros (blank)
    85 0003C336 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
    86                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
    87 0003C337 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
    88 0003C338 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
    89                              <1> ;Swappable Data Area
    90 0003C348 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    91 0003C368 ??                  <1>                 resb 1  ;Alignment byte
    92                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    93 0003C369 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    94 0003C36A ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    95 0003C36B ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    96 0003C36C ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    97 0003C36D ????                <1>     errorExCde  resw 1  ;Extended Error Code
    98 0003C36F ??                  <1>     errorAction resb 1  ;Suggested action for error  
    99 0003C370 ??                  <1>     errorClass  resb 1  ;Error Class
   100 0003C371 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
   101 0003C379 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   102 0003C381 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   103                              <1> 
   104 0003C389 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   105 0003C391 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   106                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   107                              <1>     ;Lower byte: User Specified
   108 0003C393 ??                  <1>     currentDrv  resb 1  ;Default drive x
   109 0003C394 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   110                              <1> ;SDA, needs to be replaced between processes
   111                              <1> sdaMainSwap:
   112 0003C395 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   113 0003C39D ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   114 0003C3A5 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   115 0003C3A7 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   116 0003C3AF ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   117 0003C3B7 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   118 0003C3BF ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   119 0003C3C1 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   120 0003C3C9 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   121 0003C3CA ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   122 0003C3CB ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   123                              <1> 
   124 0003C3CC ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   125 0003C3D4 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   126 0003C3DC ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   127 0003C3E4 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   128 0003C3EC ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   129                              <1> ;The below flag tells DOS to print ^C in the termination function
   130 0003C3ED ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   131 0003C3EE ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   132                              <1> ;Time stuff
   133                              <1> ;Read the below two as a word
   134 0003C3EF ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   135 0003C3F0 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   136 0003C3F1 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   137 0003C3F2 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   138 0003C3F4 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   139                              <1> 
   140 0003C3F5 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   141 0003C3F6 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   142 0003C3F7 ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   143                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   144                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   145                              <1> ; without forcing to re-build the whole primary request block.
   146                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   147                              <1> ; with secondary char output going through the secondary header
   148                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   149                              <1> ; for output)
   150                              <1> ;ioReqPkt is the largest possible packet
   151 0003C3F8 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   152 0003C422 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   153 0003C44C <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   154 0003C476 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   155                              <1> ;Swappable Buffers
   156 0003C477 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   157                              <1>     ;We add an additional byte to save ah too
   158 0003C47D ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   159 0003C47F <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   160 0003C4FF <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   161 0003C57F ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   162 0003C587 ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   163 0003C58F ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   164                              <1> ;Misc bookkeeping flags and vars
   165 0003C590 <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal searching block
   166 0003C5BB <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   167 0003C5DB <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   168 0003C5E7 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards for rename
   169 0003C5F3 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   170 0003C5FB <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need tmp CDS
   171 0003C656 ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   172 0003C657 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   173 0003C658 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   174 0003C659 ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   175 0003C65A ??                  <1>     rwFlag      resb 1  ;00h=Read, -1=Write
   176 0003C65B ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   177 0003C65C ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   178                              <1> 
   179 0003C65D ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   180 0003C65E ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   181 0003C65F ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   182 0003C660 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   183 0003C661 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   184 0003C662 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   185 0003C663 ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   186                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   187                              <1> workingDD:  ;Create a symbol for the working device driver too
   188 0003C664 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   189 0003C66C ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   190                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   191                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   192 0003C674 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   193 0003C67C ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   194 0003C684 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   195 0003C68C ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   196 0003C68E ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   197 0003C690 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   198                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   199                              <1> ; and 32 byte offset into the sector for directory
   200 0003C698 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   201                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   202                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   203 0003C6A0 ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   204                              <1> ;***************************************************|
   205                              <1> ; Needs to be set up before any file access         |
   206                              <1> ; These vars keep track of file access properties   |
   207                              <1> ;   and must be used only for such purposes.        |
   208                              <1> ;***************************************************|
   209 0003C6A2 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   210 0003C6A6 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   211                              <1> 
   212 0003C6AA ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   213 0003C6AE ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   214 0003C6AF ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   215                              <1> 
   216 0003C6B7 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   217 0003C6B9 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   218                              <1> ;***************************************************|
   219 0003C6BD ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   220 0003C6C1 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   221 0003C6C5 ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   222 0003C6C6 ????????            <1>     bytesAppend resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   223 0003C6CA ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   224 0003C6CE ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   225                              <1> ;Directory stuff
   226 0003C6D2 ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   227 0003C6D6 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   228 0003C6DA ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   229 0003C6DC ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   230                              <1> ;Error DPB 
   231 0003C6E0 ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   232 0003C6E8 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   233                              <1> ;Stacks and scratch SFT
   234 0003C6E9 <res 528h>          <1>     critStack   resq 165
   235 0003CC11 ????????????????    <1>     critStakTop resq 1
   236                              <1> 
   237 0003CC19 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   238                              <1> 
   239 0003CC68 <res 638h>          <1>     AuxStack    resq 199
   240 0003D2A0 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   241 0003D2A8 <res 638h>          <1>     DiskStack   resq 199
   242 0003D8E0 ????????????????    <1>     DiskStakTop resq 1
   243                              <1> 
   244 0003D8E8 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   245 0003D8E9 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls! 
   246                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   247 0003D8EA <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   248 0003D95A <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   249                              <1>     sdaLen      equ     $ - sda 
   250                              <1>     sdaMSLen    equ     $ - sda
   251                              <1> 
   252                              <1> ;Additional variables NOT in the SDA
   253 0003D982 <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   254                              <1>     ;for saving the current header when quickly doing a second request
   255                              <1> 
   256 0003D9AC ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   257 0003D9AD ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   258                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   259                              <1> inExtASCII:
   260 0003D9AF ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   261 0003D9B0 ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   262                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   263                              <1>     ; copy of the date/time record
   264                              <1> 
   265                              <1>     dSegLen     equ     $
    17                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    18                                  %define currSegVBase section.resSeg.vstart
    19                                  %include "./Source/Data/staticData.asm"
    20                              <1> 
    21                              <1> ;-----------------------------------:
    22                              <1> ;       Static Data Variables       :
    23                              <1> ;-----------------------------------:
    24 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    25 00000001 01                  <1> dosMinor    db 01h      ;.01
    26 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    26 0000000B 535953              <1>
    27 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    27 00000017 535953              <1>
    28                              <1> 
    29                              <1> ;-----------------------------------:
    30                              <1> ;        Static Data Tables         :
    31                              <1> ;-----------------------------------:
    32                              <1> ctryTbl:
    33                              <1> ;Country Table (defaulting to UK)
    34 0000001A 0100                <1> .dtfmt:     dw 1            ;Date time format (2 bytes)
    35                              <1>                             ;0 = month day year hh:mm:ss
    36                              <1>                             ;1 = day month year hh:mm:ss
    37                              <1>                             ;2 = year month day hh:mm:ss
    38 0000001C C2A300000000        <1> .curr:      db "£",0,0,0,0  ;ASCIIZ Currency symbol (5 chars)
    39 00000022 2C00                <1> .thouSep:   db ",",0        ;ASCIIZ Thousands separator
    40 00000024 2E00                <1> .dcmlSep:   db ".",0        ;ASCIIZ Decimal separator
    41 00000026 2D00                <1> .dateSep:   db "-",0        ;ASCIIZ Date separator
    42 00000028 3A00                <1> .timeSep:   db ":",0        ;ASCIIZ Time separator
    43 0000002A 00                  <1> .currFmt:   db 0            ;Currency Format
    44                              <1>                 ;0 = Symbol leads, without space
    45                              <1>                 ;1 = Symbol follows, without space
    46                              <1>                 ;2 = Symbol leads, one space
    47                              <1>                 ;3 = Symbol follows, one space
    48                              <1>                 ;4 = Symbol replace decimal separator
    49 0000002B 02                  <1> .digtdpt:   db 2 ;Number of digits after the decimal point
    50 0000002C 00                  <1> .timefmt:   db 0 ;Time format, Bit 0 = 0 => 12 hour clock, = 1 => 24 hour clock
    51 0000002D 0000000000000000    <1> .mapaddr:   dq 0 ;Case map address (0 is nulptr), needs fixing up
    52 00000035 2C00                <1> .dataSep:   db ",",0    ;Data list separator
    53 00000037 000000000000000000- <1> .resv:      db 0,0,0,0,0,0,0,0,0,0  ;Reserve 10 bytes
    53 00000040 00                  <1>
    54                              <1> 
    55                              <1> ;IO Char table
    56                              <1> ;This table has Request header length, command code and error flags
    57                              <1> ; as a packed DWORD entry
    58                              <1> ioRqCmdErrTbl:
    59                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    60                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    61 00000041 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    62 00000045 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    63 00000049 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    64 0000004D 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    65 00000051 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    66 00000055 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    67                              <1> 
    68                              <1> 
    69                              <1> 
    70                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    71                              <1> ; wish to install their own custom logic.
    72 00000059 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    73 00000061 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    74 00000062 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    75                              <1> ;Extended ASCII keys with special meanings
    76 00000063 3B                  <1> extKeyTbl   db eF1
    77 00000064 B626                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    78 00000066 3C                  <1>             db eF2
    79 00000067 A826                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    80 00000069 3D                  <1>             db eF3
    81 0000006A AF26                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    82 0000006C 3E                  <1>             db eF4
    83 0000006D E426                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    84 0000006F 3F                  <1>             db eF5
    85 00000070 2927                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    86 00000072 40                  <1>             db eF6
    87 00000073 3F27                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    88 00000075 41                  <1>             db eF7
    89 00000076 4627                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    90 00000078 4B                  <1>             db eCursL
    91 00000079 0D26                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    92 0000007B 4D                  <1>             db eCursR
    93 0000007C B626                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    94 0000007E 52                  <1>             db eIns
    95 0000007F 5127                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    96 00000081 53                  <1>             db eDel
    97 00000082 5827                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    98                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    99                              <1> 
   100                              <1> ;When counting the number of days, first compute the number of years since
   101                              <1> ; 1980 and your year. 
   102                              <1> ;Then, using the table below, find the number of leap years between 1980
   103                              <1> ; and (YourYear - 1). 
   104                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   105                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   106                              <1> ;
   107                              <1> ;Use the months table to get the number of days in a normal month as leap 
   108                              <1> ; years are added using the previous comment.
   109                              <1> 
   110                              <1> ;This table is the number of days in the month
   111                              <1> ;The function which updates the days in Feb writes the number to this table
   112                              <1> monthsTbl:  
   113 00000084 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   113 0000008D 1F1E1F              <1>
   114                              <1> 
   115                              <1> ;Error tables
   116                              <1> errXlatTbl:
   117                              <1> ;Each entry is n bytes long, defined as
   118                              <1> ; Byte 0      : DOS function number for which translation will occur
   119                              <1> ; Byte 1      : Length of the table entry - 2
   120                              <1> ; Bytes n - 3 : Acceptable Error codes
   121                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   122                              <1> ;The table is terminated with a single -1 byte
   123                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   124                              <1> ; only on entry to a disk function
   125 00000090 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   126 00000094 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   127 00000099 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   128 0000009F 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   129 000000A3 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   130 000000A9 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   131 000000B0 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   132 000000B3 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   133 000000B7 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   134 000000BB 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   135 000000C0 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   136 000000C4 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   137 000000CA 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   138 000000D1 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   139 000000D5 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   140 000000D9 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   141 000000DC 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   142 000000E0 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   143 000000E4 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   144 000000E9 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   145 000000F1 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   146 000000F3 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   147 000000F8 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   148 000000FB 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   149 00000101 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   150 00000105 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   151 00000108 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   152 0000010E 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   153 00000115 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   154 0000011B 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   155 0000011F 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   156 00000123 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   157 00000126 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   158 0000012B FF                  <1>     db -1   ;End Of Table marker
   159                              <1> 
   160                              <1> 
   161                              <1> extErrTbl:
   162                              <1> ;This table contains the default values for how to respond
   163                              <1> ; to particular errors. Fields with -1 need to be filled in before
   164                              <1> ; setting variables using this table.
   165                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   166                              <1> ; Byte 0: Extended Error Code as a byte
   167                              <1> ; Byte 1: Error Class
   168                              <1> ; Byte 2: Error Suggested Action
   169                              <1> ; Byte 3: Error Locus
   170                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   171                              <1> ;
   172                              <1> ;Error 01: Invalid function number
   173 0000012C 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   174                              <1> ;Error 02: File not found
   175 00000130 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   176                              <1> ;Error 03: Path not found
   177 00000134 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   178                              <1> ;Error 04: Too many open handles, and no handles are left
   179 00000138 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   180                              <1> ;Error 05: Access being denied
   181 0000013C 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   182                              <1> ;Error 06: Invalid File handle being provided
   183 00000140 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   184                              <1> ;Error 07: MCB chain destroyed
   185 00000144 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   186                              <1> ;Error 08: No Memory remaining
   187 00000148 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   188                              <1> ;Error 09: Invalid MCB block Address
   189 0000014C 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   190                              <1> ;Error 0A: Bad Environment block
   191 00000150 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   192                              <1> ;Error 0B: Data provided in a bad format
   193 00000154 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   194                              <1> ;Error 0C: Access Code Invalid
   195 00000158 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   196                              <1> ;Error 0D: Error due to Invalid Data provided
   197 0000015C 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   198                              <1> ;Error 0F: Error due to a bad drive letter being provided
   199 00000160 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   200                              <1> ;Error 10: Error due to attempting to delete the CWD
   201 00000164 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   202                              <1> ;Error 11: Error due to a unknown device being used
   203 00000168 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   204                              <1> ;Error 12: No more file handles available
   205 0000016C 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   206                              <1> ;Error 50: Network request not supported
   207 00000170 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   208                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   209 00000174 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   210                              <1> ;Error 21: File Locking Violation
   211 00000178 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   212                              <1> ;Error 54: Too many levels of redirection error
   213 0000017C 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   214                              <1> ;Error 56: Bad resource password provided
   215 00000180 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   216                              <1> ;Error 52: Directory already exists
   217 00000184 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   218                              <1> ;Error 32: Network request not supported by DOS
   219 00000188 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   220                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   221 0000018C 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   222                              <1> ;Error 57: Bad parameter in request
   223 00000190 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   224                              <1> ;Error 53: Fail was returned from Int 44h
   225 00000194 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   226                              <1> ;Error 24: Sharing Buffer Full
   227 00000198 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   228 0000019C FFFFFFFF            <1>     dd -1   ;End of table signature
   229                              <1> 
   230                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   231 000001A0 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   231 000001A9 090A0B0C0D0E0F      <1>
   232 000001B0 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   232 000001B9 191A1B1C1D1E1F      <1>
   233 000001C0 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   233 000001C9 3D3E3F5B5C5D7C      <1>
   234                              <1> badDirNameCharL equ $ - badDirNameChar
   235                              <1> ;The chars * ? . \ / need to always be handled separately
   236                              <1> 
   237                              <1> extAsciiTbl:    ;This table needs to be replaced in other Codepages
   238 000001D0 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   238 000001D9 4545494949          <1>
   239 000001DE 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   239 000001E7 5559999A9B          <1>
   240 000001EC 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   240 000001F5 A5A6A7A8            <1>
   241 000001F9 A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   241 00000202 B2B3B4              <1>
   242 00000205 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   242 0000020E BEBFC0              <1>
   243 00000211 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   243 0000021A CACBCC              <1>
   244 0000021D CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   244 00000226 D6D7D8              <1>
   245 00000229 D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   245 00000232 E2E3E4              <1>
   246 00000235 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   246 0000023E EEEFF0              <1>
   247 00000241 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   247 0000024A FAFBFC              <1>
   248 0000024D FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   249                              <1> 
   250                              <1> asciiCharProperties:   ;This table needs to replaces in other Codepages
   251 00000250 F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   251 00000259 F0F6F6              <1>
   252 0000025C F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   252 00000265 F6F6F6              <1>
   253 00000268 F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   253 00000271 FFF6FF              <1>
   254 00000274 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   254 0000027D FFFEF6              <1>
   255 00000280 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   255 00000289 FFF4F4              <1>
   256 0000028C F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   256 00000295 FFFFFF              <1>
   257 00000298 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   257 000002A1 FFFFFF              <1>
   258 000002A4 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   258 000002AD F6FFFF              <1>
   259 000002B0 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   259 000002B9 FFFFFF              <1>
   260 000002BC FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   260 000002C5 FFFFFF              <1>
   261 000002C8 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
    20                                  %include "./Source/Data/dispTbl.asm"
    21                              <1> ;Kernel Dispatch Function Table
    22                              <1> 
    23                              <1> kDispTbl:
    24 000002D0 3A42                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    25 000002D2 3C1E                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    26 000002D4 491E                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    27 000002D6 061F                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    28 000002D8 2F1F                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    29 000002DA 371F                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    30 000002DC 4F1F                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    31 000002DE 821F                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    32 000002E0 A71F                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    33 000002E2 0620                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    34 000002E4 B922                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    35 000002E6 1520                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    36 000002E8 2120                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    37 000002EA B954                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    38 000002EC EB54                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    39 000002EE F527                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    40 000002F0 F527                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    41 000002F2 F527                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    42 000002F4 F527                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    43 000002F6 F527                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    44 000002F8 F527                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    45 000002FA F527                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    46 000002FC F527                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    47 000002FE F527                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    48 00000300 7457                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    49 00000302 0455                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    50 00000304 F627                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    51 00000306 0B55                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    52 00000308 0D55                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    53 0000030A 7457                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    54 0000030C 7457                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    55 0000030E AB55                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    56 00000310 7457                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    57 00000312 0928                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    58 00000314 0928                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    59 00000316 0928                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    60 00000318 0928                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    61 0000031A 5655                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    62 0000031C 4641                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    63 0000031E 0928                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    64 00000320 0928                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    65 00000322 0928                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    66 00000324 2F25                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    67 00000326 5625                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    68 00000328 5C25                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    69 0000032A 7D25                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    70 0000032C 8855                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    71 0000032E 1828                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    72 00000330 9655                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    73 00000332 0C42                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    74 00000334 AD55                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    75 00000336 6E54                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    76 00000338 E555                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    77 0000033A F655                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    78 0000033C 0756                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    79 0000033E 5649                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    80 00000340 7F49                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    81 00000342 1516                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    82 00000344 4C18                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    83 00000346 121A                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    84 00000348 1229                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    85 0000034A 2329                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    86 0000034C 322A                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    87 0000034E 712A                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    88 00000350 AC2A                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    89 00000352 B82A                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    90 00000354 8A2B                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    91 00000356 F92B                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    92 00000358 9B3B                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    93 0000035A E32C                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    94 0000035C 212D                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    95 0000035E E11A                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    96 00000360 CD3B                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    97 00000362 F73D                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    98 00000364 FF3E                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    99 00000366 8C43                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
   100 00000368 3C42                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   101 0000036A 4B56                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   102 0000036C 412D                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   103 0000036E AA2D                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   104 00000370 9C54                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   105 00000372 A554                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   106 00000374 5956                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   107 00000376 6A56                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   108 00000378 4457                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   109 0000037A 3341                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   110 0000037C DA2D                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   111 0000037E 1A1B                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   112 00000380 9240                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   113 00000382 4B57                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   114 00000384 EF2D                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   115 00000386 EF2D                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   116 00000388 EF2D                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   117 0000038A 7557                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   118 0000038C E857                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   119 0000038E E857                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   120 00000390 1A1B                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   121 00000392 7457                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   122 00000394 AE54                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   123 00000396 7457                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   124 00000398 B754                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   125 0000039A 7F49                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   126 0000039C 7F49                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   127 0000039E F42D                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   128 000003A0 F92D                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   129 000003A2 7457                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   130                              <1> kDispTblL  equ $ - kDispTbl 
   131                              <1> 
   132                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   133 000003A4 3D57                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   134 000003A6 0B31                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   135 000003A8 3A4E                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   136 000003AA 4057                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   137 000003AC 624F                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   138 000003AE 771D                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   139 000003B0 1549                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   140 000003B2 D504                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   141 000003B4 B83A                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   142 000003B6 0705                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   143 000003B8 A056                <1>     dw noOp - mDispTbl  ;AX=120Ah, Perform Critical error Interrupt...
   144 000003BA A056                <1>     dw noOp - mDispTbl  ;AX=120Bh, Signal Sharing Violation to User
   145 000003BC A056                <1>     dw noOp - mDispTbl  ;AX=120Ch, Open devce and set SFT owner
   146 000003BE 0E27                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   147 000003C0 1505                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   148 000003C2 2F05                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   149 000003C4 3D05                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   150 000003C6 B34F                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   151 000003C8 954F                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   152 000003CA 6E4F                <1>     dw uppercaseChar - mDispTbl ;AX=1213h
   153 000003CC E350                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   154 000003CE 5005                <1>     dw flushBuffer - mDispTbl   ;AX=1215h
   155 000003D0 A939                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   156 000003D2 304F                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   157 000003D4 484E                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   158 000003D6 D54E                <1>     dw getCDS - mDispTbl    ;AX=1219h
   159 000003D8 AB0F                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   160                              <1> mDispTblL   equ     $ - mDispTbl
   161                              <1> 
   162                              <1> serverDispTbl:  ;Server Dispatch functions
   163 000003DA 01                  <1>     db 01h  ;Number of entries needs to be 0Bh, but for now, 01h
   164 000003DB 8C56                <1>     dw serverDispatch - serverDispTbl
    21                                  %include "./Source/Debug/debug.asm"
    22                              <1> ;This file contains debugging macros, procs and strings
    23                              <1> ; that we can use to output to COM1 bypassing the operating system.
    24                              <1> ;A serial terminal must be connected for this to work.
    25                              <1> 
    26                              <1> ;Variables and equates
    27                              <1> 
    28 000003DD 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    29                              <1> 
    30 000003E5 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    30 000003EE 39414243444546      <1>
    31                              <1> ;Common procedures
    32                              <1> debMakeDebuggerRespond:
    33 000003F5 488D2D26000000      <1>     lea rbp, .msg
    34 000003FC E8AF000000          <1>     call debPrintNullString
    35 00000401 B900001000          <1>     mov ecx, 100000h
    36                              <1> .waiting:
    37 00000406 FFC9                <1>     dec ecx
    38 00000408 740C                <1>     jz .timeout
    39 0000040A B402                <1>     mov ah, 02h ;Blocking recieve!
    40 0000040C 31D2                <1>     xor edx, edx
    41 0000040E CD34                <1>     int 34h
    42 00000410 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    43 00000413 75F1                <1>     jnz .waiting
    44 00000415 C3                  <1>     ret
    45                              <1> .timeout:
    46 00000416 488D2D47000000      <1>     lea rbp, .msg2
    47 0000041D E98E000000          <1>     jmp debPrintNullString
    48 00000422 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    48 0000042B 6B6579206174207468- <1>
    48 00000434 65207465726D696E61- <1>
    48 0000043D 6C20746F20636F6E74- <1>
    48 00000446 696E7565206F722077- <1>
    48 0000044F 61697420666F722074- <1>
    48 00000458 696D656F75742E2E2E- <1>
    48 00000461 0A0D00              <1>
    49 00000464 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    49 0000046D 436F6E74696E75696E- <1>
    49 00000476 672E2E2E0A0D00      <1>
    50                              <1> debPrintHexByte:
    51                              <1> ;Print the hex byte in al as a hex value
    52 0000047D 52                  <1>     push rdx
    53 0000047E 53                  <1>     push rbx
    54 0000047F 50                  <1>     push rax
    55                              <1> 
    56 00000480 88C2                <1>     mov dl, al           ;save byte in dl
    57 00000482 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    58 00000486 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    59 0000048B 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    60 0000048F E80C000000          <1>     call .wrchar
    61 00000494 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    62 00000497 E804000000          <1>     call .wrchar
    63                              <1> 
    64 0000049C 58                  <1>     pop rax
    65 0000049D 5B                  <1>     pop rbx
    66 0000049E 5A                  <1>     pop rdx
    67 0000049F C3                  <1>     ret
    68                              <1> .wrchar:
    69 000004A0 6687DB              <1>     xchg bx, bx
    70 000004A3 488D1D3BFFFFFF      <1>     lea rbx, debascii
    71 000004AA D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    72 000004AB B401                <1>     mov ah, 01h
    73 000004AD CD34                <1>     int 34h  ;print char
    74 000004AF C3                  <1>     ret
    75                              <1> 
    76                              <1> debPrintNullString:
    77                              <1> ;Print a null terminated string pointed to by rbp
    78 000004B0 56                  <1>     push rsi
    79 000004B1 50                  <1>     push rax
    80 000004B2 52                  <1>     push rdx
    81 000004B3 31D2                <1>     xor edx, edx    ;Select COM1
    82 000004B5 4889EE              <1>     mov rsi, rbp
    83                              <1> .getChar:
    84 000004B8 AC                  <1>     lodsb
    85 000004B9 84C0                <1>     test al, al
    86 000004BB 7406                <1>     jz .exit
    87 000004BD B401                <1>     mov ah, 01h
    88 000004BF CD34                <1>     int 34h
    89 000004C1 EBF5                <1>     jmp short .getChar
    90                              <1> .exit:
    91 000004C3 5A                  <1>     pop rdx
    92 000004C4 58                  <1>     pop rax
    93 000004C5 5E                  <1>     pop rsi
    94 000004C6 C3                  <1>     ret
    95                              <1> 
    96                              <1> debPrintDOSStack:
    97                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    98                              <1> ;Shows me which function, and parameters passed and returned
    99 000004C7 488D2DA5010000      <1>     lea rbp, .a1
   100 000004CE E8DDFFFFFF          <1>     call debPrintNullString
   101 000004D3 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   102 000004DA 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   103 000004E1 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   104 000004E4 E802030000          <1>     call overlayQword
   105 000004E9 4881C316000000      <1>     add rbx, 22
   106 000004F0 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   107 000004F4 E8F2020000          <1>     call overlayQword
   108 000004F9 4881C316000000      <1>     add rbx, 22
   109 00000500 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   110 00000504 E8E2020000          <1>     call overlayQword
   111 00000509 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   112 00000510 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   113 00000514 E8D2020000          <1>     call overlayQword
   114 00000519 4881C316000000      <1>     add rbx, 22 
   115 00000520 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   116 00000524 E8C2020000          <1>     call overlayQword
   117 00000529 4881C316000000      <1>     add rbx, 22
   118 00000530 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   119 00000534 E8B2020000          <1>     call overlayQword
   120 00000539 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   121 00000540 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   122 00000544 E8A2020000          <1>     call overlayQword
   123 00000549 4881C316000000      <1>     add rbx, 22
   124 00000550 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
   125 00000557 480560000000        <1>     add rax, callerFrame_size
   126 0000055D E889020000          <1>     call overlayQword
   127 00000562 4881C316000000      <1>     add rbx, 22
   128 00000569 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   129 0000056D E879020000          <1>     call overlayQword
   130 00000572 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   131 00000579 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   132 0000057D E869020000          <1>     call overlayQword
   133 00000582 488D2D06000000      <1>     lea rbp, .a0
   134 00000589 E822FFFFFF          <1>     call debPrintNullString
   135 0000058E C3                  <1>     ret
   136                              <1> 
   137 0000058F 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   137 00000598 303030303030303030- <1>
   137 000005A1 30306820            <1>
   138 000005A5 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   138 000005AE 303030303030303030- <1>
   138 000005B7 30306820            <1>
   139 000005BB 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   139 000005C4 303030303030303030- <1>
   139 000005CD 30306820            <1>
   140 000005D1 0A0D                <1>     db  0Ah,0Dh
   141 000005D3 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   141 000005DC 303030303030303030- <1>
   141 000005E5 30306820            <1>
   142 000005E9 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   142 000005F2 303030303030303030- <1>
   142 000005FB 30306820            <1>
   143 000005FF 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   143 00000608 303030303030303030- <1>
   143 00000611 30306820            <1>
   144 00000615 0A0D                <1>     db 0Ah, 0Dh
   145 00000617 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   145 00000620 303030303030303030- <1>
   145 00000629 30306820            <1>
   146 0000062D 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   146 00000636 303030303030303030- <1>
   146 0000063F 30306820            <1>
   147 00000643 7269703D3030303030- <1>     db "rip=0000000000000000h"
   147 0000064C 303030303030303030- <1>
   147 00000655 303068              <1>
   148 00000658 0A0D                <1>     db 0Ah, 0Dh
   149 0000065A 666C673D3030303030- <1>     db "flg=0000000000000000h "
   149 00000663 303030303030303030- <1>
   149 0000066C 30306820            <1>
   150 00000670 0A0D00              <1>     db 0Ah,0Dh,0
   151 00000673 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   151 0000067C 206F6E20496E742034- <1>
   151 00000685 316820737461636B0A- <1>
   151 0000068E 0D00                <1>
   152                              <1> 
   153                              <1> debDPBptr:
   154                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   155 00000690 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   156 00000697 4889E8              <1>     mov rax, rbp
   157 0000069A E84C010000          <1>     call overlayQword
   158 0000069F 488D2D06000000      <1>     lea rbp, .dpb
   159 000006A6 E805FEFFFF          <1>     call debPrintNullString
   160 000006AB C3                  <1>     ret
   161                              <1> .dpb: 
   162 000006AC 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   162 000006B5 203030303030303030- <1>
   162 000006BE 303030303030303068- <1>
   162 000006C7 200A0D00            <1>
   163                              <1> 
   164                              <1> debDPBBPBptr:
   165                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   166                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   167 000006CB 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   168 000006D2 4889E8              <1>     mov rax, rbp
   169 000006D5 E811010000          <1>     call overlayQword
   170 000006DA 4881C321000000      <1>     add rbx, 33
   171 000006E1 4889F0              <1>     mov rax, rsi
   172 000006E4 E802010000          <1>     call overlayQword
   173 000006E9 488D2D06000000      <1>     lea rbp, .dpb
   174 000006F0 E8BBFDFFFF          <1>     call debPrintNullString
   175 000006F5 C3                  <1>     ret
   176                              <1> .dpb: 
   177 000006F6 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   177 000006FF 203030303030303030- <1>
   177 00000708 303030303030303068- <1>
   177 00000711 2066726F6D20        <1>
   178 00000717 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   178 00000720 203030303030303030- <1>
   178 00000729 303030303030303068- <1>
   178 00000732 200A0D00            <1>
   179                              <1> overlayByte:
   180                              <1>     ;Called with number in rax
   181                              <1>     ;pointer to START of 16 byte space for number in rbx
   182 00000736 53                  <1>     push rbx
   183 00000737 51                  <1>     push rcx
   184 00000738 52                  <1>     push rdx
   185 00000739 55                  <1>     push rbp
   186 0000073A 4889DD              <1>     mov rbp, rbx
   187 0000073D 4889C2              <1>     mov rdx, rax
   188 00000740 48FFC5              <1>     inc rbp ;Go to end of number
   189                              <1> 
   190 00000743 488D1D9BFCFFFF      <1>     lea rbx, debascii
   191 0000074A 88D0                <1>     mov al, dl  ;Go low nybble first
   192 0000074C 240F                <1>     and al, 0Fh
   193 0000074E D7                  <1>     xlatb
   194 0000074F 884500              <1>     mov byte [rbp], al
   195 00000752 48FFCD              <1>     dec rbp ;Go down one char pos
   196 00000755 88D0                <1>     mov al, dl
   197 00000757 24F0                <1>     and al, 0F0h    ;Hi nybble next
   198 00000759 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   199 0000075C D7                  <1>     xlatb
   200 0000075D 884500              <1>     mov byte [rbp], al  ;Store char
   201                              <1> 
   202 00000760 5D                  <1>     pop rbp
   203 00000761 5A                  <1>     pop rdx
   204 00000762 59                  <1>     pop rcx
   205 00000763 5B                  <1>     pop rbx
   206 00000764 C3                  <1>     ret
   207                              <1> 
   208                              <1> overlayWord:
   209                              <1>     ;Called with number in rax
   210                              <1>     ;pointer to START of 16 byte space for number in rbx
   211 00000765 53                  <1>     push rbx
   212 00000766 51                  <1>     push rcx
   213 00000767 52                  <1>     push rdx
   214 00000768 55                  <1>     push rbp
   215 00000769 4889DD              <1>     mov rbp, rbx
   216 0000076C 4889C2              <1>     mov rdx, rax
   217 0000076F 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   218 00000776 B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   219 0000077B 488D1D63FCFFFF      <1>     lea rbx, debascii
   220                              <1> .ow0:
   221 00000782 88D0                <1>     mov al, dl  ;Go low nybble first
   222 00000784 240F                <1>     and al, 0Fh
   223 00000786 D7                  <1>     xlatb
   224 00000787 884500              <1>     mov byte [rbp], al
   225 0000078A 48FFCD              <1>     dec rbp ;Go down one char pos
   226 0000078D 88D0                <1>     mov al, dl
   227 0000078F 24F0                <1>     and al, 0F0h    ;Hi nybble next
   228 00000791 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   229 00000794 D7                  <1>     xlatb
   230 00000795 884500              <1>     mov byte [rbp], al  ;Store char
   231 00000798 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   232 0000079C 48FFCD              <1>     dec rbp
   233 0000079F FFC9                <1>     dec ecx
   234 000007A1 75DF                <1>     jnz .ow0
   235 000007A3 5D                  <1>     pop rbp
   236 000007A4 5A                  <1>     pop rdx
   237 000007A5 59                  <1>     pop rcx
   238 000007A6 5B                  <1>     pop rbx
   239 000007A7 C3                  <1>     ret
   240                              <1> 
   241                              <1> overlayDword:
   242                              <1>     ;Called with number in rax
   243                              <1>     ;pointer to START of 16 byte space for number in rbx
   244 000007A8 53                  <1>     push rbx
   245 000007A9 51                  <1>     push rcx
   246 000007AA 52                  <1>     push rdx
   247 000007AB 55                  <1>     push rbp
   248 000007AC 4889DD              <1>     mov rbp, rbx
   249 000007AF 4889C2              <1>     mov rdx, rax
   250 000007B2 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   251 000007B9 B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   252 000007BE 488D1D20FCFFFF      <1>     lea rbx, debascii
   253                              <1> .od0:
   254 000007C5 88D0                <1>     mov al, dl  ;Go low nybble first
   255 000007C7 240F                <1>     and al, 0Fh
   256 000007C9 D7                  <1>     xlatb
   257 000007CA 884500              <1>     mov byte [rbp], al
   258 000007CD 48FFCD              <1>     dec rbp ;Go down one char pos
   259 000007D0 88D0                <1>     mov al, dl
   260 000007D2 24F0                <1>     and al, 0F0h    ;Hi nybble next
   261 000007D4 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   262 000007D7 D7                  <1>     xlatb
   263 000007D8 884500              <1>     mov byte [rbp], al  ;Store char
   264 000007DB 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   265 000007DF 48FFCD              <1>     dec rbp
   266 000007E2 FFC9                <1>     dec ecx
   267 000007E4 75DF                <1>     jnz .od0
   268 000007E6 5D                  <1>     pop rbp
   269 000007E7 5A                  <1>     pop rdx
   270 000007E8 59                  <1>     pop rcx
   271 000007E9 5B                  <1>     pop rbx
   272 000007EA C3                  <1>     ret
   273                              <1> 
   274                              <1> overlayQword:
   275                              <1>     ;Called with number in rax
   276                              <1>     ;pointer to START of 16 byte space for number in rbx
   277 000007EB 53                  <1>     push rbx
   278 000007EC 51                  <1>     push rcx
   279 000007ED 52                  <1>     push rdx
   280 000007EE 55                  <1>     push rbp
   281 000007EF 4889DD              <1>     mov rbp, rbx
   282 000007F2 4889C2              <1>     mov rdx, rax
   283 000007F5 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   284 000007FC B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   285 00000801 488D1DDDFBFFFF      <1>     lea rbx, debascii
   286                              <1> .oq0:
   287 00000808 88D0                <1>     mov al, dl  ;Go low nybble first
   288 0000080A 240F                <1>     and al, 0Fh
   289 0000080C D7                  <1>     xlatb
   290 0000080D 884500              <1>     mov byte [rbp], al
   291 00000810 48FFCD              <1>     dec rbp ;Go down one char pos
   292 00000813 88D0                <1>     mov al, dl
   293 00000815 24F0                <1>     and al, 0F0h    ;Hi nybble next
   294 00000817 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   295 0000081A D7                  <1>     xlatb
   296 0000081B 884500              <1>     mov byte [rbp], al  ;Store char
   297 0000081E 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   298 00000822 48FFCD              <1>     dec rbp
   299 00000825 FFC9                <1>     dec ecx
   300 00000827 75DF                <1>     jnz .oq0
   301 00000829 5D                  <1>     pop rbp
   302 0000082A 5A                  <1>     pop rdx
   303 0000082B 59                  <1>     pop rcx
   304 0000082C 5B                  <1>     pop rbx
   305 0000082D C3                  <1>     ret
   306                              <1> 
   307                              <1> debPrintFunctionName:
   308                              <1> ;Prints the DOS function that has been entered
   309                              <1> ;Entered with ah = Function number
   310 0000082E 88E0                <1>     mov al, ah  ;Get dos function number
   311 00000830 488D1DAEFBFFFF      <1>     lea rbx, debascii
   312 00000837 488D1535000000      <1>     lea rdx, .number
   313 0000083E 24F0                <1>     and al, 0F0h    ;Get high nybble first
   314 00000840 C0E804              <1>     shr al, 4
   315 00000843 D7                  <1>     xlatb
   316 00000844 8802                <1>     mov byte [rdx], al
   317 00000846 88E0                <1>     mov al, ah
   318 00000848 240F                <1>     and al, 0Fh
   319 0000084A D7                  <1>     xlatb
   320 0000084B 884201              <1>     mov byte [rdx + 1], al
   321 0000084E 488D2D06000000      <1>     lea rbp, .dosString
   322 00000855 E856FCFFFF          <1>     call debPrintNullString
   323 0000085A C3                  <1>     ret
   324 0000085B 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   324 00000864 696F6E20496E742034- <1>
   324 0000086D 31682F41483D        <1>
   325 00000873 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   326                              <1> 
   327                              <1> ;----------------:
   328                              <1> ;!!!! MACROS !!!!:
   329                              <1> ;----------------:
   330                              <1> ;Insert macro when entering a debug block
   331                              <1> %macro debugEnterM 0
   332                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   333                              <1>     mov rsp, debStackTop
   334                              <1> ;Push all registers except rsp on stack
   335                              <1>     push rax
   336                              <1>     push rbx
   337                              <1>     push rcx
   338                              <1>     push rdx
   339                              <1>     push rsi
   340                              <1>     push rdi
   341                              <1>     push rbp
   342                              <1>     push r8
   343                              <1>     push r9
   344                              <1>     push r10
   345                              <1>     push r11
   346                              <1>     push r12
   347                              <1>     push r13
   348                              <1>     push r14
   349                              <1>     push r15
   350                              <1>     pushfq
   351                              <1> %endmacro
   352                              <1> ;Insert macro when exiting a debug block
   353                              <1> %macro debugExitM 0
   354                              <1>     popfq
   355                              <1>     pop r15
   356                              <1>     pop r14
   357                              <1>     pop r13
   358                              <1>     pop r12
   359                              <1>     pop r11
   360                              <1>     pop r10
   361                              <1>     pop r9
   362                              <1>     pop r8
   363                              <1>     pop rbp
   364                              <1>     pop rdi
   365                              <1>     pop rsi
   366                              <1>     pop rdx
   367                              <1>     pop rcx
   368                              <1>     pop rbx
   369                              <1>     pop rax
   370                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   371                              <1> %endmacro
    22                                  %include "./Source/Kernel/FAT/buffun.asm"
    23                              <1> ;This file contains FAT disk buffer related functions that
    24                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    25                              <1> ;----------------------------------------------------
    26                              <1> ;           Externally referenced functions         :
    27                              <1> ;----------------------------------------------------
    28                              <1> 
    29                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    30                              <1> ;Sets the buffer in rdi to the head of the chain
    31                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    32                              <1> ;Output: Buffer header set to the head of the chain
    33 00000879 48393D(55C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    34 00000880 7428                <1>     je .exit
    35 00000882 56                  <1>     push rsi
    36 00000883 488B35(55C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    37                              <1> .mainlp:
    38 0000088A 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    39 0000088D 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    40 0000088F 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    41 00000892 EBF6                <1>     jmp short .mainlp
    42                              <1> .fnd:
    43 00000894 57                  <1>     push rdi
    44 00000895 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    45 00000898 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    46 0000089B 5F                  <1>     pop rdi ;Get original buf back
    47 0000089C 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    48 0000089F 488735(55C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    49 000008A6 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    50 000008A9 5E                  <1>     pop rsi
    51                              <1> .exit:
    52                              <1>     return
    18                              <2> %%_ret:
    19 000008AA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    53                              <1> 
    54                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    55                              <1> ;1 External reference
    56                              <1> ;Input: rdi = Buffer header to flush and free
    57 000008AB E844000000          <1>     call flushBuffer
    58 000008B0 7206                <1>     jc .exit
    59                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    60 000008B2 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    61                              <1> .exit:
    62                              <1>     return
    18                              <2> %%_ret:
    19 000008B8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    65                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    66                              <1> ;Output: rdi = First disk buffer
    67 000008B9 488B3D(55C00300)    <1>     mov rdi, [bufHeadPtr]
    68 000008C0 57                  <1>     push rdi
    69                              <1> .lp:
    70 000008C1 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    71 000008C5 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    72 000008C8 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    73 000008CF 75F0                <1>     jne .lp
    74 000008D1 5F                  <1>     pop rdi
    75                              <1>     return
    18                              <2> %%_ret:
    19 000008D2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    78                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    79                              <1> ; second buffer in the chain in rdi
    80                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    81                              <1> ;Output: rdi = Second buffer in the chain
    82 000008D3 52                  <1>     push rdx
    83 000008D4 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    84 000008D7 E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    85 000008DC 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    86 000008DF 5A                  <1>     pop rdx
    87                              <1>     return
    18                              <2> %%_ret:
    19 000008E0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    90                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    91                              <1> ;Input: rdi = Buffer header to start searching at
    92                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    93                              <1> ;        ZF=ZE => No unreferenced buffer found
    94 000008E1 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    95 000008E5 750C                <1>     jnz .exit
    96 000008E7 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    97 000008EA 4881FFFFFFFFFF      <1>     cmp rdi, -1
    98 000008F1 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    99                              <1> .exit:
   100                              <1>     return
    18                              <2> %%_ret:
    19 000008F3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   101                              <1> 
   102                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
   103                              <1> ;Flushes the data in a sector buffer to disk!
   104                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   105                              <1> ;Exit:  CF=NC : Success
   106                              <1> ;       CF=CY : Fail, terminate the request
   107                              <1> ;First make request to device driver
   108 000008F4 50                  <1>     push rax
   109 000008F5 53                  <1>     push rbx
   110 000008F6 51                  <1>     push rcx
   111 000008F7 52                  <1>     push rdx
   112 000008F8 56                  <1>     push rsi
   113 000008F9 55                  <1>     push rbp
   114                              <1> ;If the buffer is freed, skip flushing to avoid issues
   115 000008FA 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
   116 000008FE 7454                <1>     je .fbFreeExit  ;If it is free exit
   117 00000900 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   118 00000904 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   119                              <1> .fbRequest0:
   120 00000906 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   121 0000090B F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   122 0000090F 7406                <1>     jz .fbRequest1
   123 00000911 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   124                              <1> .fbRequest1:
   125 00000917 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   126 0000091A B901000000          <1>     mov ecx, 1  ;One sector to copy
   127 0000091F 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   128 00000923 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   129 00000927 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   130 0000092B E834470000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   131 00000930 E8C0450000          <1>     call absDiskDriverCall    ;Make Driver Request
   132 00000935 7525                <1>     jnz .fbFail
   133                              <1> ;Now check if the buffer was a FAT, to write additional copies
   134 00000937 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   135 0000093B 7417                <1>     jz .fbFreeExit  ;If not, exit
   136 0000093D FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   137 00000940 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   138 00000942 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   139 00000945 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   140 00000949 E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   141                              <1> .fbFreeExit1:
   142 0000094E 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   143 00000951 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   144                              <1> .fbFreeExit:
   145 00000954 F8                  <1>     clc
   146                              <1> .fbExitFail:
   147 00000955 5D                  <1>     pop rbp
   148 00000956 5E                  <1>     pop rsi
   149 00000957 5A                  <1>     pop rdx
   150 00000958 59                  <1>     pop rcx
   151 00000959 5B                  <1>     pop rbx
   152 0000095A 58                  <1>     pop rax
   153                              <1>     return
    18                              <2> %%_ret:
    19 0000095B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   154                              <1> .fbFail:
   155                              <1> ;Enter here only if the request failed
   156 0000095C FFCE                <1>     dec esi
   157 0000095E 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   158                              <1> ;Request failed thrice, critical error call
   159 00000960 C605(C9C30300)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   160 00000967 E8E4420000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   161 0000096C 3C01                <1>     cmp al, critRetry
   162 0000096E 7496                <1>     je .fbRequest0
   163                              <1>     ;Else we fail (Ignore=Fail here)
   164 00000970 F9                  <1>     stc ;Set error flag to indicate fail
   165 00000971 E9DFFFFFFF          <1>     jmp .fbExitFail
   166                              <1> 
   167                              <1> testDirtyBufferForDrive:    ;External linkage
   168                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   169                              <1> ;Input: al = Drive number (0 based)
   170                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   171                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   172 00000976 53                  <1>     push rbx
   173 00000977 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   174                              <1> .tdbfdCheckBuffer:
   175 0000097E 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   176 00000981 7509                <1>     jne .tdbfdGotoNextBuffer
   177 00000983 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   178 00000987 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   179 00000989 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   180                              <1> .tdbfdExit:
   181 0000098A 5B                  <1>     pop rbx
   182                              <1>     return
    18                              <2> %%_ret:
    19 0000098B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   183                              <1> .tdbfdGotoNextBuffer:
   184 0000098C 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   185 0000098F 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   186 00000996 74F2                <1>     je .tdbfdExit
   187 00000998 EBE4                <1>     jmp short .tdbfdCheckBuffer
   188                              <1> 
   189                              <1> freeBuffersForDPB:
   190                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   191                              <1> ; to have a drive number of -1, thus freeing it
   192                              <1> ;Given DPB is in rbp
   193 0000099A 53                  <1>     push rbx
   194 0000099B 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   195                              <1> .i0:
   196 000009A2 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   197 000009A6 7506                <1>     jne .i1 ;If no, skip freeing
   198 000009A8 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   199                              <1> .i1:
   200 000009AE 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   201 000009B1 4881FBFFFFFFFF      <1>     cmp rbx, -1
   202 000009B8 75E8                <1>     jne .i0
   203                              <1> .exit:
   204 000009BA 5B                  <1>     pop rbx
   205                              <1>     return
    18                              <2> %%_ret:
    19 000009BB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   206                              <1> 
   207                              <1> setBufferDirty:
   208 000009BC 55                  <1>     push rbp
   209 000009BD 9C                  <1>     pushfq
   210 000009BE 488B2D(90C60300)    <1>     mov rbp, qword [currBuff]
   211 000009C5 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   212 000009C9 9D                  <1>     popfq
   213 000009CA 5D                  <1>     pop rbp
   214                              <1>     return
    18                              <2> %%_ret:
    19 000009CB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   215                              <1> 
   216                              <1> 
   217                              <1> getBuffer: ;Internal Linkage ONLY
   218                              <1> ;
   219                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   220                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   221                              <1> ;Flushes if not in disk change mode. 
   222                              <1> ;If in disk change mode, will check to see if the selected buffer 
   223                              <1> ; has data referring a device using the same DPB as we are changing.
   224                              <1> ; If it is, skip flushing, if not, flush first!
   225                              <1> ;
   226                              <1> ;This function will return a pointer to the desired data sector OR 
   227                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   228                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   229                              <1> ;Entry: rax = Sector to read
   230                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   231                              <1> ;       rsi = DPB to use for transaction
   232                              <1> ;Exit:  CF=NC => 
   233                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   234                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   235 000009CC 51                  <1>     push rcx
   236 000009CD 52                  <1>     push rdx
   237 000009CE 56                  <1>     push rsi
   238 000009CF 57                  <1>     push rdi
   239 000009D0 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   240 000009D2 E832010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   241 000009D7 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   242 000009DE 7418                <1>     je .rbReadNewSector
   243 000009E0 48893D(90C60300)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   244                              <1> .rbExit:
   245 000009E7 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer
   246 000009EB F8                  <1>     clc
   247                              <1> .rbExitNoFlag:
   248 000009EC 5F                  <1>     pop rdi
   249 000009ED 5E                  <1>     pop rsi
   250 000009EE 5A                  <1>     pop rdx
   251 000009EF 59                  <1>     pop rcx
   252 000009F0 488B1D(90C60300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   253                              <1>     return
    18                              <2> %%_ret:
    19 000009F7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   254                              <1> .rbReadNewSector:
   255 000009F8 E8B5000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   256 000009FD 803D(E8D80300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   257 00000A04 7506                <1>     jne .flush  ;We are not, flush buffer
   258 00000A06 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   259 00000A0A 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   260                              <1> .flush:
   261 00000A0C E89AFEFFFF          <1>     call flushAndFreeBuffer
   262 00000A11 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   263                              <1> .skipFlush:
   264                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   265                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   266                              <1>     ; is no longer owned by that File so we mark the owner as none
   267 00000A13 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   268 00000A1B 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   269 00000A1E 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   270 00000A21 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   271 00000A25 80F902              <1>     cmp cl, fatBuffer
   272 00000A28 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   273 00000A2A 7503                <1>     jne .rbNonFATbuffer
   274 00000A2C 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   275                              <1> .rbNonFATbuffer:
   276 00000A2F 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   277 00000A32 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   278 00000A35 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   279 00000A38 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   280 00000A3C C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   281 00000A40 E804000000          <1>     call readSectorBuffer ;Carry the flag from the request
   282 00000A45 72A5                <1>     jc .rbExitNoFlag
   283 00000A47 EB9E                <1>     jmp short .rbExit
   284                              <1> 
   285                              <1> readSectorBuffer:   ;Internal Linkage
   286                              <1> ;Reads a sector into a built sector buffer
   287                              <1> ;Entry: rdi = Pointer to buffer header
   288                              <1> ;Exit:  CF=NC : Success
   289                              <1> ;       CF=CY : Fail, terminate the request
   290                              <1> ;       rbx pointing to buffer header
   291                              <1> ;First make request to device driver
   292 00000A49 50                  <1>     push rax
   293 00000A4A 53                  <1>     push rbx
   294 00000A4B 51                  <1>     push rcx
   295 00000A4C 52                  <1>     push rdx
   296 00000A4D 56                  <1>     push rsi
   297 00000A4E 55                  <1>     push rbp
   298                              <1> .rsRequest0:
   299 00000A4F BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   300 00000A54 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   301 00000A58 7406                <1>     jz .rsRequest1
   302 00000A5A 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   303                              <1> .rsRequest1:
   304 00000A60 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   305 00000A63 B901000000          <1>     mov ecx, 1  ;One sector to copy
   306 00000A68 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   307 00000A6C 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   308 00000A70 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   309 00000A74 E8F6450000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   310 00000A79 E877440000          <1>     call absDiskDriverCall    ;Make Driver Request
   311 00000A7E 7508                <1>     jnz .rsFail
   312                              <1> .rsExit:
   313 00000A80 F8                  <1>     clc
   314                              <1> .rsExitFail:
   315 00000A81 5D                  <1>     pop rbp
   316 00000A82 5E                  <1>     pop rsi
   317 00000A83 5A                  <1>     pop rdx
   318 00000A84 59                  <1>     pop rcx
   319 00000A85 5B                  <1>     pop rbx
   320 00000A86 58                  <1>     pop rax
   321                              <1>     return
    18                              <2> %%_ret:
    19 00000A87 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   322                              <1> .rsFail:
   323                              <1> ;Enter here only if the request failed
   324 00000A88 FFCE                <1>     dec esi
   325 00000A8A 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   326                              <1> ;Request failed thrice, critical error call
   327                              <1> ;First free the buffer if we failed to read data into it 
   328 00000A8C 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   329 00000A90 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   330 00000A96 C605(C9C30300)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   331 00000A9D E8AE410000          <1>     call diskDevErr
   332 00000AA2 3C01                <1>     cmp al, critRetry
   333 00000AA4 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   334 00000AA6 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   335 00000AAA EBA3                <1>     jmp short .rsRequest0
   336                              <1> .fail:
   337 00000AAC F9                  <1>     stc ;Set error flag to indicate fail
   338 00000AAD E9CFFFFFFF          <1>     jmp .rsExitFail
   339                              <1>     
   340                              <1> findLRUBuffer: ;Internal Linkage
   341                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   342                              <1> ; in rbx and the currBuff variable
   343                              <1> ;Input: Nothing
   344                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   345                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   346 00000AB2 52                  <1>     push rdx
   347 00000AB3 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   348 00000ABA 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   349 00000ABE 7436                <1>     je .flbExit 
   350 00000AC0 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   351 00000AC7 742D                <1>     je .flbExit
   352                              <1> .flbWalk:
   353 00000AC9 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   354 00000ACC 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   355 00000ACF 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   356 00000AD3 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   357 00000AD5 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   358 00000ADC 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   359 00000ADE 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   360                              <1> .flbHeadLink:
   361 00000AE5 488B15(55C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   362 00000AEC 48893D(55C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   363 00000AF3 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   364                              <1> .flbExit:
   365 00000AF6 5A                  <1>     pop rdx
   366 00000AF7 48893D(90C60300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   367                              <1>     return
    18                              <2> %%_ret:
    19 00000AFE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   368                              <1> .flbFreeLink:
   369 00000AFF 51                  <1>     push rcx
   370 00000B00 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   371 00000B03 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   372 00000B06 59                  <1>     pop rcx
   373 00000B07 EBDC                <1>     jmp short .flbHeadLink
   374                              <1> 
   375                              <1> findSectorInBuffer:     ;Internal linkage
   376                              <1> ;Finds the Buffer for a sector
   377                              <1> ;If the sector is not in a buffer, returns with a -1
   378                              <1> ;Input: rax = Sector number
   379                              <1> ;        dl = Drive number
   380                              <1> ;Output: rdi = Buffer hdr pointer or -1
   381 00000B09 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   382                              <1> .fsiCheckBuffer:
   383 00000B10 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   384 00000B13 7507                <1>     jne .fsiGotoNextBuffer
   385 00000B15 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   386 00000B19 7501                <1>     jne .fsiGotoNextBuffer
   387                              <1> .fsiExit:
   388                              <1>     return
    18                              <2> %%_ret:
    19 00000B1B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   389                              <1> .fsiGotoNextBuffer:
   390 00000B1C 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   391 00000B1F 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   392 00000B26 74F3                <1>     je .fsiExit
   393 00000B28 EBE6                <1>     jmp short .fsiCheckBuffer
   394                              <1> ;-----------------------------------------------------------------------------
   395                              <1> ;SPECIAL BUFFER FUNCTIONS
   396                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   397                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   398                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   399                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   400                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   401                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   402                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   403                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   404                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   405                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   406                              <1> ;-----------------------------------------------------------------------------
   407                              <1> getBufForDataNoFile:
   408                              <1> ;Returns a buffer to use for disk data in rbx
   409                              <1> ;Requires a File Handle.
   410                              <1> ;Input: [workingDPB] = DPB to transact on
   411                              <1> ;       rax = Sector to transfer
   412                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   413 00000B2A 51                  <1>     push rcx
   414 00000B2B B108                <1>     mov cl, dataBuffer
   415 00000B2D 56                  <1>     push rsi
   416 00000B2E 57                  <1>     push rdi
   417 00000B2F 488B35(64C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   418 00000B36 E891FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   419 00000B3B 725F                <1>     jc getBufCommon.exit
   420 00000B3D 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   421 00000B45 EB55                <1>     jmp short getBufCommon.exit
   422                              <1> getBufForDirNoFile:
   423                              <1> ;Returns a buffer to use for disk dir data in rbx
   424                              <1> ;Requires a File Handle.
   425                              <1> ;Input: [workingDPB] = DPB to transact on
   426                              <1> ;       rax = Sector to transfer
   427                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   428 00000B47 51                  <1>     push rcx
   429 00000B48 B104                <1>     mov cl, dirBuffer
   430 00000B4A 56                  <1>     push rsi
   431 00000B4B 57                  <1>     push rdi
   432 00000B4C 488B35(64C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   433 00000B53 E874FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   434 00000B58 7242                <1>     jc getBufCommon.exit
   435 00000B5A 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   436 00000B62 EB38                <1>     jmp short getBufCommon.exit
   437                              <1> getBufForFat:
   438                              <1> ;Returns a buffer to use for fat data in rbx
   439                              <1> ;Input: [workingDPB] = DPB to transact on
   440                              <1> ;       rax = Sector to transfer
   441                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   442 00000B64 51                  <1>     push rcx
   443 00000B65 B102                <1>     mov cl, fatBuffer
   444 00000B67 EB03                <1>     jmp short getBufCommon2
   445                              <1> getBufForDOS:
   446                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   447                              <1> ;Input: [workingDPB] = DPB to transact on
   448                              <1> ;       rax = Sector to transfer
   449                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   450 00000B69 51                  <1>     push rcx
   451 00000B6A B101                <1>     mov cl, dosBuffer
   452                              <1> getBufCommon2:
   453 00000B6C 56                  <1>     push rsi
   454 00000B6D 57                  <1>     push rdi    ;Push rdi to preserve it
   455 00000B6E 488B35(64C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   456 00000B75 EB15                <1>     jmp short getBufCommon.makeReq
   457                              <1> getBufForDir:
   458                              <1> ;Returns a buffer to use for disk directory data in rbx
   459                              <1> ;Input: [currentSFT] = File to manipulate
   460                              <1> ;       rax = Sector to transfer
   461                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   462 00000B77 51                  <1>     push rcx
   463 00000B78 B104                <1>     mov cl, dirBuffer
   464 00000B7A EB03                <1>     jmp short getBufCommon
   465                              <1> getBufForData:
   466                              <1> ;Returns a buffer to use for disk data in rbx
   467                              <1> ;Requires a File Handle.
   468                              <1> ;Input: [currentSFT] = File to manipulate
   469                              <1> ;       rax = Sector to transfer
   470                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   471 00000B7C 51                  <1>     push rcx
   472 00000B7D B108                <1>     mov cl, dataBuffer
   473                              <1> getBufCommon:
   474 00000B7F 56                  <1>     push rsi
   475 00000B80 57                  <1>     push rdi
   476 00000B81 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   477 00000B88 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   478                              <1> .makeReq:
   479 00000B8C E83BFEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   480 00000B91 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   481                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   482                              <1>     ; flushed to the file!
   483                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   484                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   485                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   486 00000B93 F6C103              <1>     test cl, dosBuffer | fatBuffer
   487 00000B96 7504                <1>     jnz .exit
   488 00000B98 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   489                              <1> .exit:
   490 00000B9C 5F                  <1>     pop rdi
   491 00000B9D 5E                  <1>     pop rsi
   492 00000B9E 59                  <1>     pop rcx
   493                              <1>     return
    18                              <2> %%_ret:
    19 00000B9F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   494                              <1> 
   495                              <1> flushFile:
   496                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   497                              <1> ; FAT/DOS buffers to flush
   498                              <1> ; We flush and free, and set to head of chain before continuing to search
   499                              <1> ;Input: rdi = is the file (sft) we wish to flush
   500                              <1> ;Output: CF=NC => All ok
   501                              <1> ;        CF=CY => A sector failed, exit. 
   502 00000BA0 57                  <1>     push rdi
   503 00000BA1 56                  <1>     push rsi
   504                              <1>     ;First check if the file has been written to?
   505 00000BA2 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   506 00000BA8 7434                <1>     jz .exitNoFlush ;Exit without flushing
   507 00000BAA 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   508 00000BAD 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   509                              <1> .ffLoop:
   510 00000BB4 4881FFFFFFFFFF      <1>     cmp rdi, -1
   511 00000BBB 741B                <1>     je .exit
   512 00000BBD F6470907            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer | dirBuffer
   513 00000BC1 751E                <1>     jnz .found  ;Flush if either bit is set
   514 00000BC3 48817F1FFFFFFFFF    <1>     cmp qword [rdi + bufferHdr.owningFile], -1  ;If owning file is -1, flush too
   515 00000BCB 7414                <1>     je .found
   516 00000BCD 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   517 00000BD1 740E                <1>     je .found
   518 00000BD3 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   519 00000BD6 EBDC                <1>     jmp short .ffLoop
   520                              <1> .exit:
   521                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   522 00000BD8 66816605BFFF        <1>     and word [rsi + sft.wDeviceInfo], ~blokFileToFlush  ;Clear that bit!
   523                              <1> .exitNoFlush:
   524 00000BDE 5E                  <1>     pop rsi
   525 00000BDF 5F                  <1>     pop rdi
   526                              <1>     return
    18                              <2> %%_ret:
    19 00000BE0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   527                              <1> .found:
   528                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   529                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   530 00000BE1 E8C5FCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   531 00000BE6 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   532                              <1>     ;If the sector has been successfully flushed, then it
   533                              <1>     ; is no longer owned by that File so we mark the owner as none
   534 00000BE8 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   535 00000BF0 E8DEFCFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   536 00000BF5 EBBD                <1>     jmp short .ffLoop
    23                                  %include "./Source/Kernel/FAT/fat.asm"
    24                              <1> ;-----------------------------------:
    25                              <1> ;       File System routines        :
    26                              <1> ;-----------------------------------:
    27                              <1> getFATtype:
    28                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    29                              <1> ;Entry: rbp = DPB to ascertain FAT
    30                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    31 00000BF7 53                  <1>     push rbx
    32 00000BF8 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    33 00000BFB B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    34 00000C00 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    35 00000C06 730F                <1>     jae .exit
    36 00000C08 FFC9                <1>     dec ecx     ;FAT 12 marker
    37 00000C0A 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    38 00000C10 7205                <1>     jb .exit
    39 00000C12 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    40                              <1> .exit:
    41 00000C17 5B                  <1>     pop rbx
    42                              <1>     return
    18                              <2> %%_ret:
    19 00000C18 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    43                              <1> 
    44                              <1> clust2FATEntry:
    45                              <1> ;Converts a cluster number to a offset in the FAT
    46                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    47                              <1> ;        eax = Cluster number to look for
    48                              <1> ;Exit:   eax = Sector on disk of FAT 
    49                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    50                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    51 00000C19 53                  <1>     push rbx
    52 00000C1A 55                  <1>     push rbp
    53 00000C1B 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    54 00000C22 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    55 00000C25 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    56 00000C2B 731E                <1>     jae .fat32
    57 00000C2D 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    58 00000C33 7209                <1>     jb .fat12
    59                              <1> ;FAT16
    60 00000C35 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    61 00000C37 6801000000          <1>     push qword 1
    62 00000C3C EB15                <1>     jmp short .common
    63                              <1> .fat12:
    64 00000C3E 89C1                <1>     mov ecx, eax    ;ecx = eax
    65 00000C40 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    66 00000C42 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    67 00000C44 6800000000          <1>     push qword 0
    68 00000C49 EB08                <1>     jmp short .common
    69                              <1> .fat32:
    70 00000C4B 6802000000          <1>     push qword 2
    71 00000C50 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    72                              <1> .common:
    73                              <1> ;eax has the FAToffset
    74 00000C53 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    75 00000C57 31D2                <1>     xor edx, edx    ;edx = 0
    76 00000C59 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    77 00000C5B 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    78 00000C5F 01D8                <1>     add eax, ebx
    79 00000C61 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    80 00000C62 5D                  <1>     pop rbp
    81 00000C63 5B                  <1>     pop rbx
    82                              <1>     return
    18                              <2> %%_ret:
    19 00000C64 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    83                              <1> 
    84                              <1> getStartSectorOfCluster:
    85                              <1> ;Input: eax = Cluster Number
    86                              <1> ;       rbp = dpb pointer
    87                              <1> ;Output: rax = Starting Sector number for cluster
    88                              <1> ;Gives the data sector we are at in the current cluster
    89                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    90 00000C65 51                  <1>     push rcx
    91 00000C66 09C0                <1>     or eax, eax ;Zero upper dword
    92 00000C68 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    93                              <1> .fat32Root:
    94 00000C6A 482D02000000        <1>     sub rax, 2
    95 00000C70 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    96 00000C73 48D3E0              <1>     shl rax, cl
    97 00000C76 31C9                <1>     xor ecx, ecx
    98 00000C78 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    99 00000C7B 4801C8              <1>     add rax, rcx
   100                              <1>     ;rax now has the first sector of the current cluster
   101 00000C7E 59                  <1>     pop rcx
   102                              <1>     return
    18                              <2> %%_ret:
    19 00000C7F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   103                              <1> .rootDir:
   104 00000C80 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
   105 00000C83 E86FFFFFFF          <1>     call getFATtype
   106 00000C88 81F902000000        <1>     cmp ecx, 2
   107 00000C8E 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
   108                              <1>     ;Else rax has the first sector of the Root Dir
   109 00000C90 59                  <1>     pop rcx
   110                              <1>     return
    18                              <2> %%_ret:
    19 00000C91 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   111                              <1> 
   112                              <1> 
   113                              <1> getLastClusterInChain:
   114                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
   115                              <1> ;Input: eax = Cluster to start searching at
   116                              <1> ;Output: eax = Last cluster in chain
   117                              <1> ;If input eax = 0, output eax = 0
   118 00000C92 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   119                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C94 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   120 00000C96 53                  <1>     push rbx
   121                              <1> .lp:
   122 00000C97 89C3                <1>     mov ebx, eax
   123 00000C99 E8A1010000          <1>     call readFAT
   124 00000C9E 7209                <1>     jc .exit
   125 00000CA0 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   126 00000CA5 75F0                <1>     jne .lp
   127 00000CA7 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   128                              <1> .exit: 
   129 00000CA9 5B                  <1>     pop rbx
   130                              <1>     return
    18                              <2> %%_ret:
    19 00000CAA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   131                              <1> 
   132                              <1> getNumberOfClustersInChain:
   133                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   134                              <1> ;Input: eax = Cluster to start searching at
   135                              <1> ;Output: eax = Number of clusters in the chain
   136                              <1> ;If input eax = 0, output eax = 0
   137 00000CAB 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000CAD 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   139 00000CAF 51                  <1>     push rcx
   140 00000CB0 31C9                <1>     xor ecx, ecx
   141                              <1> .lp:
   142 00000CB2 FFC1                <1>     inc ecx
   143 00000CB4 E886010000          <1>     call readFAT
   144 00000CB9 7209                <1>     jc .exit
   145 00000CBB 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   146 00000CC0 75F0                <1>     jne .lp
   147 00000CC2 89C8                <1>     mov eax, ecx    ;Get the count
   148                              <1> .exit: 
   149 00000CC4 59                  <1>     pop rcx
   150                              <1>     return
    18                              <2> %%_ret:
    19 00000CC5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> getClusterInChain:
   153                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   154                              <1> ;If an EOC is encountered, then ecx will not be 
   155                              <1> ;Input: eax = Start Cluster to start searching from
   156                              <1> ;       ecx = Number of clusters to go forwards by;
   157                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   158                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   159                              <1> ;Also usual CF babble.
   160 00000CC6 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   161                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000CC8 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   162 00000CCA 53                  <1>     push rbx
   163 00000CCB 67E30F              <1>     jecxz .exit
   164                              <1> .lp:
   165 00000CCE 89C3                <1>     mov ebx, eax
   166 00000CD0 E86A010000          <1>     call readFAT
   167 00000CD5 7206                <1>     jc .exit
   168 00000CD7 FFC9                <1>     dec ecx
   169 00000CD9 75F3                <1>     jnz .lp
   170 00000CDB 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   171                              <1> .exit:
   172 00000CDD 5B                  <1>     pop rbx
   173                              <1>     return
    18                              <2> %%_ret:
    19 00000CDE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   174                              <1> 
   175                              <1> startNewChain:
   176                              <1> ;Working dpb must be set
   177                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   178                              <1> ;If CF=CY, hard error
   179 00000CDF 53                  <1>     push rbx
   180 00000CE0 56                  <1>     push rsi
   181 00000CE1 E853000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   182 00000CE6 7215                <1>     jc .exit    ;Disk read error?
   183 00000CE8 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   184 00000CED 740E                <1>     je .exit
   185 00000CEF BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   186 00000CF4 89C3                <1>     mov ebx, eax
   187 00000CF6 E8E3010000          <1>     call writeFAT   ;Propagate the CF 
   188 00000CFB 89D8                <1>     mov eax, ebx
   189                              <1> .exit:
   190 00000CFD 5E                  <1>     pop rsi
   191 00000CFE 5B                  <1>     pop rbx
   192                              <1>     return
    18                              <2> %%_ret:
    19 00000CFF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   193                              <1> 
   194                              <1> allocateClusters:
   195                              <1> ;Working dpb must be set. 
   196                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   197                              <1> ;       ebx = Cluster to link to the new cluster
   198                              <1> ;Output:    
   199                              <1> ;   CF=NC => Complete.
   200                              <1> ;   If eax = -1, then no more free clusters. 
   201                              <1> ;   CF=CY => Hard error, exit
   202                              <1> ; ecx always has number of allocated clusters
   203 00000D00 53                  <1>     push rbx
   204 00000D01 56                  <1>     push rsi
   205 00000D02 51                  <1>     push rcx    ;Save tfr count on stack
   206 00000D03 67E32B              <1>     jecxz .exit ;Allocating nothing? Exit
   207                              <1> .allocateLoop:
   208 00000D06 E82E000000          <1>     call findFreeCluster
   209 00000D0B 7224                <1>     jc .exit
   210 00000D0D 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   211 00000D12 741D                <1>     je .exit    ;If the cluster number is -1, return immediately
   212                              <1>     ;eax has first free cluster value to use
   213                              <1>     ;First we link the previous cluster to this cluster
   214 00000D14 BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   215 00000D19 E8C0010000          <1>     call writeFAT   ;Allocate this cluster first
   216 00000D1E 7211                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   217                              <1>     ;eax points to this allocated cluster
   218                              <1>     ;ebx points to the previous last cluster
   219 00000D20 89C6                <1>     mov esi, eax    ;New cluster as "value"
   220 00000D22 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   221 00000D24 E8B5010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   222 00000D29 7206                <1>     jc .exit
   223 00000D2B 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   224 00000D2D FFC9                <1>     dec ecx ;One less cluster allocated
   225 00000D2F 75D5                <1>     jnz .allocateLoop
   226                              <1> .exit:
   227 00000D31 5E                  <1>     pop rsi ;Pop the tfr count into esi
   228 00000D32 F7D9                <1>     neg ecx
   229 00000D34 01F1                <1>     add ecx, esi
   230 00000D36 5E                  <1>     pop rsi
   231 00000D37 5B                  <1>     pop rbx
   232                              <1>     return
    18                              <2> %%_ret:
    19 00000D38 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> findFreeCluster:
   235                              <1> ;Walks the FAT to find a free cluster and returns the 
   236                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   237                              <1> ;Works on the workingDPB
   238                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   239 00000D39 53                  <1>     push rbx
   240 00000D3A 52                  <1>     push rdx
   241 00000D3B 55                  <1>     push rbp
   242 00000D3C 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   243                              <1>     ;Use readFAT
   244                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   245                              <1>     ;If readFAT returns 0 then its a free cluster
   246 00000D43 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   247                              <1> .fatLoop:
   248 00000D48 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   249 00000D4A E8F0000000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   250 00000D4F 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   251 00000D51 85C0                <1>     test eax, eax   ;Is this cluster free?
   252 00000D53 7409                <1>     jz .exit    ;If yes, exit
   253 00000D55 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   254 00000D59 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   255 00000D5C 76EA                <1>     jbe .fatLoop
   256                              <1> .exit:
   257 00000D5E 89D8                <1>     mov eax, ebx
   258 00000D60 F8                  <1>     clc
   259                              <1> .exitFail:      ;Keep carry flag
   260 00000D61 5D                  <1>     pop rbp
   261 00000D62 5A                  <1>     pop rdx
   262 00000D63 5B                  <1>     pop rbx
   263                              <1>     return
    18                              <2> %%_ret:
    19 00000D64 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   264                              <1> 
   265                              <1> findFreeClusterData:
   266                              <1> ;Walks the FAT to find a free cluster and returns the 
   267                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   268                              <1> ;Also finds NumberOfFreeCLusters. Both fields get filled in the workingDPB
   269                              <1> ;Works on the workingDPB
   270                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   271 00000D65 53                  <1>     push rbx
   272 00000D66 52                  <1>     push rdx
   273 00000D67 55                  <1>     push rbp
   274 00000D68 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   275 00000D6F 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   276                              <1>     ;Mark dFirstFreeCluster as -1 and dNumberOfFreeClusters as 0
   277 00000D73 31D2                <1>     xor edx, edx
   278 00000D75 895531              <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], edx ;Zero this field
   279 00000D78 FFCA                <1>     dec edx
   280 00000D7A 89552D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], edx ;Set to -1, unknown (i.e. none)
   281                              <1>     ;Use readFAT
   282                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   283                              <1>     ;If readFAT returns 0 then its a free cluster
   284 00000D7D B802000000          <1>     mov eax, 2  ;Start with cluster 2
   285 00000D82 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   286                              <1> .fatLoop:
   287 00000D85 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   288 00000D87 E8B3000000          <1>     call readFAT
   289 00000D8C 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   290 00000D8E 85C0                <1>     test eax, eax   ;Is this cluster free?
   291 00000D90 750C                <1>     jne .fatProceed
   292 00000D92 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   293 00000D95 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   294 00000D9C 7410                <1>     je .fatFirst
   295                              <1> .fatProceed:
   296 00000D9E 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   297 00000DA2 39D0                <1>     cmp eax, edx
   298 00000DA4 76DF                <1>     jbe .fatLoop
   299                              <1> .exit:
   300 00000DA6 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   301 00000DA9 F8                  <1>     clc
   302                              <1> .exitFail:      ;Keep carry flag
   303 00000DAA 5D                  <1>     pop rbp
   304 00000DAB 5A                  <1>     pop rdx
   305 00000DAC 5B                  <1>     pop rbx
   306                              <1>     return
    18                              <2> %%_ret:
    19 00000DAD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   307                              <1> .fatFirst:
   308 00000DAE 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   309 00000DB1 EBEB                <1>     jmp short .fatProceed
   310                              <1> 
   311                              <1> getNextSectorOfFile:
   312                              <1> ;This function will read the next sector for a file into a buffer.
   313                              <1> ;If the next sector to be read lives in the next cluster, it will update
   314                              <1> ; the vars appropriately
   315                              <1> ;
   316                              <1> ;Input: rbp = dpb pointer
   317                              <1> ;Output:
   318                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   319                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   320                              <1> ;       CF=CY => Critical error occurred and was FAILed
   321                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   322                              <1> ; next cluster and read first sector 
   323                              <1>     ;Check if we need to go to next cluster
   324 00000DB3 8A05(AEC60300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   325 00000DB9 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   326 00000DBC 7416                <1>     je .gotoNextCluster
   327                              <1>     ;Goto next sector in same cluster
   328 00000DBE FE05(AEC60300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   329 00000DC4 48FF05(AFC60300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   330 00000DCB 488B05(AFC60300)    <1>     mov rax, qword [currSectD]
   331                              <1> .exitOK:
   332 00000DD2 F8                  <1>     clc
   333                              <1> .exitFail:
   334                              <1>     return
    18                              <2> %%_ret:
    19 00000DD3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   335                              <1> .gotoNextCluster:
   336 00000DD4 8B05(A6C60300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   337 00000DDA E860000000          <1>     call readFAT
   338 00000DDF 72F2                <1>     jc .exitFail
   339                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   340 00000DE1 3DFFFFFFFF          <1>     cmp eax, -1
   341 00000DE6 74EA                <1>     je .exitOK
   342                              <1> ;Update the new cluster and sector information
   343 00000DE8 8905(A6C60300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   344 00000DEE FF05(A2C60300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   345 00000DF4 E86CFEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   346 00000DF9 488905(AFC60300)    <1>     mov qword [currSectD], rax  ;Save it
   347 00000E00 C605(AEC60300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   348 00000E07 EBC9                <1>     jmp short .exitOK
   349                              <1> 
   350                              <1> unlinkFAT:
   351                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   352                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   353                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   354                              <1> ; cluster must be set to EOC before this proc is called.
   355                              <1> ;Stops at first invalid cluster number.
   356                              <1> ;
   357                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   358                              <1> ;       rbp = Current DPB to use for disk
   359                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   360                              <1> 
   361 00000E09 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   362 00000E0A 56                  <1>     push rsi
   363 00000E0B E80A000000          <1>     call truncateFAT    ;Preserved eax
   364 00000E10 31F6                <1>     xor esi, esi  ;Free first cluster too
   365 00000E12 E8C7000000          <1>     call writeFAT
   366 00000E17 5E                  <1>     pop rsi
   367 00000E18 58                  <1>     pop rax
   368                              <1>     return
    18                              <2> %%_ret:
    19 00000E19 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   369                              <1> 
   370                              <1> truncateFAT:
   371                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   372                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   373                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   374                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   375                              <1> ;Stops at first invalid cluster number.
   376                              <1> ;
   377                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   378                              <1> ;       rbp = Current DPB to use for disk
   379                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   380 00000E1A 50                  <1>     push rax
   381 00000E1B 53                  <1>     push rbx
   382 00000E1C 56                  <1>     push rsi
   383 00000E1D 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   384                              <1> .lp:
   385 00000E1F E81B000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   386 00000E24 7215                <1>     jc .exit    ;Error exit
   387 00000E26 3DFFFFFFFF          <1>     cmp eax, -1 ;End of chain?
   388 00000E2B 740E                <1>     je .exit
   389 00000E2D 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   390 00000E2E 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   391 00000E30 E8A9000000          <1>     call writeFAT
   392 00000E35 7204                <1>     jc .exit    ;Error exit
   393 00000E37 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   394 00000E39 EBE4                <1>     jmp short .lp
   395                              <1> .exit:
   396 00000E3B 5E                  <1>     pop rsi
   397 00000E3C 5B                  <1>     pop rbx
   398 00000E3D 58                  <1>     pop rax
   399                              <1>     return
    18                              <2> %%_ret:
    19 00000E3E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   400                              <1> readFAT:
   401                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   402                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   403                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   404                              <1> ;       rbp = DPB
   405                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   406                              <1> ;If carry set, getBuffer failed!
   407 00000E3F 53                  <1>     push rbx
   408 00000E40 51                  <1>     push rcx
   409 00000E41 52                  <1>     push rdx
   410 00000E42 57                  <1>     push rdi
   411 00000E43 55                  <1>     push rbp
   412 00000E44 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   413 00000E46 E8CEFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   414                              <1>     ;and FAT type in ecx
   415 00000E4B E814FDFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   416 00000E50 7237                <1>     jc .exitFail
   417                              <1>     ;Check if FAT 12, 16, 32
   418 00000E52 85C9                <1>     test ecx, ecx
   419 00000E54 7439                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   420 00000E56 F7C101000000        <1>     test ecx, 1
   421 00000E5C 7413                <1>     jz .goToNextClusterFat32
   422                              <1>     ;Here we handle FAT16
   423 00000E5E 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   424 00000E63 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   425 00000E68 721E                <1>     jb .exit
   426 00000E6A B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   427 00000E6F EB17                <1>     jmp short .exit
   428                              <1> .goToNextClusterFat32:
   429 00000E71 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   430 00000E75 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   431 00000E7A 7207                <1>     jb .validCluster32   
   432 00000E7C B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   433 00000E81 EB05                <1>     jmp short .exit
   434                              <1> .validCluster32:
   435 00000E83 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   436                              <1> .exit:
   437 00000E88 F8                  <1>     clc
   438                              <1> .exitFail:
   439 00000E89 5D                  <1>     pop rbp
   440 00000E8A 5F                  <1>     pop rdi
   441 00000E8B 5A                  <1>     pop rdx
   442 00000E8C 59                  <1>     pop rcx
   443 00000E8D 5B                  <1>     pop rbx
   444                              <1>     return
    18                              <2> %%_ret:
    19 00000E8E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   445                              <1> .gotoNextClusterFat12:
   446                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   447                              <1> ;eax has the sector number of the FAT
   448                              <1> ;edx has byte offset into the sector
   449                              <1> ;edi has current cluster number
   450                              <1> ;rbx has ptr to buffer header
   451 00000E8F F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   452 00000E95 742C                <1>     jz .gotoNextClusterFat12Even
   453                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   454 00000E97 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   455 00000E9B 29D1                <1>     sub ecx, edx
   456 00000E9D FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   457 00000E9F 7518                <1>     jnz .gotoNextClusterFat12NoCross
   458                              <1>     ;Boundary cross, build entry properly
   459 00000EA1 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   460 00000EA6 FFC0                <1>     inc eax ;Get next FAT sector
   461 00000EA8 53                  <1>     push rbx
   462 00000EA9 E8B6FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   463 00000EAE 72D9                <1>     jc .exitFail
   464 00000EB0 58                  <1>     pop rax ;Get bl in al, the last entry from the previous buffer
   465 00000EB1 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   466 00000EB4 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   467 00000EB7 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   468                              <1> .gotoNextClusterFat12NoCross:
   469 00000EB9 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   470 00000EBE C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   471 00000EC1 EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   472                              <1> .gotoNextClusterFat12Even:
   473                              <1>     ;Here the cluster is even and can't cross a sector boundary
   474 00000EC3 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   475 00000EC8 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   476                              <1> .checkIfLastFAT12Cluster:
   477 00000ECD 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   478 00000ED2 72B4                <1>     jb .exit         ;If so, exit with it in eax
   479 00000ED4 B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   480 00000ED9 E9AAFFFFFF          <1>     jmp .exit
   481                              <1> 
   482                              <1> writeFAT:
   483                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   484                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   485                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   486                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   487                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   488 00000EDE 53                  <1>     push rbx
   489 00000EDF 51                  <1>     push rcx
   490 00000EE0 52                  <1>     push rdx
   491 00000EE1 56                  <1>     push rsi
   492 00000EE2 57                  <1>     push rdi
   493 00000EE3 55                  <1>     push rbp
   494 00000EE4 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   495 00000EE6 E82EFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   496                              <1>     ;and FAT type in ecx
   497 00000EEB E874FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   498 00000EF0 7223                <1>     jc .exitFail
   499                              <1>     ;Check if FAT 12, 16, 32
   500 00000EF2 85C9                <1>     test ecx, ecx
   501 00000EF4 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   502 00000EF6 F7C101000000        <1>     test ecx, 1
   503 00000EFC 7407                <1>     jz .goToNextClusterFat32
   504                              <1>     ;Here we handle FAT16
   505 00000EFE 66897C1330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], di ;Store the value
   506 00000F03 EB0A                <1>     jmp short .exit
   507                              <1> .goToNextClusterFat32:
   508 00000F05 81E7FFFFFF0F        <1>     and edi, 0FFFFFFFh  ;Zero upper nybble
   509 00000F0B 897C1330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], edi
   510                              <1> .exit:
   511 00000F0F E8A8FAFFFF          <1>     call setBufferDirty
   512 00000F14 F8                  <1>     clc
   513                              <1> .exitFail:
   514 00000F15 5D                  <1>     pop rbp
   515 00000F16 5F                  <1>     pop rdi
   516 00000F17 5E                  <1>     pop rsi
   517 00000F18 5A                  <1>     pop rdx
   518 00000F19 59                  <1>     pop rcx
   519 00000F1A 5B                  <1>     pop rbx
   520                              <1>     return
    18                              <2> %%_ret:
    19 00000F1B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   521                              <1> .gotoNextClusterFat12:
   522                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   523                              <1> ;eax has the sector number of the FAT
   524                              <1> ;edx has byte offset into the sector
   525                              <1> ;edi has current cluster number
   526                              <1> ;rbx has ptr to buffer header
   527 00000F1C 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   528 00000F22 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   529 00000F28 7445                <1>     jz .gotoNextClusterFat12Even
   530                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   531 00000F2A 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   532 00000F2E 29D1                <1>     sub ecx, edx
   533 00000F30 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   534 00000F32 752C                <1>     jnz .gotoNextClusterFat12NoCross
   535                              <1>     ;Boundary cross, build entry properly
   536                              <1>     ;Replace the high nybble of the low byte 
   537 00000F34 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   538 00000F39 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   539 00000F3F C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   540 00000F42 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   541 00000F44 C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   542 00000F47 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   543 00000F4B E86CFAFFFF          <1>     call setBufferDirty
   544 00000F50 FFC0                <1>     inc eax ;Get next FAT sector
   545 00000F52 E80DFCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   546 00000F57 72BC                <1>     jc .exitFail
   547 00000F59 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   548 00000F5B 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   549 00000F5E EBAF                <1>     jmp short .exit
   550                              <1> .gotoNextClusterFat12NoCross:
   551 00000F60 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   552 00000F65 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   553 00000F6A C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   554 00000F6D EB0A                <1>     jmp short .fat12common
   555                              <1> .gotoNextClusterFat12Even:
   556                              <1>     ;Here the cluster is even and can't cross a sector boundary
   557 00000F6F 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   558 00000F74 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   559                              <1> .fat12common:
   560 00000F79 09F0                <1>     or eax, esi     ;Add the new entry bits
   561 00000F7B 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   562 00000F80 E98AFFFFFF          <1>     jmp .exit
    24                                  %include "./Source/Kernel/FAT/findfile.asm"
    25                              <1> ;Generic Find First and Find Next functions here
    26                              <1> findNextMain:
    27 00000F85 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
    28 00000F8C F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
    29 00000F8F 7408                <1>     jz .notNet
    30 00000F91 B81C110000          <1>     mov eax, 0111Ch ;Netowrk find next
    31 00000F96 CD4F                <1>     int 4Fh
    32                              <1>     return  ;Return propagating the error code
    18                              <2> %%_ret:
    19 00000F98 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    33                              <1> .notNet:
    34 00000F99 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    35 00000F9B FEC0                <1>     inc al  ;Convert into 1 based number
    36 00000F9D E89E460000          <1>     call dosCrit1Enter
    37 00000FA2 E869420000          <1>     call setDrive   ;Set CDS and current drive vars
    38 00000FA7 720C                <1>     jc .critError   ;Return error if this fails
    39 00000FA9 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] 
    40 00000FB0 E8653F0000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    41                              <1> .critError:
    42 00000FB5 E890460000          <1>     call dosCrit1Exit
    43                              <1>     retc    ;Return error if this fails
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000FBA 72DC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    44 00000FBC E801000000          <1>     call searchMoreDir
    45                              <1>     return
    18                              <2> %%_ret:
    19 00000FC1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> searchMoreDir:
    47                              <1> ;The three directory variables are set up from the ffblock. 
    48                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    49                              <1> ;Current DTA is also used to contain the ff block address
    50                              <1> ;All registers can be trashed
    51 00000FC2 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    52                              <1>     ;First setup dirClustA and dirSect vars
    53 00000FC9 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
    54 00000FD0 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    55 00000FD3 8805(56C60300)      <1>     mov byte [searchAttr], al   ;And save it
    56 00000FD9 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    57 00000FDC 8905(D6C60300)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    58 00000FE2 8905(D2C60300)      <1>     mov dword [dirClustPar], eax
    59                              <1>     ;Get number of 32 byte entries in a sector
    60 00000FE8 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    61                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    62 00000FEB C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    63                              <1>     ;Now get bytes per cluster
    64 00000FEE 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    65 00000FF0 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    66 00000FF4 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    67 00000FF8 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    68 00000FFA 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    69 00000FFC 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    70 00000FFE 31D2                <1>     xor edx, edx
    71 00001000 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    72                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    73                              <1>     ;edx has byte offset into cluster (or Root dir)
    74 00001002 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    75                              <1>     ;Now compute sector offset into cluster
    76 00001004 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    77 00001008 89D0                <1>     mov eax, edx    ;Move offset into cluster
    78 0000100A 31D2                <1>     xor edx, edx
    79 0000100C F7F1                <1>     div ecx 
    80                              <1>     ;eax now has sector offset into cluster (or root dir)
    81                              <1>     ;edx has byte offset into sector 
    82 0000100E 668905(DAC60300)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    83 00001015 C1EA05              <1>     shr edx, 5 ;Divide edx by 32 to get Dir Entry
    84 00001018 8915(DCC60300)      <1>     mov dword [dirEntry], edx
    85 0000101E 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    86 00001024 85C0                <1>     test eax, eax   ;If we at cluster 0, we are in old style root dir
    87 00001026 7461                <1>     jz .oldFat
    88                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    89 00001028 89D9                <1>     mov ecx, ebx
    90 0000102A 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    91                              <1> .fatlp:
    92 0000102D E80DFEFFFF          <1>     call readFAT
    93 00001032 3DFFFFFFFF          <1>     cmp eax, -1
    94 00001037 7464                <1>     je .errorExit
    95 00001039 FFC9                <1>     dec ecx
    96 0000103B 75F0                <1>     jnz .fatlp
    97 0000103D 8905(D6C60300)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    98                              <1> .skipFatWalk:
    99 00001043 488D0597000000      <1>     lea rax, searchDir.nextEp
   100 0000104A 50                  <1>     push rax    ;Push the return address onto stack
   101 0000104B 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]
   102 00001051 E80FFCFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   103 00001056 0FB71D(DAC60300)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   104 0000105D 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   105                              <1> .common:
   106 00001060 E804FBFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   107 00001065 0F8211010000        <1>     jc searchDir.hardError
   108 0000106B E80F010000          <1>     call adjustDosDirBuffer  ;rbx has the buffer ptr for this dir sector
   109 00001070 8B05(DCC60300)      <1>     mov eax, dword [dirEntry]
   110 00001076 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
   111 00001078 C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
   112 0000107B 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
   113                              <1>     ;We continue AS IF this entry was bad
   114                              <1>     ;Now setup al as upon normal entry 
   115 0000107E 8A05(56C60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   116 00001084 E95B010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
   117                              <1>     ;The return address on the stack will return to the ep's pushed
   118                              <1> .oldFat:
   119                              <1> ;Old FAT 12/16 root dirs fall thru here only
   120 00001089 488D05D0000000      <1>     lea rax, searchDir.oldNextEP
   121 00001090 50                  <1>     push rax    ;Push return address onto the stack
   122 00001091 0FB705(DAC60300)    <1>     movzx eax, word [dirSect]   ;Get the root directory sector offset
   123 00001098 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   124 0000109B EBC3                <1>     jmp short .common
   125                              <1> .errorExit:
   126 0000109D F9                  <1>     stc
   127                              <1>     return
    18                              <2> %%_ret:
    19 0000109E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   128                              <1> searchDir:
   129                              <1> ;Called in a level 1 critical section. 
   130                              <1> ;The directory variables are set and fcbName has the pattern to match
   131                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   132                              <1> ;All registers can be trashed
   133                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   134                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   135                              <1> 
   136                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   137                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   138 0000109F 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   139 000010A6 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   140 000010AC 7408                <1>     jz .notNet
   141 000010AE B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   142 000010B3 CD4F                <1>     int 4fh
   143                              <1>     return
    18                              <2> %%_ret:
    19 000010B5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> .notNet:
   145 000010B6 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   146 000010BD 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   147 000010C3 85C0                <1>     test eax, eax
   148 000010C5 747E                <1>     jz .oldRoot
   149 000010C7 E899FBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   150                              <1> .sectorLoop:
   151 000010CC E898FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   152 000010D1 0F82A5000000        <1>     jc .hardError
   153 000010D7 E8A3000000          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   154                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   155 000010DC E8B2000000          <1>     call findInBuffer
   156                              <1> .nextEp:
   157                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000010E1 73D2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   158 000010E3 0F848F000000        <1>     jz .fnfError    ;CF=CY AND ZF=ZE => File not found
   159                              <1>     ;If ZF=ZE then fnfError (i.e. we hit an entry starting with 00)
   160                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   161                              <1>     ;IF however, the next cluster is -1, then we return fail
   162 000010E9 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   163 000010EF 8905(A6C60300)      <1>     mov dword [currClustD], eax
   164 000010F5 668B05(DAC60300)    <1>     mov ax, word [dirSect]
   165 000010FC 8805(AEC60300)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   166 00001102 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   167 00001106 488905(AFC60300)    <1>     mov qword [currSectD], rax  
   168 0000110D C705(A2C60300)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   168 00001115 0000                <1>
   169 00001117 E897FCFFFF          <1>     call getNextSectorOfFile
   170 0000111C 725E                <1>     jc .hardError
   171 0000111E 3DFFFFFFFF          <1>     cmp eax, -1
   172 00001123 7453                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   173 00001125 66FF05(DAC60300)    <1>     inc word [dirSect]  ;Goto next sector
   174 0000112C 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   175 00001132 3B05(A6C60300)      <1>     cmp eax, dword [currClustD] ;Did it change?
   176 00001138 7492                <1>     je .sectorLoop  ;If not, we advanced sectors only
   177 0000113A 66C705(DAC60300)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   177 00001142 00                  <1>
   178 00001143 EB87                <1>     jmp short .sectorLoop 
   179                              <1> 
   180                              <1> .oldRoot:
   181                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   182                              <1> ; one large contiguous cluster.
   183                              <1> ;   ecx = Number of entries per sector
   184                              <1> .oldSectorLp:
   185 00001145 0FB705(DAC60300)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   186 0000114C 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   187 0000114F E815FAFFFF          <1>     call getBufForDOS
   188 00001154 7226                <1>     jc .hardError
   189 00001156 E824000000          <1>     call adjustDosDirBuffer      ;rbx has the buffer pointer for this dir sector
   190 0000115B E833000000          <1>     call findInBuffer
   191                              <1> .oldNextEP:
   192                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00001160 7201                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00001162 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   193 00001163 7413                <1>     jz .fnfError
   194 00001165 66FF05(DAC60300)    <1>     inc word [dirSect]  ;Goto next sector in directory
   195 0000116C 8B4509              <1>     mov eax, dword [rbp + dpb.wNumberRootDirEntries]
   196 0000116F 663905(DCC60300)    <1>     cmp word [dirEntry], ax ;Have we reached the last dir entry?
   197 00001176 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   198                              <1> .fnfError:
   199 00001178 B012                <1>     mov al, errNoFil
   200 0000117A F9                  <1>     stc
   201                              <1>     return
    18                              <2> %%_ret:
    19 0000117B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   202                              <1> .hardError:
   203 0000117C B0FF                <1>     mov al, -1
   204                              <1>     return
    18                              <2> %%_ret:
    19 0000117E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   205                              <1> adjustDosDirBuffer:
   206 0000117F 804B0904            <1>     or byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   207 00001183 806309FE            <1>     and byte [rbx + bufferHdr.bufferFlags], ~dosBuffer
   208 00001187 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   209 0000118B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   210 0000118F C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   211                              <1>     return
    18                              <2> %%_ret:
    19 00001192 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   212                              <1> 
   213                              <1> findInBuffer:
   214                              <1> ;Input: ecx = Number of entries in sector buffer to look for
   215                              <1> ;       rsi = Sector buffer data area
   216                              <1> ;Output: CF=CY => No entries found
   217                              <1> ;        ZF=NE => Keep searching in subsequent directories
   218                              <1> ;        ZF=ZE => End of directory reached early, stop
   219                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   220                              <1> ;        rsi = Points to start of the disk buffer directory entry
   221 00001193 8A05(56C60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   222 00001199 E899000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   223                              <1> .searchMainLp:
   224                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   225 0000119E 8A25(62C60300)      <1>     mov ah, byte [delChar]
   226 000011A4 803E00              <1>     cmp byte [rsi], 00h
   227 000011A7 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   228 000011A9 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   229 000011AB 750F                <1>     jne .notLookingForEmpty
   230                              <1> .emptySlot:
   231                              <1> ;Here we check if we are looking for an empty directory entry or
   232                              <1> ; we have reached the end of the file (if the first byte is 00h)
   233                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   234 000011AD 3A25(DBC50300)      <1>     cmp ah, byte [fcbName] 
   235                              <1>     rete    ;Return if equal (CF=NC too)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000011B3 74DD                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   236                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   237 000011B5 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   238 000011B8 752A                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   239 000011BA F9                  <1>     stc
   240                              <1>     return
    18                              <2> %%_ret:
    19 000011BB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   241                              <1> .notLookingForEmpty:
   242 000011BC 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   243 000011BF 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   244 000011C2 803D(CAC30300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   245 000011C9 7430                <1>     je .exclusiveDir
   246 000011CB 80FC08              <1>     cmp ah, dirVolumeID
   247 000011CE 7432                <1>     je .volFile
   248 000011D0 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   249 000011D2 7710                <1>     ja .nextEntry
   250                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   251                              <1> .scanName:
   252 000011D4 56                  <1>     push rsi
   253 000011D5 488D3D(DBC50300)    <1>     lea rdi, fcbName ;Goto name template to search for
   254 000011DC E83E000000          <1>     call .nameCompare
   255 000011E1 5E                  <1>     pop rsi
   256 000011E2 7424                <1>     je .searchEntryFound
   257                              <1> .nextEntry:
   258                              <1> ;Go to next entry
   259 000011E4 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   260 000011EB FF05(DCC60300)      <1>     inc dword [dirEntry] ;And denote that in variable
   261 000011F1 FFC9                <1>     dec ecx
   262 000011F3 75A9                <1>     jnz .searchMainLp
   263                              <1> .badExit:
   264 000011F5 31C0                <1>     xor eax, eax
   265 000011F7 FFC0                <1>     inc eax ;Clear ZF
   266 000011F9 F9                  <1>     stc
   267                              <1>     return
    18                              <2> %%_ret:
    19 000011FA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   268                              <1> .exclusiveDir:
   269                              <1> ;Used when going down a path, dir bit simply need be set
   270 000011FB F6C410              <1>     test ah, dirDirectory
   271 000011FE 75D4                <1>     jnz .scanName
   272 00001200 EBE2                <1>     jmp short .nextEntry
   273                              <1> 
   274                              <1> .volFile:
   275 00001202 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   276 00001204 74CE                <1>     je .scanName       ;If so, scan the name agrees
   277 00001206 EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   278                              <1> 
   279                              <1> .searchEntryFound:
   280                              <1> ;Here a good entry was found!
   281 00001208 56                  <1>     push rsi
   282 00001209 57                  <1>     push rdi
   283 0000120A 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   284 0000120C 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   285 00001213 B904000000          <1>     mov ecx, 32/8
   286 00001218 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   287 0000121B 5F                  <1>     pop rdi
   288 0000121C 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   289 0000121D F8                  <1>     clc
   290                              <1>     return
    18                              <2> %%_ret:
    19 0000121E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   291                              <1> 
   292                              <1> .nameCompare:
   293                              <1> ;Input: rsi = source string
   294                              <1> ;       rdi = string template to compare against
   295                              <1> ;Output: ZF=ZE => Strings are ok
   296                              <1> ;        ZF=NZ => Strings not ok
   297                              <1> ;Accepts wildcards. Trashes al
   298 0000121F 51                  <1>     push rcx
   299 00001220 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   300                              <1> .ncLp:
   301 00001222 81F90B000000        <1>     cmp ecx, 11
   302 00001228 740B                <1>     je .ncExit
   303 0000122A FFC1                <1>     inc ecx
   304 0000122C A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   305 0000122D 74F3                <1>     je .ncLp    ;If equal, keep going
   306 0000122F 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   307 00001233 74ED                <1>     je .ncLp
   308                              <1> .ncExit:
   309 00001235 59                  <1>     pop rcx
   310                              <1>     return
    18                              <2> %%_ret:
    19 00001236 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   311                              <1> 
   312                              <1> adjustSearchAttr:
   313                              <1> ;Converts the byte to a system only if the bit is set
   314                              <1> ;Input: eax = User selected search mask
   315                              <1> ;Output: eax = Modified search mask
   316 00001237 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   317 0000123C A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   318                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001241 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   319 00001243 B808000000          <1>     mov eax, dirVolumeID
   320                              <1>     return
    18                              <2> %%_ret:
    19 00001248 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   321                              <1> 
   322                              <1> asciiToFCB:
   323                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   324                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   325                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   326                              <1> ;Name is space padded.
   327                              <1> ;Input: rsi = ASCII string buffer
   328                              <1> ;       rdi = FCB name buffer
   329                              <1> ;Output: al = Char that terminated the source string 
   330 00001249 53                  <1>     push rbx    
   331 0000124A 57                  <1>     push rdi
   332 0000124B B90B000000          <1>     mov ecx, 11
   333 00001250 B020                <1>     mov al, " "
   334 00001252 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   335 00001254 5F                  <1>     pop rdi
   336 00001255 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   337                              <1> .processName:
   338 00001258 AC                  <1>     lodsb   ;Get the char in al
   339 00001259 E8B4400000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   340 0000125E 84C0                <1>     test al, al
   341 00001260 742D                <1>     jz .exit
   342                              <1>     ;Test if the char is valid
   343 00001262 E8E3410000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   344 00001267 7426                <1>     jz .exit    ;If the char invalid, consider it a terminator
   345 00001269 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   346 0000126B 7407                <1>     je .extSpace
   347 0000126D 3C2E                <1>     cmp al, "."
   348 0000126F 740C                <1>     je .ext
   349 00001271 AA                  <1>     stosb   ;Store the char
   350 00001272 EBE4                <1>     jmp short .processName
   351                              <1> .extSpace:
   352                              <1> ;Now we scan for a period in the name
   353 00001274 AC                  <1>     lodsb   ;Get a char and increase rsi
   354 00001275 84C0                <1>     test al, al
   355 00001277 7416                <1>     jz .exit
   356 00001279 3C2E                <1>     cmp al, "."     ;If al is not a period...
   357 0000127B 75F7                <1>     jne .extSpace   ; keep searching
   358                              <1> .ext:
   359 0000127D 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   360                              <1> .processExt:
   361 00001281 AC                  <1>     lodsb
   362 00001282 84C0                <1>     test al, al
   363 00001284 7409                <1>     jz .exit
   364 00001286 3C20                <1>     cmp al, " "
   365 00001288 7405                <1>     je .exit
   366 0000128A AA                  <1>     stosb
   367 0000128B EBF4                <1>     jmp short .processExt
   368                              <1> .exitBadChar:
   369 0000128D 30C0                <1>     xor al, al  ;Return a null terminator
   370                              <1> .exit:
   371 0000128F 5B                  <1>     pop rbx
   372                              <1>     return
    18                              <2> %%_ret:
    19 00001290 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> FCBToAsciiz:
   375                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   376                              <1> ;Name is space padded too
   377                              <1> ;Input: rsi = FCB name buffer
   378                              <1> ;       rdi = ASCIIZ string buffer
   379 00001291 B908000000          <1>     mov ecx, 8
   380 00001296 F3A4                <1>     rep movsb   ;Move the name over
   381                              <1> .scanNameSpace:
   382 00001298 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   383 0000129C 750D                <1>     jne .ext
   384 0000129E 48FFCF              <1>     dec rdi
   385 000012A1 FFC1                <1>     inc ecx
   386 000012A3 81F908000000        <1>     cmp ecx, 8
   387 000012A9 72ED                <1>     jb .scanNameSpace
   388                              <1> .ext:
   389 000012AB 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   390 000012B0 7506                <1>     jne .validExt
   391 000012B2 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   392 000012B6 7415                <1>     je .exit
   393                              <1> .validExt:
   394 000012B8 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   395 000012BA AA                  <1>     stosb
   396 000012BB B903000000          <1>     mov ecx, 3
   397 000012C0 F3A4                <1>     rep movsb   ;Move the three extension chars over
   398                              <1> .scanExtSpace:
   399 000012C2 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   400 000012C6 7505                <1>     jne .exit
   401 000012C8 48FFCF              <1>     dec rdi
   402 000012CB EBF5                <1>     jmp short .scanExtSpace
   403                              <1> .exit:
   404 000012CD 31C0                <1>     xor eax, eax
   405 000012CF AA                  <1>     stosb   ;Store a null at the end
   406                              <1>     return
    18                              <2> %%_ret:
    19 000012D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   407                              <1> 
   408                              <1> setupFFBlock:
   409                              <1> ;Sets up the find first block for the search
   410                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   411 000012D1 50                  <1>     push rax
   412 000012D2 53                  <1>     push rbx
   413 000012D3 56                  <1>     push rsi
   414 000012D4 57                  <1>     push rdi
   415 000012D5 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   416 000012D8 8A05(56C60300)      <1>     mov al, byte [searchAttr]
   417 000012DE 243F                <1>     and al, 3Fh ;Clear upper two bits
   418 000012E0 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   419 000012E3 0FB605(63C60300)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   420 000012EA 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   421                              <1>     ;xchg bx, bx
   422 000012EC 488D35(DBC50300)    <1>     lea rsi, fcbName
   423 000012F3 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   424 000012F7 57                  <1>     push rdi
   425 000012F8 48B820202020202020- <1>     mov rax, "        "
   425 00001301 20                  <1>
   426 00001302 48AB                <1>     stosq
   427 00001304 66AB                <1>     stosw
   428 00001306 AA                  <1>     stosb
   429 00001307 5F                  <1>     pop rdi
   430 00001308 48A5                <1>     movsq   ;Move 8 chars
   431 0000130A 66A5                <1>     movsw   ;Move 2 chars
   432 0000130C A4                  <1>     movsb   ;Move the final char
   433                              <1> 
   434 0000130D 8B05(DCC60300)      <1>     mov eax, dword [dirEntry]
   435 00001313 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   436 00001316 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]
   437 0000131C 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   438 0000131F 8A05(C6C50300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   439 00001325 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   440 00001328 8B05(D1C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   441 0000132E 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   442 00001331 8B05(D7C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   443 00001337 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   444 0000133A 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   445 0000133E 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   446 00001345 E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   447                              <1> 
   448 0000134A 5F                  <1>     pop rdi
   449 0000134B 5E                  <1>     pop rsi
   450 0000134C 5B                  <1>     pop rbx
   451 0000134D 58                  <1>     pop rax
   452                              <1>     return
    18                              <2> %%_ret:
    19 0000134E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   453                              <1> 
   454                              <1> getDrvLetterFromPath:   ;Int 4Fh, AX=121Ah
   455                              <1> ;Gets the drive letter for the path in al
   456                              <1> ;Input: rsi = Buffer to process
   457                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   458                              <1> ;       ZF=ZE and al = 0 => Null path
   459                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   460                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   461                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   462 0000134F 30C0                <1>     xor al, al
   463 00001351 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   464                              <1>     retz    ;Return if a null path
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001354 74F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   465 00001356 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   466                              <1>     retne   ;If not equal, Relative path or network path
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000135A 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   467 0000135C 66AD                <1>     lodsw   ;Get first word, rsi += 2
   468                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   469 0000135E 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   470 00001360 2C60                <1>     sub al, 60h
   471                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001362 75EA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   472 00001364 B0FF                <1>     mov al, -1  ;Else not a valid drive number
   473                              <1>     return
    18                              <2> %%_ret:
    19 00001366 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   474                              <1> canonicaliseFileName:
   475                              <1> ;Always trying to build and qualify a full pathname
   476                              <1> ;Does getPath without hitting the disk
   477 00001367 B0FF                <1>     mov al, -1
   478 00001369 8805(CAC30300)      <1>     mov byte [fileDirFlag], al  
   479 0000136F 8805(5BC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   480 00001375 48893D(7FC50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   481 0000137C FEC0                <1>     inc al  ;make al = 0
   482 0000137E 8805(8FC50300)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   483 00001384 EB21                <1>     jmp short getPath.epAlt
   484                              <1> getDirPath:
   485 00001386 30C0                <1>     xor al, al   ;Set to Directory
   486 00001388 EB02                <1>     jmp short getPath
   487                              <1> getFilePath:
   488 0000138A B0FF                <1>     mov al, -1  ;Set to File
   489                              <1> getPath:
   490                              <1> ;Determines whether the path is spliced or not and transfers the chars
   491                              <1> ; from the user buffer into an internal buffer, normalising them.
   492                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   493                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   494                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   495                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   496                              <1> ; we let it do its thing and return.
   497                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   498                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   499                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   500                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   501                              <1> ; (converted from using machine name by the net client program).
   502                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   503                              <1> ; was good.
   504                              <1> ;Called with:
   505                              <1> ; rdi = SDA Buffer for filename
   506                              <1> ; rsi = Potentially unqualified filename
   507                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   508 0000138C 8805(CAC30300)      <1>     mov byte [fileDirFlag], al  
   509 00001392 B0FF                <1>     mov al, -1
   510 00001394 8805(5BC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   511 0000139A 48893D(7FC50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   512 000013A1 8805(8FC50300)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   513                              <1> .epAlt:
   514 000013A7 C605(5FC60300)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   515 000013AE C605(5EC60300)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   516 000013B5 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   517 000013BC 7428                <1>     jz .notServer
   518                              <1>     ;In this case, the client network program will have correctly
   519                              <1>     ; substituted the drive letter for the path before making the request.
   520                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   521 000013BE E88CFFFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in X:    call getCDS ;Get the cds for the drive letter on the path
   523                              <1>     ;REMEMBER, FOR ALL THE LOGIC TO WORK, HERE WE MUST ENSURE THE PATH
   524                              <1>     ; CONTAINS NO . or .., NO INVALID CHARS OR MULTIPLE \\ AND IS 0 TERMINATED.
   525                              <1>     ;We do not scan for this criteria but the client program must adhere to 
   526                              <1>     ; these requirements.
   527                              <1>     ;When a server request is made, the request can ONLY be for a file on
   528                              <1>     ; a CDS drive.
   529 000013C3 FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   530 000013C5 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   531 000013CC 50                  <1>     push rax
   532 000013CD E86E420000          <1>     call dosCrit1Enter
   533 000013D2 E8433B0000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   534 000013D7 E86E420000          <1>     call dosCrit1Exit
   535 000013DC 58                  <1>     pop rax
   536 000013DD 0F8382000000        <1>     jnc .driveOk
   537                              <1> .serverExit:
   538 000013E3 B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   539                              <1>     return
    18                              <2> %%_ret:
    19 000013E5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   540                              <1> .notServer:
   541                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   542 000013E6 48C705(6CC60300)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   542 000013EE FFFFFF              <1>
   543 000013F1 B823110000          <1>     mov eax, 1123h
   544 000013F6 CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   545                              <1>     retnc  ;Return if resolved
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013F8 73EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   546 000013FA E850FFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   547 000013FF 9C                  <1>     pushfq  ;Save the flag state on stack
   548 00001400 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   549 00001401 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   550 00001404 E8FD3E0000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   551 00001409 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   552 0000140B E8F63E0000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   553 00001410 7543                <1>     jnz .notNet
   554 00001412 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   555 00001414 753F                <1>     jne .notNet
   556 00001416 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   557 00001417 9D                  <1>     popfq
   558 00001418 66AD                <1>     lodsw
   559 0000141A 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   560 0000141E 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   561                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   562                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   563                              <1> ; redirector Find First Without CDS
   564                              <1> 
   565 00001420 8A1D(8FC50300)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   566 00001426 C605(8FC50300)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   567 0000142D 53                  <1>     push rbx
   568                              <1> .moveNetChars:
   569 0000142E AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   570 0000142F E8DE3E0000          <1>     call uppercaseChar  ;Make char in al uppercase
   571 00001434 84C0                <1>     test al, al
   572 00001436 740F                <1>     jz .netEnd
   573 00001438 E8C93E0000          <1>     call swapPathSeparator  ;If path sep, swap it
   574 0000143D AA                  <1>     stosb
   575 0000143E 75EE                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   576 00001440 E86A000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   577 00001445 EBE7                <1>     jmp short .moveNetChars
   578                              <1> .netEnd:
   579 00001447 5B                  <1>     pop rbx
   580 00001448 AA                  <1>     stosb
   581 00001449 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   582                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000144B 7498                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   583 0000144D B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   584 00001452 CD4F                <1>     int 4Fh
   585                              <1>     return
    18                              <2> %%_ret:
    19 00001454 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   586                              <1> .notNet:
   587                              <1> ;This is the normal case; paths can be relative, or absolute.
   588 00001455 58                  <1>     pop rax ;Get the drive letter back
   589 00001456 9D                  <1>     popfq   ;Get the flag state back
   590 00001457 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   591                              <1> .pnfErr:
   592 00001459 B003                <1>     mov al, errPnf  ;Null path error
   593 0000145B F9                  <1>     stc
   594                              <1>     return
    18                              <2> %%_ret:
    19 0000145C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   595                              <1> .notNull:
   596 0000145D 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   597 0000145F 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   598 00001461 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   599 00001463 F9                  <1>     stc
   600                              <1>     return
    18                              <2> %%_ret:
    19 00001464 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   601                              <1> .driveOk:
   602 00001465 84C0                <1>     test al, al
   603 00001467 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   604                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   605 00001469 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   606 0000146C 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   607 0000146E 50                  <1>     push rax    ;Save the drive letter
   608 0000146F AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   609 00001470 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   610 00001473 E88E3E0000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   611                              <1>     ;If al is a path separator, then this path is absolute.
   612 00001478 58                  <1>     pop rax ;Get back the drive letter
   613 00001479 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   614                              <1> .absoPath:
   615                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   616 0000147B 48FFC6              <1>     inc rsi
   617 0000147E EB1A                <1>     jmp short .commonDir
   618                              <1> .curPath:
   619                              <1> ;This is only jumped to if we are relative the current drive
   620                              <1> ;rsi points to first char in path
   621                              <1> ;If this char is \ or /, then it is an absolute path.
   622 00001480 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   623 00001486 FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   624 00001488 50                  <1>     push rax    ;Save the current drive number
   625 00001489 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   626 0000148B E8763E0000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   627 00001490 58                  <1>     pop rax ;Get back the current drive number
   628 00001491 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   629                              <1> .relMain:
   630 00001493 C605(5BC60300)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   631                              <1> .commonDir:
   632                              <1> ;rsi points to the start of the string we will be appending
   633 0000149A E809000000          <1>     call pathWalk
   634 0000149F 7201                <1>     jc .badDriveExit
   635                              <1>     return
    18                              <2> %%_ret:
    19 000014A1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   636                              <1> .badDriveExit:
   637 000014A2 B812000000          <1>     mov eax, errNoFil ;No file for that spec found
   638                              <1>     return
    18                              <2> %%_ret:
    19 000014A7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   639                              <1> 
   640                              <1> pathWalk:
   641                              <1> ;Input: rsi must point to source buffer for path to expand
   642                              <1> ;       rdi must point to a destination buffer
   643                              <1> ;       al must contain the drive 1 based number
   644 000014A8 E89E000000          <1>     call prepareDir    ;Prepare the dir if the drive is subst/join drive
   645 000014AD 7265                <1>     jc .badDriveExit
   646                              <1>     ;If the user requests to .. to a point before rbx, we fail if a disk
   647                              <1>     ; resolution
   648                              <1> .netEp: ;For net path resolution (resolution ONLY) ptrs must point past "\\"
   649 000014AF 4889FB              <1>     mov rbx, rdi
   650                              <1> .mainlp:
   651 000014B2 E868010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   652 000014B7 84C0                <1>     test al, al
   653 000014B9 7507                <1>     jnz .notFile
   654 000014BB C605(5FC60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   655                              <1> .notFile:
   656 000014C2 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   657 000014C3 E862030000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   658 000014C8 58                  <1>     pop rax
   659 000014C9 736B                <1>     jnc .deviceFound
   660 000014CB E824020000          <1>     call searchForPathspec  ;and search the directory
   661 000014D0 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   662 000014D2 E873020000          <1>     call addPathspecToBuffer
   663 000014D7 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   664 000014D9 84C0                <1>     test al, al ;Exit if this pathspec was a file
   665 000014DB 743D                <1>     jz .exitGood
   666                              <1>     ;Here I have to take the cluster data from the found directory entry
   667                              <1>     ; and setup the search for the next pathspec portion
   668                              <1>     ;Copy necessary data from the current directory copy
   669 000014DD 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   670 000014E4 74CC                <1>     jz .mainlp
   671 000014E6 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   672 000014ED C1E010              <1>     shl eax, 10h    ;Shift it high
   673 000014F0 668B05(D5C50300)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   674                              <1>     ;eax now has the cluster number of the search
   675 000014F7 8905(D6C60300)      <1>     mov dword [dirClustA], eax
   676 000014FD 8905(D2C60300)      <1>     mov dword [dirClustPar], eax
   677 00001503 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   678 00001505 8905(DCC60300)      <1>     mov dword [dirEntry], eax
   679 0000150B 668905(DAC60300)    <1>     mov word [dirSect], ax
   680 00001512 EB9E                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   681                              <1> .badDriveExit:
   682 00001514 B812000000          <1>     mov eax, errNoFil ;No file for that spec found
   683                              <1>     return
    18                              <2> %%_ret:
    19 00001519 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   684                              <1> .exitGood:
   685 0000151A C605(5EC60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   686                              <1> .exit:
   687                              <1>     return
    18                              <2> %%_ret:
    19 00001521 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   688                              <1> .checkDev:
   689                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   690                              <1> ; we are in \DEV pseudo dir
   691 00001522 F605(CBC30300)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   692 00001529 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   693                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   694 0000152B 56                  <1>     push rsi
   695 0000152C 57                  <1>     push rdi
   696 0000152D E886020000          <1>     call checkDevPath
   697 00001532 5F                  <1>     pop rdi
   698 00001533 5E                  <1>     pop rsi
   699 00001534 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   700                              <1> .deviceFound:
   701 00001536 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   702 00001538 C605(5FC60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   703 0000153F C605(5EC60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   704 00001546 EBD9                <1>     jmp short .exit   
   705                              <1> .nodev:
   706 00001548 F9                  <1>     stc
   707 00001549 EBD6                <1>     jmp short .exit
   708                              <1> 
   709                              <1> prepareDir:
   710                              <1> ;Used to transfer the current directory if it is necessary.
   711                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   712                              <1> ; relative
   713                              <1> ;Input: al = 1-based drive letter
   714                              <1> ;Output: rdi = Pointing at where to place chars from source string
   715                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   716 0000154B 56                  <1>     push rsi
   717 0000154C E8EF400000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   718 00001551 E8BA3C0000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   719 00001556 720D                <1>     jc .critExit    ;If the drive number in al is too great or drive invalid
   720 00001558 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] 
   721 0000155F 57                  <1>     push rdi    ;Push CDS pointer on stack...
   722 00001560 E8B5390000          <1>     call getDiskDPB  ;Update working DPB and drv before searching, dpbptr in rbp
   723                              <1> .critExit:
   724 00001565 E8E0400000          <1>     call dosCrit1Exit
   725 0000156A 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   726 0000156B 724A                <1>     jc .badDriveExit 
   727 0000156D 488B3D(7FC50300)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   728                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   729                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   730                              <1>     ;   terminating char (\, / or Null)
   731                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   732                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   733 00001574 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   734 0000157A 753D                <1>     jnz .prepDirJoin
   735 0000157C 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   736 00001582 7556                <1>     jnz .prepDirSubst
   737                              <1> .prepMain:
   738                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   739 00001584 F605(5BC60300)FF    <1>     test byte [spliceFlag], -1
   740 0000158B 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   741                              <1>     ;Else we copy the first two chars only (X:)
   742 0000158D 66A5                <1>     movsw  
   743 0000158F B05C                <1>     mov al, "\"
   744 00001591 AA                  <1>     stosb   ;Store the path separator and increment rdi
   745 00001592 31C0                <1>     xor eax, eax    ;Get cluster 0
   746 00001594 EB1B                <1>     jmp short .prepDirExitSkip
   747                              <1> .prepLoop:
   748 00001596 AC                  <1>     lodsb
   749 00001597 84C0                <1>     test al, al ;If al was null, then we stop
   750 00001599 7403                <1>     jz .prepDirExit
   751 0000159B AA                  <1>     stosb
   752 0000159C EBF8                <1>     jmp short .prepLoop
   753                              <1> .prepDirExit:
   754 0000159E 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   755 000015A2 7403                <1>     je .prepDirExitSkipPathsep
   756 000015A4 B05C                <1>     mov al, "\"
   757 000015A6 AA                  <1>     stosb   ;Store the path separator and increment rdi
   758                              <1> .prepDirExitSkipPathsep:
   759 000015A7 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   760 000015AE 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   761                              <1> .prepDirExitSkip:
   762 000015B1 E837000000          <1>     call .prepSetupDirSearchVars
   763 000015B6 F8                  <1>     clc ;Clear carry before exiting
   764                              <1> .badDriveExit:
   765 000015B7 5E                  <1>     pop rsi
   766                              <1>     return
    18                              <2> %%_ret:
    19 000015B8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   767                              <1> .prepDirJoin:
   768 000015B9 51                  <1>     push rcx
   769 000015BA 56                  <1>     push rsi
   770 000015BB 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   771 000015C2 B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   772                              <1> .prepDirJoin1:
   773 000015C7 AC                  <1>     lodsb   ;Get the char
   774 000015C8 84C0                <1>     test al, al ;Null char?
   775 000015CA 740B                <1>     jz .prepDirJoin2
   776 000015CC E8353D0000          <1>     call swapPathSeparator
   777 000015D1 7404                <1>     jz .prepDirJoin2
   778 000015D3 FFC1                <1>     inc ecx ;Accrue length to copy
   779 000015D5 EBF0                <1>     jmp short .prepDirJoin1
   780                              <1> .prepDirJoin2:
   781 000015D7 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   782 000015D8 EB05                <1>     jmp short .prepDirCopy1
   783                              <1> .prepDirSubst:
   784 000015DA 51                  <1>     push rcx
   785 000015DB 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   786                              <1> .prepDirCopy1:
   787 000015DF F3A4                <1>     rep movsb   ;Copy the string over
   788 000015E1 59                  <1>     pop rcx
   789 000015E2 F605(5BC60300)FF    <1>     test byte [spliceFlag], -1
   790 000015E9 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   791 000015EB EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   792                              <1> .prepSetupDirSearchVars:
   793                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   794                              <1> ;       rbp = DPB pointer for the device which will do transaction
   795 000015ED 51                  <1>     push rcx
   796 000015EE 31C9                <1>     xor ecx, ecx
   797 000015F0 66890D(DAC60300)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   798 000015F7 890D(DCC60300)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   799 000015FD E8F5F5FFFF          <1>     call getFATtype ;Get type of fat
   800 00001602 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   801 00001608 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   802                              <1>     ;FAT 32 here
   803 0000160A 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   804 0000160C 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   805 0000160E 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   806                              <1> .psdsvExit:
   807 00001611 8905(D6C60300)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   808 00001617 8905(D2C60300)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   809 0000161D 59                  <1>     pop rcx
   810                              <1>     return 
    18                              <2> %%_ret:
    19 0000161E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   811                              <1> 
   812                              <1> copyPathspec:
   813                              <1> ;1) Copies a path portion from the source buffer to the destination
   814                              <1> ;2) Advances rsi to the next null, \ or /
   815                              <1> ;3) Expands all * to ?'s
   816                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   817                              <1> ;    next path separator
   818                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   819                              <1> ;    with rsi moving to path separator
   820                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   821                              <1> ;
   822                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   823                              <1> ;           rdi = Points to where to store it
   824                              <1> ;
   825                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   826                              <1> ;           rdi = First char of next space to store next pathspec
   827                              <1> ;           al = Last char stored (either \ or NULL)
   828                              <1> ;           CF=NC = OK path
   829                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   830                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   831 0000161F 57                  <1>     push rdi    ;Save the pointer into the user buffer
   832 00001620 C605(EEC30300)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   833 00001627 488D3D(DBC50300)    <1>     lea rdi, fcbName
   834 0000162E 57                  <1>     push rdi
   835 0000162F B903000000          <1>     mov ecx, 3
   836 00001634 B820202020          <1>     mov eax, "    " ;Four spaces
   837 00001639 F3AB                <1>     rep stosd   ;Store 12 spaces
   838 0000163B 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   839                              <1> 
   840 0000163C B908000000          <1>     mov ecx, 8 ;8 chars to move over, when ecx = 0, the char must be . or term
   841 00001641 B501                <1>     mov ch, 1   ;Set that we are in name field
   842 00001643 AC                  <1>     lodsb   ;Get first char from user path in al
   843 00001644 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   844 00001646 7459                <1>     je .cpsDots
   845 00001648 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   846                              <1> ;First char is not a dot, so now check if starts with E5h? 
   847                              <1> ;If so, store 05h in its place! KANJI SUPPORT WOOHOO!
   848 0000164B 3CE5                <1>     cmp al, 0E5h
   849 0000164D 7508                <1>     jne .cpsMainLoop
   850 0000164F 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   851 00001652 B005                <1>     mov al, 05h
   852 00001654 AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   853 00001655 FEC9                <1>     dec cl  ;One less char to tfr
   854                              <1> .cpsMainLoop:
   855 00001657 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   856 00001658 84C0                <1>     test al, al ;Is it the null char?
   857 0000165A 0F848A000000        <1>     jz .cpsProcessName  ;If so, terminate immediately
   858 00001660 E8A13C0000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   859 00001665 7449                <1>     jz .cpsCharSkip2 ; and then exit with the final converted pathsep in al
   860 00001667 3C2E                <1>     cmp al, "." ;Filename extension separator
   861 00001669 7428                <1>     je .cpsExtension
   862 0000166B 81F900010000        <1>     cmp ecx, 0100h  ;If ch = 1 and cl = 0, then look for either . or terminator
   863 00001671 74E4                <1>     je .cpsMainLoop
   864 00001673 67E333              <1>     jecxz .cpsCharSkip ;If ch = 0 and cl = 0, scan for next terminator
   865                              <1>     ;If we have space in the filename, we check to see if the next char is *
   866 00001676 3C2A                <1>     cmp al, "*" ;Wildcard?
   867 00001678 743D                <1>     je .cpsWildcard
   868 0000167A 3C3F                <1>     cmp al, "?" ;Good wildcard?
   869 0000167C 740C                <1>     je .store
   870 0000167E E88F3C0000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   871 00001683 E8C23D0000          <1>     call checkCharValid ; and check it is a valid char
   872 00001688 7405                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   873                              <1> .store:
   874 0000168A AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   875 0000168B FEC9                <1>     dec cl  ;One less char left to tfr
   876 0000168D EBC8                <1>     jmp short .cpsMainLoop
   877                              <1> .cpsInvalidChar:
   878 0000168F 30C0                <1>     xor al, al
   879 00001691 EB57                <1>     jmp short .cpsProcessName
   880                              <1> .cpsExtension:
   881                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   882 00001693 B903000000          <1>     mov ecx, 3  ;Set to 3 chars left, in extension (ch = 0)
   883 00001698 488D3D(E3C50300)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   884 0000169F EBB6                <1>     jmp short .cpsMainLoop
   885                              <1> .cpsDots:
   886 000016A1 AA                  <1>     stosb   ;Store the first dot
   887 000016A2 8A06                <1>     mov al, byte [rsi]
   888 000016A4 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   889 000016A6 7501                <1>     jne .cpsCharSkip
   890 000016A8 A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   891                              <1> .cpsCharSkip:
   892 000016A9 E819000000          <1>     call .cpsPtrSkip    ;Now we are skipping any chars that arent terminators
   893 000016AE EB3A                <1>     jmp short .cpsProcessName
   894                              <1> .cpsCharSkip2:
   895 000016B0 E81F000000          <1>     call .cpsPtrSkip2
   896 000016B5 EB33                <1>     jmp short .cpsProcessName
   897                              <1> .cpsWildcard:
   898                              <1>     ;cl has the number of chars of ? to store 
   899 000016B7 B03F                <1>     mov al, "?"
   900 000016B9 51                  <1>     push rcx
   901 000016BA 0FB6C9              <1>     movzx ecx, cl   ;Temporarily extend cl to ecx
   902 000016BD F3AA                <1>     rep stosb   ;Store that many ? in buffer and return cl to 0
   903 000016BF 59                  <1>     pop rcx
   904 000016C0 F6C501              <1>     test ch, 1  ;Is this bit set? If so, we jump to .cpsExtension
   905 000016C3 75CE                <1>     jnz .cpsExtension   ;Now fill the extension field
   906                              <1>     ;Else, we process filename
   907 000016C5 EBE2                <1>     jmp short .cpsCharSkip
   908                              <1> .cpsPtrSkip:
   909                              <1> ;Now advance rsi past the next pathsep or null char
   910                              <1> ;If an invalid char is detected, it is considered to be a terminator
   911                              <1> ;Output: al = Terminator char (either \ or null)
   912                              <1> ;        rsi -> First char of next pathspec (if al = \)
   913 000016C7 AC                  <1>     lodsb
   914 000016C8 E8653D0000          <1>     call checkCharOk
   915 000016CD 7418                <1>     je .cpsBadChar
   916 000016CF 84C0                <1>     test al, al ;Is this null?
   917                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 000016D1 7501                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 000016D3 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   918                              <1> ;If the next char that will be read is a pathsep, inc rsi to it
   919                              <1> ;This is to avoid multiple successive pathseps
   920                              <1> .cpsPtrSkip2:
   921 000016D4 803E5C              <1>     cmp byte [rsi], "\"
   922 000016D7 74EE                <1>     je .cpsPtrSkip 
   923 000016D9 803E2F              <1>     cmp byte [rsi], "/"
   924 000016DC 74E9                <1>     je .cpsPtrSkip 
   925                              <1>     ;If the current char is the final pathsep, exit
   926 000016DE E8233C0000          <1>     call swapPathSeparator
   927                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000016E3 74EE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   928 000016E5 EBE0                <1>     jmp short .cpsPtrSkip
   929                              <1> 
   930                              <1> .cpsBadChar:
   931 000016E7 30C0                <1>     xor al, al  ;Convert the char to a terminator
   932                              <1>     return
    18                              <2> %%_ret:
    19 000016E9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   933                              <1> .cpsProcessName:
   934                              <1> ;Store the final char in the 12 space in the FCB name field
   935 000016EA 488D3D(E6C50300)    <1>     lea rdi, fcbName+11
   936 000016F1 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   937 000016F2 5F                  <1>     pop rdi
   938                              <1>     return
    18                              <2> %%_ret:
    19 000016F3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   939                              <1> 
   940                              <1> searchForPathspec:
   941                              <1>     ;Now search the current directory for this filename
   942                              <1>     ;Find first using SDA ffBlock
   943                              <1>     ;If al = 0, we have final file name or directory name
   944                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   945                              <1>     ;Output: CF=CY => Error occured
   946                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   947                              <1>     ;                 FF block somewhat setup
   948                              <1>     ;Preserves rax, rbx, rsi,  rdi
   949 000016F4 50                  <1>     push rax
   950 000016F5 53                  <1>     push rbx
   951 000016F6 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   952 000016F7 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   953 000016F8 0FB61D(CAC30300)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
   954 000016FF 53                  <1>     push rbx    ;and push it onto the stack
   955                              <1> ;Evaluate whether we are searching for a file for a directory
   956 00001700 84C0                <1>     test al, al
   957 00001702 741D                <1>     jz .sfpPNfile
   958                              <1>     ;Fall if subdir
   959 00001704 488D3D(DBC50300)    <1>     lea rdi, fcbName
   960 0000170B B03F                <1>     mov al, "?" ;Search for wildcard
   961 0000170D B90B000000          <1>     mov ecx, 11
   962 00001712 F2AE                <1>     repne scasb
   963 00001714 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
   964 00001716 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
   965 00001718 C605(CAC30300)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
   966 0000171F EB07                <1>     jmp short .sfpPNMain
   967                              <1> .sfpPNfile:
   968                              <1>     ;Here if we are searching for a file or directory as setup by search init
   969 00001721 0FB605(56C60300)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
   970                              <1> .sfpPNMain:
   971 00001728 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
   972 0000172F 7405                <1>     je .sfpPNNoDisk
   973 00001731 E869F9FFFF          <1>     call searchDir
   974                              <1> .sfpPNNoDisk:
   975 00001736 5B                  <1>     pop rbx
   976 00001737 881D(CAC30300)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
   977 0000173D 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
   978 0000173E 5E                  <1>     pop rsi
   979 0000173F 5B                  <1>     pop rbx
   980 00001740 58                  <1>     pop rax
   981                              <1>     return
    18                              <2> %%_ret:
    19 00001741 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   982                              <1> .sfpPnf:
   983 00001742 B803000000          <1>     mov eax, errPnf
   984                              <1> .sfpErrExit:
   985 00001747 F9                  <1>     stc ;Set carry
   986 00001748 EBEC                <1>     jmp short .sfpPNNoDisk
   987                              <1> 
   988                              <1> addPathspecToBuffer:
   989                              <1> ;Input: fcbName = Qualified pathname portion
   990                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
   991                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
   992                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
   993                              <1> ;rbx points to the "head of the path"
   994 0000174A 803D(DBC50300)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
   995 00001751 741F                <1>     je .aptbPNDots
   996                              <1>     ;Copy filename over to internal buffer
   997 00001753 56                  <1>     push rsi    ;Save source pointer position
   998 00001754 488D35(DBC50300)    <1>     lea rsi, fcbName
   999 0000175B E831FBFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1000 00001760 48FFCF              <1>     dec rdi ;Go back to the copied Null char
  1001 00001763 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1002                              <1> .aptbOkExit:
  1003 00001764 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
  1004 00001767 E89A3B0000          <1>     call swapPathSeparator
  1005 0000176C 7402                <1>     jz .aptbPNexit
  1006 0000176E 30C0                <1>     xor al, al  ;Set al to 0 else (all other chars are terminators)
  1007                              <1> .aptbPNexit:
  1008 00001770 AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
  1009                              <1>     return
    18                              <2> %%_ret:
    19 00001771 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1010                              <1> .aptbPNDots:
  1011                              <1> ;For one dot, we leave rdi where it is
  1012                              <1> ;For two dots, we search backwards for the previous "\"
  1013 00001772 803D(DCC50300)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1014 00001779 F8                  <1>     clc ;Ensure we clear CF if we return via here
  1015 0000177A 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the previous char in al if we return
  1016                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000177D 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1017                              <1>     ;Here we have two dots
  1018                              <1>     ;Walk rdi backwards until a \ is found
  1019 0000177F 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
  1020 00001782 66817FFF3A5C        <1>     cmp word [rdi - 1], ":\" ;IF the char preceeding \ is :, then error out
  1021 00001788 7427                <1>     je .aptbPnf
  1022 0000178A 66817FFF5C5C        <1>     cmp word [rdi - 1], "\\" ;Similar net name check
  1023 00001790 741F                <1>     je .aptbPnf
  1024                              <1> .aptbPNDotsLp:
  1025 00001792 48FFCF              <1>     dec rdi
  1026 00001795 803F5C              <1>     cmp byte [rdi], "\"
  1027 00001798 75F8                <1>     jne .aptbPNDotsLp  ;Keep looping around until it is a "\"
  1028                              <1>     ;Don't go past the pathsep, since we may need to replace it with a null
  1029 0000179A 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;Are we in name resolution mode?
  1030 000017A1 74C1                <1>     je .aptbOkExit    ;If clear, we are, so just return
  1031 000017A3 4839DF              <1>     cmp rdi, rbx    ;Are we before the start of the path? (i.e in subst?)
  1032 000017A6 7209                <1>     jb .aptbPnf
  1033 000017A8 EBBA                <1>     jmp short .aptbOkExit
  1034                              <1> .aptbSearchError:
  1035 000017AA B812000000          <1>     mov eax, errNoFil
  1036 000017AF EB05                <1>     jmp short .aptbErrExit
  1037                              <1> .aptbPnf:
  1038 000017B1 B803000000          <1>     mov eax, errPnf
  1039                              <1> .aptbErrExit:
  1040 000017B6 F9                  <1>     stc ;Set carry
  1041                              <1>     return
    18                              <2> %%_ret:
    19 000017B7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1042                              <1> 
  1043                              <1> checkDevPath:
  1044                              <1> ;Called only if the file/directory was not found on disk.
  1045                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1046                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1047                              <1> ; and check to see if it is a char device. If it is, build a directory
  1048                              <1> ; If it is not, proceed with the request fail.
  1049                              <1> ;
  1050                              <1> ;Input: rsi = Pointer to the next path spec
  1051                              <1> ;Output: CF=NC => Char device found, directory built
  1052                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1053 000017B8 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1054                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000017BF 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1055 000017C1 803D(E6C50300)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1056 000017C8 7459                <1>     je .notOk                      
  1057                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1058 000017CA 50                  <1>     push rax
  1059 000017CB 48B844455620202020- <1>     mov rax, "DEV     "
  1059 000017D4 20                  <1>
  1060 000017D5 483905(DBC50300)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1061 000017DC 58                  <1>     pop rax
  1062 000017DD 7544                <1>     jne .notOk
  1063 000017DF 813D(E3C50300)2020- <1>     cmp dword [fcbName + 8], "   \"
  1063 000017E7 205C                <1>
  1064 000017E9 7538                <1>     jne .notOk
  1065                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1066                              <1>     ; looking for a device driver
  1067                              <1>     ;First append it to rdi 
  1068 000017EB B84445565C          <1>     mov eax, "DEV\" 
  1069 000017F0 AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1070 000017F1 57                  <1>     push rdi
  1071 000017F2 488D3D(DBC50300)    <1>     lea rdi, fcbName
  1072 000017F9 E84BFAFFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1073                              <1>     ;Returns in al the terminating char of the source string
  1074 000017FE 5F                  <1>     pop rdi
  1075                              <1>     ;If al is a pathsep, fail
  1076 000017FF E8023B0000          <1>     call swapPathSeparator
  1077 00001804 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1078 00001806 30C0                <1>     xor al, al
  1079 00001808 8805(E6C50300)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1080 0000180E 53                  <1>     push rbx
  1081 0000180F E844000000          <1>     call checkIfCharDevice
  1082 00001814 5B                  <1>     pop rbx ;Don't need bh yet
  1083 00001815 720C                <1>     jc .notOk
  1084 00001817 E86D000000          <1>     call buildCharDir
  1085                              <1>     ;Here the device was determined to be a char device.
  1086                              <1>     ;A dummy directory entry was built for it.
  1087                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1088                              <1>     ; Do not Find Next!
  1089                              <1> .copyName:
  1090 0000181C E870FAFFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1091 00001821 F8                  <1>     clc
  1092                              <1>     return
    18                              <2> %%_ret:
    19 00001822 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1093                              <1> .notOk:
  1094 00001823 B812000000          <1>     mov eax, errNoFil
  1095 00001828 F9                  <1>     stc
  1096                              <1>     return
    18                              <2> %%_ret:
    19 00001829 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1097                              <1> .charDevSearch:
  1098 0000182A 53                  <1>     push rbx
  1099 0000182B E828000000          <1>     call checkIfCharDevice
  1100 00001830 5B                  <1>     pop rbx ;Dont need bh yet
  1101 00001831 72F0                <1>     jc .notOk
  1102 00001833 E851000000          <1>     call buildCharDir
  1103 00001838 803D(E6C50300)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1104 0000183F 750C                <1>     jne .cds2
  1105 00001841 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1106 00001845 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1107 00001847 48FFCF              <1>     dec rdi
  1108 0000184A B02F                <1>     mov al, "/" ;Replace \ with "/"
  1109 0000184C AA                  <1>     stosb   ;Store that and let the dir write the filename
  1110                              <1> .cds2:
  1111 0000184D 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1112 00001854 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1113 00001856 F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1114                              <1>     return
    18                              <2> %%_ret:
    19 00001857 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1115                              <1> 
  1116                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1117                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1118                              <1> ; device driver chain. 
  1119                              <1> ;Output: CF=CY if not found
  1120                              <1> ;        CF=NC if found
  1121                              <1> ;           BH = Low byte of the device attribute word
  1122 00001858 50                  <1>     push rax
  1123 00001859 57                  <1>     push rdi
  1124 0000185A 488B05(DBC50300)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1125 00001861 488D3D(73C00300)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1126                              <1> .checkName:
  1127 00001868 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1128 0000186C 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1129 0000186E F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1130 00001871 7406                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1131 00001873 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1132 00001877 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1133                              <1> .walkList:
  1134 00001879 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1135 0000187C 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1136 00001883 75E3                <1>     jne .checkName  ;If no, rdi points to char device
  1137 00001885 F9                  <1>     stc
  1138                              <1> .exit:
  1139 00001886 5F                  <1>     pop rdi
  1140 00001887 58                  <1>     pop rax
  1141                              <1>     return
    18                              <2> %%_ret:
    19 00001888 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1142                              <1> 
  1143                              <1> buildCharDir:
  1144                              <1> ;Build a dummy directory entry for the char device in FCBName
  1145                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1146 00001889 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1147                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001890 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1148 00001892 50                  <1>     push rax
  1149 00001893 57                  <1>     push rdi
  1150 00001894 C605(E6C50300)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1151 0000189B 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
  1152                              <1>     ;Zero the directory copy (32 bytes)
  1153 000018A2 50                  <1>     push rax
  1154 000018A3 51                  <1>     push rcx
  1155 000018A4 57                  <1>     push rdi
  1156 000018A5 31C0                <1>     xor eax, eax    ;Zero rax
  1157 000018A7 B904000000          <1>     mov ecx, 4
  1158 000018AC F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1159 000018AF 5F                  <1>     pop rdi
  1160 000018B0 59                  <1>     pop rcx
  1161 000018B1 58                  <1>     pop rax
  1162 000018B2 488B05(DBC50300)    <1>     mov rax, qword [fcbName]
  1163 000018B9 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1164 000018BC B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1165 000018C1 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1166 000018C4 C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1167                              <1>     ;Get date and time and set the write time in the directory entry
  1168 000018C8 E8B0100000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1169 000018CD E896110000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1170 000018D2 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1171 000018D5 31C0                <1>     xor eax, eax
  1172 000018D7 5F                  <1>     pop rdi
  1173 000018D8 58                  <1>     pop rax
  1174                              <1>     return
    18                              <2> %%_ret:
    19 000018D9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1175                              <1> 
  1176                              <1> checkFailingComp:
  1177                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1178                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1179                              <1> ;Returns: ZF=ZE => Last path componant
  1180                              <1> ;         ZF=NZ => Not last path componant
  1181 000018DA 50                  <1>     push rax
  1182 000018DB 8A05(E6C50300)      <1>     mov al, byte [fcbName + 11]
  1183 000018E1 84C0                <1>     test al, al
  1184 000018E3 58                  <1>     pop rax
  1185                              <1>     return
    18                              <2> %%_ret:
    19 000018E4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    25                                  %include "./Source/Kernel/FAT/dirfun.asm"
    26                              <1> ;---------------------------------------------------:
    27                              <1> ;                   KERNEL FUNCTIONS                :
    28                              <1> ;---------------------------------------------------:
    29                              <1> makeDIR:           ;ah = 39h
    30                              <1> ;For make, the path must exist but the final componant must not exist.
    31                              <1> ;Input: rdx = Pointer to ASCIIZ string
    32 000018E5 4889D7              <1>     mov rdi, rdx
    33 000018E8 E84C3A0000          <1>     call strlen
    34 000018ED 81F940000000        <1>     cmp ecx, 64
    35 000018F3 7607                <1>     jbe .okLength
    36                              <1> .badPath:
    37 000018F5 B003                <1>     mov al, errPnf
    38 000018F7 E9833D0000          <1>     jmp extErrExit
    39                              <1> .okLength:
    40 000018FC 4889D6              <1>     mov rsi, rdx
    41 000018FF E89F3A0000          <1>     call checkPathspecOK
    42 00001904 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    43                              <1> .pathOk:
    44 00001906 E8143B0000          <1>     call scanPathWC
    45 0000190B 72E8                <1>     jc .badPath ;Dont allow wildcards
    46                              <1>     ;Path is ok, now proceed
    47 0000190D 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    48 00001914 E86DFAFFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
    49                              <1>     ;If the path exists, exit error
    50 00001919 0F83603D0000        <1>     jnc extErrExit
    51                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    52 0000191F E8B6FFFFFF          <1>     call checkFailingComp
    53 00001924 0F85553D0000        <1>     jnz extErrExit
    54                              <1>     ;So all is well, the new subdirectories name is in fcbName
    55                              <1>     ;The parent dir's directory entry is in the curDirCopy
    56 0000192A E850380000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    57                              <1>     ;returns in rdi the working cds ptr
    58 0000192F 7312                <1>     jnc .notNet
    59 00001931 B803110000          <1>     mov eax, 1103h
    60 00001936 CD4F                <1>     int 4fh
    61 00001938 0F82413D0000        <1>     jc extErrExit
    62 0000193E E92E3D0000          <1>     jmp extGoodExit
    63                              <1> .notNet:
    64 00001943 E8F83C0000          <1>     call dosCrit1Enter
    65                              <1>     ;Current dpb ptr is already set
    66                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    67                              <1>     ;First we make a dummy dir in curDirCopy
    68 00001948 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    69 0000194F 488D35(DBC50300)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    70 00001956 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
    71 0000195D 48A5                <1>     movsq   ;Copy the name over
    72 0000195F A5                  <1>     movsd
    73 00001960 E818100000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    74 00001965 E8FE100000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    75 0000196A 8905(C9C50300)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    76 00001970 8905(D1C50300)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    77 00001976 31C0                <1>     xor eax, eax
    78 00001978 8905(D7C50300)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    79 0000197E C605(C6C50300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    80 00001985 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]
    81                              <1> .searchForDirSpace:
    82 0000198B 8905(D6C60300)      <1>     mov dword [dirClustA], eax
    83 00001991 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    84 00001993 668905(DAC60300)    <1>     mov word [dirSect], ax
    85 0000199A 8905(DCC60300)      <1>     mov dword [dirEntry], eax
    86 000019A0 E882040000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    87 000019A5 7328                <1>     jnc .dirEntryFnd
    88 000019A7 813D(D2C60300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    88 000019AF 0000                <1>
    89 000019B1 0F8456010000        <1>     je .bad ;Set CF and exit
    90 000019B7 E87C050000          <1>     call growDirectory  ;Increase directory size by 1 cluster
    91 000019BC 0F824B010000        <1>     jc .bad
    92 000019C2 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    93 000019C7 0F8440010000        <1>     je .bad
    94                              <1>     ;Else eax = Newly allocated cluster
    95 000019CD EBBC                <1>     jmp short .searchForDirSpace
    96                              <1> .dirEntryFnd:
    97                              <1> ;rdi points to current directory copy
    98                              <1> ;rsi now points to offset in the buffer to write the entry to
    99                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
   100 000019CF 488B1D(90C60300)    <1>     mov rbx, qword [currBuff]
   101 000019D6 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   102                              <1>      
   103 000019DA 488905(98C60300)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
   104 000019E1 4881C330000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   105 000019E8 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
   106 000019EB 668935(A0C60300)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
   107                              <1> ;Must now request a cluster and sanitise it
   108 000019F2 E8E8F2FFFF          <1>     call startNewChain  ;Get cluster number in eax
   109 000019F7 0F8215010000        <1>     jc .badExit
   110 000019FD E869050000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax
   111 00001A02 0F820A010000        <1>     jc .badExit
   112                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   113 00001A08 668905(D5C50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   114 00001A0F C1E810              <1>     shr eax, 10h    ;Get high word low
   115 00001A12 668905(CFC50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   116 00001A19 488B05(98C60300)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   117 00001A20 E822F1FFFF          <1>     call getBufForDirNoFile
   118 00001A25 0F82E7000000        <1>     jc .badExit
   119 00001A2B 0FB705(A0C60300)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   120 00001A32 488D35(BBC50300)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   121 00001A39 488D7C0330          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   122 00001A3E B904000000          <1>     mov ecx, 4
   123 00001A43 F348A5              <1>     rep movsq   ;Copy over the buffered directory
   124 00001A46 E871EFFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   125                              <1>     ;Now need to read in data sector and make two entries . and ..
   126 00001A4B 48B82E202020202020- <1>     mov rax, ".       "
   126 00001A54 20                  <1>
   127 00001A55 488905(BBC50300)    <1>     mov qword [curDirCopy], rax
   128 00001A5C B820202020          <1>     mov eax, "    "
   129 00001A61 668905(C3C50300)    <1>     mov word [curDirCopy + 8], ax
   130 00001A68 8805(C5C50300)      <1>     mov byte [curDirCopy + 10], al
   131 00001A6E 0FB705(D5C50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   132 00001A75 0FB715(CFC50300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   133 00001A7C C1E210              <1>     shl edx, 10h
   134 00001A7F 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   135 00001A81 E8DFF1FFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   136 00001A86 E8BCF0FFFF          <1>     call getBufForDirNoFile
   137 00001A8B 0F8281000000        <1>     jc .badExit
   138                              <1>     ;rbx has buffer pointer now
   139 00001A91 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   140 00001A98 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   141 00001A9C B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   142 00001AA1 F348A5              <1>     rep movsq
   143 00001AA4 488B5B0A            <1>     mov rbx, qword [rbx + bufferHdr.bufferLBA]  ;Save this sector for now
   144 00001AA8 E80FEFFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   145                              <1>     ;Now create .. entry
   146 00001AAD C605(BCC50300)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   147 00001AB4 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   148 00001ABA E838F1FFFF          <1>     call getFATtype
   149 00001ABF 81F902000000        <1>     cmp ecx, 2
   150 00001AC5 7207                <1>     jb .notFAT32
   151 00001AC7 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   152 00001ACA 7502                <1>     jne .notFAT32
   153 00001ACC 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   154                              <1> .notFAT32:
   155 00001ACE 668905(D5C50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   156 00001AD5 C1E810              <1>     shr eax, 10h
   157 00001AD8 668905(CFC50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   158 00001ADF 4889D8              <1>     mov rax, rbx  ;Get this sector back again
   159 00001AE2 E860F0FFFF          <1>     call getBufForDirNoFile
   160 00001AE7 7229                <1>     jc .badExit
   161 00001AE9 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   162 00001AF0 488D7B50            <1>     lea rdi, qword [rbx + bufferHdr.dataarea + fatDirEntry_size]    ;Next entry!
   163 00001AF4 B904000000          <1>     mov ecx, 4
   164 00001AF9 F348A5              <1>     rep movsq
   165 00001AFC E8BBEEFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   166                              <1>     ;Now I need to write the entry in the Parent Directory
   167                              <1> .okExit:
   168                              <1>     ;AND WE ARE DONE!
   169 00001B01 E8443B0000          <1>     call dosCrit1Exit
   170 00001B06 31C0                <1>     xor eax, eax
   171 00001B08 E9643B0000          <1>     jmp extGoodExit
   172                              <1> .bad:
   173 00001B0D B805000000          <1>     mov eax, errAccDen
   174                              <1> .badExit:
   175 00001B12 E8333B0000          <1>     call dosCrit1Exit
   176 00001B17 E9633B0000          <1>     jmp extErrExit
   177                              <1> 
   178                              <1> removeDIR:         ;ah = 3Ah
   179 00001B1C 4889D7              <1>     mov rdi, rdx
   180 00001B1F E815380000          <1>     call strlen
   181 00001B24 81F940000000        <1>     cmp ecx, 64
   182 00001B2A 7607                <1>     jbe .okLength
   183                              <1> .badPath:
   184 00001B2C B003                <1>     mov al, errPnf
   185 00001B2E E94C3B0000          <1>     jmp extErrExit
   186                              <1> .okLength:
   187 00001B33 4889D6              <1>     mov rsi, rdx
   188 00001B36 E868380000          <1>     call checkPathspecOK
   189 00001B3B 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   190                              <1> .pathOk:
   191 00001B3D E8DD380000          <1>     call scanPathWC
   192 00001B42 72E8                <1>     jc .badPath ;Dont allow wildcards
   193                              <1>     ;Path is ok, now proceed
   194 00001B44 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   195 00001B4B E836F8FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   196 00001B50 72DA                <1>     jc .badPath    ;Path Doesn't exist
   197 00001B52 E828360000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   198 00001B57 7312                <1>     jnc .notNet
   199 00001B59 B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   200 00001B5E CD4F                <1>     int 4fh
   201 00001B60 0F82193B0000        <1>     jc extErrExit
   202 00001B66 E9063B0000          <1>     jmp extGoodExit
   203                              <1> .notNet:
   204 00001B6B E8D03A0000          <1>     call dosCrit1Enter
   205 00001B70 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   206                              <1>     ;Now let use check that our directory is not the CDS currentdir
   207 00001B77 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]
   208 00001B7E 488D3D(7FC40300)    <1>     lea rdi, buffer1
   209 00001B85 E8AF370000          <1>     call strlen ;Get the length of the full qualified name in ecx
   210 00001B8A 66890D(A0C60300)    <1>     mov word [pathLen], cx
   211 00001B91 E8BA370000          <1>     call strcmp ;Then compare rdi to CDS string
   212 00001B96 750F                <1>     jnz .notEqual
   213 00001B98 B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   214 00001B9D E8A83A0000          <1>     call dosCrit1Exit
   215 00001BA2 E9D83A0000          <1>     jmp extErrExit
   216                              <1> .notEqual:
   217 00001BA7 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   218                              <1>     ;If the given path length is one more than the backslash offset
   219                              <1>     ; due to the terminating null, then the user is trying to delete the 
   220                              <1>     ; root dir. Fail this.
   221 00001BAA 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   222 00001BAE FFC1                <1>     inc ecx
   223 00001BB0 663B0D(A0C60300)    <1>     cmp cx, word [pathLen]
   224 00001BB7 0F8415010000        <1>     je .accessDenied
   225 00001BBD E879020000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   226                              <1>     ;for the entry in the sector we are hoping to delete
   227 00001BC2 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   228 00001BC9 C1E010              <1>     shl eax, 10h
   229 00001BCC 0FB71D(D5C50300)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   230 00001BD3 09D8                <1>     or eax, ebx
   231 00001BD5 8905(D2C60300)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   232 00001BDB E885F0FFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   233 00001BE0 E862EFFFFF          <1>     call getBufForDirNoFile
   234 00001BE5 0F82EC000000        <1>     jc .exitBad
   235                              <1>     ;rbx points to buffer
   236 00001BEB 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   237 00001BEF 48B82E202020202020- <1>     mov rax, ".       "
   237 00001BF8 20                  <1>
   238 00001BF9 483906              <1>     cmp qword [rsi], rax
   239 00001BFC 0F85D0000000        <1>     jne .accessDenied
   240 00001C02 B42E                <1>     mov ah, "." ;Screw the partial stall
   241 00001C04 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   242 00001C08 0F85C4000000        <1>     jne .accessDenied
   243 00001C0E 4881C620000000      <1>     add rsi, fatDirEntry_size
   244 00001C15 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   245 00001C1C B904000000          <1>     mov ecx, 4
   246 00001C21 F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   247                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   248                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   249 00001C24 488D3D(DBC50300)    <1>     lea rdi, fcbName
   250 00001C2B B03F                <1>     mov al, "?"
   251 00001C2D B90B000000          <1>     mov ecx, 11
   252 00001C32 F3AA                <1>     rep stosb   ;Store the pattern to search for
   253 00001C34 30C0                <1>     xor al, al  ;Store a terminating zero
   254 00001C36 AA                  <1>     stosb
   255 00001C37 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   256 00001C3D 50                  <1>     push rax    ;Save on stack temporarily
   257 00001C3E 8905(D6C60300)      <1>     mov dword [dirClustA], eax
   258 00001C44 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   259 00001C46 668905(DAC60300)    <1>     mov word [dirSect], ax
   260 00001C4D C705(DCC60300)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   260 00001C55 0000                <1>
   261 00001C57 C605(56C60300)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   262 00001C5E 58                  <1>     pop rax
   263 00001C5F E801F0FFFF          <1>     call getStartSectorOfCluster
   264 00001C64 E800EFFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   265 00001C69 726C                <1>     jc .exitBad
   266 00001C6B E80FF5FFFF          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   267 00001C70 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   268 00001C77 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   269 00001C7D E85AF4FFFF          <1>     call searchDir.rmdirEP
   270 00001C82 734E                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   271                              <1>     ;Else, this is a empty dir, we can remove it
   272                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   273 00001C84 488B05(98C60300)    <1>     mov rax, qword [tempSect]
   274 00001C8B E8D9EEFFFF          <1>     call getBufForDOS
   275 00001C90 7245                <1>     jc .exitBad
   276 00001C92 E8E8F4FFFF          <1>     call adjustDosDirBuffer
   277 00001C97 0FB705(A0C60300)    <1>     movzx eax, word [entry]
   278 00001C9E 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   279 00001CA2 4801C6              <1>     add rsi, rax    
   280 00001CA5 8A05(62C60300)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   281 00001CAB 8806                <1>     mov byte [rsi], al  ;Store delchar there
   282 00001CAD 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   283 00001CB1 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   284 00001CB5 E802EDFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   285 00001CBA C1E210              <1>     shl edx, 10h
   286 00001CBD 09D0                <1>     or eax, edx
   287                              <1>     ;Now remove the FAT chain
   288 00001CBF E845F1FFFF          <1>     call unlinkFAT
   289 00001CC4 7211                <1>     jc .exitBad
   290 00001CC6 E87F390000          <1>     call dosCrit1Exit
   291 00001CCB 31C0                <1>     xor eax, eax
   292 00001CCD E99F390000          <1>     jmp extGoodExit
   293                              <1> .accessDenied:
   294 00001CD2 B805000000          <1>     mov eax, errAccDen
   295                              <1> .exitBad:
   296 00001CD7 F9                  <1>     stc
   297 00001CD8 E86D390000          <1>     call dosCrit1Exit
   298 00001CDD E99D390000          <1>     jmp extErrExit
   299                              <1> 
   300                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   301                              <1> ;Input: rdx = Pointer to ASCIIZ string
   302 00001CE2 4889D7              <1>     mov rdi, rdx
   303 00001CE5 E84F360000          <1>     call strlen
   304 00001CEA 81F940000000        <1>     cmp ecx, 64
   305 00001CF0 7607                <1>     jbe .okLength
   306                              <1> .badPath:
   307 00001CF2 B003                <1>     mov al, errPnf
   308 00001CF4 E986390000          <1>     jmp extErrExit
   309                              <1> .okLength:
   310 00001CF9 4889D6              <1>     mov rsi, rdx
   311 00001CFC E8A2360000          <1>     call checkPathspecOK
   312 00001D01 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   313 00001D03 E817370000          <1>     call scanPathWC
   314 00001D08 72E8                <1>     jc .badPath ;Or wildcards
   315 00001D0A E87C370000          <1>     call checkPathNet
   316 00001D0F 74E1                <1>     jz .badPath ;Or Net paths
   317                              <1>     ;Path is ok, now proceed
   318 00001D11 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   319 00001D18 E869F6FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   320 00001D1D 0F825C390000        <1>     jc extErrExit   ;Exit with error code in eax
   321                              <1>     ;The path must've been ok, so now copy the path into the CDS
   322                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   323 00001D23 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Copy the CDS to the tmpCDS
   324 00001D2A 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   325 00001D30 756D                <1>     jnz .net    ;This is done by the redirector for redirector drives
   326 00001D32 488D3D(FBC50300)    <1>     lea rdi, tmpCDS
   327 00001D39 B95B000000          <1>     mov ecx, cds_size
   328 00001D3E F3A4                <1>     rep movsb
   329                              <1>     ;If the path is longer than 67, call it an invalid path
   330 00001D40 488D3D(7FC40300)    <1>     lea rdi, buffer1
   331 00001D47 E8ED350000          <1>     call strlen ;Get the length of this path
   332 00001D4C 81F943000000        <1>     cmp ecx, 67
   333 00001D52 779E                <1>     ja .badPath
   334 00001D54 4889FE              <1>     mov rsi, rdi    ;Move buffer source to rsi
   335 00001D57 488D3D(FBC50300)    <1>     lea rdi, tmpCDS
   336 00001D5E F3A4                <1>     rep movsb   ;Copy the path over
   337                              <1>     ;Now get the start cluster from the directory copy
   338 00001D60 0FB715(D5C50300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   339 00001D67 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   340 00001D6E C1E010              <1>     shl eax, 10h
   341 00001D71 09D0                <1>     or eax, edx ;Add low bits to eax
   342 00001D73 8905(48C60300)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   343 00001D79 488D35(FBC50300)    <1>     lea rsi, tmpCDS
   344 00001D80 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   345 00001D87 B95B000000          <1>     mov ecx, cds_size
   346 00001D8C E8AF380000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   347 00001D91 F3A4                <1>     rep movsb
   348 00001D93 E8B2380000          <1>     call dosCrit1Exit
   349 00001D98 31C0                <1>     xor eax, eax
   350 00001D9A E9D2380000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   351                              <1> .net:
   352                              <1> ;SDA Vars are setup for this request
   353 00001D9F B805110000          <1>     mov eax, 1105h
   354 00001DA4 CD4F                <1>     int 4fh
   355 00001DA6 0F82D3380000        <1>     jc extErrExit
   356 00001DAC E9C0380000          <1>     jmp extGoodExit
   357                              <1> getCurrentDIR:     ;ah = 47h
   358                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   359                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   360 00001DB1 88D0                <1>     mov al, dl  ;Move drive number into al
   361 00001DB3 E8C1340000          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   362 00001DB8 0F82C1380000        <1>     jc extErrExit
   363                              <1> .okDrive:
   364 00001DBE 4889F7              <1>     mov rdi, rsi    ;Save destination in rdi
   365 00001DC1 E87A380000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   366 00001DC6 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]  ;Get pointer to current CDS in rsi
   367 00001DCD 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   368 00001DD1 FFC0                <1>     inc eax ;Go past the backslash
   369 00001DD3 4801C6              <1>     add rsi, rax ;Add this many chars to rsi to point to first char to copy
   370 00001DD6 E86D350000          <1>     call strcpy
   371 00001DDB E86A380000          <1>     call dosCrit1Exit
   372 00001DE0 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   373 00001DE5 E987380000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   374                              <1> 
   375                              <1> getSetFileDateTime:;ah = 57h
   376                              <1> trueName:          ;ah = 60h, get fully qualified name. Int 4Fh, AX=1221h
   377                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   378 00001DEA E8B4350000          <1>     call checkPathspecOK    ;This preserves rsi
   379 00001DEF 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   380 00001DF1 740A                <1>     jz .pathspecOk  ;If the last char in the path is malformed allow it here
   381                              <1> .badPath:
   382 00001DF3 B803000000          <1>     mov eax, errPnf
   383 00001DF8 E982380000          <1>     jmp extErrExit
   384                              <1> .pathspecOk:
   385 00001DFD 57                  <1>     push rdi    ;Save the destination
   386 00001DFE 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   387 00001E05 E85DF5FFFF          <1>     call canonicaliseFileName
   388 00001E0A C60700              <1>     mov byte [rdi], 0   ;Store a terminating zero if necessary
   389 00001E0D 5F                  <1>     pop rdi
   390 00001E0E 0F826B380000        <1>     jc extErrExit
   391 00001E14 488D35(7FC40300)    <1>     lea rsi, buffer1
   392 00001E1B E828350000          <1>     call strcpy
   393 00001E20 31C0                <1>     xor eax, eax
   394 00001E22 E94A380000          <1>     jmp extGoodExit
   395                              <1> 
   396                              <1> ;-----------------------------------
   397                              <1> ;    General Directory Routines    :
   398                              <1> ;-----------------------------------
   399                              <1> 
   400                              <1> findFreeDiskDirEntry:
   401                              <1> ;Find a space in the directory we are searching for a directory entry
   402                              <1> ;Accept first entry starting with a 0E5h or 00h
   403                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   404                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   405                              <1> ; be called for CDS's that are NOT net CDS's).
   406                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   407                              <1> ;       Directory vars must be set up for the directory we are searching in
   408                              <1> ;Output: CF=CY => Error, eax has error code
   409                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   410 00001E27 8A05(62C60300)      <1>     mov al, byte [delChar]
   411 00001E2D 8805(DBC50300)      <1>     mov byte [fcbName], al
   412 00001E33 E867F2FFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   413                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00001E38 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00001E3A C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   414                              <1> ;Free entry found, dir variables are set for the free entry. 
   415                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   416                              <1> getDiskDirectoryEntry:
   417                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   418                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   419                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   420                              <1> ;        qword [tempSect] = Disk sector number of directory
   421                              <1> ;        word [entry] = 32 byte offset into sector
   422                              <1> ;        CF=CY => Error, exit 
   423 00001E3B 53                  <1>     push rbx
   424 00001E3C 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  
   425                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   426                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   427 00001E42 0FB71D(DAC60300)    <1>     movzx ebx, word [dirSect]
   428 00001E49 85C0                <1>     test eax, eax
   429 00001E4B 7407                <1>     jz .skipCluster
   430 00001E4D E813EEFFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   431 00001E52 EB0C                <1>     jmp short .skipOldFat
   432                              <1> .skipCluster:
   433 00001E54 55                  <1>     push rbp
   434 00001E55 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   435 00001E5C 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   436 00001E5F 5D                  <1>     pop rbp
   437                              <1> .skipOldFat:
   438 00001E60 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   439 00001E63 488905(98C60300)    <1>     mov qword [tempSect], rax   ;Save this sector number
   440 00001E6A E8FAECFFFF          <1>     call getBufForDOS   ;Get buffer for DOS in rbx
   441 00001E6F 5B                  <1>     pop rbx
   442                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001E70 72C8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   443 00001E72 53                  <1>     push rbx
   444 00001E73 488B1D(90C60300)    <1>     mov rbx, qword [currBuff]
   445 00001E7A E800F3FFFF          <1>     call adjustDosDirBuffer ;Change buffer to Dir buffer
   446                              <1>     ;Above function gets data buffer ptr in rsi
   447 00001E7F 0FB705(DAC60300)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   448 00001E86 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   449 00001E8A F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   450                              <1>     ; the current sector
   451 00001E8C C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   452 00001E8F 8B1D(DCC60300)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   453 00001E95 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   454 00001E97 C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   455 00001E9A 66891D(A0C60300)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   456 00001EA1 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   457 00001EA4 5B                  <1>     pop rbx
   458                              <1>     return
    18                              <2> %%_ret:
    19 00001EA5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   459                              <1> 
   460                              <1> 
   461                              <1> updateDirectoryEntryForFile:    
   462                              <1> ;Updates the directory entry for disk files
   463                              <1> ;Called with:
   464                              <1> ;   [workingDPB] = DPB pointer for the disk device
   465                              <1> ;   [currentSFT] = Current SFT pointer
   466 00001EA6 50                  <1>     push rax
   467 00001EA7 53                  <1>     push rbx
   468 00001EA8 57                  <1>     push rdi
   469 00001EA9 55                  <1>     push rbp
   470                              <1> 
   471 00001EAA 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   472 00001EB1 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   473 00001EB8 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   474 00001EBE 751D                <1>     jnz .skipDT
   475                              <1>     ;Get date and time words and add them to the directory entry
   476 00001EC0 E8B80A0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   477 00001EC5 726C                <1>     jc .exit  ;If we fail to get time/date, fail the request
   478                              <1>     ;Build date and time words
   479 00001EC7 E89C0B0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   480                              <1>     ;Update SFT fields
   481 00001ECC 66894713            <1>     mov word [rdi + sft.wTime], ax
   482 00001ED0 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   483 00001ED3 66894715            <1>     mov word [rdi + sft.wDate], ax
   484 00001ED7 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush  ;We update DT, so flush
   485                              <1> .skipDT:
   486                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   487                              <1> ; we skip all of this
   488 00001EDD 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   489 00001EE3 744E                <1>     jz .exit ;If the file was never written to, don't bother updating DIR data
   490 00001EE5 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   491 00001EE9 E889ECFFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   492 00001EEE 7243                <1>     jc .exit    ;If an error is to be returned from, we skip the rest of this
   493                              <1>     ;Now we write the changes to the sector
   494                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   495 00001EF0 E8C7EAFFFF          <1>     call setBufferDirty
   496 00001EF5 488D6B30            <1>     lea rbp, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   497 00001EF9 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   498 00001EFD C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   499 00001F00 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   500 00001F03 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   501 00001F06 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   502 00001F09 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   503 00001F0D 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   504 00001F11 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   505 00001F15 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   506 00001F19 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   507 00001F1D 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
   508 00001F20 6689451A            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusLo], ax
   509 00001F24 C1E810              <1>     shr eax, 10h
   510 00001F27 66894514            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusHi], ax
   511                              <1>     ;Directory sector updated and marked to be flushed to disk!
   512                              <1>     ;Now mark that the file has sectors not yet flushed to disk
   513                              <1>      
   514 00001F2B 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   515 00001F2C 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush
   516 00001F32 9D                  <1>     popfq
   517                              <1> .exit:
   518 00001F33 5D                  <1>     pop rbp
   519 00001F34 5F                  <1>     pop rdi
   520 00001F35 5B                  <1>     pop rbx
   521 00001F36 58                  <1>     pop rax
   522                              <1>     return
    18                              <2> %%_ret:
    19 00001F37 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   523                              <1> 
   524                              <1> growDirectory:
   525                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   526                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   527                              <1> ;                 eax = New Cluster number
   528                              <1> ;               TWO NON CF ERROR CASES.
   529                              <1> ;               If eax = -1 => disk full!
   530                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   531                              <1> ;        CF=CY => Something went wrong. Rip. 
   532 00001F38 53                  <1>     push rbx
   533 00001F39 51                  <1>     push rcx
   534 00001F3A 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   535 00001F40 85C0                <1>     test eax, eax
   536 00001F42 7424                <1>     jz .exit
   537 00001F44 E849EDFFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   538 00001F49 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   539 00001F4B B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   540 00001F50 E8ABEDFFFF          <1>     call allocateClusters   ;ebx has last cluster value
   541 00001F55 7211                <1>     jc .exit
   542 00001F57 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   543 00001F59 E8E1EEFFFF          <1>     call readFAT
   544 00001F5E 7208                <1>     jc .exit
   545 00001F60 E806000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   546 00001F65 7201                <1>     jc .exit
   547 00001F67 F8                  <1>     clc
   548                              <1> .exit:
   549 00001F68 59                  <1>     pop rcx
   550 00001F69 5B                  <1>     pop rbx
   551                              <1>     return   
    18                              <2> %%_ret:
    19 00001F6A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   552                              <1> sanitiseCluster:
   553                              <1> ;Sanitises the cluster in eax to all zeros
   554                              <1> ;Does not move file pointers
   555                              <1> ;Currently, is only called to sanitise subdirectory clusters
   556                              <1> ;Input: eax = Cluster number
   557                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   558                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   559                              <1> ;        If CF=CY => Error, exit
   560 00001F6B 50                  <1>     push rax
   561 00001F6C 53                  <1>     push rbx
   562 00001F6D 51                  <1>     push rcx
   563 00001F6E 52                  <1>     push rdx
   564 00001F6F 56                  <1>     push rsi
   565 00001F70 55                  <1>     push rbp
   566 00001F71 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   567 00001F78 E8E8ECFFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   568 00001F7D 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   569 00001F81 FFC2                <1>     inc edx ;Make it a count of sectors
   570                              <1> .getSectorInCluster:
   571 00001F83 E8A2EBFFFF          <1>     call getBufForDataNoFile  ;Get a generic data buffer in rbx
   572 00001F88 721E                <1>     jc .exitBad
   573 00001F8A 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   574 00001F8E 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   575 00001F92 31C0                <1>     xor eax, eax
   576 00001F94 F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   577 00001F96 E821EAFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   578                              <1> 
   579 00001F9B FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   580 00001F9D 740A                <1>     jz .exit    ;Jump if we done
   581 00001F9F 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   582 00001FA3 48FFC0              <1>     inc rax ;Goto next sector in cluster
   583 00001FA6 EBDB                <1>     jmp short .getSectorInCluster
   584                              <1> .exitBad:
   585 00001FA8 F9                  <1>     stc
   586                              <1> .exit:
   587 00001FA9 5D                  <1>     pop rbp
   588 00001FAA 5E                  <1>     pop rsi
   589 00001FAB 5A                  <1>     pop rdx
   590 00001FAC 59                  <1>     pop rcx
   591 00001FAD 5B                  <1>     pop rbx
   592 00001FAE 58                  <1>     pop rax
   593                              <1>     return
    18                              <2> %%_ret:
    19 00001FAF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    26                                  %include "./Source/Kernel/FileIO/devio.asm"
    27                              <1> ;This file contains the primitive dev io function, which will be called 
    28                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    29                              <1> ; make requests for device IO.
    30                              <1> 
    31                              <1> mainCharIO:
    32                              <1> ;This is the main IO clearing function for Char IO.
    33                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    34                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    35                              <1> ;
    36                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    37                              <1> ;       ah = {0,..., 5}, a subfunction number
    38                              <1> ;       Function 0: Read Char (drvREAD)
    39                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    40                              <1> ;       Function 2: Write Char (drvWrite)
    41                              <1> ; In the case the below functions are called for Disk/Net files
    42                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    43                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    44                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    45                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    46                              <1> ;
    47                              <1> ; If and only if ah = 02h, al = Char to write to device
    48                              <1> ;
    49                              <1> ;
    50                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    51                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    52                              <1> ;                                           ZF = NZ => Device ready (not busy)
    53                              <1> ;                                               If ND read, AL = Next Char
    54                              <1> ; For Files/Net:
    55                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    56                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    57                              <1> ;           For Read and ND Read:
    58                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    59                              <1> ;               Read returns ^Z on EOF.
    60                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    61                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    62                              <1> ;
    63                              <1> ;All registers preserved EXCEPT for ax and flags
    64                              <1> 
    65                              <1> ;Reference Request Header
    66                              <1> ;Common Section:
    67                              <1> ;    .hdrlen resb 1  ;Length of the request header
    68                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    69                              <1> ;    .cmdcde resb 1  ;Command code
    70                              <1> ;    .status resw 1  ;Status word
    71                              <1> ;    .devptr resq 1  ;Reserved. Unused
    72                              <1> ;Below used by calls 0,1,2,5
    73                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    74                              <1> ;Below used by calls 0,2
    75                              <1> ;    .bufptr resq 1
    76                              <1> ;    .tfrlen resd 1
    77                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    78                              <1> ;    .strtsc resq 1
    79                              <1> ;    .desptr resq 1
    80                              <1> 
    81                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    82 00001FB0 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    83 00001FB1 488D1D(7DC40300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    84 00001FB8 48891D(06C40300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    85 00001FBF 5B                  <1>     pop rbx
    86 00001FC0 C705(0EC40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    86 00001FC8 0000                <1>
    87 00001FCA 668905(7DC40300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    88 00001FD1 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    89 00001FD7 0F85A1000000        <1>     jnz .notChar
    90 00001FDD 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    91 00001FE3 0F8495000000        <1>     jz .notChar
    92                              <1> ;Char devices only here
    93 00001FE9 E83B360000          <1>     call dosPushRegs    ;Save context here
    94 00001FEE 488D1D4CE0FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    95 00001FF5 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    96 00001FF8 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    97 00001FFB 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    98 00001FFE 890D(F8C30300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    99                              <1>     ;Now set up cx for status word
   100 00002004 31C9                <1>     xor ecx, ecx
   101 00002006 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   102 00002009 7506                <1>     jne .skipBsySet
   103 0000200B 81C900020000        <1>     or ecx, drvBsyStatus
   104                              <1> .skipBsySet:
   105 00002011 66870D(FBC30300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   106                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   107 00002018 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   108 0000201F E8A82D0000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   109 00002024 668B3D(FBC30300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   110 0000202B F7C700800000        <1>     test edi, drvErrStatus
   111 00002031 752D                <1>     jnz .error
   112                              <1> .ignoreRet:
   113 00002033 803D(FAC30300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   114 0000203A 750C                <1>     jne .notNDRead
   115 0000203C 8A05(05C40300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   116 00002042 8805(7DC40300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   117                              <1> .notNDRead:
   118 00002048 8A25(FCC30300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   119 0000204E F6D4                <1>     not ah
   120 00002050 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   121 00002053 E8BA350000          <1>     call dosPopRegs ;Get back the context
   122 00002058 668B05(7DC40300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   123                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 0000205F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   124                              <1> .error:
   125                              <1>     ;cl has flags
   126 00002060 88CC                <1>     mov ah, cl
   127 00002062 E83C2C0000          <1>     call charDevErr
   128 00002067 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   129 00002069 750A                <1>     jne .errorIgnore
   130                              <1>     ;Fallthrough => Retry
   131 0000206B E8A2350000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   132 00002070 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   133                              <1> .errorIgnore:
   134                              <1>     ;Clear the busy bit in the status word
   135 00002075 8025(FCC30300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   136 0000207C EBB5                <1>     jmp short .ignoreRet
   137                              <1> .notChar:
   138                              <1> ;Just return with ZF=NZ for now
   139 0000207E 50                  <1>     push rax
   140 0000207F 31C0                <1>     xor eax, eax
   141 00002081 FEC0                <1>     inc al
   142 00002083 58                  <1>     pop rax
   143                              <1>     return
    18                              <2> %%_ret:
    19 00002084 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> 
   145                              <1> openSFT:
   146                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   147                              <1> ;Input: rdi = SFT pointer
   148 00002085 E89F350000          <1>     call dosPushRegs
   149 0000208A B00D                <1>     mov al, drvOPEN
   150 0000208C EB07                <1>     jmp short openCloseCommon
   151                              <1> closeSFT:
   152                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   153 0000208E E896350000          <1>     call dosPushRegs
   154 00002093 B00E                <1>     mov al, drvCLOSE
   155                              <1> openCloseCommon:
   156                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   157 00002095 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   158 0000209B 7469                <1>     jz .exit    ;Exit if so
   159 0000209D F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   160 000020A1 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   161 000020A5 7512                <1>     jnz .charDev
   162                              <1>     ;Here a disk drive, rdi is a DPB ptr
   163 000020A7 803D(36C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   164 000020AE 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   165 000020B0 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   166 000020B3 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   167 000020B5 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   168                              <1> .charDev:
   169 000020B9 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   170 000020BF 7445                <1>     jz .exit    ;No, exit!
   171 000020C1 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   172 000020C4 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   173 000020CB 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   174                              <1> .retryEP:
   175 000020CE 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   176 000020D1 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   177 000020D4 50                  <1>     push rax    ;Save the dword
   178 000020D5 E8F62C0000          <1>     call goDriver
   179 000020DA 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   180 000020E1 F7C700800000        <1>     test edi, drvErrStatus
   181 000020E7 741C                <1>     jz .exitPop
   182                              <1>     ;Error here, check if char or block drive
   183 000020E9 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   184 000020EF 7404                <1>     jz .blockError
   185                              <1>     ;Char error here
   186 000020F1 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   187 000020F3 EB04                <1>     jmp short .errorCmn
   188                              <1> .blockError:
   189 000020F5 88C8                <1>     mov al, cl  ;Move drive number into al
   190 000020F7 B406                <1>     mov ah, critData    ;Data on block dev error
   191                              <1> .errorCmn:
   192                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   193 000020F9 E8A52B0000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   194 000020FE B001                <1>     mov al, critRetry   ;al returns user response
   195 00002100 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   196 00002102 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   197 00002103 EBC9                <1>     jmp short .retryEP  ;Reset
   198                              <1> .exitPop:
   199 00002105 58                  <1>     pop rax    
   200                              <1> .exit:
   201 00002106 E807350000          <1>     call dosPopRegs
   202                              <1>     return
    18                              <2> %%_ret:
    19 0000210B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    27                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    28                              <1> ;-----------------------------------------------------------------------:
    29                              <1> ;                  DOS default char functions live here                 :
    30                              <1> ;                                                                       :
    31                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    32                              <1> ;                                                                       :
    33                              <1> ;Rules for the naming of the DOS functions                              :
    34                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    35                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    36                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    37                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    38                              <1> ;                                                                       :
    39                              <1> ;-----------------------------------------------------------------------:
    40                              <1> 
    41                              <1> charIn_BE:     ;ah = 01h
    42                              <1> ;Return char that has been read and echoed in al
    43 0000210C E866010000          <1>     call charIn_B
    44 00002111 50                  <1>     push rax
    45 00002112 E804000000          <1>     call charOut_B.in    ;Output it to screen
    46 00002117 58                  <1>     pop rax
    47                              <1>     return
    18                              <2> %%_ret:
    19 00002118 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    48                              <1> 
    49                              <1> charOut_B:       ;ah = 02h
    50                              <1> ;Bspace is regular cursor left, does not insert a blank
    51 00002119 88D0                <1>     mov al, dl
    52                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 4Fh, AX=1205h
    53 0000211B 3C20                <1>     cmp al, asciiCaret
    54 0000211D 7277                <1>     jb .control
    55 0000211F 3C7F                <1>     cmp al, DEL ;DEL char?
    56 00002121 7406                <1>     je .skipCurs
    57 00002123 FE05(2EC20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    58                              <1> .skipCurs:
    59 00002129 FE05(34C30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    60 0000212F 8025(34C30300)03    <1>     and byte [vConErr], 3
    61 00002136 56                  <1>     push rsi
    62 00002137 7507                <1>     jnz .skipErrorCheck
    63 00002139 50                  <1>     push rax
    64 0000213A E884020000          <1>     call vConCtrlCheck
    65 0000213F 58                  <1>     pop rax
    66                              <1> .skipErrorCheck:
    67 00002140 E80C020000          <1>     call outputOnStdout
    68 00002145 5E                  <1>     pop rsi
    69 00002146 F605(31C30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    70                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000214D 74C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    71 0000214F 53                  <1>     push rbx
    72 00002150 56                  <1>     push rsi
    73 00002151 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    74 00002156 E82F030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    75 0000215B 7236                <1>     jc .exitPrintEcho
    76                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    77 0000215D 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    78 00002161 F7C300800000        <1>     test ebx, devRedirDev
    79 00002167 752A                <1>     jnz .exitPrintEcho  ;Exit if STDOUT is redir
    80 00002169 F7C380000000        <1>     test ebx, devCharDev
    81 0000216F 7422                <1>     jz .exitPrintEcho
    82 00002171 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    83 00002176 E80F030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    84 0000217B 7216                <1>     jc .exitPrintEcho   ;Exit if handle closed
    85 0000217D 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    86 00002183 7407                <1>     jz .netSpool
    87 00002185 E8FB010000          <1>     call outputOnSFT
    88 0000218A EB07                <1>     jmp short .exitPrintEcho
    89                              <1> .netSpool:
    90 0000218C C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    91                              <1> .exitPrintEcho:
    92 00002193 5E                  <1>     pop rsi
    93 00002194 5B                  <1>     pop rbx
    94                              <1>     return
    18                              <2> %%_ret:
    19 00002195 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    95                              <1> .control:
    96 00002196 3C0D                <1>     cmp al, CR
    97 00002198 7425                <1>     je .newline
    98 0000219A 3C08                <1>     cmp al, BSP
    99 0000219C 742D                <1>     je .back
   100 0000219E 3C09                <1>     cmp al, TAB
   101 000021A0 7587                <1>     jne .skipCurs   ;Treat as normal
   102                              <1>     ;TAB key here
   103                              <1> .tab:
   104 000021A2 51                  <1>     push rcx
   105 000021A3 0FB60D(2EC20300)    <1>     movzx ecx, byte [vConCursPos]
   106 000021AA 80C9F8              <1>     or cl, ~7
   107 000021AD F6D9                <1>     neg cl
   108 000021AF 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   109                              <1> .tabloop:
   110 000021B2 B020                <1>     mov al, SPC
   111 000021B4 E862FFFFFF          <1>     call charOut_B.in   ;Output the char
   112 000021B9 FEC9                <1>     dec cl
   113 000021BB 75F5                <1>     jnz .tabloop
   114                              <1> .stopTab:
   115 000021BD 59                  <1>     pop rcx
   116                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 000021BE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   117                              <1> .newline:
   118 000021BF C605(2EC20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   119 000021C6 E95EFFFFFF          <1>     jmp .skipCurs   ;And echo 
   120                              <1> .back:
   121 000021CB FE0D(2EC20300)      <1>     dec byte [vConCursPos]
   122 000021D1 E953FFFFFF          <1>     jmp .skipCurs   ;And echo
   123                              <1> 
   124                              <1> auxIn_B:        ;ah = 03h
   125 000021D6 E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   126 000021DB BB03000000          <1>     mov ebx, 3
   127 000021E0 E8A5020000          <1>     call getCharDevSFT
   128                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000021E5 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   129                              <1> .auxloop:
   130 000021E7 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   131 000021E9 E8C2FDFFFF          <1>     call mainCharIO
   132 000021EE 7408                <1>     jz .signalLoop
   133 000021F0 30E4                <1>     xor ah, ah  ;Read the char in
   134 000021F2 E8B9FDFFFF          <1>     call mainCharIO
   135                              <1>     return
    18                              <2> %%_ret:
    19 000021F7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   136                              <1> .signalLoop:
   137 000021F8 E8A3010000          <1>     call callInt48h
   138 000021FD EBE8                <1>     jmp short .auxloop
   139                              <1> 
   140                              <1> auxOut_B:       ;ah = 04h
   141 000021FF 53                  <1>     push rbx
   142 00002200 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   143 00002205 EB06                <1>     jmp short auxOutCmn
   144                              <1> prnOut_B:       ;ah = 05h
   145 00002207 53                  <1>     push rbx
   146 00002208 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   147                              <1> auxOutCmn: ;Auxilliary output device common 
   148 0000220D 88D0                <1>     mov al, dl  ;Get the char into al
   149 0000220F 50                  <1>     push rax
   150 00002210 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   151 00002215 58                  <1>     pop rax
   152 00002216 56                  <1>     push rsi
   153 00002217 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   154 0000221C 5E                  <1>     pop rsi
   155 0000221D 5B                  <1>     pop rbx
   156                              <1>     return
    18                              <2> %%_ret:
    19 0000221E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   157                              <1> 
   158                              <1> directConIO:    ;ah = 06h
   159 0000221F 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   160 00002221 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   161 00002223 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   162                              <1> ;Here is the read char direct function
   163 00002229 31DB                <1>     xor ebx, ebx    
   164 0000222B E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   165                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002230 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   166 00002232 488B2D(DCC30300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   167 00002239 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   168 0000223B E870FDFFFF          <1>     call mainCharIO
   169 00002240 E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   170 00002245 7507                <1>     jnz .readChar
   171 00002247 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   172 0000224B 30C0                <1>     xor al, al  ;Set caller return code to 0
   173                              <1>     return
    18                              <2> %%_ret:
    19 0000224D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   174                              <1> .readChar:
   175 0000224E 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   176                              <1>     ;Fallthrough here to get the char at STDIN
   177                              <1> charIn:         ;ah = 07h
   178                              <1> ;Return char in al from STDIN without waiting
   179 00002252 31DB                <1>     xor ebx, ebx
   180 00002254 E831020000          <1>     call getCharDevSFT
   181                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002259 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   182 0000225B B401                <1>     mov ah, 01  ;ND read for char
   183 0000225D E84EFDFFFF          <1>     call mainCharIO
   184 00002262 750B                <1>     jnz .getChar
   185 00002264 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   186 00002266 CD4A                <1>     int 4Ah
   187 00002268 E833010000          <1>     call callInt48h
   188 0000226D EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   189                              <1> .getChar:
   190                              <1>     ;Get the char in al and exit
   191 0000226F 30E4                <1>     xor ah, ah
   192 00002271 E83AFDFFFF          <1>     call mainCharIO
   193                              <1>     return
    18                              <2> %%_ret:
    19 00002276 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   194                              <1> charIn_B:       ;ah = 08h
   195                              <1> ;Return char in al from STDIN
   196 00002277 56                  <1>     push rsi
   197                              <1> .readAgain:
   198 00002278 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   199                              <1>     ;Also sets rsi to point to the device SFT for 
   200 0000227D 7543                <1>     jnz .pullChar
   201 0000227F 803D(E9D80300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   202 00002286 7507                <1>     jne .skiplookahead
   203 00002288 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   204 0000228A E821FDFFFF          <1>     call mainCharIO
   205                              <1> .skiplookahead:
   206 0000228F B484                <1>     mov ah, 84h
   207 00002291 CD4A                <1>     int 4ah ;Multitasking keyboard loop
   208 00002293 66813D(B0D90300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   208 0000229B FF                  <1>
   209 0000229C 751B                <1>     jne .skipClockRead
   210 0000229E E886330000          <1>     call dosPushRegs
   211 000022A3 F8                  <1>     clc ;Clear CF, write primary header to backup
   212 000022A4 E882000000          <1>     call swapPrimaryHeader
   213 000022A9 E8CF060000          <1>     call readDateTimeRecord
   214 000022AE F9                  <1>     stc ;Set CF, write backup to primary header
   215 000022AF E877000000          <1>     call swapPrimaryHeader
   216 000022B4 E859330000          <1>     call dosPopRegs
   217                              <1> .skipClockRead:
   218 000022B9 66FF05(B0D90300)    <1>     inc word [keybTicks]
   219 000022C0 EBB6                <1>     jmp short .readAgain
   220                              <1> .pullChar:
   221 000022C2 30E4                <1>     xor ah, ah
   222 000022C4 E8E7FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   223 000022C9 5E                  <1>     pop rsi
   224 000022CA 3C00                <1>     cmp al, NUL ;Is this the null char?
   225 000022CC 7507                <1>     jne .exit
   226                              <1>     ;We are mid extended ascii, prevent printer toggling
   227 000022CE C605(AFD90300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   228                              <1> .exit:
   229                              <1>     return
    18                              <2> %%_ret:
    19 000022D5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   230                              <1> 
   231                              <1> printString_B:      ;ah = 09h
   232 000022D6 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   233                              <1> .ps0:
   234 000022D9 AC                  <1>     lodsb   ;Get char in al and inc rsi
   235 000022DA 3C24                <1>     cmp al, "$" ;End of string char?
   236                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000022DC 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   237 000022DE E838FEFFFF          <1>     call charOut_B.in
   238 000022E3 EBF4                <1>     jmp short .ps0
   239                              <1> 
   240                              <1> checkStdinStatus:  ;ah = 0Bh
   241                              <1> ;Returns the status of the driver controlling vCon
   242 000022E5 E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   243 000022EA B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   244                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000022EC 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   245 000022EE FEC8                <1>     dec al  ;Set al to -1 if char available
   246                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 000022F0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   247                              <1> clearbuffDoFunc:   ;ah = 0Ch
   248                              <1> ;Clears any buffers and issues a console read command (the command in al)
   249                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   250 000022F1 50                  <1>     push rax
   251 000022F2 52                  <1>     push rdx
   252 000022F3 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   253 000022F5 E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   254 000022FA 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   255 000022FC B404                <1>     mov ah, 04h ;Flush input buffers
   256 000022FE E8ADFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   257                              <1> .skipFlush:
   258 00002303 5A                  <1>     pop rdx
   259 00002304 58                  <1>     pop rax
   260 00002305 88C4                <1>     mov ah, al  ;Move function number into ah
   261 00002307 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   262 00002309 7507                <1>     jne .others
   263 0000230B 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   264 0000230E 7412                <1>     jz .bad ;Yes, exit
   265 00002310 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   266                              <1> .others:
   267 00002312 3C01                <1>     cmp al, 01h
   268 00002314 740F                <1>     je .callFunction
   269 00002316 3C07                <1>     cmp al, 07h
   270 00002318 740B                <1>     je .callFunction
   271 0000231A 3C08                <1>     cmp al, 08h
   272 0000231C 7407                <1>     je .callFunction
   273 0000231E 3C0A                <1>     cmp al, 0Ah
   274 00002320 7403                <1>     je .callFunction
   275                              <1> .bad:
   276 00002322 30C0                <1>     xor al, al
   277                              <1>     return
    18                              <2> %%_ret:
    19 00002324 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   278                              <1> .callFunction:
   279 00002325 FA                  <1>     cli ;Prepare to swap stack pointer
   280                              <1>     ;The below address avoids "properly" reentering DOS
   281                              <1>     ;We simply reuse the function dispatch aspect. 
   282                              <1>     ;this means we dont trash the caller's register frame 
   283 00002326 E916320000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   284                              <1> ;------------------------
   285                              <1> ;  Primitive functions  :
   286                              <1> ;------------------------
   287                              <1> swapPrimaryHeader:
   288                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   289                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   290 0000232B 56                  <1>     push rsi
   291 0000232C 57                  <1>     push rdi
   292 0000232D 51                  <1>     push rcx
   293 0000232E 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   293 00002337 00                  <1>
   294 00002338 488D35(22C40300)    <1>     lea rsi, primReqHdr
   295 0000233F 488D3D(82D90300)    <1>     lea rdi, bkupReqHdr
   296 00002346 7303                <1>     jnc .read
   297 00002348 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   298                              <1> .read:
   299 0000234B F3A4                <1>     rep movsb   ;Swap
   300 0000234D 59                  <1>     pop rcx
   301 0000234E 5F                  <1>     pop rdi
   302 0000234F 5E                  <1>     pop rsi
   303                              <1>     return
    18                              <2> %%_ret:
    19 00002350 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   304                              <1> outputOnStdout:
   305                              <1> ;Input: al = Char to output
   306                              <1> ;Output: CF=CY, all good
   307 00002351 53                  <1>     push rbx
   308 00002352 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   309 00002357 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   310 0000235C 7217                <1>     jc .exit
   311 0000235E 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   312 00002364 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   313 00002366 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   314 0000236A 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   315 00002370 7405                <1>     jz .notCharDevOrFast
   316 00002372 CD49                <1>     int 49h ;Fast output
   317                              <1> .exitOk:
   318 00002374 F8                  <1>     clc
   319                              <1> .exit:
   320 00002375 5B                  <1>     pop rbx
   321                              <1>     return
    18                              <2> %%_ret:
    19 00002376 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   322                              <1> .notCharDevOrFast:
   323 00002377 E809000000          <1>     call outputOnSFT
   324 0000237C 5B                  <1>     pop rbx
   325                              <1>     return
    18                              <2> %%_ret:
    19 0000237D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   326                              <1> 
   327                              <1> outputToHandle:
   328                              <1> ;Char to output must be in al
   329 0000237E E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   330                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002383 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   331                              <1> outputOnSFT:
   332                              <1> ;Output char in al to SFT in rsi
   333                              <1> ;Waits until device is not busy to send char.
   334                              <1> ;Calls int 48h if device busy
   335 00002385 50                  <1>     push rax
   336 00002386 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   337 00002388 E823FCFFFF          <1>     call mainCharIO
   338 0000238D 58                  <1>     pop rax
   339 0000238E 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   340 00002390 B402                <1>     mov ah, 02h ;Output char in al
   341 00002392 E819FCFFFF          <1>     call mainCharIO
   342 00002397 F8                  <1>     clc
   343                              <1>     return
    18                              <2> %%_ret:
    19 00002398 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   344                              <1> .signalLoop:
   345 00002399 E802000000          <1>     call callInt48h
   346 0000239E EBE5                <1>     jmp short outputOnSFT
   347                              <1> 
   348                              <1> callInt48h:
   349                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   350 000023A0 9C                  <1>     pushfq
   351 000023A1 F605(F6C30300)FF    <1>     test byte [int48Flag], -1
   352 000023A8 7417                <1>     jz .exit    ;If zero, not safe
   353 000023AA F605(69C30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   354 000023B1 750E                <1>     jnz .exit
   355                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   356 000023B3 FF35(F6C30300)      <1>     push qword [int48Flag] 
   357 000023B9 CD48                <1>     int 48h
   358 000023BB 8F05(F6C30300)      <1>     pop qword [int48Flag]    ;Return original value
   359                              <1> .exit:
   360 000023C1 9D                  <1>     popfq
   361                              <1>     return
    18                              <2> %%_ret:
    19 000023C2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   362                              <1> 
   363                              <1> 
   364                              <1> vConCtrlCheck:
   365                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   366                              <1> ; the processing. 
   367                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   368                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   369                              <1> ;
   370                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   371                              <1> ;^S will pause screen processing until another key is processed by vCon input
   372                              <1> ;^P will toggle the printer echo feature of the vConsole
   373                              <1> ;
   374                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   375                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   376                              <1> ;
   377                              <1> ;Output: 
   378                              <1> ;   CF=CY : Error
   379                              <1> ;   CF=NC : ...
   380                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   381                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   382 000023C3 E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   383 000023C8 53                  <1>     push rbx
   384 000023C9 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   385 000023CB E8BA000000          <1>     call getCharDevSFT
   386 000023D0 5B                  <1>     pop rbx
   387                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000023D1 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   388 000023D3 B401                <1>     mov ah, 01  ;Non destructively read CON
   389 000023D5 E8D6FBFFFF          <1>     call mainCharIO
   390 000023DA 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   391                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   392 000023DC 3C13                <1>     cmp al, DC3 ;^S ?
   393 000023DE 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   394 000023E0 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   395 000023E2 E8C9FBFFFF          <1>     call mainCharIO
   396 000023E7 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   397                              <1> .checkPrintOrExit:
   398 000023EC 3C10                <1>     cmp al, DLE ;Do we have ^P?
   399 000023EE 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   400 000023F0 3C03                <1>     cmp al, ETX ;Do we have ^C?
   401 000023F2 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   402                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   403                              <1>     return 
    18                              <2> %%_ret:
    19 000023F4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   404                              <1> .printToggle:
   405 000023F5 F615(31C30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   406 000023FB 53                  <1>     push rbx
   407 000023FC BB04000000          <1>     mov ebx, 4  ;PRN handle
   408 00002401 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   409 00002406 5B                  <1>     pop rbx
   410                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002407 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   411 00002409 57                  <1>     push rdi
   412 0000240A 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   413 0000240D 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   414 00002413 741D                <1>     jz .notNet
   415 00002415 50                  <1>     push rax
   416 00002416 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   417 0000241B CD4F                <1>     int 4Fh
   418 0000241D 58                  <1>     pop rax
   419 0000241E 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   420                              <1>     ;If something went wrong, turn off echo
   421 00002420 C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   422 00002427 50                  <1>     push rax
   423 00002428 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   424 0000242D CD4F                <1>     int 4Fh
   425 0000242F 58                  <1>     pop rax
   426 00002430 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   427                              <1> .notNet:
   428                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   429                              <1> ; 0Dh or 0Eh
   430 00002432 803D(31C30300)00    <1>     cmp byte [printEcho], 00
   431 00002439 7507                <1>     jnz .echoOn
   432 0000243B E84EFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   433 00002440 EB05                <1>     jmp short .printExit
   434                              <1> .echoOn:
   435 00002442 E83EFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   436                              <1> .printExit:
   437 00002447 5F                  <1>     pop rdi
   438                              <1>     return
    18                              <2> %%_ret:
    19 00002448 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   439                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   440 00002449 E852FFFFFF          <1>     call callInt48h
   441                              <1> .waitNextChar:   ;Here get next char
   442 0000244E B401                <1>     mov ah, 01h ;ND read
   443 00002450 E85BFBFFFF          <1>     call mainCharIO
   444 00002455 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   445                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   446 00002457 53                  <1>     push rbx
   447 00002458 31DB                <1>     xor ebx, ebx
   448 0000245A E82B000000          <1>     call getCharDevSFT
   449 0000245F 5B                  <1>     pop rbx
   450                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002460 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   451 00002462 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   452 00002464 E847FBFFFF          <1>     call mainCharIO
   453 00002469 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   454 0000246B 7514                <1>     jnz .checkBreak2
   455 0000246D 803D(AFD90300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   456 00002474 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   457 0000247A C605(AFD90300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   458                              <1> .checkBreak2:
   459 00002481 3C03                <1>     cmp al, ETX
   460                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002483 75C3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   461 00002485 E9D9280000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   462                              <1> 
   463                              <1> 
   464                              <1> getCharDevSFT:
   465                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   466                              <1> ;Input: bx = zero extended handle number
   467                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   468                              <1> ;        CF=CY => al = Error code, abort operation
   469 0000248A F605(F5C30300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   470 00002491 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   471                              <1> .getSFT:
   472 00002493 57                  <1>     push rdi
   473 00002494 E837190000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   474 00002499 4889FE              <1>     mov rsi, rdi
   475 0000249C 5F                  <1>     pop rdi
   476                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 0000249D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   477                              <1> .swap:
   478                              <1> ;workingSFT is only set for CON calls
   479 0000249E 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   480 000024A4 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   481 000024A6 488B35(74C60300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   482 000024AD F8                  <1>     clc
   483                              <1>     return
    18                              <2> %%_ret:
    19 000024AE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   484                              <1> 
   485                              <1> ;------------------------
   486                              <1> ;   Utility functions   :
   487                              <1> ;------------------------
   488                              <1> printCaretASCII:
   489                              <1> ;Input: al = Char to print with a caret
   490                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   491                              <1> ;First check if the char should be careted, and then print normally if so
   492 000024AF 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   493 000024B1 0F8364FCFFFF        <1>     jae charOut_B.in
   494 000024B7 3C09                <1>     cmp al, TAB
   495 000024B9 0F845CFCFFFF        <1>     je charOut_B.in
   496 000024BF 3C15                <1>     cmp al, NAK
   497 000024C1 0F8454FCFFFF        <1>     je charOut_B.in
   498 000024C7 3C14                <1>     cmp al, DC4
   499 000024C9 0F844CFCFFFF        <1>     je charOut_B.in
   500 000024CF 50                  <1>     push rax
   501 000024D0 B05E                <1>     mov al, "^" ;Get caret in place
   502 000024D2 E844FCFFFF          <1>     call charOut_B.in
   503 000024D7 58                  <1>     pop rax
   504 000024D8 0440                <1>     add al, "@" ;Turn into an ASCII Char
   505 000024DA E93CFCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   506                              <1> printCRLF:
   507 000024DF B00D                <1>     mov al, CR
   508 000024E1 E835FCFFFF          <1>     call charOut_B.in
   509 000024E6 B00A                <1>     mov al, LF
   510 000024E8 E92EFCFFFF          <1>     jmp charOut_B.in
   511                              <1> 
   512                              <1> checkBreak:
   513                              <1> ;Reads bytes from CON if there are any bytes to read and 
   514                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   515 000024ED 803D(6AC30300)01    <1>     cmp byte [inDOS], 1
   516                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000024F4 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   517                              <1> ;Returns in al the keystroke that is available IF one is available
   518                              <1> ; or al=0 if no keystroke available
   519 000024F6 53                  <1>     push rbx
   520 000024F7 56                  <1>     push rsi
   521 000024F8 488B35(4BC00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   522                              <1>     ;Place command code and a zero status word at the same time
   523 000024FF C705(4EC40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   523 00002507 0000                <1>
   524                              <1>     ;Place the packet size in the hdrlen field
   525 00002509 C605(4CC40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   526 00002510 488D1D(4CC40300)    <1>     lea rbx, critReqHdr
   527 00002517 E8B4280000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   528                              <1>     ;Check if the busy bit is set (No keystroke available)
   529 0000251C 66F705(4FC40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   529 00002524 02                  <1>
   530 00002525 7405                <1>     jz .charFound
   531                              <1> .exit:
   532 00002527 30C0                <1>     xor al, al
   533 00002529 5E                  <1>     pop rsi
   534 0000252A 5B                  <1>     pop rbx
   535                              <1>     return
    18                              <2> %%_ret:
    19 0000252B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   536                              <1> .charFound:
   537                              <1> ;Keystroke available, proceed
   538 0000252C 8A05(59C40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   539 00002532 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   540 00002534 75F1                <1>     jne .exit   ;If not equal exit
   541                              <1> ;Now we pull the char out of the buffer
   542 00002536 C705(4EC40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   542 0000253E 0000                <1>
   543 00002540 C605(4CC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   544                              <1>     ;Place pointers and number of chars
   545 00002547 C705(62C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   545 0000254F 0000                <1>
   546                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   547 00002551 488D05(59C40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   548 00002558 488905(5AC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   549 0000255F E86C280000          <1>     call goDriver   ;RSI and RBX as before
   550 00002564 E9FA270000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   551                              <1> 
   552                              <1> vConSwapDriver:
   553                              <1> ;Sets up the vCon to use the alternative SFT pointer
   554 00002569 57                  <1>     push rdi
   555 0000256A C605(F5C30300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   556 00002571 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   557 00002578 48893D(74C60300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   558 0000257F 5F                  <1>     pop rdi
   559                              <1>     return
    18                              <2> %%_ret:
    19 00002580 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> vConRetDriver:
   562                              <1> ;Returns the original driver (sets flag down)
   563 00002581 C605(F5C30300)00    <1>     mov byte [vConDrvSwp], 0
   564                              <1>     return
    18                              <2> %%_ret:
    19 00002588 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   565                              <1> 
   566                              <1> ;--------------------------------------------------
   567                              <1> ;      Main Keyboard Buffered Input Function      :
   568                              <1> ;--------------------------------------------------
   569                              <1> buffCharInput_BE:  ;ah = 0Ah
   570                              <1> ;Buffer pointer in rdx
   571                              <1> ; byte [rdx + 0], buffer length
   572                              <1> ; byte [rdx + 1], number of chars in buffer
   573                              <1> ; byte [rdx + 2], buffer start
   574                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   575                              <1> ;Register use
   576                              <1> ; dh = Char offset in internal buffer
   577                              <1> ; dl = Buffer length
   578                              <1> ; bh = Char offset in user buffer
   579                              <1> ; bl = Number of chars already in the buffer
   580                              <1> ; rdi = Internal buffer
   581                              <1> ; rsi = User buffer
   582 00002589 4889D6              <1>     mov rsi, rdx
   583 0000258C 66AD                <1>     lodsw   ;Get buffer metadata in ax
   584 0000258E 84C0                <1>     test al, al
   585                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002590 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   586 00002592 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   587 00002595 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   588 00002597 7606                <1>     jbe .avoidcheck
   589 00002599 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   590 0000259D 7402                <1>     je .functionKeyOk
   591                              <1> .avoidcheck:
   592 0000259F 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   593                              <1> .functionKeyOk:
   594 000025A1 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   595 000025A4 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   596                              <1> .breakEP:
   597 000025A6 8A05(2EC20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   598 000025AC 8805(2FC20300)      <1>     mov byte [vConCurCnt], al
   599 000025B2 56                  <1>     push rsi    ;Push user buffer address
   600 000025B3 488D3D(30C20300)    <1>     lea rdi, vConBuffer
   601 000025BA C605(5DC60300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   602                              <1> .mainLoop:
   603 000025C1 E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   604 000025C6 3C0A                <1>     cmp al, LF
   605 000025C8 7505                <1>     jne .checkControlChars
   606                              <1> .mainLoop2:
   607 000025CA E8A8FCFFFF          <1>     call charIn_B
   608                              <1> .checkControlChars:
   609 000025CF 3C06                <1>     cmp al, ACK
   610 000025D1 74F7                <1>     je .mainLoop2   ;Get another char
   611 000025D3 3A0588DAFFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   612 000025D9 0F8426010000        <1>     je .escape
   613 000025DF 3C7F                <1>     cmp al, DEL
   614 000025E1 0F8489000000        <1>     je .delete
   615 000025E7 3C08                <1>     cmp al, BSP
   616 000025E9 0F8481000000        <1>     je .delete
   617 000025EF 3C17                <1>     cmp al, ETB
   618                              <1>     ;Add space for patched jump instructions
   619 000025F1 9090909090          <1>     db 5 dup (90h)  ;NOP
   620 000025F6 3C15                <1>     cmp al, NAK
   621 000025F8 9090909090          <1>     db 5 dup (90h)
   622 000025FD 3C0D                <1>     cmp al, CR
   623 000025FF 744C                <1>     je .carriageReturn
   624 00002601 3C0A                <1>     cmp al, LF
   625 00002603 7461                <1>     je .lineFeed
   626 00002605 3A0557DAFFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   627 0000260B 7429                <1>     je .break
   628                              <1> .checkIfCanInsert:
   629 0000260D 38D6                <1>     cmp dh, dl
   630 0000260F 731C                <1>     jae .bufOflw
   631 00002611 AA                  <1>     stosb   ;Store the byte and increment rdi!
   632 00002612 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   633 00002614 E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   634 00002619 803D(5DC60300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   635 00002620 75A8                <1>     jne .mainLoop2
   636                              <1>     ;IF not in insert mode, we fall here
   637                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   638                              <1>     ; or insert chars if needed.
   639 00002622 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   640 00002624 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   641 00002626 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   642 00002629 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   643 0000262B EB9D                <1>     jmp short .mainLoop2
   644                              <1> .bufOflw:
   645                              <1> ;Buffer overflow
   646 0000262D B007                <1>     mov al, BEL ;Sound the bell
   647 0000262F E8E7FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   648 00002634 EB94                <1>     jmp short .mainLoop2
   649                              <1> .break:
   650                              <1> ;Break, Place a "\", and do a CRLF
   651 00002636 B05C                <1>     mov al, "\"
   652 00002638 E8DEFAFFFF          <1>     call charOut_B.in
   653 0000263D 5E                  <1>     pop rsi ;Realign stack
   654                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   655 0000263E E89CFEFFFF          <1>     call printCRLF
   656                              <1>     ;Align to next tabstop
   657 00002643 E85AFBFFFF          <1>     call charOut_B.tab
   658 00002648 E959FFFFFF          <1>     jmp .breakEP
   659                              <1> .carriageReturn:
   660 0000264D AA                  <1>     stosb
   661 0000264E E8C8FAFFFF          <1>     call charOut_B.in
   662 00002653 5F                  <1>     pop rdi ;User buffer address was pushed 
   663 00002654 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   664 00002657 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   665                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   666 00002659 488D35(30C20300)    <1>     lea rsi, vConBuffer
   667 00002660 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   668 00002663 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   669                              <1>     return
    18                              <2> %%_ret:
    19 00002665 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   670                              <1> .lineFeed:
   671 00002666 E874FEFFFF          <1>     call printCRLF
   672 0000266B E95AFFFFFF          <1>     jmp .mainLoop2
   673                              <1> .delete:
   674 00002670 E805000000          <1>     call .removeChar
   675 00002675 E950FFFFFF          <1>     jmp .mainLoop2
   676                              <1> .removeChar:
   677 0000267A 84F6                <1>     test dh, dh ;Is char count 0?
   678 0000267C 741C                <1>     jz .normalChar   ;If so, skip going back!
   679 0000267E E868000000          <1>     call .vConErase
   680 00002683 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   681 00002685 3C20                <1>     cmp al, SPC
   682 00002687 7311                <1>     jae .normalChar
   683 00002689 3C09                <1>     cmp al, TAB
   684 0000268B 7420                <1>     je .eraTab
   685 0000268D 3C15                <1>     cmp al, NAK
   686 0000268F 7409                <1>     je .normalChar
   687 00002691 3C14                <1>     cmp al, DC4
   688 00002693 7405                <1>     je .normalChar
   689 00002695 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   690                              <1> .normalChar:
   691 0000269A 803D(5DC60300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   692                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000026A1 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   693 000026A3 84FF                <1>     test bh, bh ;Beginning of user buffer?
   694                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000026A5 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   695 000026A7 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   696 000026AA FECF                <1>     dec bh
   697                              <1>     return
    18                              <2> %%_ret:
    19 000026AC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   698                              <1> .eraTab:
   699                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   700                              <1> ; up to a tab stop worth of space chars printed
   701 000026AD 57                  <1>     push rdi
   702 000026AE 48FFCF              <1>     dec rdi
   703 000026B1 FD                  <1>     std ;Go backwards
   704 000026B2 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   705 000026B5 B020                <1>     mov al, SPC
   706 000026B7 53                  <1>     push rbx
   707 000026B8 BB07000000          <1>     mov ebx, 7
   708 000026BD 67E30D              <1>     jecxz .onTabstop
   709                              <1> .scanString:
   710 000026C0 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   711 000026C1 7608                <1>     jbe .notChar    ;No, skip handling
   712 000026C3 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   713 000026C7 740A                <1>     je .tabChar
   714 000026C9 FECB                <1>     dec bl
   715                              <1> .notChar:
   716 000026CB E2F3                <1>     loop .scanString
   717                              <1> .onTabstop:
   718 000026CD 2A1D(2FC20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   719                              <1> .tabChar:
   720 000026D3 28F3                <1>     sub bl, dh  ;Same on tabstop
   721 000026D5 00D9                <1>     add cl, bl
   722 000026D7 80E107              <1>     and cl, 7
   723 000026DA 5B                  <1>     pop rbx
   724 000026DB 5F                  <1>     pop rdi
   725 000026DC FC                  <1>     cld
   726 000026DD 74BB                <1>     jz .normalChar
   727                              <1>     ;Now erase all the spaces placed on the vCon
   728                              <1> .vConDelTab:
   729 000026DF E80C000000          <1>     call .vConEraseNoDec
   730 000026E4 E2F9                <1>     loop .vConDelTab
   731 000026E6 E9AFFFFFFF          <1>     jmp .normalChar
   732                              <1> .vConErase:
   733                              <1> ;Erase the char on the vCon
   734                              <1> ;Return through the output function
   735 000026EB 48FFCF              <1>     dec rdi ;Go back a space in the 
   736 000026EE FECE                <1>     dec dh  ;Decrement char count in the buffer
   737                              <1> .vConEraseNoDec:
   738 000026F0 B008                <1>     mov al, BSP ;Move cursor back
   739 000026F2 E824FAFFFF          <1>     call charOut_B.in
   740 000026F7 B020                <1>     mov al, SPC ;Replace with a space
   741 000026F9 E81DFAFFFF          <1>     call charOut_B.in
   742 000026FE B008                <1>     mov al, BSP ;Move cursor back again
   743 00002700 E916FAFFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   744                              <1> .escape:
   745                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   746                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   747                              <1> ; including the function keys.
   748 00002705 FF254ED9FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   749                              <1> .f2:
   750 0000270B E846000000          <1>     call .fCommon2
   751 00002710 EB0C                <1>     jmp short .fCommon
   752                              <1> .f3:
   753 00002712 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   754 00002715 28F9                <1>     sub cl, bh  ;Sub our current position
   755 00002717 EB05                <1>     jmp short .fCommon
   756                              <1> .f1:
   757 00002719 B901000000          <1>     mov ecx, 1  ;Get one char
   758                              <1> .fCommon:
   759 0000271E C605(5DC60300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   760 00002725 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   761 00002727 0F849DFEFFFF        <1>     je .mainLoop2
   762 0000272D 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   763 0000272F 0F8495FEFFFF        <1>     je .mainLoop2
   764                              <1>     ;Else, copy byte by byte, and retain char in al
   765 00002735 AC                  <1>     lodsb
   766 00002736 AA                  <1>     stosb
   767 00002737 E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   768 0000273C FEC7                <1>     inc bh
   769 0000273E FEC6                <1>     inc dh
   770 00002740 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   771 00002742 E983FEFFFF          <1>     jmp .mainLoop2
   772                              <1> .f4:
   773 00002747 E80A000000          <1>     call .fCommon2
   774 0000274C 4801CE              <1>     add rsi, rcx
   775 0000274F 00CF                <1>     add bh, cl
   776 00002751 E974FEFFFF          <1>     jmp .mainLoop2
   777                              <1> .fCommon2:
   778 00002756 E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   779 0000275B 3A0500D9FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   780 00002761 750B                <1>     jne .fnotEscape
   781                              <1>     ;Get another char if they typed escape and force it in the buffer
   782                              <1>     ; Do not return to caller
   783 00002763 E80FFBFFFF          <1>     call charIn_B
   784                              <1> .fforceExit:
   785 00002768 59                  <1>     pop rcx ;Get original return address from stack
   786 00002769 E95CFEFFFF          <1>     jmp .mainLoop2
   787                              <1> .fnotEscape:
   788 0000276E 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   789 00002771 28F9                <1>     sub cl, bh
   790 00002773 74F3                <1>     jz .fforceExit
   791 00002775 FFC9                <1>     dec ecx
   792 00002777 74EF                <1>     jz .fforceExit
   793 00002779 57                  <1>     push rdi
   794 0000277A 4889F7              <1>     mov rdi, rsi
   795 0000277D 48FFC7              <1>     inc rdi
   796 00002780 F2AE                <1>     repne scasb ;Search for the char to start printing from
   797 00002782 5F                  <1>     pop rdi
   798 00002783 75E3                <1>     jne .fforceExit ;If char not found, return
   799 00002785 F6D1                <1>     not cl
   800 00002787 00D9                <1>     add cl, bl
   801 00002789 28F9                <1>     sub cl, bh
   802                              <1>     return
    18                              <2> %%_ret:
    19 0000278B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   803                              <1> .f5:
   804 0000278C B040                <1>     mov al, "@"
   805 0000278E E888F9FFFF          <1>     call charOut_B.in   ;Print the char
   806 00002793 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   807 00002794 57                  <1>     push rdi
   808 00002795 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   809 0000279A 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   810 0000279B 88F3                <1>     mov bl, dh
   811 0000279D E99CFEFFFF          <1>     jmp .breakAlt
   812                              <1> .f6:
   813                              <1> ;If the user wants to insert a EOF, they can use F6
   814 000027A2 B01A                <1>     mov al, EOF
   815 000027A4 E964FEFFFF          <1>     jmp .checkIfCanInsert
   816                              <1> .f7:
   817                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   818 000027A9 8A05B2D8FFFF        <1>     mov al, byte [extESC]
   819 000027AF E959FEFFFF          <1>     jmp .checkIfCanInsert
   820                              <1> .toggleIns:
   821 000027B4 F615(5DC60300)      <1>     not byte [vConInsert]   ;Toggle
   822                              <1>     return
    18                              <2> %%_ret:
    19 000027BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   823                              <1> .eDel:
   824 000027BB 38DF                <1>     cmp bh, bl
   825 000027BD 0F8407FEFFFF        <1>     je .mainLoop2
   826 000027C3 FEC7                <1>     inc bh
   827 000027C5 48FFC6              <1>     inc rsi
   828 000027C8 E9FDFDFFFF          <1>     jmp .mainLoop2
   829                              <1> 
   830                              <1> editKeys:
   831                              <1> ;Our Default Extended keys handler
   832 000027CD E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   833 000027D2 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   834 000027D7 57                  <1>     push rdi    ;Preserve rdi
   835 000027D8 488D3D84D8FFFF      <1>     lea rdi, extKeyTbl
   836 000027DF 57                  <1>     push rdi
   837                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   838                              <1>     ; offset of function from extKeyTbl
   839                              <1> .lp:
   840 000027E0 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   841 000027E1 7411                <1>     je .charFound
   842 000027E3 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   843 000027E5 0F84DFFDFFFF        <1>     jz buffCharInput_BE.mainLoop2
   844 000027EB 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   845 000027F2 EBEC                <1>     jmp short .lp
   846                              <1> .charFound:
   847 000027F4 59                  <1>     pop rcx ;Pop back the effective address of the table
   848 000027F5 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   849 000027F9 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   850 000027FC 5F                  <1>     pop rdi
   851 000027FD FFE1                <1>     jmp rcx
    28                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    29                              <1> ;Major kernel date time functions and subroutines
    30                              <1> 
    31                              <1> getDate:           ;ah = 2Ah
    32 000027FF E879010000          <1>     call readDateTimeRecord ;Update date if necessary
    33 00002804 E8E3290000          <1>     call getUserRegs
    34 00002809 668B15(EFC30300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
    35                              <1> ;    mov dh, byte [monthOfYear]
    36 00002810 0FB60D(F1C30300)    <1>     movzx ecx, byte [years]
    37 00002817 8A05(F4C30300)      <1>     mov al, byte [dayOfWeek]
    38 0000281D 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    39 00002821 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    40                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 00002825 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    41                              <1> setDate:           ;ah = 2Bh
    42                              <1> ;	CX = year (1980-2099)
    43                              <1> ;   DH = month (1-12)
    44                              <1> ;	DL = day (1-31)
    45 00002826 E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    46                              <1>     return
    18                              <2> %%_ret:
    19 0000282B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    47                              <1> getTime:           ;ah = 2Ch
    48 0000282C E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    49 00002831 E8B6290000          <1>     call getUserRegs
    50 00002836 668B0D(7AC40300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.hours]
    51 0000283D 668B15(7BC40300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    52 00002844 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    53 00002848 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    54                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 0000284C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    55                              <1> setTime:           ;ah = 2Dh
    56                              <1> ;   CH = hour (0-23)
    57                              <1> ;	CL = minutes (0-59)
    58                              <1> ;	DH = seconds (0-59)
    59                              <1> ;	DL = hundredths (0-99)
    60 0000284D 80FD17              <1>     cmp ch, 23
    61 00002850 7749                <1>     ja .exitBad
    62 00002852 80F93B              <1>     cmp cl, 59
    63 00002855 7744                <1>     ja .exitBad
    64 00002857 80FE3B              <1>     cmp dh, 59
    65 0000285A 773F                <1>     ja .exitBad
    66 0000285C 80FA63              <1>     cmp dl, 99
    67 0000285F 773A                <1>     ja .exitBad
    68                              <1> ;Now we read date (updating internal count if necessary)
    69 00002861 E817010000          <1>     call readDateTimeRecord
    70 00002866 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    71 0000286D 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    72 00002874 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    73 00002877 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    74 0000287B 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    75 0000287F B906000000          <1>     mov ecx, 6
    76 00002884 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    77 00002887 E8D8270000          <1>     call primReqWriteSetup   ;rbx now points to request header
    78 0000288C 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    79 00002893 E838250000          <1>     call goDriver
    80 00002898 30C0                <1>     xor al, al
    81                              <1>     return
    18                              <2> %%_ret:
    19 0000289A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    82                              <1> .exitBad:
    83 0000289B B0FF                <1>     mov al, -1
    84                              <1>     return
    18                              <2> %%_ret:
    19 0000289D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    85                              <1> ;------------------------
    86                              <1> ;   Utility functions   :
    87                              <1> ;------------------------
    88                              <1> writeDate:
    89 0000289E 6681F97800          <1>     cmp cx, 120
    90 000028A3 0F83D1000000        <1>     jae .exitBad
    91 000028A9 80FE0C              <1>     cmp dh, 12
    92 000028AC 0F87C8000000        <1>     ja .exitBad
    93 000028B2 80FA1F              <1>     cmp dl, 31
    94 000028B5 0F87BF000000        <1>     ja .exitBad
    95 000028BB 668915(EFC30300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    96                              <1>     ;mov byte [monthOfYear], dh
    97 000028C2 880D(F1C30300)      <1>     mov byte [years], cl    ;Save the years count
    98 000028C8 E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    99 000028CD 88CD                <1>     mov ch, cl ;Get years count in ch
   100 000028CF C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
   101 000028D2 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
   102 000028D5 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
   103 000028D8 BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
   104 000028DD F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
   105                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
   106 000028DF 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
   107 000028E2 67E316              <1>     jecxz .addDay    ;Skip adding years
   108 000028E5 056E010000          <1>     add eax, 366    ;First add for a leap year
   109                              <1> .addYears:
   110 000028EA FFC9                <1>     dec ecx
   111 000028EC 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
   112 000028EF 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   113 000028F4 EBF4                <1>     jmp short .addYears
   114                              <1> .addLeap:
   115 000028F6 056E010000          <1>     add eax, 366    ;Add the days in the leap year
   116                              <1> .addDay:
   117 000028FB 89C2                <1>     mov edx, eax    ;Save this number in edx
   118                              <1>     ;Now to add day offset
   119 000028FD 0FB60D(F0C30300)    <1>     movzx ecx, byte [monthOfYear]
   120 00002904 488D3579D7FFFF      <1>     lea rsi, monthsTbl
   121                              <1> .addDaysInMonth:
   122 0000290B FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   123 0000290D 67E308              <1>     jecxz .addMonthOffset
   124 00002910 AC                  <1>     lodsb   ;Get the number of days in the month in al
   125 00002911 0FB6C0              <1>     movzx eax, al
   126 00002914 01C2                <1>     add edx, eax
   127 00002916 EBF3                <1>     jmp short .addDaysInMonth
   128                              <1> .addMonthOffset:
   129 00002918 0FB60D(EFC30300)    <1>     movzx ecx, byte [dayOfMonth]
   130 0000291F FFC9                <1>     dec ecx
   131 00002921 01CA                <1>     add edx, ecx    ;Add month offset
   132                              <1>     ;edx has the number of days since 01/01/1980
   133 00002923 668915(F2C30300)    <1>     mov word [daysOffset], dx   ;Store!
   134                              <1> ;Now read and then write CLOCKrecrd
   135 0000292A 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   136 00002931 B906000000          <1>     mov ecx, 6
   137 00002936 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   138 00002939 E831270000          <1>     call primReqReadSetup   ;rbx now points to request header
   139 0000293E 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   140 00002945 E886240000          <1>     call goDriver
   141                              <1> ;Now we change daycount and write it back
   142 0000294A 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   143 00002951 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   144 00002958 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   145 0000295B B906000000          <1>     mov ecx, 6
   146 00002960 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   147 00002963 E8FC260000          <1>     call primReqWriteSetup   ;rbx now points to request header
   148 00002968 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   149 0000296F E85C240000          <1>     call goDriver
   150 00002974 E8AE000000          <1>     call setDayofWeek
   151                              <1>     return
    18                              <2> %%_ret:
    19 00002979 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   152                              <1> .exitBad:
   153 0000297A B0FF                <1>     mov al, -1
   154                              <1>     return
    18                              <2> %%_ret:
    19 0000297C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   155                              <1> 
   156                              <1> readDateTimeRecord:
   157                              <1> ;Will read the clock using the primary request header
   158                              <1> ;Preserves all regs except eax and flags
   159 0000297D 53                  <1>     push rbx
   160 0000297E 51                  <1>     push rcx
   161 0000297F 52                  <1>     push rdx
   162 00002980 56                  <1>     push rsi
   163 00002981 55                  <1>     push rbp
   164                              <1> 
   165 00002982 66C705(B0D90300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   165 0000298A 00                  <1>
   166 0000298B 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   167 00002992 B906000000          <1>     mov ecx, 6
   168 00002997 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   169                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   170                              <1> ; rbx = Data storage buffer ptr
   171                              <1> ; ecx = Number of sectors to transfer
   172                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   173 0000299A E8D0260000          <1>     call primReqReadSetup   ;rbx now points to request header
   174 0000299F 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   175 000029A6 E825240000          <1>     call goDriver
   176 000029AB 0FB705(77C40300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   177                              <1> ;Here we have:  ax = Days since 1/1/1980
   178                              <1> ;Updates the internal date fields
   179                              <1> ;Internal time fields are in the clock record
   180                              <1> ;So now we check if the number of days since 1980 are the same.
   181                              <1> ;If so, we can skip updating.
   182 000029B2 663B05(F2C30300)    <1>     cmp ax, word [daysOffset]
   183 000029B9 7466                <1>     je .exit    ;Return if equal
   184 000029BB 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   185 000029C0 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   186 000029C2 668905(F2C30300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   187                              <1>     ;Now want to update years, month and day fields
   188                              <1>     ;ax has the number of days since 01/01/1980
   189                              <1>     ;Get days in a 4 year period
   190 000029C9 BBB5050000          <1>     mov ebx, 365*4 + 1
   191 000029CE 31D2                <1>     xor edx, edx
   192 000029D0 89D1                <1>     mov ecx, edx  ;Zero ecx
   193 000029D2 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   194                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   195                              <1>     ;edx has offset into current 4 year bunch
   196 000029D4 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   197 000029D9 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   198 000029DB 7210                <1>     jb .foundBunch
   199 000029DD 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   200 000029DF FFC1                <1>     inc ecx
   201 000029E1 FFCB                <1>     dec ebx ;Number of days in a normal year
   202                              <1> .findBunch:
   203 000029E3 39DA                <1>     cmp edx, ebx
   204 000029E5 7206                <1>     jb .foundBunch
   205 000029E7 29DA                <1>     sub edx, ebx
   206 000029E9 FFC1                <1>     inc ecx
   207 000029EB EBF6                <1>     jmp short .findBunch
   208                              <1> .foundBunch:
   209                              <1>     ;If ecx = 0, february has 29 days!
   210                              <1>     ;eax has number of four year bunches elapsed since 1980
   211 000029ED C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   212 000029F0 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   213                              <1>     ;ecx now has the number of years since 1980
   214 000029F2 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   215                              <1> ;edx has number of days into the year we are in
   216                              <1> ;eax has number of days in Feb for this year
   217 000029F7 488D3586D6FFFF      <1>     lea rsi, monthsTbl
   218 000029FE 31C9                <1>     xor ecx, ecx    ;Use as month counter
   219                              <1> .monthSearch:
   220 00002A00 FFC1                <1>     inc ecx ;Start from 1
   221 00002A02 AC                  <1>     lodsb   ;Get value in al and inc rsi
   222 00002A03 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   223 00002A06 39C2                <1>     cmp edx, eax
   224 00002A08 7204                <1>     jb .monthFound
   225 00002A0A 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   226 00002A0C EBF2                <1>     jmp short .monthSearch
   227                              <1> .monthFound:
   228                              <1>     ;cl has the month (01h-0Ch)
   229                              <1>     ;dl has the day of the month - 1
   230 00002A0E FFC2                <1>     inc edx
   231 00002A10 880D(F0C30300)      <1>     mov byte [monthOfYear], cl
   232 00002A16 8815(EFC30300)      <1>     mov byte [dayOfMonth], dl
   233 00002A1C E806000000          <1>     call setDayofWeek
   234                              <1> .exit:
   235 00002A21 5D                  <1>     pop rbp
   236 00002A22 5E                  <1>     pop rsi
   237 00002A23 5A                  <1>     pop rdx
   238 00002A24 59                  <1>     pop rcx
   239 00002A25 5B                  <1>     pop rbx
   240                              <1>     return  ;Return with ZF is date set, or same day
    18                              <2> %%_ret:
    19 00002A26 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   241                              <1> 
   242                              <1> setDayofWeek:
   243                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   244 00002A27 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   245 00002A2E 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   246                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   247 00002A33 31D2                <1>     xor edx, edx
   248 00002A35 B907000000          <1>     mov ecx, 7   
   249 00002A3A F7F1                <1>     div ecx  ;Get remainder in dl
   250 00002A3C 8815(F4C30300)      <1>     mov byte [dayOfWeek], dl
   251                              <1> ;Set ZF to indicate all ok
   252 00002A42 31C0                <1>     xor eax, eax
   253                              <1>     return
    18                              <2> %%_ret:
    19 00002A44 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   254                              <1> 
   255                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   256                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   257                              <1> ;Input: cl = Year - 1980
   258                              <1> ;Output: al = Number of days in February
   259 00002A45 880D(F1C30300)      <1>     mov byte [years], cl    ;Save this figure
   260 00002A4B F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   261 00002A4E 51                  <1>     push rcx
   262 00002A4F 57                  <1>     push rdi
   263 00002A50 B81C000000          <1>     mov eax, 28  ;Usual days in february
   264 00002A55 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   265 00002A5A 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   266 00002A5D 488D3D21D6FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   267 00002A64 AA                  <1>     stosb   ;Store the word in rdi
   268 00002A65 5F                  <1>     pop rdi
   269 00002A66 59                  <1>     pop rcx
   270                              <1>     return
    18                              <2> %%_ret:
    19 00002A67 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   271                              <1> 
   272                              <1> getDirDTwords:
   273                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   274                              <1> ; High word of eax = Date
   275                              <1> ; Low word of eax = Time
   276                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   277                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   278                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   279                              <1> 
   280                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   281                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   282                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   283                              <1> ;Preserves all registers except eax
   284 00002A68 53                  <1>     push rbx
   285 00002A69 0FB61D(7CC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   286 00002A70 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   287 00002A72 89D8                <1>     mov eax, ebx
   288 00002A74 0FB61D(79C40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   289 00002A7B C1E305              <1>     shl ebx, 5
   290 00002A7E 09D8                <1>     or eax, ebx
   291 00002A80 0FB61D(7AC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   292 00002A87 C1E30B              <1>     shl ebx, 11
   293 00002A8A 09D8                <1>     or eax, ebx
   294 00002A8C 0FB61D(EFC30300)    <1>     movzx ebx, byte [dayOfMonth]
   295 00002A93 C1E310              <1>     shl ebx, 16
   296 00002A96 09D8                <1>     or eax, ebx
   297 00002A98 0FB61D(F0C30300)    <1>     movzx ebx, byte [monthOfYear]
   298 00002A9F C1E315              <1>     shl ebx, 21
   299 00002AA2 09D8                <1>     or eax, ebx
   300 00002AA4 0FB61D(F1C30300)    <1>     movzx ebx, byte [years]
   301 00002AAB C1E319              <1>     shl ebx, 25
   302 00002AAE 09D8                <1>     or eax, ebx
   303 00002AB0 5B                  <1>     pop rbx
   304                              <1>     return
    18                              <2> %%_ret:
    19 00002AB1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   305                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   306                              <1> ;Returns edx = time
   307                              <1> ;        eax = date
   308                              <1> ; Formally ax and dx but we clear the upper words
   309 00002AB2 E8C6FEFFFF          <1>     call readDateTimeRecord
   310 00002AB7 E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   311 00002ABC 31D2                <1>     xor edx, edx
   312 00002ABE 6689C2              <1>     mov dx, ax  ;Save time
   313 00002AC1 C1E810              <1>     shr eax, 10h    ;Get date into rax
   314                              <1>     return
    18                              <2> %%_ret:
    19 00002AC4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    29                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    30                              <1> 
    31                              <1> 
    32                              <1> ;FCB functions. Except where explicitly stated, if the selected drive 
    33                              <1> ; for the operation is FAT 32, the request will immediately fail, unless 
    34                              <1> ; the operation is to create\delete\find the volume label. 
    35                              <1> ;FCBs may only be used to access data files on FAT 12/16 drives. 
    36                              <1> 
    37                              <1> ;I am considering using the Extended FCB space to store additional information
    38                              <1> ; for FAT32... but need to figure it out and I dont really care.
    39                              <1> 
    40                              <1> 
    41                              <1> openFileFCB:       ;ah = 0Fh
    42                              <1> closeFileFCB:      ;ah = 10h
    43                              <1> findFirstFileFCB:  ;ah = 11h
    44                              <1> findNextFileFCB:   ;ah = 12h
    45                              <1> deleteFileFCB:     ;ah = 13h
    46                              <1> sequentialReadFCB: ;ah = 14h
    47                              <1> sequentialWriteFCB:;ah = 15h
    48                              <1> createFileFCB:     ;ah = 16h
    49                              <1> renameFileFCB:     ;ah = 17h
    50 00002AC5 C3                  <1>     ret
    51                              <1> setDTA:            ;ah = 1Ah, Always can be used
    52                              <1> ;Called with:
    53                              <1> ;   rdx = Pointer to the new default DTA
    54 00002AC6 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
    55 00002ACD 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    56 00002AD1 488915(79C30300)    <1>     mov qword [currentDTA], rdx
    57 00002AD8 C3                  <1>     ret
    58                              <1> randomReadFCB:     ;ah = 21h
    59                              <1> randomWriteFCB:    ;ah = 22h
    60                              <1> getFileSizeFCB:    ;ah = 23h
    61                              <1> setRelRecordFCB:   ;ah = 24h
    62                              <1> randBlockReadFCB:  ;ah = 27h
    63                              <1> randBlockWriteFCB: ;ah = 28h
    64                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
    65                              <1> ;Input:
    66                              <1> ;rsi points to a command line to parse
    67                              <1> ;rdi points to a future unopened FCB
    68                              <1> ;al = parsing control bits. 
    69                              <1> ; al[0] = If set, leading filename separators are scanned off
    70                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
    71                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
    72                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
    73                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
    74                              <1> ;        al = 1 => Wildcards found
    75                              <1> ;        al = -1 => Drive specifier invalid
    76                              <1> ;rsi -> to the first char past the parsed filename
    77                              <1> ;rdi -> First byte of the FCB 
    78                              <1> 
    79 00002AD9 E81D000000          <1>     call parseNameToFCB
    80 00002ADE 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
    81 00002ADF E808270000          <1>     call getUserRegs
    82 00002AE4 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
    83                              <1>     return  ;al now contains dl, the signature
    18                              <2> %%_ret:
    19 00002AE7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    84                              <1> 
    85                              <1> 
    86                              <1> getDTA:            ;ah = 2Fh, Always can be used
    87 00002AE8 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
    88 00002AEF 488B1D(79C30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    89 00002AF6 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    90                              <1>     return
    18                              <2> %%_ret:
    19 00002AFA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> ;------------------------------
    93                              <1> ;Common FCB related Routines
    94                              <1> ;------------------------------
    95                              <1> parseNameToFCB:
    96                              <1> ;rsi points to a command line to parse
    97                              <1> ;rdi points to a future unopened FCB
    98                              <1> ;al = parsing control bits. 
    99                              <1> ; al[0] = If set, leading filename separators are scanned off
   100                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   101                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   102                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   103                              <1> ;
   104                              <1> ;Separators include : . ; , = + TAB SPACE
   105                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   106                              <1> 
   107 00002AFB C605(EEC30300)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   108 00002B02 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   109 00002B04 A802                <1>     test al, 2  ;Set drive letter>
   110 00002B06 7402                <1>     jz .skipDriveLetter
   111 00002B08 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   112                              <1> .skipDriveLetter:
   113 00002B0A 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   114 00002B0D B908000000          <1>     mov ecx, 8  ;Copy Filename
   115 00002B12 A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   116 00002B14 93                  <1>     xchg eax, ebx
   117 00002B15 B020                <1>     mov al, " " ;Clear the field
   118 00002B17 7405                <1>     jz .clearFilenameField
   119 00002B19 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   120 00002B1C 31C9                <1>     xor ecx, ecx
   121                              <1> .clearFilenameField:
   122 00002B1E F3AA                <1>     rep stosb
   123 00002B20 B903000000          <1>     mov ecx, 3
   124 00002B25 F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   125 00002B28 7405                <1>     jz .clearExtensionField
   126 00002B2A 4801CF              <1>     add rdi, rcx
   127 00002B2D 31C9                <1>     xor ecx, ecx
   128                              <1> .clearExtensionField:
   129 00002B2F F3AA                <1>     rep stosb
   130 00002B31 91                  <1>     xchg eax, ecx
   131 00002B32 AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   132 00002B33 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   133 00002B3A F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   134 00002B3D 740F                <1>     jz .dontScanOff
   135 00002B3F E819290000          <1>     call skipSpacesAndTabs
   136 00002B44 E820290000          <1>     call isCharDelimType
   137 00002B49 7508                <1>     jnz .skipIfDelim
   138 00002B4B 48FFC6              <1>     inc rsi
   139                              <1> .dontScanOff:
   140 00002B4E E80A290000          <1>     call skipSpacesAndTabs  ;Skip a char
   141                              <1> .skipIfDelim:
   142 00002B53 E8B9270000          <1>     call uppercaseCharAtPtr 
   143 00002B58 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   144 00002B5A 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   145 00002B5D 7519                <1>     jne .skipSettingDriveLetter
   146 00002B5F 48FFC6              <1>     inc rsi ;Goto next char
   147 00002B62 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   148 00002B64 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   149 00002B66 50                  <1>     push rax    ;Save the 1 based drive letter
   150 00002B67 E8A4260000          <1>     call setDrive   ;Verifies if this drive letter is valid
   151 00002B6C 58                  <1>     pop rax
   152 00002B6D 7302                <1>     jnc .validDriveLetter
   153                              <1> .invalidDriveLetter:
   154 00002B6F B2FF                <1>     mov dl, -1
   155                              <1> .validDriveLetter:
   156 00002B71 AA                  <1>     stosb
   157 00002B72 48FFC6              <1>     inc rsi ;Align pointers...
   158 00002B75 48FFCF              <1>     dec rdi 
   159                              <1> .skipSettingDriveLetter:
   160 00002B78 48FFCE              <1>     dec rsi
   161 00002B7B 48FFC7              <1>     inc rdi
   162                              <1>     
   163                              <1> getFCBFilename:
   164                              <1> ;Input: rsi points to first char of filename
   165                              <1> ;       rdi points to storage buffer for filename
   166                              <1> ;       dl contains the signature if drive invalid
   167                              <1> ;Output:
   168                              <1> ;       Fields filled
   169                              <1> ;       al = Return signature
   170 00002B7E B908000000          <1>     mov ecx, 8
   171 00002B83 E815000000          <1>     call getFCBNameField
   172 00002B88 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   173 00002B8B 750D                <1>     jne .noExt
   174 00002B8D B903000000          <1>     mov ecx, 3
   175 00002B92 48FFC6              <1>     inc rsi ;Skip this char
   176 00002B95 E814000000          <1>     call forceFCBNameField
   177                              <1> .noExt:
   178 00002B9A 88D0                <1>     mov al, dl  ;Store the return signature
   179                              <1>     return
    18                              <2> %%_ret:
    19 00002B9C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   180                              <1> 
   181                              <1> getFCBNameField:
   182                              <1> ;Checks if the field is appropriate before copying it
   183 00002B9D E86F270000          <1>     call uppercaseCharAtPtr
   184 00002BA2 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   185 00002BA4 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   186 00002BA7 48FFCE              <1>     dec rsi ;Point to previous char
   187                              <1>     return
    18                              <2> %%_ret:
    19 00002BAA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   188                              <1> .okName:
   189 00002BAB 48FFCE              <1>     dec rsi ;Go back now a char
   190                              <1> forceFCBNameField:
   191                              <1> ;Forcefully copies the name from rsi to rdi
   192 00002BAE E85E270000          <1>     call uppercaseCharAtPtr
   193 00002BB3 7226                <1>     jc .terminatingSpace
   194 00002BB5 750D                <1>     jnz .notSep
   195 00002BB7 F605(EEC30300)FF    <1>     test byte [fcbSpaceOk], -1
   196 00002BBE 741B                <1>     jz .terminatingSpace
   197 00002BC0 3C20                <1>     cmp al, " "
   198 00002BC2 7517                <1>     jne .terminatingSpace
   199                              <1> .notSep:
   200 00002BC4 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   201 00002BC7 FFC9                <1>     dec ecx
   202 00002BC9 3C2A                <1>     cmp al, "*" ;Big wildcard?
   203 00002BCB 7504                <1>     jne .notBigWildcard
   204 00002BCD B03F                <1>     mov al, "?"
   205 00002BCF F3AA                <1>     rep stosb
   206                              <1> .notBigWildcard:
   207 00002BD1 AA                  <1>     stosb   ;Stores the uppercased char
   208 00002BD2 3C3F                <1>     cmp al, "?"
   209 00002BD4 75D8                <1>     jne forceFCBNameField
   210 00002BD6 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   211 00002BD9 EBD3                <1>     jmp short forceFCBNameField
   212                              <1> .terminatingSpace:
   213 00002BDB B020                <1>     mov al, " "
   214 00002BDD AA                  <1>     stosb
   215 00002BDE 48FFCE              <1>     dec rsi ;Point to this trailing space
   216                              <1>     return
    18                              <2> %%_ret:
    19 00002BE1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    30                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    31                              <1> ;-----------------------------------:
    32                              <1> ;    File Handle Kernel routines    :
    33                              <1> ;-----------------------------------:
    34                              <1> 
    35                              <1> createFileHdl:     ;ah = 3Ch, handle function
    36                              <1> ;Input: cx = File attributes (same as search attributes for find first)
    37                              <1> ;       rdx = Ptr to ASCIZ filename to create
    38                              <1> ;Output: CF=CY => ax = File handle
    39                              <1> ;        CF=NC => al = Error code
    40 00002BE2 51                  <1>     push rcx    ;Save file attributes on stack
    41 00002BE3 488D0D28060000      <1>     lea rcx, createMain
    42 00002BEA C605(56C60300)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
    43 00002BF1 EB1D                <1>     jmp short openFileHdl.openCommon
    44                              <1> openFileHdl:       ;ah = 3Dh, handle function
    45                              <1> ;Input: al = Open mode, to open file with
    46                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    47                              <1> ;If called from 5D00h, cl = File attributes too
    48                              <1> ;Output: CF=CY => ax = File handle
    49                              <1> ;        CF=NC => al = Error code
    50 00002BF3 BB16000000          <1>     mov ebx, dirInclusive
    51 00002BF8 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
    52 00002BFF 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    53 00002C02 880D(56C60300)      <1>     mov byte [searchAttr], cl
    54 00002C08 488D0D7B050000      <1>     lea rcx, openMain  
    55 00002C0F 50                  <1>     push rax    ;Save open mode on stack
    56                              <1> .openCommon:
    57 00002C10 E82B2A0000          <1>     call dosCrit1Enter
    58 00002C15 E8D4100000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    59 00002C1A E82B2A0000          <1>     call dosCrit1Exit
    60 00002C1F 0F82A9000000        <1>     jc .exitBad
    61                              <1>     ;Now save variables
    62 00002C25 E8FD0F0000          <1>     call setCurrentSFT
    63 00002C2A 66891D(8CC60300)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    64 00002C31 E86A110000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    65 00002C36 0F8292000000        <1>     jc .exitBad
    66 00002C3C 66891D(8EC60300)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    67 00002C43 48893D(7CC60300)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    68 00002C4A 0FB71D(8CC60300)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    69 00002C51 881F                <1>     mov byte [rdi], bl  ;And open the file
    70                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    71 00002C53 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    72 00002C56 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    73 00002C5D 51                  <1>     push rcx    ;Save the procedure to call on stack
    74 00002C5E E827E7FFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    75 00002C63 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    76 00002C64 488D051F050000      <1>     lea rax, openMain   ;Get EA for open procedure
    77 00002C6B 488B35(84C60300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    78 00002C72 7319                <1>     jnc .proceedCall
    79                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good.
    80                              <1> ;If CF=CY => Path doesnt all exist:
    81                              <1> ;      If parDirExists = -1 => For Open, Bad.  For Create, Good. 
    82                              <1> ;Now we check if we are creating or opening.
    83 00002C74 4839C3              <1>     cmp rbx, rax
    84 00002C77 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    85 00002C79 F605(5FC60300)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    86 00002C80 750B                <1>     jnz .proceedCall    ;If so, proceed.
    87                              <1> .badPathspec:
    88 00002C82 58                  <1>     pop rax
    89 00002C83 B802000000          <1>     mov eax, errFnf
    90 00002C88 E951000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    91                              <1> .proceedCall:
    92                              <1> ;If the pathspec exists, recall that for create, we truncate.
    93 00002C8D 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    94 00002C8F 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    95 00002C92 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    96 00002C93 750B                <1>     jne .callProc   ;Jump if we are creating
    97                              <1>     ;al means openmode here
    98 00002C95 A880                <1>     test al, 80h    ;No Inherit bit set?
    99 00002C97 7407                <1>     jz .callProc
   100 00002C99 247F                <1>     and al, 7Fh     ;Clear this bit
   101 00002C9B B900100000          <1>     mov ecx, devNoInherit
   102                              <1> .callProc:
   103 00002CA0 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
   104 00002CA6 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
   105 00002CAC 51                  <1>     push rcx    ;Save the device word 
   106 00002CAD FFD3                <1>     call rbx    ;Enter with open mode in 
   107 00002CAF 59                  <1>     pop rcx
   108 00002CB0 488B35(84C60300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
   109 00002CB7 7225                <1>     jc .exitBad2
   110 00002CB9 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
   111 00002CBE 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   112 00002CC2 0FB705(8EC60300)    <1>     movzx eax, word [currentHdl]
   113                              <1>     ;SHARE HOOK, DOS DS:[008Ch]
   114 00002CC9 E9A3290000          <1>     jmp extGoodExit ;Save ax and return OK
   115                              <1> .exitBad:
   116 00002CCE FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
   117 00002CCF 5B                  <1>     pop rbx ;Pop the word from the stack
   118 00002CD0 66C705(8CC60300)FF- <1>     mov word [currentNdx], -1
   118 00002CD8 FF                  <1>
   119 00002CD9 E9A1290000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   120                              <1> .exitBad2:
   121                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   122 00002CDE 488B35(7CC60300)    <1>     mov rsi, qword [curHdlPtr]
   123 00002CE5 C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   124 00002CE8 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
   125 00002CEF 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   126 00002CF4 66C705(8CC60300)FF- <1>     mov word [currentNdx], -1
   126 00002CFC FF                  <1>
   127 00002CFD E97D290000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   128                              <1> 
   129                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   130                              <1> ;Input: bx = file handle to close
   131 00002D02 E8AF100000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   132 00002D07 0F8272290000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   133 00002D0D E8150F0000          <1>     call setCurrentSFT  ;Set this as the current SFT
   134                              <1>     ;Check count to see if we need to check share mode
   135 00002D12 31C0                <1>     xor eax, eax    ;Preset ax to 0
   136 00002D14 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared, no need for share check
   137 00002D19 7406                <1>     je .skipShareCheck
   138                              <1>     ;Now check sharing mode
   139 00002D1B 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   140 00002D1F 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   141                              <1> .skipShareCheck:
   142 00002D21 50                  <1>     push rax    ;Save the share mode on stack
   143 00002D22 E888070000          <1>     call closeMain  ;Call close main!
   144 00002D27 58                  <1>     pop rax 
   145 00002D28 0F8251290000        <1>     jc extErrExit   ;If an error, exit through error exit
   146 00002D2E 3C70                <1>     cmp al, netFCBShare ;Do NetFCB check (only if file opened more than once)
   147 00002D30 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   148 00002D32 E84B100000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   149 00002D37 C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   150                              <1> .exitOk:
   151 00002D3A 31C0                <1>     xor eax, eax    ;Return value
   152 00002D3C E930290000          <1>     jmp extGoodExit
   153                              <1> 
   154                              <1> readFileHdl:       ;ah = 3Fh, handle function
   155 00002D41 488D35D9070000      <1>     lea rsi, readBytes
   156                              <1> .common:
   157 00002D48 E869100000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   158 00002D4D 0F822C290000        <1>     jc extErrExit   ;Error code in al and exit
   159 00002D53 E8CF0E0000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   160 00002D58 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   161 00002D5A FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   162 00002D60 488915(79C30300)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   163 00002D67 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   164 00002D69 8F05(79C30300)      <1>     pop qword [currentDTA]
   165 00002D6F 0F820A290000        <1>     jc extErrExit   ;Error code in al and exit
   166 00002D75 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   167 00002D77 E9EC280000          <1>     jmp extGoodExit2    ;and exit!
   168                              <1> 
   169                              <1> writeFileHdl:      ;ah = 40h, handle function
   170 00002D7C 488D35790A0000      <1>     lea rsi, writeBytes
   171 00002D83 E9C0FFFFFF          <1>     jmp readFileHdl.common
   172                              <1> 
   173                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   174                              <1> ;Here don't allow malformed chars unless it is a network CDS
   175 00002D88 BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   176 00002D8D F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   177 00002D94 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   178 00002D97 880D(56C60300)      <1>     mov byte [searchAttr], cl
   179 00002D9D 4889D6              <1>     mov rsi, rdx
   180 00002DA0 E8FE250000          <1>     call checkPathspecOK
   181 00002DA5 730A                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   182                              <1> .badPath:
   183 00002DA7 B803000000          <1>     mov eax, errPnf
   184 00002DAC E9CE280000          <1>     jmp extErrExit
   185                              <1> .pathOk:
   186 00002DB1 488D3D(7FC40300)    <1>     lea rdi, buffer1
   187 00002DB8 52                  <1>     push rdx
   188 00002DB9 E8CCE5FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   189 00002DBE 5A                  <1>     pop rdx
   190 00002DBF 0F82BA280000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   191                              <1>     ;In the case of a wildcard, recall this will return the first file
   192 00002DC5 803D(5EC60300)FF    <1>     cmp byte [fileExist], -1
   193 00002DCC 0F85AD280000        <1>     jnz extErrExit
   194                              <1> ;Internal current dir is now populated with dir entry
   195                              <1> ; and internal DOS directory variables now point to this entry.
   196                              <1> ;Check if the file is a char device or read only.
   197 00002DD2 B805000000          <1>     mov eax, errAccDen  
   198 00002DD7 F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   199 00002DDE 0F859B280000        <1>     jnz extErrExit  ;Can't delete a char dev
   200 00002DE4 F605(C6C50300)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
   201 00002DEB 0F858E280000        <1>     jnz extErrExit  ;Can't delete a read only file
   202                              <1>     ;Now check if the cds is redir, or we entered via server to allow wildcards.
   203 00002DF1 E889230000          <1>     call testCDSNet ;Gets working CDS in rdi
   204 00002DF6 7210                <1>     jc .gotoDelete
   205 00002DF8 803D(5CC60300)FF    <1>     cmp byte [dosInvoke], -1    ;Server invoke?
   206 00002DFF 7407                <1>     je .gotoDelete
   207                              <1>     ;Now we check to see if we have wildcards. We do not generally allow them.
   208                              <1>     ;Network CDS and server invokations allow wildcards
   209 00002E01 E819260000          <1>     call scanPathWC
   210 00002E06 729F                <1>     jc .badPath ;Dont allow wildcards
   211                              <1> .gotoDelete:
   212 00002E08 E830030000          <1>     call deleteMain
   213 00002E0D 0F826C280000        <1>     jc extErrExit
   214 00002E13 803D(5CC60300)FF    <1>     cmp byte [dosInvoke], -1    ;Server invoke?
   215 00002E1A 0F8551280000        <1>     jne extGoodExit
   216                              <1>     ;Here is server invoke, pass through call again.
   217                              <1>     ;We found first, so build a ffblock from the curDir data and find next
   218                              <1>     ;If there are more, delete until no more files match wildcard pattern
   219                              <1> .serverWCloop:
   220 00002E20 FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current DTA address
   221 00002E26 488D3D(90C50300)    <1>     lea rdi, dosffblock
   222 00002E2D 57                  <1>     push rdi    ;Push this address onto the stack
   223 00002E2E E89EE4FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
   224 00002E33 8F05(79C30300)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
   225 00002E39 E847E1FFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
   226 00002E3E 8F05(79C30300)      <1>     pop qword [currentDTA]
   227 00002E44 E8F4020000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
   228 00002E49 73D5                <1>     jnc .serverWCloop     
   229                              <1> ;Stop as soon as an error occurs
   230 00002E4B 3C12                <1>     cmp al, errNoFil    ;Check if no more files (not considered error here)
   231 00002E4D 0F852C280000        <1>     jne extErrExit
   232 00002E53 31C0                <1>     xor eax, eax
   233 00002E55 E917280000          <1>     jmp extGoodExit
   234                              <1> 
   235                              <1> 
   236                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   237                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   238 00002E5A E8570F0000          <1>     call getSFTPtr
   239 00002E5F 0F821A280000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   240 00002E65 3C03                <1>     cmp al, 3
   241 00002E67 720A                <1>     jb .validFunction
   242 00002E69 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   243 00002E6E E90C280000          <1>     jmp extErrExit
   244                              <1> .validFunction:
   245 00002E73 3C01                <1>     cmp al, 1
   246 00002E75 7718                <1>     ja .seekend
   247 00002E77 7203                <1>     jb .seekset
   248                              <1> ;Here we are at seekcur, seek from current (signed)
   249 00002E79 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   250                              <1> .seekset:
   251                              <1> ;Seek from the start (unsigned)
   252 00002E7C 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   253 00002E7F E868230000          <1>     call getUserRegs    ;Get user regs in rsi
   254 00002E84 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   255                              <1> .seekExit:
   256 00002E87 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   257 00002E8A E9D9270000          <1>     jmp extGoodExit2    ;Return OK in eax 
   258                              <1> .seekend:
   259                              <1> ;Here we are at seekend, seek from end (signed)
   260 00002E8F 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   261 00002E95 7505                <1>     jnz .netCheck
   262                              <1> .proceedDisk:
   263 00002E97 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   264 00002E9A EBE0                <1>     jmp short .seekset
   265                              <1> .netCheck:
   266 00002E9C 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   267 00002EA2 75F3                <1>     jnz .proceedDisk
   268 00002EA4 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   269                              <1>     ;Check it's share mode
   270 00002EA8 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   271 00002EAD 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   272 00002EB2 7407                <1>     je .netSeek
   273 00002EB4 3D30000000          <1>     cmp eax, denyReadShare
   274 00002EB9 75DC                <1>     jne .proceedDisk
   275                              <1> .netSeek:
   276 00002EBB B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   277 00002EC0 CD4F                <1>     int 4Fh
   278 00002EC2 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   279 00002EC4 E9B6270000          <1>     jmp extErrExit
   280                              <1> 
   281                              <1> 
   282                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   283 00002EC9 3C01                <1>     cmp al, 1
   284 00002ECB 760A                <1>     jbe .subFuncOk
   285 00002ECD B801000000          <1>     mov eax, errInvFnc
   286 00002ED2 E9A8270000          <1>     jmp extErrExit
   287                              <1> .subFuncOk:
   288 00002ED7 4889D6              <1>     mov rsi, rdx
   289 00002EDA 89C3                <1>     mov ebx, eax    ;Store function code in bl
   290 00002EDC 53                  <1>     push rbx
   291 00002EDD 51                  <1>     push rcx
   292 00002EDE E8C0240000          <1>     call checkPathspecOK
   293 00002EE3 730E                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   294 00002EE5 740C                <1>     jz .pathOk  ;Can be terminated with a silly char
   295                              <1> .badPath:
   296 00002EE7 59                  <1>     pop rcx
   297 00002EE8 5B                  <1>     pop rbx
   298 00002EE9 B803000000          <1>     mov eax, errPnf
   299 00002EEE E98C270000          <1>     jmp extErrExit
   300                              <1> .pathOk:
   301 00002EF3 E893250000          <1>     call checkPathNet 
   302 00002EF8 74ED                <1>     jz .badPath ;Or Net paths
   303 00002EFA E820250000          <1>     call scanPathWC
   304 00002EFF 72E6                <1>     jc .badPath ;Dont allow wildcards
   305 00002F01 488D3D(7FC40300)    <1>     lea rdi, buffer1
   306 00002F08 52                  <1>     push rdx
   307 00002F09 C605(56C60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   308 00002F10 E875E4FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   309 00002F15 5A                  <1>     pop rdx
   310 00002F16 59                  <1>     pop rcx
   311 00002F17 5B                  <1>     pop rbx
   312 00002F18 0F8261270000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   313                              <1>     ;In the case of a wildcard, recall this will return the first file
   314 00002F1E 803D(5EC60300)FF    <1>     cmp byte [fileExist], -1
   315 00002F25 0F8554270000        <1>     jnz extErrExit
   316                              <1> 
   317 00002F2B E84F220000          <1>     call testCDSNet
   318 00002F30 730C                <1>     jnc .notNet
   319 00002F32 750A                <1>     jnz .notNet ;This type of net ok
   320 00002F34 B805000000          <1>     mov eax, errAccDen
   321 00002F39 E941270000          <1>     jmp extErrExit
   322                              <1> .notNet:
   323 00002F3E 84DB                <1>     test bl, bl
   324 00002F40 7526                <1>     jnz .setAttribs
   325                              <1>     ;Get attribs here
   326 00002F42 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   327 00002F48 7412                <1>     jz .getDiskAttribs
   328 00002F4A B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   329 00002F4F CD4F                <1>     int 4Fh
   330 00002F51 0F8228270000        <1>     jc extErrExit
   331 00002F57 E915270000          <1>     jmp extGoodExit
   332                              <1> .getDiskAttribs:
   333 00002F5C 0FB605(C6C50300)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   334 00002F63 E909270000          <1>     jmp extGoodExit
   335                              <1> .setAttribs:
   336                              <1>     ;Set attribs here
   337 00002F68 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   338 00002F6E 7417                <1>     jz .setDiskAttribs
   339 00002F70 0FB7C9              <1>     movzx ecx, cx
   340 00002F73 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   341 00002F74 B80E110000          <1>     mov eax, 110Eh
   342 00002F79 CD4F                <1>     int 4Fh
   343 00002F7B 59                  <1>     pop rcx
   344 00002F7C 0F82FD260000        <1>     jc extErrExit
   345 00002F82 E9EA260000          <1>     jmp extGoodExit
   346                              <1> .setDiskAttribs:
   347 00002F87 E8AFEEFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   348 00002F8C 0F82ED260000        <1>     jc extErrExit
   349 00002F92 F6C118              <1>     test cl, dirVolumeID | dirDirectory
   350 00002F95 740A                <1>     jz .set
   351 00002F97 B805000000          <1>     mov eax, errAccDen
   352 00002F9C E9DE260000          <1>     jmp extErrExit
   353                              <1> .set:
   354 00002FA1 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   355 00002FA4 80E518              <1>     and ch, (dirVolumeID | dirDirectory)    ;Keep these two bits
   356 00002FA7 08E9                <1>     or cl, ch
   357 00002FA9 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   358 00002FAC 31C0                <1>     xor eax, eax
   359 00002FAE E9BE260000          <1>     jmp extGoodExit
   360                              <1> 
   361                              <1> 
   362                              <1> duplicateHandle:   ;ah = 45h, handle function
   363                              <1> ;Input: bx = Handle to duplicate
   364                              <1> ;Output: If ok then ax = New handle
   365 00002FB3 E85F0E0000          <1>     call findFreeJFTSpace    ;First find a free space in the JFT
   366 00002FB8 0F82C1260000        <1>     jc extErrExit   ;Exit if no space
   367                              <1>     ;rsi points to the free space
   368                              <1> .duplicateCommon:
   369 00002FBE E8BF0D0000          <1>     call getJFTPtr  ;Get a pointer to the JFT entry in rdi for bx
   370 00002FC3 4887F7              <1>     xchg rsi, rdi
   371 00002FC6 AC                  <1>     lodsb   ;Move over the SFT ndx from the old to the new position
   372 00002FC7 AA                  <1>     stosb
   373 00002FC8 48FFCE              <1>     dec rsi
   374 00002FCB 48FFCF              <1>     dec rdi
   375                              <1>     ;rdi now points to new position
   376                              <1>     ;rsi points to old position
   377                              <1>     ;al has SFT ndx
   378 00002FCE 4889FE              <1>     mov rsi, rdi    ;Move rsi to point to the new position jft position
   379 00002FD1 0FB6D8              <1>     movzx ebx, al   ;Move SFTndx into ebx
   380 00002FD4 E8740D0000          <1>     call getSFTPtrfromSFTNdx    ;Get the pointer to the SFT in rdi
   381 00002FD9 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   382                              <1>     ;Now we must return in ax the entry in the JFT 
   383 00002FDC 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
   384 00002FE3 488D7F2A            <1>     lea rdi, qword [rdi + psp.jobFileTbl]   ;Point to head of table
   385 00002FE7 4829FE              <1>     sub rsi, rdi    ;Get the difference of the two in si
   386 00002FEA 89F0                <1>     mov eax, esi    ;Get the difference as the return code
   387 00002FEC E980260000          <1>     jmp extGoodExit
   388                              <1> 
   389                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   390                              <1> ;Input: bx = Handle to duplicate
   391                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   392                              <1>     ;First we close cx
   393 00002FF1 87D9                <1>     xchg ebx, ecx ;Swap cx and bx
   394 00002FF3 53                  <1>     push rbx
   395 00002FF4 51                  <1>     push rcx
   396 00002FF5 E808FDFFFF          <1>     call closeFileHdl   ;Close handle 
   397 00002FFA 59                  <1>     pop rcx
   398 00002FFB 5B                  <1>     pop rbx
   399                              <1>     retc    ;The error code is set by errExtExit and CF is set on callerFrame
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00002FFC 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00002FFE C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   400                              <1>     ;Else, close was ok, lets duplicate now
   401 00002FFF E87E0D0000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   402 00003004 0F8275260000        <1>     jc extErrExit   ;Return bad with error code in al
   403 0000300A 87D9                <1>     xchg ebx, ecx   ;Now get source to duplicate in ebx
   404 0000300C 4889FE              <1>     mov rsi, rdi    ;Put the free space ptr in rsi
   405 0000300F EBAD                <1>     jmp short duplicateHandle.duplicateCommon
   406                              <1> 
   407                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   408                              <1> ;Input: cx = Search Attributes, cl only used
   409                              <1> ;       rdx = Ptr to path to file to look for
   410                              <1> ;       al = Document as needing to be 0 for now
   411                              <1> ;Return:
   412                              <1> ;Data in the DTA or error through AX with CF=CY
   413                              <1> ;CAVEATS!
   414                              <1> ;DTA:attribFnd = 40h => Char dev
   415                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   416 00003011 880D(56C60300)      <1>     mov byte [searchAttr], cl
   417 00003017 4889D6              <1>     mov rsi, rdx
   418 0000301A E884230000          <1>     call checkPathspecOK    ;This uses rsi and preserves it
   419 0000301F 730A                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   420                              <1>     ;Dont allow paths which end in a malformed char for ASCIIZ
   421                              <1>     ;ONLY ALLOW TRUENAME TO RESOLVE SUCH PATHS 
   422                              <1> .badPath:
   423 00003021 B803000000          <1>     mov eax, errPnf
   424 00003026 E954260000          <1>     jmp extErrExit
   425                              <1> .pathspecOk:
   426 0000302B FF35(79C30300)      <1>     push qword [currentDTA]
   427 00003031 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   428 00003038 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
   429 0000303F 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   430 00003046 E83FE3FFFF          <1>     call getFilePath
   431                              <1> .findfileExit:
   432 0000304B 8F05(79C30300)      <1>     pop qword [currentDTA]
   433 00003051 0F8228260000        <1>     jc extErrExit
   434 00003057 488D3D(90C50300)    <1>     lea rdi, dosffblock
   435 0000305E 57                  <1>     push rdi
   436 0000305F E86DE2FFFF          <1>     call setupFFBlock
   437 00003064 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   438 00003065 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
   439 0000306C B92B000000          <1>     mov ecx, ffBlock_size
   440 00003071 F3A4                <1>     rep movsb   ;Copy the whole block. 
   441                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   442 00003073 31C0                <1>     xor eax, eax    ;Return value
   443 00003075 E9F7250000          <1>     jmp extGoodExit ;Exit well
   444                              <1> 
   445                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   446                              <1> ;Input: DTA has the find first block from the previous search
   447 0000307A 488B35(79C30300)    <1>     mov rsi, qword [currentDTA]
   448 00003081 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   449 00003088 B92B000000          <1>     mov ecx, ffBlock_size
   450 0000308D F3A4                <1>     rep movsb
   451 0000308F FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current DTA address
   452 00003095 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   453 0000309C 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
   454 000030A3 E8DDDEFFFF          <1>     call findNextMain
   455 000030A8 EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   456                              <1> 
   457                              <1> renameFile:        ;ah = 56h
   458 000030AA BB16000000          <1>     mov ebx, dirInclusive
   459 000030AF F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   460 000030B6 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   461 000030B9 880D(56C60300)      <1>     mov byte [searchAttr], cl
   462                              <1> 
   463                              <1> 
   464                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   465                              <1> createNewFile:     ;ah = 5Bh
   466                              <1> 
   467                              <1> lockUnlockFile:    ;ah = 5Ch
   468 000030BF E9BB250000          <1>     jmp extErrExit
   469                              <1> setHandleCount:    ;ah = 67h
   470 000030C4 E9B6250000          <1>     jmp extErrExit
   471                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   472                              <1>     ;Input: bx = File to flush
   473 000030C9 E8E80C0000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   474 000030CE 0F82AB250000        <1>     jc extErrExit
   475 000030D4 E84E0B0000          <1>     call setCurrentSFT
   476                              <1>     ;Now we check if the device is a char, disk or net file
   477 000030D9 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   478 000030DD 66A90080            <1>     test ax, devRedirDev
   479 000030E1 7512                <1>     jnz .notNet
   480                              <1>     ;Commit file net redir call and exit
   481 000030E3 B807110000          <1>     mov eax, 1107h
   482 000030E8 CD4F                <1>     int 4Fh
   483 000030EA 0F828F250000        <1>     jc extErrExit
   484 000030F0 E93D000000          <1>     jmp .exitOk
   485                              <1> .notNet:
   486 000030F5 66A98000            <1>     test ax, devCharDev
   487 000030F9 7418                <1>     jz .blokDev
   488                              <1>     ;Here we simply update date/time fields in the SFT structure before exiting
   489 000030FB E87DF8FFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   490 00003100 0F8279250000        <1>     jc extErrExit  ;If we fail to get time/date, fail the request
   491                              <1>     ;Build date and time words
   492 00003106 E85DF9FFFF          <1>     call getDirDTwords  ;Get date time words packed in eax
   493 0000310B 894713              <1>     mov dword [rdi + sft.wTime], eax    ;Store them at the same time
   494 0000310E E91F000000          <1>     jmp .exitOk
   495                              <1> .blokDev:
   496 00003113 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   497 00003117 E85B200000          <1>     call setWorkingDPB
   498 0000311C E885EDFFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   499 00003121 0F8258250000        <1>     jc extErrExit
   500 00003127 E874DAFFFF          <1>     call flushFile  ;Now the file gets flushed
   501 0000312C 0F824D250000        <1>     jc extErrExit
   502                              <1> .exitOk:
   503 00003132 30C0                <1>     xor al, al
   504 00003134 E8B3200000          <1>     call getUserRegs
   505 00003139 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   506                              <1>     return
    18                              <2> %%_ret:
    19 0000313C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   507                              <1> ;-----------------------------------:
   508                              <1> ;       Main File IO Routines       :
   509                              <1> ;-----------------------------------:
   510                              <1> deleteMain:
   511                              <1> ;Now unlink FAT chain and then clear directory entry
   512                              <1> ;Get the start cluster of this file
   513                              <1> ;Input:
   514                              <1> ; The file must have NOT be read-only.
   515                              <1> ; If the CDS is NOT a net cds then the following must hold:
   516                              <1> ;     - curDirCopy must be filled with the file directory information
   517                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
   518                              <1> ;Output: CF=NC => Success, 
   519                              <1> ; If not net CDS:
   520                              <1> ;   rsi keeps pointing to directory entry.
   521                              <1> ;   al = First char of the file that was deleted.
   522                              <1> ;        CF=CY => Error
   523                              <1> ;The dir buffer must be marked as referenced once we are done with it
   524 0000313D 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   525 00003144 E836200000          <1>     call testCDSNet ;CF=CY => Not net
   526 00003149 7208                <1>     jc .notNet
   527 0000314B B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
   528 00003150 CD4F                <1>     int 4Fh
   529                              <1>     return
    18                              <2> %%_ret:
    19 00003152 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   530                              <1> .notNet:
   531 00003153 52                  <1>     push rdx
   532 00003154 0FB715(D5C50300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   533 0000315B 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   534 00003162 C1E010              <1>     shl eax, 10h
   535 00003165 09D0                <1>     or eax, edx ;Add low bits to eax
   536 00003167 5A                  <1>     pop rdx
   537 00003168 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
   538 0000316A 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
   539 0000316C 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
   540 00003173 E891DCFFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
   541 00003178 720F                <1>     jc .exit
   542                              <1> .skipUnlink:
   543                              <1>     ;Now replace the first char of the directory to 0E5h
   544                              <1>     ;Get the disk directory in a buffer to manipulate the entry
   545 0000317A E8BCECFFFF          <1>     call getDiskDirectoryEntry
   546 0000317F 7208                <1>     jc .exit
   547 00003181 8A05(62C60300)      <1>     mov al, byte [delChar]
   548 00003187 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
   549                              <1>     ;CF must be clear
   550                              <1> .exit:
   551                              <1>     return
    18                              <2> %%_ret:
    19 00003189 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   552                              <1> 
   553                              <1> openMain:
   554                              <1> ;Input: ax (formally al) = Open mode
   555                              <1> ;       [currentSFT] = SFT we are building
   556                              <1> ;       [workingCDS] = CDS of drive to access
   557                              <1> ;       [workingDPB] = DPB of drive to access
   558                              <1> ;Ouput: CF=CY => Error, eax has error code
   559 0000318A E84F000000          <1>     call .setOpenMode
   560                              <1>     retc    ;Error Exit 
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000318F 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   561 00003191 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   562 00003198 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]
   563 0000319F 30E4                <1>     xor ah, ah  ;al has the access mode
   564 000031A1 66894702            <1>     mov word [rdi + sft.wOpenMode], ax  ;Set the SFT access mode
   565 000031A5 4881FEFFFFFFFF      <1>     cmp rsi, -1
   566 000031AC 750A                <1>     jne .notNet
   567                              <1> .redirOpen:
   568 000031AE 50                  <1>     push rax    ;Push open mode onto stack
   569 000031AF B816110000          <1>     mov eax, 1116h  ;Open remote file on \\ pathspec drives
   570 000031B4 CD4F                <1>     int 4Fh
   571 000031B6 58                  <1>     pop rax
   572                              <1>     return
    18                              <2> %%_ret:
    19 000031B7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   573                              <1> .notNet:
   574 000031B8 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   575 000031BE 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
   576 000031C0 E87B240000          <1>     call dosCrit1Enter
   577 000031C5 C605(61C60300)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
   578 000031CC C605(62C60300)E5    <1>     mov byte [delChar], 0E5h
   579 000031D3 E8B0000000          <1>     call buildSFTEntry  ;ax must have the open mode
   580                              <1>     ;Here we put Share mode stuff
   581 000031D8 E86D240000          <1>     call dosCrit1Exit
   582                              <1>     return
    18                              <2> %%_ret:
    19 000031DD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   583                              <1> .setOpenMode:
   584                              <1> ;Input: al = Open mode for the file open
   585 000031DE 8805(57C60300)      <1>     mov byte [fileOpenMd], al
   586 000031E4 53                  <1>     push rbx
   587 000031E5 88C3                <1>     mov bl, al
   588 000031E7 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
   589 000031EA 803D(5CC60300)FF    <1>     cmp byte [dosInvoke], -1    
   590 000031F1 7505                <1>     jnz .s1 ;Skip this check if not server invoke
   591 000031F3 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
   592 000031F6 7405                <1>     je .s2
   593                              <1> .s1:
   594 000031F8 80FB40              <1>     cmp bl, denyNoneShare
   595 000031FB 770D                <1>     ja .somBad
   596                              <1> .s2:
   597 000031FD 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
   598 000031FF 80E30F              <1>     and bl, 0Fh
   599 00003202 80FB02              <1>     cmp bl, RWAccess
   600 00003205 7703                <1>     ja .somBad
   601 00003207 5B                  <1>     pop rbx
   602 00003208 F8                  <1>     clc
   603                              <1>     return
    18                              <2> %%_ret:
    19 00003209 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   604                              <1> .somBad:
   605 0000320A 5B                  <1>     pop rbx
   606 0000320B B80C000000          <1>     mov eax, errAccCde
   607 00003210 F9                  <1>     stc
   608                              <1>     return
    18                              <2> %%_ret:
    19 00003211 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   609                              <1> createMain:
   610                              <1> ;Input: ax (formally al) = File attributes
   611                              <1> ;       [currentSFT] = SFT we are building
   612                              <1> ;       [workingCDS] = CDS of drive to access
   613                              <1> ;       [workingDPB] = DPB of drive to access
   614 00003212 0FB6C0              <1>     movzx eax, al
   615 00003215 A8C0                <1>     test al, 80h | 40h   ;Invalid bits?
   616 00003217 750A                <1>     jnz .invalidAttrib
   617 00003219 A808                <1>     test al, dirVolumeID
   618 0000321B 7506                <1>     jnz .invalidAttrib  ;Creating volume label with this function is forbidden
   619 0000321D 0C20                <1>     or al, dirArchive   ;Set archive bit
   620 0000321F A810                <1>     test al, dirDirectory   
   621 00003221 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
   622                              <1> .invalidAttrib:
   623 00003223 B805000000          <1>     mov eax, errAccDen
   624 00003228 F9                  <1>     stc
   625                              <1>     return
    18                              <2> %%_ret:
    19 00003229 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   626                              <1> .validAttr:
   627 0000322A 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   628 00003231 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]
   629 00003238 4881FEFFFFFFFF      <1>     cmp rsi, -1
   630 0000323F 750A                <1>     jne .diskFile
   631 00003241 50                  <1>     push rax    ;Save the new attributes
   632 00003242 B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
   633 00003247 CD4F                <1>     int 4Fh
   634 00003249 5B                  <1>     pop rbx
   635                              <1>     return
    18                              <2> %%_ret:
    19 0000324A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   636                              <1> .diskFile:
   637 0000324B 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
   638 00003251 740A                <1>     jz .hardFile
   639 00003253 50                  <1>     push rax    ;Save the new attributes
   640 00003254 B817110000          <1>     mov eax, 1117h  ;Create file with CDS
   641 00003259 CD4F                <1>     int 4Fh
   642 0000325B 5B                  <1>     pop rbx
   643                              <1>     return
    18                              <2> %%_ret:
    19 0000325C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   644                              <1> .hardFile:
   645 0000325D 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
   646 00003263 C605(61C60300)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
   647 0000326A C605(62C60300)E5    <1>     mov byte [delChar], 0E5h
   648 00003271 E8CA230000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
   649 00003276 50                  <1>     push rax    ;Save the file attributes on stack
   650 00003277 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
   651 0000327C E807000000          <1>     call buildSFTEntry
   652 00003281 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
   653                              <1>     ;Here we put Share mode stuff
   654 00003282 E8C3230000          <1>     call dosCrit1Exit
   655                              <1>     return
    18                              <2> %%_ret:
    19 00003287 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   656                              <1> buildSFTEntry:
   657                              <1> ;Called in a critical section.
   658                              <1> ;Input: al = Open mode
   659                              <1> ;       STACK: File attributes if creating a file
   660                              <1> ;       [currentSFT] = SFT we are building
   661                              <1> ;       [workingCDS] = CDS of drive to access
   662                              <1> ;       [workingDPB] = DPB of drive to access
   663                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
   664                              <1> ;
   665                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
   666                              <1> ;                  - wDeviceInfo is set except for inherit bit
   667                              <1> ;        If CF=CY: - Return fail
   668                              <1> ;
   669                              <1> ;
   670                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
   671                              <1> ;   If not, create disk entry.
   672                              <1> ;Check if the device was a char device by checking curDirCopy.
   673                              <1> ;If disk, get dpb. We check if the parent dir was found.
   674                              <1> 
   675                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
   676                              <1> ; to start of file fields of the SFT
   677 00003288 55                  <1>     push rbp    ;file attribute is rbp + 10h
   678 00003289 4889E5              <1>     mov rbp, rsp
   679 0000328C 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
   680                              <1> ;Set the open mode
   681 00003293 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
   682                              <1> ;Get current time
   683 00003297 E8E1F6FFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   684 0000329C E8C7F7FFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
   685 000032A1 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
   686                              <1> ;Set current Owner
   687 000032A4 488B05(81C30300)    <1>     mov rax, qword [currentPSP]
   688 000032AB 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
   689                              <1> ;Set file pointer to first byte
   690 000032AF C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
   691                              <1> ;Common fields set
   692 000032B6 F605(61C60300)FF    <1>     test byte [openCreate], -1  ;Create = -1
   693 000032BD 0F847A010000        <1>     jz .openProc
   694                              <1>     ;Here if Creating a file.
   695 000032C3 F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
   696 000032CA 0F8576010000        <1>     jnz .charDev
   697 000032D0 F605(5EC60300)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
   698 000032D7 0F84A9000000        <1>     jz .createFile
   699                              <1>     ;Here disk file exists, so recreating the file.
   700 000032DD E85BFEFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
   701                              <1>     ;al has the char for the filename
   702                              <1>     ;Sets vars for the sector/offset into the sector
   703 000032E2 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   704 000032E9 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
   705 000032EB 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
   706                              <1>     ;al has file attributes.
   707 000032EF 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
   708 000032F1 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
   709 000032F4 31C0                <1>     xor eax, eax
   710                              <1>     ;Clear all the fields south of ntRes (20 bytes)
   711 000032F6 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
   712 000032FA 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
   713 000032FE 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
   714 00003301 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
   715 00003304 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
   716 00003307 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
   717                              <1> 
   718 0000330A 57                  <1>     push rdi    ;Save SFT pointer
   719 0000330B 488D3D(BBC50300)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
   720 00003312 B920000000          <1>     mov ecx, fatDirEntry_size
   721 00003317 F3A4                <1>     rep movsb
   722 00003319 E89ED6FFFF          <1>     call setBufferDirty ;We wrote to this buffer
   723 0000331E 5F                  <1>     pop rdi
   724                              <1> .createCommon:  ;rdi must point to the current SFT 
   725                              <1>     ;Now populate the remaining SFT fields 
   726 0000331F 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   727 00003326 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
   728 00003329 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
   729 0000332C 488B05(98C60300)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
   730 00003333 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
   731 00003337 0FB705(A0C60300)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
   732 0000333E C0E805              <1>     shr al, 5   ;Divide by 5 to get directory entry number
   733 00003341 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
   734 00003344 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
   735 00003347 894717              <1>     mov dword [rdi + sft.dFileSize], eax
   736 0000334A 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
   737 0000334E 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   738 00003352 C1E210              <1>     shl edx, 10h
   739 00003355 09D0                <1>     or eax, edx
   740 00003357 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
   741                              <1> 
   742 0000335A 31C0                <1>     xor eax, eax
   743                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
   744 0000335C 8A05(63C60300)      <1>     mov al, byte [workingDrv]
   745 00003362 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
   746 00003366 488B05(64C60300)    <1>     mov rax, qword [workingDPB]
   747 0000336D 48894707            <1>     mov qword [rdi + sft.qPtr], rax
   748                              <1>     ;Last thing, copy the filename over
   749                              <1>     ;Now save the name
   750                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
   751 00003371 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
   752 00003375 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   753 0000337C 48A5                <1>     movsq   ;Copy over the space padded name to the sft
   754 0000337E 66A5                <1>     movsw
   755 00003380 A4                  <1>     movsb
   756                              <1>     ;SFT filled, now we open on the driver if it supports it
   757 00003381 E9F5000000          <1>     jmp .openDriver
   758                              <1> .createFile:
   759                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
   760                              <1>     ;rsi points to current sda entry
   761 00003386 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   762                              <1>     ;Clear out the dir entry
   763 0000338D 57                  <1>     push rdi
   764 0000338E B904000000          <1>     mov ecx, 4
   765 00003393 31C0                <1>     xor eax, eax
   766 00003395 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
   767 00003398 5F                  <1>     pop rdi
   768                              <1>     ;Copy the FCB name over    
   769 00003399 56                  <1>     push rsi
   770 0000339A 57                  <1>     push rdi
   771 0000339B B90B000000          <1>     mov ecx, 11
   772 000033A0 488D35(DBC50300)    <1>     lea rsi, fcbName
   773 000033A7 F3A4                <1>     rep movsb   ;Move over the FCB name
   774 000033A9 5F                  <1>     pop rdi
   775 000033AA 5E                  <1>     pop rsi
   776                              <1> 
   777 000033AB 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
   778                              <1>     ;al has file attributes.
   779 000033AF 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
   780 000033B1 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
   781 000033B4 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
   782 000033B7 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
   783 000033BA 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
   784 000033BD 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
   785                              <1> .searchForDirSpace:
   786 000033C3 8905(D6C60300)      <1>     mov dword [dirClustA], eax
   787 000033C9 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
   788 000033CB 668905(DAC60300)    <1>     mov word [dirSect], ax
   789 000033D2 8905(DCC60300)      <1>     mov dword [dirEntry], eax
   790 000033D8 57                  <1>     push rdi
   791 000033D9 E849EAFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
   792 000033DE 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
   793 000033DF 7328                <1>     jnc .dirEntryFnd
   794 000033E1 813D(D2C60300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
   794 000033E9 0000                <1>
   795 000033EB 0F84BB000000        <1>     je .bad ;Set CF and exit
   796 000033F1 E842EBFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
   797 000033F6 0F82AE000000        <1>     jc .exit
   798 000033FC 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
   799 00003401 0F84A5000000        <1>     je .bad
   800                              <1>     ;Else eax = Newly allocated cluster
   801 00003407 EBBA                <1>     jmp short .searchForDirSpace
   802                              <1> .dirEntryFnd:
   803 00003409 4887FE              <1>     xchg rdi, rsi
   804 0000340C B904000000          <1>     mov ecx, 4
   805 00003411 F348A5              <1>     rep movsq   ;Copy over the buffered directory
   806 00003414 E8A3D5FFFF          <1>     call setBufferDirty ;We wrote to this buffer
   807 00003419 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   808 00003420 E9FAFEFFFF          <1>     jmp .createCommon
   809                              <1> .open:
   810                              <1> ;curdircopy has a copy of the disk file directory
   811                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
   812 00003425 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   813 0000342C 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
   814                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
   815 00003433 E803EAFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
   816 00003438 E9E2FEFFFF          <1>     jmp .createCommon
   817                              <1> .openProc:
   818                              <1>     ;Here if Opening a file.
   819 0000343D F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
   820 00003444 74DF                <1>     jz .open
   821                              <1> .charDev:
   822 00003446 488B05(BBC50300)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
   823 0000344D E84B200000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
   824 00003452 7307                <1>     jnc .notBadCharDevName
   825 00003454 B805000000          <1>     mov eax, errAccDen
   826 00003459 EB4F                <1>     jmp short .exit ;CF already set
   827                              <1> .notBadCharDevName:
   828 0000345B 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
   829 00003462 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
   830 00003466 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
   831 0000346A 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
   832 0000346D 80CBE0              <1>     or bl, devCharDev | charDevBinary | charDevNoEOF ;Set binary & noEOF on read
   833 00003470 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
   834 00003474 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
   835                              <1> .openDriver:
   836 0000347B 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   837 00003482 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the ptr here
   838 00003486 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   839 0000348C 7508                <1>     jnz .charDevOpen
   840 0000348E 0FB64601            <1>     movzx eax, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
   841 00003492 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
   842                              <1> .charDevOpen:
   843 00003496 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
   844 0000349C 750C                <1>     jnz .exit  ;If not, immediately jump to exit, all is well
   845                              <1>     ;rsi has device driver ptr for device, make request
   846 0000349E 53                  <1>     push rbx
   847 0000349F E8771C0000          <1>     call primReqOpenSetup  ;rbx gets header ptr, rsi has driver ptr
   848 000034A4 E827190000          <1>     call goDriver   ;Make request
   849 000034A9 5B                  <1>     pop rbx
   850                              <1> .exit:
   851 000034AA 5D                  <1>     pop rbp
   852                              <1>     return
    18                              <2> %%_ret:
    19 000034AB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   853                              <1> .bad:
   854 000034AC F9                  <1>     stc
   855 000034AD EBFB                <1>     jmp short .exit
   856                              <1> closeMain: ;Int 4Fh AX=1201h
   857                              <1> ;Gets the directory entry for a file
   858                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
   859                              <1> ;If CF=CY on return: Error, return error with al = error code
   860                              <1> ;Preserve all regs except eax and rdi
   861                              <1> ; If CF=NC on return: eax = Unknown
   862                              <1> ;                     rdi = current SFT ptr
   863 000034AF 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
   864 000034B6 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
   865 000034BC 7408                <1>     jz .physical
   866                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
   867 000034BE B806110000          <1>     mov eax, 1106h  ;Make request
   868 000034C3 CD4F                <1>     int 4Fh ;Beep!
   869                              <1>     return  ;Returns with CF set or clear as appropriate
    18                              <2> %%_ret:
    19 000034C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   870                              <1> .physical:  
   871                              <1> ; We make a request to the dev dir to close the device
   872                              <1> ; If the device is disk, we then update the directory entry for the disk file
   873 000034C6 E875210000          <1>     call dosCrit1Enter  ;Enter critical section 1
   874 000034CB 53                  <1>     push rbx
   875 000034CC 56                  <1>     push rsi
   876 000034CD 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
   877 000034D1 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   878 000034D7 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
   879                              <1>     ;rsi has DPB pointer here
   880                              <1>     ;rdi has the SFT pointer
   881 000034D9 55                  <1>     push rbp
   882 000034DA 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
   883 000034DD E8951C0000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
   884 000034E2 E8BFE9FFFF          <1>     call updateDirectoryEntryForFile
   885 000034E7 5D                  <1>     pop rbp
   886                              <1>     ;If CF is set, Fail was requested and ax has an error code
   887 000034E8 722F                <1>     jc .exit
   888 000034EA E8B1D6FFFF          <1>     call flushFile
   889 000034EF 7228                <1>     jc .exit    ;If something went wrong, exit
   890 000034F1 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
   891 000034F5 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
   892                              <1> .charClose:
   893                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
   894                              <1>     ;We now decrement handle count in SFT structure
   895 000034F9 E85E090000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
   896 000034FE 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
   897 00003501 7503                <1>     jnz .driverClose
   898 00003503 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
   899                              <1> .driverClose:
   900 00003506 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
   901                              <1>     ;and if the device is a disk device, cl will have the unit number
   902                              <1>     ;We first check if the driver supports oper/close requests
   903 00003507 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
   904 0000350D 750A                <1>     jnz .exit  ;If not, immediately jump to exit, all is well
   905                              <1>     ;rsi has device driver ptr for device, make request
   906 0000350F E80A1C0000          <1>     call primReqCloseSetup  ;rbx gets header ptr, rsi has driver ptr
   907 00003514 E8B7180000          <1>     call goDriver   ;Make request
   908                              <1>     ;Don't check the status here, as we are simply informing the driver 
   909                              <1>     ; of an operation. Nothing should be able to go wrong. 
   910                              <1>     ;Functionally, an ignore if anything does go wrong.
   911                              <1> .exit:
   912 00003519 5E                  <1>     pop rsi
   913 0000351A 5B                  <1>     pop rbx
   914 0000351B E82A210000          <1>     call dosCrit1Exit
   915                              <1>     return
    18                              <2> %%_ret:
    19 00003520 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   916                              <1> 
   917                              <1> readBytes:
   918                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
   919                              <1> ;Input: ecx = Number of bytes to read
   920                              <1> ;Output: ecx = Number of bytes read
   921                              <1> ;Number of bytes read 
   922                              <1> ;If CF=CY, return with error code in ax
   923 00003521 E809070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   924 00003526 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   925 0000352A 240F                <1>     and al, 0Fh ;Eliminate except access mode
   926 0000352C 3C01                <1>     cmp al, WriteAccess
   927 0000352E 7509                <1>     jne .readable
   928 00003530 B805000000          <1>     mov eax, errAccDen
   929 00003535 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
   930 00003537 F9                  <1>     stc
   931                              <1>     return
    18                              <2> %%_ret:
    19 00003538 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   932                              <1> .readable:
   933 00003539 E832070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
   934 0000353E 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
   935 00003541 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   936 00003547 740A                <1>     jz .notRedir
   937 00003549 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
   938 0000354E CD4F                <1>     int 4Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
   939                              <1>     return 
    18                              <2> %%_ret:
    19 00003550 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   940                              <1> .exitOk:
   941 00003551 F8                  <1>     clc
   942                              <1>     return 
    18                              <2> %%_ret:
    19 00003552 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   943                              <1> .notRedir:
   944 00003553 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   945 00003559 7510                <1>     jnz readCharDev
   946 0000355B E8E0200000          <1>     call dosCrit1Enter
   947 00003560 E898010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
   948 00003565 E8E0200000          <1>     call dosCrit1Exit
   949                              <1>     return 
    18                              <2> %%_ret:
    19 0000356A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   950                              <1> readCharDev:
   951                              <1> ;rdi points to sft for char dev to read
   952                              <1> ;ecx has the number of bytes to transfer
   953                              <1> ;Vars have been set up and DTA has the transfer address
   954                              <1> ;Returns in ecx, the actual bytes transferred
   955                              <1> ;If CF=CY, return with error code in ax
   956 0000356B C605(6CC30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
   957 00003572 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
   958 00003576 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
   959 0000357D F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
   960 00003580 0F845F020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
   961 00003586 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
   962 00003589 7407                <1>     jz .notNul
   963                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
   964                              <1>     ;NUL never transfers bytes 
   965 0000358B 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
   966 0000358D E953020000          <1>     jmp readExitOk    ;Goto exit
   967                              <1> .notNul:
   968 00003592 F6C320              <1>     test bl, charDevBinary
   969 00003595 757F                <1>     jnz .binary
   970                              <1>     ;Here if the device is in ASCII mode
   971 00003597 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
   972 0000359A 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
   973                              <1> .consoleInput:
   974                              <1>     ;Console input here
   975 000035A0 E8C4EFFFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
   976                              <1>     ;Get current offset into buffer (if one exists)
   977 000035A5 488B35(23C00300)    <1>     mov rsi, qword [vConHdlOff]
   978 000035AC 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
   979 000035AF 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
   980 000035B1 803D(B0C20300)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
   981 000035B8 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
   982                              <1>     ;Else, reset the buffer
   983 000035BA 66C705(B0C20300)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
   983 000035C2 FF                  <1>
   984                              <1> .oldBuf:
   985                              <1> ;Preserve the dta and number of chars to tfr
   986 000035C3 51                  <1>     push rcx
   987 000035C4 57                  <1>     push rdi
   988 000035C5 488D15(B0C20300)    <1>     lea rdx, vConInBuf
   989 000035CC E8B8EFFFFF          <1>     call buffCharInput_BE   ;Get con buffered input
   990 000035D1 5F                  <1>     pop rdi
   991 000035D2 59                  <1>     pop rcx
   992 000035D3 488D35(B2C20300)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
   993 000035DA 803E1A              <1>     cmp byte [rsi], EOF
   994 000035DD 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
   995 000035DF C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
   996 000035E2 B00A                <1>     mov al, LF
   997 000035E4 E832EBFFFF          <1>     call charOut_B.in   ;Echo CRLF
   998 000035E9 31F6                <1>     xor esi, esi    ;Set ZF = ZE
   999 000035EB EB18                <1>     jmp short .exit
  1000                              <1> .tfrBuf:
  1001 000035ED AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1002 000035EE AA                  <1>     stosb
  1003 000035EF 3C0D                <1>     cmp al, CR 
  1004 000035F1 7503                <1>     jne .noCRLF
  1005 000035F3 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1006                              <1> .noCRLF:
  1007 000035F6 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1008 000035F8 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1009 000035FA 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1010                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1011 000035FC E81AEBFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1012 00003601 31F6                <1>     xor esi, esi
  1013 00003603 0C01                <1>     or al, 1    ;Set ZF = NZ
  1014                              <1> .exit:
  1015 00003605 E877EFFFFF          <1>     call vConRetDriver
  1016 0000360A 488935(23C00300)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1017 00003611 E9CF010000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
  1018                              <1> 
  1019                              <1> .binary:
  1020                              <1>     ;Setup registers for transfer
  1021 00003616 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1022 00003619 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1023                              <1>     ;ecx has the number of bytes to transfer directly
  1024 0000361C E84E1A0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1025 00003621 488B35(64C60300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1026 00003628 E8A3170000          <1>     call goDriver   ;Make the request
  1027 0000362D 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1028 00003630 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1029 00003637 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1030 0000363D 7422                <1>     jz .binNoError
  1031                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
  1032 0000363F B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1033 00003641 E85D160000          <1>     call charDevErr   ;ah = has part of the error 
  1034                              <1>     ;al now has the response
  1035 00003646 3C00                <1>     cmp al, critIgnore
  1036 00003648 7417                <1>     je .binNoError ;Simply proceed as normal
  1037 0000364A 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1038 0000364D 3C03                <1>     cmp al, critFail
  1039 0000364F 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1040                              <1>     ;Fallthrough here for fail!
  1041                              <1> .failExit:
  1042 00003651 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1043 00003658 31C9                <1>     xor ecx, ecx
  1044 0000365A B805000000          <1>     mov eax, errAccDen
  1045 0000365F F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1046                              <1>     return
    18                              <2> %%_ret:
    19 00003660 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1047                              <1> .binNoError:
  1048                              <1>     ;Get number of bytes transferred into 
  1049 00003661 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1050 00003667 F7D8                <1>     neg eax ;make it into -eax
  1051 00003669 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1052                              <1>     ;ecx now has bytes left to transfer
  1053 0000366D 50                  <1>     push rax    ;Save value on stack
  1054 0000366E 31C0                <1>     xor eax, eax ;Set ZF
  1055 00003670 FFC0                <1>     inc eax ;Clear ZF
  1056 00003672 58                  <1>     pop rax ;Get back the original value
  1057 00003673 E96D010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1058                              <1> .generalASCII:
  1059                              <1>     ;ecx has bytes to transfer here
  1060                              <1>     ;Setup registers for transfer
  1061 00003678 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1062 0000367B 51                  <1>     push rcx
  1063 0000367C B901000000          <1>     mov ecx, 1  ;Get one char
  1064 00003681 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1065 00003684 E8E6190000          <1>     call primReqReadSetup   ;Setup request
  1066 00003689 59                  <1>     pop rcx
  1067                              <1>     ;rbx now has request header ptr
  1068 0000368A 488B35(64C60300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1069                              <1> .asciiReadChar:
  1070 00003691 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1071 00003694 E854EEFFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1072 00003699 E832170000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1073 0000369E 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1074 000036A5 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1075 000036AB 741E                <1>     jz .asciiNoError
  1076 000036AD E8F1150000          <1>     call charDevErr    ;Call Int 44h
  1077                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1078 000036B2 C705(38C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1078 000036BA 0000                <1>
  1079 000036BC 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1080 000036BF 3C03                <1>     cmp al, critFail
  1081 000036C1 748E                <1>     je .failExit
  1082 000036C3 3C01                <1>     cmp al, critRetry
  1083 000036C5 74CA                <1>     je .asciiReadChar
  1084                              <1>     ;Ignore here, pretend NULL CHAR was read
  1085 000036C7 30C0                <1>     xor al, al
  1086 000036C9 EB15                <1>     jmp short .asciiIgnoreEP
  1087                              <1> .asciiNoError:
  1088                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1089                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1090                              <1> ;Preserve RBX, RSI
  1091                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1092 000036CB 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1093 000036CE 813D(38C40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1093 000036D6 0000                <1>
  1094 000036D8 0F8507010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1095 000036DE 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1096                              <1> .asciiIgnoreEP:
  1097 000036E0 48FF05(30C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1098 000036E7 48FFC7              <1>     inc rdi ;Also advance register pointer
  1099 000036EA 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1100 000036EC 0F84F3000000        <1>     je readExitOk
  1101 000036F2 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1102 000036F4 E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1103                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1104 000036F6 FEC0                <1>     inc al  ;make ZF=NZ
  1105 000036F8 E9E8000000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1106                              <1> 
  1107                              <1> readDiskFile:
  1108                              <1> ;rdi = Current SFT
  1109                              <1> ;rbp = WorkingDPB
  1110                              <1> ;ecx = Bytes to transfer
  1111 000036FD C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1112 00003704 C605(5AC60300)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1113                              <1>     ;We have the following vars setup:
  1114                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1115                              <1>     ;currClustF
  1116                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1117                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1118 0000370B 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1119 0000370E 85D2                <1>     test edx, edx
  1120 00003710 0F84CF000000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1121 00003716 8B15(A2C60300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  1122 0000371C 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  1123 0000371F 8905(A6C60300)      <1>     mov dword [currClustD], eax
  1124 00003725 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  1125 00003727 0F84B8000000        <1>     jz readExitOk
  1126 0000372D 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  1127 0000372F 8B0D(CAC60300)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  1128 00003735 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  1129 00003737 741E                <1>     jz .skipWalk
  1130                              <1> .goToCurrentCluster:
  1131 00003739 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  1132 0000373E 0F84A1000000        <1>     je readExitOk ;Exit with no bytes transferred
  1133 00003744 89C3                <1>     mov ebx, eax    ;Save eax as current cluster
  1134 00003746 E8F4D6FFFF          <1>     call readFAT    ;Get in eax the next cluster
  1135 0000374B 0F8285000000        <1>     jc .badExit   ;This can only return Fail
  1136 00003751 FFCA                <1>     dec edx ;Decrement counter
  1137 00003753 75E4                <1>     jnz .goToCurrentCluster
  1138                              <1> ;Now we fall out with ebx = Current cluster
  1139 00003755 89D8                <1>     mov eax, ebx    ;Get the current cluster in eax
  1140                              <1> .skipWalk:
  1141 00003757 E809D5FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  1142                              <1>     ;Now we add the offset to this
  1143 0000375C 0FB61D(AEC60300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  1144 00003763 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  1145 00003766 488905(AFC60300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  1146                              <1> ;Main
  1147                              <1> .mainRead:
  1148 0000376D E80AD4FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
  1149 00003772 7262                <1>     jc .badExit
  1150 00003774 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  1151 00003778 0FB71D(B7C60300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  1152 0000377F 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  1153                              <1>     ;Now we read the smallest of the following from the sector buffer:
  1154                              <1>     ; 1) Sector size, 2) Bytes left in File, 3) Bytes left to read from Request
  1155 00003782 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  1156 00003785 2B4F1B              <1>     sub ecx, dword [rdi + sft.dCurntOff] ;Get bytes left to read in file in ecx
  1157 00003788 8B1D(CEC60300)      <1>     mov ebx, dword [tfrCntr]
  1158 0000378E 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  1159 00003790 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  1160 00003793 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  1161 00003797 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  1162 00003799 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  1163 0000379C 57                  <1>     push rdi
  1164 0000379D 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
  1165 000037A4 E851060000          <1>     call readWriteBytesBinary
  1166 000037A9 48893D(79C30300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  1167 000037B0 5F                  <1>     pop rdi
  1168 000037B1 8B0D(CEC60300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  1169 000037B7 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  1170 000037B9 742A                <1>     jz readExitOk ;Exit if so!
  1171 000037BB E8F3D5FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  1172 000037C0 7214                <1>     jc .badExit
  1173                              <1>     ;If ZF=ZE then CurrClustF has last cluster
  1174 000037C2 7421                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  1175                              <1>     ;Else repeat
  1176                              <1>     ;currSectD has been updated, we now set currByteS = 0
  1177 000037C4 66C705(B7C60300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  1177 000037CC 00                  <1>
  1178 000037CD 488B05(AFC60300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  1179 000037D4 EB97                <1>     jmp short .mainRead
  1180                              <1> .badExit:
  1181                              <1>     ;When a disk error occurs within the bit where vars have changed,
  1182                              <1>     ; we need to update the SFT before returning
  1183 000037D6 8B0D(CEC60300)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  1184 000037DC 30C0                <1>     xor al, al  ;Set ZF flag
  1185 000037DE E802000000          <1>     call readExitOk   ;We call this
  1186 000037E3 F9                  <1>     stc ;All calls which end up here return Fail!
  1187 000037E4 C3                  <1>     ret
  1188                              <1> 
  1189                              <1> readExitOk:
  1190                              <1> ;Input: ecx = Number of bytes left to transfer!
  1191                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  1192 000037E5 890D(CEC60300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  1193 000037EB 7509                <1>     jnz .skipbitClear
  1194 000037ED E83D040000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
  1195                              <1>     ;The disk transfer must've flushed by now. 
  1196 000037F2 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokFileToFlush|charDevNoEOF) ;OR
  1197                              <1>     ;Next char dev read should give EOF.
  1198                              <1> .skipbitClear:  ;Or skip that entirely
  1199 000037F6 E83C040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  1200                              <1>     return 
    18                              <2> %%_ret:
    19 000037FB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1201                              <1> 
  1202                              <1> writeBytes:
  1203                              <1> ;Writes the bytes from the user buffer
  1204                              <1> ;Input: ecx = Bytes to xfr
  1205                              <1> ;Returns number of bytes written in ecx
  1206 000037FC E82E040000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1207 00003801 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1208 00003805 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1209 00003807 3C00                <1>     cmp al, ReadAccess
  1210 00003809 7509                <1>     jne .writeable
  1211                              <1> .noWrite:
  1212 0000380B B805000000          <1>     mov eax, errAccDen
  1213 00003810 31C9                <1>     xor ecx, ecx
  1214 00003812 F9                  <1>     stc
  1215 00003813 C3                  <1>     ret
  1216                              <1> .writeable:
  1217 00003814 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1218 0000381A 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  1219 0000381C 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  1220 00003820 74E9                <1>     je .noWrite ;If the file is read only, RIP
  1221                              <1> .skipAttribCheck:
  1222 00003822 E849040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  1223 00003827 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1224 0000382D 7408                <1>     jz .notRedir
  1225 0000382F B809110000          <1>     mov eax, 1109h  ;Write to redir
  1226 00003834 CD4F                <1>     int 4Fh
  1227                              <1>     return
    18                              <2> %%_ret:
    19 00003836 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1228                              <1> .notRedir:
  1229 00003837 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1230 0000383D 7510                <1>     jnz writeCharDev
  1231 0000383F E8FC1D0000          <1>     call dosCrit1Enter
  1232 00003844 E84C010000          <1>     call writeDiskFile
  1233 00003849 E8FC1D0000          <1>     call dosCrit1Exit
  1234                              <1>     return
    18                              <2> %%_ret:
    19 0000384E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1235                              <1> writeCharDev:
  1236 0000384F C605(6CC30300)04    <1>     mov byte [errorLocus], eLocChr
  1237                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  1238 00003856 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  1239 0000385C 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1240                              <1>     ;If ecx = 0, we exit
  1241 00003860 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  1242 00003862 85C9                <1>     test ecx, ecx
  1243 00003864 0F84A6030000        <1>     jz writeExit
  1244 0000386A 488B1D(79C30300)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  1245 00003871 4889DF              <1>     mov rdi, rbx
  1246 00003874 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  1247 00003876 A820                <1>     test al, charDevBinary
  1248 00003878 744A                <1>     jz .asciiDev
  1249                              <1> ;Write binary transfer here
  1250                              <1> .binaryLp:
  1251 0000387A 31C0                <1>     xor eax, eax
  1252 0000387C 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1253 0000387F E8E0170000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1254 00003884 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
  1255 0000388B E83C150000          <1>     call goDriverChar
  1256 00003890 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  1257 00003893 B487                <1>     mov ah, critCharDev | critData | critWrite
  1258 00003895 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1259 0000389C F7C700800000        <1>     test edi, drvErrStatus
  1260 000038A2 7415                <1>     jz .binXfrOk
  1261 000038A4 E8FA130000          <1>     call charDevErr ;Invoke Int 44h
  1262 000038A9 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  1263 000038AC 3C00                <1>     cmp al, critIgnore
  1264 000038AE 7409                <1>     je .binXfrOk
  1265 000038B0 3C01                <1>     cmp al, critRetry
  1266 000038B2 74C6                <1>     je .binaryLp
  1267 000038B4 E9D5000000          <1>     jmp .exitFail
  1268                              <1> .binXfrOk:
  1269 000038B9 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  1270 000038BF E94C030000          <1>     jmp writeExit   ;Exit oki with # bytes xfrd in eax
  1271                              <1> .asciiDev:
  1272 000038C4 A802                <1>     test al, charDevConOut
  1273 000038C6 0F859E000000        <1>     jnz .conDev
  1274 000038CC A804                <1>     test al, charDevNulDev
  1275 000038CE 0F858F000000        <1>     jnz .nulDev
  1276                              <1>     ;Here we transfer for a generic character device in ascii mode
  1277 000038D4 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  1278 000038D6 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  1279 000038D9 0F8431030000        <1>     je writeExit
  1280 000038DF 51                  <1>     push rcx
  1281 000038E0 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  1282 000038E5 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1283 000038E8 E877170000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1284 000038ED 59                  <1>     pop rcx
  1285 000038EE 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
  1286 000038F5 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  1287                              <1> .asciiLp:
  1288 000038F9 E8EFEBFFFF          <1>     call checkBreak
  1289 000038FE E8CD140000          <1>     call goDriver
  1290 00003903 57                  <1>     push rdi
  1291 00003904 B487                <1>     mov ah, critCharDev | critData | critWrite
  1292 00003906 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1293 0000390D F7C700800000        <1>     test edi, drvErrStatus
  1294 00003913 741D                <1>     jz .asciiNoError
  1295 00003915 E889130000          <1>     call charDevErr ;Invoke Int 44h
  1296 0000391A 5F                  <1>     pop rdi
  1297 0000391B C705(38C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  1297 00003923 0000                <1>
  1298 00003925 3C01                <1>     cmp al, critRetry
  1299 00003927 74D0                <1>     je .asciiLp
  1300 00003929 3C00                <1>     cmp al, critIgnore
  1301 0000392B 7412                <1>     je .ignoreEp
  1302 0000392D E95C000000          <1>     jmp .exitFail
  1303                              <1> .asciiNoError:
  1304 00003932 5F                  <1>     pop rdi
  1305 00003933 813D(38C40300)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  1305 0000393B 0000                <1>
  1306 0000393D 741D                <1>     je .bytesXfrdOk
  1307                              <1> .ignoreEp:
  1308 0000393F FFC2                <1>     inc edx ;One more char has been xfrd
  1309 00003941 FF05(30C40300)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  1310 00003947 48FFC7              <1>     inc rdi ;And our copy... 
  1311 0000394A 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  1312 0000394D 740D                <1>     je .bytesXfrdOk
  1313 0000394F 66C705(25C40300)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  1313 00003957 00                  <1>
  1314 00003958 FFC9                <1>     dec ecx
  1315 0000395A 759D                <1>     jnz .asciiLp
  1316                              <1> .bytesXfrdOk:
  1317 0000395C 89D0                <1>     mov eax, edx
  1318 0000395E E9AD020000          <1>     jmp writeExit
  1319                              <1> .nulDev:
  1320 00003963 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  1321 00003965 E9A6020000          <1>     jmp writeExit
  1322                              <1> .conDev:
  1323 0000396A E8FAEBFFFF          <1>     call vConSwapDriver
  1324 0000396F 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  1325 00003972 51                  <1>     push rcx
  1326                              <1> .conDevLp:
  1327 00003973 AC                  <1>     lodsb
  1328 00003974 3C1A                <1>     cmp al, EOF
  1329 00003976 7409                <1>     je .conDevExit
  1330 00003978 E89EE7FFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  1331 0000397D FFC9                <1>     dec ecx
  1332 0000397F 75F2                <1>     jnz .conDevLp
  1333                              <1> .conDevExit:
  1334 00003981 58                  <1>     pop rax ;Get initial ecx back into eax
  1335 00003982 29C8                <1>     sub eax, ecx
  1336 00003984 E8F8EBFFFF          <1>     call vConRetDriver
  1337 00003989 E982020000          <1>     jmp writeExit   ;Input: eax = bytes xfrd
  1338                              <1> .exitFail:
  1339 0000398E B805000000          <1>     mov eax, errAccDen
  1340 00003993 F9                  <1>     stc
  1341                              <1>     return
    18                              <2> %%_ret:
    19 00003994 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1342                              <1> writeDiskFile:
  1343                              <1>     ;rdi has SFT ptr
  1344 00003995 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk 
  1345 0000399C C605(5AC60300)FF    <1>     mov byte [rwFlag], -1    ;Write operation
  1346 000039A3 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  1347 000039A9 0F853E020000        <1>     jnz .badExit
  1348 000039AF 31DB                <1>     xor ebx, ebx
  1349 000039B1 891D(C6C60300)      <1>     mov dword [bytesAppend], ebx ;Reset the appending counter
  1350 000039B7 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  1351                              <1>     ;If the start cluster is 0, we create a new cluster chain
  1352 000039BA 85C0                <1>     test eax, eax
  1353 000039BC 7520                <1>     jnz .notStart
  1354 000039BE E81CD3FFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  1355 000039C3 0F821B020000        <1>     jc .exitPrepHardErr
  1356 000039C9 3DFFFFFFFF          <1>     cmp eax, -1
  1357 000039CE 0F8420020000        <1>     je .exitPrep
  1358                              <1>     ;Now eax has the first cluster of chain
  1359 000039D4 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  1360 000039D7 C605(C5C60300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  1361                              <1> .notStart:
  1362 000039DE E8AFD2FFFF          <1>     call getLastClusterInChain  ;to get the current last cluster in the file
  1363 000039E3 8905(C1C60300)      <1>     mov dword [lastClustA], eax
  1364 000039E9 E8BDD2FFFF          <1>     call getNumberOfClustersInChain ;Gets number of clusters
  1365 000039EE FFC8                <1>     dec eax ;Turn into an offset of clusters in file
  1366 000039F0 8905(BDC60300)      <1>     mov dword [lastClust], eax
  1367                              <1>     ;Get the disk cluster of the file (currClustD)
  1368 000039F6 8B0D(A2C60300)      <1>     mov ecx, dword [currClustF]
  1369 000039FC 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]
  1370 000039FF E8C2D2FFFF          <1>     call getClusterInChain  ;Returns in eax the disk cluster value
  1371 00003A04 0F82E3010000        <1>     jc .badExit
  1372                              <1>     ;ecx has the number of clusters we need to extend the allocation by.
  1373 00003A0A 67E36A              <1>     jecxz .skipExtension
  1374 00003A0D E853D3FFFF          <1>     call findFreeClusterData    ;This updates the dpb to have free cluster data
  1375 00003A12 0F82D5010000        <1>     jc .badExit
  1376 00003A18 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters
  1377 00003A1D 0F84EB010000        <1>     je .noByteExit
  1378 00003A23 394D31              <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], ecx
  1379 00003A26 0F82E2010000        <1>     jb .noByteExit    ;If dNumberOfFreeClusters < ecx, exit
  1380                              <1>     ;Enough to extend by ecx amount
  1381 00003A2C 8B1D(C1C60300)      <1>     mov ebx, dword [lastClustA] ;Get the last disk cluster of the file
  1382 00003A32 E8C9D2FFFF          <1>     call allocateClusters   ;Extend by ecx clusters
  1383 00003A37 0F82B0010000        <1>     jc .badExit
  1384 00003A3D 010D(BDC60300)      <1>     add dword [lastClust], ecx  
  1385 00003A43 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]
  1386 00003A46 8B0D(BDC60300)      <1>     mov ecx, dword [lastClust]
  1387 00003A4C E875D2FFFF          <1>     call getClusterInChain
  1388 00003A51 0F8296010000        <1>     jc .badExit
  1389                              <1>     ;eax has the last cluster on disk
  1390 00003A57 8905(C1C60300)      <1>     mov dword [lastClustA], eax
  1391                              <1>     ;Now we must extend the filesize in the SFT
  1392 00003A5D 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  1393 00003A60 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  1394 00003A63 31C0                <1>     xor eax, eax
  1395 00003A65 8505(CAC60300)      <1>     test dword [tfrLen], eax
  1396 00003A6B 0F849F010000        <1>     jz writeExit    ;If we were extending the file, we are done
  1397 00003A71 8B05(C1C60300)      <1>     mov eax, dword [lastClustA] ;Get the absolute last cluster
  1398                              <1> .skipExtension:
  1399 00003A77 8905(A6C60300)      <1>     mov dword [currClustD], eax ;Now eax has the currClustD value
  1400                              <1>     ;Get the disk sector too
  1401 00003A7D E8E3D1FFFF          <1>     call getStartSectorOfCluster
  1402 00003A82 0FB61D(AEC60300)    <1>     movzx ebx, byte [currSectC] ;Add the in cluster sector offset
  1403 00003A89 01D8                <1>     add eax, ebx    ;Add the offset to eax
  1404 00003A8B 8905(AFC60300)      <1>     mov dword [currSectD], eax 
  1405                              <1>     ;If tfrLen = 0, we truncate to current file pointer position, rounding up
  1406                              <1>     ; clusterwise!
  1407 00003A91 8B0D(CAC60300)      <1>     mov ecx, dword [tfrLen] ;Get the number of bytes to transfer in ecx
  1408 00003A97 85C9                <1>     test ecx, ecx
  1409 00003A99 0F842F010000        <1>     jz .truncate
  1410                              <1>     ;Here we write proper data to the disk file
  1411                              <1> .writeLoop:
  1412 00003A9F 0FB705(B7C60300)    <1>     movzx eax, word [currByteS] ;Get bytewise sector offset
  1413 00003AA6 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  1414 00003AAA 29C1                <1>     sub ecx, eax    ;Get bytes left to fill this sector in ecx
  1415 00003AAC 8B05(CEC60300)      <1>     mov eax, dword [tfrCntr] ;Get # bytes left to transfer
  1416 00003AB2 6639C1              <1>     cmp cx, ax  ;Is # of bytes leftto tfr less than bytes left in sector?
  1417 00003AB5 660F47C8            <1>     cmova cx, ax    ;If yes, swap
  1418 00003AB9 66890D(A0C60300)    <1>     mov word [sectTfr], cx  ;Save this value in the var
  1419 00003AC0 0FB605(AEC60300)    <1>     movzx eax, byte [currSectC] ;Get sector offset in cluster
  1420 00003AC7 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
  1421 00003ACA 0F8689000000        <1>     jbe .stayInCluster
  1422                              <1>     ;Get next Cluster information here
  1423 00003AD0 8B05(A6C60300)      <1>     mov eax, dword [currClustD] ;Get disk cluster
  1424 00003AD6 3B05(C1C60300)      <1>     cmp eax, dword [lastClustA] ;Is this the last sector?
  1425 00003ADC 7543                <1>     jne .nextCluster
  1426                              <1>     ;Growing the file
  1427 00003ADE C605(C5C60300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true
  1428 00003AE5 B901000000          <1>     mov ecx, 1  ;Request 1 cluster
  1429 00003AEA 89C3                <1>     mov ebx, eax    ;Save the last cluster number in eax
  1430 00003AEC E80FD2FFFF          <1>     call allocateClusters
  1431 00003AF1 0F82ED000000        <1>     jc .exitPrepHardErr
  1432 00003AF7 3DFFFFFFFF          <1>     cmp eax, -1 ;If eax = -1 then disk full condition
  1433 00003AFC 0F82F2000000        <1>     jc .exitPrep
  1434 00003B02 89D8                <1>     mov eax, ebx    ;ebx is preserved
  1435 00003B04 E836D3FFFF          <1>     call readFAT    ;Goto next cluster now, return in eax next cluster
  1436 00003B09 0F82D5000000        <1>     jc .exitPrepHardErr
  1437 00003B0F FF05(BDC60300)      <1>     inc dword [lastClust]
  1438 00003B15 8905(C1C60300)      <1>     mov dword [lastClustA], eax ;Now eax is the new last cluster
  1439 00003B1B 8B05(A6C60300)      <1>     mov eax, dword [currClustD] ;Get the old last cluster
  1440                              <1>     ;eax now has the old last sector
  1441                              <1> .nextCluster:
  1442                              <1>     ;eax has old disk cluster information
  1443 00003B21 E819D3FFFF          <1>     call readFAT    ;Get the next disk cluster in eax
  1444 00003B26 0F82B8000000        <1>     jc .exitPrepHardErr
  1445 00003B2C 8905(A6C60300)      <1>     mov dword [currClustD], eax
  1446 00003B32 FF05(A2C60300)      <1>     inc dword [currClustF]
  1447 00003B38 E828D1FFFF          <1>     call getStartSectorOfCluster
  1448 00003B3D 488905(AFC60300)    <1>     mov qword [currSectD], rax
  1449 00003B44 FF05(AAC60300)      <1>     inc dword [currSectF]
  1450 00003B4A 31C0                <1>     xor eax, eax
  1451 00003B4C 8805(AEC60300)      <1>     mov byte [currSectC], al  ;Sector zero in cluster
  1452 00003B52 668905(B7C60300)    <1>     mov word [currByteS], ax  ;And byte zero of this sector in the cluster
  1453                              <1> .stayInCluster:
  1454 00003B59 488B05(AFC60300)    <1>     mov rax, qword [currSectD]  ;Get disk sector
  1455 00003B60 E817D0FFFF          <1>     call getBufForData
  1456 00003B65 727D                <1>     jc .exitPrepHardErr
  1457                              <1>     ;rbx points to disk buffer header
  1458 00003B67 0FB705(B7C60300)    <1>     movzx eax, word [currByteS] 
  1459 00003B6E 488D5C0330          <1>     lea rbx, qword [rbx + bufferHdr.dataarea + rax] ;In sector offset
  1460                              <1>     ;rbx points to the current byte to write at
  1461 00003B73 57                  <1>     push rdi
  1462 00003B74 56                  <1>     push rsi
  1463 00003B75 4889DF              <1>     mov rdi, rbx    ;The sector is the destination of the write
  1464 00003B78 488B35(79C30300)    <1>     mov rsi, qword [currentDTA] ;Get the user buffer as the source
  1465 00003B7F 0FB70D(A0C60300)    <1>     movzx ecx, word [sectTfr]   ;Get # of bytes to write
  1466 00003B86 F3A4                <1>     rep movsb   ;Move over cx number of bytes
  1467 00003B88 488935(79C30300)    <1>     mov qword [currentDTA], rsi ;Update currentDTA
  1468 00003B8F 5E                  <1>     pop rsi
  1469 00003B90 5F                  <1>     pop rdi
  1470 00003B91 E826CEFFFF          <1>     call setBufferDirty
  1471 00003B96 0FB70D(A0C60300)    <1>     movzx ecx, word [sectTfr]
  1472 00003B9D F605(C5C60300)FF    <1>     test byte [fileGrowing], -1
  1473 00003BA4 7406                <1>     jz .notGrowing
  1474 00003BA6 010D(C6C60300)      <1>     add dword [bytesAppend], ecx
  1475                              <1> .notGrowing:
  1476 00003BAC 290D(CEC60300)      <1>     sub dword [tfrCntr], ecx
  1477 00003BB2 7440                <1>     jz .exitPrep
  1478 00003BB4 31C0                <1>     xor eax, eax
  1479 00003BB6 668905(B7C60300)    <1>     mov word [currByteS], ax    ;Start of the next sector
  1480 00003BBD 010D(B9C60300)      <1>     add dword [currByteF], ecx  ;Goto the next sector in the file
  1481 00003BC3 FE05(AEC60300)      <1>     inc byte [currSectC]    ;Increment sector in cluster now
  1482 00003BC9 E9D1FEFFFF          <1>     jmp .writeLoop
  1483                              <1> 
  1484                              <1> .truncate:
  1485                              <1> ;We must free the chain from currClustD
  1486 00003BCE 8B05(A6C60300)      <1>     mov eax, dword [currClustD]
  1487 00003BD4 E841D2FFFF          <1>     call truncateFAT    ;Truncate from the current cluster
  1488 00003BD9 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  1489 00003BDC 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  1490 00003BDF E92A000000          <1>     jmp .noByteExit ;Exit ok!
  1491                              <1> .exitPrepHardErr:
  1492 00003BE4 50                  <1>     push rax    ;Save error code
  1493 00003BE5 E80A000000          <1>     call .exitPrep
  1494 00003BEA 58                  <1>     pop rax
  1495                              <1> .badExitHard:    ;AL has error code already
  1496 00003BEB F9                  <1>     stc
  1497                              <1>     return
    18                              <2> %%_ret:
    19 00003BEC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1498                              <1> .badExit:
  1499                              <1> ;Might need to do some weird stuff later. Leave for now
  1500 00003BED B805000000          <1>     mov eax, errAccDen
  1501 00003BF2 EBF7                <1>     jmp short .badExitHard
  1502                              <1> 
  1503                              <1> .exitPrep:
  1504 00003BF4 8B0D(C6C60300)      <1>     mov ecx, dword [bytesAppend]
  1505 00003BFA 014F17              <1>     add dword [rdi + sft.dFileSize], ecx    ;Add these bytes to the filesize
  1506 00003BFD 8B05(CAC60300)      <1>     mov eax, dword [tfrLen]
  1507 00003C03 2B05(CEC60300)      <1>     sub eax, dword [tfrCntr]    ;Subtract by bytes left to tfr
  1508 00003C09 E902000000          <1>     jmp writeExit
  1509                              <1> 
  1510                              <1> .noByteExit:
  1511 00003C0E 31C0                <1>     xor eax, eax
  1512                              <1> writeExit:
  1513                              <1> ;Advances the bytes on the file pointer
  1514                              <1> ;eax = Number of bytes transferred
  1515 00003C10 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1516 00003C17 89C1                <1>     mov ecx, eax
  1517 00003C19 E801000000          <1>     call .advPtr
  1518                              <1>     return  ;Return to caller, ecx = # bytes xfrd
    18                              <2> %%_ret:
    19 00003C1E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1519                              <1> .advPtr:
  1520 00003C1F 67E303              <1>     jecxz .exit
  1521 00003C22 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx
  1522                              <1> .exit:
  1523 00003C25 F8                  <1>     clc
  1524                              <1>     return
    18                              <2> %%_ret:
    19 00003C26 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1525                              <1> 
  1526                              <1> ;-----------------------------------:
  1527                              <1> ;        File Handle routines       :
  1528                              <1> ;-----------------------------------:
  1529                              <1> 
  1530                              <1> setCurrentSFT:
  1531                              <1> ;Set the pointer in rdi as current SFT 
  1532 00003C27 48893D(84C60300)    <1>     mov qword [currentSFT], rdi
  1533                              <1>     return 
    18                              <2> %%_ret:
    19 00003C2E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1534                              <1> getCurrentSFT:
  1535                              <1> ;Get the current SFT pointer in rdi
  1536 00003C2F 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1537                              <1>     return 
    18                              <2> %%_ret:
    19 00003C36 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1538                              <1> updateCurrentSFT:
  1539                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  1540                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  1541 00003C37 57                  <1>     push rdi
  1542 00003C38 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1543 00003C3F 8B0D(CAC60300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
  1544 00003C45 2B0D(CEC60300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
  1545                              <1>     ;ecx has bytes transferred
  1546 00003C4B 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  1547 00003C51 751A                <1>     jnz .exit
  1548 00003C53 50                  <1>     push rax
  1549 00003C54 8B05(A6C60300)      <1>     mov eax, dword [currClustD]
  1550 00003C5A 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  1551 00003C5D 8B05(A2C60300)      <1>     mov eax, dword [currClustF]
  1552 00003C63 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  1553 00003C66 58                  <1>     pop rax
  1554 00003C67 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
  1555 00003C6A 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  1556                              <1> .exit:
  1557 00003C6D 5F                  <1>     pop rdi
  1558 00003C6E F8                  <1>     clc
  1559                              <1>     return 
    18                              <2> %%_ret:
    19 00003C6F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1560                              <1> setupVarsForTransfer:
  1561                              <1> ;Computes the actual bytes to be transferred and 
  1562                              <1> ; sets up internal variables for the transfer. 
  1563                              <1> ;Works for both reading and writing
  1564                              <1> ;Input: ecx = User desired Bytes to transfer
  1565                              <1> ;       rdi = SFT pointer for the file
  1566                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  1567                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  1568                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  1569                              <1> ;
  1570                              <1> ;Note: Does not account for a FULL disk. When writing,
  1571                              <1> ; if the disk will get full as a result of the write,
  1572                              <1> ; stop at the last byte before the transfer. If the 
  1573                              <1> ; file pointer is past the last free byte, write 0
  1574 00003C70 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  1575 00003C74 488935(64C60300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  1576 00003C7B 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  1577 00003C7E 8905(B9C60300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  1578 00003C84 890D(CAC60300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  1579 00003C8A 890D(CEC60300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  1580 00003C90 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  1581 00003C96 7402                <1>     jz setupVarsForDiskTransfer
  1582 00003C98 F8                  <1>     clc
  1583                              <1>     return
    18                              <2> %%_ret:
    19 00003C99 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1584                              <1> setupVarsForDiskTransfer:
  1585                              <1> ;Extension of the above, but for Disk files only
  1586                              <1> ;Input: ecx = User desired Bytes to transfer
  1587                              <1> ;       rdi = SFT pointer for the file
  1588                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  1589                              <1> ;        CF=CY: Error exit
  1590 00003C9A 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  1591 00003C9D 8905(B9C60300)      <1>     mov dword [currByteF], eax
  1592 00003CA3 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  1593                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  1594 00003CA7 48892D(64C60300)    <1>     mov qword [workingDPB], rbp
  1595 00003CAE 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  1596 00003CB1 881D(63C60300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  1597 00003CB7 8B05(B9C60300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  1598 00003CBD 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  1599 00003CC1 31D2                <1>     xor edx, edx    ;Zero rdx
  1600 00003CC3 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  1601                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  1602                              <1>     ;edx has the offset into that sector
  1603 00003CC5 8905(AAC60300)      <1>     mov dword [currSectF], eax
  1604 00003CCB 668915(B7C60300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  1605 00003CD2 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  1606 00003CD4 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  1607 00003CD7 8805(AEC60300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  1608 00003CDD 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  1609 00003CDF 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  1610 00003CE2 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  1611 00003CE4 8915(A2C60300)      <1>     mov dword [currClustF], edx ;Save in var
  1612 00003CEA 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  1613                              <1> .exit:
  1614 00003CEC F8                  <1>     clc
  1615                              <1>     return 
    18                              <2> %%_ret:
    19 00003CED C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1616                              <1> findFreeSFT:
  1617                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  1618                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  1619                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  1620                              <1> ;        CF=CY => eax = errNhl, error exit
  1621 00003CEE 31DB                <1>     xor ebx, ebx
  1622                              <1> .mainLp:
  1623 00003CF0 53                  <1>     push rbx    ;Save the sft ndx
  1624 00003CF1 E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  1625 00003CF6 5B                  <1>     pop rbx
  1626 00003CF7 7307                <1>     jnc .sftExists
  1627 00003CF9 B804000000          <1>     mov eax, errNhl
  1628 00003CFE F9                  <1>     stc
  1629                              <1>     return
    18                              <2> %%_ret:
    19 00003CFF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1630                              <1> .sftExists:
  1631 00003D00 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  1632 00003D05 7427                <1>     je .sftFound
  1633 00003D07 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  1634 00003D0C 751C                <1>     jne .gotoNextNdx
  1635                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  1636 00003D0E 53                  <1>     push rbx
  1637 00003D0F 488B1D(9DC30300)    <1>     mov rbx, qword [serverPSP]
  1638 00003D16 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  1639 00003D1A 750B                <1>     jne .netGoToNextNdx
  1640 00003D1C 0FB71D(A5C30300)    <1>     movzx ebx, word [machineNum]
  1641 00003D23 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  1642                              <1> .netGoToNextNdx:
  1643 00003D27 5B                  <1>     pop rbx
  1644 00003D28 7404                <1>     je .sftFound
  1645                              <1> .gotoNextNdx:
  1646 00003D2A FFC3                <1>     inc ebx
  1647 00003D2C EBC2                <1>     jmp short .mainLp
  1648                              <1> .sftFound:
  1649 00003D2E 53                  <1>     push rbx
  1650 00003D2F 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  1651 00003D34 488B1D(9DC30300)    <1>     mov rbx, qword [serverPSP]
  1652 00003D3B 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  1653 00003D3F 0FB71D(A5C30300)    <1>     movzx ebx, word [machineNum]
  1654 00003D46 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  1655 00003D4A 5B                  <1>     pop rbx
  1656 00003D4B F8                  <1>     clc
  1657                              <1>     return
    18                              <2> %%_ret:
    19 00003D4C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1658                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216h
  1659                              <1> ;Return a pointer to the SFT entry in rdi
  1660                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  1661                              <1> ;Output: rdi = SFT pointer
  1662 00003D4D 488B3D(3BC00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  1663                              <1> .walk:
  1664 00003D54 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  1665 00003D58 7212                <1>     jb .thisTable
  1666 00003D5A 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  1667 00003D5E 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  1668 00003D61 4881FFFFFFFFFF      <1>     cmp rdi, -1
  1669 00003D68 75EA                <1>     jne .walk
  1670 00003D6A F9                  <1>     stc
  1671                              <1>     return
    18                              <2> %%_ret:
    19 00003D6B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1672                              <1> .thisTable:
  1673 00003D6C 50                  <1>     push rax
  1674 00003D6D 52                  <1>     push rdx
  1675 00003D6E B84F000000          <1>     mov eax, sft_size
  1676 00003D73 F7E3                <1>     mul ebx
  1677 00003D75 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  1678 00003D78 5A                  <1>     pop rdx
  1679 00003D79 58                  <1>     pop rax
  1680 00003D7A 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  1681                              <1>     return
    18                              <2> %%_ret:
    19 00003D81 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1682                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
  1683                              <1> ;Return a zero extended value in rdi for the SFT entry
  1684                              <1> ;Input: bx = JFT handle (we zero extend)
  1685                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
  1686                              <1> ;        CF=CY => al = Error code, Fail
  1687 00003D82 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  1688 00003D85 663B1D(97C00300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
  1689 00003D8C 7204                <1>     jb .ok
  1690 00003D8E B006                <1>     mov al, errBadHdl
  1691 00003D90 F9                  <1>     stc
  1692                              <1>     return
    18                              <2> %%_ret:
    19 00003D91 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1693                              <1> .ok:
  1694 00003D92 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
  1695 00003D99 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  1696 00003D9E F8                  <1>     clc
  1697                              <1>     return
    18                              <2> %%_ret:
    19 00003D9F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1698                              <1> findFreeJFTEntry:
  1699                              <1> ;Finds a free JFT entry in the currentPSP.
  1700                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  1701                              <1> ;        CF=CY => al=errNhl
  1702 00003DA0 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  1703                              <1> .searchLp:
  1704 00003DA2 E8DBFFFFFF          <1>     call getJFTPtr
  1705 00003DA7 7209                <1>     jc .badExit
  1706 00003DA9 803FFF              <1>     cmp byte [rdi], -1
  1707                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003DAC 74F1                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1708 00003DAE FFC3                <1>     inc ebx
  1709 00003DB0 EBF0                <1>     jmp short .searchLp
  1710                              <1> .badExit:
  1711 00003DB2 B004                <1>     mov al, errNhl
  1712 00003DB4 F9                  <1>     stc
  1713                              <1>     return
    18                              <2> %%_ret:
    19 00003DB5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1714                              <1> getSFTPtr:
  1715                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  1716                              <1> ;Input: bx = JFT handle
  1717                              <1> ;Output: CF=NC: rdi = SFT pointer
  1718                              <1> ;        CF=CY: Error, ax=Error code
  1719 00003DB6 E815000000          <1>     call derefSFTPtr
  1720                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003DBB 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1721 00003DBD 50                  <1>     push rax
  1722 00003DBE 0FB705(A5C30300)    <1>     movzx eax, word [machineNum]
  1723 00003DC5 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  1724 00003DC9 58                  <1>     pop rax
  1725                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003DCA 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1726 00003DCC B006                <1>     mov al, errBadHdl   ;Error code
  1727 00003DCE F9                  <1>     stc         ;Reset CF
  1728                              <1>     return
    18                              <2> %%_ret:
    19 00003DCF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1729                              <1> 
  1730                              <1> derefSFTPtr:
  1731                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  1732                              <1> ;Input: bx = File handle (gets zero extended)
  1733                              <1> ;Output: CF=NC: rdi = SFT pointer
  1734                              <1> ;        CF=CY: Error, ax=Error code
  1735 00003DD0 E8ADFFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  1736 00003DD5 7205                <1>     jb .fail
  1737 00003DD7 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  1738 00003DDA 7504                <1>     jne .ok
  1739                              <1> .fail:
  1740 00003DDC B006                <1>     mov al, errBadHdl
  1741 00003DDE F9                  <1>     stc
  1742                              <1>     return
    18                              <2> %%_ret:
    19 00003DDF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1743                              <1> .ok:
  1744 00003DE0 53                  <1>     push rbx    ;Preserve the JFT handle
  1745 00003DE1 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  1746 00003DE4 E864FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  1747 00003DE9 5B                  <1>     pop rbx 
  1748                              <1>     return
    18                              <2> %%_ret:
    19 00003DEA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1749                              <1> 
  1750                              <1> getBytesTransferred:
  1751 00003DEB 8B0D(CEC60300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  1752 00003DF1 F7D9                <1>     neg ecx ;Multiply by -1
  1753 00003DF3 030D(CAC60300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  1754                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 00003DF9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1755                              <1> 
  1756                              <1> readWriteBytesBinary:
  1757                              <1> ;Input: ecx = number of bytes to read in Binary mode
  1758                              <1> ;       rdi = Points to where in caller buffer to read/write bytes
  1759                              <1> ;       rsi = Points to where in DOS buffer to write/read pointer
  1760                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
  1761                              <1> ;Preserve rcx so we know how many bytes transferred
  1762                              <1> ;Update the currByteA variable
  1763                              <1> ;Returns (rsi and rdi) + (ecx on entry)
  1764 00003DFA 51                  <1>     push rcx
  1765 00003DFB F605(5AC60300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
  1766 00003E02 7403                <1>     jz .noSwap
  1767 00003E04 4887FE              <1>     xchg rdi, rsi
  1768                              <1> .noSwap:
  1769 00003E07 F3A4                <1>     rep movsb
  1770 00003E09 59                  <1>     pop rcx
  1771 00003E0A 010D(B9C60300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  1772 00003E10 290D(CEC60300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  1773                              <1>     return
    18                              <2> %%_ret:
    19 00003E16 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1774                              <1> 
  1775                              <1> findFreeJFTSpace:
  1776                              <1> ;Input: [currentPSP] = Task whose PSP we will look through
  1777                              <1> ;If there are no free spaces, then we return with al = errNhl and CF=CY
  1778                              <1> ;Else, a pointer to the free space in rsi and al = -1
  1779 00003E17 51                  <1>     push rcx
  1780 00003E18 488B35(81C30300)    <1>     mov rsi, qword [currentPSP]
  1781 00003E1F 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]
  1782 00003E26 488D762A            <1>     lea rsi, qword [rsi + psp.jobFileTbl]   ;Point to start of table
  1783                              <1> .search:
  1784 00003E2A AC                  <1>     lodsb
  1785 00003E2B 3CFF                <1>     cmp al, -1
  1786 00003E2D 7407                <1>     je .exit
  1787 00003E2F FFC9                <1>     dec ecx
  1788 00003E31 75F7                <1>     jnz .search
  1789 00003E33 B004                <1>     mov al, errNhl  ;No free handles buddy, sorry
  1790 00003E35 F9                  <1>     stc ;Set error bit
  1791                              <1> .exit:
  1792 00003E36 59                  <1>     pop rcx
  1793                              <1>     return
    18                              <2> %%_ret:
    19 00003E37 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1794                              <1> 
  1795                              <1> getSFTndxInheritable:
  1796                              <1> ;Given a SFTndx this function will verify if it is inheritable
  1797                              <1> ;Input: ebx = SFTndx (word)
  1798                              <1> ;Output: 
  1799                              <1> ;   ZF=ZE => Inheritable
  1800                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  1801 00003E38 57                  <1>     push rdi
  1802 00003E39 E80FFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  1803 00003E3E 7208                <1>     jc .badNdx
  1804 00003E40 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  1805 00003E46 5F                  <1>     pop rdi
  1806                              <1>     return
    18                              <2> %%_ret:
    19 00003E47 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1807                              <1> .badNdx:
  1808 00003E48 31FF                <1>     xor edi, edi
  1809 00003E4A FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  1810 00003E4C F8                  <1>     clc
  1811 00003E4D 5F                  <1>     pop rdi
  1812                              <1>     return
    18                              <2> %%_ret:
    19 00003E4E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1813                              <1> 
  1814                              <1> incrementOpenCount:
  1815                              <1> ;Given a SFTndx, this function will increment it's open count
  1816                              <1> ;Output:
  1817                              <1> ;   CF=NC => sftndx ok, count incremented
  1818                              <1> ;   CF=CY => Bad ndx
  1819 00003E4F 57                  <1>     push rdi
  1820 00003E50 E8F8FEFFFF          <1>     call getSFTPtrfromSFTNdx
  1821 00003E55 7203                <1>     jc .exit
  1822 00003E57 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  1823                              <1> .exit:
  1824 00003E5A 5F                  <1>     pop rdi
  1825                              <1>     return
    18                              <2> %%_ret:
    19 00003E5B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1826                              <1> 
  1827                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
  1828                              <1> ;Input: rdi = SFT pointer
  1829                              <1> ;Output: ax = Original wNumHandles count
  1830 00003E5C 9C                  <1>     pushfq
  1831 00003E5D 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  1832 00003E60 FFC8                <1>     dec eax     ;Decrement count
  1833 00003E62 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  1834 00003E64 FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  1835                              <1> .exit:
  1836 00003E66 9D                  <1>     popfq
  1837 00003E67 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  1838                              <1>     return
    18                              <2> %%_ret:
    19 00003E6A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    31                                  %include "./Source/Kernel/FileIO/ioctl.asm"
    32                              <1> ioctrl:            ;ah = 44h, handle function
    33                              <1> ;Possible subfunctions
    34                              <1> ;al = 00h => Get Handle Information word in dx  x
    35                              <1> ;al = 01h => Set Handle Information word        x
    36                              <1> ;al = 02h => Read from Char device              
    37                              <1> ;al = 03h => Write to Char device               
    38                              <1> ;al = 04h => Read from Block device             
    39                              <1> ;al = 05h => Write to Block device              
    40                              <1> ;al = 06h => Get input status                   
    41                              <1> ;al = 07h => Get output status                  
    42                              <1> ;al = 08h => Is a block device removable?       
    43                              <1> ;al = 09h => Is a logical device local or remote?   
    44                              <1> ;al = 0Ah => Is a handle to a local or remote file? 
    45                              <1> ;al = 0Bh => Change sharing retry count (RESERVED)  
    46                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    47                              <1> ;al = 0Dh => Block device Generic IOCTL request     
    48                              <1> ;al = 0Eh => Get logical device                 
    49                              <1> ;al = 0Fh => Set logical device                 
    50 00003E6B 84C0                <1>     test al, al
    51 00003E6D 740B                <1>     jz .getDevWord
    52 00003E6F 3C01                <1>     cmp al, 1
    53 00003E71 7421                <1>     je .setDevWord
    54 00003E73 B001                <1>     mov al, errInvFnc
    55 00003E75 E905180000          <1>     jmp extErrExit
    56                              <1> .getDevWord:
    57                              <1>     ;Input: bx = File Handle
    58 00003E7A E851FFFFFF          <1>     call derefSFTPtr
    59 00003E7F 0F82FA170000        <1>     jc extErrExit
    60                              <1>     ;Now rdi has ptr to SFT handle
    61 00003E85 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    62 00003E89 30C0                <1>     xor al, al
    63 00003E8B E85C130000          <1>     call getUserRegs
    64 00003E90 668916              <1>     mov word [rsi + callerFrame], dx
    65                              <1>     return
    18                              <2> %%_ret:
    19 00003E93 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    66                              <1> .setDevWord:
    67                              <1>     ;Input: bx = File Handle
    68                              <1>     ;       dl = Low byte of Device information word 
    69 00003E94 E837FFFFFF          <1>     call derefSFTPtr
    70 00003E99 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    71                              <1>     return
    18                              <2> %%_ret:
    19 00003E9C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    32                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    33                              <1> ;Memory related functions
    34                              <1> 
    35                              <1> ;-----------------------------------:
    36                              <1> ;  Memory related Kernel routines   :
    37                              <1> ;-----------------------------------:
    38                              <1> allocateMemory:    ;ah = 48h
    39                              <1> ;Input: ebx = Number of paragraphs requested
    40                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    41                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    42 00003E9D E89E170000          <1>     call dosCrit1Enter
    43 00003EA2 31D2                <1>     xor edx, edx
    44                              <1>     ;Clear the pointers
    45 00003EA4 488915(A7C30300)    <1>     mov qword [firstMCB], rdx
    46 00003EAB 488915(AFC30300)    <1>     mov qword [bestMCB], rdx
    47 00003EB2 488915(B7C30300)    <1>     mov qword [lastMCB], rdx
    48 00003EB9 31ED                <1>     xor ebp, ebp    
    49 00003EBB FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    50 00003EBD 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    51                              <1> .walk:
    52 00003EC4 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    53 00003EC7 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    54 00003ECA 7409                <1>     je .walk1
    55 00003ECC 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    56 00003ECF 0F8500050000        <1>     jne badMCBChain
    57                              <1> .walk1:
    58                              <1>     ;Here if valid but not the last block
    59 00003ED5 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    60 00003EDD 0F8582000000        <1>     jne .walk2
    61                              <1>     ;Here we consolidate adjacent free blocks if there are any
    62                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    63                              <1>     ;End consolidation at first non free block or at last block in chain
    64 00003EE3 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    65 00003EE6 744A                <1>     je .det0    ;Determine if this block is useful
    66 00003EE8 31C9                <1>     xor ecx, ecx
    67 00003EEA 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    68 00003EED 4881C610000000      <1>     add rsi, mcb.program
    69                              <1> .cons0:
    70 00003EF4 48C1E104            <1>     shl rcx, 4
    71 00003EF8 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    72 00003EFB 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    73 00003EFE 7409                <1>     je .cons1
    74 00003F00 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    75 00003F03 0F85CC040000        <1>     jne badMCBChain 
    76                              <1> .cons1:
    77 00003F09 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    78 00003F11 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    79                              <1>     ;Here rsi, points to a free block, add it to rdi
    80 00003F13 31C9                <1>     xor ecx, ecx
    81 00003F15 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    82 00003F18 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    83 00003F1E 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    84 00003F21 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    85 00003F23 31D2                <1>     xor edx, edx
    86 00003F25 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    87 00003F28 48895608            <1>     mov qword [rsi + 8], rdx
    88 00003F2C 3C5A                <1>     cmp al, mcbMarkEnd
    89 00003F2E 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    90                              <1>     ;Here we deal with if the block was the last one 
    91 00003F30 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    92                              <1> .det0:  ;Now determine if pointer in rdi is useful
    93 00003F32 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    94                              <1> ;ebx must be less than the arena size for the arena to be useful!
    95 00003F35 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    96 00003F38 39D9                <1>     cmp ecx, ebx
    97 00003F3A 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    98 00003F3C 488935(B7C30300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    99 00003F43 488B05(A7C30300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
   100 00003F4A 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
   101 00003F4D 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
   102 00003F4F 488935(A7C30300)    <1>     mov qword [firstMCB], rsi
   103                              <1> .det1:
   104                              <1>     ;Now test for best fit.
   105 00003F56 29D9                <1>     sub ecx, ebx    ;Block - ebx
   106 00003F58 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   107 00003F5A 7209                <1>     jb .walk2
   108 00003F5C 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   109 00003F5E 488935(AFC30300)    <1>     mov qword [bestMCB], rsi
   110                              <1> .walk2:
   111 00003F65 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   112 00003F68 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   113 00003F6A 31C9                <1>     xor ecx, ecx
   114 00003F6C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   115 00003F6F 48C1E104            <1>     shl rcx, 4
   116 00003F73 4881C610000000      <1>     add rsi, mcb.program
   117 00003F7A 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   118 00003F7D E942FFFFFF          <1>     jmp .walk
   119                              <1> .allocate:
   120                              <1>     ;Allocation fails IF the pointer is the null pointer
   121 00003F82 803D(35C30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   122 00003F89 7266                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   123                              <1>     ;Fall thru if last fit
   124 00003F8B 488B35(B7C30300)    <1>     mov rsi, qword [lastMCB]
   125 00003F92 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   126 00003F95 0F84D8000000        <1>     jz .allocFail
   127 00003F9B 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   128 00003F9D C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   129 00003FA0 31C9                <1>     xor ecx, ecx
   130 00003FA2 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   131 00003FA5 29D9                <1>     sub ecx, ebx
   132 00003FA7 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   133 00003FAD 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   134 00003FB0 48C1E104            <1>     shl rcx, 4
   135 00003FB4 4881C610000000      <1>     add rsi, mcb.program
   136 00003FBB 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   137 00003FBE 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   138 00003FC0 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   139 00003FC3 488B15(81C30300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   140 00003FCA 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   141 00003FCE 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   142 00003FD5 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   143 00003FDC 4889F0              <1>     mov rax, rsi
   144 00003FDF 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   145 00003FE2 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   146 00003FE6 E8BD030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   147 00003FEB E85A160000          <1>     call dosCrit1Exit
   148                              <1>     return
    18                              <2> %%_ret:
    19 00003FF0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   149                              <1> .bfCommon:
   150 00003FF1 488B35(A7C30300)    <1>     mov rsi, qword [firstMCB]
   151 00003FF8 803D(35C30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   152 00003FFF 480F4435(AFC30300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   153 00004007 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   154 0000400A 7467                <1>     jz .allocFail
   155 0000400C 8A06                <1>     mov al, byte [rsi + mcb.marker]
   156 0000400E C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   157 00004011 31C9                <1>     xor ecx, ecx
   158 00004013 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   159 00004016 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   160 00004018 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   161 0000401E 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   162 00004021 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   163 00004028 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   164 0000402C 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   165 0000402F 4881C610000000      <1>     add rsi, mcb.program
   166 00004036 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   167 0000403C 48C1E304            <1>     shl rbx, 4
   168 00004040 4801DE              <1>     add rsi, rbx
   169 00004043 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   170 00004045 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   171 0000404D 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   172 00004050 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   173 00004057 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   174 0000405E 4889F8              <1>     mov rax, rdi
   175 00004061 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   176 00004064 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   177 00004068 E83B030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   178 0000406D E8D8150000          <1>     call dosCrit1Exit
   179                              <1>     return
    18                              <2> %%_ret:
    19 00004072 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   180                              <1> .allocFail:
   181                              <1>     ;Walk the MCB chain to determine the biggest block size
   182 00004073 488B35(2BC00300)    <1>     mov rsi, [mcbChainPtr]
   183 0000407A 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   184                              <1> .af0:
   185 0000407C 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   186 0000407F 7409                <1>     je .af1
   187 00004081 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   188 00004084 0F854B030000        <1>     jne badMCBChain
   189                              <1> .af1:
   190 0000408A 31C9                <1>     xor ecx, ecx
   191 0000408C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   192 0000408F 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   193 00004097 7505                <1>     jne .af2
   194 00004099 39D9                <1>     cmp ecx, ebx
   195 0000409B 0F47D9              <1>     cmova ebx, ecx
   196                              <1> .af2:
   197 0000409E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   198 000040A1 7410                <1>     je .afExit
   199 000040A3 48C1E104            <1>     shl rcx, 4
   200 000040A7 4881C610000000      <1>     add rsi, mcb.program
   201 000040AE 4801CE              <1>     add rsi, rcx
   202 000040B1 EBD7                <1>     jmp short .af1
   203                              <1> .afExit:
   204 000040B3 B808000000          <1>     mov eax, errNoMem
   205 000040B8 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   206 000040BF 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   207 000040C2 E910030000          <1>     jmp mcbErrHdlr
   208                              <1> freeMemory:        ;ah = 49h
   209                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   210                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   211                              <1> ;Always skip the first block as this is the anchor for DOS
   212 000040C7 E874150000          <1>     call dosCrit1Enter
   213 000040CC 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   214 000040D3 31C9                <1>     xor ecx, ecx
   215 000040D5 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   216 000040DC 4889F7              <1>     mov rdi, rsi
   217 000040DF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   218 000040E2 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   219 000040E6 4881C610000000      <1>     add rsi, mcb.program
   220 000040ED 4801CE              <1>     add rsi, rcx    ;Go to next block
   221                              <1> .mainLoop:
   222 000040F0 31C9                <1>     xor ecx, ecx
   223 000040F2 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   224 000040F5 7409                <1>     je .valid
   225 000040F7 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   226 000040FA 0F85D5020000        <1>     jne badMCBChain
   227                              <1> .valid:
   228 00004100 4939F0              <1>     cmp r8, rsi
   229 00004103 741C                <1>     je .blockFound
   230                              <1>     ;Not valid, check if last block in chain
   231 00004105 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   232 00004108 0F84A5000000        <1>     je .blockError
   233 0000410E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 00004111 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 00004115 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   236 0000411C 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 0000411F EBCF                <1>     jmp short .mainLoop
   238                              <1> .blockFound:
   239                              <1>     ;If hole, error.
   240                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   241 00004121 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   242 00004129 0F8484000000        <1>     je .blockError
   243 0000412F 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   244 00004137 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   245 0000413F 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   246                              <1>     ;It is, let it absorb this space
   247 00004141 31C9                <1>     xor ecx, ecx
   248 00004143 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   249 00004146 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   250 0000414C 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   251                              <1>     ;Replace block marker
   252 0000414F 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   253 00004151 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   254 00004153 31C9                <1>     xor ecx, ecx
   255 00004155 48890E              <1>     mov qword [rsi], rcx
   256 00004158 48894E08            <1>     mov qword [rsi + 8], rcx
   257 0000415C 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   258                              <1> .blockFoundCheckFollowing:
   259                              <1>     ;First check if we are the last block in chain
   260 0000415F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   261 00004162 7439                <1>     je .blockFoundExit  ;If yes, exit!
   262 00004164 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   263 00004167 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   264 0000416A 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   265 0000416E 4881C110000000      <1>     add rcx, mcb.program
   266 00004175 4801CE              <1>     add rsi, rcx    ;Go to next block
   267 00004178 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   268 00004180 751B                <1>     jne .blockFoundExit ;If not free, exit
   269                              <1>     ;If free, absorb into block pointed to by rdi
   270 00004182 31C9                <1>     xor ecx, ecx
   271 00004184 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   272 00004187 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   273 0000418D 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   274                              <1>     ;Replace block marker
   275 00004190 8A06                <1>     mov al, byte [rsi + mcb.marker]
   276 00004192 8807                <1>     mov byte [rdi + mcb.marker], al
   277 00004194 31C9                <1>     xor ecx, ecx
   278 00004196 48890E              <1>     mov qword [rsi], rcx
   279 00004199 48894E08            <1>     mov qword [rsi + 8], rcx
   280                              <1> .blockFoundExit:
   281 0000419D E806020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   282 000041A2 E8A3140000          <1>     call dosCrit1Exit
   283 000041A7 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   284 000041AE 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   285                              <1>     return
    18                              <2> %%_ret:
    19 000041B2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   286                              <1> .blockError:
   287 000041B3 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   288 000041BA B809000000          <1>     mov eax, errMemAddr
   289 000041BF E8BB140000          <1>     call extErrExit ;Error thru the unified error handler
   290 000041C4 E8DF010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   291 000041C9 E87C140000          <1>     call dosCrit1Exit
   292                              <1>     return
    18                              <2> %%_ret:
    19 000041CE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   293                              <1> reallocMemory:     ;ah = 4Ah
   294                              <1> ;Input: r8 = address of the block to be realloc'ed
   295                              <1> ;       ebx = How many paras this block should contain after realloc. 
   296                              <1> ;               If ebx = 0, jump to free memory
   297 000041CF E86C140000          <1>     call dosCrit1Enter
   298 000041D4 85DB                <1>     test ebx, ebx
   299 000041D6 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   300 000041DC 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   301 000041E3 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   302 000041E6 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   303 000041E9 7409                <1>     je .ctn
   304 000041EB 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   305 000041EE 0F8564010000        <1>     jne .badAddrGiven
   306                              <1> .ctn:
   307                              <1>     ;Provided block is valid and not a hole
   308                              <1>     ;Check if Growth or Shrink
   309 000041F4 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   310 000041FC 74B5                <1>     je freeMemory.blockError
   311 000041FE 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   312 00004201 31C9                <1>     xor ecx, ecx
   313 00004203 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   314 00004206 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   315 00004208 0F8786000000        <1>     ja .growth
   316 0000420E 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   317                              <1> ;We can always shrink
   318 00004214 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   319 00004216 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   320 0000421C 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   321 0000421F 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   322 00004225 48C1E304            <1>     shl rbx, 4
   323 00004229 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   324 00004230 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   325 00004233 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   326 00004235 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   327 00004238 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   328 0000423A 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   329 00004242 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   330 00004245 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   331 00004247 0F84DB000000        <1>     je .exit
   332                              <1> ;Else, now see if the block following is also free and absorb it
   333 0000424D 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   334 00004250 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   335 00004254 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   336 0000425B 4801CE              <1>     add rsi, rcx    ;Goto next arena
   337 0000425E 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   338 00004261 7409                <1>     je .shrinkAbsorb
   339 00004263 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   340 00004266 0F8569010000        <1>     jne badMCBChain
   341                              <1> .shrinkAbsorb:
   342 0000426C 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   343 00004274 0F85AE000000        <1>     jne .exit
   344                              <1>     ;It is free, absorb it
   345 0000427A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   346 0000427D 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   347 00004283 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   348 00004286 31C9                <1>     xor ecx, ecx
   349                              <1>     ;Clear absorbed MCB
   350 00004288 48890E              <1>     mov qword [rsi], rcx
   351 0000428B 48894E08            <1>     mov qword [rsi + 8], rcx
   352 0000428F E994000000          <1>     jmp .exit
   353                              <1> .growth:
   354                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   355 00004294 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   356 00004297 0F84A5000000        <1>     je .notEnuffMem
   357                              <1> ;Now check the following space is free. If not, not enuff mem err
   358 0000429D 31C9                <1>     xor ecx, ecx
   359 0000429F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   360 000042A2 48C1E104            <1>     shl rcx, 4
   361 000042A6 4889F7              <1>     mov rdi, rsi    
   362 000042A9 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   363 000042B0 4801CE              <1>     add rsi, rcx
   364 000042B3 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   365 000042B6 7409                <1>     je .growthOK
   366 000042B8 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   367 000042BB 0F8514010000        <1>     jne badMCBChain
   368                              <1> .growthOK:
   369                              <1>     ;rdi points to block we are growing
   370 000042C1 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   371 000042C9 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   372                              <1>     ;rsi must own all memory up to the next owned arena
   373 000042CB 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   374 000042CD 31C9                <1>     xor ecx, ecx
   375 000042CF 31D2                <1>     xor edx, edx
   376 000042D1 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   377 000042D4 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   378 000042DA 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   379 000042DD 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   380 000042DF 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   381 000042E1 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   382 000042E4 775E                <1>     ja .notEnuffMem1
   383 000042E6 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   384 000042E8 81FA01000000        <1>     cmp edx, 1
   385 000042EE 744E                <1>     je .notEnuffMem2
   386 000042F0 31C9                <1>     xor ecx, ecx
   387 000042F2 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   388 000042F5 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   389 000042F9 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   390 000042FC 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   391 000042FF 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   392 00004306 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   393 0000430A 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   394 0000430D 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   395 00004311 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   396                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   397                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   398 00004313 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   399 00004315 7411                <1>     jz .exit
   400 00004317 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   401 0000431D 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   402 00004320 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   403                              <1> .exit:
   404 00004328 E87B000000          <1>     call verifyIntegrityOfMCBChain
   405 0000432D E818130000          <1>     call dosCrit1Exit
   406 00004332 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   407 00004339 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   408                              <1>     return
    18                              <2> %%_ret:
    19 0000433D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   409                              <1> .notEnuffMem2:
   410 0000433E FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   411 00004340 EB02                <1>     jmp short .notEnuffMem1
   412                              <1> .notEnuffMem:
   413 00004342 31DB                <1>     xor ebx, ebx    ;No space to grow
   414                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   415 00004344 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   416 00004349 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   417 00004350 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   418 00004353 E97F000000          <1>     jmp mcbErrHdlr
   419                              <1> .badAddrGiven:
   420 00004358 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   421 0000435D E975000000          <1>     jmp mcbErrHdlr
   422                              <1> getsetMallocStrat: ;ah = 58h
   423 00004362 84C0                <1>     test al, al
   424 00004364 741F                <1>     jz .get
   425 00004366 3C02                <1>     cmp al, 2
   426 00004368 7337                <1>     jae .bad
   427                              <1> ;Set here
   428 0000436A 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   429 00004371 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   430 00004375 8805(35C30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   431 0000437B 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   432 0000437F E824000000          <1>     call verifyIntegrityOfMCBChain
   433                              <1>     return
    18                              <2> %%_ret:
    19 00004384 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   434                              <1> .get:
   435 00004385 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   436 0000438C 31C0                <1>     xor eax, eax
   437 0000438E 8A05(35C30300)      <1>     mov al, byte [allocStrat]
   438 00004394 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   439 00004397 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   440 0000439B E808000000          <1>     call verifyIntegrityOfMCBChain
   441                              <1>     return
    18                              <2> %%_ret:
    19 000043A0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   442                              <1> .bad:
   443 000043A1 B801000000          <1>     mov eax, errInvFnc
   444 000043A6 EB2F                <1>     jmp short mcbErrHdlr
   445                              <1> ;-----------------------------------:
   446                              <1> ;      Memory related routines      :
   447                              <1> ;-----------------------------------:
   448                              <1> verifyIntegrityOfMCBChain:
   449 000043A8 50                  <1>     push rax
   450 000043A9 53                  <1>     push rbx
   451 000043AA 488B1D(2BC00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   452                              <1> .ok:
   453 000043B1 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   454 000043B4 7408                <1>     je .ok1
   455 000043B6 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   456 000043B9 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   457                              <1> .exit:
   458 000043BB 5B                  <1>     pop rbx
   459 000043BC 58                  <1>     pop rax
   460                              <1>     return ;We have reached the end of the chain, return all good!
    18                              <2> %%_ret:
    19 000043BD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   461                              <1> .ok1:
   462 000043BE 31C0                <1>     xor eax, eax
   463 000043C0 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   464 000043C3 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   465 000043C7 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   466 000043CE 4801C3              <1>     add rbx, rax
   467 000043D1 EBDE                <1>     jmp short .ok
   468                              <1> .bmcbPrep:
   469 000043D3 5B                  <1>     pop rbx ;Pop off the stack first!
   470 000043D4 58                  <1>     pop rax
   471                              <1> badMCBChain:
   472 000043D5 B007                <1>     mov al, errMCBbad   ;Yikes!
   473                              <1> mcbErrHdlr:
   474                              <1>     ;Jumped to with eax = error code
   475 000043D7 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   476 000043DE E89C120000          <1>     call extErrExit ;Error thru the unified error handler
   477 000043E3 3C07                <1>     cmp al, errMCBbad
   478                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000043E5 74D6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   479 000043E7 EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    33                                  %include "./Source/Kernel/MemExec/progMgmt.asm"
    34                              <1> ;EXEC and all default terminates are here
    35                              <1> 
    36                              <1> ;========================
    37                              <1> ;   Interrupt handlers
    38                              <1> ;========================
    39                              <1> terminateProcess:   ;Int 40h
    40 000043E9 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
    41 000043EB E9C8100000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
    42                              <1> terminateRes:       ;Int 47h
    43                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    44 000043F0 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    45 000043F6 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    46 000043F9 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    47 000043FE E9B5100000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    48                              <1> ;========================
    49                              <1> ;    Int 21h functions
    50                              <1> ;========================
    51                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    52                              <1> ;Input:
    53                              <1> ;rdx = Pointer to new PSP in memory.
    54                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    55                              <1> ;   Officially document that this MUST be paragraph aligned.
    56                              <1> ;rsi = alloc size for new psp block
    57 00004403 C605(76C40300)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    58 0000440A 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    59 00004411 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    60 00004413 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    61 00004414 EB0C                <1>     jmp short copyPSP.pspCommon
    62                              <1> copyPSP:      ;ah = 26h
    63                              <1> ;Input:
    64                              <1> ;rdx = Pointer to new PSP in memory.
    65                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    66                              <1> ;   Officially document that this MUST be paragraph aligned.
    67 00004416 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    68 0000441D 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    69 00004421 53                  <1>     push rbx    ;Save this value for PSP allocsize
    70                              <1> .pspCommon:
    71 00004422 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    72 00004429 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    73 0000442D 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    74                              <1> ;r8 is current PSP, now copy psp to rdx
    75                              <1> ;Preserve rdx and r8 until the end
    76 00004431 4C89C6              <1>     mov rsi, r8
    77 00004434 4889D7              <1>     mov rdi, rdx
    78 00004437 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    79 0000443C F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    80 0000443F 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    81 00004447 F605(76C40300)FF    <1>     test byte [pspCopyFlg], -1
    82 0000444E 7449                <1>     jz .copy
    83                              <1>     ;Now reset the parent psp data
    84 00004450 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    85 00004458 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    86                              <1>     ;Now reset the copied jobFileTable
    87 0000445C 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    88 00004460 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    89 00004467 B0FF                <1>     mov al, -1
    90 00004469 F3AA                <1>     rep stosb   ;Store maxHndls many -1's 
    91                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    92 0000446B 498D702A            <1>     lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    93 0000446F 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    94 00004473 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    95                              <1> .xfrJFT:
    96 0000447A 67E31C              <1>     jecxz .copy
    97 0000447D FFC9                <1>     dec ecx
    98 0000447F AC                  <1>     lodsb   ;Get the SFTndx in al
    99 00004480 0FB6D8              <1>     movzx ebx, al
   100 00004483 53                  <1>     push rbx
   101 00004484 E8AFF9FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
   102 00004489 58                  <1>     pop rax
   103 0000448A 7508                <1>     jnz .badJFT
   104 0000448C AA                  <1>     stosb   ;Else store the SFTndx at that position... 
   105 0000448D E8BDF9FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
   106 00004492 EBE6                <1>     jmp short .xfrJFT
   107                              <1> .badJFT:
   108 00004494 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
   109 00004497 EBE1                <1>     jmp short .xfrJFT 
   110                              <1> .copy:
   111 00004499 C605(76C40300)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
   112 000044A0 58                  <1>     pop rax ;Pop the allocsize back into rax
   113 000044A1 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
   114                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
   115 000044A4 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
   116 000044A8 B042                <1>     mov al, 42h
   117 000044AA E82F0D0000          <1>     call muxGetIntVector    ;Get vector in rbx
   118 000044AF 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   119 000044B2 48AB                <1>     stosq   ;Move rdi to next entry and store
   120 000044B4 B043                <1>     mov al, 43h
   121 000044B6 E8230D0000          <1>     call muxGetIntVector    ;Get vector in rbx
   122 000044BB 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   123 000044BE 48AB                <1>     stosq   ;Move rdi to next entry and store
   124 000044C0 B044                <1>     mov al, 44h
   125 000044C2 E8170D0000          <1>     call muxGetIntVector    ;Get vector in rbx
   126 000044C7 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   127 000044CA 48AB                <1>     stosq   ;Move rdi to next entry and store
   128                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   129 000044CC 66C702CD40          <1>     mov word [rdx + psp.return], 040CDh  ;Int 40h
   130 000044D1 66C74250CD41        <1>     mov word [rdx + psp.unixEntry], 041CDh  
   131 000044D7 C64252CB            <1>     mov byte [rdx + psp.unixEntry + 2], 0CBh ;Return
   132                              <1>     return
    18                              <2> %%_ret:
    19 000044DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   133                              <1> 
   134                              <1> terminateStayRes:  ;ah = 31h
   135                              <1> ;Input: al  = Error code
   136                              <1> ;       edx = Number of paragraphs to keep resident
   137 000044DC C605(60C60300)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   138                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   139 000044E3 81FA06000000        <1>     cmp edx, 6
   140 000044E9 7305                <1>     jae .aboveMinimum
   141 000044EB BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   142                              <1> .aboveMinimum:
   143                              <1> ;Now we setup a call to Realloc 
   144                              <1> ;Setup regs with: 
   145                              <1> ;   r8 = address of the block to be realloc'ed
   146                              <1> ;   ebx = How many paras this block should contain after realloc.
   147 000044F0 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   148 000044F7 89D3                <1>     mov ebx, edx
   149 000044F9 50                  <1>     push rax    ;Preserve errorlevel across call
   150 000044FA 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   151 000044FB E8CFFCFFFF          <1>     call reallocMemory
   152 00004500 5B                  <1>     pop rbx
   153 00004501 58                  <1>     pop rax
   154 00004502 7220                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   155 00004504 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   156                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   157 00004508 EB1A                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   158                              <1> 
   159                              <1> simpleTerminate:   ;ah = 00h
   160 0000450A 31C0                <1>     xor eax, eax    ;Just fall through as normal
   161                              <1> terminateClean:    ;ah = 4Ch, EXIT
   162                              <1> ;Here we must:
   163                              <1> ;0) Build errorlevel and adjust variables accordingly
   164                              <1> ;1) Call Network Termination hook.
   165                              <1> ;2) Check if the program is it's own parent. If so, return.
   166                              <1> ;3) Swap the console back to the original driver if it is swapped.
   167                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   168                              <1> ;4) Free all file handles associated to the current process.
   169                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   170                              <1> ;5) Free all memory blocks that have the signature of current PSP
   171                              <1> ;6) Set current PSP to parent PSP
   172                              <1> ;7) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   173                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   174                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   175                              <1> ;10) Exit all critical sections.
   176                              <1> ;
   177                              <1> ; Step 0
   178                              <1> ;For now, just adjust error level in var
   179 0000450C 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   180 0000450E 8625(60C60300)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   181 00004514 F605(EDC30300)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   182 0000451B 740D                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   183 0000451D C605(60C60300)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   184                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   185 00004524 8A25(60C60300)      <1>     mov ah, byte [exitType] ;Get the exitType
   186                              <1> .storeELvl:
   187 0000452A 668905(91C30300)    <1>     mov word [errorLevel], ax   ;Store word
   188                              <1>     
   189                              <1> ; Step 1 Tell network a process is terminating
   190 00004531 B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   191 00004536 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   192 0000453D CD4F                <1>     int 4Fh
   193                              <1> 
   194                              <1> ; Step 2
   195                              <1> .step1:
   196 0000453F 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   197 00004546 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   198 00004549 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   199 0000454D 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   200                              <1>     ;rete            ;If it is, simply return (al has errorLevel)
   201 00004550 0F84C8000000        <1>     je .exit
   202                              <1> ; Step 3
   203 00004556 E826E0FFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   204                              <1> ; Step 3.5
   205 0000455B 803D(60C60300)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   206 00004562 0F8488000000        <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   207                              <1> ; Step 4
   208 00004568 803D(60C60300)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   209 0000456F 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   210 00004571 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   211 00004576 CD4F                <1>     int 4Fh
   212                              <1> .skipAbortNetClose:
   213 00004578 4881C72A000000      <1>     add rdi, psp.jobFileTbl ;Move rdi to point to the start of the JFT
   214 0000457F 4889FE              <1>     mov rsi, rdi    ;Point rsi to jft too
   215 00004582 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls] ;Number of entries in JFT
   216                              <1> .s4lp:
   217 00004589 AC                  <1>     lodsb   ;Inc rsi, get the SFT number in al
   218 0000458A 3CFF                <1>     cmp al, -1  ;End of open JFT entries?
   219 0000458C 7429                <1>     je .step5
   220 0000458E 0FB6D8              <1>     movzx ebx, al   ;Move the file handle number into ebx
   221                              <1>     ;Replace with a call to close the handle eventually
   222 00004591 57                  <1>     push rdi
   223 00004592 E839F8FFFF          <1>     call derefSFTPtr    ;Ret in rdi the SFT pointer
   224 00004597 7216                <1>     jc .badHdl  ;If a bad handle, skip the decrementing of the handle count
   225 00004599 FF35(84C60300)      <1>     push qword [currentSFT]
   226 0000459F E883F6FFFF          <1>     call setCurrentSFT  ;Set rdi to currentSFT
   227 000045A4 E806EFFFFF          <1>     call closeMain  ;Close all files opened by this program. Decrement ref ONLY
   228                              <1>     ;closeMain also flushes all sectors associated to the file
   229                              <1>     ;Ignore errors, simply keep closing files
   230 000045A9 8F05(84C60300)      <1>     pop qword [currentSFT]
   231                              <1> .badHdl:
   232 000045AF 5F                  <1>     pop rdi
   233 000045B0 B0FF                <1>     mov al, -1
   234 000045B2 AA                  <1>     stosb   ;Store a -1 in it's place (not strictly necessary)
   235 000045B3 FFC9                <1>     dec ecx ;Zoom Zoom \mu-op!
   236 000045B5 75D2                <1>     jnz .s4lp   ;Keep looping for all entries in the JFT 
   237                              <1> ;Step 5
   238                              <1> .step5:
   239 000045B7 488B1D(81C30300)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   240                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   241                              <1>     ; with the currentPSP signature and free them.
   242 000045BE 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   243                              <1> .s5lp:  ;And walk the chain
   244                              <1> ;First verify the address in rsi is a valid mcb
   245 000045C5 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   246 000045C7 80F94D              <1>     cmp cl, mcbMarkCtn
   247 000045CA 7405                <1>     je .checkToFree
   248 000045CC 80F95A              <1>     cmp cl, mcbMarkEnd
   249 000045CF 751F                <1>     jne .step6  ;Something wrong so stop freeing
   250                              <1> .checkToFree:
   251 000045D1 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   252 000045D5 7508                <1>     jne .noFree
   253 000045D7 4989F0              <1>     mov r8, rsi ;Move pointer to r8
   254 000045DA E8E8FAFFFF          <1>     call freeMemory ;Free this memory block
   255                              <1>     ;If an error occured, the internal vars will be set.
   256                              <1> .noFree:
   257 000045DF 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   258 000045E2 740C                <1>     je .step6   ;Skip if we are
   259 000045E4 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   260 000045E7 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   261 000045EB 4801C6              <1>     add rsi, rax    ;Goto next mcb block
   262 000045EE EBD5                <1>     jmp short .s5lp
   263                              <1> ;Step 6
   264                              <1> .step6:
   265 000045F0 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   266 000045F4 488905(81C30300)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   267                              <1> ;Step 7
   268                              <1>     ;rbx points to current PSP, the old parent task
   269                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   270 000045FB 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   271 000045FF B044                <1>     mov al, 44h
   272 00004601 E820120000          <1>     call setIntVector
   273 00004606 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   274 0000460A B043                <1>     mov al, 43h
   275 0000460C E815120000          <1>     call setIntVector
   276 00004611 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   277 00004615 B042                <1>     mov al, 42h
   278 00004617 52                  <1>     push rdx
   279 00004618 E809120000          <1>     call setIntVector
   280 0000461D 5A                  <1>     pop rdx
   281                              <1> ;Step 8
   282                              <1> .exit:
   283 0000461E B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   284 00004620 CD4A                <1>     int 4ah
   285                              <1> 
   286 00004622 FA                  <1>     cli
   287                              <1> 
   288 00004623 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   289 00004627 488B1D(81C30300)    <1>     mov rbx, qword [currentPSP]
   290                              <1>     ;Make the parent register frame the current one
   291                              <1>     ;Make RSP point to user stack from parent entry to exec
   292 0000462E 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   293                              <1> 
   294 00004632 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   295 00004637 48C744245802F20000  <1>     mov qword [rsp + callerFrame.flags], 0F202h ;Mimic DOS's return flags
   296                              <1> 
   297 00004640 C605(F7C30300)00    <1>     mov byte [Int44Trans], 0    ;Clear this flag
   298 00004647 C605(6AC30300)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   299 0000464E C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;Reset
   300 00004655 E8B80F0000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   301 0000465A 48CF                <1>     iretq   ;and return to address that was in rdx
    34                                  %include "./Source/Kernel/MemExec/exec.asm"
    35                              <1> 
    36                              <1> 
    37                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    38                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
    39                              <1> ;       rbx = Ptr to the parameter block used for loading
    40                              <1> ;       al = Subfunction:
    41                              <1> ;            00h = Load Program and transfer control to it
    42                              <1> ;            01h = Load Program but do not transfer ctrl to it
    43                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    44                              <1> ;      Reserved for future expansion:
    45                              <1> ;            04h = Load in background execution mode (PE only)
    46                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    47                              <1> ;               function but in 16-bit mode. 
    48                              <1> ;
    49                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    50                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    51                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    52                              <1> 
    53                              <1> ;If AL = 0 :
    54                              <1> ;            Load Child Program and Xfr control to it
    55                              <1> ; rbx ------>   |-------------------------------|
    56                              <1> ;               |   Ptr to Environment Block    |
    57                              <1> ;               |                               |
    58                              <1> ;               | Can be 0 => Get pointer to    |
    59                              <1> ;               | parent Environment Block      |
    60                              <1> ;               |-------------------------------|
    61                              <1> ;               |   Ptr to Command Line to be   |
    62                              <1> ;               |   placed at PSP + 80h         |
    63                              <1> ;               |-------------------------------|
    64                              <1> ;               |   Ptr to first default FCB    |
    65                              <1> ;               |      to copy to PSP.fcb1      |
    66                              <1> ;               |                               |
    67                              <1> ;               | Should be used to parse the   |
    68                              <1> ;               |  first two command line args  |
    69                              <1> ;               |-------------------------------|
    70                              <1> ;               |   Ptr to second default FCB   |
    71                              <1> ;               |      to copy to PSP.fcb2      |
    72                              <1> ;               |-------------------------------|
    73                              <1> ;
    74                              <1> ;If AL = 1 :
    75                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    76                              <1> ; rbx ------>   |-------------------------------|
    77                              <1> ;               |         AS IN AL=00H          |
    78                              <1> ;               |-------------------------------|
    79                              <1> ;               |     Initial Value of RSP      |
    80                              <1> ;               |       on program launch       |
    81                              <1> ;               |                               |
    82                              <1> ;               |     This is returned to the   |
    83                              <1> ;               |         caller by DOS         |
    84                              <1> ;               |-------------------------------|
    85                              <1> ;               |     Initial Value of RIP      |
    86                              <1> ;               |       on program launch       |
    87                              <1> ;               |                               |
    88                              <1> ;               |     This is returned to the   |
    89                              <1> ;               |         caller by DOS         |
    90                              <1> ;               |-------------------------------|
    91                              <1> ;
    92                              <1> ;                      !!Important Note!!
    93                              <1> ;   The block pointed to by rbx must reserve the space for 
    94                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    95                              <1> ;
    96                              <1> ;If AL = 3 :
    97                              <1> ;                      Load program overlay
    98                              <1> ; rbx ------>   |-------------------------------|
    99                              <1> ;               |  Pointer to the byte in the   |
   100                              <1> ;               |  prog space to start writing  |
   101                              <1> ;               |        the overlay at         |
   102                              <1> ;               |-------------------------------|
   103                              <1> ;               | DWORD offset from the base of |
   104                              <1> ;               |  the program to the location  |
   105                              <1> ;               |  the overlay is being loaded  |
   106                              <1> ;               |              in               |
   107                              <1> ;               |  (Called a Relocation Factor) |
   108                              <1> ;               |     Only FOR EXE Overlays     |
   109                              <1> ;               |        for CODE fixups        |
   110                              <1> ;               |  For COM, Current PSP + 100h  |
   111                              <1> ;               |      assumed to suffice       |
   112                              <1> ;               |-------------------------------|
   113                              <1> ;
   114                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
   115                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
   116                              <1> ;
   117                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
   118 0000465C 55                  <1>     push rbp
   119 0000465D 4889E5              <1>     mov rbp, rsp
   120 00004660 4881EC70000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   121 00004667 3C03                <1>     cmp al, execOverlay
   122 00004669 7615                <1>     jbe .validSubfunction
   123                              <1> .badSubFunction:
   124 0000466B B801000000          <1>     mov eax, errInvFnc
   125 00004670 C605(6CC30300)01    <1>     mov byte [errorLocus], eLocUnk
   126                              <1> .badExit:
   127 00004677 4889EC              <1>     mov rsp, rbp
   128 0000467A 5D                  <1>     pop rbp
   129 0000467B E9FF0F0000          <1>     jmp extErrExit
   130                              <1> 
   131                              <1> .validSubfunction:
   132 00004680 3C02                <1>     cmp al, execInvld
   133 00004682 74E7                <1>     je .badSubFunction
   134                              <1>     ;Save registers for each function call
   135 00004684 48895DD8            <1>     mov qword [rbp - execFrame.pParam], rbx
   136 00004688 488955D0            <1>     mov qword [rbp - execFrame.pProgname], rdx
   137 0000468C 0FB6C0              <1>     movzx eax, al
   138 0000468F 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   139 00004693 4889D7              <1>     mov rdi, rdx
   140 00004696 E89E0C0000          <1>     call strlen ;Get string length in cx
   141 0000469B 66894DE0            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   142                              <1>     ;Now open the file we wanna yeet to
   143 0000469F 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   144 000046A1 55                  <1>     push rbp    ;Preserve local frame ptr
   145 000046A2 E84CE5FFFF          <1>     call openFileHdl
   146 000046A7 5D                  <1>     pop rbp
   147 000046A8 72CD                <1>     jc .badExit ;Exit preserving error code in al
   148                              <1>     ;Now ax has the file handle
   149 000046AA 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   150 000046AE 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   151 000046B1 E81AF7FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   152 000046B6 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   153 000046BA F7C280000000        <1>     test edx, devCharDev
   154 000046C0 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   155 000046C2 B002                <1>     mov al, errFnf
   156 000046C4 E9E1040000          <1>     jmp .cleanAndFail
   157                              <1> .validDiskFile:
   158 000046C9 31C0                <1>     xor eax, eax
   159 000046CB 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   160 000046CF 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   161 000046D3 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   162 000046D7 0F848B000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   163 000046DD 488B7DD8            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   164 000046E1 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   165 000046E4 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   166 000046E7 7514                <1>     jnz .copyEnvironmentBlock
   167 000046E9 488B35(81C30300)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   168 000046F0 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   169 000046F4 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   170 000046F8 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   171 000046FB 746B                <1>     jz .loadProgram
   172                              <1> .copyEnvironmentBlock:
   173 000046FD 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   174                              <1>     ;Get the length of the environment
   175 00004700 B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   176 00004705 31C0                <1>     xor eax, eax
   177 00004707 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   178                              <1> .envVerifyLp:
   179 0000470A F3AE                <1>     rep scasb   ;Scan for a terminating word of nulls
   180 0000470C 752F                <1>     jnz .invalidEnvironmentError
   181 0000470E 67E32C              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   182 00004711 FFC9                <1>     dec ecx
   183 00004713 AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   184 00004714 75F4                <1>     jnz .envVerifyLp
   185                              <1> 
   186 00004716 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   187 00004719 57                  <1>     push rdi     ;Save the length of the environment block
   188 0000471A 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   189 00004720 0FB75DE0            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   190 00004724 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   191 00004726 89FB                <1>     mov ebx, edi
   192 00004728 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   193 0000472B E86DF7FFFF          <1>     call allocateMemory
   194 00004730 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   195 00004731 7314                <1>     jnc .copyEnvironment
   196                              <1>     ;Fall thru if not enuff memory
   197                              <1> .insufficientMemory:
   198 00004733 B808000000          <1>     mov eax, errNoMem
   199 00004738 E96D040000          <1>     jmp .cleanAndFail
   200                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   201 0000473D B80A000000          <1>     mov eax, errBadEnv
   202 00004742 E963040000          <1>     jmp .cleanAndFail
   203                              <1> 
   204                              <1> .copyEnvironment:
   205                              <1>     ;rax has the ptr to allocated memory block
   206                              <1>     ;rcx has the number of chars to copy from the source env block
   207 00004747 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   208 0000474A 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   209 0000474E 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pParam]
   210 00004752 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   211 00004755 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   212 00004757 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   213 0000475C 66AB                <1>     stosw       ;Away you go!
   214 0000475E 488B75D0            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   215 00004762 0FB74DE0            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   216 00004766 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   217                              <1> ;Done with the environment... more or less
   218                              <1> .loadProgram:
   219 00004768 B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   220 0000476D 488D15(EAD80300)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   221 00004774 E84D040000          <1>     call .readDataFromHdl
   222 00004779 0F8226040000        <1>     jc .badFmtErr
   223 0000477F 85C0                <1>     test eax, eax   ;Were zero bytes read?
   224 00004781 0F841E040000        <1>     jz .badFmtErr
   225 00004787 3D40000000          <1>     cmp eax, imageDosHdr_size
   226 0000478C 0F8272020000        <1>     jb .loadCom
   227                              <1> 
   228 00004792 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   229 00004797 740B                <1>     je .proceedEXE
   230 00004799 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   231 0000479E 0F8560020000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   232                              <1> .proceedEXE:
   233                              <1>     ;Now we need to read e_lfanew
   234 000047A4 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   235 000047A5 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   236 000047A8 8955A8              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   237 000047AB 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   238 000047AD 30C0                <1>     xor al, al  ;Set file pointer from start of file
   239 000047AF 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   240 000047B3 E8A2E6FFFF          <1>     call lseekHdl   ;Move to that position in the file
   241                              <1> 
   242 000047B8 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   243 000047B9 B914000000          <1>     mov ecx, imageFileHeader_size
   244 000047BE E803040000          <1>     call .readDataFromHdl       ;Now read the COFF header
   245 000047C3 85C0                <1>     test eax, eax   ;Were zero bytes read?
   246 000047C5 0F84DA030000        <1>     jz .badFmtErr
   247 000047CB 3D14000000          <1>     cmp eax, imageFileHeader_size
   248 000047D0 0F82CF030000        <1>     jb .badFmtErr
   249                              <1>     ;So now rdx points to the imageFileHeader
   250 000047D6 66813A6486          <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   251 000047DB 0F85C4030000        <1>     jne .badFmtErr
   252 000047E1 66817A107000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   253 000047E7 0F82B8030000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   254                              <1>     ;Now save the number of sections in the the file
   255 000047ED 0FB74202            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   256 000047F1 85C0                <1>     test eax, eax   ;If this is 0, what?
   257 000047F3 0F84AC030000        <1>     jz .badFmtErr
   258 000047F9 668945A0            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   259                              <1> 
   260                              <1>     ;Now load Optional header, file ptr points to it so all good!
   261 000047FD B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   262                              <1>     ;rdx points to exeHdrSpace
   263 00004802 E8BF030000          <1>     call .readDataFromHdl
   264 00004807 85C0                <1>     test eax, eax   ;Were zero bytes read?
   265 00004809 0F8496030000        <1>     jz .badFmtErr
   266 0000480F 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   267 00004814 0F828B030000        <1>     jb .badFmtErr
   268                              <1>     ;Now File Ptr points to data dirs, not an issue
   269 0000481A 81459870000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   270                              <1>     ;We load the program in, one section at a time, reading section headers in
   271                              <1>     ; one at a time to the section header internal buffer.
   272 00004821 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   273 00004825 744B                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   274 00004827 8B1D(22D90300)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   275 0000482D 488B05(32D90300)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   276 00004834 4885C0              <1>     test rax, rax
   277 00004837 750A                <1>     jnz .notDefaultStackAlloc
   278 00004839 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   278 00004842 00                  <1>
   279                              <1> .notDefaultStackAlloc:
   280 00004843 01C3                <1>     add ebx, eax    ;Add stack allocation
   281 00004845 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   282 0000484B 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   283 0000484E 81C30B000000        <1>     add ebx, 11
   284 00004854 C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   285 00004857 E841F6FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   286 0000485C 0F82D1FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   287 00004862 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   288 00004866 480500010000        <1>     add rax, psp_size
   289 0000486C 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of code goes here
   290 00004870 EB0B                <1>     jmp short .exeProceed1
   291                              <1> .exeOvlySkipAlloc:
   292 00004872 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   293 00004876 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   294 00004879 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   295                              <1> .exeProceed1:
   296                              <1>     ;So now copy one section at a time, read section header in
   297                              <1>     ;File pointer points to the directory table, so skip that
   298 0000487D 8B15(56D90300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   299 00004883 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   300 00004889 0F8216030000        <1>     jb .badFmtErr
   301 0000488F FFCA                <1>     dec edx ;Decrement by 1 to make into a 0 based offset
   302                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   303 00004891 C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   304 00004894 31C9                <1>     xor ecx, ecx
   305 00004896 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   306 0000489A B001                <1>     mov al, 1   ;Move handle forwards from current position
   307 0000489C E8B9E5FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   308                              <1>     ;eax has pointer location after adjustment
   309 000048A1 894598              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   310                              <1>     ;File now points to start of Section headers. Read first header in.
   311                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   312 000048A4 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   313 000048A8 0FB74DA0            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   314                              <1> .loadLp:
   315 000048AC 51                  <1>     push rcx    ;Save # of segments left on stack
   316 000048AD 57                  <1>     push rdi    ;Save the current buffer ptr here
   317 000048AE B928000000          <1>     mov ecx, imageSectionHdr_size
   318 000048B3 488D15(5AD90300)    <1>     lea rdx, sectHdr    ;Read section headers here
   319 000048BA E807030000          <1>     call .readDataFromHdl
   320 000048BF 5F                  <1>     pop rdi
   321 000048C0 59                  <1>     pop rcx
   322 000048C1 85C0                <1>     test eax, eax
   323 000048C3 0F84DC020000        <1>     jz .badFmtErr
   324 000048C9 3D28000000          <1>     cmp eax, imageSectionHdr_size
   325 000048CE 0F85D1020000        <1>     jne .badFmtErr
   326                              <1>     ;File ptr moved forwards to next section header
   327 000048D4 81459828000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   328                              <1>     ;Section header read, now we load section into memory
   329                              <1>     ;Move file ptr to data location
   330 000048DB 8B15(6ED90300)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   331 000048E1 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   332 000048E5 31C0                <1>     xor eax, eax    ;Seek from start of file
   333 000048E7 51                  <1>     push rcx
   334 000048E8 57                  <1>     push rdi
   335 000048E9 E86CE5FFFF          <1>     call lseekHdl
   336 000048EE 5F                  <1>     pop rdi
   337 000048EF 59                  <1>     pop rcx
   338                              <1> 
   339 000048F0 51                  <1>     push rcx
   340 000048F1 57                  <1>     push rdi    ;Save current buffer offset
   341 000048F2 8B0D(6AD90300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dSizeOfRawData]   ;Get # of bytes
   342 000048F8 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   343 000048FB E8C6020000          <1>     call .readDataFromHdl
   344 00004900 5F                  <1>     pop rdi
   345 00004901 59                  <1>     pop rcx
   346 00004902 0F829D020000        <1>     jc .badFmtErr
   347 00004908 85C0                <1>     test eax, eax
   348 0000490A 0F8495020000        <1>     jz .badFmtErr
   349 00004910 3B05(6AD90300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   350 00004916 0F8589020000        <1>     jne .badFmtErr
   351                              <1>     ;Data read ok, now fill in any zeros needed
   352 0000491C 8B05(6AD90300)      <1>     mov eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   353 00004922 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   354 00004925 3B05(62D90300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   355 0000492B 730E                <1>     jae .skipPadding
   356 0000492D 51                  <1>     push rcx
   357 0000492E 8B0D(62D90300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]
   358 00004934 29C1                <1>     sub ecx, eax    ;Get number of bytes to pad with in ecx
   359                              <1>     ;rdi points to pad space
   360 00004936 31C0                <1>     xor eax, eax
   361 00004938 F3AA                <1>     rep stosb   ;Pad that many zeros
   362 0000493A 59                  <1>     pop rcx
   363                              <1> .skipPadding:
   364 0000493B FFC9                <1>     dec ecx ;Decrement our section counter
   365 0000493D 7419                <1>     jz .doExeFixups
   366                              <1>     ;Read next section header in here
   367 0000493F 51                  <1>     push rcx
   368 00004940 57                  <1>     push rdi
   369 00004941 30C0                <1>     xor al, al  ;Move rel start of file
   370 00004943 8B5598              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   371 00004946 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   372 0000494A 31C9                <1>     xor ecx, ecx
   373 0000494C E809E5FFFF          <1>     call lseekHdl
   374 00004951 5F                  <1>     pop rdi
   375 00004952 59                  <1>     pop rcx
   376 00004953 E954FFFFFF          <1>     jmp .loadLp
   377                              <1> .doExeFixups:
   378                              <1> ;Here we fixup addresses as needed
   379                              <1> ;Program Entrypoint is saved in the header structure in the SDA
   380                              <1> ;Move File pointer to COFF header Coff + optional header sizes
   381                              <1> ;We look only for .reloc segment. We have it in memory too so use it to make 
   382                              <1> ; fixups. Zero the in memory image of reloc segment once we are done with it. 
   383                              <1> ;We checked that .reloc exists so all ok
   384 00004958 8B15(56D90300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   385 0000495E 8B55A8              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   386 00004961 81C2AC000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   387                              <1>     ;eax now points to position in file of direcotry entry for reloc
   388 00004967 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   389 0000496B 31C0                <1>     xor eax, eax
   390 0000496D E8E8E4FFFF          <1>     call lseekHdl   ;Move handle there in file
   391 00004972 894598              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   392 00004975 B908000000          <1>     mov ecx, imageDataDirectory_size
   393                              <1>     ;Read 8 bytes into sectHdr space
   394 0000497A 488D15(5AD90300)    <1>     lea rdx, sectHdr
   395 00004981 E840020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   396                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   397 00004986 8B35(5AD90300)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   398 0000498C 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   399 0000498E 0F840F010000        <1>     jz .buildChildPSP   ;... including if overlay
   400 00004994 480375B8            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   401                              <1>     ;Now rsi points to where in memory the relocation data table is
   402                              <1>     ;Now compute the relocation factor 
   403 00004998 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   404 0000499C 482B05(02D90300)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   405                              <1>     ;The value in rax gives how much to subtract by
   406 000049A3 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   407 000049A7 7507                <1>     jne .notOverlayReloc
   408 000049A9 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   409 000049AD 034308              <1>     add eax, dword [rbx + loadOvly.dRelocFct]   ;Add the overlay reloc factor
   410                              <1> .notOverlayReloc:
   411 000049B0 48894598            <1>     mov qword [rbp - execFrame.qRelocVal], rax  ;Save relocation value
   412 000049B4 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   413                              <1>     ;rsi points to relocation data table in memory
   414 000049B7 8B0D(5ED90300)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   415 000049BD 81F900000000        <1>     cmp ecx, 0    ;If no relocations, skip
   416 000049C3 0F84DA000000        <1>     jz .buildChildPSP
   417 000049C9 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   418                              <1>     ;rsi points to the first base relocation block. The relocations begin
   419                              <1>     ; after the first block
   420                              <1>     ;ecx has the number of base relocation blocks to process.
   421                              <1> .nextBlock:
   422 000049CD 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   423 000049CE 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   424 000049D0 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   425 000049D3 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes
   426 000049D6 D1E9                <1>     shr ecx, 1  ;Divide by 2 to get number of words = # of relocs to do
   427 000049D8 67E311              <1>     jecxz .blockDone
   428                              <1> .blockNotDone:
   429 000049DB 66AD                <1>     lodsw   ;Get the next page offset word
   430 000049DD 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   431 000049E2 4801C7              <1>     add rdi, rax    ;Add this offset to rdi, the pointer to program image
   432                              <1>     ;rdi points to qword to rebase
   433 000049E5 48011F              <1>     add qword [rdi], rbx    ;Relocation factor was saved in rbx
   434 000049E8 FFC9                <1>     dec ecx
   435 000049EA 75EF                <1>     jnz .blockNotDone
   436                              <1> .blockDone:
   437 000049EC 59                  <1>     pop rcx
   438 000049ED FFC9                <1>     dec ecx
   439 000049EF 75DC                <1>     jnz .nextBlock
   440 000049F1 8B05(FAD80300)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   441 000049F7 480345B8            <1>     add rax, qword [rbp - execFrame.pProgBase]
   442 000049FB 488945A8            <1>     mov qword [rbp - execFrame.pProgEP], rax
   443 000049FF E99F000000          <1>     jmp .buildChildPSP
   444                              <1> .loadCom:
   445                              <1>     ;File is open here, so just read the file into memory. 
   446                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   447                              <1>     ;Allocate 64Kb of memory, or as much as we can
   448 00004A04 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   449 00004A08 744E                <1>     je .comOverlay
   450 00004A0A BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   451 00004A0F 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   452 00004A12 55                  <1>     push rbp
   453 00004A13 E885F4FFFF          <1>     call allocateMemory
   454 00004A18 5D                  <1>     pop rbp
   455 00004A19 734A                <1>     jnc .comallocOk
   456 00004A1B 3C08                <1>     cmp al, errNoMem
   457 00004A1D 0F8587010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   458                              <1>     ;rbx should have the amount available
   459                              <1>     ;We check if this value is psp_size more than filesize
   460 00004A23 53                  <1>     push rbx    ;Save new minimum size
   461 00004A24 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   462 00004A29 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   463 00004A2D 31D2                <1>     xor edx, edx    ;Go to end of file
   464 00004A2F E826E4FFFF          <1>     call lseekHdl
   465                              <1>     ;eax has file size
   466 00004A34 5B                  <1>     pop rbx ;Get back max alloc size
   467 00004A35 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   468 00004A37 29C2                <1>     sub edx, eax
   469 00004A39 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   470 00004A3F 0F82EEFCFFFF        <1>     jb .insufficientMemory   ;Fail
   471 00004A45 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   472 00004A48 E850F4FFFF          <1>     call allocateMemory
   473 00004A4D 0F8257010000        <1>     jc .cleanAndFail
   474 00004A53 E90D000000          <1>     jmp .comallocOk
   475                              <1> .comOverlay:
   476                              <1>     ;Here we simply read the file into the buffer provided
   477 00004A58 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   478 00004A5C 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   479 00004A5F 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   480 00004A63 EB0A                <1>     jmp short .comRead
   481                              <1> .comallocOk:
   482                              <1>     ;rax should point to the first byte
   483 00004A65 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   484 00004A69 480500010000        <1>     add rax, psp_size
   485                              <1> .comRead:
   486 00004A6F 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   487                              <1> 
   488 00004A73 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   489 00004A78 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   490 00004A7C 31D2                <1>     xor edx, edx    ;Go to end of file
   491 00004A7E E8D7E3FFFF          <1>     call lseekHdl
   492                              <1>     ;eax has filesize now
   493 00004A83 50                  <1>     push rax    ;Save filesize
   494 00004A84 31C0                <1>     xor eax, eax    ;Reposition to start of file
   495 00004A86 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   496 00004A8A 31D2                <1>     xor edx, edx    ;Go to start of file
   497 00004A8C E8C9E3FFFF          <1>     call lseekHdl
   498 00004A91 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   499 00004A92 488B55B8            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   500 00004A96 E82B010000          <1>     call .readDataFromHdl   ;Read from the file handle
   501 00004A9B 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   502 00004A9F 488945A8            <1>     mov qword [rbp - execFrame.pProgEP], rax
   503                              <1> .buildChildPSP:
   504                              <1>     ;We can close handle now
   505 00004AA3 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   506 00004AA7 55                  <1>     push rbp
   507 00004AA8 E855E2FFFF          <1>     call closeFileHdl   ;Close the file
   508 00004AAD 5D                  <1>     pop rbp
   509                              <1> 
   510                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   511 00004AAE 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   512 00004AB2 0F84CB000000        <1>     je .overlayExit
   513                              <1>     ;Now build the PSP
   514 00004AB8 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   515 00004ABB 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   516 00004ABF 52                  <1>     push rdx
   517 00004AC0 55                  <1>     push rbp
   518 00004AC1 E83DF9FFFF          <1>     call createPSP
   519 00004AC6 5D                  <1>     pop rbp
   520 00004AC7 5A                  <1>     pop rdx
   521                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   522 00004AC8 488915(81C30300)    <1>     mov qword [currentPSP], rdx
   523 00004ACF E86C0B0000          <1>     call dosCrit1Enter
   524 00004AD4 E812010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   525                              <1> 
   526 00004AD9 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   527 00004AE0 48893D(79C30300)    <1>     mov qword [currentDTA], rdi ;and set it!
   528                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   529                              <1>     ; and set FS to point to the PSP
   530 00004AE7 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   531                              <1> 
   532 00004AEB 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   533 00004AEF B925000000          <1>     mov ecx, fcb_size
   534 00004AF4 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   535 00004AF8 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   536 00004AFA F3A4                <1>     rep movsb   ;Copy fcb 1 over
   537 00004AFC 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   538 00004B00 B925000000          <1>     mov ecx, fcb_size
   539 00004B05 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   540 00004B09 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   541 00004B0B F3A4                <1>     rep movsb   ;Copy fcb 2 over
   542 00004B0D 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   543 00004B11 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   544 00004B18 B980000000          <1>     mov ecx, 80h
   545 00004B1D F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   546                              <1> 
   547 00004B1F 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   548 00004B21 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   549                              <1> 
   550                              <1>     ;Put PSP base value in edx:eax to place in FS, dont rely on this in future!
   551 00004B24 B9000100C0          <1>     mov ecx, 0C0000100h ;R/W FS MSR
   552 00004B29 89D0                <1>     mov eax, edx    ;Move low dword address into rax
   553 00004B2B 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   554 00004B2F 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   555                              <1> 
   556 00004B31 E8B6060000          <1>     call getUserRegs    ;Need to get Int 42h address from stack
   557 00004B36 488B4648            <1>     mov rax, qword [rsi + callerFrame.rip]  ;Get parent return address
   558 00004B3A 4889470A            <1>     mov qword [rdi + psp.oldInt42h], rax    ;and save it in PSP
   559 00004B3E 4889C2              <1>     mov rdx, rax    ;Move return address to rdx to set up the Interrupt Vector
   560 00004B41 B042                <1>     mov al, 42h
   561 00004B43 E8DE0C0000          <1>     call setIntVector   ;bx preserved by this call
   562                              <1> 
   563                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   564 00004B48 88D8                <1>     mov al, bl
   565 00004B4A 30DB                <1>     xor bl, bl
   566 00004B4C E8BF060000          <1>     call setDrive
   567 00004B51 7302                <1>     jnc .drive1Ok
   568 00004B53 B3FF                <1>     mov bl, -1
   569                              <1> .drive1Ok:
   570 00004B55 88F8                <1>     mov al, bh
   571 00004B57 30FF                <1>     xor bh, bh
   572 00004B59 E8B2060000          <1>     call setDrive
   573 00004B5E 7302                <1>     jnc .drive2Ok
   574 00004B60 B7FF                <1>     mov bh, -1
   575                              <1> .drive2Ok:
   576                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   577                              <1>     ;rdi has pointer to psp
   578 00004B62 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   579                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   580 00004B65 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   581 00004B6A 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   582 00004B6E 741C                <1>     je .xfrProgram
   583 00004B70 488B45A8            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   584 00004B74 488B55D8            <1>     mov rdx, qword [rbp - execFrame.pParam]
   585 00004B78 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   586 00004B7C 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   587 00004B80 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   588                              <1> .overlayExit:
   589 00004B83 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   590 00004B86 5D                  <1>     pop rbp ;Point rsp to the return address
   591 00004B87 E9E50A0000          <1>     jmp extGoodExit ;And return!
   592                              <1> .xfrProgram:
   593 00004B8C FA                  <1>     cli
   594 00004B8D 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   595 00004B90 C605(6AC30300)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   596 00004B97 FB                  <1>     sti
   597 00004B98 FF75A8              <1>     push qword [rbp - execFrame.pProgEP]
   598 00004B9B 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   599 00004B9E 4989F9              <1>     mov r9, rdi
   600 00004BA1 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   601                              <1>     return  ;Return to child task
    18                              <2> %%_ret:
    19 00004BA4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   602                              <1> 
   603                              <1> .badFmtErr:
   604 00004BA5 B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   605                              <1> .cleanAndFail:
   606                              <1> ;Close the open file and any open resources and fail
   607 00004BAA E82D000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   608 00004BAF E8960A0000          <1>     call dosCrit1Exit
   609 00004BB4 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   610 00004BB8 50                  <1>     push rax    ;Save error code
   611 00004BB9 55                  <1>     push rbp
   612 00004BBA E843E1FFFF          <1>     call closeFileHdl
   613 00004BBF 5D                  <1>     pop rbp
   614 00004BC0 58                  <1>     pop rax
   615 00004BC1 E9B1FAFFFF          <1>     jmp .badExit
   616                              <1> 
   617                              <1> .readDataFromHdl:
   618                              <1> ;Input: bx = File Handle
   619                              <1> ;       ecx = Number of bytes to transfer
   620                              <1> ;       rdx = Ptr to the buffer to use
   621 00004BC6 E811000000          <1>     call .clearArenaOwner   ;Entering critical section!
   622 00004BCB 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   623 00004BCF 55                  <1>     push rbp
   624 00004BD0 E86CE1FFFF          <1>     call readFileHdl
   625 00004BD5 5D                  <1>     pop rbp
   626 00004BD6 E810000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   627                              <1>     return
    18                              <2> %%_ret:
    19 00004BDB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   628                              <1> .clearArenaOwner:
   629 00004BDC 53                  <1>     push rbx
   630 00004BDD 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   631 00004BDF E85C0A0000          <1>     call dosCrit1Enter
   632 00004BE4 E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   633 00004BE9 5B                  <1>     pop rbx
   634                              <1>     return
    18                              <2> %%_ret:
    19 00004BEA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   635                              <1> .setPSPArenaOwner:
   636                              <1> ;Sets the current PSP as the arena owner
   637 00004BEB 53                  <1>     push rbx
   638 00004BEC 488B1D(81C30300)    <1>     mov rbx, qword [currentPSP]
   639 00004BF3 E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   640 00004BF8 E84D0A0000          <1>     call dosCrit1Exit
   641 00004BFD 5B                  <1>     pop rbx
   642                              <1>     return
    18                              <2> %%_ret:
    19 00004BFE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   643                              <1> .setProgOrEnvArenaOwnerToRBX:
   644                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   645 00004BFF 9C                  <1>     pushfq
   646 00004C00 50                  <1>     push rax
   647                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   648                              <1>     ;This is because they are set up at separate points in the routine!
   649 00004C01 488B45C0            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   650 00004C05 E80C000000          <1>     call .writeArenaHeaderOwner
   651 00004C0A 488B45C8            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   652 00004C0E E803000000          <1>     call .writeArenaHeaderOwner
   653 00004C13 58                  <1>     pop rax
   654 00004C14 9D                  <1>     popfq
   655                              <1>     return
    18                              <2> %%_ret:
    19 00004C15 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   656                              <1> .writeArenaHeaderOwner:
   657                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   658                              <1> ;       rbx = Owner ID
   659 00004C16 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   660                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004C19 74FA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   661 00004C1B 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   662 00004C21 48895801            <1>     mov qword [rax + 1], rbx
   663                              <1>     return
    18                              <2> %%_ret:
    19 00004C25 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    35                                  %include "./Source/Kernel/Local/Local.asm"
    36                              <1> ;Localisation based functions live here
    37                              <1> 
    38                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    39                              <1> ;al = 0 => Get the switch char
    40                              <1> ;al = 1 => Set the switch char to whats in DL
    41                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
    42                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
    43                              <1> ;       Always returns -1 => /DEV/ optional
    44                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    45                              <1> ;       Input value is ignored
    46 00004C26 3C01                <1>     cmp al, 01
    47 00004C28 7412                <1>     je .getSC
    48 00004C2A 7209                <1>     jb .setSC
    49 00004C2C 3C03                <1>     cmp al, 03
    50 00004C2E 7214                <1>     jb .getDev
    51 00004C30 741C                <1>     je .setDev
    52 00004C32 B0FF                <1>     mov al, -1
    53                              <1>     return
    18                              <2> %%_ret:
    19 00004C34 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> .setSC:
    55 00004C35 8815(33C30300)      <1>     mov byte [switchChar], dl
    56                              <1>     return
    18                              <2> %%_ret:
    19 00004C3B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    57                              <1> .getSC:
    58 00004C3C 8A15(33C30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    59 00004C42 EB02                <1>     jmp short .getRet
    60                              <1> .getDev:
    61 00004C44 B2FF                <1>     mov dl, -1
    62                              <1> .getRet:
    63 00004C46 E8A1050000          <1>     call getUserRegs
    64 00004C4B 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    65                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    66                              <1>     return
    18                              <2> %%_ret:
    19 00004C4E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    67                              <1> 
    68                              <1> 
    69                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    70                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    71                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    72 00004C4F C3                  <1>     ret
    36                                  %include "./Source/Kernel/ctrlc.asm"
    37                              <1> diskDevErr:
    38                              <1> ;Called, NOT Jumped to. 
    39                              <1> ;Input: rdi = Disk Buffer pointer
    40                              <1> ;       eax = Status word (Zero Extended)
    41                              <1> ;       rbp = Disk DPB pointer
    42                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    43                              <1> ;Output: al = Int 44h response (0-3)
    44                              <1> ; All other registers preserved
    45 00004C50 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    46 00004C57 89C7                <1>     mov edi, eax    ;Store status word in rdi
    47 00004C59 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    48 00004C5C 8A25(C9C30300)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    49 00004C62 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    50                              <1>     ;Test for correct buffer data type
    51 00004C65 53                  <1>     push rbx    ;Save rbx temporarily
    52 00004C66 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    53 00004C69 F6C301              <1>     test bl, dosBuffer
    54 00004C6C 7505                <1>     jnz .df0
    55 00004C6E 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    56 00004C71 EB17                <1>     jmp short .df3
    57                              <1> .df0:
    58 00004C73 F6C302              <1>     test bl, fatBuffer
    59 00004C76 7505                <1>     jnz .df1
    60 00004C78 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    61 00004C7B EB0D                <1>     jmp short .df3
    62                              <1> .df1:
    63 00004C7D F6C304              <1>     test bl, dirBuffer
    64 00004C80 7505                <1>     jnz .df2
    65 00004C82 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    66 00004C85 EB03                <1>     jmp short .df3
    67                              <1> .df2:
    68 00004C87 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    69                              <1> .df3:
    70 00004C8A 5B                  <1>     pop rbx
    71 00004C8B 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    72 00004C8F E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    73 00004C94 488B2D(E0C60300)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    74 00004C9B 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    75                              <1>     return
    18                              <2> %%_ret:
    19 00004CA2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> charDevErr:
    78                              <1> ;Called with ah with additional bits
    79 00004CA3 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
    80                              <1> criticalErrorSetup:
    81 00004CA6 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    82 00004CAC 48892D(E0C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    83 00004CB3 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    84                              <1>     ;For now, fall through, but need much work to change it later! 
    85                              <1> 
    86                              <1> 
    87                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    88                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    89                              <1> ; to the critical error handler.
    90                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    91                              <1> ; and with Int44Bitfield set
    92                              <1> ;               AH = Critical Error Bitfield
    93                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    94                              <1> ;               Bit 6 - Reserved
    95                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    96                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    97                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    98                              <1> ;               Bits [2-1] = Affected Disk Error
    99                              <1> ;                     0 0   DOS area
   100                              <1> ;                     0 1   FAT area
   101                              <1> ;                     1 0   Directory area
   102                              <1> ;                     1 1   Data area
   103                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   104                              <1> ;               AL  = Failing drive number if AH[7] = 0
   105                              <1> ;               DIL = Error code for errorMsg
   106                              <1> ;               RSI = EA of Device Header for which device the error occured
   107                              <1> ;Return:
   108                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   109                              <1> ;                  = 1 - Retry the Operation    (Retry)
   110                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   111                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   112                              <1> ; Return response from int 44h in al
   113                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   114                              <1> ; This function will terminate the program if an abort was requested!
   115                              <1> ; This function also destroys RBP
   116 00004CB9 803D(69C30300)01    <1>     cmp byte [critErrFlag], 1
   117 00004CC0 7204                <1>     jb .noIntError  ;If not 0, enter
   118 00004CC2 B003                <1>     mov al, critFail    ;Else, return Fail always
   119 00004CC4 EB4F                <1>     jmp short .exit     ;Don't translate fail to abort
   120                              <1> .noIntError:
   121 00004CC6 FA                  <1>     cli ;Disable Interrupts
   122 00004CC7 FE05(69C30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   123 00004CCD FE0D(6AC30300)      <1>     dec byte [inDOS]    ;Exiting DOS
   124 00004CD3 488925(C1C30300)    <1>     mov qword [xInt44hRSP], rsp
   125 00004CDA 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   126 00004CE1 31ED                <1>     xor ebp, ebp    ;Always zeroed
   127 00004CE3 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   128 00004CE5 488B25(C1C30300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   129 00004CEC C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   130 00004CF3 FE05(6AC30300)      <1>     inc byte [inDOS]    ;Reenter DOS
   131 00004CF9 FB                  <1>     sti ;Reenable Interrupts
   132                              <1>     ;Now we check that the response given was allowed, and translate if needed
   133                              <1> .checkResponse:
   134 00004CFA 3C01                <1>     cmp al, critRetry
   135 00004CFC 721F                <1>     jb .checkIgnore
   136 00004CFE 7428                <1>     je .checkRetry
   137 00004D00 3C03                <1>     cmp al, critFail
   138 00004D02 752F                <1>     jne .abort   ;Must be abort
   139                              <1> .setFail:   ;Here is for fail
   140 00004D04 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   141 00004D06 FE05(CBC30300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   142 00004D0C F605(C9C30300)08    <1>     test byte [Int44bitfld], critFailOK
   143 00004D13 751E                <1>     jnz .abort  ;If fail not permitted, abort
   144                              <1> .exit:
   145 00004D15 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   146                              <1>     return
    18                              <2> %%_ret:
    19 00004D1C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   147                              <1> .checkIgnore:
   148 00004D1D F605(C9C30300)20    <1>     test byte [Int44bitfld], critIgnorOK
   149 00004D24 75EF                <1>     jnz .exit
   150 00004D26 EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   151                              <1> .checkRetry:
   152 00004D28 F605(C9C30300)10    <1>     test byte [Int44bitfld], critRetryOK
   153 00004D2F 75E4                <1>     jnz .exit   
   154 00004D31 EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   155                              <1> .abort:
   156                              <1> ;Prepare to abort. We abort from within!
   157                              <1>     ;First check if the process is it's own parent.
   158                              <1>     ;If it is, we exit fail and return to the process
   159 00004D33 488B05(81C30300)    <1>     mov rax, qword [currentPSP] ;Get the current psp
   160 00004D3A 53                  <1>     push rbx
   161 00004D3B 488B5822            <1>     mov rbx, qword [rax + psp.parentPtr]
   162 00004D3F 4839C3              <1>     cmp rbx, rax    ;Check if the process is it's own parent
   163 00004D42 5B                  <1>     pop rbx
   164 00004D43 7509                <1>     jne .kill   ;If the process is not it's own parent, we kill the process
   165 00004D45 C605(F7C30300)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   166 00004D4C EBB6                <1>     jmp short .setFail
   167                              <1> .kill:
   168 00004D4E 66893D(6DC30300)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   169 00004D55 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   170 00004D57 C605(60C60300)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   171 00004D5E E9C1F7FFFF          <1>     jmp terminateClean.altEP
   172                              <1> 
   173                              <1> ctrlBreakHdlr:
   174 00004D63 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   175 00004D65 E845D7FFFF          <1>     call printCaretASCII
   176 00004D6A E870D7FFFF          <1>     call printCRLF
   177                              <1>     ;Reset the console back to 0
   178 00004D6F C605(F5C30300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   179                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   180 00004D76 FA                  <1> 	cli
   181 00004D77 488B25(DCC30300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   182 00004D7E E88F080000          <1> 	call dosPopRegs ;Get user state back
   183 00004D83 488925(89C30300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   184 00004D8A F8                  <1>     clc
   185 00004D8B CD43                <1>     int 43h ;Call critical error handler
   186 00004D8D FA                  <1>     cli ;Clear interrupts again
   187 00004D8E 488905(95C30300)    <1>     mov qword [oldRAX], rax ;Save rax
   188 00004D95 9C                  <1>     pushfq  ;Get flags in rax
   189 00004D96 58                  <1>     pop rax 
   190 00004D97 483B25(89C30300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   191 00004D9E 750C                <1>     jne .checkCF
   192                              <1> .returnToDOS:
   193 00004DA0 488B05(95C30300)    <1>     mov rax, qword [oldRAX]
   194 00004DA7 E90C070000          <1>     jmp functionDispatch    ;Goto int 41h
   195                              <1> .checkCF:
   196 00004DAC 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   197 00004DB3 A801                <1>     test al, 1  ;CF set?
   198 00004DB5 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   199 00004DB7 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   200 00004DBC C605(EDC30300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   201 00004DC3 E9F0060000          <1>     jmp functionDispatch
   202                              <1> 
    37                                  %include "./Source/Kernel/dosPrim.asm"
    38                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    39                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    40                              <1> 
    41                              <1> dosDefCritErrHdlr:
    42                              <1> ;The DOS default critical error handler always returns FAIL
    43 00004DC8 B003                <1>     mov al, critFail
    44 00004DCA 48CF                <1>     iretq
    45                              <1> goDriverChar:
    46                              <1> ;Shortcut for Char requests, make a driver request
    47                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    48 00004DCC 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    49                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    50                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    51                              <1> ;       rbx = Ptr to the request header for the driver call!
    52 00004DD0 E87F080000          <1>     call dosCrit2Enter
    53 00004DD5 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    54 00004DD8 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    55 00004DDB E87E080000          <1>     call dosCrit2Exit
    56                              <1>     return
    18                              <2> %%_ret:
    19 00004DE0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    57                              <1> 
    58                              <1> setupPhysicalDiskRequest:
    59                              <1> ;Ensure that al has valid disk number
    60                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    61                              <1> ;If CF=NC, rbp = DPB ptr.
    62                              <1> ;If CF=CY, exit error
    63 00004DE1 84C0                <1>     test al, al
    64 00004DE3 723F                <1>     jc .diskError
    65 00004DE5 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
    66 00004DEB 7337                <1>     jae .diskError
    67 00004DED 50                  <1>     push rax
    68 00004DEE FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    69 00004DF0 E884040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    70 00004DF5 58                  <1>     pop rax
    71 00004DF6 7235                <1>     jc .error
    72 00004DF8 8805(63C60300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    73 00004DFE 488B2D(6CC60300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    74 00004E05 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    75 00004E0D 750A                <1>     jnz .netError
    76 00004E0F 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    77 00004E13 E85F030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    78                              <1>     return
    18                              <2> %%_ret:
    19 00004E18 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    79                              <1> .netError:
    80 00004E19 66C705(6DC30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    80 00004E21 00                  <1>
    81 00004E22 EB09                <1>     jmp short .error
    82                              <1> .diskError:
    83 00004E24 66C705(6DC30300)0F- <1>     mov word [errorExCde], errBadDrv
    83 00004E2C 00                  <1>
    84                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    85 00004E2D C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
    86 00004E34 C605(6FC30300)07    <1>     mov byte [errorAction], eActRetUsr
    87 00004E3B C605(70C30300)09    <1>     mov byte [errorClass], eClsBadFmt
    88 00004E42 F9                  <1>     stc
    89                              <1>     return
    18                              <2> %%_ret:
    19 00004E43 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    90                              <1> 
    91                              <1> setupAbsDiskEntry:
    92                              <1> ;Prepares to sets up the CDS and DPB for the request
    93 00004E44 FE05(6AC30300)      <1>     inc byte [inDOS]
    94 00004E4A FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    95 00004E4B FC                  <1>     cld ;Set string ops in the right direction
    96 00004E4C E890FFFFFF          <1>     call setupPhysicalDiskRequest
    97 00004E51 7223                <1>     jc .exit    ;Error exit
    98 00004E53 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    99 00004E5A 56                  <1>     push rsi
   100 00004E5B 50                  <1>     push rax
   101 00004E5C 488D35(7FC40300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
   102 00004E63 8806                <1>     mov byte [rsi], al  ;Construct a path
   103 00004E65 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   104 00004E68 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   105 00004E6C F8                  <1>     clc
   106                              <1> ;++++++++++++++++++++++++++++
   107                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   108                              <1> ;Entered with path in rsi (ah=03h)
   109 00004E6D B800030000          <1>     mov eax, 0300h  
   110 00004E72 CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   111                              <1> ;++++++++++++++++++++++++++++
   112 00004E74 58                  <1>     pop rax
   113 00004E75 5E                  <1>     pop rsi
   114                              <1> .exit:
   115 00004E76 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   116                              <1>     return
    18                              <2> %%_ret:
    19 00004E78 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   117                              <1> 
   118                              <1> absDiskWrite:       ;Int 46h
   119                              <1> ;al = Drive number
   120                              <1> ;rbx = Memory Buffer address to read from
   121                              <1> ;ecx = Number of sectors to write
   122                              <1> ;rdx = Start LBA to write to
   123 00004E79 FA                  <1>     cli
   124 00004E7A 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   125 00004E81 488D25(E0D80300)    <1>     lea rsp, DiskStakTop
   126 00004E88 55                  <1>     push rbp
   127 00004E89 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   128 00004E8A E8B5FFFFFF          <1>     call setupAbsDiskEntry
   129 00004E8F 7252                <1>     jc absDiskExit
   130 00004E91 E8CE010000          <1>     call primReqWriteSetup
   131 00004E96 EB1D                <1>     jmp short absDiskReadWriteCommon
   132                              <1> absDiskRead:        ;Int 45h
   133                              <1> ;al = Drive number
   134                              <1> ;rbx = Memory Buffer address to write to
   135                              <1> ;ecx = Number of sectors to read
   136                              <1> ;rdx = Start LBA to read from
   137 00004E98 FA                  <1>     cli 
   138 00004E99 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   139 00004EA0 488D25(E0D80300)    <1>     lea rsp, DiskStakTop
   140 00004EA7 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   141 00004EA8 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   142 00004EA9 E896FFFFFF          <1>     call setupAbsDiskEntry
   143 00004EAE 7233                <1>     jc absDiskExit
   144 00004EB0 E8BA010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   145                              <1> absDiskReadWriteCommon:
   146                              <1> ;Entered with the appropriate function number in ah
   147                              <1> ; and primary request header in rbx
   148 00004EB5 E83B000000          <1>     call absDiskDriverCall
   149 00004EBA 7427                <1>     jz absDiskExit  ;Skip error code checking
   150 00004EBC 8A05(25C40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   151                              <1>     ;DOS uses the following pairs in a table
   152                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   153 00004EC2 B480                <1>     mov ah, 80h ;Attachment failure
   154 00004EC4 3C0C                <1>     cmp al, 0Ch ;Gen error
   155 00004EC6 741A                <1>     je .absExit
   156 00004EC8 B440                <1>     mov ah, 40h ;Seek error
   157 00004ECA 3C06                <1>     cmp al, 06h
   158 00004ECC 7414                <1>     je .absExit
   159 00004ECE B408                <1>     mov ah, 08h ;Bad CRC
   160 00004ED0 3C04                <1>     cmp al, 04h
   161 00004ED2 740E                <1>     je .absExit
   162 00004ED4 B404                <1>     mov ah, 04h ;Sector not found
   163 00004ED6 3C08                <1>     cmp al, 08h
   164 00004ED8 7408                <1>     je .absExit
   165 00004EDA 30E4                <1>     xor ah, ah  ;Write Protect Violation
   166 00004EDC 84C0                <1>     test al, al
   167 00004EDE 7402                <1>     je .absExit
   168 00004EE0 B402                <1>     mov ah, 02h ;Other Error
   169                              <1> .absExit:
   170 00004EE2 F9                  <1>     stc
   171                              <1> absDiskExit:
   172 00004EE3 5B                  <1>     pop rbx
   173 00004EE4 5D                  <1>     pop rbp
   174 00004EE5 FA                  <1>     cli
   175 00004EE6 FE0D(6AC30300)      <1>     dec byte [inDOS]
   176 00004EEC 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]
   177 00004EF3 FB                  <1>     sti ;Reenable interrupts
   178                              <1>     return ;Return from interrupt without popping flags!
    18                              <2> %%_ret:
    19 00004EF4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   179                              <1> absDiskDriverCall:
   180                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   181                              <1> ;       rbx = Request header address
   182                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   183                              <1> ;       eax = Status word from request
   184                              <1> ;       ecx = Number of sectors transferred
   185 00004EF5 56                  <1>     push rsi
   186                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   187 00004EF6 8B0D(38C40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   188                              <1>     ;Prepare for goDriver now
   189 00004EFC 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   190 00004F00 E8CBFEFFFF          <1>     call goDriver   ;Make request
   191 00004F05 5E                  <1>     pop rsi
   192 00004F06 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   193 00004F0C 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   194 00004F0E 0FB705(25C40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   195 00004F15 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   196                              <1>     return
    18                              <2> %%_ret:
    19 00004F19 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> getDiskDPB:
   199                              <1> ;Gets the disk DPB if the Disk is valid
   200                              <1> ;Otherwise will return a pointer to the drive DPB
   201                              <1> ;Called with rdi pointing to the CDS
   202                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   203 00004F1A 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   204 00004F1E 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   205 00004F21 8805(63C60300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   206 00004F27 E84B020000          <1>     call setWorkingDPB
   207 00004F2C 57                  <1>     push rdi    ;Save the CDS ptr
   208 00004F2D E85A000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   209 00004F32 5F                  <1>     pop rdi
   210 00004F33 7233                <1>     jc .exitBad ;Preserve CF
   211 00004F35 7530                <1>     jnz .exit
   212                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   213 00004F37 8A0D(70C00300)      <1>     mov cl, byte [lastdrvNum]
   214 00004F3D 31C0                <1>     xor eax, eax
   215 00004F3F 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   216 00004F42 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   217 00004F46 488B3D(5DC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   218                              <1> .checkCDS:
   219 00004F4D 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   220 00004F51 7509                <1>     jne .next
   221 00004F53 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   222 00004F57 7403                <1>     jz .next    ;IF yes, skip it
   223 00004F59 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   224                              <1> .next:
   225 00004F5C 4881C75B000000      <1>     add rdi, cds_size
   226 00004F63 FEC9                <1>     dec cl
   227 00004F65 75E6                <1>     jnz .checkCDS
   228                              <1> .exit:
   229 00004F67 F8                  <1>     clc
   230                              <1> .exitBad:
   231                              <1>     return
    18                              <2> %%_ret:
    19 00004F68 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> checkIfMedCheck:
   234                              <1> ;Input: rsi = DPB for disk
   235 00004F69 50                  <1>     push rax
   236 00004F6A 53                  <1>     push rbx
   237                              <1>     ;!!!!!!!!!!!!
   238                              <1>     ;For now just if its the same disk, be ok with it.
   239                              <1>     ;!!!!!!!!!!!!
   240                              <1>     ;Read the clock record. Cross Day Bndry will always force a new operation
   241                              <1>     ;Read the time fields directly.
   242 00004F6B E8BBD3FFFF          <1>     call swapPrimaryHeader  ;Save the primary header temporarily
   243 00004F70 E808DAFFFF          <1>     call readDateTimeRecord ;Update the time
   244 00004F75 F9                  <1>     stc ;Set CF, write backup to primary header
   245 00004F76 E8B0D3FFFF          <1>     call swapPrimaryHeader
   246                              <1> 
   247                              <1> 
   248 00004F7B 8A06                <1>     mov al, byte [rsi + dpb.bDriveNumber] 
   249 00004F7D 3805(ACD90300)      <1>     cmp byte [lastDiskNum], al
   250 00004F83 7500                <1>     jnz .exit
   251                              <1> 
   252                              <1> .exit:
   253 00004F85 5B                  <1>     pop rbx
   254 00004F86 58                  <1>     pop rax
   255                              <1>     return
    18                              <2> %%_ret:
    19 00004F87 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   256                              <1> .okTime:
   257 00004F88 31DB                <1>     xor ebx, ebx
   258 00004F8A EBF9                <1>     jmp short .exit
   259                              <1> ensureDiskValid:
   260                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   261                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   262                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   263                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   264                              <1> .medChk:
   265 00004F8C E827010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   266                              <1> ;Return in rbx the req hdr address
   267 00004F91 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   268 00004F95 E836FEFFFF          <1>     call goDriver   ;Request!
   269 00004F9A 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   270 00004F9E F7C700800000        <1>     test edi, drvErrStatus
   271 00004FA4 756A                <1>     jnz .diskDrvCritErrMedChk
   272                              <1> .medChkIgnore:
   273 00004FA6 8A05(63C60300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   274 00004FAC 30E4                <1>     xor ah, ah
   275 00004FAE 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   276 00004FB1 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   277 00004FB4 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   278 00004FB6 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   279 00004FB8 E8B9B9FFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   280 00004FBD F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   281 00004FBE 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   282                              <1>     ;ZF=NZ from test for dirty buffers
   283                              <1> .exit:
   284                              <1>     return
    18                              <2> %%_ret:
    19 00004FC0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   285                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   286 00004FC1 C605(E8D80300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   287 00004FC8 E8CDB9FFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   288                              <1>     ;Get a buffer to read BPB into in rdi
   289 00004FCD 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   290 00004FCF E895BBFFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   291 00004FD4 72EA                <1>     jc .exit    ;Immediately exit with the carry flag set
   292 00004FD6 4889DF              <1>     mov rdi, rbx
   293                              <1> .repeatEP:
   294 00004FD9 E806010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   295 00004FDE 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   296 00004FE2 E8E9FDFFFF          <1>     call goDriver   ;Request!
   297 00004FE7 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   298 00004FEB A900800000          <1>     test eax, drvErrStatus
   299 00004FF0 755C                <1>     jnz .diskDrvCritErrBPB
   300                              <1>     ;Now rebuild the dpb fields for this drive
   301 00004FF2 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   302 00004FF6 E83F090000          <1>     call createDPB
   303                              <1>     ;Adjust the buffer header information
   304 00004FFB 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   305 00004FFE 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   306 00005001 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   307 00005004 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   308 00005007 30E4                <1>     xor ah, ah
   309 00005009 8825(E8D80300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   310                              <1>     return
    18                              <2> %%_ret:
    19 0000500F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   311                              <1> .diskDrvCritErrMedChk:
   312                              <1> ;Critical Errors fall through here
   313                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   314 00005010 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   315 00005017 48892D(E0C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   316 0000501E 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   317 00005021 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   318 00005023 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   319 00005029 E88BFCFFFF          <1>     call criticalDOSError
   320 0000502E 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]
   321 00005035 488B2D(E0C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   322 0000503C 3C01                <1>     cmp al, critRetry
   323 0000503E 0F8448FFFFFF        <1>     je .medChk
   324 00005044 3C00                <1>     cmp al, critIgnore
   325 00005046 0F845AFFFFFF        <1>     je .medChkIgnore
   326 0000504C F9                  <1>     stc ;Set error flag to indicate fail
   327                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 0000504D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   328                              <1> 
   329                              <1> .diskDrvCritErrBPB:
   330                              <1>     ;eax has status word, rbp has dpb ptr
   331                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   332 0000504E C605(C9C30300)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   333 00005055 E8F6FBFFFF          <1>     call diskDevErr
   334 0000505A 3C01                <1>     cmp al, critRetry
   335 0000505C 0F8477FFFFFF        <1>     je .repeatEP
   336                              <1>     ;Else we fail (Ignore=Fail here)
   337 00005062 F9                  <1>     stc ;Set error flag to indicate fail
   338                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00005063 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   339                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   340                              <1> ;           Primitive Driver Requests
   341                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   342                              <1> ;First are Disk requests, then Char device requests
   343                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   344                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   345                              <1> 
   346                              <1> primReqWriteSetup:
   347 00005064 50                  <1>     push rax
   348 00005065 B408                <1>     mov ah, drvWRITE    ;Command code
   349 00005067 0225(32C30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   350 0000506D EB03                <1>     jmp short primReqRWCommon
   351                              <1> primReqReadSetup:
   352 0000506F 50                  <1>     push rax
   353 00005070 B404                <1>     mov ah, drvREAD
   354                              <1> primReqRWCommon:
   355                              <1> ;Sets up the IO request packet with:
   356                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   357                              <1> ; rbx = Data storage buffer ptr
   358                              <1> ; ecx = Number of sectors to transfer
   359                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   360                              <1> ; ~~~~ Set by entry function ~~~~ 
   361                              <1> ; ah = Command code
   362                              <1> ; All regs preserved EXCEPT rbx.
   363                              <1> ; Return: rbx = Transfer Address
   364 00005072 48891D(30C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   365 00005079 890D(38C40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   366 0000507F C605(22C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   367 00005086 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   368 0000508B 8905(23C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   369 00005091 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   370 00005094 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   371                              <1>     ;Disk operations only here!
   372 00005096 488915(3CC40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   373 0000509D 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   374 000050A0 8805(2FC40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   375 000050A6 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   376 000050A9 8805(23C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   377                              <1> primReqCommonExit:
   378                              <1> ;Returns in rbx the primary request header as these functions
   379                              <1> ; setup the request in the primary request header space
   380 000050AF 58                  <1>     pop rax
   381 000050B0 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   382                              <1>     return
    18                              <2> %%_ret:
    19 000050B7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> primReqMedCheckSetup:
   385                              <1> ;Prepare the diskIO packet for mediacheck
   386                              <1> ;rbp has DPB pointer for device to check media on
   387 000050B8 50                  <1>     push rax
   388 000050B9 C605(22C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   389 000050C0 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   390 000050C3 8805(2FC40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   391 000050C9 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   392 000050CC 8805(23C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   393 000050D2 C605(24C40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   394 000050D9 66C705(25C40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   394 000050E1 00                  <1>
   395 000050E2 EBCB                <1>     jmp short primReqCommonExit
   396                              <1> 
   397                              <1> primReqGetBPBSetup:
   398                              <1> ;rbp has DPB pointer for device
   399                              <1> ;rdi has sector buffer header pointer for transfer
   400 000050E4 50                  <1>     push rax
   401 000050E5 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   402 000050E9 48893D(30C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   403 000050F0 C605(22C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   404 000050F7 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   405 000050FA 8805(2FC40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   406 00005100 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   407 00005103 8805(23C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   408 00005109 C605(24C40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   409 00005110 66C705(25C40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   409 00005118 00                  <1>
   410 00005119 EB94                <1>     jmp short primReqCommonExit
   411                              <1> 
   412                              <1> primReqOpenSetup:
   413                              <1> ;al = unit number if a disk device. Undefined otherwise
   414 0000511B 50                  <1>     push rax
   415 0000511C B40D                <1>     mov ah, drvOPEN
   416                              <1> primReqCloseSetup:
   417                              <1> ;al = unit number if a disk device. Undefined otherwise
   418 0000511E 50                  <1>     push rax
   419 0000511F B40E                <1>     mov ah, drvCLOSE
   420                              <1> primReqOCcommon:
   421 00005121 C605(22C40300)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   422 00005128 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   423 00005129 8905(23C40300)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   424                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   425 0000512F E97BFFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   426                              <1> 
   427                              <1> secdReqCharIOReq:
   428                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   429                              <1> ;Input:
   430                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   431                              <1> ; ecx = Length of buffer
   432                              <1> ; rdi = Buffer pointer
   433                              <1> ;Output: 
   434                              <1> ; rbx = Transfer Address 
   435 00005134 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   436 0000513B C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   437 0000513E 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   438 00005141 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   439 00005147 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   440 0000514B 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   441                              <1>     return
    18                              <2> %%_ret:
    19 0000514E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   442                              <1> ;If the device which will process this request is a disk device
   443                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   444                              <1> ;Then we will read the appropriate byte from that buffer to the 
   445                              <1> ; singleIOByt buffer.
   446                              <1> ;Such a request will require additional setup with the following fields:
   447                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    38                                  %include "./Source/Kernel/dosUtils.asm"
    39                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    40                              <1> 
    41                              <1> readFSRegister:
    42                              <1> ;Output: rax = Value of fs
    43 0000514F 51                  <1>     push rcx
    44 00005150 52                  <1>     push rdx
    45 00005151 B9000100C0          <1>     mov ecx, 0C0000100h
    46 00005156 0F32                <1>     rdmsr   ;Get fs in edx:eax
    47 00005158 48C1E220            <1>     shl rdx, 20h
    48 0000515C 4809D0              <1>     or rax, rdx
    49 0000515F 5A                  <1>     pop rdx
    50 00005160 59                  <1>     pop rcx
    51                              <1>     return
    18                              <2> %%_ret:
    19 00005161 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    52                              <1> 
    53                              <1> writeFSRegister:
    54                              <1> ;Input: rax = Value to write to fs
    55 00005162 51                  <1>     push rcx
    56 00005163 52                  <1>     push rdx
    57 00005164 4889C2              <1>     mov rdx, rax    ;Split rax to edx:eax
    58 00005167 48C1EA20            <1>     shr rdx, 20h    ;Shift the upper dword low
    59 0000516B 09C0                <1>     or eax, eax     ;Clear upper dword
    60 0000516D B9000100C0          <1>     mov ecx, 0C0000100h
    61 00005172 0F30                <1>     wrmsr
    62 00005174 5A                  <1>     pop rdx
    63 00005175 59                  <1>     pop rcx
    64                              <1>     return
    18                              <2> %%_ret:
    19 00005176 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    65                              <1> 
    66                              <1> ;Basic Drive related Utilities
    67                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    68                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    69                              <1> ; that gets set up)
    70                              <1> 
    71                              <1> setWorkingDPB:
    72                              <1> ;Gets dpb in rbp and saves to workingDPB
    73 00005177 48892D(64C60300)    <1>     mov qword [workingDPB], rbp
    74                              <1>     return
    18                              <2> %%_ret:
    19 0000517E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    75                              <1> 
    76                              <1> testCDSNet:
    77                              <1> ;Checks if the workingCDS is a redirector drive
    78                              <1> ;Returns: CF=NC => Not net
    79                              <1> ;         CF=CY => Network redirector
    80                              <1> ;         ZF=ZE => Net without CDS (\\ paths only)
    81                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    82                              <1> ;         rdi = workingCDS ptr
    83 0000517F 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
    84 00005186 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    85 0000518D 7409                <1>     je .net
    86 0000518F 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    87 00005195 7501                <1>     jnz .net ;Net with CDS
    88                              <1>     return  ;CF=NC => Not net
    18                              <2> %%_ret:
    19 00005197 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    89                              <1> .net:
    90 00005198 F9                  <1>     stc ;Set Net bit
    91                              <1>     return
    18                              <2> %%_ret:
    19 00005199 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    92                              <1> 
    93                              <1> getDiskData:
    94                              <1> ;This function returns:
    95                              <1> ;al = sectors per cluster
    96                              <1> ;ah = media ID byte
    97                              <1> ;ebx = total clusters
    98                              <1> ;cx = bytes per sector
    99                              <1> ;edx = number of available clusters
   100                              <1> ;
   101                              <1> ;If CF=CY on exit, al contains the error code
   102 0000519A E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
   103 0000519F 7308                <1>     jnc .physical
   104                              <1>     ;Beep a redir request out
   105 000051A1 B80C110000          <1>     mov eax, 110Ch 
   106 000051A6 CD4F                <1>     int 4Fh
   107                              <1>     return
    18                              <2> %%_ret:
    19 000051A8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   108                              <1> .physical:
   109                              <1> ;Now we must lock the structures
   110 000051A9 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
   111 000051B0 E88B040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   112 000051B5 E860FDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
   113 000051BA 721C                <1>     jc .exit
   114 000051BC E8A4BBFFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
   115 000051C1 7215                <1>     jc .exit
   116 000051C3 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   117 000051C6 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   118 000051C8 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
   119 000051CB 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
   120 000051CE FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
   121 000051D0 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
   122 000051D4 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
   123 000051D7 F8                  <1>     clc
   124                              <1> .exit:
   125 000051D8 E86D040000          <1>     call dosCrit1Exit
   126                              <1>     return
    18                              <2> %%_ret:
    19 000051DD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
   129                              <1> ;Input: al = Interrupt number
   130                              <1> ;Output: rbx = Interrupt Vector
   131 000051DE 50                  <1>     push rax    ;Preserve rax, segment selector returned by call
   132 000051DF 52                  <1>     push rdx    ;Preserve rdx, Attribute Word returned by call
   133 000051E0 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   134 000051E2 B807F00000          <1>     mov eax, 0F007h
   135 000051E7 CD35                <1>     int 35h
   136 000051E9 5A                  <1>     pop rdx
   137 000051EA 58                  <1>     pop rax
   138                              <1>     return
    18                              <2> %%_ret:
    19 000051EB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   139                              <1> 
   140                              <1> getUserRegs:   ;Int 4Fh AX=1218h
   141                              <1> ;Returns ptr to user regs in rsi
   142 000051EC 488B35(DCC30300)    <1>     mov rsi, qword [oldRSP]
   143                              <1>     return
    18                              <2> %%_ret:
    19 000051F3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> 
   145                              <1> walkDPBchain:
   146                              <1> ;Called with al = 0 based drive number
   147                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
   148 000051F4 488B35(3BC00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
   149                              <1> .walk:
   150 000051FB 4881FEFFFFFFFF      <1>     cmp rsi, -1
   151 00005202 740A                <1>     je .exitBad
   152 00005204 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   153 00005206 7407                <1>     je .exit    ;Drive found
   154 00005208 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   155 0000520C EBED                <1>     jmp short .walk
   156                              <1> .exitBad:
   157 0000520E F9                  <1>     stc
   158                              <1> .exit:
   159                              <1>     return
    18                              <2> %%_ret:
    19 0000520F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   160                              <1> setDrive:   
   161                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
   162                              <1> ;Input: al = 1-based drive number
   163                              <1> ;Output: al = 0-based drive number
   164                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   165                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   166                              <1> ;            set.
   167 00005210 E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   168 00005215 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   169 00005217 56                  <1>     push rsi
   170 00005218 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   171 0000521F 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   172 00005225 5E                  <1>     pop rsi
   173 00005226 7401                <1>     jz .exit
   174 00005228 F9                  <1>     stc
   175                              <1> .exit:
   176                              <1>     return
    18                              <2> %%_ret:
    19 00005229 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   177                              <1> 
   178                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   179                              <1> ;Allows a redirector or subst/join to build a CDS
   180                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   181                              <1> ; volumes, that are made at system boot.
   182                              <1> ;Input: al = Drive Letter for drive
   183                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   184                              <1> ;Output: rdi = newly filled in workingCDS
   185                              <1> ;CF=NC => CDS valid and has a DPB
   186                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   187 0000522A 50                  <1>     push rax
   188 0000522B 2C40                <1>     sub al, "A"-1
   189 0000522D 3A05(6FC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   190 00005233 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   191 0000523A 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   192 00005240 58                  <1>     pop rax
   193 00005241 7235                <1>     jb .exit    ;Exit with CF=CY
   194 00005243 50                  <1>     push rax
   195 00005244 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   196 00005249 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   197 0000524B 58                  <1>     pop rax
   198 0000524C 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   199 00005252 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   200 00005259 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   201 00005261 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   202                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   203 00005267 50                  <1>     push rax
   204 00005268 56                  <1>     push rsi
   205 00005269 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   206 0000526B E884FFFFFF          <1>     call walkDPBchain
   207 00005270 7204                <1>     jb .skipSettingDPB
   208 00005272 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   209                              <1> .skipSettingDPB:
   210 00005276 5E                  <1>     pop rsi
   211 00005277 58                  <1>     pop rax
   212                              <1> .exit:
   213                              <1>     return
    18                              <2> %%_ret:
    19 00005278 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   214                              <1> 
   215                              <1> getCDS:     ;Int 4Fh AX=1219h
   216                              <1> ;Gets the device DPB and saves it in the DOS variable
   217                              <1> ;This can be called to get CDS for network drives too!
   218                              <1> ;Input: al = 1 based drive number
   219                              <1> ;Sets workingCDS var with the CDS for the device. 
   220                              <1> ;   If device on a network, sets CF
   221                              <1> ;Returns al with 0-based drive number
   222 00005279 84C0                <1>     test al, al
   223 0000527B 7508                <1>     jnz .skip
   224 0000527D 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   225 00005283 FEC0                <1>     inc al
   226                              <1> .skip:
   227 00005285 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   228 00005287 56                  <1>     push rsi
   229 00005288 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   230 0000528F F605(5CC60300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   231 00005296 7423                <1>     jz .physDrive
   232                              <1>     ;Invokation via 21/5D00
   233 00005298 50                  <1>     push rax
   234 00005299 57                  <1>     push rdi
   235 0000529A 488D3D(FBC50300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   236 000052A1 48893D(6CC60300)    <1>     mov qword [workingCDS], rdi ;Make it current
   237 000052A8 0441                <1>     add al, "A" ;Convert to a drive letter
   238 000052AA E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   239 000052AF 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   240 000052B5 5F                  <1>     pop rdi
   241 000052B6 58                  <1>     pop rax
   242 000052B7 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   243 000052B9 EB17                <1>     jmp short .exitOk   ;All oki
   244                              <1> .physDrive:
   245 000052BB E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   246 000052C0 7208                <1>     jc .exitBad
   247 000052C2 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   248 000052C8 7508                <1>     jnz .exitOk ;Exit with flag cleared
   249                              <1>     ;Else Return to unknown error locus
   250                              <1> .exitBad:
   251 000052CA C605(6CC30300)01    <1>     mov byte [errorLocus], eLocUnk
   252                              <1> .exitBad1:
   253 000052D1 F9                  <1>     stc
   254                              <1> .exitOk:
   255 000052D2 5E                  <1>     pop rsi
   256                              <1>     return
    18                              <2> %%_ret:
    19 000052D3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   259                              <1>     ;Gets the CDS for the current drive in al
   260                              <1>     ;Input: al = Drive number, 0 = A ...
   261                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   262                              <1>     ;        CF=CY => al not valid
   263 000052D4 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
   264 000052DA 7202                <1>     jb .ctn
   265 000052DC F9                  <1>     stc 
   266                              <1>     return
    18                              <2> %%_ret:
    19 000052DD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   267                              <1> .ctn:
   268 000052DE 50                  <1>     push rax
   269 000052DF 52                  <1>     push rdx
   270 000052E0 0FB6C0              <1>     movzx eax, al
   271 000052E3 48BE5B000000000000- <1>     mov rsi, cds_size
   271 000052EC 00                  <1>
   272 000052ED 31D2                <1>     xor edx, edx
   273 000052EF F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   274 000052F1 488B35(5DC00300)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   275 000052F8 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   276 000052FB 488935(6CC60300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   277 00005302 5A                  <1>     pop rdx
   278 00005303 58                  <1>     pop rax
   279 00005304 F8                  <1>     clc
   280                              <1>     return
    18                              <2> %%_ret:
    19 00005305 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> 
   283                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   284                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   285                              <1> ;Input: AL = Char to normalise.
   286                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   287                              <1> ;If path separator, set ZF=ZE
   288 00005306 3C5C                <1>     cmp al, "\"
   289 00005308 7406                <1>     je .exit
   290 0000530A 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   291 0000530C 7502                <1>     jne .exit
   292 0000530E B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   293                              <1> .exit:
   294                              <1>     return
    18                              <2> %%_ret:
    19 00005310 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   295                              <1> 
   296                              <1> uppercaseCharAtPtr:
   297                              <1> ;Get the char pointed to by rsi and then fall
   298 00005311 AC                  <1>     lodsb
   299                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   300                              <1> ;Convert a lowercase char to uppercase
   301                              <1> ; Leave alone uppercase chars and invalid chars
   302                              <1> ;Input: al = Char to convert to uppercase
   303                              <1> ;Output: al = Processed char
   304 00005312 53                  <1>     push rbx
   305 00005313 3C61                <1>     cmp al, "a"
   306 00005315 7214                <1>     jb .exit
   307 00005317 3C7A                <1>     cmp al, "z"
   308 00005319 7702                <1>     ja .checkExt
   309 0000531B 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   310                              <1> .checkExt:
   311 0000531D 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   312 0000531F 720A                <1>     jb .exit
   313 00005321 2C80                <1>     sub al, 80h ;Turn into table offset
   314 00005323 488B1D03ADFFFF      <1>     mov rbx, qword [ctryTbl.mapaddr]    ;Get ptr to extAsciiTable
   315 0000532A D7                  <1>     xlatb   ;Get converted extended byte into al
   316                              <1> .exit:
   317 0000532B 50                  <1>     push rax    ;Save al temporarily
   318 0000532C 488D1D1DAFFFFF      <1>     lea rbx, asciiCharProperties
   319 00005333 D7                  <1>     xlatb   ;Get the signature in al
   320 00005334 A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   321 00005336 58                  <1>     pop rax
   322 00005337 5B                  <1>     pop rbx
   323                              <1>     return
    18                              <2> %%_ret:
    19 00005338 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   324                              <1> 
   325                              <1> strlen: ;Int 4Fh, AX=1212h
   326                              <1> ;Gets the length of a ASCIIZ string
   327                              <1> ;Input: rdi = Source buffer
   328                              <1> ;Output: ecx = Length of string
   329 00005339 50                  <1>     push rax
   330 0000533A 57                  <1>     push rdi
   331 0000533B 30C0                <1>     xor al, al
   332 0000533D 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   333 0000533F FFC9                <1>     dec ecx ;rcx = -1
   334 00005341 F2AE                <1>     repne scasb
   335 00005343 F7D1                <1>     not ecx
   336 00005345 5F                  <1>     pop rdi
   337 00005346 58                  <1>     pop rax
   338                              <1>     return
    18                              <2> %%_ret:
    19 00005347 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   339                              <1> 
   340                              <1> strcpy:
   341                              <1> ;Copies a null terminated string from rsi to rdi
   342 00005348 AC                  <1>     lodsb
   343 00005349 AA                  <1>     stosb
   344 0000534A 84C0                <1>     test al, al
   345                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000534C 74F9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   346 0000534E EBF8                <1>     jmp short strcpy
   347                              <1> 
   348                              <1> strcmp:
   349                              <1> ;Compares two ASCIIZ strings for equality.
   350                              <1> ;Input: rsi = First string
   351                              <1> ;       rdi = Second string
   352                              <1> ;       ecx = Number of bytes to compare
   353                              <1> ;Output: ZF=ZE => Equal
   354                              <1> ;        ZF=NZ => Not equal
   355 00005350 56                  <1>     push rsi
   356 00005351 57                  <1>     push rdi
   357 00005352 F3A6                <1>     repe cmpsb
   358 00005354 5F                  <1>     pop rdi
   359 00005355 5E                  <1>     pop rsi
   360                              <1>     return
    18                              <2> %%_ret:
    19 00005356 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   361                              <1> 
   362                              <1> 
   363                              <1> normaliseFileName:  ;Int 4Fh, AX=1211h
   364                              <1> ;Converts lowercase to uppercase and / to "\"
   365                              <1> ;Input: rsi = Source buffer
   366                              <1> ;       rdi = Buffer to place normalised path
   367 00005357 50                  <1>     push rax
   368 00005358 56                  <1>     push rsi
   369 00005359 57                  <1>     push rdi
   370                              <1> .scan:
   371 0000535A AC                  <1>     lodsb
   372 0000535B 84C0                <1>     test al, al
   373 0000535D 740D                <1>     jz .exit
   374 0000535F E8A2FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   375 00005364 E8A9FFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   376 00005369 AA                  <1>     stosb
   377 0000536A EBEE                <1>     jmp short .scan
   378                              <1> .exit:
   379 0000536C 5F                  <1>     pop rdi
   380 0000536D 5E                  <1>     pop rsi
   381 0000536E 58                  <1>     pop rax
   382                              <1>     return
    18                              <2> %%_ret:
    19 0000536F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> compareFileNames:   ;Int 4Fh, AX=121Eh
   385                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   386                              <1> ;Input: rsi = One ASCIIZ pathname
   387                              <1> ;       rdi = Second ASCIIZ pathname
   388                              <1> ;Return:
   389                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   390 00005370 50                  <1>     push rax
   391 00005371 56                  <1>     push rsi
   392 00005372 57                  <1>     push rdi
   393                              <1> .scan:
   394 00005373 8A06                <1>     mov al, byte [rsi]
   395 00005375 84C0                <1>     test al, al
   396 00005377 7424                <1>     jz .endOfString
   397 00005379 8A27                <1>     mov ah, byte [rdi]
   398 0000537B E886FFFFFF          <1>     call swapPathSeparator  ;Convert al to \ if pathsep
   399 00005380 7410                <1>     jz .pathseps
   400 00005382 660D2020            <1>     or ax, 2020h    ;Convert both chars to lower case
   401 00005386 38E0                <1>     cmp al, ah
   402 00005388 7515                <1>     jnz .exit
   403                              <1> .nextChar:
   404 0000538A 48FFC6              <1>     inc rsi
   405 0000538D 48FFC7              <1>     inc rdi
   406 00005390 EBE1                <1>     jmp short .scan
   407                              <1> .pathseps:
   408 00005392 86E0                <1>     xchg ah, al
   409 00005394 E86DFFFFFF          <1>     call swapPathSeparator  ;If ah is not a pathsep, then exit ZF=NZ
   410 00005399 7504                <1>     jnz .exit
   411 0000539B EBED                <1>     jmp short .nextChar ;Else get the next chars
   412                              <1> .endOfString:
   413 0000539D 84E4                <1>     test ah, ah ;If ah is also the end of the path, then ZF=ZE else ZF=NZ
   414                              <1> .exit:
   415 0000539F 5F                  <1>     pop rdi
   416 000053A0 5E                  <1>     pop rsi
   417 000053A1 58                  <1>     pop rax
   418                              <1>     return
    18                              <2> %%_ret:
    19 000053A2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   419                              <1> checkPathspecOK:
   420                              <1> ;Input:
   421                              <1> ;rsi -> points to a path to verify if it is ok.
   422                              <1> ;Output:
   423                              <1> ;CF=NC => The path is totally clean and ok to use.
   424                              <1> ;CF=CY => the path is malformed and may be used ONLY if ZF=ZE. 
   425                              <1> ; If ZF=ZE then the only bad char in the path is followed by a ASCII null
   426                              <1> ;Here we check for OK chars only. Hence \ / ? * and . are considered acceptable
   427                              <1> 
   428                              <1> ;Full paths may start with \\<15-char machine name>\...
   429                              <1> ; or <Drive Letter>:\...
   430                              <1> ;CWD relative paths start with <Drive Letter>:...
   431                              <1> ;Current Drive Root Relative paths may start with \...
   432                              <1> ;Current Drive CWD relative paths start with any other char
   433                              <1> ;Server calls are checked separately. 
   434                              <1> ;Must be X:\ and cannot have . or .. entries or any "G L O B A L" chars
   435                              <1> 
   436                              <1> ;We accept lc and uc characters in this check function.
   437 000053A3 50                  <1>     push rax
   438 000053A4 51                  <1>     push rcx
   439 000053A5 56                  <1>     push rsi
   440 000053A6 57                  <1>     push rdi
   441                              <1>     ;First we verify that the first two chars are ok (either X: or \\ or chars)
   442 000053A7 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   443 000053AA F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   444 000053B1 7539                <1>     jnz .serverCallCheck
   445 000053B3 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   446 000053B7 7417                <1>     je .okToScan
   447 000053B9 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   448 000053BD 7411                <1>     je .okToScan
   449 000053BF 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   450 000053C2 7402                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   451                              <1>     ;Is this a current drive CWD relative or current drive root relative path?
   452                              <1>     ;If so the pathspec is not different to normal, goto scanLoop
   453 000053C4 EB11                <1>     jmp short .scanLoop
   454                              <1> .diskPath:
   455                              <1> ;Disk Letter must be A-Z (or a-z)
   456 000053C6 0C20                <1>     or al, 20h  ;Force an UC char to LC
   457 000053C8 3C61                <1>     cmp al, "a"
   458 000053CA 7217                <1>     jb .badExit
   459 000053CC 3C7A                <1>     cmp al, "z"
   460 000053CE 7713                <1>     ja .badExit
   461                              <1> .okToScan:
   462 000053D0 4881C602000000      <1>     add rsi, 2  ;Skip first two chars now
   463                              <1> .scanLoop:
   464 000053D7 AC                  <1>     lodsb   ;Get char, inc rsi
   465 000053D8 84C0                <1>     test al, al  ;Is al=0, i.e string terminator?
   466 000053DA 740B                <1>     je .exit    ;Clear CF if al = 0
   467 000053DC E851000000          <1>     call checkCharOk    ;Check if char ok
   468 000053E1 75F4                <1>     jnz .scanLoop    ;If it is not, fall thru
   469                              <1> .badExit:
   470                              <1> ;Before we bad exit, we check if the next char is ascii null.
   471                              <1> ;If it is we set ZF
   472 000053E3 AC                  <1>     lodsb
   473 000053E4 84C0                <1>     test al, al ;Set ZF if only last char is malformed, else clear ZF
   474                              <1> .servBadExit:   ;Server paths must be null terminated
   475 000053E6 F9                  <1>     stc ;And set CF to indicate bad path
   476                              <1> .exit:
   477 000053E7 5F                  <1>     pop rdi
   478 000053E8 5E                  <1>     pop rsi
   479 000053E9 59                  <1>     pop rcx
   480 000053EA 58                  <1>     pop rax
   481                              <1>     return
    18                              <2> %%_ret:
    19 000053EB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   482                              <1> .serverCallCheck:
   483                              <1> ;Server calls are a bit stricter, . and .. are forbidden but dir and filenames
   484                              <1> ; may contain an extension separated by a .
   485 000053EC 80FC3A              <1>     cmp ah, ":"
   486 000053EF 75F5                <1>     jne .servBadExit
   487 000053F1 0C20                <1>     or al, 20h  ;Force an UC char to LC
   488 000053F3 3C61                <1>     cmp al, "a"
   489 000053F5 72EF                <1>     jb .servBadExit
   490 000053F7 3C7A                <1>     cmp al, "z"
   491 000053F9 77EB                <1>     ja .servBadExit
   492                              <1>     ;If a dot is found, must check if the . is within 4 chars of a pathsep or 0
   493                              <1> .servScanLoop:
   494 000053FB AC                  <1>     lodsb
   495 000053FC 84C0                <1>     test al, al
   496 000053FE 74E7                <1>     je .exit
   497 00005400 3C2E                <1>     cmp al, "." ;Handle dots separately
   498 00005402 7409                <1>     je .secondDotCheck
   499 00005404 E829000000          <1>     call checkCharOk
   500 00005409 75F0                <1>     jnz .servScanLoop
   501 0000540B EBEE                <1>     jmp short .servScanLoop
   502                              <1> .secondDotCheck:
   503 0000540D AC                  <1>     lodsb
   504 0000540E 84C0                <1>     test al, al ;cannot be a dot followed by a null
   505 00005410 74D4                <1>     jz .servBadExit
   506 00005412 3C2E                <1>     cmp al, "." ;Was this a .. entry?
   507 00005414 74D0                <1>     je .servBadExit
   508 00005416 E8EBFEFFFF          <1>     call swapPathSeparator  ;Was second char a pathsep? Not allowed.
   509 0000541B 74C9                <1>     jz .servBadExit ;... else check if the char was valid
   510 0000541D EBDC                <1>     jmp short .servScanLoop ;Else keep searching.
   511                              <1> scanPathWC:
   512                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   513                              <1> ; even in the final path componant.
   514                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   515                              <1> ;Output: CF=NC => No wildcards present
   516                              <1> ;        CF=CY => Wildcards found
   517 0000541F 50                  <1>     push rax
   518 00005420 56                  <1>     push rsi
   519                              <1> .scan:
   520 00005421 AC                  <1>     lodsb
   521 00005422 84C0                <1>     test al, al
   522 00005424 7409                <1>     jz .exit
   523 00005426 3C3F                <1>     cmp al, "?"
   524 00005428 7404                <1>     je .wcFnd
   525 0000542A 3C2A                <1>     cmp al, "*"
   526 0000542C 75F3                <1>     jne .scan
   527                              <1> .wcFnd:
   528 0000542E F9                  <1>     stc
   529                              <1> .exit:
   530 0000542F 5E                  <1>     pop rsi
   531 00005430 58                  <1>     pop rax
   532                              <1>     return
    18                              <2> %%_ret:
    19 00005431 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   533                              <1> 
   534                              <1> 
   535                              <1> checkCharOk:
   536                              <1> ;Same as checkCharValid except DOES not return error on * ? \ / .
   537                              <1> ;If ZF=ZE => Invalid Char
   538                              <1> ;If ZF=NZ => Ok Char
   539 00005432 3C2E                <1>     cmp al, "."
   540 00005434 740F                <1>     je .exitOk
   541 00005436 3C2A                <1>     cmp al, "*"
   542 00005438 740B                <1>     je .exitOk
   543 0000543A 3C3F                <1>     cmp al, "?"
   544 0000543C 7407                <1>     je .exitOk
   545 0000543E E8C3FEFFFF          <1>     call swapPathSeparator  ;check if al is a path separator
   546 00005443 7505                <1>     jnz checkCharValid
   547                              <1> .exitOk:
   548 00005445 50                  <1>     push rax
   549 00005446 0C01                <1>     or al, 1    ;Always clears the ZF
   550 00005448 58                  <1>     pop rax
   551                              <1>     return
    18                              <2> %%_ret:
    19 00005449 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   552                              <1> checkCharValid:
   553                              <1> ;If ZF=ZE => Invalid Char
   554                              <1> ;If ZF=NZ => Valid Char
   555 0000544A 51                  <1>     push rcx
   556 0000544B 57                  <1>     push rdi
   557 0000544C B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   558 00005451 488D3D48ADFFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   559 00005458 F2AE                <1>     repne scasb ;Scan. Stop when equal
   560 0000545A 5F                  <1>     pop rdi
   561 0000545B 59                  <1>     pop rcx
   562                              <1>     return
    18                              <2> %%_ret:
    19 0000545C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> 
   565                              <1> skipSpacesAndTabs:
   566                              <1> ;Input: rsi -> String 
   567                              <1> ;Output: rsi -> First non Space or Tab type char
   568 0000545D AC                  <1>     lodsb
   569 0000545E E815000000          <1>     call isCharSpaceType
   570 00005463 74F8                <1>     jz skipSpacesAndTabs
   571 00005465 48FFCE              <1>     dec rsi
   572                              <1>     return
    18                              <2> %%_ret:
    19 00005468 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   573                              <1> 
   574                              <1> isCharDelimType:
   575                              <1> ;Input: al = Char to check properties of
   576                              <1> ;Output:    ZF=NZ => Char not name delimiter
   577                              <1> ;           ZF=ZE => Char delimiter
   578 00005469 50                  <1>     push rax
   579 0000546A 53                  <1>     push rbx
   580 0000546B 488D1DDEADFFFF      <1>     lea rbx, asciiCharProperties
   581 00005472 D7                  <1>     xlatb
   582 00005473 A802                <1>     test al, 2
   583 00005475 5B                  <1>     pop rbx
   584 00005476 58                  <1>     pop rax
   585                              <1>     return
    18                              <2> %%_ret:
    19 00005477 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   586                              <1> 
   587                              <1> isCharSpaceType:
   588                              <1> ;Input: al = Char to check properties of
   589                              <1> ;Output:    ZF=NZ => Char not Space or Tab
   590                              <1> ;           ZF=ZE => Char Space or Tab
   591 00005478 50                  <1>     push rax
   592 00005479 53                  <1>     push rbx
   593 0000547A 488D1DCFADFFFF      <1>     lea rbx, asciiCharProperties
   594 00005481 D7                  <1>     xlatb
   595 00005482 A804                <1>     test al, 4
   596 00005484 5B                  <1>     pop rbx
   597 00005485 58                  <1>     pop rax
   598                              <1>     return
    18                              <2> %%_ret:
    19 00005486 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   599                              <1> 
   600                              <1> compareFarPointers: ;Int 4Fh, AX = 1214h
   601                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   602                              <1> ;Input: rsi = One pointer
   603                              <1> ;       rdi = Second pointer
   604                              <1> ;Output: ZF=ZE if equal
   605                              <1> ;        ZF=NZ if not
   606 00005487 4839FE              <1>     cmp rsi, rdi
   607                              <1>     return
    18                              <2> %%_ret:
    19 0000548A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   608                              <1> 
   609                              <1> checkPathNet:
   610                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   611                              <1> ;Output: ZF=ZE => Path is a net path
   612                              <1> ;        ZF=NZ => Path is not a net path
   613 0000548B 50                  <1>     push rax
   614 0000548C 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   615 0000548F E872FEFFFF          <1>     call swapPathSeparator
   616 00005494 7505                <1>     jnz .exit
   617 00005496 E86BFEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   618                              <1> .exit:
   619 0000549B 58                  <1>     pop rax
   620                              <1>     return
    18                              <2> %%_ret:
    19 0000549C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   621                              <1> 
   622                              <1> getCharDevDriverPtr:
   623                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   624                              <1> ;Input: rax = Device Driver name (space padded)
   625                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   626 0000549D 488D3D(73C00300)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   627                              <1> .lp:
   628 000054A4 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   629                              <1>     rete    ;Exit if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000054A8 74F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   630 000054AA 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   631 000054AD 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   632 000054B4 75EE                <1>     jne .lp ;If not loop
   633 000054B6 F9                  <1>     stc ;Else bad exit
   634                              <1>     return
    18                              <2> %%_ret:
    19 000054B7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   635                              <1> 
    39                                  %include "./Source/Kernel/dosMain.asm"
    40                              <1> ;-----------------------------------:
    41                              <1> ;        Main Kernel dispatch       :
    42                              <1> ;            and routines           :
    43                              <1> ;-----------------------------------:
    44                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    45                              <1> ;ah = Function number, all other registers have various meanings
    46                              <1>  %if DEBUG
    47                              <1>     ;Entry function
    48                              <1>     debugEnterM
    49                              <1>     lea rbp, .l0000
    50                              <1>     call debPrintNullString
    51                              <1>     call debPrintFunctionName
    52                              <1>     jmp short .l0001
    53                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    54                              <1> .l0001:    
    55                              <1>     debugExitM
    56                              <1>     %endif
    57 000054B8 FA                  <1>     cli ;Halt external interrupts
    58 000054B9 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    59 000054BA 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    60 000054BD 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    61                              <1>     ;Cherry pick functions
    62 000054C3 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    63 000054C6 722C                <1>     jb .fsbegin   ;If below skip these checks
    64 000054C8 0F8470020000        <1>     je ctrlBreakCheck
    65 000054CE 80FC64              <1>     cmp ah, 64h
    66 000054D1 0F84B0020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    67 000054D7 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    68 000054D9 80FC51              <1>     cmp ah, 51h
    69 000054DC 0F8493020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    70 000054E2 80FC62              <1>     cmp ah, 62h
    71 000054E5 0F8493020000        <1>     je getPSPaddr          ;Calls the above function
    72 000054EB 80FC50              <1>     cmp ah, 50h
    73 000054EE 0F8478020000        <1>     je setCurrProcessID
    74                              <1> .fsbegin:
    75 000054F4 E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    76 000054F9 48891D(E4C30300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    77 00005500 66C705(A5C30300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    77 00005508 00                  <1>
    78 00005509 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
    79 00005510 488905(CCC30300)    <1>     mov qword [oldoldRSP], rax
    80 00005517 FE05(6AC30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    81 0000551D 488925(DCC30300)    <1>     mov qword [oldRSP], rsp
    82                              <1> ;Network related variable resetting
    83 00005524 C605(5CC60300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    84                              <1> ;Here, we want to save oldRSP in the callers PSP
    85 0000552B 803D(6AC30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    86 00005532 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    87 00005534 488B05(81C30300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    88 0000553B 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    89                              <1> .fsb1:
    90 0000553F 58                  <1>     pop rax     ;Get old rax back
    91 00005540 50                  <1>     push rax    ;and push it back onto the stack
    92                              <1> .abortEP:
    93                              <1> .charFun0CEP:
    94                              <1> .serverEP:
    95 00005541 488D25(11CC0300)    <1>     lea rsp, critStakTop
    96 00005548 FB                  <1>     sti         ;Reenable interrupts
    97                              <1> 
    98 00005549 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    99 0000554B 881D(F5C30300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
   100 00005551 C605(F6C30300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   101 00005558 881D(CBC30300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
   102 0000555E 881D(ECC30300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
   103                              <1> 
   104 00005564 50                  <1>     push rax        ;Save rax to use temporarily as table base 
   105 00005565 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   106 00005567 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   107 00005569 488D0560ADFFFF      <1>     lea rax, kDispTbl
   108 00005570 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   109 00005573 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   110 00005577 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   111 0000557A 58                  <1>     pop rax
   112                              <1> 
   113 0000557B 84E4                <1>     test ah, ah     ;Simple Terminate function?
   114 0000557D 741C                <1>     jz .fddiskOp
   115 0000557F 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   116 00005582 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   117 00005584 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   118 00005587 7712                <1>     ja .fddiskOp
   119                              <1> ;Char operations here
   120 00005589 F605(69C30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   121 00005590 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   122 00005592 488D25(A0D20300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   123 00005599 EB40                <1>     jmp short .fdGoToFunction
   124                              <1> .fddiskOp:
   125                              <1>     ;Disk operations go here
   126                              <1>     ;Save rax on entry to a disk funciton
   127 0000559B 488905(95C30300)    <1>     mov qword [oldRAX], rax
   128                              <1>     ;Clear up error info
   129 000055A2 C605(6CC30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   130 000055A9 C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   131 000055B0 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   132                              <1> 
   133 000055B7 50                  <1>     push rax
   134 000055B8 B482                <1>     mov ah, 82h ;Cancel all critical section!
   135 000055BA CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   136 000055BC 58                  <1>     pop rax
   137                              <1> 
   138 000055BD C605(F6C30300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   139 000055C4 488D25(E0D80300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   140 000055CB F605(94C30300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   141 000055D2 7407                <1>     jz .fdGoToFunction
   142                              <1> ; HANDLE CTRL+BREAK HERE!
   143 000055D4 50                  <1>     push rax
   144 000055D5 E813CFFFFF          <1>     call checkBreak   ; Check for a ^C
   145 000055DA 58                  <1>     pop rax
   146                              <1> .fdGoToFunction:
   147 000055DB 48871D(E4C30300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   148                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   149                              <1>     ;
   150                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   151                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   152                              <1>     ;
   153                              <1>     %if DEBUG && REGS
   154                              <1>     ;Print stack if necessary function
   155                              <1>     debugEnterM
   156                              <1>     call debPrintDOSStack
   157                              <1>     debugExitM
   158                              <1>     %endif
   159 000055E2 FF15(E4C30300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   160                              <1>     %if DEBUG
   161                              <1>     ;Entry function
   162                              <1>     debugEnterM
   163                              <1>     lea rbp, .l0002
   164                              <1>     call debPrintNullString
   165                              <1>     jmp short .l0003
   166                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   167                              <1> .l0003:    
   168                              <1>     debugExitM
   169                              <1>     %endif
   170                              <1>     %if DEBUG && REGS
   171                              <1>     ;Exit function
   172                              <1>     debugEnterM
   173                              <1>     call debPrintDOSStack
   174                              <1>     debugExitM
   175                              <1>     %endif
   176                              <1> .fdExit:
   177 000055E8 FA                  <1>     cli     ;Redisable interrupts
   178 000055E9 FE0D(6AC30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   179 000055EF 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   180 000055F6 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   181 000055F9 488B05(CCC30300)    <1>     mov rax, qword [oldoldRSP]
   182 00005600 488905(DCC30300)    <1>     mov qword [oldRSP], rax
   183 00005607 E806000000          <1>     call dosPopRegs  ;Pop the frame
   184 0000560C 48CF                <1>     iretq
   185                              <1> .fdExitBad:
   186 0000560E 30C0                <1>     xor al, al
   187                              <1> defaultIretq:
   188 00005610 48CF                <1>     iretq
   189                              <1> dosPopRegs:
   190 00005612 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   191 00005618 58                  <1>     pop rax
   192 00005619 5B                  <1>     pop rbx
   193 0000561A 59                  <1>     pop rcx
   194 0000561B 5A                  <1>     pop rdx
   195 0000561C 5E                  <1>     pop rsi
   196 0000561D 5F                  <1>     pop rdi
   197 0000561E 5D                  <1>     pop rbp
   198 0000561F 4158                <1>     pop r8
   199 00005621 4159                <1>     pop r9
   200 00005623 FF25(D4C30300)      <1>     jmp qword [dosReturn]
   201                              <1> dosPushRegs:
   202 00005629 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   203 0000562F 4151                <1>     push r9
   204 00005631 4150                <1>     push r8
   205 00005633 55                  <1>     push rbp
   206 00005634 57                  <1>     push rdi
   207 00005635 56                  <1>     push rsi
   208 00005636 52                  <1>     push rdx
   209 00005637 51                  <1>     push rcx
   210 00005638 53                  <1>     push rbx
   211 00005639 50                  <1>     push rax
   212 0000563A FF25(D4C30300)      <1>     jmp qword [dosReturn]
   213                              <1> dosCrit1Enter:
   214                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    18                              <2> %%_ret:
    19 00005640 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   215 00005641 B801800000          <1>     mov eax, 8001h
   216 00005646 CD4A                <1>     int 4ah
   217 00005648 58                  <1>     pop rax
   218                              <1>     return
    18                              <2> %%_ret:
    19 00005649 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   219                              <1> dosCrit1Exit:
   220                              <1>     return
    18                              <2> %%_ret:
    19 0000564A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   221 0000564B B801810000          <1>     mov eax, 8101h
   222 00005650 CD4A                <1>     int 4ah
   223 00005652 58                  <1>     pop rax
   224                              <1>     return
    18                              <2> %%_ret:
    19 00005653 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   225                              <1> dosCrit2Enter:
   226                              <1>     return
    18                              <2> %%_ret:
    19 00005654 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   227 00005655 B802800000          <1>     mov eax, 8002h
   228 0000565A CD4A                <1>     int 4ah
   229 0000565C 58                  <1>     pop rax
   230                              <1>     return
    18                              <2> %%_ret:
    19 0000565D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   231                              <1> dosCrit2Exit:
   232                              <1>     return
    18                              <2> %%_ret:
    19 0000565E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   233 0000565F B802810000          <1>     mov eax, 8102h
   234 00005664 CD4A                <1>     int 4ah
   235 00005666 58                  <1>     pop rax
   236                              <1>     return
    18                              <2> %%_ret:
    19 00005667 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   237                              <1> 
   238                              <1> ;All good exits destroy AT LEAST ax 
   239                              <1> extGoodExit2:
   240                              <1> ;Good exit with an extended return code in eax
   241 00005668 E87FFBFFFF          <1>     call getUserRegs
   242 0000566D 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   243 0000566F EB08                <1>     jmp short extGoodExit.extGoodCommon
   244                              <1> extGoodExit:
   245                              <1> ;Good exit
   246                              <1> ;Return code in ax
   247 00005671 E876FBFFFF          <1>     call getUserRegs
   248 00005676 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   249                              <1> .extGoodCommon:
   250 00005679 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   251 0000567D F8                  <1>     clc
   252                              <1>     return
    18                              <2> %%_ret:
    19 0000567E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   253                              <1> extErrExit:
   254                              <1> ;The extended error exit from DOS
   255                              <1> ;Jumped to with AL=Extended error code
   256                              <1> ;Can be called too.
   257                              <1> ;Input: al = Extended error code
   258                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   259                              <1> ;   Returns with: eax = xLat Error
   260                              <1> ;                 rsi = callerFrame
   261 0000567F 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   262 00005682 E813000000          <1>     call xLatError
   263 00005687 E891000000          <1>     call checkFail
   264 0000568C E85BFBFFFF          <1>     call getUserRegs
   265 00005691 668906              <1>     mov word [rsi + callerFrame.rax], ax
   266 00005694 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   267 00005698 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   268                              <1>     return
    18                              <2> %%_ret:
    19 00005699 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   269                              <1> xLatError:
   270                              <1> ;Translates the error code given in ax and sets error code in the var
   271                              <1> ; Input: ax = Extended Error Code
   272                              <1> ; Output: ax = Potentially translated Error Code
   273                              <1> ;         [errorExCde] = Original Error Code
   274                              <1> ;Preserves all registers except ax
   275                              <1> ;AH is always returned as 0
   276 0000569A 53                  <1>     push rbx
   277 0000569B 51                  <1>     push rcx
   278 0000569C 56                  <1>     push rsi
   279 0000569D 668905(6DC30300)    <1>     mov word [errorExCde], ax
   280 000056A4 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   281 000056A6 488D35E3A9FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   282                              <1> .readEntry:
   283 000056AD 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   284 000056AF 3CFF                <1>     cmp al, -1
   285 000056B1 741F                <1>     je .skipXlat
   286 000056B3 3A05(96C30300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   287 000056B9 7408                <1>     je .found
   288                              <1>     ;Here, entry not found, goto next entry
   289 000056BB 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   290 000056BE 4801C6              <1>     add rsi, rax    ;Goto next entry
   291 000056C1 EBEA                <1>     jmp short .readEntry
   292                              <1> .found:
   293                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   294 000056C3 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   295                              <1> .mainSearch:
   296 000056C6 AC                  <1>     lodsb   ;Get one byte into al
   297 000056C7 38C3                <1>     cmp bl, al  ;Check against the error code
   298 000056C9 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   299 000056CB FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   300 000056CD 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   301                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   302 000056CF 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   303                              <1> .skipXlat:
   304 000056D2 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   305 000056D4 5E                  <1>     pop rsi
   306 000056D5 59                  <1>     pop rcx
   307 000056D6 5B                  <1>     pop rbx
   308                              <1>     return
    18                              <2> %%_ret:
    19 000056D7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   309                              <1> setErrorVars:
   310                              <1> ;Looks up the error code in the variable and sets the other error vars
   311                              <1> ;Called with the lookup table in rsi
   312                              <1> ;All regs preserved
   313 000056D8 50                  <1>     push rax
   314 000056D9 53                  <1>     push rbx
   315 000056DA 51                  <1>     push rcx
   316 000056DB 56                  <1>     push rsi
   317 000056DC 0FB71D(6DC30300)    <1>     movzx ebx, word [errorExCde]
   318 000056E3 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   319                              <1> .readEntry:
   320 000056E8 AD                  <1>     lodsd   ;Read the dword table entry into eax
   321 000056E9 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   322 000056EE 7428                <1>     je .exit    
   323 000056F0 38D8                <1>     cmp al, bl  ;Compare the error codes
   324 000056F2 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   325 000056F4 D3E8                <1>     shr eax, cl
   326 000056F6 3CFF                <1>     cmp al, -1
   327 000056F8 7406                <1>     je .skipClass
   328 000056FA 8805(70C30300)      <1>     mov byte [errorClass], al
   329                              <1> .skipClass:
   330 00005700 D3E8                <1>     shr eax, cl
   331 00005702 3CFF                <1>     cmp al, -1
   332 00005704 7406                <1>     je .skipAct
   333 00005706 8805(6FC30300)      <1>     mov byte [errorAction], al
   334                              <1> .skipAct:
   335 0000570C D3E8                <1>     shr eax, cl
   336 0000570E 3CFF                <1>     cmp al, -1
   337 00005710 7406                <1>     je .exit
   338 00005712 8805(6CC30300)      <1>     mov byte [errorLocus], al
   339                              <1> .exit:
   340 00005718 5E                  <1>     pop rsi
   341 00005719 59                  <1>     pop rcx
   342 0000571A 5B                  <1>     pop rbx
   343 0000571B 58                  <1>     pop rax
   344                              <1>     return
    18                              <2> %%_ret:
    19 0000571C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   345                              <1> checkFail:
   346                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   347                              <1> ; and swaps the var error code if so
   348 0000571D 803D(CBC30300)00    <1>     cmp byte [Int44Fail], 0
   349 00005724 7509                <1>     jnz .skipFail
   350 00005726 66C705(6DC30300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   350 0000572E 00                  <1>
   351                              <1> .skipFail:
   352 0000572F 56                  <1>     push rsi
   353 00005730 488D35F5A9FFFF      <1>     lea rsi, extErrTbl
   354 00005737 E89CFFFFFF          <1>     call setErrorVars
   355 0000573C 5E                  <1>     pop rsi
   356                              <1>     return
    18                              <2> %%_ret:
    19 0000573D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   357                              <1> ;========================================:
   358                              <1> ;      Reentrant Kernel Functions        :
   359                              <1> ;========================================:
   360                              <1> ctrlBreakCheck:    ;ah = 33h
   361 0000573E 84C0                <1>     test al, al
   362 00005740 7508                <1>     jnz .cbcget  ;Get the state or other functions
   363 00005742 8A15(94C30300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   364 00005748 48CF                <1>     iretq
   365                              <1> .cbcget:
   366 0000574A 3C02                <1>     cmp al, 02h
   367 0000574C 771A                <1>     ja .cbcBad
   368 0000574E 740D                <1>     jz .cbcxchg ;Function 2
   369 00005750 52                  <1>     push rdx
   370 00005751 80E201              <1>     and dl, 1   ;Get only the bottom bit
   371 00005754 8815(94C30300)      <1>     mov byte [breakFlag], dl    ;Set the state
   372 0000575A 5A                  <1>     pop rdx
   373 0000575B 48CF                <1>     iretq
   374                              <1> .cbcxchg:
   375 0000575D 80E201              <1>     and dl, 1
   376 00005760 8615(94C30300)      <1>     xchg byte [breakFlag], dl
   377 00005766 48CF                <1>     iretq
   378                              <1> .cbcBad:
   379 00005768 B0FF                <1>     mov al, -1
   380 0000576A 48CF                <1>     iretq
   381                              <1> 
   382                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   383 0000576C 48891D(81C30300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   384 00005773 48CF                <1>     iretq
   385                              <1> 
   386                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   387 00005775 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   388 0000577C 48CF                <1>     iretq
   389                              <1> 
   390                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   391 0000577E 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   392 00005785 48CF                <1>     iretq
   393                              <1> 
   394                              <1> setDriverLookahead:;ah = 64h, reserved
   395 00005787 48CF                <1>     iretq
   396                              <1> 
   397                              <1> ;========================================:
   398                              <1> ;            Kernel Functions            :
   399                              <1> ;========================================:
   400                              <1> diskReset:         ;ah = 0Dh
   401                              <1> ;Flush all dirty buffers to disk
   402 00005789 E8B2FEFFFF          <1>     call dosCrit1Enter
   403 0000578E 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   404                              <1> .drCheckBuffer:
   405 00005795 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   406 00005799 7407                <1>     jz .drGotoNextBuffer
   407                              <1> .drFlushBuffer:
   408 0000579B E80BB1FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   409 000057A0 720C                <1>     jc .drExit
   410                              <1> .drGotoNextBuffer:
   411 000057A2 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   412 000057A5 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   413 000057AC 75E7                <1>     jne .drCheckBuffer
   414                              <1> .drExit:
   415 000057AE E897FEFFFF          <1>     call dosCrit1Exit
   416 000057B3 B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   417 000057B8 CD4F                <1>     int 4fh
   418                              <1>     return
    18                              <2> %%_ret:
    19 000057BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   419                              <1> 
   420                              <1> selectDisk:        ;ah = 0Eh
   421                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   422 000057BB 88D0                <1>     mov al, dl
   423 000057BD FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   424 000057BF E84CFAFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   425 000057C4 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   426 000057C6 8805(93C30300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   427                              <1> .skipSettingCurrent:
   428 000057CC 0FB605(70C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   429                              <1>     return
    18                              <2> %%_ret:
    19 000057D3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   430                              <1> 
   431                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   432 000057D4 8A05(93C30300)      <1>     mov al, byte [currentDrv]
   433                              <1>     return
    18                              <2> %%_ret:
    19 000057DA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   434                              <1> 
   435                              <1> FATinfoDefault:    ;ah = 1Bh
   436 000057DB 30D2                <1>     xor dl, dl
   437                              <1> FATinfoDevice:     ;ah = 1Ch
   438                              <1> ;Input: dl = 1 based drive number
   439                              <1> ;Output:
   440                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   441                              <1> ;cx = bytes per sector
   442                              <1> ;edx = total number of clusters
   443                              <1> ;rbx = Ptr to media ID byte
   444 000057DD 88D0                <1>     mov al, dl  ;Move drive number into al
   445 000057DF E895FAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   446 000057E4 7307                <1>     jnc .fidCDSFound
   447 000057E6 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   448 000057EB EB2E                <1>     jmp short .error 
   449                              <1> .fidCDSFound:
   450 000057ED E8A8F9FFFF          <1>     call getDiskData
   451 000057F2 7227                <1>     jc .error
   452                              <1> ;Now we have that:
   453                              <1> ;al = sectors per cluster
   454                              <1> ;ah = media ID byte
   455                              <1> ;ebx = total clusters
   456                              <1> ;cx = bytes per sector
   457                              <1> ;edx = number of available clusters
   458 000057F4 E8F3F9FFFF          <1>     call getUserRegs
   459 000057F9 8825(E8C60300)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   460 000057FF 30E4                <1>     xor ah, ah
   461 00005801 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   462 00005804 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   463 00005808 488D1D(E8C60300)    <1>     lea rbx, mediaByte
   464 0000580F 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   465 00005813 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   466                              <1> .badExit:
   467 00005817 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   468                              <1>     return
    18                              <2> %%_ret:
    19 0000581A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   469                              <1> .error:
   470 0000581B E85FFEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   471 00005820 66B8FFFF            <1>     mov ax, -1
   472 00005824 EBF1                <1>     jmp short .badExit
   473                              <1> 
   474                              <1> setIntVector:      ;ah = 25h
   475                              <1> ;Called with:
   476                              <1> ;   rdx = Pointer to interrupt handler
   477                              <1> ;   al = Interrupt number
   478 00005826 50                  <1>     push rax    ;Preserve all registers in call
   479 00005827 53                  <1>     push rbx
   480 00005828 51                  <1>     push rcx
   481 00005829 52                  <1>     push rdx
   482 0000582A 56                  <1>     push rsi
   483 0000582B 55                  <1>     push rbp
   484 0000582C 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   485 0000582E 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   486                              <1> ;First call to get default BIOS segement selector and attribute word
   487 00005834 88C3                <1>     mov bl, al  ;Set interrupt number 
   488 00005836 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   489 0000583B CD35                <1>     int 35h
   490 0000583D E8AAF9FFFF          <1>     call getUserRegs
   491 00005842 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   492 00005846 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   493 00005848 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   494                              <1> ;dx preserves the attribute word
   495 0000584A B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   496 0000584F CD35                <1>     int 35h
   497 00005851 5D                  <1>     pop rbp
   498 00005852 5E                  <1>     pop rsi
   499 00005853 5A                  <1>     pop rdx
   500 00005854 59                  <1>     pop rcx
   501 00005855 5B                  <1>     pop rbx
   502 00005856 58                  <1>     pop rax
   503                              <1>     return
    18                              <2> %%_ret:
    19 00005857 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   504                              <1> 
   505                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   506 00005858 8805(32C30300)      <1>     mov byte [verifyFlag], al
   507 0000585E 8025(32C30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   508                              <1>     return
    18                              <2> %%_ret:
    19 00005865 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   509                              <1> getDOSversion:     ;ah = 30h
   510 00005866 E881F9FFFF          <1>     call getUserRegs
   511 0000586B 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   512 0000586D 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   513 00005870 668B0589A7FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   514 00005877 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   515                              <1>     return
    18                              <2> %%_ret:
    19 0000587A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   516                              <1> 
   517                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   518                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   519 0000587B 30D2                <1>     xor dl, dl
   520                              <1> getDeviceDPBptr:   ;ah = 32h
   521                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   522                              <1> ;On exit: rbx = DPB pointer
   523 0000587D 88D0                <1>     mov al, dl
   524 0000587F E8F5F9FFFF          <1>     call getCDS
   525 00005884 722C                <1>     jc .bad
   526 00005886 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   527 0000588D 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   528 00005893 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   529                              <1>     ;Here ONLY if accessing critical Disk data structures
   530 00005895 E8A6FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   531 0000589A E87BF6FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   532 0000589F E8A6FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   533 000058A4 720C                <1>     jc .bad
   534 000058A6 E841F9FFFF          <1>     call getUserRegs
   535 000058AB 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   536 000058AF 30C0                <1>     xor al, al
   537                              <1>     return
    18                              <2> %%_ret:
    19 000058B1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   538                              <1> .bad:
   539 000058B2 B0FF                <1>     mov al, -1
   540                              <1>     return
    18                              <2> %%_ret:
    19 000058B4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   541                              <1> 
   542                              <1> getInDOSflagPtr:   ;ah = 34h
   543 000058B5 488D15(6AC30300)    <1>     lea rdx, inDOS
   544 000058BC E82BF9FFFF          <1>     call getUserRegs
   545 000058C1 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   546                              <1>     return
    18                              <2> %%_ret:
    19 000058C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   547                              <1> 
   548                              <1> getIntVector:      ;ah = 35h
   549                              <1> ;Called with:
   550                              <1> ;   al = Interrupt Number
   551                              <1> ;Returns:
   552                              <1> ;   rbx = Pointer to interrupt handler
   553 000058C6 E813F9FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   554 000058CB E81CF9FFFF          <1>     call getUserRegs
   555 000058D0 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   556 000058D4 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   557                              <1>     return
    18                              <2> %%_ret:
    19 000058D6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   558                              <1> 
   559                              <1> getDiskFreeSpace:  ;ah = 36h
   560                              <1> ;Input: Drive number in dl (0 = Current)
   561                              <1> ;Output:    ax = sectors per cluster
   562                              <1> ;           ebx = number of free clusters
   563                              <1> ;           cx = bytes per sector
   564                              <1> ;           edx = total clusters on drive
   565 000058D7 88D0                <1>     mov al, dl
   566 000058D9 E89BF9FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   567 000058DE 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   568                              <1> ;Else, we at an error.
   569                              <1> ;Simply return with CY set and error code in al with extended error info
   570 000058E0 B80F000000          <1>     mov eax, errBadDrv
   571 000058E5 E895FDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   572                              <1>     ;extErrExit sets rsi to caller regs
   573 000058EA 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   574                              <1>     return
    18                              <2> %%_ret:
    19 000058EF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   575                              <1> .gdfsCDSFound:
   576 000058F0 E8A5F8FFFF          <1>     call getDiskData
   577 000058F5 7219                <1>     jc .error
   578                              <1> ;Now we have that:
   579                              <1> ;al = sectors per cluster
   580                              <1> ;ah = media ID byte
   581                              <1> ;ebx = total clusters
   582                              <1> ;cx = bytes per sector
   583                              <1> ;edx = number of available clusters
   584 000058F7 E8F0F8FFFF          <1>     call getUserRegs
   585 000058FC 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   586 000058FE 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   587 00005901 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   588 00005905 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   589 00005908 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   590                              <1> .badExit:
   591 0000590C 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   592                              <1>     return
    18                              <2> %%_ret:
    19 0000590F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   593                              <1> .error:
   594 00005910 E86AFDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   595 00005915 66B8FFFF            <1>     mov ax, -1
   596 00005919 EBF1                <1>     jmp short .badExit
   597                              <1> 
   598                              <1> 
   599                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   600 0000591B 31C0                <1>     xor eax, eax
   601 0000591D 668705(91C30300)    <1>     xchg ax, word [errorLevel]
   602 00005924 E948FDFFFF          <1>     jmp extGoodExit
   603                              <1> 
   604                              <1> getSysVarsPtr:     ;ah = 52h
   605 00005929 488D15(33C00300)    <1>     lea rdx, sysVarsPtr
   606 00005930 E8B7F8FFFF          <1>     call getUserRegs
   607 00005935 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   608                              <1>     return
    18                              <2> %%_ret:
    19 00005939 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   609                              <1> 
   610                              <1> 
   611                              <1> ;AH = 53h - CREATE DPB
   612                              <1> createDPB:         ;generates a DPB from a given BPB
   613                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   614                              <1> ;This is done so that the other fields of the DPB can be recycled
   615                              <1> ;Input: rsi = ptr to the BPB
   616                              <1> ;       rbp = ptr to the DPB
   617                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   618                              <1> ;bMediaDescriptor
   619 0000593A 8A4615              <1>     mov al, byte [rsi + bpb.media]
   620 0000593D 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   621                              <1> ;dFirstFreeCluster
   622 00005940 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   623                              <1> ;dNumberOfFreeClusters
   624 00005947 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   625                              <1> ;wBytesPerSector
   626 0000594E 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   627 00005952 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   628                              <1> ;bMaxSectorInCluster
   629 00005956 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   630 00005959 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   631 0000595B 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   632                              <1> ;bSectorsPerClusterShift
   633 0000595E FEC0                <1>     inc al
   634 00005960 30C9                <1>     xor cl, cl
   635                              <1> .cd2:
   636 00005962 D0E8                <1>     shr al, 1
   637 00005964 7404                <1>     jz .cd3
   638 00005966 FEC1                <1>     inc cl
   639 00005968 EBF8                <1>     jmp short .cd2
   640                              <1> .cd3:
   641 0000596A 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   642                              <1> ;wFAToffset, number of reserved sectors in partition
   643 0000596D 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   644 00005971 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   645                              <1> ;bNumberOfFATs
   646 00005975 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   647 00005978 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   648                              <1> ;wNumberRootDirEntries
   649                              <1> ;Gets the number of 32 byte entries in the root directory
   650                              <1> ;Only valid for FAT 12/16
   651 0000597B 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   652 0000597F 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   653                              <1> ;dFATlength, get the FAT length
   654 00005983 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   655 00005987 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   656 0000598A 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   657 0000598C 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   658 0000598F 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   659                              <1> ;Complex cases below...
   660                              <1> ;dClusterHeapOffset, start sector of the data area
   661 00005992 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   662 00005996 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   663 00005999 85C0                <1>     test eax, eax
   664 0000599B 0F44C3              <1>     cmovz eax, ebx
   665                              <1> ;eax = FATsz
   666 0000599E 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   667 000059A2 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   668 000059A5 85DB                <1>     test ebx, ebx
   669 000059A7 0F44D9              <1>     cmovz ebx, ecx 
   670                              <1> ;ebx = TotSec
   671 000059AA 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   672 000059AD 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   673                              <1> .cd4:
   674 000059AF 01C2                <1>     add edx, eax
   675 000059B1 FEC9                <1>     dec cl
   676 000059B3 75FA                <1>     jnz .cd4
   677 000059B5 89D0                <1>     mov eax, edx    ;Store product in eax
   678 000059B7 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   679 000059BB 01D0                <1>     add eax, edx
   680                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   681 000059BD 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   682 000059C1 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   683 000059C4 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   684 000059C8 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   685 000059C9 89D0                <1>     mov eax, edx
   686 000059CB 31D2                <1>     xor edx, edx
   687 000059CD F7F1                <1>     div ecx
   688 000059CF 89C2                <1>     mov edx, eax
   689 000059D1 58                  <1>     pop rax
   690 000059D2 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   691                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   692                              <1>     ;aka eax = Start sector of the data area in volume
   693 000059D4 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   694                              <1> ;dClusterCount
   695 000059D7 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   696 000059D9 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   697 000059DB 31D2                <1>     xor edx, edx
   698 000059DD BB01000000          <1>     mov ebx, 1
   699 000059E2 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   700 000059E5 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   701 000059E7 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   702 000059E9 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   703 000059EB 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   704                              <1> ;dFirstUnitOfRootDir
   705 000059EE 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   706 000059F3 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   707 000059F6 770F                <1>     ja .cd5
   708                              <1>     ;Else, we need to find the first sector of the root directory
   709                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   710 000059F8 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   711 000059FC 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   712                              <1> .cd51:
   713 00005A00 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   714 00005A03 FFC9                <1>     dec ecx
   715 00005A05 75F9                <1>     jnz .cd51
   716                              <1> .cd5:
   717 00005A07 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   718                              <1> ;Exit epilogue
   719 00005A0A 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   720 00005A11 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   721                              <1>     %if DEBUG && DPBINFO
   722                              <1>     ;Print DPB 
   723                              <1>     debugEnterM
   724                              <1>     push rbp
   725                              <1>     lea rbp, .l0000
   726                              <1>     call debPrintNullString
   727                              <1>     pop rbp
   728                              <1>     call debDPBBPBptr
   729                              <1>     call debMakeDebuggerRespond
   730                              <1>     jmp short .l0001
   731                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   732                              <1> .l0001:
   733                              <1>     debugExitM
   734                              <1>     %endif
   735                              <1>     return
    18                              <2> %%_ret:
    19 00005A13 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   736                              <1> 
   737                              <1> getVerifySetting:  ;ah = 54h
   738 00005A14 8A05(32C30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   739                              <1>     return
    18                              <2> %%_ret:
    19 00005A1A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   740                              <1> 
   741                              <1> getExtendedError:  ;ah = 59h
   742 00005A1B E8CCF7FFFF          <1>     call getUserRegs
   743 00005A20 668B05(6DC30300)    <1>     mov ax, word [errorExCde]
   744 00005A27 8A2D(6CC30300)      <1>     mov ch, byte [errorLocus]
   745 00005A2D 8A3D(70C30300)      <1>     mov bh, byte [errorClass]
   746 00005A33 8A1D(6FC30300)      <1>     mov bl, byte [errorAction]
   747 00005A39 668906              <1>     mov word [rsi + callerFrame.rax], ax
   748 00005A3C 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   749 00005A40 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   750                              <1>     return
    18                              <2> %%_ret:
    19 00005A43 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   751                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   752                              <1> noOp:
   753                              <1>     return
    18                              <2> %%_ret:
    19 00005A44 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    40                                  %include "./Source/Kernel/Net/server.asm"
    41                              <1> ;Network functions here
    42                              <1> 
    43                              <1> dosServer:  ;ah = 5Dh
    44                              <1> ;Dispatches the server function in al. Many of these are share hooks.
    45                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
    46                              <1> ;   rdx = Pointer to DPL
    47 00005A45 3C07                <1>     cmp al, 07h
    48 00005A47 7204                <1>     jb .skip
    49 00005A49 3C09                <1>     cmp al, 09h
    50 00005A4B 7619                <1>     jbe .skip2
    51                              <1> .skip:
    52 00005A4D 4889D6              <1>     mov rsi, rdx
    53 00005A50 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    54 00005A54 66891D(A5C30300)    <1>     mov word [machineNum], bx
    55 00005A5B 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    56 00005A5F 48891D(9DC30300)    <1>     mov qword [serverPSP], rbx
    57                              <1>     
    58                              <1> .skip2:
    59                              <1> serverDispatch: ;AX=5D00h
    60                              <1> ;Input: rsi points to the DOS parameter list
    61 00005A66 58                  <1>     pop rax
    62 00005A67 56                  <1>     push rsi    ;Put dpl ptr in rdi
    63 00005A68 5F                  <1>     pop rdi
    64 00005A69 E87EF7FFFF          <1>     call getUserRegs
    65 00005A6E 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    66 00005A71 56                  <1>     push rsi
    67 00005A72 B906000000          <1>     mov ecx, 6
    68 00005A77 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    69 00005A7A 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    70 00005A81 48A5                <1>     movsq   ;Transfer r8...
    71 00005A83 48A5                <1>     movsq   ;... and r9
    72 00005A85 5E                  <1>     pop rsi
    73 00005A86 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    74 00005A89 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    75 00005A8D 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    76 00005A91 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    77 00005A95 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    78 00005A99 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    79 00005A9D 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    80 00005AA1 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    81 00005AA5 48891D(E4C30300)    <1>     mov qword [oldRBX], rbx
    82 00005AAC C605(5CC60300)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    83 00005AB3 E989FAFFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    84                              <1> 
    85                              <1> 
    86                              <1> netServices:   ;ah = 5Eh, do nothing
    87                              <1> netRedir:;ah = 5Fh, do nothing
    88                              <1>     return
    18                              <2> %%_ret:
    19 00005AB8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    41                                  %include "./Source/Kernel/Net/multiplx.asm"
    42                              <1> ;Default multiplexer. Current only installed function is ah=12h
    43                              <1> 
    44                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    45 00005AB9 80FC12              <1>     cmp ah, 12h
    46 00005ABC 751C                <1>     jne .exit       ;Exit if not for us
    47 00005ABE 3C1B                <1>     cmp al, mDispTblL / 2
    48 00005AC0 7318                <1>     jae .exit   ;If above or equal, exit
    49 00005AC2 53                  <1>     push rbx
    50 00005AC3 51                  <1>     push rcx
    51 00005AC4 31C9                <1>     xor ecx, ecx
    52 00005AC6 488D1DD7A8FFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    53 00005ACD 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    54 00005ACF D1E1                <1>     shl ecx, 1   ;multiply by 2
    55 00005AD1 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    56 00005AD4 FFD3                <1>     call rbx
    57 00005AD6 59                  <1>     pop rcx
    58 00005AD7 5B                  <1>     pop rbx
    59 00005AD8 48CF                <1>     iretq
    60                              <1> .exit:
    61 00005ADA 804C241001          <1>     or byte [rsp + 8h*2], 1
    62 00005ADF 48CF                <1>     iretq
    63                              <1> multiplexTest:
    64 00005AE1 B0FF                <1>     mov al, -1
    65 00005AE3 C3                  <1>     ret
    66                              <1> getDosDataSeg:  ;Int 4Fh, AX=1203h
    67                              <1> ;Return: r8 = Dos Data Segment Pointer
    68 00005AE4 4C8D05(00C00300)    <1>     lea r8, dosDataArea
    69                              <1>     return
    18                              <2> %%_ret:
    19 00005AEB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    42                                  %include "./Source/Drivers/drvData.asm"
    43                              <1> ;-----------------------------------:
    44                              <1> ;          Driver routines          :
    45                              <1> ;-----------------------------------:
    46                              <1> drivers:
    47                              <1> conHdr:
    48 00005AEC [0E5B000000000000]  <1>     dq auxHdr
    49 00005AF4 1380                <1>     dw 08013h
    50 00005AF6 [8C5C000000000000]  <1>     dq commonStrat
    51 00005AFE [9B5C000000000000]  <1>     dq conDriver
    52 00005B06 434F4E2020202020    <1>     db "CON     "
    53                              <1> auxHdr:
    54 00005B0E [305B000000000000]  <1>     dq prnHdr
    55 00005B16 0080                <1>     dw 08000h
    56 00005B18 [8C5C000000000000]  <1>     dq commonStrat
    57 00005B20 [505F000000000000]  <1>     dq com1Intr
    58 00005B28 4155582020202020    <1>     db "AUX     "
    59                              <1> prnHdr:
    60 00005B30 [525B000000000000]  <1>     dq clkHdr
    61 00005B38 40A0                <1>     dw 0A040h
    62 00005B3A [945C000000000000]  <1>     dq nulStrat
    63 00005B42 [9A5C000000000000]  <1>     dq nulIntr
    64 00005B4A 50524E2020202020    <1>     db "PRN     "
    65                              <1> clkHdr:
    66 00005B52 [745B000000000000]  <1>     dq msdHdr
    67 00005B5A 0880                <1>     dw 08008h
    68 00005B5C [8C5C000000000000]  <1>     dq commonStrat
    69 00005B64 [E85D000000000000]  <1>     dq clkDriver
    70 00005B6C 434C4F434B242020    <1>     db "CLOCK$  "
    71                              <1> msdHdr:
    72 00005B74 [965B000000000000]  <1>     dq com1Hdr
    73 00005B7C 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    74 00005B7E [8C5C000000000000]  <1>     dq commonStrat
    75 00005B86 [F560000000000000]  <1>     dq msdDriver
    76 00005B8E 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    77                              <1> com1Hdr:
    78 00005B96 [B85B000000000000]  <1>     dq com2Hdr
    79 00005B9E 0080                <1>     dw 08000h
    80 00005BA0 [8C5C000000000000]  <1>     dq commonStrat
    81 00005BA8 [505F000000000000]  <1>     dq com1Intr
    82 00005BB0 434F4D3120202020    <1>     db "COM1    "
    83                              <1> com2Hdr:
    84 00005BB8 [DA5B000000000000]  <1>     dq com3Hdr
    85 00005BC0 0080                <1>     dw 08000h
    86 00005BC2 [8C5C000000000000]  <1>     dq commonStrat
    87 00005BCA [595F000000000000]  <1>     dq com2Intr
    88 00005BD2 434F4D3220202020    <1>     db "COM2    "
    89                              <1> com3Hdr:
    90 00005BDA [FC5B000000000000]  <1>     dq com4Hdr
    91 00005BE2 0080                <1>     dw 08000h
    92 00005BE4 [8C5C000000000000]  <1>     dq commonStrat
    93 00005BEC [625F000000000000]  <1>     dq com3Intr
    94 00005BF4 434F4D3320202020    <1>     db "COM3    "
    95                              <1> com4Hdr:
    96 00005BFC [1E5C000000000000]  <1>     dq lpt1Hdr
    97 00005C04 0080                <1>     dw 08000h
    98 00005C06 [8C5C000000000000]  <1>     dq commonStrat
    99 00005C0E [6B5F000000000000]  <1>     dq com4Intr
   100 00005C16 434F4D3420202020    <1>     db "COM4    "
   101                              <1> lpt1Hdr:
   102 00005C1E [405C000000000000]  <1>     dq lpt2Hdr
   103 00005C26 40A0                <1>     dw 0A040h
   104 00005C28 [945C000000000000]  <1>     dq nulStrat
   105 00005C30 [9A5C000000000000]  <1>     dq nulIntr
   106 00005C38 4C50543120202020    <1>     db "LPT1    "
   107                              <1> lpt2Hdr:
   108 00005C40 [625C000000000000]  <1>     dq lpt3Hdr
   109 00005C48 40A0                <1>     dw 0A040h
   110 00005C4A [945C000000000000]  <1>     dq nulStrat
   111 00005C52 [9A5C000000000000]  <1>     dq nulIntr
   112 00005C5A 4C50543220202020    <1>     db "LPT2    "
   113                              <1> lpt3Hdr:
   114 00005C62 FFFFFFFFFFFFFFFF    <1>     dq -1
   115 00005C6A 40A0                <1>     dw 0A040h
   116 00005C6C [945C000000000000]  <1>     dq nulStrat
   117 00005C74 [9A5C000000000000]  <1>     dq nulIntr
   118 00005C7C 4C50543320202020    <1>     dq "LPT3    "
   119 00005C84 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    43                                  %include "./Source/Drivers/charDrv.asm"
    44                              <1> commonStrat:
    45                              <1> ;DOS calls this function with rbx=Ptr to request header
    46 00005C8C 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    47 00005C93 C3                  <1>     ret
    48                              <1> nulStrat:
    49 00005C94 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    50                              <1> nulIntr:
    51 00005C9A C3                  <1>     ret
    52                              <1> conDriver:
    53 00005C9B 50                  <1>     push rax
    54 00005C9C 53                  <1>     push rbx
    55 00005C9D 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    56 00005CA4 B003                <1>     mov al, 03h ;Unknown Command
    57 00005CA6 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    58 00005CAA 7739                <1>     ja .conWriteErrorCode ;If yes, error!
    59                              <1> 
    60 00005CAC 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    61 00005CAF 3C04                <1>     cmp al, 4
    62 00005CB1 7441                <1>     jz .conRead
    63 00005CB3 3C05                <1>     cmp al, 5
    64 00005CB5 0F847F000000        <1>     jz .conNondestructiveRead
    65 00005CBB 3C06                <1>     cmp al, 6
    66 00005CBD 0F84A8000000        <1>     jz .conInputStatus
    67 00005CC3 3C07                <1>     cmp al, 7
    68 00005CC5 0F84B0000000        <1>     jz .conFlushInputBuffers
    69 00005CCB 3C08                <1>     cmp al, 8
    70 00005CCD 0F84CA000000        <1>     jz .conWrite
    71 00005CD3 3C09                <1>     cmp al, 9
    72 00005CD5 0F84C2000000        <1>     jz .conWrite
    73 00005CDB 3C0A                <1>     cmp al, 0Ah
    74 00005CDD 0F84E3000000        <1>     jz .conOutputStatus
    75 00005CE3 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    76                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    77 00005CE5 B480                <1>     mov ah, 80h ;Set error bit
    78 00005CE7 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    79                              <1> .conExit:
    80 00005CEB 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    81 00005CF1 5B                  <1>     pop rbx
    82 00005CF2 58                  <1>     pop rax
    83 00005CF3 C3                  <1>     ret
    84                              <1> .conRead:    ;Function 4
    85 00005CF4 B005                <1>     mov al, 05h ;Bad request structure length?
    86 00005CF6 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    87 00005CF9 75EA                <1>     jne .conWriteErrorCode
    88                              <1> 
    89 00005CFB 57                  <1>     push rdi
    90 00005CFC 51                  <1>     push rcx
    91 00005CFD 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    92 00005D01 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    93                              <1> .cre1:
    94 00005D03 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    95 00005D06 741C                <1>     je .cre2
    96 00005D08 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    97 00005D0F 751A                <1>     jnz .cre3   ;No, get the buffer value
    98 00005D11 31C0                <1>     xor eax, eax
    99 00005D13 CD36                <1>     int 36h
   100                              <1> .cre11:
   101 00005D15 AA                  <1>     stosb
   102 00005D16 84C0                <1>     test al, al ;Was the ascii code stored 0?
   103 00005D18 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   104 00005D1A 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   105                              <1> .cre12:
   106 00005D20 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   107 00005D22 EBDF                <1>     jmp short .cre1
   108                              <1> .cre2:
   109 00005D24 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   110 00005D27 59                  <1>     pop rcx
   111 00005D28 5F                  <1>     pop rdi
   112 00005D29 EBC0                <1>     jmp short .conExit
   113                              <1> .cre3:
   114 00005D2B 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   115 00005D31 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   116 00005D38 EBDB                <1>     jmp short .cre11
   117                              <1> 
   118                              <1> .conNondestructiveRead:  ;Function 5
   119 00005D3A B005                <1>     mov al, 05h ;Bad request structure length?
   120 00005D3C 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   121 00005D3F 75A4                <1>     jne .conWriteErrorCode
   122 00005D41 803D8E00000000      <1>     cmp byte [.conBuf], 0
   123 00005D48 7519                <1>     jnz .cnr2
   124 00005D4A B401                <1>     mov ah, 01h     ;Get key if exists
   125 00005D4C CD36                <1>     int 36h
   126 00005D4E 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   127                              <1>     ;Keystroke available
   128                              <1> .cnr0:
   129 00005D50 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   130 00005D53 E993FFFFFF          <1>     jmp .conExit
   131                              <1> .cnr1: ;No keystroke available
   132 00005D58 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   133 00005D5E E988FFFFFF          <1>     jmp .conExit
   134                              <1> .cnr2:
   135 00005D63 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   136 00005D69 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   137                              <1> 
   138                              <1> .conInputStatus:         ;Function 6
   139 00005D6B B005                <1>     mov al, 05h ;Bad request structure length?
   140 00005D6D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   141 00005D70 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   142 00005D76 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   143                              <1> 
   144                              <1> .conFlushInputBuffers:   ;Function 7
   145 00005D7B B005                <1>     mov al, 05h ;Bad request structure length?
   146 00005D7D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   147 00005D80 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   148 00005D86 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   149                              <1> .cfib0:
   150 00005D8D B401                <1>     mov ah, 01      ;Get buffer status
   151 00005D8F CD36                <1>     int 36h
   152 00005D91 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   153 00005D97 30E4                <1>     xor ah, ah
   154 00005D99 CD36                <1>     int 36h ;Read key to flush from buffer
   155 00005D9B EBF0                <1>     jmp short .cfib0
   156                              <1> 
   157                              <1> .conWrite:   ;Function 8 and 9
   158 00005D9D B005                <1>     mov al, 05h ;Bad request structure length?
   159 00005D9F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   160 00005DA2 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   161                              <1> 
   162 00005DA8 56                  <1>     push rsi
   163 00005DA9 51                  <1>     push rcx
   164 00005DAA 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   165 00005DAE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   166                              <1> .cw1: 
   167 00005DB0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   168 00005DB3 7407                <1>     je .cw2
   169 00005DB5 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   170 00005DB6 CD49                <1>     int 49h ;Fast print char
   171 00005DB8 FFC1                <1>     inc ecx
   172 00005DBA EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   173                              <1> .cw2:
   174 00005DBC 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   175 00005DBF 59                  <1>     pop rcx
   176 00005DC0 5E                  <1>     pop rsi
   177 00005DC1 E925FFFFFF          <1>     jmp .conExit
   178                              <1> .conOutputStatus:   ;Function 0Ah
   179 00005DC6 B005                <1>     mov al, 05h ;Bad request structure length?
   180 00005DC8 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   181 00005DCB 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   182 00005DD1 E915FFFFFF          <1>     jmp .conExit
   183                              <1> 
   184 00005DD6 00                  <1> .conBuf db 0    ;Single byte buffer
   185                              <1> fastOutput:         ;This CON driver supports Int 49h
   186                              <1> ;Called with char to transfer in al
   187 00005DD7 50                  <1>     push rax
   188 00005DD8 B40E                <1>     mov ah, 0Eh
   189 00005DDA CD30                <1>     int 30h
   190 00005DDC 58                  <1>     pop rax
   191 00005DDD 48CF                <1>     iretq
   192                              <1> ctrlBreak:
   193                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   194 00005DDF C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   195 00005DE6 48CF                <1>     iretq
   196                              <1> 
   197                              <1> clkDriver:
   198 00005DE8 50                  <1>     push rax
   199 00005DE9 53                  <1>     push rbx
   200 00005DEA 51                  <1>     push rcx
   201 00005DEB 52                  <1>     push rdx
   202 00005DEC 56                  <1>     push rsi
   203 00005DED 55                  <1>     push rbp
   204 00005DEE 488B1D8FFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   205 00005DF5 B003                <1>     mov al, 03h ;Unknown Command
   206 00005DF7 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   207 00005DFB 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   208                              <1> 
   209 00005DFD 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   210 00005E00 3C04                <1>     cmp al, 04h
   211 00005E02 7437                <1>     jz .clkRead
   212 00005E04 3C06                <1>     cmp al, 06h
   213 00005E06 0F8494000000        <1>     jz .clkInputStatus
   214 00005E0C 3C07                <1>     cmp al, 07h
   215 00005E0E 0F8498000000        <1>     jz .clkFlushInputBuffers
   216 00005E14 3C08                <1>     cmp al, 08h
   217 00005E16 0F84A0000000        <1>     jz .clkWrite
   218 00005E1C 3C09                <1>     cmp al, 09h
   219 00005E1E 0F8498000000        <1>     jz .clkWrite
   220 00005E24 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   221                              <1> .clkNotFunctioning:
   222 00005E26 B002                <1>     mov al, 02h ;Device not ready error
   223                              <1> .clkWriteErrorCode:
   224 00005E28 B480                <1>     mov ah, 80h ;Set error bit
   225 00005E2A 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   226                              <1> .clkExit:
   227 00005E2E 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   228 00005E34 5D                  <1>     pop rbp
   229 00005E35 5E                  <1>     pop rsi
   230 00005E36 5A                  <1>     pop rdx
   231 00005E37 59                  <1>     pop rcx
   232 00005E38 5B                  <1>     pop rbx
   233 00005E39 58                  <1>     pop rax
   234 00005E3A C3                  <1>     ret
   235                              <1> 
   236                              <1> .clkRead:           ;Function 4
   237 00005E3B B005                <1>     mov al, 05h ;Bad request structure length?
   238 00005E3D 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   239 00005E40 75E6                <1>     jne .clkWriteErrorCode
   240                              <1> 
   241 00005E42 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   242 00005E45 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   243 00005E49 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   244 00005E50 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   245 00005E54 30E4                <1>     xor ah, ah
   246 00005E56 CD3A                <1>     int 3Ah         ;Read the system timer
   247 00005E58 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   248 00005E5A 740D                <1>     jz .clkr1       ;Nope, now just time 
   249 00005E5C 30E4                <1>     xor ah, ah
   250                              <1>     ;This works as al should keep count of the # of days passed since last read
   251 00005E5E 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   252 00005E62 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   253                              <1> .clkr1:
   254 00005E69 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   255 00005E6C 0FB7D2              <1>     movzx edx, dx
   256 00005E6F 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   257 00005E71 89D0                <1>     mov eax, edx
   258 00005E73 31D2                <1>     xor edx, edx
   259 00005E75 89D8                <1>     mov eax, ebx
   260 00005E77 B944040000          <1>     mov ecx, 1092   
   261 00005E7C F7F1                <1>     div ecx
   262 00005E7E 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   263 00005E81 89D0                <1>     mov eax, edx    ;Get remainder in eax
   264 00005E83 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   265 00005E87 31D2                <1>     xor edx, edx
   266 00005E89 B95B000000          <1>     mov ecx, 91 ;5*18.2
   267 00005E8E F7F1                <1>     div ecx
   268 00005E90 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   269 00005E93 89D0                <1>     mov eax, edx    ;Get remainder in eax
   270                              <1>     ;lea eax, dword [eax + 4*eax]
   271                              <1>     ;add eax, edx    ;Essentially multiply by 6
   272 00005E95 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   273 00005E98 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   274 00005E9B E98EFFFFFF          <1>     jmp .clkExit
   275                              <1> 
   276                              <1> .clkInputStatus:    ;Function 6
   277                              <1> ;Always return ready
   278 00005EA0 B005                <1>     mov al, 05h ;Bad request structure length?
   279 00005EA2 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   280 00005EA5 7581                <1>     jne .clkWriteErrorCode
   281 00005EA7 E982FFFFFF          <1>     jmp .clkExit
   282                              <1> .clkFlushInputBuffers:  ;Function 7
   283                              <1> ;Always return done immediately
   284 00005EAC B005                <1>     mov al, 05h ;Bad request structure length?
   285 00005EAE 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   286 00005EB1 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   287 00005EB7 E972FFFFFF          <1>     jmp .clkExit
   288                              <1> 
   289                              <1> .clkWrite:          ;Functions 8 and 9
   290 00005EBC B005                <1>     mov al, 05h ;Bad request structure length?
   291 00005EBE 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   292 00005EC1 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   293                              <1> 
   294 00005EC7 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   295 00005ECA 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   296 00005ECE 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   297 00005ED2 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   298                              <1> 
   299 00005ED9 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   300 00005EDB 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   301 00005EDF B105                <1>     mov cl, 5
   302 00005EE1 F6F1                <1>     div cl          ;Divide al by 5
   303 00005EE3 30E4                <1>     xor ah, ah      ;Remove the remainder
   304 00005EE5 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   305                              <1> ;Using the decimal part of this formula for the low count
   306                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   307 00005EE7 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   308 00005EEA B912000000          <1>     mov ecx, 18
   309 00005EEF F7E1                <1>     mul ecx  
   310 00005EF1 01C3                <1>     add ebx, eax
   311                              <1> 
   312 00005EF3 31D2                <1>     xor edx, edx
   313 00005EF5 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   314 00005EF9 B944040000          <1>     mov ecx, 1092
   315 00005EFE F7E1                <1>     mul ecx
   316 00005F00 01C3                <1>     add ebx, eax
   317 00005F02 89DA                <1>     mov edx, ebx    ;edx now has low count
   318 00005F04 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   319 00005F08 B401                <1>     mov ah, 01h     ;Set the system time
   320 00005F0A CD3A                <1>     int 3Ah
   321                              <1> 
   322 00005F0C 4889F3              <1>     mov rbx, rsi
   323 00005F0F E91AFFFFFF          <1>     jmp .clkExit
   324                              <1> 
   325                              <1> .clkBCDtoHex:
   326                              <1> ;Converts a BCD value to a Hex byte
   327                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   328 00005F14 51                  <1>     push rcx
   329 00005F15 0FB6C0              <1>     movzx eax, al   ;Zero extend
   330 00005F18 89C1                <1>     mov ecx, eax    ;Save al in ecx
   331 00005F1A 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   332 00005F1F 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   333 00005F25 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   334                              <1> .cbth0:
   335 00005F28 050A000000          <1>     add eax, 10
   336 00005F2D E2F9                <1>     loop .cbth0
   337 00005F2F 59                  <1>     pop rcx
   338 00005F30 C3                  <1>     ret
   339                              <1> 
   340                              <1> .clkHexToBCD:
   341                              <1> ;Converts a Hex byte into two BCD digits
   342                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   343 00005F31 51                  <1>     push rcx
   344 00005F32 0FB6C0              <1>     movzx eax, al   ;Zero extend
   345 00005F35 31C9                <1>     xor ecx, ecx
   346                              <1> .chtb0:
   347 00005F37 3D0A000000          <1>     cmp eax, 10
   348 00005F3C 7209                <1>     jb .chtb1
   349 00005F3E 2D0A000000          <1>     sub eax, 10
   350 00005F43 FFC1                <1>     inc ecx
   351 00005F45 EBF0                <1>     jmp short .chtb0
   352                              <1> .chtb1:
   353 00005F47 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   354 00005F4A 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   355 00005F4C 59                  <1>     pop rcx
   356 00005F4D C3                  <1>     ret
   357 00005F4E 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   358                              <1> 
   359                              <1> ;COM Driver headers and main interrupt strat
   360                              <1> com1Intr:
   361 00005F50 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   362 00005F57 EB19                <1>     jmp short comIntr
   363                              <1> com2Intr:
   364 00005F59 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   365 00005F60 EB10                <1>     jmp short comIntr
   366                              <1> com3Intr:
   367 00005F62 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   368 00005F69 EB07                <1>     jmp short comIntr
   369                              <1> com4Intr:
   370 00005F6B C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   371                              <1> comIntr:
   372 00005F72 50                  <1>     push rax
   373 00005F73 53                  <1>     push rbx
   374 00005F74 51                  <1>     push rcx
   375 00005F75 52                  <1>     push rdx
   376 00005F76 56                  <1>     push rsi
   377 00005F77 57                  <1>     push rdi
   378 00005F78 488B1D05FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   379 00005F7F B003                <1>     mov al, 03h ;Unknown Command
   380 00005F81 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   381 00005F85 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   382                              <1> 
   383 00005F87 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   384 00005F8A 3C04                <1>     cmp al, 4   ;Read Character(s)
   385 00005F8C 7462                <1>     jz .comRead
   386 00005F8E 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   387 00005F90 0F849B000000        <1>     jz .comNondestructiveRead   
   388 00005F96 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   389 00005F98 0F8484000000        <1>     jz .comReadInputStatus
   390 00005F9E 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   391 00005FA0 0F84B9000000        <1>     jz .comFlushInputBuffers
   392 00005FA6 3C08                <1>     cmp al, 8
   393 00005FA8 0F84DB000000        <1>     jz .comWrite
   394 00005FAE 3C09                <1>     cmp al, 9
   395 00005FB0 0F84D3000000        <1>     jz .comWrite
   396 00005FB6 3C0A                <1>     cmp al, 0Ah
   397 00005FB8 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   398 00005FBE EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   399                              <1> .comErrorNoCount:
   400 00005FC0 B002                <1>     mov al, 02h ;Unknown device
   401 00005FC2 EB19                <1>     jmp short .comWriteErrorCode
   402                              <1> .comReadError:
   403 00005FC4 BA0B000000          <1>     mov edx, 0Bh
   404                              <1> .comWriteError:
   405 00005FC9 BA0A000000          <1>     mov edx, 0Ah
   406                              <1> .comError:
   407 00005FCE 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   408 00005FD1 B902000000          <1>     mov ecx, 02h    ;Unknown device
   409 00005FD6 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   410 00005FD8 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   411 00005FDB 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   412                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   413 00005FDD B480                <1>     mov ah, 80h ;Set error bit
   414 00005FDF 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   415                              <1> .comExit:
   416 00005FE3 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   417 00005FE9 5F                  <1>     pop rdi
   418 00005FEA 5E                  <1>     pop rsi
   419 00005FEB 5A                  <1>     pop rdx
   420 00005FEC 59                  <1>     pop rcx
   421 00005FED 5B                  <1>     pop rbx
   422 00005FEE 58                  <1>     pop rax
   423 00005FEF C3                  <1>     ret
   424                              <1> 
   425                              <1> .comRead:
   426 00005FF0 B005                <1>     mov al, 05h ;Bad request structure length?
   427 00005FF2 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   428 00005FF5 75E6                <1>     jne .comWriteErrorCode
   429                              <1> 
   430 00005FF7 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   431 00005FFB 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   432                              <1> .cr1:
   433 00005FFD 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   434 00006000 741B                <1>     je .cre2
   435                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   436 00006002 B802000000          <1>     mov eax, 02h    ;Recieve 
   437 00006007 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   438 0000600D 6698                <1>     cbw     ;Zero extend to upper byte
   439 0000600F CD34                <1>     int 34h ;Recieve Char
   440 00006011 72BB                <1>     jc .comError
   441 00006013 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   442 00006016 74EA                <1>     je .cr11
   443 00006018 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   444 00006019 FFC1                <1>     inc ecx
   445 0000601B EBE0                <1>     jmp short .cr1
   446                              <1> .cre2:
   447 0000601D 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   448 00006020 EBC1                <1>     jmp short .comExit
   449                              <1> 
   450                              <1> .comReadInputStatus:
   451 00006022 B005                <1>     mov al, 05h ;Bad request structure length?
   452 00006024 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   453 00006027 75B4                <1>     jne .comWriteErrorCode
   454 00006029 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   455 0000602F EBB2                <1>     jmp short .comExit
   456                              <1> 
   457                              <1> .comNondestructiveRead:
   458                              <1> ;Acts like a "read one character if there is one" function
   459 00006031 B005                <1>     mov al, 05h ;Bad request structure length?
   460 00006033 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   461 00006036 75A5                <1>     jne .comWriteErrorCode
   462                              <1> .cndr1:
   463 00006038 B802000000          <1>     mov eax, 02h    ;Recieve 
   464 0000603D 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   465 00006043 6698                <1>     cbw     ;Zero extend to upper byte
   466 00006045 CD34                <1>     int 34h ;Recieve Char
   467 00006047 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   468 0000604D 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   469 00006050 7405                <1>     je .cndr2
   470 00006052 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Get next char
   471 00006055 EB8C                <1>     jmp short .comExit
   472                              <1> .cndr2:
   473 00006057 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 200h ;Busy bit set
   474 0000605D EB84                <1>     jmp short .comExit
   475                              <1> 
   476                              <1> .comFlushInputBuffers:
   477 0000605F B005                <1>     mov al, 05h ;Bad request structure length?
   478 00006061 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   479 00006064 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   480                              <1> .cfib0:
   481 0000606A 8A1584000000        <1>     mov dl, byte [.comDevice]
   482 00006070 6698                <1>     cbw
   483 00006072 B802000000          <1>     mov eax, 02h    ;Recieve
   484 00006077 CD34                <1>     int 34h
   485 00006079 0F8241FFFFFF        <1>     jc .comErrorNoCount
   486 0000607F 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   487 00006082 75E6                <1>     jne .cfib0
   488 00006084 E95AFFFFFF          <1>     jmp .comExit
   489                              <1> 
   490                              <1> .comWrite:
   491 00006089 B005                <1>     mov al, 05h ;Bad request structure length?
   492 0000608B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   493 0000608E 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   494                              <1> 
   495 00006094 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   496 00006098 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   497                              <1> .cw1: 
   498 0000609A 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   499 0000609D 7417                <1>     je .cw2
   500 0000609F AC                  <1>     lodsb   ;Get char into al, and inc rsi
   501 000060A0 B401                <1>     mov ah, 01h ;Move function number into ah
   502 000060A2 8A154C000000        <1>     mov dl, byte [.comDevice]
   503 000060A8 6698                <1>     cbw     ;Zero extend to upper byte
   504 000060AA CD34                <1>     int 34h ;Transmit char
   505 000060AC 0F821CFFFFFF        <1>     jc .comError
   506 000060B2 FFC1                <1>     inc ecx
   507 000060B4 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   508                              <1> .cw2:
   509 000060B6 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   510 000060B9 E925FFFFFF          <1>     jmp .comExit
   511                              <1> 
   512                              <1> .comOutputStatus:
   513                              <1> ;Read MODEM status
   514 000060BE B005                <1>     mov al, 05h ;Bad request structure length?
   515 000060C0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   516 000060C3 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   517                              <1> 
   518 000060C9 8A1525000000        <1>     mov dl, byte [.comDevice]
   519 000060CF 6698                <1>     cbw     ;Zero extend to upper byte
   520 000060D1 B403                <1>     mov ah, 03h     ;Get status
   521 000060D3 CD34                <1>     int 34h
   522 000060D5 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   523 000060DB 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   524 000060E0 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   525 000060E3 F7D0                <1>     not eax      ;Bitwise inversion
   526 000060E5 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   527 000060EA 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   528 000060EF E9EFFEFFFF          <1>     jmp .comExit
   529 000060F4 00                  <1> .comDevice   db 0
    44                                  %include "./Source/Drivers/diskDrv.asm"
    45                              <1> msdDriver:
    46 000060F5 50                  <1>     push rax
    47 000060F6 53                  <1>     push rbx
    48 000060F7 51                  <1>     push rcx
    49 000060F8 52                  <1>     push rdx
    50 000060F9 56                  <1>     push rsi
    51 000060FA 57                  <1>     push rdi
    52 000060FB 55                  <1>     push rbp
    53 000060FC 4150                <1>     push r8
    54 000060FE 488B1D7FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    55 00006105 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    56 00006109 B003                <1>     mov al, drvBadCmd
    57 0000610B 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    58 00006111 B001                <1>     mov al, drvBadUnit 
    59 00006113 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    60 00006117 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    61 0000611D 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    62 00006124 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    63 00006128 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    64 0000612B 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    65 0000612F 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    66 00006133 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    67 00006135 488D0D9A000000      <1>     lea rcx, .msdTable
    68 0000613C 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    69 00006140 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    70 00006142 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    71 00006144 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    72 00006147 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    73                              <1> .msdDriverExit:
    74 00006149 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    75 0000614F 4158                <1>     pop r8
    76 00006151 5D                  <1>     pop rbp
    77 00006152 5F                  <1>     pop rdi
    78 00006153 5E                  <1>     pop rsi
    79 00006154 5A                  <1>     pop rdx
    80 00006155 59                  <1>     pop rcx
    81 00006156 5B                  <1>     pop rbx
    82 00006157 58                  <1>     pop rax
    83 00006158 C3                  <1>     ret
    84                              <1> 
    85                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    86 00006159 4889FB              <1>     mov rbx, rdi
    87 0000615C 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    88 0000615F 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    89 00006161 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    90                              <1> ;Now fall through to general error
    91                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    92 00006164 B401                <1>     mov ah, 01h
    93 00006166 CD33                <1>     int 33h ;Read status of last operation
    94 00006168 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    95 0000616B B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    96 0000616D 7460                <1>     je .msdWriteErrorCode 
    97 0000616F B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    98 00006171 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    99 00006174 7459                <1>     je .msdWriteErrorCode 
   100 00006176 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   101 00006179 7454                <1>     je .msdWriteErrorCode
   102                              <1> ;Device Not Ready
   103 0000617B B002                <1>     mov al, 02h  ;Device not ready code
   104 0000617D 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   105 00006180 744D                <1>     je .msdWriteErrorCode
   106 00006182 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   107 00006186 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   108                              <1> ;Write Protected
   109 0000618A 30C0                <1>     xor al, al
   110 0000618C 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   111 00006191 743C                <1>     je .msdWriteErrorCode
   112                              <1> ;CRC Error
   113 00006193 B004                <1>     mov al, 04h     ;CRC error code
   114 00006195 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   115 0000619A 7433                <1>     je .msdWriteErrorCode
   116 0000619C 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   117 000061A1 742C                <1>     je .msdWriteErrorCode
   118 000061A3 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   119 000061A8 7425                <1>     je .msdWriteErrorCode
   120                              <1> ;Seek Error
   121 000061AA B006                <1>     mov al, 06h     ;Seek error code
   122 000061AC 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   123 000061AF 741E                <1>     je .msdWriteErrorCode
   124                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   125                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   126 000061B1 B007                <1>     mov al, 07h
   127 000061B3 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   128 000061B6 7417                <1>     je .msdWriteErrorCode
   129                              <1> ;Sector Not Found
   130 000061B8 B008                <1>     mov al, 08h     ;Sector not found code
   131 000061BA 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   132 000061BD 7410                <1>     je .msdWriteErrorCode
   133                              <1> ;Write faults
   134 000061BF B00A                <1>     mov al, 0Ah     ;Write fault
   135 000061C1 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   136 000061C4 7409                <1>     je .msdWriteErrorCode
   137                              <1> ;Read faults
   138 000061C6 B00B                <1>     mov al, 0Bh     ;Read fault
   139 000061C8 80F911              <1>     cmp cl, 11h     ;Read error
   140 000061CB 7402                <1>     je .msdWriteErrorCode
   141                              <1> ;General Errors
   142 000061CD B00C                <1>     mov al, 0Ch     ;Everything else is general error
   143                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   144 000061CF B480                <1>     mov ah, 80h ;Set error bit
   145 000061D1 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   146 000061D5 C3                  <1>     ret ;Return to set done bit
   147                              <1> .msdTable:
   148 000061D6 0000                <1>     dw 0                            ;Function 0
   149 000061D8 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   150 000061DA 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   151 000061DC 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   152 000061DE 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   153 000061E0 0000                <1>     dw 0                            ;Function 5
   154 000061E2 0000                <1>     dw 0                            ;Function 6
   155 000061E4 0000                <1>     dw 0                            ;Function 7
   156 000061E6 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   157 000061E8 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   158 000061EA 0000                <1>     dw 0                            ;Function 10
   159 000061EC 0000                <1>     dw 0                            ;Function 11
   160 000061EE C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   161 000061F0 D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   162 000061F2 ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   163 000061F4 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   164 000061F6 0000                <1>     dw 0                            ;Function 16
   165 000061F8 0000                <1>     dw 0                            ;Function 17
   166 000061FA 0000                <1>     dw 0                            ;Function 18
   167 000061FC 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   168 000061FE 0000                <1>     dw 0                            ;Function 20
   169 00006200 0000                <1>     dw 0                            ;Function 21
   170 00006202 0000                <1>     dw 0                            ;Function 22
   171 00006204 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   172 00006206 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   173                              <1> 
   174                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   175                              <1> .msdMedChk:          ;Function 1
   176 00006208 B005                <1>     mov al, 05h ;Bad request structure length
   177 0000620A 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   178 0000620D 75C0                <1>     jne .msdWriteErrorCode
   179                              <1> 
   180 0000620F 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   181 00006214 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   182 0000621B 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   183 0000621E F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   184 00006221 753F                <1>     jnz .mmcNoChange
   185                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   186 00006223 B416                <1>     mov ah, 16h 
   187 00006225 CD33                <1>     int 33h
   188 00006227 0F8237FFFFFF        <1>     jc .msdGenDiskError
   189 0000622D 80FC80              <1>     cmp ah, 80h
   190 00006230 740E                <1>     je .mmcNoChangeLine
   191 00006232 80FC86              <1>     cmp ah, 86h
   192 00006235 7409                <1>     je .mmcNoChangeLine
   193 00006237 84E4                <1>     test ah, ah ;No change?
   194 00006239 7427                <1>     jz .mmcNoChange
   195 0000623B F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   196 0000623E 750D                <1>     jnz .mmcChange
   197                              <1> ;If nothing, fall through and test manually, should never happen though
   198                              <1> .mmcNoChangeLine:
   199                              <1> ;Now we test Media Descriptor
   200 00006240 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   201 00006245 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   202 00006248 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   203 0000624B 7410                <1>     je .mmcUnsure
   204                              <1> .mmcChange:
   205 0000624D C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   206 00006251 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   207 00006258 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   208                              <1>     ;Check here if there were any open handles on the device when it was changed
   209 0000625C C3                  <1>     ret
   210                              <1> .mmcUnsure:
   211 0000625D C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   212 00006261 C3                  <1>     ret
   213                              <1> .mmcNoChange:
   214 00006262 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   215 00006266 C3                  <1>     ret
   216                              <1> 
   217                              <1> 
   218                              <1> .msdBuildBPB:        ;Function 2
   219 00006267 B005                <1>     mov al, 05h ;Bad request structure length
   220 00006269 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   221 0000626C 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   222                              <1> 
   223 00006272 4889DE              <1>     mov rsi, rbx
   224 00006275 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   225 0000627A 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   226 00006281 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   227 00006284 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   228 00006288 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   229 0000628A 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   230 0000628D B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   231 00006292 CD33                <1>     int 33h
   232 00006294 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   233                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   234 0000629A 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   235 0000629E 7418                <1>     je .mbbpb0
   236 000062A0 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   237 000062A4 7412                <1>     je .mbbpb0
   238 000062A6 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   239 000062AA 740C                <1>     je .mbbpb0
   240 000062AC 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   241 000062B0 B007                <1>     mov al, 07h ;Unknown media error code
   242 000062B2 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   243                              <1> .mbbpb0:
   244 000062B8 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   245 000062BB 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   246 000062C0 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   247 000062C7 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   248 000062CB 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   249 000062CE 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   250 000062D2 B90F000000          <1>     mov ecx, bpbEx_size/8
   251 000062D7 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   252 000062DA C3                  <1>     ret
   253                              <1> .msdIOCTLRead:       ;Function 3, returns done
   254 000062DB B005                <1>     mov al, drvBadDrvReq
   255 000062DD 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   256 000062E0 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   257 000062E6 C3                  <1>     ret
   258                              <1> .msdRead:            ;Function 4
   259                              <1> ;Will read one sector at a time.
   260 000062E7 B005                <1>     mov al, 05h ;Bad request structure length
   261 000062E9 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   262 000062EC 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   263                              <1> 
   264 000062F2 4889DF              <1>     mov rdi, rbx
   265 000062F5 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   266                              <1> .msdr0:
   267 000062F7 B682                <1>     mov dh, 82h ;LBA Read Sectors
   268 000062F9 E841010000          <1>     call .msdBlkIOCommon
   269 000062FE 0F8255FEFFFF        <1>     jc .msdIOError
   270 00006304 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   271 0000630C 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   272 00006314 FFC6                <1>     inc esi
   273 00006316 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   274 00006319 75DC                <1>     jne .msdr0
   275 0000631B 4889FB              <1>     mov rbx, rdi
   276 0000631E C3                  <1>     ret
   277                              <1> .msdWrite:           ;Function 8
   278                              <1> ;Will write one sector at a time.
   279 0000631F B005                <1>     mov al, 05h ;Bad request structure length
   280 00006321 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   281 00006324 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   282                              <1> 
   283 0000632A 4889DF              <1>     mov rdi, rbx
   284 0000632D 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   285                              <1> .msdw0:
   286 0000632F B683                <1>     mov dh, 83h ;LBA Write Sectors
   287 00006331 E809010000          <1>     call .msdBlkIOCommon
   288 00006336 0F821DFEFFFF        <1>     jc .msdIOError
   289 0000633C 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   290 00006344 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   291 0000634C FFC6                <1>     inc esi
   292 0000634E 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   293 00006351 75DC                <1>     jne .msdw0
   294 00006353 4889FB              <1>     mov rbx, rdi
   295 00006356 C3                  <1>     ret
   296                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   297                              <1> ;Will write one sector at a time and then verify it.
   298 00006357 B005                <1>     mov al, 05h ;Bad request structure length
   299 00006359 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   300 0000635C 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   301                              <1> 
   302 00006362 4889DF              <1>     mov rdi, rbx
   303 00006365 31F6                <1>     xor esi, esi  ;Set counter to zero
   304                              <1> .msdwv0:
   305 00006367 B683                <1>     mov dh, 83h ;LBA Write Sectors
   306 00006369 E8D1000000          <1>     call .msdBlkIOCommon
   307 0000636E 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   308 00006374 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   309 00006376 E8C4000000          <1>     call .msdBlkIOCommon
   310 0000637B 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   311 00006381 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   312 00006389 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   313 00006391 FFC6                <1>     inc esi
   314 00006393 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   315 00006396 75CF                <1>     jne .msdwv0
   316 00006398 4889FB              <1>     mov rbx, rdi
   317 0000639B C3                  <1>     ret
   318                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   319 0000639C B005                <1>     mov al, drvBadDrvReq
   320 0000639E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   321 000063A1 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   322                              <1> 
   323 000063A7 C3                  <1>     ret
   324                              <1> .msdDevOpen:         ;Function 13
   325 000063A8 B005                <1>     mov al, drvBadDrvReq
   326 000063AA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   327 000063AD 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   328                              <1> 
   329 000063B3 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   330 000063B8 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   331 000063BF FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   332 000063C2 C3                  <1>     ret
   333                              <1> .msdDevClose:        ;Function 14
   334 000063C3 B005                <1>     mov al, drvBadDrvReq
   335 000063C5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   336 000063C8 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   337                              <1> 
   338 000063CE 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   339 000063D3 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   340 000063DA FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   341 000063DD C3                  <1>     ret
   342                              <1> .msdRemovableMedia:  ;Function 15
   343 000063DE B005                <1>     mov al, drvBadDrvReq
   344 000063E0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   345 000063E3 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   346                              <1> 
   347 000063E9 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   348 000063EE 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   349 000063F5 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   350 000063F8 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   351 000063FD 31D2                <1>     xor edx, edx    ;Busy bit clear
   352 000063FF A880                <1>     test al, 80h
   353 00006401 0F44CA              <1>     cmovz ecx, edx
   354 00006404 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   355 00006408 C3                  <1>     ret
   356                              <1> .msdGenericIOCTL:    ;Function 19
   357 00006409 B005                <1>     mov al, drvBadDrvReq
   358 0000640B 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   359 0000640E 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   360                              <1> 
   361 00006414 C3                  <1>     ret
   362                              <1> .msdGetLogicalDev:   ;Function 23
   363 00006415 B005                <1>     mov al, drvBadDrvReq
   364 00006417 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   365 0000641A 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   366                              <1> 
   367 00006420 8A0541000000        <1>     mov al, byte [.msdCurDev]
   368 00006426 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   369 00006429 C3                  <1>     ret
   370                              <1> .msdSetLogicalDev:   ;Function 24
   371 0000642A B005                <1>     mov al, drvBadDrvReq
   372 0000642C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   373 0000642F 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   374                              <1> 
   375 00006435 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   376 00006438 880529000000        <1>     mov byte [.msdCurDev], al
   377 0000643E C3                  <1>     ret
   378                              <1> 
   379                              <1> .msdBlkIOCommon:  ;Does block IO
   380                              <1> ;Called with rdi containing old rbx value and ah with function number
   381                              <1> ;rbp points to bpb
   382                              <1> ;Error handled by caller
   383                              <1> ;Sector count handled by caller
   384                              <1> ;Called with dh = BIOS function number
   385 0000643F 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   386 00006444 8A90[68640000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   387 0000644A 31C9                <1>     xor ecx, ecx
   388 0000644C 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   389 0000644F 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   390 00006453 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   391 00006457 88F4                <1>     mov ah, dh
   392 00006459 B001                <1>     mov al, 01h ;Do one sector at a time 
   393 0000645B CD33                <1>     int 33h
   394 0000645D C3                  <1>     ret
   395                              <1> 
   396 0000645E 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   397                              <1> ;LASTDRIVE default is 5
   398                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   399                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   400 00006467 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   401                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   402 00006468 0001FFFFFF          <1> .msdBIOSmap  db 0, 1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   403 0000646D 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   404 00006472 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   404 0000647B 000000000000000000- <1>
   404 00006484 000000000000000000- <1>
   404 0000648D 000000000000000000- <1>
   404 00006496 00000000            <1>
   405                              <1> .msdBPBblks  defaultBPB ;Add two default BPB's. If no remdrv, these are used
   405                              <2> .msdBPBblks :
   181 0000649A E9                  <2>  db 0E9h
   182 0000649B 00                  <2>  db 00h
   183 0000649C 90                  <2>  db 90h
   184 0000649D 534350444F537631    <2>  db 'SCPDOSv1'
   185 000064A5 0002                <2>  dw 0200h
   186 000064A7 01                  <2>  db 01h
   187 000064A8 0100                <2>  dw 0001h
   188 000064AA 02                  <2>  db 02h
   189 000064AB E000                <2>  dw 00E0h
   190 000064AD 400B                <2>  dw 0B40h
   191 000064AF F0                  <2>  db 0F0h
   192 000064B0 0900                <2>  dw 0009h
   193 000064B2 1200                <2>  dw 0012h
   194 000064B4 0200                <2>  dw 0002h
   195 000064B6 00000000            <2>  dd 0
   196 000064BA 00000000            <2>  dd 0
   197 000064BE 00                  <2>  db 00h
   198 000064BF 00                  <2>  db 00h
   199 000064C0 29                  <2>  db 29h
   200 000064C1 00000000            <2>  dd 0
   201 000064C5 4E4F204E414D452020- <2>  db 'NO NAME    '
   201 000064CE 2020                <2>
   202 000064D0 4641543132202020    <2>  db 'FAT12   '
   203 000064D8 000000000000000000- <2>  db 58 dup 0
   203 000064E1 000000000000000000- <2>
   203 000064EA 000000000000000000- <2>
   203 000064F3 000000000000000000- <2>
   203 000064FC 000000000000000000- <2>
   203 00006505 000000000000000000- <2>
   203 0000650E 00000000            <2>
   406                              <1>              defaultBPB ;If remdrvs found, these are overridden
   181 00006512 E9                  <2>  db 0E9h
   182 00006513 00                  <2>  db 00h
   183 00006514 90                  <2>  db 90h
   184 00006515 534350444F537631    <2>  db 'SCPDOSv1'
   185 0000651D 0002                <2>  dw 0200h
   186 0000651F 01                  <2>  db 01h
   187 00006520 0100                <2>  dw 0001h
   188 00006522 02                  <2>  db 02h
   189 00006523 E000                <2>  dw 00E0h
   190 00006525 400B                <2>  dw 0B40h
   191 00006527 F0                  <2>  db 0F0h
   192 00006528 0900                <2>  dw 0009h
   193 0000652A 1200                <2>  dw 0012h
   194 0000652C 0200                <2>  dw 0002h
   195 0000652E 00000000            <2>  dd 0
   196 00006532 00000000            <2>  dd 0
   197 00006536 00                  <2>  db 00h
   198 00006537 00                  <2>  db 00h
   199 00006538 29                  <2>  db 29h
   200 00006539 00000000            <2>  dd 0
   201 0000653D 4E4F204E414D452020- <2>  db 'NO NAME    '
   201 00006546 2020                <2>
   202 00006548 4641543132202020    <2>  db 'FAT12   '
   203 00006550 000000000000000000- <2>  db 58 dup 0
   203 00006559 000000000000000000- <2>
   203 00006562 000000000000000000- <2>
   203 0000656B 000000000000000000- <2>
   203 00006574 000000000000000000- <2>
   203 0000657D 000000000000000000- <2>
   203 00006586 00000000            <2>
   407 0000658A 000000000000000000- <1>              db 3*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   407 00006593 000000000000000000- <1>
   407 0000659C 000000000000000000- <1>
   407 000065A5 000000000000000000- <1>
   407 000065AE 000000000000000000- <1>
   407 000065B7 000000000000000000- <1>
   407 000065C0 000000000000000000- <1>
   407 000065C9 000000000000000000- <1>
   407 000065D2 000000000000000000- <1>
   407 000065DB 000000000000000000- <1>
   407 000065E4 000000000000000000- <1>
   407 000065ED 000000000000000000- <1>
   407 000065F6 000000000000000000- <1>
   407 000065FF 000000000000000000- <1>
   407 00006608 000000000000000000- <1>
   407 00006611 000000000000000000- <1>
   407 0000661A 000000000000000000- <1>
   407 00006623 000000000000000000- <1>
   407 0000662C 000000000000000000- <1>
   407 00006635 000000000000000000- <1>
   407 0000663E 000000000000000000- <1>
   407 00006647 000000000000000000- <1>
   407 00006650 000000000000000000- <1>
   407 00006659 000000000000000000- <1>
   407 00006662 000000000000000000- <1>
   407 0000666B 000000000000000000- <1>
   407 00006674 000000000000000000- <1>
   407 0000667D 000000000000000000- <1>
   407 00006686 000000000000000000- <1>
   407 0000668F 000000000000000000- <1>
   407 00006698 000000000000000000- <1>
   407 000066A1 000000000000000000- <1>
   407 000066AA 000000000000000000- <1>
   407 000066B3 000000000000000000- <1>
   407 000066BC 000000000000000000- <1>
   407 000066C5 000000000000000000- <1>
   407 000066CE 000000000000000000- <1>
   407 000066D7 000000000000000000- <1>
   407 000066E0 000000000000000000- <1>
   407 000066E9 000000000000000000  <1>
   408                              <1> endptr equ $
    45                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    46                                  ;Paragraph alignment
    47                                  %include "./Source/BSS/dosDynaDataArea.asm"
    48                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    49                              <1> ; the MCB chain!
    50                              <1> ddaStart:
    51 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    52                              <1> 
    53                              <1> dosDynamicArea: ;Difference of this symbol with cfgFrame endPtr gives alloc size
    54                              <1> ;Create DPB chain of first 5 available DPB slots
    55 00000010 <res 35h>           <1> firstDPB        resb dpb_size   ;First two are always present
    56 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    57 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    58 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    59 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    60                              <1> 
    61                              <1> ;fcbsArray       resb sfth_size + 4*sft_size ;One header plus 4 SFT entries
    62                              <1> 
    63 00000119 <res 1C7h>          <1> cdsArray        resb 5*cds_size ;5 CDS's unless more are specified
    64                              <1> 
    65 000002E0 <res 30h>           <1> tmpBufHdr       resb bufferHdr_size
    66 00000310 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    67                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    68                              <1> cfgLoad:    ;This symbol is used to read config.sys here
    69                              <1> dynamicDataAreaLength equ $ - ddaStart
    69          ------------------  <1>  info: assembly required 1+12+2 passes

